{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377",
    "id": 1949202161,
    "node_id": "PR_kwDOABII5850Lnbx",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/30377",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/30377.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/30377.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/01e18d94d9577f415748869376988e3f0f59ced0",
    "number": 30377,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "refactor: Replace ParseHex with consteval HexLiteral",
    "user": {
      "login": "hodlinator",
      "id": 172445034,
      "node_id": "U_kgDOCkdNag",
      "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hodlinator",
      "html_url": "https://github.com/hodlinator",
      "followers_url": "https://api.github.com/users/hodlinator/followers",
      "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
      "organizations_url": "https://api.github.com/users/hodlinator/orgs",
      "repos_url": "https://api.github.com/users/hodlinator/repos",
      "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/hodlinator/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Motivation:\r\n* Validates and converts the hex string into bytes at compile time instead of at runtime like `ParseHex()`.\r\n* Eliminates runtime dependencies: https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2214432177, https://github.com/bitcoin/bitcoin/pull/30048#discussion_r1592108480\r\n* Has stricter requirements than `ParseHex()` (disallows whitespace and uppercase hex digits) and replaces it in a bunch of places.\r\n* Makes it possible to derive other compile time constants.\r\n* Minor: should shave off a few runtime CPU cycles.\r\n\r\nAlso makes `uint256` hex string constructor disallow uppercase hex digits. Discussed: https://github.com/bitcoin/bitcoin/pull/30560#discussion_r1701323070\r\n\r\nSurprisingly does not make the binary smaller (built x86_64-linux-gnu guix bitcoind binary) - actually grows by 0.11% (~120 KiB).\r\n\r\nSpawned already merged PRs: #30436, #30482, #30532, #30560.",
    "labels": [
      {
        "id": 135961,
        "node_id": "MDU6TGFiZWwxMzU5NjE=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
        "name": "Refactoring",
        "color": "E6F6D6",
        "default": false
      }
    ],
    "created_at": "2024-07-02T10:50:08Z",
    "updated_at": "2024-08-16T15:47:57Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "2cb6e906e342f20bda77563c7817205788075afa",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "hodlinator:2024-07_uint256S_consteval",
      "ref": "2024-07_uint256S_consteval",
      "sha": "01e18d94d9577f415748869376988e3f0f59ced0",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 813856282,
        "node_id": "R_kgDOMIJ2Gg",
        "name": "bitcoin",
        "full_name": "hodlinator/bitcoin",
        "owner": {
          "login": "hodlinator",
          "id": 172445034,
          "node_id": "U_kgDOCkdNag",
          "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/hodlinator",
          "html_url": "https://github.com/hodlinator",
          "followers_url": "https://api.github.com/users/hodlinator/followers",
          "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
          "organizations_url": "https://api.github.com/users/hodlinator/orgs",
          "repos_url": "https://api.github.com/users/hodlinator/repos",
          "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/hodlinator/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/hodlinator/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/hodlinator/bitcoin",
        "archive_url": "https://api.github.com/repos/hodlinator/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/hodlinator/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/hodlinator/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/hodlinator/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/hodlinator/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/hodlinator/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/hodlinator/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/hodlinator/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/hodlinator/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/hodlinator/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/hodlinator/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/hodlinator/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/hodlinator/bitcoin/events",
        "forks_url": "https://api.github.com/repos/hodlinator/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/hodlinator/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/hodlinator/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/hodlinator/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/hodlinator/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/hodlinator/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/hodlinator/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/hodlinator/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/hodlinator/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/hodlinator/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/hodlinator/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/hodlinator/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/hodlinator/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/hodlinator/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/hodlinator/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/hodlinator/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:hodlinator/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/hodlinator/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/hodlinator/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/hodlinator/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/hodlinator/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/hodlinator/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/hodlinator/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/hodlinator/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/hodlinator/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/hodlinator/bitcoin/hooks",
        "svn_url": "https://github.com/hodlinator/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 224551,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-08-16T12:21:32Z",
        "created_at": "2024-06-11T22:00:51Z",
        "updated_at": "2024-08-14T02:59:01Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "99ecb9a630e68f7fa5a449065020292790e3e7fb",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36007,
        "stargazers_count": 77895,
        "watchers_count": 77895,
        "size": 265646,
        "default_branch": "master",
        "open_issues_count": 655,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-08-16T15:54:40Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-08-16T15:54:46Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 412,
    "deletions": 336,
    "changed_files": 31,
    "commits": 7,
    "review_comments": 176,
    "comments": 19
  },
  "events": [
    {
      "event": "commented",
      "id": 2202720361,
      "node_id": "IC_kwDOABII586DSthp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2202720361",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-02T10:50:10Z",
      "updated_at": "2024-08-16T15:47:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/30377).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Approach ACK | [stickies-v](https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2238242329) |\n| Stale ACK | [ryanofsky](https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2241499736), [maflcko](https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2242829972) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#30571](https://github.com/bitcoin/bitcoin/pull/30571) (test: [refactor] Use g_rng/m_rng directly by maflcko)\n* [#29119](https://github.com/bitcoin/bitcoin/pull/29119) (refactor: Use std::span over Span by maflcko)\n* [#29071](https://github.com/bitcoin/bitcoin/pull/29071) (refactor: Remove Span operator==, Use std::ranges::equal by maflcko)\n* [#26593](https://github.com/bitcoin/bitcoin/pull/26593) (tracing: Only prepare tracepoint arguments when actually tracing by 0xB10C)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2202720361",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "labeled",
      "id": 13363990793,
      "node_id": "LE_lADOABII586ONi66zwAAAAMcjlEJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13363990793",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-02T10:50:12Z",
      "label": {
        "name": "Refactoring",
        "color": "E6F6D6"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13370582119,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMc8uRn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13370582119",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-02T19:10:24Z"
    },
    {
      "event": "labeled",
      "id": 13393384086,
      "node_id": "LE_lADOABII586ONi66zwAAAAMeTtKW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13393384086",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-04T11:13:36Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2208857200,
      "node_id": "IC_kwDOABII586DqHxw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2208857200",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-04T12:29:51Z",
      "updated_at": "2024-07-04T12:29:51Z",
      "author_association": "MEMBER",
      "body": "> **transaction_identifier.h** - Fixed dormant bug in `TxidFromString()` where the `string_view` length wasn't respected(!).\r\n\r\nThis is known, see https://github.com/bitcoin/bitcoin/pull/28922#discussion_r1404437378. Thanks for picking it up!\r\n\r\nMaybe submit the fix first?\r\n\r\n\r\n\r\n> Realizing my GH history has minimum proof of work, I might have delayed creating a PR, but it felt timely as Testnet 4 is being worked on.\r\n\r\nNot sure what this has to do with testnet 4. May be best to remove unrelated non-technical details from the commits and pull request description. (You can still share them in later comments, if you really want)\r\n\r\n\r\nConcept ACK. The same should be done to `ParseHex`: https://github.com/bitcoin/bitcoin/pull/30048#discussion_r1592108480\r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2208857200",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "commented",
      "id": 2211455306,
      "node_id": "IC_kwDOABII586D0CFK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2211455306",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-05T22:00:08Z",
      "updated_at": "2024-07-05T22:00:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > **transaction_identifier.h** - Fixed dormant bug in `TxidFromString()` where the `string_view` length wasn't respected(!).\r\n> \r\n> This is known, see [#28922 (comment)](https://github.com/bitcoin/bitcoin/pull/28922#discussion_r1404437378). Thanks for picking it up!\r\n>\r\n> Maybe submit the fix first?\r\n\r\nAha, good that you are tracking it! I see at least 4 possible fixes:\r\n\r\n1. Switch back to `Txid TxidFromString(const std::string& str)`\r\n2. Make `TxidFromString()` convert from `std::string_view` back to `std::string` internally before calling `uint256S()` to introduce a null-terminator.\r\n3. Carry over the full `SetHex(std::string_view)` implementation from this PR without touching the `SetHex(const char*)` implementation.\r\n4. Like 3 but implement `SetHex(const char* str)` by calling the `std::string_view` version.\r\n\r\nWhich do you recommend?\r\n\r\n> > Realizing my GH history has minimum proof of work, I might have delayed creating a PR, but it felt timely as Testnet 4 is being worked on.\r\n> \r\n> Not sure what this has to do with testnet 4. May be best to remove unrelated non-technical details from the commits and pull request description. (You can still share them in later comments, if you really want)\r\n\r\nThanks for the feedback. The Testnet 4 PR from this weeks review club introduces new hash-literals to the code, but I concede that it's a weak argument.\r\n\r\n> Concept ACK. The same should be done to `ParseHex`: [#30048 (comment)](https://github.com/bitcoin/bitcoin/pull/30048#discussion_r1592108480)\r\n\r\nThanks for having a look and the pointer to `ParseHex`! It was on my radar momentarily but I didn't reconsider it after reaching the current solution for `uint256S()`. Should probably introduce a `consteval ParseHex(const char*)` implementation as part of this PR. Moving to draft for now.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2211455306",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "convert_to_draft",
      "id": 13409704329,
      "node_id": "CTDE_lADOABII586ONi66zwAAAAMfR9mJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13409704329",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-05T22:00:29Z"
    },
    {
      "event": "commented",
      "id": 2213171483,
      "node_id": "IC_kwDOABII586D6lEb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2213171483",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-08T06:47:17Z",
      "updated_at": "2024-07-08T06:47:17Z",
      "author_association": "MEMBER",
      "body": "> Like 3 but implement `SetHex(const char* str)` by calling the `std::string_view` version.\r\n\r\nI don't think `const char*` overloads will need to be provided when `string_view` exists. Seems fine to just have a single `sting_view` function (and call it a fix at the same time).",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2213171483",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "commented",
      "id": 2214432177,
      "node_id": "IC_kwDOABII586D_Y2x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2214432177",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-08T15:22:15Z",
      "updated_at": "2024-07-08T15:22:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, and would be very nice for this to cover ParseHex. If it did, it seems like it would fix the unexpected consensus library dependency on the util library that hebasto reported in https://github.com/bitcoin/bitcoin/pull/29015#issuecomment-2209258843: \r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/a83f050dbe1392fc6b1b6c2a140c7346653b40d3/src/pubkey.cpp#L193\r\n\r\n\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2214432177",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13484305210,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMjuis6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13484305210",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-12T09:03:00Z"
    },
    {
      "event": "commented",
      "id": 2225154172,
      "node_id": "IC_kwDOABII586EoSh8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2225154172",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-12T09:09:21Z",
      "updated_at": "2024-07-12T09:09:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > **transaction_identifier.h** - Fixed dormant bug in `TxidFromString()` where the `string_view` length wasn't respected(!).\r\n> \r\n> This is known, see [#28922 (comment)](https://github.com/bitcoin/bitcoin/pull/28922#discussion_r1404437378). Thanks for picking it up!\r\n> \r\n> Maybe submit the fix first?\r\n\r\nPR up now: #30436",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2225154172",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13484471753,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMjvLXJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13484471753",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-12T09:16:32Z"
    },
    {
      "event": "unlabeled",
      "id": 13484542575,
      "node_id": "UNLE_lADOABII586ONi66zwAAAAMjvcpv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13484542575",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-12T09:22:41Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13485120335,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMjxptP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13485120335",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-12T10:10:54Z"
    },
    {
      "event": "renamed",
      "id": 13485134435,
      "node_id": "RTE_lADOABII586ONi66zwAAAAMjxtJj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13485134435",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-12T10:12:12Z",
      "rename": {
        "from": "refactor: Make uint256S(const char*) consteval",
        "to": "refactor: Make uint256S(const char*) and ParseHex(const char*) consteval"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13492563809,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMkOC9h",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13492563809",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-12T21:53:42Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13495499192,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMkZPm4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13495499192",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-13T13:41:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13527003181,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMmRbAt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13527003181",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-16T20:57:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13527045694,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMmRlY-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13527045694",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-16T21:01:39Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13527449652,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMmTIA0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13527449652",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-16T21:51:21Z"
    },
    {
      "event": "commented",
      "id": 2231885215,
      "node_id": "IC_kwDOABII586FB92f",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2231885215",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-16T21:51:26Z",
      "updated_at": "2024-07-16T21:51:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/27531471253</sub>\n\n<details><summary>Hints</summary>\n\nMake sure to run all tests locally, according to the documentation.\n\nThe failure may happen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2231885215",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "labeled",
      "id": 13527450250,
      "node_id": "LE_lADOABII586ONi66zwAAAAMmTIKK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13527450250",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-16T21:51:26Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 13530104045,
      "node_id": "UNLE_lADOABII586ONi66zwAAAAMmdQDt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13530104045",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-17T03:18:15Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2181892158,
      "node_id": "PRR_kwDOABII586CDQg-",
      "url": null,
      "actor": null,
      "commit_id": "92b0fb059f81959abbfe995b32ea103c2aa8db46",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2181892158",
      "submitted_at": "2024-07-17T05:23:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "reviewed",
      "id": 2181909441,
      "node_id": "PRR_kwDOABII586CDUvB",
      "url": null,
      "actor": null,
      "commit_id": "92b0fb059f81959abbfe995b32ea103c2aa8db46",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2181909441",
      "submitted_at": "2024-07-17T05:27:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "reviewed",
      "id": 2181911444,
      "node_id": "PRR_kwDOABII586CDVOU",
      "url": null,
      "actor": null,
      "commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2181911444",
      "submitted_at": "2024-07-17T05:29:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13554997074,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMn8NdS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13554997074",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T12:39:11Z"
    },
    {
      "event": "renamed",
      "id": 13555194322,
      "node_id": "RTE_lADOABII586ONi66zwAAAAMn89nS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13555194322",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T12:52:54Z",
      "rename": {
        "from": "refactor: Make uint256S(const char*) and ParseHex(const char*) consteval",
        "to": "refactor: Add consteval uint256(const char (&str)[65]) and ParseHex(const char (&s)[Size])"
      }
    },
    {
      "event": "renamed",
      "id": 13555206656,
      "node_id": "RTE_lADOABII586ONi66zwAAAAMn9AoA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13555206656",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T12:53:49Z",
      "rename": {
        "from": "refactor: Add consteval uint256(const char (&str)[65]) and ParseHex(const char (&s)[Size])",
        "to": "refactor: Add consteval uint256(\"str\") and ParseHex(\"str\")"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13555896145,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMn_o9R",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13555896145",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T13:23:33Z"
    },
    {
      "event": "commented",
      "id": 2236516058,
      "node_id": "IC_kwDOABII586FToba",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2236516058",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T13:23:39Z",
      "updated_at": "2024-07-18T13:23:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/27614934599</sub>\n\n<details><summary>Hints</summary>\n\nMake sure to run all tests locally, according to the documentation.\n\nThe failure may happen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2236516058",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "labeled",
      "id": 13555897438,
      "node_id": "LE_lADOABII586ONi66zwAAAAMn_pRe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13555897438",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T13:23:39Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2236517862,
      "node_id": "IC_kwDOABII586FTo3m",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2236517862",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T13:24:34Z",
      "updated_at": "2024-07-18T13:24:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "(Fixed QT/GUI CI errors).",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2236517862",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "reviewed",
      "id": 2185798321,
      "node_id": "PRR_kwDOABII586CSKKx",
      "url": null,
      "actor": null,
      "commit_id": "5f07d3eb9695613fe663470d88c4750d1382692c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2185798321",
      "submitted_at": "2024-07-18T13:24:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13556084342,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMoAW52",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13556084342",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T13:36:57Z"
    },
    {
      "event": "reviewed",
      "id": 2185885552,
      "node_id": "PRR_kwDOABII586CSfdw",
      "url": null,
      "actor": null,
      "commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2185885552",
      "submitted_at": "2024-07-18T13:48:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "reviewed",
      "id": 2186032755,
      "node_id": "PRR_kwDOABII586CTDZz",
      "url": null,
      "actor": null,
      "commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2186032755",
      "submitted_at": "2024-07-18T14:33:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "unlabeled",
      "id": 13559435019,
      "node_id": "UNLE_lADOABII586ONi66zwAAAAMoNI8L",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13559435019",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T16:23:42Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13582174228,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMpj4gU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13582174228",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-19T21:38:27Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13593399467,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMqOtCr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13593399467",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-21T19:05:54Z"
    },
    {
      "event": "reviewed",
      "id": 2190864424,
      "node_id": "PRR_kwDOABII586ClfAo",
      "url": null,
      "actor": null,
      "commit_id": "146a2db9e17466b3ff06a66103d5480bda2e6dba",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2190864424",
      "submitted_at": "2024-07-22T07:48:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13597363317,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMqd0x1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13597363317",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-22T08:15:36Z"
    },
    {
      "event": "referenced",
      "id": 13619712190,
      "node_id": "REFE_lADOABII586ONi66zwAAAAMrzFC-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13619712190",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7cc00bfc86b4dece2e3baef5b12e910d79c822a1",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cc00bfc86b4dece2e3baef5b12e910d79c822a1",
      "created_at": "2024-07-23T18:19:35Z"
    },
    {
      "event": "labeled",
      "id": 13621177292,
      "node_id": "LE_lADOABII586ONi66zwAAAAMr4qvM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13621177292",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-23T20:26:56Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13666516553,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMuln5J",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13666516553",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-26T22:21:35Z"
    },
    {
      "event": "renamed",
      "id": 13666518397,
      "node_id": "RTE_lADOABII586ONi66zwAAAAMuloV9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13666518397",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-26T22:22:00Z",
      "rename": {
        "from": "refactor: Add consteval uint256(\"str\") and ParseHex(\"str\")",
        "to": "refactor: Add consteval uint256{\"str\"}"
      }
    },
    {
      "event": "commented",
      "id": 2253592887,
      "node_id": "IC_kwDOABII586GUxk3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2253592887",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-26T22:29:58Z",
      "updated_at": "2024-07-26T22:29:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "I've scaled back this PR again to only concern itself with `uint256` and not `ParseHex` in the hopes of getting it merged.\r\n\r\nEven if it doesn't get merged in favor of work by @stickies-v (https://github.com/bitcoin/bitcoin/pull/30482#discussion_r1693314022) at least it might provide valuable input without too much distraction.\r\n\r\nWill try to make use of discussion around `ParseHex` approaches here in later PR.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2253592887",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "mentioned",
      "id": 13666554080,
      "node_id": "MEE_lADOABII586ONi66zwAAAAMulxDg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13666554080",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-26T22:29:59Z"
    },
    {
      "event": "subscribed",
      "id": 13666554082,
      "node_id": "SE_lADOABII586ONi66zwAAAAMulxDi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13666554082",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-26T22:30:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13666577770,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMul21q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13666577770",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-26T22:35:26Z"
    },
    {
      "event": "unlabeled",
      "id": 13666915311,
      "node_id": "UNLE_lADOABII586ONi66zwAAAAMunJPv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13666915311",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-27T00:07:31Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "ready_for_review",
      "id": 13668802827,
      "node_id": "RFRE_lADOABII586ONi66zwAAAAMuuWEL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13668802827",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-27T13:02:45Z"
    },
    {
      "event": "commented",
      "id": 2257792024,
      "node_id": "IC_kwDOABII586GkywY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2257792024",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T08:37:09Z",
      "updated_at": "2024-07-30T08:37:09Z",
      "author_association": "MEMBER",
      "body": "> While this may not be a hot spot, it's better hygiene _in C++20_ to store the parsed data blob directly in the binary, without any parsing at runtime.\r\n\r\nI don't understand the motivation for this change. You seem to imply that this is some vague performance improvement. However, this is  questionable.\r\n\r\n\r\nWithout a benchmark or otherwise steps to reproduce, those claims are hard to follow. Also, I'd argue performance is irrelevant in the touched code parts.\r\n\r\nThe real reason is that there is now strict compile-time checking for full validity of the hex string. Previously, any invalid string was accepted silently. I'd say this should be explained in the motivation and not silently omitted.\r\n\r\nAn alternative to the changes in this pull request would be to change the changed lines to `*Assert(uint256::FromHex(...))` to get some of the same benefits (at runtime).",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2257792024",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "commented",
      "id": 2257802299,
      "node_id": "IC_kwDOABII586Gk1Q7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2257802299",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T08:42:06Z",
      "updated_at": "2024-07-30T08:42:06Z",
      "author_association": "MEMBER",
      "body": "Maybe even close this pull request and open a fresh one, given that most discussion and conceptual feedback is about something that is now dropped from the pull? https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2214432177",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2257802299",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "commented",
      "id": 2258277800,
      "node_id": "IC_kwDOABII586GmpWo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2258277800",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T12:51:49Z",
      "updated_at": "2024-07-30T12:51:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "I think I don't understand the suggestion to this close PR, or maybe I just disagree with it. It seems like there are a lot of reasons to think this is a good change. It does seem like the main benefit is that constants can be checked at compile time rather than runtime, but this change can also eliminate runtime dependencies(*), make it possible to derive other constants programmatically rather than hardcoding them as opaque binary strings, make the binary smaller, and make it start up faster. The term \"hygiene\" can be a little vague, but if this change enables all of that, it seems like good hygiene to me.\r\n\r\n(*) Even if this change doesn't make ParseHex consteval right now, it seems like it would help make it consteval in the future, unless I'm missing something.\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2258277800",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "commented",
      "id": 2258339031,
      "node_id": "IC_kwDOABII586Gm4TX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2258339031",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T13:21:30Z",
      "updated_at": "2024-07-30T13:21:30Z",
      "author_association": "MEMBER",
      "body": "> I think I don't understand the suggestion to this close PR\r\n\r\nTo clarify with \"close this pull request and open a fresh one\" I meant \"close this pull request and open a fresh one with the exact same commits, including a proper motivation and pull request description\". The reason being that most of the discussion comments are not related to the code changes in this pull request anymore. A good chunk of the discussion was about `ParseHex` and about a change that has since been split up and merged (https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2225154172).\r\n\r\nBut anything is fine here. My main feedback is to clarify the motivation (pull request description). This will have to be done whether it is re-opened or not. Otherwise, every single reviewer and future reader will have to do it themselves, like in https://github.com/bitcoin/bitcoin/pull/30436#issuecomment-2238241424.\r\n\r\nAlso, to clarify:\r\n\r\n* Concept ACK on `consteval uint256`.\r\n* Concept ACK on `consteval` vector hex parsing. (Looking forward to review a pull request with this)",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2258339031",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "convert_to_draft",
      "id": 13707693152,
      "node_id": "CTDE_lADOABII586ONi66zwAAAAMxCsxg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13707693152",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-31T10:18:15Z"
    },
    {
      "event": "commented",
      "id": 2260179265,
      "node_id": "IC_kwDOABII586Gt5lB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2260179265",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-31T10:22:03Z",
      "updated_at": "2024-07-31T10:22:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "I'll open a new PR for `uint256{\"str\"}` only (with a clearer motivation) as suggested and possibly re-use this one for `ParseHex` later, unless I don't make that into it's own PR too.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2260179265",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "commented",
      "id": 2260558903,
      "node_id": "IC_kwDOABII586GvWQ3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2260558903",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-31T13:42:36Z",
      "updated_at": "2024-07-31T13:42:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "(#30560 extracted).\r\n\r\n### Differences\r\n\r\n[Comparison](https://github.com/bitcoin/bitcoin/compare/e6b3438aae1bb7311f655d3eeb2331989002cd2f..9813cbf1936a7c03a1837a5f23d1c887d0efe174)\r\n\r\n* Acquiesced to using `string_view` in the uint256-constructor instead of `char[65]`. Makes it more suitable for being called from other `consteval`/`constexpr` contexts.\r\n* Changed arg name to `hex_str` to clarify.\r\n* Cleaned up `hex_str` -> byte loop à la @paplorinc. :)",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2260558903",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "mentioned",
      "id": 13710290717,
      "node_id": "MEE_lADOABII586ONi66zwAAAAMxMm8d",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13710290717",
      "actor": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-31T13:42:37Z"
    },
    {
      "event": "subscribed",
      "id": 13710290740,
      "node_id": "SE_lADOABII586ONi66zwAAAAMxMm80",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13710290740",
      "actor": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-31T13:42:37Z"
    },
    {
      "event": "labeled",
      "id": 13757568526,
      "node_id": "LE_lADOABII586ONi66zwAAAAM0A9YO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13757568526",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-05T03:44:24Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "renamed",
      "id": 13759716055,
      "node_id": "RTE_lADOABII586ONi66zwAAAAM0JJrX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13759716055",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-05T07:40:42Z",
      "rename": {
        "from": "refactor: Add consteval uint256{\"str\"}",
        "to": "on hold: refactor: Add consteval ParseHex variant"
      }
    },
    {
      "event": "referenced",
      "id": 13767075391,
      "node_id": "REFE_lADOABII586ONi66zwAAAAM0lOY_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13767075391",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "21c2879f37ce336af6df878d43ab090eb9d02157",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21c2879f37ce336af6df878d43ab090eb9d02157",
      "created_at": "2024-08-05T16:45:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13863345240,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAM6UdxY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13863345240",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-13T13:10:59Z"
    },
    {
      "event": "renamed",
      "id": 13863364215,
      "node_id": "RTE_lADOABII586ONi66zwAAAAM6UiZ3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13863364215",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-13T13:12:34Z",
      "rename": {
        "from": "on hold: refactor: Add consteval ParseHex variant",
        "to": "refactor: Add consteval ArrayFromBytes()"
      }
    },
    {
      "event": "ready_for_review",
      "id": 13863528223,
      "node_id": "RFRE_lADOABII586ONi66zwAAAAM6VKcf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13863528223",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-13T13:24:05Z"
    },
    {
      "event": "unlabeled",
      "id": 13863944148,
      "node_id": "UNLE_lADOABII586ONi66zwAAAAM6Wv_U",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13863944148",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-13T13:52:05Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2236080683,
      "node_id": "PRR_kwDOABII586FR-Ir",
      "url": null,
      "actor": null,
      "commit_id": "d6d7a0b5221935518d2797aec7abc5c9632cbf68",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Did not review in detail yet but light code review ACK d6d7a0b5221935518d2797aec7abc5c9632cbf68. All changes seem like what I would expect.\r\n\r\nI think I would suggest changing title of PR to \"refactor: Replace ParseHex with consteval ArrayFromHex\" so it mentions ParseHex and it is more obvious how this affects existing code.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2236080683",
      "submitted_at": "2024-08-13T17:09:58Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "review_requested",
      "id": 13866668081,
      "node_id": "RRE_lADOABII586ONi66zwAAAAM6hJAx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13866668081",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-13T17:10:02Z",
      "requested_reviewer": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13873321330,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAM66hVy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13873321330",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-14T01:58:04Z"
    },
    {
      "event": "renamed",
      "id": 13873324923,
      "node_id": "RTE_lADOABII586ONi66zwAAAAM66iN7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13873324923",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-14T01:58:44Z",
      "rename": {
        "from": "refactor: Add consteval ArrayFromBytes()",
        "to": "refactor: Replace ParseHex with consteval ArrayFromHex"
      }
    },
    {
      "event": "reviewed",
      "id": 2237076703,
      "node_id": "PRR_kwDOABII586FVxTf",
      "url": null,
      "actor": null,
      "commit_id": "240bc10e3f5f90fcc386b1a72ee2067a156abff3",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "Mahmoud198425",
        "id": 172866158,
        "node_id": "U_kgDOCk26bg",
        "avatar_url": "https://avatars.githubusercontent.com/u/172866158?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Mahmoud198425",
        "html_url": "https://github.com/Mahmoud198425",
        "followers_url": "https://api.github.com/users/Mahmoud198425/followers",
        "following_url": "https://api.github.com/users/Mahmoud198425/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Mahmoud198425/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Mahmoud198425/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Mahmoud198425/subscriptions",
        "organizations_url": "https://api.github.com/users/Mahmoud198425/orgs",
        "repos_url": "https://api.github.com/users/Mahmoud198425/repos",
        "events_url": "https://api.github.com/users/Mahmoud198425/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Mahmoud198425/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2237076703",
      "submitted_at": "2024-08-14T03:10:50Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "reviewed",
      "id": 2237724166,
      "node_id": "PRR_kwDOABII586FYPYG",
      "url": null,
      "actor": null,
      "commit_id": "240bc10e3f5f90fcc386b1a72ee2067a156abff3",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Left some style nits / questions, feel free to ignore.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2237724166",
      "submitted_at": "2024-08-14T10:42:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "reviewed",
      "id": 2237589001,
      "node_id": "PRR_kwDOABII586FXuYJ",
      "url": null,
      "actor": null,
      "commit_id": "240bc10e3f5f90fcc386b1a72ee2067a156abff3",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I see this has been open for some time, if I missed an old comment that is still relevant, let me know.\r\n\r\nI would prefer some simplifications, since the code becase slightly more complex and I think there are a few simple fixes for that.",
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2237589001",
      "submitted_at": "2024-08-14T11:27:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "reviewed",
      "id": 2237840417,
      "node_id": "PRR_kwDOABII586FYrwh",
      "url": null,
      "actor": null,
      "commit_id": "240bc10e3f5f90fcc386b1a72ee2067a156abff3",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK for more compile time validation.\r\n\r\n~Strangely enough, 09458eadc9a4484ba37a70d1b378ed3f3c9e31d0 [doesn't compile for me](https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716752262) even though CI seems fine.~ edit: [fixed](https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716909297) by bumping to XCode 15",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2237840417",
      "submitted_at": "2024-08-14T11:49:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13884293306,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAM7kYC6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13884293306",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-14T17:25:17Z"
    },
    {
      "event": "reviewed",
      "id": 2238863495,
      "node_id": "PRR_kwDOABII586FcliH",
      "url": null,
      "actor": null,
      "commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 65bc6dcd573fe74d2ce175466c30ed830d17f0fc. Looks good, thanks for working on this, and I think this will avoid the need to add the ParseHex suppression in #30415. Left a few comments but nothing critical.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2238863495",
      "submitted_at": "2024-08-14T18:41:39Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "review_requested",
      "id": 13885474074,
      "node_id": "RRE_lADOABII586ONi66zwAAAAM7o4Ua",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13885474074",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-14T18:41:43Z",
      "requested_reviewer": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 13885474160,
      "node_id": "RRE_lADOABII586ONi66zwAAAAM7o4Vw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13885474160",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-14T18:41:44Z",
      "requested_reviewer": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "reviewed",
      "id": 2238242329,
      "node_id": "PRR_kwDOABII586FaN4Z",
      "url": null,
      "actor": null,
      "commit_id": "240bc10e3f5f90fcc386b1a72ee2067a156abff3",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2238242329",
      "submitted_at": "2024-08-14T18:53:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "reviewed",
      "id": 2238996588,
      "node_id": "PRR_kwDOABII586FdGBs",
      "url": null,
      "actor": null,
      "commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2238996588",
      "submitted_at": "2024-08-14T19:12:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "reviewed",
      "id": 2239004019,
      "node_id": "PRR_kwDOABII586FdH1z",
      "url": null,
      "actor": null,
      "commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2239004019",
      "submitted_at": "2024-08-14T19:33:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDdhYWIwZjZmMDNkMTk1OWRjMzM4YjFiN2M0ZGNkYWEwMmM0NmY4NTQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7aab0f6f03d1959dc338b1b7c4dcdaa02c46f854",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7aab0f6f03d1959dc338b1b7c4dcdaa02c46f854",
      "tree": {
        "sha": "9b9f7b9f75e5e1475fc4180d6015972cebb08242",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b9f7b9f75e5e1475fc4180d6015972cebb08242"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9b9f7b9f75e5e1475fc4180d6015972cebb08242\nparent 5fdbc8b4ee609d7f58dd4dff30e506a7400cd768\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1723666124 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1723666124 +0200\n\nrefactor: Enforce lowercase hex digits for consteval uint256\n\nAlso changes compile-time asserts with comments into throws.\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQKc8Z14btcl2XfpGZhq7ZB4Gu6NXkZSNQ6a3X8hA9vNOQKFtMfDfRTjObCfZC67F/1\nhXjSKppMGSMrMySMS5lAQ=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5fdbc8b4ee609d7f58dd4dff30e506a7400cd768",
          "sha": "5fdbc8b4ee609d7f58dd4dff30e506a7400cd768",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5fdbc8b4ee609d7f58dd4dff30e506a7400cd768"
        }
      ],
      "message": "refactor: Enforce lowercase hex digits for consteval uint256\n\nAlso changes compile-time asserts with comments into throws.",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-14T20:08:44Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-14T20:08:44Z"
      },
      "sha": "7aab0f6f03d1959dc338b1b7c4dcdaa02c46f854"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13887476332,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAM7whJs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13887476332",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-14T21:11:34Z"
    },
    {
      "event": "reviewed",
      "id": 2239975805,
      "node_id": "PRR_kwDOABII586Fg1F9",
      "url": null,
      "actor": null,
      "commit_id": "734ac5a9002493013c0f8afe763f751ac99f89c8",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Left some style nits, feel free to ignore.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2239975805",
      "submitted_at": "2024-08-15T10:06:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "reviewed",
      "id": 2240096017,
      "node_id": "PRR_kwDOABII586FhScR",
      "url": null,
      "actor": null,
      "commit_id": "734ac5a9002493013c0f8afe763f751ac99f89c8",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "We're getting closer, I still hope we don't have to sacrifice some readability.",
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2240096017",
      "submitted_at": "2024-08-15T10:51:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "reviewed",
      "id": 2239084398,
      "node_id": "PRR_kwDOABII586Fdbdu",
      "url": null,
      "actor": null,
      "commit_id": "734ac5a9002493013c0f8afe763f751ac99f89c8",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review 734ac5a9002493013c0f8afe763f751ac99f89c8\r\n\r\nAfter experimenting with simplifying this. I don't think I like this approach anymore. I think adding the `ConstevalHexLiteral` class is basically going out of the way to make the code less efficient and more confusing, because instead of having a clear separation between runtime and compile time functions, we are duplicating code at runtime and compile time to provide a hybrid function that checks hex strings at compile time and then stores the unparsed hex strings in the binary to be parsed later at runtime, instead of just doing the obvious thing and storing bytes so nothing needs to be parsed at runtime.\r\n\r\nI implemented a simpler approach in https://github.com/ryanofsky/bitcoin/commits/pr/hex providing straightforward `util::HexLiteral` and `util::Vec` functions that I think would be good to adopt here. The changed commits are;\r\n\r\n- b4b923565b4adaa5e3bcb22a6bc03f1f7ac4cdde util: Add util::HexLiteral and util::Vec functions\r\n- 8ea5ece5a05967e02338f4392103513dbdb5c3f7 refactor: Hand-replace some ParseHex -> HexLiteral\r\n- c1409f4df5489df211861ce9cba1922c7a20e744 refactor: add util::HexLiteral and util::Vec using statements\r\n- 4a20aa89ffc82077c941493b61b8a13e87742c91 scripted-diff: Replace ParseHex(\"str\") -> ArrayFromHex(\"str\")\r\n\r\nThe main change is commit b4b923565b4adaa5e3bcb22a6bc03f1f7ac4cdde \"util: Add util::HexLiteral and util::Vec functions\". The other commits have only minor changes.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2239084398",
      "submitted_at": "2024-08-15T12:46:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "commented",
      "id": 2291521586,
      "node_id": "IC_kwDOABII586Ildgy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2291521586",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T15:27:07Z",
      "updated_at": "2024-08-15T15:30:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "> The main change is commit b4b923565b4adaa5e3bcb22a6bc03f1f7ac4cdde \"util: Add util::HexLiteral and util::Vec functions\". The other commits have only minor changes.\r\n\r\nDesign note about b4b923565b4adaa5e3bcb22a6bc03f1f7ac4cdde: I spent hours yesterday trying many ways to implement `VectorFromHex(...)` and `ScriptFromHex(...)` hybrid compile/runtime functions that would be equivalent to `Vec(HexLiteral(...))` and `Script(HexLiteral(...)` in this commit and concluded it was impossible because:\r\n\r\n- In order for these functions to be evaluate `char[]` arguments at compile time, they would need to be `constexpr` or `consteval`, which would make it impossible for them to return `std::vector` and `CScript` objects which are usable at runtime.\r\n\r\n- If the functions could not take `char[]` arguments, they would have to take implicitly converted arguments of an intermediate type like `ConstevalHexLiteral` with consteval constructors. But unfortunately, because of the way function template parameter deduction works in C++, the intermediate type would have to be a non-template class instead of a template class, which would make it it impossible for its size to vary based on the size of the string, so not possible for it to represent arbitrary sized binary data.\r\n\r\nEventually, I did find it was possible to implement hybrid functions that evaluated arguments at compile time but returned values that could be used at runtime if they were written like `VectorFromHex<\"1234\">()` instead of `VectorFromHex(\"1234\")`. But at that point I became convinced this was a bad approach and that is just better to have a separate compile time function `HexLiteral()` and a runtime function `Vec()` that can be used together simply and clearly instead of trying to combine different things into one function.\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2291521586",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13903402904,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAM8tReY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13903402904",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T22:11:04Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13903409215,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAM8tTA_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13903409215",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T22:11:58Z"
    },
    {
      "event": "commented",
      "id": 2292367131,
      "node_id": "IC_kwDOABII586Ior8b",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2292367131",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T22:16:57Z",
      "updated_at": "2024-08-15T22:33:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for taking the time @ryanofsky!\r\n\r\nYour troubles with runtime vs compile time memory is indeed part of what fed into prior solutions. Cool that `VectorFromHex<\"1234\">()` works, but I'm happy you're not a fan either.\r\n\r\nWhile I did like the symmetry of `ArrayFromHex` with the recently added `Txid::FromHex` and `uint256::FromHex`, the latter ones like to reverse the byte order, and `HexLiteral` is 2 chars less. `HexLiteral` feels more like prime real estate, so hiding behind the fig-leaf of `util` seems wise. I tried experimenting with user defined literals in response now but ran into issues with both making them `consteval` and accepting a `size_t`-templated `char`-array argument.\r\n\r\nThe implementation of `VecFromHex` was a compromise, and when un-drafting the PR a few days ago my initial version did not include it. [Some](https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716680866) [pressure](https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716693711) from @maflcko made me flip and add it, but your feedback has made me flop back gain. May him and other reviewers have mercy on my soul.\r\n\r\nI called the new helper function in **script_tests.cpp** `ToScript()` in [my original version](https://github.com/bitcoin/bitcoin/commit/d821eb1866a2e16a1af5f45215ae5f57a02cfa59#diff-060e8fd790fc1c3e18c64327a7395bb5b2d6d57db9792cc666bd8d7354a40c0b), rather than `Script()`. Are you not concerned that some day the `CScript` -> `Script` rename will happen? You evidently have less aversion to noun-named functions whereas I gravitate towards verb-adjacent.\r\n\r\nEdit:\r\nThe recent pushes were from 734ac5a9002493013c0f8afe763f751ac99f89c8 [to](https://github.com/bitcoin/bitcoin/compare/734ac5a9002493013c0f8afe763f751ac99f89c8..d543ac9702b559e0ea46af216518964e27aae7ce) d543ac9702b559e0ea46af216518964e27aae7ce [to](https://github.com/bitcoin/bitcoin/compare/d543ac9702b559e0ea46af216518964e27aae7ce..e4032e253c2dfc8d75defd450dbb23ccf689c390) e4032e253c2dfc8d75defd450dbb23ccf689c390.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2292367131",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "mentioned",
      "id": 13903453825,
      "node_id": "MEE_lADOABII586ONi66zwAAAAM8td6B",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13903453825",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T22:16:59Z"
    },
    {
      "event": "subscribed",
      "id": 13903453834,
      "node_id": "SE_lADOABII586ONi66zwAAAAM8td6K",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13903453834",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T22:16:59Z"
    },
    {
      "event": "mentioned",
      "id": 13903453851,
      "node_id": "MEE_lADOABII586ONi66zwAAAAM8td6b",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13903453851",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T22:16:59Z"
    },
    {
      "event": "subscribed",
      "id": 13903453857,
      "node_id": "SE_lADOABII586ONi66zwAAAAM8td6h",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13903453857",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T22:16:59Z"
    },
    {
      "event": "renamed",
      "id": 13903761593,
      "node_id": "RTE_lADOABII586ONi66zwAAAAM8upC5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13903761593",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T22:39:40Z",
      "rename": {
        "from": "refactor: Replace ParseHex with consteval ArrayFromHex",
        "to": "refactor: Replace ParseHex with consteval HexLiteral"
      }
    },
    {
      "event": "labeled",
      "id": 13904015347,
      "node_id": "LE_lADOABII586ONi66zwAAAAM8vm_z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13904015347",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T23:28:39Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2292449059,
      "node_id": "IC_kwDOABII586Io_8j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2292449059",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T23:28:40Z",
      "updated_at": "2024-08-15T23:28:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/28834906136</sub>\n\n<details><summary>Hints</summary>\n\nMake sure to run all tests locally, according to the documentation.\n\nThe failure may happen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2292449059",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "reviewed",
      "id": 2241499736,
      "node_id": "PRR_kwDOABII586FmpJY",
      "url": null,
      "actor": null,
      "commit_id": "e4032e253c2dfc8d75defd450dbb23ccf689c390",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK e4032e253c2dfc8d75defd450dbb23ccf689c390 if visual studio and clang-tidy errors are fixed\r\n\r\nhttps://cirrus-ci.com/task/5821174167371776\r\nhttps://github.com/bitcoin/bitcoin/actions/runs/10411271977/job/28834888600?pr=30377#step:20:2031\r\n\r\nThanks for updating. To be clear I don't have really have any issue with embedding hex constants instead byte constants in the compiled code. I mainly just thought behavior of VectorFromHex function was hard to explain and confusing, arbitrarily doing certain things at runtime and other things at compile time, and the implementation was pretty involved, duplicating code and logic. Adding one simple compile-time function seems preferable.\r\n\r\nI do think ToScript might be a better name than Script, I just didn't put much thought into it since it is a local test function. I'd want to look into semantics more (not sure if it is deserializing or pushing a number), because probably there is a better, more descriptive name. (EDIT: It looks like this is just interpreting the bytes as a serialized script, so a name like `AsScript` or `ToScript` \\\\ might be more descriptive than `Script`. I think ideally CScript would probably just have private constructors and we would use construct named functions like `ScriptCode` and `ScriptData` to construct CScript objects in a less ambiguous way.) In general, I agree verb names can be better than noun names but I think noun and other types of names can be ok when functions are acting like constructors.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2241499736",
      "submitted_at": "2024-08-15T23:48:44Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "review_requested",
      "id": 13904141513,
      "node_id": "RRE_lADOABII586ONi66zwAAAAM8wFzJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13904141513",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T23:48:48Z",
      "requested_reviewer": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 13904141596,
      "node_id": "RRE_lADOABII586ONi66zwAAAAM8wF0c",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13904141596",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T23:48:49Z",
      "requested_reviewer": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "reviewed",
      "id": 2241890604,
      "node_id": "PRR_kwDOABII586FoIks",
      "url": null,
      "actor": null,
      "commit_id": "84c830f27fd62db4a9cb93bf6d28a86f7751e504",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2241890604",
      "submitted_at": "2024-08-16T05:38:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "review_requested",
      "id": 13906299314,
      "node_id": "RRE_lADOABII586ONi66zwAAAAM84Umy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13906299314",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-16T05:38:09Z",
      "requested_reviewer": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFkZGRiNGZiMGZmODgxNjJlNThlNTBlNTZkNWU4ODliYjU3MjdhODE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1dddb4fb0ff88162e58e50e56d5e889bb5727a81",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1dddb4fb0ff88162e58e50e56d5e889bb5727a81",
      "tree": {
        "sha": "915c90835cd42d1074a6bd5784c427f3f4bc7f89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/915c90835cd42d1074a6bd5784c427f3f4bc7f89"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 915c90835cd42d1074a6bd5784c427f3f4bc7f89\nparent 7aab0f6f03d1959dc338b1b7c4dcdaa02c46f854\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1723799823 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1723799823 +0200\n\nrefactor: Make code more tolerant of constexpr std::arrays\n\nUsed in next few commits.\n\nCo-Authored-By: MarcoFalke <*~=`'#}+{/-|&$^_@721217.xyz>\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQLcqNfb2sAL/Oay/BWEXgf4aifHEyO+bysJbpIREcpjMz0/vRYp5pzXs2ilUoog7X7\n65p6F3vRmD0aYn1V+l8Aw=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7aab0f6f03d1959dc338b1b7c4dcdaa02c46f854",
          "sha": "7aab0f6f03d1959dc338b1b7c4dcdaa02c46f854",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7aab0f6f03d1959dc338b1b7c4dcdaa02c46f854"
        }
      ],
      "message": "refactor: Make code more tolerant of constexpr std::arrays\n\nUsed in next few commits.\n\nCo-Authored-By: MarcoFalke <*~=`'#}+{/-|&$^_@721217.xyz>",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-16T09:17:03Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-16T09:17:03Z"
      },
      "sha": "1dddb4fb0ff88162e58e50e56d5e889bb5727a81"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQ0OTFjN2NmNzEzNmU4ZmMwODMyM2UyMzAyNzU2MmJmNmVkY2U5YjA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4491c7cf7136e8fc08323e23027562bf6edce9b0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4491c7cf7136e8fc08323e23027562bf6edce9b0",
      "tree": {
        "sha": "d722838538f1b3ce2e4a2a900d93f12e9b519be0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d722838538f1b3ce2e4a2a900d93f12e9b519be0"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d722838538f1b3ce2e4a2a900d93f12e9b519be0\nparent 1dddb4fb0ff88162e58e50e56d5e889bb5727a81\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1723742477 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1723799824 +0200\n\ntest refactor: util_tests - parse_hex clean up\n\n* Use BOOST_CHECK_EQUAL_COLLECTIONS and BOOST_CHECK_EQUAL instead of deprecated BOOST_CHECK.\n* Avoid repeating expected values.\n* Break out repeated HEX_PARSE_INPUT and rename ParseHex_expected to HEX_PARSE_OUTPUT.\n\nDone in preparation for adding a couple more tests in the next commit.\n\nCo-Authored-By: l0rinc <pap.lorinc@gmail.com>\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQOS/iXUgbtFqOoVH/+wbNKhPRy05Ulouc9ZY1t2i3Ho0HQjmY5+ihy8ohmy00u7jZ5\nISx5z5Wm9GUVSUg5+81AY=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1dddb4fb0ff88162e58e50e56d5e889bb5727a81",
          "sha": "1dddb4fb0ff88162e58e50e56d5e889bb5727a81",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1dddb4fb0ff88162e58e50e56d5e889bb5727a81"
        }
      ],
      "message": "test refactor: util_tests - parse_hex clean up\n\n* Use BOOST_CHECK_EQUAL_COLLECTIONS and BOOST_CHECK_EQUAL instead of deprecated BOOST_CHECK.\n* Avoid repeating expected values.\n* Break out repeated HEX_PARSE_INPUT and rename ParseHex_expected to HEX_PARSE_OUTPUT.\n\nDone in preparation for adding a couple more tests in the next commit.\n\nCo-Authored-By: l0rinc <pap.lorinc@gmail.com>",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-16T09:17:04Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-15T17:21:17Z"
      },
      "sha": "4491c7cf7136e8fc08323e23027562bf6edce9b0"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13909883845,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAM9F_vF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13909883845",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-16T11:42:55Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQ0YmI1YTEyYzQzODlkYzE4ZTE4MTM4NzM1NjkwMTc4Nzg0NGU4OWY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/44bb5a12c4389dc18e181387356901787844e89f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/44bb5a12c4389dc18e181387356901787844e89f",
      "tree": {
        "sha": "5235afc49f3aa458fb1f08387f4dd7cbb4e0976a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5235afc49f3aa458fb1f08387f4dd7cbb4e0976a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 5235afc49f3aa458fb1f08387f4dd7cbb4e0976a\nparent 4491c7cf7136e8fc08323e23027562bf6edce9b0\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1723800073 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1723808695 +0200\n\nutil: Add consteval util::HexLiteral and util::Vec\n\n* util::HexLiteral is a compile-time equivalent of ParseHex using std::array. Defaults to T=std::byte like TryParseHex to encourage that over uint8_t.\n* util::Vec is a helper to convert std::array into std::vector.\n\nAlso extracts from_hex into shared util::ConstevalHexDigit function.\n\nCo-Authored-By: l0rinc <pap.lorinc@gmail.com>\nCo-Authored-By: MarcoFalke <*~=`'#}+{/-|&$^_@721217.xyz>\nCo-Authored-By: Ryan Ofsky <ryan@ofsky.org>\nCo-Authored-By: stickies-v <stickies-v@protonmail.com>\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQLkCB3tkmmrNU5sjh1Bov7u9WnLu93HWpO21c4go5CT+Yo7VWoaZDQVF/qs3DZsGYD\neImhJOvRec3+S0/pl5WwI=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4491c7cf7136e8fc08323e23027562bf6edce9b0",
          "sha": "4491c7cf7136e8fc08323e23027562bf6edce9b0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4491c7cf7136e8fc08323e23027562bf6edce9b0"
        }
      ],
      "message": "util: Add consteval util::HexLiteral and util::Vec\n\n* util::HexLiteral is a compile-time equivalent of ParseHex using std::array. Defaults to T=std::byte like TryParseHex to encourage that over uint8_t.\n* util::Vec is a helper to convert std::array into std::vector.\n\nAlso extracts from_hex into shared util::ConstevalHexDigit function.\n\nCo-Authored-By: l0rinc <pap.lorinc@gmail.com>\nCo-Authored-By: MarcoFalke <*~=`'#}+{/-|&$^_@721217.xyz>\nCo-Authored-By: Ryan Ofsky <ryan@ofsky.org>\nCo-Authored-By: stickies-v <stickies-v@protonmail.com>",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-16T11:44:55Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-16T09:21:13Z"
      },
      "sha": "44bb5a12c4389dc18e181387356901787844e89f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDgyYzkwODBmMjM1ZjZmZmJlOTgzYjEzNjBkYzU3NDFjZTk1ZTlhN2Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82c9080f235f6ffbe983b1360dc5741ce95e9a7d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/82c9080f235f6ffbe983b1360dc5741ce95e9a7d",
      "tree": {
        "sha": "7d4071fb1914c539dba6eac5530377dd80a04b50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d4071fb1914c539dba6eac5530377dd80a04b50"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 7d4071fb1914c539dba6eac5530377dd80a04b50\nparent 44bb5a12c4389dc18e181387356901787844e89f\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1723808094 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1723808695 +0200\n\nrefactor: Hand-replace some ParseHex -> util::HexLiteral\n\nUses Vec(HexLiteral(...)) in many places - A goal was to avoid the need of adding std::array support to CScript. Partially due to discrepancies wrt array/vector/Span serialization elsewhere in the codebase (serialize.h), sometimes serializing with length prefix, sometimes not.\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQEkTIDDzC+lflTYxupYYyZsD0L+geMVSoH238rRZYviwB7aB80lWHa6ElgLXmuca/A\ny2TG0KNA0LG/H/9T4UbgI=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/44bb5a12c4389dc18e181387356901787844e89f",
          "sha": "44bb5a12c4389dc18e181387356901787844e89f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/44bb5a12c4389dc18e181387356901787844e89f"
        }
      ],
      "message": "refactor: Hand-replace some ParseHex -> util::HexLiteral\n\nUses Vec(HexLiteral(...)) in many places - A goal was to avoid the need of adding std::array support to CScript. Partially due to discrepancies wrt array/vector/Span serialization elsewhere in the codebase (serialize.h), sometimes serializing with length prefix, sometimes not.",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-16T11:44:55Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-16T11:34:54Z"
      },
      "sha": "82c9080f235f6ffbe983b1360dc5741ce95e9a7d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGZiNWM1NWNlZjVlMjNiYjVhZThjNWFhNTI2Mjg1N2ZkNjZiYjdmOWQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb5c55cef5e23bb5ae8c5aa5262857fd66bb7f9d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fb5c55cef5e23bb5ae8c5aa5262857fd66bb7f9d",
      "tree": {
        "sha": "432dd97e02f7746b500fae086a9cdfdf246a6fd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/432dd97e02f7746b500fae086a9cdfdf246a6fd9"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 432dd97e02f7746b500fae086a9cdfdf246a6fd9\nparent 82c9080f235f6ffbe983b1360dc5741ce95e9a7d\nauthor Ryan Ofsky <ryan@ofsky.org> 1723805848 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1723808695 +0200\n\nrefactor: add util::HexLiteral and util::Vec using statements\n\nAlso add ToScript() helper function in script_tests.cpp. The using statements and helper function will be used in the following scripted-diff commit.\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQJReTtrHfDXVqEIR8IYnlhQtNWM1n08yLl5f4VLx2/amYC9/jhGmXMlhA8kwlgxjiv\nk2wqE95RET1QPD1yDwiAo=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82c9080f235f6ffbe983b1360dc5741ce95e9a7d",
          "sha": "82c9080f235f6ffbe983b1360dc5741ce95e9a7d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/82c9080f235f6ffbe983b1360dc5741ce95e9a7d"
        }
      ],
      "message": "refactor: add util::HexLiteral and util::Vec using statements\n\nAlso add ToScript() helper function in script_tests.cpp. The using statements and helper function will be used in the following scripted-diff commit.",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-16T11:44:55Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-08-16T10:57:28Z"
      },
      "sha": "fb5c55cef5e23bb5ae8c5aa5262857fd66bb7f9d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDAxZTE4ZDk0ZDk1NzdmNDE1NzQ4ODY5Mzc2OTg4ZTNmMGY1OWNlZDA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01e18d94d9577f415748869376988e3f0f59ced0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/01e18d94d9577f415748869376988e3f0f59ced0",
      "tree": {
        "sha": "9e3eea9d6532577c04e6c9759e75e387bcd83614",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e3eea9d6532577c04e6c9759e75e387bcd83614"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9e3eea9d6532577c04e6c9759e75e387bcd83614\nparent fb5c55cef5e23bb5ae8c5aa5262857fd66bb7f9d\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1723807122 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1723808801 +0200\n\nscripted-diff: Replace ParseHex(\"str\") -> HexLiteral<uint8_t>(\"str\")\n\nIdeally all call sites should accept std::byte instead of uint8_t but those transformations are left to future PRs.\n\n-BEGIN VERIFY SCRIPT-\nsed -i --regexp-extended 's/\\bParseHex(<[^>]*>)?(\\(\"[^\"]*\"\\))/HexLiteral\\1<uint8_t>\\2/g' $(git grep -l ParseHex -- :src ':(exclude)src/test/util_tests.cpp')\nsed -i --regexp-extended 's/\\bScriptFromHex(\\(\"[^\"]*\"\\))/ToScript(HexLiteral<uint8_t>\\1)/g' src/test/script_tests.cpp\n-END VERIFY SCRIPT-\n\nCo-Authored-By: MarcoFalke <*~=`'#}+{/-|&$^_@721217.xyz>\nCo-Authored-By: Ryan Ofsky <ryan@ofsky.org>\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQCezEBvs0JR9U+xc5y+XKvzDMdIvoa2rk5IT5CzH+b2E5rG6QqZQ4GCYR0UvWJH6R+\n0ZgpVL/jY3w7NMk21FMAc=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb5c55cef5e23bb5ae8c5aa5262857fd66bb7f9d",
          "sha": "fb5c55cef5e23bb5ae8c5aa5262857fd66bb7f9d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fb5c55cef5e23bb5ae8c5aa5262857fd66bb7f9d"
        }
      ],
      "message": "scripted-diff: Replace ParseHex(\"str\") -> HexLiteral<uint8_t>(\"str\")\n\nIdeally all call sites should accept std::byte instead of uint8_t but those transformations are left to future PRs.\n\n-BEGIN VERIFY SCRIPT-\nsed -i --regexp-extended 's/\\bParseHex(<[^>]*>)?(\\(\"[^\"]*\"\\))/HexLiteral\\1<uint8_t>\\2/g' $(git grep -l ParseHex -- :src ':(exclude)src/test/util_tests.cpp')\nsed -i --regexp-extended 's/\\bScriptFromHex(\\(\"[^\"]*\"\\))/ToScript(HexLiteral<uint8_t>\\1)/g' src/test/script_tests.cpp\n-END VERIFY SCRIPT-\n\nCo-Authored-By: MarcoFalke <*~=`'#}+{/-|&$^_@721217.xyz>\nCo-Authored-By: Ryan Ofsky <ryan@ofsky.org>",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-16T11:46:41Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-16T11:18:42Z"
      },
      "sha": "01e18d94d9577f415748869376988e3f0f59ced0"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13909923382,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAM9GJY2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13909923382",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-16T11:47:12Z"
    },
    {
      "event": "unlabeled",
      "id": 13910710239,
      "node_id": "UNLE_lADOABII586ONi66zwAAAAM9JJff",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13910710239",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-16T13:06:36Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2242829972,
      "node_id": "PRR_kwDOABII586Frt6U",
      "url": null,
      "actor": null,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "review ACK 44bb5a12c4389dc18e181387356901787844e89f\r\n\r\n(I'll do the rest later)",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2242829972",
      "submitted_at": "2024-08-16T15:47:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680414541",
      "pull_request_review_id": 2181892158,
      "id": 1680414541,
      "node_id": "PRRC_kwDOABII585kKRdN",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 16,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "not sure about overloading this. Otherwise, one may get a runtime evaluation when switching from a raw string literal pointer to a consteval string_view, no?\r\n\r\nSeems clearer to make it a constructor taking a string_view? I guess the only confusion could be that the `Span<const unsigned char>` and string_view (aka `Span<const char>`) do different things (one is hex decoding and the other is not), but that should be fine, because both are distinct types.",
      "created_at": "2024-07-17T05:10:45Z",
      "updated_at": "2024-07-17T05:23:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680414541",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680414541"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 115,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680415361",
      "pull_request_review_id": 2181892158,
      "id": 1680415361,
      "node_id": "PRRC_kwDOABII585kKRqB",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 30,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What is the point of this? Seems odd to add space before compilation and then remove it during compilation.\r\n\r\nSeems easier to not add the space in the first place and fail compilation when there is one?",
      "created_at": "2024-07-17T05:11:58Z",
      "updated_at": "2024-07-17T05:23:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680415361",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680415361"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 133,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680415419",
      "pull_request_review_id": 2181892158,
      "id": 1680415419,
      "node_id": "PRRC_kwDOABII585kKRq7",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.\n+    while (IsSpace(*str))\n+        str += 1;\n+    // Skip \"0x\" prefix.",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 33,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same",
      "created_at": "2024-07-17T05:12:05Z",
      "updated_at": "2024-07-17T05:23:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680415419",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680415419"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680419847",
      "pull_request_review_id": 2181892158,
      "id": 1680419847,
      "node_id": "PRRC_kwDOABII585kKSwH",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.\n+    while (IsSpace(*str))\n+        str += 1;\n+    // Skip \"0x\" prefix.\n+    if (str[0] == '0' && str[1] == 'x')\n+        str += 2;\n+\n+    size_t digits = 0;\n+    while (from_hex(str[digits]) != -1)\n+        ++digits;\n+    // 64 = 32 bytes * 2 chars each. 32 bytes = 256 bits.",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 40,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure about hardcoding this for every base_blob.\r\n\r\nSeems easier to just implement it once for `base_blob` and then have it available for all?",
      "created_at": "2024-07-17T05:19:01Z",
      "updated_at": "2024-07-17T05:23:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680419847",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680419847"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680422462",
      "pull_request_review_id": 2181892158,
      "id": 1680422462,
      "node_id": "PRRC_kwDOABII585kKTY-",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.\n+    while (IsSpace(*str))\n+        str += 1;\n+    // Skip \"0x\" prefix.\n+    if (str[0] == '0' && str[1] == 'x')\n+        str += 2;\n+\n+    size_t digits = 0;\n+    while (from_hex(str[digits]) != -1)\n+        ++digits;\n+    // 64 = 32 bytes * 2 chars each. 32 bytes = 256 bits.\n+    assert(digits <= 64);",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 41,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure about fuzzy decoding here. Accidentally truncating an `uint256` and thus parsing it as something else seems dangerous.\r\n\r\nThe convenience of being able to truncate leading zeros of a hex-encoded base_blob are never used, are they? The two constants ZERO and ONE are constructed without hex-decoding, so this isn't needed there, and I fail to see another use case right now.\r\n\r\nIt seems easier to just assert WIDTH.",
      "created_at": "2024-07-17T05:23:02Z",
      "updated_at": "2024-07-17T05:23:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680422462",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680422462"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680425993",
      "pull_request_review_id": 2181909441,
      "id": 1680425993,
      "node_id": "PRRC_kwDOABII585kKUQJ",
      "diff_hunk": "@@ -67,6 +68,87 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 56,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "92b0fb059f81959abbfe995b32ea103c2aa8db46",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same here. Overloading `ParseHex` seems fragile, because a compile time string_view will be evaluate at runtime, while a string literal will be evaluated at compile time.",
      "created_at": "2024-07-17T05:27:52Z",
      "updated_at": "2024-07-17T05:27:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680425993",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680425993"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680427277",
      "pull_request_review_id": 2181911444,
      "id": 1680427277,
      "node_id": "PRRC_kwDOABII585kKUkN",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 20,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Please add `{`, `}` for multiline-if, according to the dev notes.",
      "created_at": "2024-07-17T05:29:39Z",
      "updated_at": "2024-07-17T05:29:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680427277",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680427277"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680955841",
      "pull_request_review_id": 2182763400,
      "id": 1680955841,
      "node_id": "PRRC_kwDOABII585kMVnB",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 16,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680414541,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for taking a closer look!\r\n\r\nI want to enforce `consteval` for existing string literals. Ideally the `string_view` overload should be `constexpr` but from my research on MSVC assembly output in the PR summary it seems to handle lookup tables poorly. One possibility would be to remove the lookup table and use `if (c >= '0' && c <= '9')`, sacrificing some performance, but we don't often parse ASCII hex strings in runtime anyway, right?\r\n\r\nThe main purpose of overloading `uint256S()` with a `consteval` version was to avoid changing all the call-sites. If we are okay with changing call-sites, it might be better to introduce a `uint256(uint64_t,uint64_t,uint64_t,uint64_t)` constructor. That way it would be the compiler parsing hexadecimal integer literals directly. See my raw array (54e0213c9c7a7a942dd320264c1f9224c494b777) and span (bfc2fb049f2a12e9936b938fb073738babac0cbb) explorations.",
      "created_at": "2024-07-17T12:21:12Z",
      "updated_at": "2024-07-17T12:21:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680955841",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680955841"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 115,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680963050",
      "pull_request_review_id": 2182775665,
      "id": 1680963050,
      "node_id": "PRRC_kwDOABII585kMXXq",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 30,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680415361,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "My first stab at this was much more strict but when I added tests I went for full compatibility with the runtime overload. I'm certainly open to making it less permissive though.",
      "created_at": "2024-07-17T12:27:00Z",
      "updated_at": "2024-07-17T12:27:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680963050",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680963050"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 133,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680963523",
      "pull_request_review_id": 2182776481,
      "id": 1680963523,
      "node_id": "PRRC_kwDOABII585kMXfD",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.\n+    while (IsSpace(*str))\n+        str += 1;\n+    // Skip \"0x\" prefix.",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 33,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680415419,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same (https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680963050)",
      "created_at": "2024-07-17T12:27:24Z",
      "updated_at": "2024-07-17T12:27:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680963523",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680963523"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680966315",
      "pull_request_review_id": 2182781123,
      "id": 1680966315,
      "node_id": "PRRC_kwDOABII585kMYKr",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 16,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680414541,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> `uint256(uint64_t,uint64_t,uint64_t,uint64_t)` constructor. That way it would be the compiler parsing hexadecimal integer literals directly.\r\n\r\nNot sure. That'd make it impossible to grep for a (let's say) block hash. Also, it would be harder to copy-paste one, if the developer has to manually split it into 4 parts and add `0x` prefixes. Finally, truncation checks can't be done, see https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680422462\r\n\r\n> was to avoid changing all the call-sites. \r\n\r\nHow many are there? Should be trivial to write a scripted-diff to replace `uint256S(\"` with something else, no?\r\n\r\nEdit: There are around 50 instances. Most of them in a single file:\r\n\r\n```\r\n$ git grep 'uint256S(\"' | grep -v 'src/test/' | wc -l \r\n54\r\n$ git grep 'uint256S(\"' src/kernel/chainparams.cpp  | wc -l \r\n48\r\n",
      "created_at": "2024-07-17T12:29:29Z",
      "updated_at": "2024-07-17T12:35:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680966315",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680966315"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 115,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680967973",
      "pull_request_review_id": 2182783841,
      "id": 1680967973,
      "node_id": "PRRC_kwDOABII585kMYkl",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 16,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680414541,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I want to enforce `consteval` for existing string literals. Ideally the `string_view` overload should be `constexpr` but from my research on MSVC assembly output\r\n\r\nI think `string_view` can be used in a consteval context, no?",
      "created_at": "2024-07-17T12:30:47Z",
      "updated_at": "2024-07-17T12:30:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680967973",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680967973"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 115,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680976118",
      "pull_request_review_id": 2182797237,
      "id": 1680976118,
      "node_id": "PRRC_kwDOABII585kMaj2",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.\n+    while (IsSpace(*str))\n+        str += 1;\n+    // Skip \"0x\" prefix.\n+    if (str[0] == '0' && str[1] == 'x')\n+        str += 2;\n+\n+    size_t digits = 0;\n+    while (from_hex(str[digits]) != -1)\n+        ++digits;\n+    // 64 = 32 bytes * 2 chars each. 32 bytes = 256 bits.",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 40,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680419847,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There is no `uint160S()` outside of **uint256_tests.cpp** and only `uint256` and `uint160` use `base_blob` so it felt alright having it here. If we abandon the `uint256S()`-overload approach I agree to change this.",
      "created_at": "2024-07-17T12:36:46Z",
      "updated_at": "2024-07-17T12:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680976118",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680976118"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680983277",
      "pull_request_review_id": 2182810948,
      "id": 1680983277,
      "node_id": "PRRC_kwDOABII585kMcTt",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.\n+    while (IsSpace(*str))\n+        str += 1;\n+    // Skip \"0x\" prefix.\n+    if (str[0] == '0' && str[1] == 'x')\n+        str += 2;\n+\n+    size_t digits = 0;\n+    while (from_hex(str[digits]) != -1)\n+        ++digits;\n+    // 64 = 32 bytes * 2 chars each. 32 bytes = 256 bits.\n+    assert(digits <= 64);",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 41,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680422462,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Generally agree https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680963050\r\n\r\n(Some call-sites do use \"0x\"-prefix now that I think of it, while others do not, but aligning that would probably be an easy diff to accept).",
      "created_at": "2024-07-17T12:41:46Z",
      "updated_at": "2024-07-17T12:41:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680983277",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680983277"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680986937",
      "pull_request_review_id": 2182817008,
      "id": 1680986937,
      "node_id": "PRRC_kwDOABII585kMdM5",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 16,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680414541,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> > I want to enforce `consteval` for existing string literals. Ideally the `string_view` overload should be `constexpr` but from my research on MSVC assembly output\r\n> \r\n> I think `string_view` can be used in a consteval context, no?\r\n\r\nYes, it's the rest of that paragraph that poses some concern.",
      "created_at": "2024-07-17T12:44:34Z",
      "updated_at": "2024-07-17T12:44:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680986937",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680986937"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 115,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680995968",
      "pull_request_review_id": 2182831735,
      "id": 1680995968,
      "node_id": "PRRC_kwDOABII585kMfaA",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 16,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680414541,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Ideally the string_view overload should be constexpr but from my research on MSVC assembly output\r\n\r\nPlease don't be overly concerned about MSVC. We've had issues with it in the past, where it's failed to optimize code properly, or we've had to write workarounds for it, when code was otherwise fine in Clang or GCC, i.e (https://github.com/bitcoin/bitcoin/pull/28657#discussion_r1360780446). We don't use it as a release compiler (and never will), so if it's failing to do X, that isn't necessarily a blocker to making changes (if X is working correctly in Clang & GCC). MSVC can always be improved later, and shouldn't prevent us from writing better code now.",
      "created_at": "2024-07-17T12:51:13Z",
      "updated_at": "2024-07-17T12:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680995968",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680995968"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 115,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682767232",
      "pull_request_review_id": 2185699313,
      "id": 1682767232,
      "node_id": "PRRC_kwDOABII585kTP2A",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 20,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680427277,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed as of 10baae11ecc376f2250d4a51d2bbfeea56c0a31d.",
      "created_at": "2024-07-18T12:40:01Z",
      "updated_at": "2024-07-18T12:40:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682767232",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682767232"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682772285",
      "pull_request_review_id": 2185708052,
      "id": 1682772285,
      "node_id": "PRRC_kwDOABII585kTRE9",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 16,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680414541,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "As of 10baae11ecc376f2250d4a51d2bbfeea56c0a31d I have stopped overloading `uint256S()`:\r\n\r\nChanged from `consteval uint256 uint256S(const char *str)` -> `consteval explicit uint256(const char (&str)[65])` and `base_blob(std::string_view str)`\r\nThis means the string width is enforced at compile time. (The new parsing code is much more strict and also asserts on the length).\r\n\r\nApplied uint256S -> uint256 conversion where applicable, removing \"0x\"-prefixes.\r\nTODO: if there is agreement on the current approach - create scripted diff commit.\r\n\r\nAdded `TxidFromStringS()` to mirror `uint256S()` for runtime use.\r\n\r\nClarified reason for introduction of `FixedVec` in commit message 10baae11ecc376f2250d4a51d2bbfeea56c0a31d.",
      "created_at": "2024-07-18T12:43:11Z",
      "updated_at": "2024-07-18T12:43:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682772285",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682772285"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 115,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682773691",
      "pull_request_review_id": 2185710123,
      "id": 1682773691,
      "node_id": "PRRC_kwDOABII585kTRa7",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 30,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680415361,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "More strict as of 10baae11ecc376f2250d4a51d2bbfeea56c0a31d.",
      "created_at": "2024-07-18T12:44:10Z",
      "updated_at": "2024-07-18T12:44:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682773691",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682773691"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 133,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682775910",
      "pull_request_review_id": 2185714766,
      "id": 1682775910,
      "node_id": "PRRC_kwDOABII585kTR9m",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.\n+    while (IsSpace(*str))\n+        str += 1;\n+    // Skip \"0x\" prefix.\n+    if (str[0] == '0' && str[1] == 'x')\n+        str += 2;\n+\n+    size_t digits = 0;\n+    while (from_hex(str[digits]) != -1)\n+        ++digits;\n+    // 64 = 32 bytes * 2 chars each. 32 bytes = 256 bits.",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 40,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680419847,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`consteval` parsing now done inside `base_blob(std::string_view)` as of 10baae11ecc376f2250d4a51d2bbfeea56c0a31d.",
      "created_at": "2024-07-18T12:45:52Z",
      "updated_at": "2024-07-18T12:45:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682775910",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682775910"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682777414",
      "pull_request_review_id": 2185718006,
      "id": 1682777414,
      "node_id": "PRRC_kwDOABII585kTSVG",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.\n+    while (IsSpace(*str))\n+        str += 1;\n+    // Skip \"0x\" prefix.\n+    if (str[0] == '0' && str[1] == 'x')\n+        str += 2;\n+\n+    size_t digits = 0;\n+    while (from_hex(str[digits]) != -1)\n+        ++digits;\n+    // 64 = 32 bytes * 2 chars each. 32 bytes = 256 bits.\n+    assert(digits <= 64);",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 41,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680422462,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed as of 10baae11ecc376f2250d4a51d2bbfeea56c0a31d.",
      "created_at": "2024-07-18T12:46:59Z",
      "updated_at": "2024-07-18T12:46:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682777414",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682777414"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682782077",
      "pull_request_review_id": 2185726157,
      "id": 1682782077,
      "node_id": "PRRC_kwDOABII585kTTd9",
      "diff_hunk": "@@ -67,6 +68,87 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 56,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "92b0fb059f81959abbfe995b32ea103c2aa8db46",
      "in_reply_to_id": 1680425993,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Still kept it as an overload as of 10baae11ecc376f2250d4a51d2bbfeea56c0a31d. If you prefer different names for runtime/compile time, which do you suggest?",
      "created_at": "2024-07-18T12:50:25Z",
      "updated_at": "2024-07-18T12:50:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682782077",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682782077"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682825302",
      "pull_request_review_id": 2185798321,
      "id": 1682825302,
      "node_id": "PRRC_kwDOABII585kTeBW",
      "diff_hunk": "@@ -66,9 +66,14 @@ using Txid = transaction_identifier<false>;\n /** Wtxid commits to all transaction fields including the witness. */\n using Wtxid = transaction_identifier<true>;\n \n-inline Txid TxidFromString(std::string_view str)\n+inline Txid TxidFromStringS(std::string_view str)\n {\n-    return Txid::FromUint256(uint256S(str.data()));\n+    return Txid::FromUint256(uint256S(str));\n+}\n+\n+consteval Txid TxidFromString(const char (&str)[65])\n+{\n+    return Txid::FromUint256(uint256(str));\n }",
      "path": "src/util/transaction_identifier.h",
      "position": null,
      "original_position": 32,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "10baae11ecc376f2250d4a51d2bbfeea56c0a31d",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why add a consteval overload here? Generally I am not a fan of adding test-only code (code that is only used in tests) to the real program. Performance or exe-size shouldn't matter for tests, unless it is significant. If you still want to add it to the tests, that is fine, but then please move it to the test code. But please change the function name of the test-only function to something else. It seems odd that test-only code forces real code to be renamed.",
      "created_at": "2024-07-18T13:17:40Z",
      "updated_at": "2024-07-18T13:24:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682825302",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682825302"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 69,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682843219",
      "pull_request_review_id": 2185826728,
      "id": 1682843219,
      "node_id": "PRRC_kwDOABII585kTiZT",
      "diff_hunk": "@@ -66,9 +66,14 @@ using Txid = transaction_identifier<false>;\n /** Wtxid commits to all transaction fields including the witness. */\n using Wtxid = transaction_identifier<true>;\n \n-inline Txid TxidFromString(std::string_view str)\n+inline Txid TxidFromStringS(std::string_view str)\n {\n-    return Txid::FromUint256(uint256S(str.data()));\n+    return Txid::FromUint256(uint256S(str));\n+}\n+\n+consteval Txid TxidFromString(const char (&str)[65])\n+{\n+    return Txid::FromUint256(uint256(str));\n }",
      "path": "src/util/transaction_identifier.h",
      "position": null,
      "original_position": 32,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "10baae11ecc376f2250d4a51d2bbfeea56c0a31d",
      "in_reply_to_id": 1682825302,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good call, will fix.",
      "created_at": "2024-07-18T13:28:35Z",
      "updated_at": "2024-07-18T13:28:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682843219",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682843219"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 69,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682878016",
      "pull_request_review_id": 2185885552,
      "id": 1682878016,
      "node_id": "PRRC_kwDOABII585kTq5A",
      "diff_hunk": "@@ -108,25 +134,16 @@ class uint256 : public base_blob<256> {\n     constexpr uint256() = default;\n     constexpr explicit uint256(uint8_t v) : base_blob<256>(v) {}\n     constexpr explicit uint256(Span<const unsigned char> vch) : base_blob<256>(vch) {}\n+    consteval explicit uint256(const char (&str)[65]) : base_blob<256>(str) {}",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 55,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "A more flexible alternative would be to just accept a string_view and rely on the length assert. However, I guess this prints a more confusing compile error.\r\n\r\nSeems fine to change later to string_view, if this is needed.\r\n\r\nHowever, I wonder if you can replace `65` by `WIDTH+1`?",
      "created_at": "2024-07-18T13:48:31Z",
      "updated_at": "2024-07-18T13:48:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682878016",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682878016"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682882026",
      "pull_request_review_id": 2185893269,
      "id": 1682882026,
      "node_id": "PRRC_kwDOABII585kTr3q",
      "diff_hunk": "@@ -108,25 +134,16 @@ class uint256 : public base_blob<256> {\n     constexpr uint256() = default;\n     constexpr explicit uint256(uint8_t v) : base_blob<256>(v) {}\n     constexpr explicit uint256(Span<const unsigned char> vch) : base_blob<256>(vch) {}\n+    consteval explicit uint256(const char (&str)[65]) : base_blob<256>(str) {}",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 55,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682878016,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also, I wonder if the three duplicate redirects can be replaced by a single `uinsg base_blob::base_blob;` (or similar) to import all constructors.",
      "created_at": "2024-07-18T13:50:54Z",
      "updated_at": "2024-07-18T13:50:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682882026",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682882026"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682962565",
      "pull_request_review_id": 2186032755,
      "id": 1682962565,
      "node_id": "PRRC_kwDOABII585kT_iF",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure about these. It should fail compilation instead if non-hex is detected.",
      "created_at": "2024-07-18T14:33:38Z",
      "updated_at": "2024-07-18T14:33:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682962565",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682962565"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1684964695",
      "pull_request_review_id": 2189222906,
      "id": 1684964695,
      "node_id": "PRRC_kwDOABII585kboVX",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it's more acceptable to diverge on behavior if we call the `consteval` function something different, see https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682782077",
      "created_at": "2024-07-19T20:55:53Z",
      "updated_at": "2024-07-19T20:55:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1684964695",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1684964695"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685019567",
      "pull_request_review_id": 2189378300,
      "id": 1685019567,
      "node_id": "PRRC_kwDOABII585kb1uv",
      "diff_hunk": "@@ -108,25 +134,16 @@ class uint256 : public base_blob<256> {\n     constexpr uint256() = default;\n     constexpr explicit uint256(uint8_t v) : base_blob<256>(v) {}\n     constexpr explicit uint256(Span<const unsigned char> vch) : base_blob<256>(vch) {}\n+    consteval explicit uint256(const char (&str)[65]) : base_blob<256>(str) {}",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 55,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682878016,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Seems fine to change later to string_view, if this is needed.\r\n> \r\n> However, I wonder if you can replace `65` by `WIDTH+1`?\r\n\r\nDone now in 79921003ffc858ca4b47e0fb187ed83c1667bc27 along with added comment and more descriptive parameter name.\r\n\r\n> Also, I wonder if the three duplicate redirects can be replaced by a single uinsg base_blob::base_blob; (or similar) to import all constructors.\r\n\r\nI guess that would only be possible if switching the uint256-ctor to `string_view`, which I'd rather hold off on for now.",
      "created_at": "2024-07-19T21:42:41Z",
      "updated_at": "2024-07-19T21:42:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1685019567",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685019567"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1686109312",
      "pull_request_review_id": 2190854560,
      "id": 1686109312,
      "node_id": "PRRC_kwDOABII585kf_yA",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe `BytesFromHex`?",
      "created_at": "2024-07-22T07:43:48Z",
      "updated_at": "2024-07-22T07:43:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1686109312",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1686109312"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1686115679",
      "pull_request_review_id": 2190864424,
      "id": 1686115679,
      "node_id": "PRRC_kwDOABII585kgBVf",
      "diff_hunk": "@@ -88,6 +89,31 @@ class base_blob\n     }\n };\n \n+// No support for \"0x\"-prefix or whitespace, mirroring GetHex().\n+template<unsigned int BITS>\n+consteval base_blob<BITS>::base_blob(std::string_view str)\n+{\n+    // Non-lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9') {\n+            return c - '0';\n+        } else if (c >= 'a' && c <= 'f') {\n+            return c - 'a' + 0xA;\n+        } else if (c >= 'A' && c <= 'F') {\n+            return c - 'A' + 0xA;\n+        }\n+        assert(false);\n+    };\n+\n+    // 2 chars per byte.\n+    assert(str.length() == m_data.size() * 2);\n+    auto writeIt = m_data.begin();",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 41,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "146a2db9e17466b3ff06a66103d5480bda2e6dba",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: snake_case for new code: `write_it`, `str_it`, according to the dev notes.",
      "created_at": "2024-07-22T07:48:58Z",
      "updated_at": "2024-07-22T07:48:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1686115679",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1686115679"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1688654352",
      "pull_request_review_id": 2194976610,
      "id": 1688654352,
      "node_id": "PRRC_kwDOABII585kptIQ",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, that would be along the lines of `uint256::FromHex()` that you have in the works in #30482.\r\n\r\nOne thing that comes to mind now though is that `uint256::FromHex()` can return a failure state. Maybe it would be better to have a constructor for this `consteval` thing - rename `FixedVec` into `ByteVec` with an added `consteval` constructor.",
      "created_at": "2024-07-23T20:10:20Z",
      "updated_at": "2024-07-23T20:10:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1688654352",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1688654352"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1688788130",
      "pull_request_review_id": 2195187288,
      "id": 1688788130,
      "node_id": "PRRC_kwDOABII585kqNyi",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Having problems inferring the size of the underlying `std::array` from the `char`-array size using the constructor approach. Looks like a free function is where it's at for this one. (And maybe going back to raw `std::array` for the container if we fail compilation on whitespace/invalid input).",
      "created_at": "2024-07-23T22:21:42Z",
      "updated_at": "2024-07-23T22:21:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1688788130",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1688788130"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689162345",
      "pull_request_review_id": 2195680135,
      "id": 1689162345,
      "node_id": "PRRC_kwDOABII585krpJp",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I am a bit worried that putting the bytes directly onto the stack (or easily allowing the dev to do so) may lead to high stack usage in some code paths and stack overflow on some platforms that have tighter limits.\r\n\r\nMaybe a better overall approach is to validate the hex string at compile time, but then parse into a (heap) vector at runtime?\r\n\r\nI don't think there are any performance concerns where hex parsing is used right now, so doing the parsing at runtime or compile time shouldn't matter. The important thing is compile-time checking, to catch bugs before the code compiles.",
      "created_at": "2024-07-24T05:33:56Z",
      "updated_at": "2024-07-24T05:33:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1689162345",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689162345"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689312472",
      "pull_request_review_id": 2195905666,
      "id": 1689312472,
      "node_id": "PRRC_kwDOABII585ksNzY",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point.. the compile-time parsed bytes would go into a data section in the binary instead of the hex string literal, which should :tm: make the binary smaller. But when the `std::array` containers are initialized during runtime they will take up stack space, instead of the former `std::vector` taking up heap-space.\r\n\r\nHeap is usually slower than the stack, but if the vector was just allocated in the local function, the data should be \"hot\" anyway.\r\n\r\nNot sure how to elegantly achieve compile time validation + runtime parsing.\r\n\r\nWill ruminate on this, cheers!",
      "created_at": "2024-07-24T07:51:56Z",
      "updated_at": "2024-07-24T07:51:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1689312472",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689312472"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689327270",
      "pull_request_review_id": 2195928300,
      "id": 1689327270,
      "node_id": "PRRC_kwDOABII585ksRam",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Heap is usually slower than the stack, but if the vector was just allocated in the local function, the data should be \"hot\" anyway.\r\n\r\nRight, and I think there is no performance critical path.\r\n\r\n> Not sure how to elegantly achieve compile time validation + runtime parsing.\r\n\r\n\r\nShould be easy:\r\n\r\n```cpp\r\n\r\nstruct ConstevalHexLiteral {\r\n  const char* const hex;\r\n  consteval ConstevalHexLiteral(const char* str) : hex{str} { assert(IsCHex(str)); }\r\n  consteval ConstevalHexLiteral(std::nullptr_t) = delete;\r\n};\r\n\r\nauto BytesFromHex(ConstevalHexLiteral hex) { return std::vector{*Assert(RuntimeParse(hex))}; }",
      "created_at": "2024-07-24T08:02:42Z",
      "updated_at": "2024-07-24T08:03:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1689327270",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689327270"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689373817",
      "pull_request_review_id": 2196001492,
      "id": 1689373817,
      "node_id": "PRRC_kwDOABII585kscx5",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks! That is a piece of art. :)\r\n\r\n(Think I would put any `Assert()`s and `vector` initialization inside of `RuntimeParse()`).",
      "created_at": "2024-07-24T08:35:41Z",
      "updated_at": "2024-07-24T08:35:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1689373817",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689373817"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689399364",
      "pull_request_review_id": 2196042215,
      "id": 1689399364,
      "node_id": "PRRC_kwDOABII585ksjBE",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, `RuntimeParse` is probably just `TryParseHex`, which returns a vector already, so you can drop the vector-move-constructor from my suggestion.",
      "created_at": "2024-07-24T08:53:14Z",
      "updated_at": "2024-07-24T08:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1689399364",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689399364"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692176710",
      "pull_request_review_id": 2200522624,
      "id": 1692176710,
      "node_id": "PRRC_kwDOABII585k3JFG",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I am a bit worried that putting the bytes directly onto the stack (or easily allowing the dev to do so) may lead to high stack usage in some code paths and stack overflow on some platforms that have tighter limits.\r\n\r\nOutside of tests & benchmarks there would *currently* only be 4 places where `ParseHex()` is replaced with `BytesFromHex`. One has static storage file scope, so wouldn't affect the stack. The longest one is 336 chars, which becomes 168 bytes on the stack.\r\n\r\n<details>\r\n<summary>\r\n\r\n### 4 runtime places tentatively replaced with `BytesFromHex`\r\n\r\n</summary>\r\n\r\n**net_processing.cpp**, the big one:\r\n```C++\r\n// If the peer is old enough to have the old alert system, send it the final alert.\r\nif (greatest_common_version <= 70012) {\r\n    constexpr auto finalAlert{BytesFromHex(\"60010000000000000000000000ffffff7f00000000ffffff7ffeffff7f01ffffff7f00000000ffffff7f00ffffff7f002f555247454e543a20416c657274206b657920636f6d70726f6d697365642c2075706772616465207265717569726564004630440220653febd6410f470f6bae11cad19c48413becb1ac2c17f908fd0fd53bdc3abd5202206d0e9c96fe88d4a0f01ed9dedae2b6f9e00da94cad0fecaae66ecf689bf71b50\")};\r\n    MakeAndPushMessage(pfrom, \"alert\", Span{finalAlert});\r\n}\r\n```\r\n\r\n```C++\r\nconst CScript genesisOutputScript = CScript() << BytesFromHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\r\n```\r\n\r\n```C++\r\nbin = ToByteVector(BytesFromHex(\"512103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430210359ef5021964fe22d6f8e05b2463c9540ce96883fe3b278760f048f5189f2e6c452ae\"));\r\n```\r\n\r\n```C++\r\nconstexpr XOnlyPubKey XOnlyPubKey::NUMS_H{BytesFromHex(\"50929b74c1a04954b78b4b6035e97a5e078a5a0f28ec96d547bfee9ace803ac0\")};\r\n```\r\n</details>\r\n\r\nFor reference, **src/leveldb/util/posix_logger.h** has:\r\n```C++\r\n    constexpr const int kStackBufferSize = 512;\r\n    char stack_buffer[kStackBufferSize];\r\n```\r\n(But it may be dead code, and would also just be part of a leaf in the call graph).\r\n\r\nOn my workstation I have an 8MB stack (50000x 160 bytes) according to:\r\n```C++\r\n    struct rlimit rl;\r\n    int result = getrlimit(RLIMIT_STACK, &rl);\r\n    if (result == 0) {\r\n        LogInfo(\"Stack size: %ld\", rl.rlim_cur);\r\n    } else {\r\n        LogInfo(\"getrlimit failed: %d\", result);\r\n    }\r\n```\r\n\r\nThis article gives 135168 bytes of stack size (~800x 168 bytes) for unnamed Raspberry Pi device in 2020: https://www.embeddedrelated.com/showarticle/1330.php\r\n",
      "created_at": "2024-07-25T21:49:18Z",
      "updated_at": "2024-07-25T21:49:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1692176710",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692176710"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692203055",
      "pull_request_review_id": 2200551062,
      "id": 1692203055,
      "node_id": "PRRC_kwDOABII585k3Pgv",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You can also use `std::is_constant_evaluated` to make a function behave differently inside constexpr and outside of it.",
      "created_at": "2024-07-25T22:13:17Z",
      "updated_at": "2024-07-25T22:13:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1692203055",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692203055"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692641088",
      "pull_request_review_id": 2201143973,
      "id": 1692641088,
      "node_id": "PRRC_kwDOABII585k46dA",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, I was experimenting with `std::is_constant_evaluated` early on (don't think it was discussed). If I remember correctly, the reason I abandoned it in favor of `consteval` overloads taking string literals was that I was never getting compile-time evaluation where I expected it. There's also the divergence in behavior that runtime-functions may need to return optional or heap-allocated types, while compile time-functions can keep all error handling internal and need to return stack-allocated types.\r\n\r\nIf we were to go with compile time validation when possible, but always heap-allocation for `ParseHex`, I can see how it may be useful.",
      "created_at": "2024-07-26T07:38:10Z",
      "updated_at": "2024-07-26T07:38:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1692641088",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692641088"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692754289",
      "pull_request_review_id": 2201322541,
      "id": 1692754289,
      "node_id": "PRRC_kwDOABII585k5WFx",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Outside of tests & benchmarks there would _currently_ only be 4 places where `ParseHex()` is replaced with `BytesFromHex`.\r\n\r\nThanks for enumerating. Looking at them:\r\n\r\n* `finalAlert` -> Shouldn't matter much, either way (Span-serialization doesn't care about the underlying type)\r\n* `genesisOutputScript` -> This must be a vector and can not be an array, because array-serialization is different from vector-serialization\r\n* `ToByteVector` -> Yeah, vector as well\r\n* `XOnlyPubKey` -> Shouldn't matter?\r\n\r\nAgain, up to you what you see is a better fit.\r\n\r\nIf you want to provide a function for arrays and another for vectors, it seems fine as well.",
      "created_at": "2024-07-26T09:12:48Z",
      "updated_at": "2024-07-26T09:12:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1692754289",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692754289"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692958389",
      "pull_request_review_id": 2201654010,
      "id": 1692958389,
      "node_id": "PRRC_kwDOABII585k6H61",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> genesisOutputScript -> This must be a vector and can not be an array, because array-serialization is different from vector-serialization\r\n\r\nThanks for pointing that difference out, already ran into some other issues with local changes in test code regarding this. Seems a bit brittle that `vector`s serialize with the size prefixed while `Span`s don't, as `vector`s can implicitly convert to `Span`s.\r\n\r\nThis difference in behavior affects `DataStream` and possibly other types using **serialize.h**, but as far as I see `CScript` only has `CScript& operator<<(const std::vector<unsigned char>& b)`.\r\n\r\nI am considering proposing the `CScript` method take `std::span` instead. Either way I think `genesisOutputScript` should still be okay.",
      "created_at": "2024-07-26T11:57:45Z",
      "updated_at": "2024-07-26T11:57:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1692958389",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692958389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692989490",
      "pull_request_review_id": 2201712376,
      "id": 1692989490,
      "node_id": "PRRC_kwDOABII585k6Pgy",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Seems a bit brittle that `vector`s serialize with the size prefixed while `Span`s don't, as `vector`s can implicitly convert to `Span`s.\r\n\r\nAs for serialize code, an implicit conversion should not happen. If it does anywhere, then that is a bug and should be fixed.\r\n\r\n\r\n\r\n> I am considering proposing the `CScript` method take `std::span` instead. Either way I think `genesisOutputScript` should still be okay.\r\n\r\nI am not sure if it is beneficial to have cscript-serialization differ from streams-serialization here.  In any case, it shouldn't be required for the changes here, or otherwise touch the same lines of code as the changes here?",
      "created_at": "2024-07-26T12:25:45Z",
      "updated_at": "2024-07-26T12:25:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1692989490",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692989490"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1696565971",
      "pull_request_review_id": 2207043250,
      "id": 1696565971,
      "node_id": "PRRC_kwDOABII585lH4rT",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(Feel free to resolve the discussion for now, given that you dropped those changes here for now)",
      "created_at": "2024-07-30T08:39:03Z",
      "updated_at": "2024-07-30T08:39:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1696565971",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1696565971"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1715287560",
      "pull_request_review_id": 2235547654,
      "id": 1715287560,
      "node_id": "PRRC_kwDOABII585mPTYI",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 82,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Went with `ArrayFromBytes` for all in the latest tip ~d6d7a0b5221935518d2797aec7abc5c9632cbf68~ 240bc10e3f5f90fcc386b1a72ee2067a156abff3.\r\n\r\n~Avoided adding a public `CScript::operator<<(std::span)` and went for a private method + public `std::array` overload.~ (Latest doesn't touch `script.h`-header).\r\n\r\nHave a variant with consteval validation in VecFromHex-branch, but didn't feel it was urgent to use in any of the cases, so currently dropped from this PR:\r\nhttps://github.com/hodlinator/bitcoin/blob/2024-07/uint256S_consteval_VecFromHex/src/util/strencodings.h#L95-L110",
      "created_at": "2024-08-13T13:23:53Z",
      "updated_at": "2024-08-14T02:04:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1715287560",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1715287560"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1715621085",
      "pull_request_review_id": 2236080683,
      "id": 1715621085,
      "node_id": "PRRC_kwDOABII585mQkzd",
      "diff_hunk": "@@ -67,6 +68,42 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    // Only lowercase letters are supported, for consistency.\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Called with an invalid hex digit\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Uses a stack based container (array). Care needs to be\n+ *          taken to avoid using up too much stack memory especially in\n+ *          recursive functions or non-leaf nodes of the call graph.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, (Size - 1) / 2> ArrayFromHex(const char (&hex_str)[Size])\n+{\n+    // -1 comes from implicit null terminator\n+    if ((Size - 1) % 2 != 0) throw \"2 hex digits per byte is required\";\n+    std::array<Byte, (Size - 1) / 2> rv;\n+    size_t it = 0;\n+    for (auto& elem : rv) {\n+        auto hi = ConstevalHexDigit(hex_str[it++]) << 4;\n+        elem = Byte(hi | ConstevalHexDigit(hex_str[it++]));\n+    }\n+    return rv;\n+}\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const std::array<T, N>& b)",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 43,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "00dc16bc29124dfbaf9d47c5411e4ebcf95e30b5",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"refactor: Add consteval ArrayFromHex()\" (00dc16bc29124dfbaf9d47c5411e4ebcf95e30b5)\r\n\r\nIs this necessary? I'd be concerned adding such a generic top-level operator might cause this to get called in places we are not expecting, and maybe lead to hard to explain behavior or bugs. Would be good to at least have a comment explaining what this is intended to be used for.",
      "created_at": "2024-08-13T16:47:53Z",
      "updated_at": "2024-08-13T17:09:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1715621085",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1715621085"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1715636099",
      "pull_request_review_id": 2236080683,
      "id": 1715636099,
      "node_id": "PRRC_kwDOABII585mQoeD",
      "diff_hunk": "@@ -67,6 +68,42 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    // Only lowercase letters are supported, for consistency.\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Called with an invalid hex digit\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Uses a stack based container (array). Care needs to be\n+ *          taken to avoid using up too much stack memory especially in\n+ *          recursive functions or non-leaf nodes of the call graph.\n+ */",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 27,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "00dc16bc29124dfbaf9d47c5411e4ebcf95e30b5",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"refactor: Add consteval ArrayFromHex()\" (00dc16bc29124dfbaf9d47c5411e4ebcf95e30b5)\r\n\r\nThis warning seems unnecessarily scary and maybe not true. I don't think the function itself would use any stack space with NRVO, and callers could be calling this to initialize an array on the heap not the stack. Would suggest deleting this comment, because it seems like a warning about std::array in general, and I don't think there is anything that really distinguishes this function from other functions using std::array.",
      "created_at": "2024-08-13T17:00:11Z",
      "updated_at": "2024-08-13T17:09:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1715636099",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1715636099"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 83,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1715642251",
      "pull_request_review_id": 2236080683,
      "id": 1715642251,
      "node_id": "PRRC_kwDOABII585mQp-L",
      "diff_hunk": "@@ -392,7 +392,10 @@ class prevector {\n             change_capacity(new_size + (new_size >> 1));\n         }\n         T* ptr = item_ptr(p);\n-        memmove(ptr + count, ptr, (size() - p) * sizeof(T));\n+        // Passing dst variable with explicit type instead of temporary\n+        // expression calms down GCC under some circumstances.",
      "path": "src/prevector.h",
      "position": null,
      "original_position": 6,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "05c16ae8649ee3b6bbcdbdf0541a65ccf4477537",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"refactor: Make code more tolerant of constexpr std::arrays\" (05c16ae8649ee3b6bbcdbdf0541a65ccf4477537)\r\n\r\nWhat is this referring to?",
      "created_at": "2024-08-13T17:05:34Z",
      "updated_at": "2024-08-13T17:09:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1715642251",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1715642251"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 395,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 396,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716215869",
      "pull_request_review_id": 2237014975,
      "id": 1716215869,
      "node_id": "PRRC_kwDOABII585mS2A9",
      "diff_hunk": "@@ -67,6 +68,42 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    // Only lowercase letters are supported, for consistency.\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Called with an invalid hex digit\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Uses a stack based container (array). Care needs to be\n+ *          taken to avoid using up too much stack memory especially in\n+ *          recursive functions or non-leaf nodes of the call graph.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, (Size - 1) / 2> ArrayFromHex(const char (&hex_str)[Size])\n+{\n+    // -1 comes from implicit null terminator\n+    if ((Size - 1) % 2 != 0) throw \"2 hex digits per byte is required\";\n+    std::array<Byte, (Size - 1) / 2> rv;\n+    size_t it = 0;\n+    for (auto& elem : rv) {\n+        auto hi = ConstevalHexDigit(hex_str[it++]) << 4;\n+        elem = Byte(hi | ConstevalHexDigit(hex_str[it++]));\n+    }\n+    return rv;\n+}\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const std::array<T, N>& b)",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 43,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "00dc16bc29124dfbaf9d47c5411e4ebcf95e30b5",
      "in_reply_to_id": 1715621085,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agree, it turned out it could be worked around by switching to `BOOST_CHECK_EQUAL_COLLECTIONS` in **key_tests.cpp**.",
      "created_at": "2024-08-14T02:00:56Z",
      "updated_at": "2024-08-14T02:00:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716215869",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716215869"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716226929",
      "pull_request_review_id": 2237035142,
      "id": 1716226929,
      "node_id": "PRRC_kwDOABII585mS4tx",
      "diff_hunk": "@@ -67,6 +68,42 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    // Only lowercase letters are supported, for consistency.\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Called with an invalid hex digit\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Uses a stack based container (array). Care needs to be\n+ *          taken to avoid using up too much stack memory especially in\n+ *          recursive functions or non-leaf nodes of the call graph.\n+ */",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 27,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "00dc16bc29124dfbaf9d47c5411e4ebcf95e30b5",
      "in_reply_to_id": 1715636099,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is in response to https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1689162345\r\n\r\nTo summarize - the concern is not stack memory being used inside `ArrayFromBytes` itself, but rather that the `std::array` returned contains an inner C-array (https://github.com/gcc-mirror/gcc/blob/61715e9340ab8941d40d62158fe437e9dbe3e068/libstdc%2B%2B-v3/include/std/array) that is not allocated from the heap and so will bump the stack pointer in the calling function by a fair bit for long hex strings.\r\n\r\nShould clarify the comment a bit on next re-touch.",
      "created_at": "2024-08-14T02:16:39Z",
      "updated_at": "2024-08-14T02:16:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716226929",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716226929"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 83,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716229145",
      "pull_request_review_id": 2237039052,
      "id": 1716229145,
      "node_id": "PRRC_kwDOABII585mS5QZ",
      "diff_hunk": "@@ -392,7 +392,10 @@ class prevector {\n             change_capacity(new_size + (new_size >> 1));\n         }\n         T* ptr = item_ptr(p);\n-        memmove(ptr + count, ptr, (size() - p) * sizeof(T));\n+        // Passing dst variable with explicit type instead of temporary\n+        // expression calms down GCC under some circumstances.",
      "path": "src/prevector.h",
      "position": null,
      "original_position": 6,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "05c16ae8649ee3b6bbcdbdf0541a65ccf4477537",
      "in_reply_to_id": 1715642251,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I was running into an issue with `CScript` (inheriting `prevector`) and `std::array`s, similar to here: https://gitlab.freedesktop.org/pipewire/media-session/-/issues/4\r\n\r\nReverted this change in the latest push as I'm no longer modifying `CScript`. (Was running into MSVC CI-failures stemming from inability to infer `N`-parameter in constructor taking `std::array<unsigned char, N>::const_iterator`).",
      "created_at": "2024-08-14T02:19:53Z",
      "updated_at": "2024-08-14T02:29:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716229145",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716229145"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 395,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 396,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716574220",
      "pull_request_review_id": 2237589001,
      "id": 1716574220,
      "node_id": "PRRC_kwDOABII585mUNgM",
      "diff_hunk": "@@ -128,13 +128,13 @@ consteval base_blob<BITS>::base_blob(std::string_view hex_str)\n     // Non-lookup table version of HexDigit().\n     auto from_hex = [](const char c) -> int8_t {\n         if (c >= '0' && c <= '9') return c - '0';\n+        // Only lowercase letters are supported, for consistency.",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 4,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "9dab917088e83f627786ed5caafec859a3481b78",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "<3",
      "created_at": "2024-08-14T09:08:48Z",
      "updated_at": "2024-08-14T11:27:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716574220",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716574220"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716588998",
      "pull_request_review_id": 2237589001,
      "id": 1716588998,
      "node_id": "PRRC_kwDOABII585mURHG",
      "diff_hunk": "@@ -254,7 +254,11 @@ class XOnlyPubKey\n     bool IsNull() const { return m_keydata.IsNull(); }\n \n     /** Construct an x-only pubkey from exactly 32 bytes. */",
      "path": "src/pubkey.h",
      "position": null,
      "original_position": 3,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "29090eca423327353b474615d02ed7c3190e4a50",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: now that the code is available here, the comment bacame redundant, since it doesn't provide any info that the code doesn't already explain",
      "created_at": "2024-08-14T09:17:28Z",
      "updated_at": "2024-08-14T19:00:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716588998",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716588998"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 256,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716610850",
      "pull_request_review_id": 2237589001,
      "id": 1716610850,
      "node_id": "PRRC_kwDOABII585mUWci",
      "diff_hunk": "@@ -154,28 +154,29 @@ BOOST_AUTO_TEST_CASE(parse_hex)\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Spaces between bytes must be supported\n+    expected = {0x12, 0x34, 0x56, 0x78};\n     result = ParseHex(\"12 34 56 78\");\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x12 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());",
      "path": "src/test/util_tests.cpp",
      "position": 50,
      "original_position": 7,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "1953d21e3f2b7d0fecae0b7bdf4012f16cb21b41",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nice!\r\n\r\nAlternatively, since we claim to be testing whitespace support - and we've already tested that non-whitespace values are parsed correctly -, we might as well compare `ParseHex(\"12 34 56 78\")` to `ParseHex(\"12345678\")` instead - otherwise all tests would fail all the time when an error is introduced, this way only the appropriate tests would fail (+ testing is simpler).",
      "created_at": "2024-08-14T09:31:03Z",
      "updated_at": "2024-08-14T11:27:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716610850",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716610850"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 166,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716616576",
      "pull_request_review_id": 2237589001,
      "id": 1716616576,
      "node_id": "PRRC_kwDOABII585mUX2A",
      "diff_hunk": "@@ -154,28 +154,29 @@ BOOST_AUTO_TEST_CASE(parse_hex)\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Spaces between bytes must be supported\n+    expected = {0x12, 0x34, 0x56, 0x78};\n     result = ParseHex(\"12 34 56 78\");\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x12 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\"12 34 56 78\").value();\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x12 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Leading space must be supported (used in BerkeleyEnvironment::Salvage)\n+    expected = {0x89, 0x34, 0x56, 0x78};\n     result = ParseHex(\" 89 34 56 78\");\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x89 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\" 89 34 56 78\").value();\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x89 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Mixed case and spaces are supported\n+    expected = {0xff, 0xaa};\n     result = ParseHex(\"     Ff        aA    \");",
      "path": "src/test/util_tests.cpp",
      "position": 66,
      "original_position": 23,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "1953d21e3f2b7d0fecae0b7bdf4012f16cb21b41",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "internal whitespaces are weird enough - but do we still encourage mixed casing?",
      "created_at": "2024-08-14T09:35:20Z",
      "updated_at": "2024-08-14T11:27:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716616576",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716616576"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 179,
      "original_line": 179,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716622610",
      "pull_request_review_id": 2237589001,
      "id": 1716622610,
      "node_id": "PRRC_kwDOABII585mUZUS",
      "diff_hunk": "@@ -148,6 +148,8 @@ BOOST_AUTO_TEST_CASE(parse_hex)\n     std::vector<unsigned char> result;\n     std::vector<unsigned char> expected(ParseHex_expected, ParseHex_expected + sizeof(ParseHex_expected));",
      "path": "src/test/util_tests.cpp",
      "position": null,
      "original_position": 2,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "09458eadc9a4484ba37a70d1b378ed3f3c9e31d0",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can me modernized/simplified:\r\n```suggestion\r\n    std::vector<unsigned char> expected(std::begin(ParseHex_expected), std::end(ParseHex_expected));\r\n```\r\n\r\n(nit: weird `ParseHex_expected` naming)",
      "created_at": "2024-08-14T09:40:04Z",
      "updated_at": "2024-08-14T11:27:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716622610",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716622610"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716629782",
      "pull_request_review_id": 2237589001,
      "id": 1716629782,
      "node_id": "PRRC_kwDOABII585mUbEW",
      "diff_hunk": "@@ -67,6 +68,36 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    // Only lowercase letters are supported, for consistency.\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Called with an invalid hex digit\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Uses a stack based container (array). Care needs to be\n+ *          taken to avoid using up too much stack memory especially in\n+ *          recursive functions or non-leaf nodes of the call graph.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, (Size - 1) / 2> ArrayFromHex(const char (&hex_str)[Size])\n+{\n+    // - 1 comes from implicit null terminator\n+    if ((Size - 1) % 2 == 1) throw \"2 hex digits per byte is required\";",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 32,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "09458eadc9a4484ba37a70d1b378ed3f3c9e31d0",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "* x - 1 is odd means x is even\r\n* `digits` is plural, `are required` seems better\r\n```suggestion\r\n    if (Size % 2 == 0) throw \"2 hex digits per byte are required\";\r\n```\r\nor\r\n```suggestion\r\n    if (Size % 2 == 0) throw \"2 hex digits required per byte\";\r\n```",
      "created_at": "2024-08-14T09:44:58Z",
      "updated_at": "2024-08-14T11:27:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716629782",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716629782"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 90,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716648031",
      "pull_request_review_id": 2237589001,
      "id": 1716648031,
      "node_id": "PRRC_kwDOABII585mUfhf",
      "diff_hunk": "@@ -67,6 +68,36 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    // Only lowercase letters are supported, for consistency.\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Called with an invalid hex digit\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Uses a stack based container (array). Care needs to be\n+ *          taken to avoid using up too much stack memory especially in\n+ *          recursive functions or non-leaf nodes of the call graph.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, (Size - 1) / 2> ArrayFromHex(const char (&hex_str)[Size])\n+{\n+    // - 1 comes from implicit null terminator\n+    if ((Size - 1) % 2 == 1) throw \"2 hex digits per byte is required\";\n+    std::array<Byte, (Size - 1) / 2> rv{};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 33,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "09458eadc9a4484ba37a70d1b378ed3f3c9e31d0",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "we've checked already that Size is always odd, it seems to me that we can safely truncate:\r\n```suggestion\r\n    std::array<Byte, Size  / 2> rv{};\r\n```\r\nand\r\n```C++\r\nstd::array<Byte, Size / 2>\r\n```\r\nin the signature",
      "created_at": "2024-08-14T09:58:30Z",
      "updated_at": "2024-08-14T11:27:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716648031",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716648031"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716660247",
      "pull_request_review_id": 2237724166,
      "id": 1716660247,
      "node_id": "PRRC_kwDOABII585mUigX",
      "diff_hunk": "@@ -63,11 +61,11 @@ static void TestEncryptSingle(const CCrypter& crypt, const CKeyingMaterial& vchP\n     TestDecrypt(crypt, vchCiphertext, vchPlaintext2);\n }\n \n-static void TestEncrypt(const CCrypter& crypt, const std::vector<unsigned char>& vchPlaintextIn, \\\n+static void TestEncrypt(const CCrypter& crypt, std::span<const unsigned char> vchPlaintextIn, \\",
      "path": "src/wallet/test/wallet_crypto_tests.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "29090eca423327353b474615d02ed7c3190e4a50",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "style nit in 29090eca423327353b474615d02ed7c3190e4a50: Can drop the trailing `\\`, since this is a normal function and not a macro.",
      "created_at": "2024-08-14T10:07:58Z",
      "updated_at": "2024-08-14T10:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716660247",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716660247"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716665464",
      "pull_request_review_id": 2237724166,
      "id": 1716665464,
      "node_id": "PRRC_kwDOABII585mUjx4",
      "diff_hunk": "@@ -128,13 +128,13 @@ consteval base_blob<BITS>::base_blob(std::string_view hex_str)\n     // Non-lookup table version of HexDigit().\n     auto from_hex = [](const char c) -> int8_t {\n         if (c >= '0' && c <= '9') return c - '0';\n+        // Only lowercase letters are supported, for consistency.\n         if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n-        if (c >= 'A' && c <= 'F') return c - 'A' + 0xA;\n \n-        assert(false); // Reached if ctor is called with an invalid hex digit.\n+        throw \"Called ctor with an invalid hex digit\";",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 9,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "9dab917088e83f627786ed5caafec859a3481b78",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit in 9dab917088e83f627786ed5caafec859a3481b78: If you change the behavior, it also needs to adjust the error string. Now it should say: `throw \"Hex string must only contain lowercase hex chars\";`.",
      "created_at": "2024-08-14T10:11:57Z",
      "updated_at": "2024-08-14T10:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716665464",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716665464"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716678159",
      "pull_request_review_id": 2237589001,
      "id": 1716678159,
      "node_id": "PRRC_kwDOABII585mUm4P",
      "diff_hunk": "@@ -71,7 +71,7 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n-    const CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+    const CScript genesisOutputScript = CScript() << ToByteVector(ArrayFromHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\")) << OP_CHECKSIG;",
      "path": "src/kernel/chainparams.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Checked manually to make sure this still produces the same CScript as before 👍 ",
      "created_at": "2024-08-14T10:21:26Z",
      "updated_at": "2024-08-14T11:27:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716678159",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716678159"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716680866",
      "pull_request_review_id": 2237724166,
      "id": 1716680866,
      "node_id": "PRRC_kwDOABII585mUnii",
      "diff_hunk": "@@ -1383,60 +1390,60 @@ BOOST_AUTO_TEST_CASE(script_FindAndDelete)\n     BOOST_CHECK_EQUAL(FindAndDelete(s, d), 4);\n     BOOST_CHECK(s == expect);\n \n-    s = ScriptFromHex(\"0302ff03\"); // PUSH 0x02ff03 onto stack\n-    d = ScriptFromHex(\"0302ff03\");\n+    s = ToScript(ArrayFromHex(\"0302ff03\")); // PUSH 0x02ff03 onto stack\n+    d = ToScript(ArrayFromHex(\"0302ff03\"));",
      "path": "src/test/script_tests.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "style nit in 6a256b96af8c94804538eb9e78964557c032b74f: I think in tests it is more important that they are short, easy to read, and write. Compile time enforcements are neat at best, but shouldn't be a goal. Generally, the unit tests are single threaded and fully deterministic, so if the test ran once (and passed), it should always pass.\r\n\r\nSo my preference would be to just call `data = *Assert(TryParseHex(str))` inside `ScriptFromHex`.\r\n\r\nThis makes the diff smaller and also ensures that the same validation is done for `ScriptFromHex` that remain untouched in this pull.",
      "created_at": "2024-08-14T10:23:47Z",
      "updated_at": "2024-08-14T10:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716680866",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716680866"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1394,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716685019",
      "pull_request_review_id": 2237589001,
      "id": 1716685019,
      "node_id": "PRRC_kwDOABII585mUojb",
      "diff_hunk": "@@ -72,7 +72,7 @@ BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n     // check that DecodeBase58 skips whitespace, but still fails with unexpected non-whitespace at the end.\n     BOOST_CHECK(!DecodeBase58(\" \\t\\n\\v\\f\\r skip \\r\\f\\v\\n\\t a\", result, 3));\n     BOOST_CHECK( DecodeBase58(\" \\t\\n\\v\\f\\r skip \\r\\f\\v\\n\\t \", result, 3));\n-    std::vector<unsigned char> expected = ParseHex(\"971a55\");\n+    constexpr std::array<unsigned char, 3> expected{ArrayFromHex(\"971a55\")};",
      "path": "src/test/base58_tests.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could we simplify some of these declarations (at least in tests) to e.g.\r\n```suggestion\r\n    auto expected{ArrayFromHex(\"971a55\")};\r\n```",
      "created_at": "2024-08-14T10:27:17Z",
      "updated_at": "2024-08-14T11:27:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716685019",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716685019"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716693711",
      "pull_request_review_id": 2237724166,
      "id": 1716693711,
      "node_id": "PRRC_kwDOABII585mUqrP",
      "diff_hunk": "@@ -407,7 +407,7 @@ class SigNetParams : public CChainParams {\n         vSeeds.clear();\n \n         if (!options.challenge) {\n-            bin = ParseHex(\"512103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430210359ef5021964fe22d6f8e05b2463c9540ce96883fe3b278760f048f5189f2e6c452ae\");\n+            bin = ToByteVector(ArrayFromHex(\"512103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430210359ef5021964fe22d6f8e05b2463c9540ce96883fe3b278760f048f5189f2e6c452ae\"));",
      "path": "src/kernel/chainparams.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ToByteVector seems to be called in a few places, though mostly in tests.\r\n\r\nI wonder if it makes sense to just go with https://github.com/hodlinator/bitcoin/blob/2024-07/uint256S_consteval_VecFromHex/src/util/strencodings.h#L95-L110\r\n\r\n",
      "created_at": "2024-08-14T10:34:48Z",
      "updated_at": "2024-08-14T10:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716693711",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716693711"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 410,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716695410",
      "pull_request_review_id": 2237589001,
      "id": 1716695410,
      "node_id": "PRRC_kwDOABII585mUrFy",
      "diff_hunk": "@@ -1358,6 +1358,13 @@ static CScript ScriptFromHex(const std::string& str)\n     return CScript(data.begin(), data.end());\n }\n \n+template <size_t N>\n+static CScript ToScript(const std::array<uint8_t, N>& data)\n+{\n+    auto v = ToByteVector(data);",
      "path": "src/test/script_tests.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "To keep previous behavior fully, we could we add a `CheckedParseHex` style validation here as well\r\n(since `ArrayFromHex(\"\")` is theoretically accepted, while `ScriptFromHex` failed for empty inputs).",
      "created_at": "2024-08-14T10:36:26Z",
      "updated_at": "2024-08-14T11:28:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716695410",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716695410"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1364,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716703571",
      "pull_request_review_id": 2237724166,
      "id": 1716703571,
      "node_id": "PRRC_kwDOABII585mUtFT",
      "diff_hunk": "@@ -11,7 +11,7 @@\n #include <vector>\n \n namespace wallet {\n-int CCrypter::BytesToKeySHA512AES(const std::vector<unsigned char>& chSalt, const SecureString& strKeyData, int count, unsigned char *key,unsigned char *iv) const\n+int CCrypter::BytesToKeySHA512AES(std::span<const unsigned char> chSalt, const SecureString& strKeyData, int count, unsigned char* key, unsigned char* iv) const",
      "path": "src/wallet/crypter.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "29090eca423327353b474615d02ed7c3190e4a50",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 29090eca423327353b474615d02ed7c3190e4a50: When touching all of those lines, I wonder if it makes sense to switch them to `std::byte`, but that will probably be more involved.",
      "created_at": "2024-08-14T10:42:15Z",
      "updated_at": "2024-08-14T10:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716703571",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716703571"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716705665",
      "pull_request_review_id": 2237589001,
      "id": 1716705665,
      "node_id": "PRRC_kwDOABII585mUtmB",
      "diff_hunk": "@@ -1358,6 +1358,13 @@ static CScript ScriptFromHex(const std::string& str)\n     return CScript(data.begin(), data.end());\n }\n \n+template <size_t N>\n+static CScript ToScript(const std::array<uint8_t, N>& data)\n+{\n+    auto v = ToByteVector(data);\n+    return CScript(v.begin(), v.end());",
      "path": "src/test/script_tests.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do we even need the vector conversion here?\r\n```C++\r\n    return CScript(data.begin(), data.end());\r\n```",
      "created_at": "2024-08-14T10:43:36Z",
      "updated_at": "2024-08-14T11:27:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716705665",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716705665"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1365,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716709558",
      "pull_request_review_id": 2237589001,
      "id": 1716709558,
      "node_id": "PRRC_kwDOABII585mUui2",
      "diff_hunk": "@@ -1383,60 +1390,60 @@ BOOST_AUTO_TEST_CASE(script_FindAndDelete)\n     BOOST_CHECK_EQUAL(FindAndDelete(s, d), 4);\n     BOOST_CHECK(s == expect);\n \n-    s = ScriptFromHex(\"0302ff03\"); // PUSH 0x02ff03 onto stack\n-    d = ScriptFromHex(\"0302ff03\");",
      "path": "src/test/script_tests.cpp",
      "position": 37,
      "original_position": 19,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Checked that `ScriptFromHex` is only used for non-static values now 👍 \r\n\r\nThough I'm not sure `ToScript(ArrayFromHex(\"0302ff03\"))` is more readable (or performant) than `ScriptFromHex(\"0302ff03\"`.",
      "created_at": "2024-08-14T10:47:03Z",
      "updated_at": "2024-08-14T11:27:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716709558",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716709558"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1387,
      "original_line": 1387,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716732991",
      "pull_request_review_id": 2237840417,
      "id": 1716732991,
      "node_id": "PRRC_kwDOABII585mU0Q_",
      "diff_hunk": "@@ -254,7 +254,11 @@ class XOnlyPubKey\n     bool IsNull() const { return m_keydata.IsNull(); }\n \n     /** Construct an x-only pubkey from exactly 32 bytes. */\n-    explicit XOnlyPubKey(Span<const unsigned char> bytes);\n+    constexpr explicit XOnlyPubKey(Span<const unsigned char> bytes)\n+    {\n+        assert(bytes.size() == 32);",
      "path": "src/pubkey.h",
      "position": null,
      "original_position": 7,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "240bc10e3f5f90fcc386b1a72ee2067a156abff3",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: while touching, might be worth updating to\r\n\r\n```suggestion\r\n        assert(bytes.size() == m_keydata.size());\r\n```",
      "created_at": "2024-08-14T11:06:25Z",
      "updated_at": "2024-08-14T11:49:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716732991",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716732991"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 259,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716747672",
      "pull_request_review_id": 2237589001,
      "id": 1716747672,
      "node_id": "PRRC_kwDOABII585mU32Y",
      "diff_hunk": "@@ -407,7 +407,7 @@ class SigNetParams : public CChainParams {\n         vSeeds.clear();\n \n         if (!options.challenge) {\n-            bin = ParseHex(\"512103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430210359ef5021964fe22d6f8e05b2463c9540ce96883fe3b278760f048f5189f2e6c452ae\");\n+            bin = ToByteVector(ArrayFromHex(\"512103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430210359ef5021964fe22d6f8e05b2463c9540ce96883fe3b278760f048f5189f2e6c452ae\"));",
      "path": "src/kernel/chainparams.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": 1716693711,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Or maybe we could change the `CScript& operator<<` to accept `std::span` instead:\r\n```patch\r\ndiff --git a/src/script/script.h b/src/script/script.h\r\n--- a/src/script/script.h\t(revision 8509f5ade3ad7e1f1a727fe027483faaf2f2d4fe)\r\n+++ b/src/script/script.h\t(date 1723634083423)\r\n@@ -463,7 +463,7 @@\r\n         return *this;\r\n     }\r\n \r\n-    CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\r\n+    CScript& operator<<(const std::span<const unsigned char>& b) LIFETIMEBOUND\r\n     {\r\n         if (b.size() < OP_PUSHDATA1)\r\n         {\r\n```\r\n\r\nEdit: these would work for `CScript() << OP_RETURN << ArrayFromHex(\"\")` only (eagerly merged my comment with @maflcko's, but it wasn't a perfect match)\r\n",
      "created_at": "2024-08-14T11:19:19Z",
      "updated_at": "2024-08-14T11:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716747672",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716747672"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 410,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716752262",
      "pull_request_review_id": 2237840417,
      "id": 1716752262,
      "node_id": "PRRC_kwDOABII585mU4-G",
      "diff_hunk": "@@ -125,20 +125,11 @@ class base_blob\n template <unsigned int BITS>\n consteval base_blob<BITS>::base_blob(std::string_view hex_str)\n {\n-    // Non-lookup table version of HexDigit().\n-    auto from_hex = [](const char c) -> int8_t {\n-        if (c >= '0' && c <= '9') return c - '0';\n-        // Only lowercase letters are supported, for consistency.\n-        if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n-\n-        throw \"Called ctor with an invalid hex digit\";\n-    };\n-\n     if (hex_str.length() != m_data.size() * 2) throw \"Hex string must fit exactly\";\n     auto str_it = hex_str.rbegin();\n     for (auto& elem : m_data) {\n-        auto lo = from_hex(*(str_it++));\n-        elem = (from_hex(*(str_it++)) << 4) | lo;\n+        auto lo = ConstevalHexDigit(*(str_it++));",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 18,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "09458eadc9a4484ba37a70d1b378ed3f3c9e31d0",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm unable to compile 09458eadc9a4484ba37a70d1b378ed3f3c9e31d0  using:\r\n\r\n```\r\n% clang --version\r\nHomebrew clang version 17.0.6\r\nTarget: arm64-apple-darwin23.3.0\r\nThread model: posix\r\nInstalledDir: /opt/homebrew/opt/llvm/bin\r\n```\r\n\r\n\r\n```\r\ngit clean -xdf && git checkout 09458eadc9a4484ba37a70d1b378ed3f3c9e31d0 && ./autogen.sh && ./configure --without-gui && make -j 7\r\n\r\n./uint256.h:131:19: error: call to consteval function 'ConstevalHexDigit' is not a constant expression\r\n        auto lo = ConstevalHexDigit(*(str_it++));\r\n                  ^\r\n./uint256.h:173:60: note: in instantiation of member function 'base_blob<256>::base_blob' requested here\r\n    consteval explicit uint256(std::string_view hex_str) : base_blob<256>(hex_str) {}\r\n                                                           ^\r\n/Library/Developer/CommandLineTools/SDKs/MacOSX14.0.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:168:56: note: read of non-constexpr variable 'str_it' is not allowed in a constant expression\r\n    reverse_iterator operator++(int) {reverse_iterator __tmp(*this); --current; return __tmp;}\r\n                                                       ^\r\n/Library/Developer/CommandLineTools/SDKs/MacOSX14.0.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:168:56: note: in call to 'reverse_iterator(str_it)'\r\n./uint256.h:131:39: note: in call to '&str_it->operator++(0)'\r\n        auto lo = ConstevalHexDigit(*(str_it++));\r\n                                      ^\r\n./uint256.h:129:10: note: declared here\r\n    auto str_it = hex_str.rbegin();\r\n```",
      "created_at": "2024-08-14T11:23:25Z",
      "updated_at": "2024-08-14T11:49:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716752262",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716752262"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716754351",
      "pull_request_review_id": 2237589001,
      "id": 1716754351,
      "node_id": "PRRC_kwDOABII585mU5ev",
      "diff_hunk": "@@ -63,11 +61,11 @@ static void TestEncryptSingle(const CCrypter& crypt, const CKeyingMaterial& vchP\n     TestDecrypt(crypt, vchCiphertext, vchPlaintext2);\n }\n \n-static void TestEncrypt(const CCrypter& crypt, const std::vector<unsigned char>& vchPlaintextIn, \\\n+static void TestEncrypt(const CCrypter& crypt, std::span<const unsigned char> vchPlaintextIn, \\",
      "path": "src/wallet/test/wallet_crypto_tests.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "29090eca423327353b474615d02ed7c3190e4a50",
      "in_reply_to_id": 1716660247,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "My original comment was:\r\n> Q: what the purpose of the trailing backslash, is it an automatic formatter trick?\r\n\r\nBut this answers it, thanks",
      "created_at": "2024-08-14T11:25:15Z",
      "updated_at": "2024-08-14T11:27:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716754351",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716754351"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716833566",
      "pull_request_review_id": 2238011758,
      "id": 1716833566,
      "node_id": "PRRC_kwDOABII585mVM0e",
      "diff_hunk": "@@ -125,20 +125,11 @@ class base_blob\n template <unsigned int BITS>\n consteval base_blob<BITS>::base_blob(std::string_view hex_str)\n {\n-    // Non-lookup table version of HexDigit().\n-    auto from_hex = [](const char c) -> int8_t {\n-        if (c >= '0' && c <= '9') return c - '0';\n-        // Only lowercase letters are supported, for consistency.\n-        if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n-\n-        throw \"Called ctor with an invalid hex digit\";\n-    };\n-\n     if (hex_str.length() != m_data.size() * 2) throw \"Hex string must fit exactly\";\n     auto str_it = hex_str.rbegin();\n     for (auto& elem : m_data) {\n-        auto lo = from_hex(*(str_it++));\n-        elem = (from_hex(*(str_it++)) << 4) | lo;\n+        auto lo = ConstevalHexDigit(*(str_it++));",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 18,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "09458eadc9a4484ba37a70d1b378ed3f3c9e31d0",
      "in_reply_to_id": 1716752262,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What is your macOS and XCode version? IIRC Xcode 14 is no longer supported, see also https://github.com/bitcoin/bitcoin/pull/29934, but I think this isn't documented, nor tested, so probably up for debate.\r\n\r\nThe CI passes, because it is using Xcode 15, see d742be3d3f5d5063d7160f72422bce2fec953f38",
      "created_at": "2024-08-14T12:26:02Z",
      "updated_at": "2024-08-14T12:26:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716833566",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716833566"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716839513",
      "pull_request_review_id": 2238021832,
      "id": 1716839513,
      "node_id": "PRRC_kwDOABII585mVORZ",
      "diff_hunk": "@@ -125,20 +125,11 @@ class base_blob\n template <unsigned int BITS>\n consteval base_blob<BITS>::base_blob(std::string_view hex_str)\n {\n-    // Non-lookup table version of HexDigit().\n-    auto from_hex = [](const char c) -> int8_t {\n-        if (c >= '0' && c <= '9') return c - '0';\n-        // Only lowercase letters are supported, for consistency.\n-        if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n-\n-        throw \"Called ctor with an invalid hex digit\";\n-    };\n-\n     if (hex_str.length() != m_data.size() * 2) throw \"Hex string must fit exactly\";\n     auto str_it = hex_str.rbegin();\n     for (auto& elem : m_data) {\n-        auto lo = from_hex(*(str_it++));\n-        elem = (from_hex(*(str_it++)) << 4) | lo;\n+        auto lo = ConstevalHexDigit(*(str_it++));",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 18,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "09458eadc9a4484ba37a70d1b378ed3f3c9e31d0",
      "in_reply_to_id": 1716752262,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It was working for me with:\r\n```python\r\n % clang --version\r\nHomebrew clang version 18.1.8\r\nTarget: arm64-apple-darwin23.5.0\r\nThread model: posix\r\nInstalledDir: /opt/homebrew/opt/llvm/bin\r\n\r\n % xcodebuild -version\r\nXcode 15.4\r\nBuild version 15F31d\r\n```",
      "created_at": "2024-08-14T12:30:25Z",
      "updated_at": "2024-08-14T12:31:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716839513",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716839513"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716875704",
      "pull_request_review_id": 2238080694,
      "id": 1716875704,
      "node_id": "PRRC_kwDOABII585mVXG4",
      "diff_hunk": "@@ -71,7 +71,7 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n-    const CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+    const CScript genesisOutputScript = CScript() << ToByteVector(ArrayFromHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\")) << OP_CHECKSIG;",
      "path": "src/kernel/chainparams.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": 1716678159,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Responding to https://github.com/bitcoin/bitcoin/pull/30377/files#r1716678159:\r\n\r\nThanks, better get this part right. :)",
      "created_at": "2024-08-14T12:54:35Z",
      "updated_at": "2024-08-14T17:30:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716875704",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716875704"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716886175",
      "pull_request_review_id": 2238080694,
      "id": 1716886175,
      "node_id": "PRRC_kwDOABII585mVZqf",
      "diff_hunk": "@@ -407,7 +407,7 @@ class SigNetParams : public CChainParams {\n         vSeeds.clear();\n \n         if (!options.challenge) {\n-            bin = ParseHex(\"512103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430210359ef5021964fe22d6f8e05b2463c9540ce96883fe3b278760f048f5189f2e6c452ae\");\n+            bin = ToByteVector(ArrayFromHex(\"512103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430210359ef5021964fe22d6f8e05b2463c9540ce96883fe3b278760f048f5189f2e6c452ae\"));",
      "path": "src/kernel/chainparams.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": 1716693711,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Responding to https://github.com/bitcoin/bitcoin/pull/30377/files#r1716693711:\r\n@maflcko: Might introduce `VecFromHex` for tests but I like that this constant is fully compile time.\r\n\r\n@paplorinc: I have been trying out exactly that approach quite a bit, but was [warned by maflcko](https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1692989490) that there may be lying dragons among the different serializations of `vector`/`array`/`span`/`Span`. Also had some annoying MSVC compiler errors when just trying to add an overload for `std::array`. So undid my changes to that class.",
      "created_at": "2024-08-14T13:01:46Z",
      "updated_at": "2024-08-14T17:30:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716886175",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716886175"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 410,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716887365",
      "pull_request_review_id": 2238080694,
      "id": 1716887365,
      "node_id": "PRRC_kwDOABII585mVZ9F",
      "diff_hunk": "@@ -72,7 +72,7 @@ BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n     // check that DecodeBase58 skips whitespace, but still fails with unexpected non-whitespace at the end.\n     BOOST_CHECK(!DecodeBase58(\" \\t\\n\\v\\f\\r skip \\r\\f\\v\\n\\t a\", result, 3));\n     BOOST_CHECK( DecodeBase58(\" \\t\\n\\v\\f\\r skip \\r\\f\\v\\n\\t \", result, 3));\n-    std::vector<unsigned char> expected = ParseHex(\"971a55\");\n+    constexpr std::array<unsigned char, 3> expected{ArrayFromHex(\"971a55\")};",
      "path": "src/test/base58_tests.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": 1716685019,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Responding to https://github.com/bitcoin/bitcoin/pull/30377/files#r1716685019:\r\nI'll meet you half-way with `constexpr auto`. :)",
      "created_at": "2024-08-14T13:02:34Z",
      "updated_at": "2024-08-14T17:30:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716887365",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716887365"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716890935",
      "pull_request_review_id": 2238080694,
      "id": 1716890935,
      "node_id": "PRRC_kwDOABII585mVa03",
      "diff_hunk": "@@ -1358,6 +1358,13 @@ static CScript ScriptFromHex(const std::string& str)\n     return CScript(data.begin(), data.end());\n }\n \n+template <size_t N>\n+static CScript ToScript(const std::array<uint8_t, N>& data)\n+{\n+    auto v = ToByteVector(data);\n+    return CScript(v.begin(), v.end());",
      "path": "src/test/script_tests.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": 1716705665,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Clang and GCC don't, but MSVC does. :(\r\n\r\nRemoved this function in latest push.",
      "created_at": "2024-08-14T13:04:57Z",
      "updated_at": "2024-08-14T17:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716890935",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716890935"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1365,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716895696",
      "pull_request_review_id": 2238080694,
      "id": 1716895696,
      "node_id": "PRRC_kwDOABII585mVb_Q",
      "diff_hunk": "@@ -154,28 +154,29 @@ BOOST_AUTO_TEST_CASE(parse_hex)\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Spaces between bytes must be supported\n+    expected = {0x12, 0x34, 0x56, 0x78};\n     result = ParseHex(\"12 34 56 78\");\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x12 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());",
      "path": "src/test/util_tests.cpp",
      "position": 50,
      "original_position": 7,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "1953d21e3f2b7d0fecae0b7bdf4012f16cb21b41",
      "in_reply_to_id": 1716610850,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Responding to https://github.com/bitcoin/bitcoin/pull/30377/files#r1716610850:\r\nI think it's more rigorous/strict to not use `ParseHex` on both left & right sides of the comparison.",
      "created_at": "2024-08-14T13:08:15Z",
      "updated_at": "2024-08-14T17:30:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716895696",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716895696"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 166,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716900164",
      "pull_request_review_id": 2238080694,
      "id": 1716900164,
      "node_id": "PRRC_kwDOABII585mVdFE",
      "diff_hunk": "@@ -125,20 +125,11 @@ class base_blob\n template <unsigned int BITS>\n consteval base_blob<BITS>::base_blob(std::string_view hex_str)\n {\n-    // Non-lookup table version of HexDigit().\n-    auto from_hex = [](const char c) -> int8_t {\n-        if (c >= '0' && c <= '9') return c - '0';\n-        // Only lowercase letters are supported, for consistency.\n-        if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n-\n-        throw \"Called ctor with an invalid hex digit\";\n-    };\n-\n     if (hex_str.length() != m_data.size() * 2) throw \"Hex string must fit exactly\";\n     auto str_it = hex_str.rbegin();\n     for (auto& elem : m_data) {\n-        auto lo = from_hex(*(str_it++));\n-        elem = (from_hex(*(str_it++)) << 4) | lo;\n+        auto lo = ConstevalHexDigit(*(str_it++));",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 18,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "09458eadc9a4484ba37a70d1b378ed3f3c9e31d0",
      "in_reply_to_id": 1716752262,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Responding to https://github.com/bitcoin/bitcoin/pull/30377/files#r1716752262:\r\n\r\nWeird, actually works for me on same clang version as @stickies-v, but under Linux:\r\n```\r\n$ clang --version\r\nclang version 17.0.6\r\nTarget: x86_64-unknown-linux-gnu\r\n```\r\nMaybe it's the standard library that is somehow different (missing some `constexpr`)?",
      "created_at": "2024-08-14T13:10:45Z",
      "updated_at": "2024-08-14T17:30:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716900164",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716900164"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716903532",
      "pull_request_review_id": 2238080694,
      "id": 1716903532,
      "node_id": "PRRC_kwDOABII585mVd5s",
      "diff_hunk": "@@ -11,7 +11,7 @@\n #include <vector>\n \n namespace wallet {\n-int CCrypter::BytesToKeySHA512AES(const std::vector<unsigned char>& chSalt, const SecureString& strKeyData, int count, unsigned char *key,unsigned char *iv) const\n+int CCrypter::BytesToKeySHA512AES(std::span<const unsigned char> chSalt, const SecureString& strKeyData, int count, unsigned char* key, unsigned char* iv) const",
      "path": "src/wallet/crypter.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "29090eca423327353b474615d02ed7c3190e4a50",
      "in_reply_to_id": 1716703571,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Responding to https://github.com/bitcoin/bitcoin/pull/30377/files#r1716703571:\r\nTried to start switching to `std::byte` after your comment, but it quickly propagated to untouched files.",
      "created_at": "2024-08-14T13:12:56Z",
      "updated_at": "2024-08-14T17:30:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716903532",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716903532"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716909297",
      "pull_request_review_id": 2238137404,
      "id": 1716909297,
      "node_id": "PRRC_kwDOABII585mVfTx",
      "diff_hunk": "@@ -125,20 +125,11 @@ class base_blob\n template <unsigned int BITS>\n consteval base_blob<BITS>::base_blob(std::string_view hex_str)\n {\n-    // Non-lookup table version of HexDigit().\n-    auto from_hex = [](const char c) -> int8_t {\n-        if (c >= '0' && c <= '9') return c - '0';\n-        // Only lowercase letters are supported, for consistency.\n-        if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n-\n-        throw \"Called ctor with an invalid hex digit\";\n-    };\n-\n     if (hex_str.length() != m_data.size() * 2) throw \"Hex string must fit exactly\";\n     auto str_it = hex_str.rbegin();\n     for (auto& elem : m_data) {\n-        auto lo = from_hex(*(str_it++));\n-        elem = (from_hex(*(str_it++)) << 4) | lo;\n+        auto lo = ConstevalHexDigit(*(str_it++));",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 18,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "09458eadc9a4484ba37a70d1b378ed3f3c9e31d0",
      "in_reply_to_id": 1716752262,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> What is your macOS and XCode version? IIRC Xcode 14 is no longer supported, see also https://github.com/bitcoin/bitcoin/pull/29934, but I think this isn't documented, nor tested, so probably up for debate.\r\n\r\nThanks, I'm on macOS 14.3.1 and just bumped XCode from 14.3.1.0.1.1683849156 to 15.3.0.0.1.1708646388 which resolves the issue 👍 ",
      "created_at": "2024-08-14T13:16:27Z",
      "updated_at": "2024-08-14T13:16:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716909297",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716909297"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716956530",
      "pull_request_review_id": 2238217828,
      "id": 1716956530,
      "node_id": "PRRC_kwDOABII585mVq1y",
      "diff_hunk": "@@ -125,20 +125,11 @@ class base_blob\n template <unsigned int BITS>\n consteval base_blob<BITS>::base_blob(std::string_view hex_str)\n {\n-    // Non-lookup table version of HexDigit().\n-    auto from_hex = [](const char c) -> int8_t {\n-        if (c >= '0' && c <= '9') return c - '0';\n-        // Only lowercase letters are supported, for consistency.\n-        if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n-\n-        throw \"Called ctor with an invalid hex digit\";\n-    };\n-\n     if (hex_str.length() != m_data.size() * 2) throw \"Hex string must fit exactly\";\n     auto str_it = hex_str.rbegin();\n     for (auto& elem : m_data) {\n-        auto lo = from_hex(*(str_it++));\n-        elem = (from_hex(*(str_it++)) << 4) | lo;\n+        auto lo = ConstevalHexDigit(*(str_it++));",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 18,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "09458eadc9a4484ba37a70d1b378ed3f3c9e31d0",
      "in_reply_to_id": 1716752262,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "So I guess this commit drops support for XCode on macOS Ventura 13. Not sure if `doc/build-osx.md` needs to be adjusted, similar to https://github.com/bitcoin/bitcoin/pull/29934/files",
      "created_at": "2024-08-14T13:43:12Z",
      "updated_at": "2024-08-14T13:43:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716956530",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716956530"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716969813",
      "pull_request_review_id": 2238242329,
      "id": 1716969813,
      "node_id": "PRRC_kwDOABII585mVuFV",
      "diff_hunk": "@@ -87,7 +87,7 @@ bool CCrypter::Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned\n     return true;\n }\n \n-bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingMaterial& vchPlaintext) const\n+bool CCrypter::Decrypt(std::span<const unsigned char> vchCiphertext, CKeyingMaterial& vchPlaintext) const",
      "path": "src/wallet/crypter.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "240bc10e3f5f90fcc386b1a72ee2067a156abff3",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: `vch` var name prefixes are annoying now that they're not vectors anymore. It'll increase the diff but I still think it might be worth modernizing the names here to avoid that inconsistency? (here + a bunch of other instances)",
      "created_at": "2024-08-14T13:50:51Z",
      "updated_at": "2024-08-14T18:53:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716969813",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716969813"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717012368",
      "pull_request_review_id": 2238080694,
      "id": 1717012368,
      "node_id": "PRRC_kwDOABII585mV4eQ",
      "diff_hunk": "@@ -1358,6 +1358,13 @@ static CScript ScriptFromHex(const std::string& str)\n     return CScript(data.begin(), data.end());\n }\n \n+template <size_t N>\n+static CScript ToScript(const std::array<uint8_t, N>& data)\n+{\n+    auto v = ToByteVector(data);",
      "path": "src/test/script_tests.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": 1716695410,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> `ScriptFromHex` failed for empty inputs.\r\n\r\nHow come? `ParseHex(\"\")` returns `0` as verified by **util_tests.cpp**. Besides that, I think it's not really what we are testing in this file.",
      "created_at": "2024-08-14T14:12:05Z",
      "updated_at": "2024-08-14T17:30:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717012368",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717012368"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1364,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717015082",
      "pull_request_review_id": 2238080694,
      "id": 1717015082,
      "node_id": "PRRC_kwDOABII585mV5Iq",
      "diff_hunk": "@@ -1383,60 +1390,60 @@ BOOST_AUTO_TEST_CASE(script_FindAndDelete)\n     BOOST_CHECK_EQUAL(FindAndDelete(s, d), 4);\n     BOOST_CHECK(s == expect);\n \n-    s = ScriptFromHex(\"0302ff03\"); // PUSH 0x02ff03 onto stack\n-    d = ScriptFromHex(\"0302ff03\");\n+    s = ToScript(ArrayFromHex(\"0302ff03\")); // PUSH 0x02ff03 onto stack\n+    d = ToScript(ArrayFromHex(\"0302ff03\"));",
      "path": "src/test/script_tests.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": 1716680866,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Attempted to minimize the diff in latest push, but went with `VecFromHex` for string literals and introduced a new `ScriptFromHexStr` for the 2 runtime validated call sites.",
      "created_at": "2024-08-14T14:13:55Z",
      "updated_at": "2024-08-14T17:30:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717015082",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717015082"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1394,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717020191",
      "pull_request_review_id": 2238080694,
      "id": 1717020191,
      "node_id": "PRRC_kwDOABII585mV6Yf",
      "diff_hunk": "@@ -154,28 +154,29 @@ BOOST_AUTO_TEST_CASE(parse_hex)\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Spaces between bytes must be supported\n+    expected = {0x12, 0x34, 0x56, 0x78};\n     result = ParseHex(\"12 34 56 78\");\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x12 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\"12 34 56 78\").value();\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x12 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Leading space must be supported (used in BerkeleyEnvironment::Salvage)\n+    expected = {0x89, 0x34, 0x56, 0x78};\n     result = ParseHex(\" 89 34 56 78\");\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x89 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\" 89 34 56 78\").value();\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x89 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Mixed case and spaces are supported\n+    expected = {0xff, 0xaa};\n     result = ParseHex(\"     Ff        aA    \");",
      "path": "src/test/util_tests.cpp",
      "position": 66,
      "original_position": 23,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "1953d21e3f2b7d0fecae0b7bdf4012f16cb21b41",
      "in_reply_to_id": 1716616576,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Responding to https://github.com/bitcoin/bitcoin/pull/30377/files#r1716616576:\r\nEnough casing changes for one PR. :)",
      "created_at": "2024-08-14T14:16:49Z",
      "updated_at": "2024-08-14T17:30:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717020191",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717020191"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 179,
      "original_line": 179,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717082261",
      "pull_request_review_id": 2238424878,
      "id": 1717082261,
      "node_id": "PRRC_kwDOABII585mWJiV",
      "diff_hunk": "@@ -67,6 +68,42 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    // Only lowercase letters are supported, for consistency.\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Called with an invalid hex digit\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Uses a stack based container (array). Care needs to be\n+ *          taken to avoid using up too much stack memory especially in\n+ *          recursive functions or non-leaf nodes of the call graph.\n+ */",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 27,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "00dc16bc29124dfbaf9d47c5411e4ebcf95e30b5",
      "in_reply_to_id": 1715636099,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716226929\r\n\r\nThe comment seems not true and not helpful.\r\n\r\n- If the concern is _not_ stack space used inside the function, and this warning is only being added because the return type of the function is a variable-sized std::array, then I'm not sure why every function that returns a variable-sized std::array shouldn't have the same warning. This actually seems less deserving of a warning than other functions returning a std::array object, because the size of the returned array is not determined by a number passed by the caller, but by a literal string passed by the caller, and is half the size of that string, so pretty much guaranteed to be small.\r\n\r\n- It is also inaccurate to say std::array is a stack based container or that calling this function will use stack space to store the array. This function can be called to initialize not just stack objects, but also global and heap objects due to NRVO, without being allocated on or copied from the stack.",
      "created_at": "2024-08-14T14:49:08Z",
      "updated_at": "2024-08-14T14:49:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717082261",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717082261"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 83,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717088367",
      "pull_request_review_id": 2238242329,
      "id": 1717088367,
      "node_id": "PRRC_kwDOABII585mWLBv",
      "diff_hunk": "@@ -67,6 +68,36 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 14,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "240bc10e3f5f90fcc386b1a72ee2067a156abff3",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Testing `consteval` functions is quite constrained, but I think it still might be useful to add some happy path test cases to `util_tests.cpp`?\r\n\r\n```cpp\r\nBOOST_AUTO_TEST_CASE(consteval_hex_digit)\r\n{\r\n    BOOST_CHECK_EQUAL(ConstevalHexDigit('0'), 0);\r\n    BOOST_CHECK_EQUAL(ConstevalHexDigit('9'), 9);\r\n    BOOST_CHECK_EQUAL(ConstevalHexDigit('a'), 0xa);\r\n    BOOST_CHECK_EQUAL(ConstevalHexDigit('f'), 0xf);\r\n}\r\n```",
      "created_at": "2024-08-14T14:52:44Z",
      "updated_at": "2024-08-14T18:53:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717088367",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717088367"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717177489",
      "pull_request_review_id": 2238242329,
      "id": 1717177489,
      "node_id": "PRRC_kwDOABII585mWgyR",
      "diff_hunk": "@@ -67,6 +68,36 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    // Only lowercase letters are supported, for consistency.\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Called with an invalid hex digit\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Uses a stack based container (array). Care needs to be\n+ *          taken to avoid using up too much stack memory especially in\n+ *          recursive functions or non-leaf nodes of the call graph.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, (Size - 1) / 2> ArrayFromHex(const char (&hex_str)[Size])\n+{\n+    // - 1 comes from implicit null terminator\n+    if ((Size - 1) % 2 == 1) throw \"2 hex digits per byte is required\";\n+    std::array<Byte, (Size - 1) / 2> rv{};\n+    size_t it = 0;",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 34,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "240bc10e3f5f90fcc386b1a72ee2067a156abff3",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: calling this non-iterator `i` would be more clear",
      "created_at": "2024-08-14T15:46:54Z",
      "updated_at": "2024-08-14T18:53:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717177489",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717177489"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717314517",
      "pull_request_review_id": 2238803326,
      "id": 1717314517,
      "node_id": "PRRC_kwDOABII585mXCPV",
      "diff_hunk": "@@ -254,7 +254,11 @@ class XOnlyPubKey\n     bool IsNull() const { return m_keydata.IsNull(); }\n \n     /** Construct an x-only pubkey from exactly 32 bytes. */\n-    explicit XOnlyPubKey(Span<const unsigned char> bytes);\n+    constexpr explicit XOnlyPubKey(Span<const unsigned char> bytes)\n+    {\n+        assert(bytes.size() == 32);",
      "path": "src/pubkey.h",
      "position": null,
      "original_position": 7,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "240bc10e3f5f90fcc386b1a72ee2067a156abff3",
      "in_reply_to_id": 1716732991,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Taken in latest push.",
      "created_at": "2024-08-14T17:31:12Z",
      "updated_at": "2024-08-14T17:31:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717314517",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717314517"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 259,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717316492",
      "pull_request_review_id": 2238806505,
      "id": 1717316492,
      "node_id": "PRRC_kwDOABII585mXCuM",
      "diff_hunk": "@@ -148,6 +148,8 @@ BOOST_AUTO_TEST_CASE(parse_hex)\n     std::vector<unsigned char> result;\n     std::vector<unsigned char> expected(ParseHex_expected, ParseHex_expected + sizeof(ParseHex_expected));",
      "path": "src/test/util_tests.cpp",
      "position": null,
      "original_position": 2,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "09458eadc9a4484ba37a70d1b378ed3f3c9e31d0",
      "in_reply_to_id": 1716622610,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Taken in latest push.",
      "created_at": "2024-08-14T17:32:29Z",
      "updated_at": "2024-08-14T17:32:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717316492",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717316492"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717317988",
      "pull_request_review_id": 2238809036,
      "id": 1717317988,
      "node_id": "PRRC_kwDOABII585mXDFk",
      "diff_hunk": "@@ -67,6 +68,36 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    // Only lowercase letters are supported, for consistency.\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Called with an invalid hex digit\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Uses a stack based container (array). Care needs to be\n+ *          taken to avoid using up too much stack memory especially in\n+ *          recursive functions or non-leaf nodes of the call graph.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, (Size - 1) / 2> ArrayFromHex(const char (&hex_str)[Size])\n+{\n+    // - 1 comes from implicit null terminator\n+    if ((Size - 1) % 2 == 1) throw \"2 hex digits per byte is required\";",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 32,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "09458eadc9a4484ba37a70d1b378ed3f3c9e31d0",
      "in_reply_to_id": 1716629782,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Taken in latest push.",
      "created_at": "2024-08-14T17:33:35Z",
      "updated_at": "2024-08-14T17:33:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717317988",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717317988"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 90,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717318999",
      "pull_request_review_id": 2238810796,
      "id": 1717318999,
      "node_id": "PRRC_kwDOABII585mXDVX",
      "diff_hunk": "@@ -67,6 +68,36 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    // Only lowercase letters are supported, for consistency.\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Called with an invalid hex digit\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Uses a stack based container (array). Care needs to be\n+ *          taken to avoid using up too much stack memory especially in\n+ *          recursive functions or non-leaf nodes of the call graph.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, (Size - 1) / 2> ArrayFromHex(const char (&hex_str)[Size])\n+{\n+    // - 1 comes from implicit null terminator\n+    if ((Size - 1) % 2 == 1) throw \"2 hex digits per byte is required\";\n+    std::array<Byte, (Size - 1) / 2> rv{};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 33,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "09458eadc9a4484ba37a70d1b378ed3f3c9e31d0",
      "in_reply_to_id": 1716648031,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Taken in latest push, should add co-authorship on next re-touch.",
      "created_at": "2024-08-14T17:34:23Z",
      "updated_at": "2024-08-14T17:34:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717318999",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717318999"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717320370",
      "pull_request_review_id": 2238812944,
      "id": 1717320370,
      "node_id": "PRRC_kwDOABII585mXDqy",
      "diff_hunk": "@@ -254,7 +254,11 @@ class XOnlyPubKey\n     bool IsNull() const { return m_keydata.IsNull(); }\n \n     /** Construct an x-only pubkey from exactly 32 bytes. */",
      "path": "src/pubkey.h",
      "position": null,
      "original_position": 3,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "29090eca423327353b474615d02ed7c3190e4a50",
      "in_reply_to_id": 1716588998,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Taken in latest push.",
      "created_at": "2024-08-14T17:35:15Z",
      "updated_at": "2024-08-14T17:35:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717320370",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717320370"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 256,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717324499",
      "pull_request_review_id": 2238242329,
      "id": 1717324499,
      "node_id": "PRRC_kwDOABII585mXErT",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)\n+{\n+    // No need to check HexDigit() return values or that hex_str has even length\n+    // since ConstevalHexLiteral has already validated.\n+    std::vector<Byte> rv(hex_str.inner.size() / 2);\n+    auto it = hex_str.inner.begin();\n+    for (auto& elem : rv) {\n+        auto hi = HexDigit(*(it++)) << 4;\n+        elem = Byte(hi | HexDigit(*(it++)));\n+    }\n+    return rv;\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Unlike VecFromHex which returns a vector, the returned array may use\n+ *          significant stack space if called inside a function.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, Size / 2> ArrayFromHex(const char (&hex_str)[Size])",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 59,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: The size requirement could also be expressed as a requires clause:\r\n```cpp\r\nconsteval std::array<Byte, (Size - 1) / 2> ArrayFromHex(const char (&hex_str)[Size])\r\n    requires (Size % 2 == 1)\r\n```\r\n\r\nIt provides more helpful information on why the constraints aren't met, e.g.:\r\n\r\n```\r\nnet_processing.cpp:3934:39: error: no matching function for call to 'ArrayFromHex'\r\n            constexpr auto finalAlert{ArrayFromHex(\"60010000000000000000000000ffffff7f00000000ffffff7ffeffff7f01ffffff7f00000000ffffff7f00ffffff7f002f555247454e543a20416c657274206b657920636f6d70726f6d697365642c2075706772616465207265717569726564004630440220653febd6410f470f6bae11cad19c48413becb1ac2c17f908fd0fd53bdc3abd5202206d0e9c96fe88d4a0f01ed9dedae2b6f9e00da94cad0fecaae66ecf689bf71b50\")};\r\n                                      ^~~~~~~~~~~~\r\n./util/strencodings.h:88:44: note: candidate template ignored: constraints not satisfied [with Byte = unsigned char, Size = 337]\r\nconsteval std::array<Byte, (Size - 1) / 2> ArrayFromHex(const char (&hex_str)[Size])    \r\n                                           ^\r\n./util/strencodings.h:89:15: note: because '337UL % 2 == 0' (1 == 0) evaluated to false\r\n    requires (Size % 2 == 0)\r\n```",
      "created_at": "2024-08-14T17:38:23Z",
      "updated_at": "2024-08-14T18:53:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717324499",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717324499"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717327999",
      "pull_request_review_id": 2238824588,
      "id": 1717327999,
      "node_id": "PRRC_kwDOABII585mXFh_",
      "diff_hunk": "@@ -128,13 +128,13 @@ consteval base_blob<BITS>::base_blob(std::string_view hex_str)\n     // Non-lookup table version of HexDigit().\n     auto from_hex = [](const char c) -> int8_t {\n         if (c >= '0' && c <= '9') return c - '0';\n+        // Only lowercase letters are supported, for consistency.\n         if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n-        if (c >= 'A' && c <= 'F') return c - 'A' + 0xA;\n \n-        assert(false); // Reached if ctor is called with an invalid hex digit.\n+        throw \"Called ctor with an invalid hex digit\";",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 9,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "9dab917088e83f627786ed5caafec859a3481b78",
      "in_reply_to_id": 1716665464,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Updated with slightly different string in latest push and removed comment about consistency above as well.\r\n\r\n```C++\r\nthrow \"Only lowercase hex digits are allowed, for consistency\";\r\n```",
      "created_at": "2024-08-14T17:40:53Z",
      "updated_at": "2024-08-14T17:40:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717327999",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717327999"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717352300",
      "pull_request_review_id": 2238863495,
      "id": 1717352300,
      "node_id": "PRRC_kwDOABII585mXLds",
      "diff_hunk": "@@ -146,36 +146,37 @@ static const unsigned char ParseHex_expected[65] = {\n BOOST_AUTO_TEST_CASE(parse_hex)\n {\n     std::vector<unsigned char> result;\n-    std::vector<unsigned char> expected(ParseHex_expected, ParseHex_expected + sizeof(ParseHex_expected));\n+    std::vector<unsigned char> expected(std::begin(ParseHex_expected), std::end(ParseHex_expected));\n     // Basic test vector\n     result = ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\");\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\").value();\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Spaces between bytes must be supported\n+    expected = {0x12, 0x34, 0x56, 0x78};\n     result = ParseHex(\"12 34 56 78\");\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x12 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\"12 34 56 78\").value();\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x12 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Leading space must be supported (used in BerkeleyEnvironment::Salvage)\n+    expected = {0x89, 0x34, 0x56, 0x78};\n     result = ParseHex(\" 89 34 56 78\");\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x89 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\" 89 34 56 78\").value();\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x89 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Mixed case and spaces are supported\n+    expected = {0xff, 0xaa};\n     result = ParseHex(\"     Ff        aA    \");\n-    BOOST_CHECK(result.size() == 2 && result[0] == 0xff && result[1] == 0xaa);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\"     Ff        aA    \").value();\n-    BOOST_CHECK(result.size() == 2 && result[0] == 0xff && result[1] == 0xaa);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Empty string is supported\n-    result = ParseHex(\"\");\n-    BOOST_CHECK(result.size() == 0);\n-    result = TryParseHex<uint8_t>(\"\").value();\n-    BOOST_CHECK(result.size() == 0);\n+    BOOST_CHECK_EQUAL(ParseHex(\"\").size(), 0);\n+    BOOST_CHECK_EQUAL(TryParseHex<uint8_t>(\"\").value().size(), 0);",
      "path": "src/test/util_tests.cpp",
      "position": 80,
      "original_position": 45,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "c6e1d5bff44b7d382a5a91b6722743b5fe07a95d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"test refactor: util_tests - Use BOOST_CHECK_EQUAL_COLLECTIONS()\" (c6e1d5bff44b7d382a5a91b6722743b5fe07a95d)\r\n\r\nMight be worth mentioning this change in commit message or saying it has other test cleanups.",
      "created_at": "2024-08-14T18:00:19Z",
      "updated_at": "2024-08-14T18:41:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717352300",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717352300"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": 186,
      "original_start_line": 178,
      "start_side": "RIGHT",
      "line": 187,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717373651",
      "pull_request_review_id": 2238863495,
      "id": 1717373651,
      "node_id": "PRRC_kwDOABII585mXQrT",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)\n+{\n+    // No need to check HexDigit() return values or that hex_str has even length\n+    // since ConstevalHexLiteral has already validated.\n+    std::vector<Byte> rv(hex_str.inner.size() / 2);\n+    auto it = hex_str.inner.begin();\n+    for (auto& elem : rv) {\n+        auto hi = HexDigit(*(it++)) << 4;\n+        elem = Byte(hi | HexDigit(*(it++)));\n+    }\n+    return rv;\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Unlike VecFromHex which returns a vector, the returned array may use\n+ *          significant stack space if called inside a function.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, Size / 2> ArrayFromHex(const char (&hex_str)[Size])\n+{\n+    // Size should be uneven due to implicit null terminator.\n+    if (Size % 2 == 0) throw \"2 hex digits required per byte\";",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 62,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "b997d266e549ad6745d01a696cd9fbf1d3525944",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"refactor: Add consteval ArrayFromHex and VecFromHex\" (b997d266e549ad6745d01a696cd9fbf1d3525944)\r\n\r\nIt seems like this is assuming the last character in the string is \\0 and then ignoring it? I guess that is good because it makes this convenient to call, but in theory it means somebody could call this with a character array that is does not end in \\0 and then the last character of the string would be ignored.\r\n\r\nWould suggest changing this to:\r\n\r\n```c++\r\nsize_t size{hex_str[Size-1] == '\\0' ? Size-1 : Size};\r\nif (size % 2 != 0) throw \"2 hex digits required per byte\";\r\n```\r\n\r\nto work correctly in either case and actually verify that the last character is \\0 if an odd-size array is passed.",
      "created_at": "2024-08-14T18:19:41Z",
      "updated_at": "2024-08-14T18:41:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717373651",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717373651"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717382220",
      "pull_request_review_id": 2238912630,
      "id": 1717382220,
      "node_id": "PRRC_kwDOABII585mXSxM",
      "diff_hunk": "@@ -67,6 +68,42 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    // Only lowercase letters are supported, for consistency.\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Called with an invalid hex digit\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Uses a stack based container (array). Care needs to be\n+ *          taken to avoid using up too much stack memory especially in\n+ *          recursive functions or non-leaf nodes of the call graph.\n+ */",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 27,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "00dc16bc29124dfbaf9d47c5411e4ebcf95e30b5",
      "in_reply_to_id": 1715636099,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "New version of the comment in latest push:\r\n```\r\n * @warning Unlike VecFromHex which returns a vector, the returned array may use\r\n *          significant stack space if called inside a function.\r\n```",
      "created_at": "2024-08-14T18:26:15Z",
      "updated_at": "2024-08-14T18:26:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717382220",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717382220"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 83,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717386520",
      "pull_request_review_id": 2238863495,
      "id": 1717386520,
      "node_id": "PRRC_kwDOABII585mXT0Y",
      "diff_hunk": "@@ -71,7 +71,7 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n-    const CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+    const CScript genesisOutputScript = CScript() << ToByteVector(ArrayFromHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\")) << OP_CHECKSIG;",
      "path": "src/kernel/chainparams.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "8ad7e7d3fdfed4b126859dd83ab81cf8a8ae82a9",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"refactor: Hand-replace some ParseHex -> ArrayFromHex + VecFromHex\" (8ad7e7d3fdfed4b126859dd83ab81cf8a8ae82a9)\r\n\r\nIt's not obvious why an extra ToByteVector conversion is necessary here and why ArrayFromHex is not sufficient. Does CScript not accept std::array, or does it not accept uint8_t? I think this change is ok but it would be good to say in commit message what is happening here and how we could simplify this in the future, assuming it is something we should be able to clean up later.",
      "created_at": "2024-08-14T18:30:34Z",
      "updated_at": "2024-08-14T18:41:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717386520",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717386520"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717392937",
      "pull_request_review_id": 2238863495,
      "id": 1717392937,
      "node_id": "PRRC_kwDOABII585mXVYp",
      "diff_hunk": "@@ -67,6 +68,42 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    // Only lowercase letters are supported, for consistency.\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Called with an invalid hex digit\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Uses a stack based container (array). Care needs to be\n+ *          taken to avoid using up too much stack memory especially in\n+ *          recursive functions or non-leaf nodes of the call graph.\n+ */",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 27,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "00dc16bc29124dfbaf9d47c5411e4ebcf95e30b5",
      "in_reply_to_id": 1715636099,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717382220\r\n\r\n> New version of the comment in latest push:\r\n\r\nThank you! That seems accurate now.\r\n",
      "created_at": "2024-08-14T18:36:47Z",
      "updated_at": "2024-08-14T18:41:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717392937",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717392937"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 83,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717416131",
      "pull_request_review_id": 2238968243,
      "id": 1717416131,
      "node_id": "PRRC_kwDOABII585mXbDD",
      "diff_hunk": "@@ -146,36 +146,37 @@ static const unsigned char ParseHex_expected[65] = {\n BOOST_AUTO_TEST_CASE(parse_hex)\n {\n     std::vector<unsigned char> result;\n-    std::vector<unsigned char> expected(ParseHex_expected, ParseHex_expected + sizeof(ParseHex_expected));\n+    std::vector<unsigned char> expected(std::begin(ParseHex_expected), std::end(ParseHex_expected));\n     // Basic test vector\n     result = ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\");\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\").value();\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Spaces between bytes must be supported\n+    expected = {0x12, 0x34, 0x56, 0x78};\n     result = ParseHex(\"12 34 56 78\");\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x12 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\"12 34 56 78\").value();\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x12 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Leading space must be supported (used in BerkeleyEnvironment::Salvage)\n+    expected = {0x89, 0x34, 0x56, 0x78};\n     result = ParseHex(\" 89 34 56 78\");\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x89 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\" 89 34 56 78\").value();\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x89 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Mixed case and spaces are supported\n+    expected = {0xff, 0xaa};\n     result = ParseHex(\"     Ff        aA    \");\n-    BOOST_CHECK(result.size() == 2 && result[0] == 0xff && result[1] == 0xaa);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\"     Ff        aA    \").value();\n-    BOOST_CHECK(result.size() == 2 && result[0] == 0xff && result[1] == 0xaa);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Empty string is supported\n-    result = ParseHex(\"\");\n-    BOOST_CHECK(result.size() == 0);\n-    result = TryParseHex<uint8_t>(\"\").value();\n-    BOOST_CHECK(result.size() == 0);\n+    BOOST_CHECK_EQUAL(ParseHex(\"\").size(), 0);\n+    BOOST_CHECK_EQUAL(TryParseHex<uint8_t>(\"\").value().size(), 0);",
      "path": "src/test/util_tests.cpp",
      "position": 80,
      "original_position": 45,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "c6e1d5bff44b7d382a5a91b6722743b5fe07a95d",
      "in_reply_to_id": 1717352300,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In the PR summary you mean?",
      "created_at": "2024-08-14T18:57:01Z",
      "updated_at": "2024-08-14T18:57:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717416131",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717416131"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": 186,
      "original_start_line": 178,
      "start_side": "RIGHT",
      "line": 187,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717420847",
      "pull_request_review_id": 2238976235,
      "id": 1717420847,
      "node_id": "PRRC_kwDOABII585mXcMv",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)\n+{\n+    // No need to check HexDigit() return values or that hex_str has even length\n+    // since ConstevalHexLiteral has already validated.\n+    std::vector<Byte> rv(hex_str.inner.size() / 2);\n+    auto it = hex_str.inner.begin();\n+    for (auto& elem : rv) {\n+        auto hi = HexDigit(*(it++)) << 4;\n+        elem = Byte(hi | HexDigit(*(it++)));\n+    }\n+    return rv;\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Unlike VecFromHex which returns a vector, the returned array may use\n+ *          significant stack space if called inside a function.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, Size / 2> ArrayFromHex(const char (&hex_str)[Size])\n+{\n+    // Size should be uneven due to implicit null terminator.\n+    if (Size % 2 == 0) throw \"2 hex digits required per byte\";",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 62,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "b997d266e549ad6745d01a696cd9fbf1d3525944",
      "in_reply_to_id": 1717373651,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changing it to a requires-clause as per https://github.com/bitcoin/bitcoin/pull/30377/files#r1717324499 with additional check for null terminator in the function body. Don't think someone would do:\r\n```C++\r\nconstexpr char my_hex[] = {'f', 'f'};\r\nconstexpr std::array<uint8_t, 1> arr = ArrayFromHex(my_hex);\r\n```\r\nwhen they could just do:\r\n```C++\r\nconstexpr std::array<uint8_t, 1> arr = {0xff};\r\n```",
      "created_at": "2024-08-14T19:01:41Z",
      "updated_at": "2024-08-15T06:09:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717420847",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717420847"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717421534",
      "pull_request_review_id": 2238977364,
      "id": 1717421534,
      "node_id": "PRRC_kwDOABII585mXcXe",
      "diff_hunk": "@@ -154,28 +154,29 @@ BOOST_AUTO_TEST_CASE(parse_hex)\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Spaces between bytes must be supported\n+    expected = {0x12, 0x34, 0x56, 0x78};\n     result = ParseHex(\"12 34 56 78\");\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x12 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());",
      "path": "src/test/util_tests.cpp",
      "position": 50,
      "original_position": 7,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "1953d21e3f2b7d0fecae0b7bdf4012f16cb21b41",
      "in_reply_to_id": 1716610850,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "By testing these transitively, we wouldn't test everything everywhere. But the latter can have the advantage of making mistakes *really* obvious :)",
      "created_at": "2024-08-14T19:02:21Z",
      "updated_at": "2024-08-14T19:02:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717421534",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717421534"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 166,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717422784",
      "pull_request_review_id": 2238979482,
      "id": 1717422784,
      "node_id": "PRRC_kwDOABII585mXcrA",
      "diff_hunk": "@@ -71,7 +71,7 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n-    const CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+    const CScript genesisOutputScript = CScript() << ToByteVector(ArrayFromHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\")) << OP_CHECKSIG;",
      "path": "src/kernel/chainparams.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": 1716678159,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah :))",
      "created_at": "2024-08-14T19:03:35Z",
      "updated_at": "2024-08-14T19:03:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717422784",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717422784"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717423143",
      "pull_request_review_id": 2238980131,
      "id": 1717423143,
      "node_id": "PRRC_kwDOABII585mXcwn",
      "diff_hunk": "@@ -72,7 +72,7 @@ BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n     // check that DecodeBase58 skips whitespace, but still fails with unexpected non-whitespace at the end.\n     BOOST_CHECK(!DecodeBase58(\" \\t\\n\\v\\f\\r skip \\r\\f\\v\\n\\t a\", result, 3));\n     BOOST_CHECK( DecodeBase58(\" \\t\\n\\v\\f\\r skip \\r\\f\\v\\n\\t \", result, 3));\n-    std::vector<unsigned char> expected = ParseHex(\"971a55\");\n+    constexpr std::array<unsigned char, 3> expected{ArrayFromHex(\"971a55\")};",
      "path": "src/test/base58_tests.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": 1716685019,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'll take what I can get",
      "created_at": "2024-08-14T19:03:59Z",
      "updated_at": "2024-08-14T19:03:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717423143",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717423143"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717426365",
      "pull_request_review_id": 2238985484,
      "id": 1717426365,
      "node_id": "PRRC_kwDOABII585mXdi9",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)\n+{\n+    // No need to check HexDigit() return values or that hex_str has even length\n+    // since ConstevalHexLiteral has already validated.\n+    std::vector<Byte> rv(hex_str.inner.size() / 2);\n+    auto it = hex_str.inner.begin();\n+    for (auto& elem : rv) {\n+        auto hi = HexDigit(*(it++)) << 4;\n+        elem = Byte(hi | HexDigit(*(it++)));\n+    }\n+    return rv;\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Unlike VecFromHex which returns a vector, the returned array may use\n+ *          significant stack space if called inside a function.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, Size / 2> ArrayFromHex(const char (&hex_str)[Size])\n+{\n+    // Size should be uneven due to implicit null terminator.\n+    if (Size % 2 == 0) throw \"2 hex digits required per byte\";",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 62,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "b997d266e549ad6745d01a696cd9fbf1d3525944",
      "in_reply_to_id": 1717373651,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do we really need to support both?",
      "created_at": "2024-08-14T19:06:57Z",
      "updated_at": "2024-08-14T19:06:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717426365",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717426365"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717427675",
      "pull_request_review_id": 2238987421,
      "id": 1717427675,
      "node_id": "PRRC_kwDOABII585mXd3b",
      "diff_hunk": "@@ -71,7 +71,7 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n-    const CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+    const CScript genesisOutputScript = CScript() << ToByteVector(ArrayFromHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\")) << OP_CHECKSIG;",
      "path": "src/kernel/chainparams.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "8ad7e7d3fdfed4b126859dd83ab81cf8a8ae82a9",
      "in_reply_to_id": 1717386520,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Seems related to: https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716886175",
      "created_at": "2024-08-14T19:07:54Z",
      "updated_at": "2024-08-14T19:07:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717427675",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717427675"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717433775",
      "pull_request_review_id": 2238996588,
      "id": 1717433775,
      "node_id": "PRRC_kwDOABII585mXfWv",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 25,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since it's a `consteval` ctor, I _think_ taking a `const char*` parameter should behave the same but avoid having to instantiate for each differently sized `hex_str` input? But I'm still easily confused by how `consteval` behaves.\r\n\r\n```suggestion\r\n   consteval ConstevalHexLiteral(const char* hex_str) : inner{hex_str} { Validate(inner); }\r\n```\r\n",
      "created_at": "2024-08-14T19:12:44Z",
      "updated_at": "2024-08-14T19:18:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717433775",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717433775"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 83,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717438506",
      "pull_request_review_id": 2239004019,
      "id": 1717438506,
      "node_id": "PRRC_kwDOABII585mXggq",
      "diff_hunk": "@@ -347,7 +347,7 @@ class CTestNet4Params : public CChainParams {\n         m_assumed_chain_state_size = 0;\n \n         const char* testnet4_genesis_msg = \"03/May/2024 000000000000000000001ebd58c244970b3aa9d783bb001011fbe8ea8e98e00e\";\n-        const CScript testnet4_genesis_script = CScript() << ParseHex(\"000000000000000000000000000000000000000000000000000000000000000000\") << OP_CHECKSIG;\n+        const CScript testnet4_genesis_script = CScript() << ToByteVector(ArrayFromHex(\"000000000000000000000000000000000000000000000000000000000000000000\")) << OP_CHECKSIG;",
      "path": "src/kernel/chainparams.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "leftover?\r\n```suggestion\r\n        const CScript testnet4_genesis_script = CScript() << VecFromHex(\"000000000000000000000000000000000000000000000000000000000000000000\") << OP_CHECKSIG;\r\n```",
      "created_at": "2024-08-14T19:16:40Z",
      "updated_at": "2024-08-14T19:33:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717438506",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717438506"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 350,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717443789",
      "pull_request_review_id": 2239004019,
      "id": 1717443789,
      "node_id": "PRRC_kwDOABII585mXhzN",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)\n+{\n+    // No need to check HexDigit() return values or that hex_str has even length\n+    // since ConstevalHexLiteral has already validated.\n+    std::vector<Byte> rv(hex_str.inner.size() / 2);\n+    auto it = hex_str.inner.begin();\n+    for (auto& elem : rv) {\n+        auto hi = HexDigit(*(it++)) << 4;\n+        elem = Byte(hi | HexDigit(*(it++)));\n+    }\n+    return rv;\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Unlike VecFromHex which returns a vector, the returned array may use\n+ *          significant stack space if called inside a function.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, Size / 2> ArrayFromHex(const char (&hex_str)[Size])",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 59,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This hex parsing duplication is a bit painful, will try to come up with a deduplicated alternative tomorrow",
      "created_at": "2024-08-14T19:20:52Z",
      "updated_at": "2024-08-14T19:33:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717443789",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717443789"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717446097",
      "pull_request_review_id": 2239004019,
      "id": 1717446097,
      "node_id": "PRRC_kwDOABII585mXiXR",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 41,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: \"vec\" vs \"array\" (abbreviation vs full) -> can we either name them \"VecFromHex\" and \"ArrFromHex\" or rather \"VectorFromHex\" and \"ArrayFromHex\" (or even shorter: \"HexToVector\" and \"HexToArray\"?",
      "created_at": "2024-08-14T19:22:52Z",
      "updated_at": "2024-08-14T19:33:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717446097",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717446097"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717447789",
      "pull_request_review_id": 2239004019,
      "id": 1717447789,
      "node_id": "PRRC_kwDOABII585mXixt",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 31,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "super-nit (feel free to ignore): we might want to do the content checking after the size check, it's cheaper",
      "created_at": "2024-08-14T19:24:17Z",
      "updated_at": "2024-08-14T19:33:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717447789",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717447789"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717449874",
      "pull_request_review_id": 2239004019,
      "id": 1717449874,
      "node_id": "PRRC_kwDOABII585mXjSS",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 33,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "super-nit:\r\n```suggestion\r\n        if (hex_str.size() % 2) throw \"2 hex digits required per byte\";\r\n```",
      "created_at": "2024-08-14T19:25:59Z",
      "updated_at": "2024-08-14T19:33:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717449874",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717449874"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717452225",
      "pull_request_review_id": 2239004019,
      "id": 1717452225,
      "node_id": "PRRC_kwDOABII585mXj3B",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)\n+{\n+    // No need to check HexDigit() return values or that hex_str has even length\n+    // since ConstevalHexLiteral has already validated.\n+    std::vector<Byte> rv(hex_str.inner.size() / 2);\n+    auto it = hex_str.inner.begin();\n+    for (auto& elem : rv) {\n+        auto hi = HexDigit(*(it++)) << 4;\n+        elem = Byte(hi | HexDigit(*(it++)));\n+    }\n+    return rv;\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Unlike VecFromHex which returns a vector, the returned array may use\n+ *          significant stack space if called inside a function.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, Size / 2> ArrayFromHex(const char (&hex_str)[Size])\n+{\n+    // Size should be uneven due to implicit null terminator.",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 61,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    // Size should be odd due to implicit null terminator.\r\n```",
      "created_at": "2024-08-14T19:27:42Z",
      "updated_at": "2024-08-14T19:33:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717452225",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717452225"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 120,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717458216",
      "pull_request_review_id": 2238976235,
      "id": 1717458216,
      "node_id": "PRRC_kwDOABII585mXlUo",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 25,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": 1717433775,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Clang unfortunately gives me: ``candidate function template not viable: no known conversion from 'const char[65]' to 'ConstevalHexLiteral' for 1st argument``",
      "created_at": "2024-08-14T19:33:23Z",
      "updated_at": "2024-08-14T21:33:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717458216",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717458216"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 83,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717462054",
      "pull_request_review_id": 2238976235,
      "id": 1717462054,
      "node_id": "PRRC_kwDOABII585mXmQm",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 41,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": 1717446097,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think `*FromHex` jives well with `uint256::FromHex()`.. only thing is the latter stores the bytes in reverse order. :face_in_clouds: \r\n\r\nCould go for `VectorFromHex`, but there is already some weak precedence in the type `VecDeque`.",
      "created_at": "2024-08-14T19:37:23Z",
      "updated_at": "2024-08-14T21:33:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717462054",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717462054"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717490226",
      "pull_request_review_id": 2239084398,
      "id": 1717490226,
      "node_id": "PRRC_kwDOABII585mXtIy",
      "diff_hunk": "@@ -146,36 +146,37 @@ static const unsigned char ParseHex_expected[65] = {\n BOOST_AUTO_TEST_CASE(parse_hex)\n {\n     std::vector<unsigned char> result;\n-    std::vector<unsigned char> expected(ParseHex_expected, ParseHex_expected + sizeof(ParseHex_expected));\n+    std::vector<unsigned char> expected(std::begin(ParseHex_expected), std::end(ParseHex_expected));\n     // Basic test vector\n     result = ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\");\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\").value();\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Spaces between bytes must be supported\n+    expected = {0x12, 0x34, 0x56, 0x78};\n     result = ParseHex(\"12 34 56 78\");\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x12 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\"12 34 56 78\").value();\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x12 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Leading space must be supported (used in BerkeleyEnvironment::Salvage)\n+    expected = {0x89, 0x34, 0x56, 0x78};\n     result = ParseHex(\" 89 34 56 78\");\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x89 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\" 89 34 56 78\").value();\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x89 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Mixed case and spaces are supported\n+    expected = {0xff, 0xaa};\n     result = ParseHex(\"     Ff        aA    \");\n-    BOOST_CHECK(result.size() == 2 && result[0] == 0xff && result[1] == 0xaa);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\"     Ff        aA    \").value();\n-    BOOST_CHECK(result.size() == 2 && result[0] == 0xff && result[1] == 0xaa);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Empty string is supported\n-    result = ParseHex(\"\");\n-    BOOST_CHECK(result.size() == 0);\n-    result = TryParseHex<uint8_t>(\"\").value();\n-    BOOST_CHECK(result.size() == 0);\n+    BOOST_CHECK_EQUAL(ParseHex(\"\").size(), 0);\n+    BOOST_CHECK_EQUAL(TryParseHex<uint8_t>(\"\").value().size(), 0);",
      "path": "src/test/util_tests.cpp",
      "position": 80,
      "original_position": 45,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "c6e1d5bff44b7d382a5a91b6722743b5fe07a95d",
      "in_reply_to_id": 1717352300,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717352300\r\n\r\n> In the PR summary you mean?\r\n\r\nI do actually mean the commit message. The current commit message ddd06a0ec0a3b2c1d128fe5986a1363e7cf8e365 makes it sounds like it only switching to BOOST_CHECK_EQUAL_COLLECTIONS, but in reality is doing that and also making a seemingly unrelated test cleanup. Would suggest mentioning the other cleanup in the commit message, so for example, if someone is debugging something and wants to see if this commit is relevant, they can judge that based on the commit message.",
      "created_at": "2024-08-14T20:06:02Z",
      "updated_at": "2024-08-15T12:46:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717490226",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717490226"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": 186,
      "original_start_line": 178,
      "start_side": "RIGHT",
      "line": 187,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717492122",
      "pull_request_review_id": 2239084398,
      "id": 1717492122,
      "node_id": "PRRC_kwDOABII585mXtma",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)\n+{\n+    // No need to check HexDigit() return values or that hex_str has even length\n+    // since ConstevalHexLiteral has already validated.\n+    std::vector<Byte> rv(hex_str.inner.size() / 2);\n+    auto it = hex_str.inner.begin();\n+    for (auto& elem : rv) {\n+        auto hi = HexDigit(*(it++)) << 4;\n+        elem = Byte(hi | HexDigit(*(it++)));\n+    }\n+    return rv;\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Unlike VecFromHex which returns a vector, the returned array may use\n+ *          significant stack space if called inside a function.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, Size / 2> ArrayFromHex(const char (&hex_str)[Size])\n+{\n+    // Size should be uneven due to implicit null terminator.\n+    if (Size % 2 == 0) throw \"2 hex digits required per byte\";",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 62,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "b997d266e549ad6745d01a696cd9fbf1d3525944",
      "in_reply_to_id": 1717373651,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717426365\r\n\r\n> Do we really need to support both?\r\n\r\nIt seems easier to support both than to add an error message explaining that the last byte has to be null, when there is no particular reason it needs to be null. But mainly I didn't think the last byte should be silently ignored, so at least that problem is fixed now.",
      "created_at": "2024-08-14T20:08:06Z",
      "updated_at": "2024-08-15T12:46:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717492122",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717492122"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717501165",
      "pull_request_review_id": 2239084398,
      "id": 1717501165,
      "node_id": "PRRC_kwDOABII585mXvzt",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)\n+{\n+    // No need to check HexDigit() return values or that hex_str has even length\n+    // since ConstevalHexLiteral has already validated.\n+    std::vector<Byte> rv(hex_str.inner.size() / 2);\n+    auto it = hex_str.inner.begin();\n+    for (auto& elem : rv) {\n+        auto hi = HexDigit(*(it++)) << 4;\n+        elem = Byte(hi | HexDigit(*(it++)));\n+    }\n+    return rv;\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Unlike VecFromHex which returns a vector, the returned array may use\n+ *          significant stack space if called inside a function.",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 56,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "b997d266e549ad6745d01a696cd9fbf1d3525944",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717382220\r\n\r\nOn second thought, while this warning message is more accurate, I don't think it is clear, because it is implying that return value will use stack space, when we should not expect that to be the case normally. Would suggest:\r\n\r\n* It may be preferable to call VecFromHex instead of this function to save stack space, or to declare the returned constexpr to avoid using stack space, if returned array is large and being used to initialize a local variable.",
      "created_at": "2024-08-14T20:17:08Z",
      "updated_at": "2024-08-15T12:46:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717501165",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717501165"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 114,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 114,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717562300",
      "pull_request_review_id": 2238976235,
      "id": 1717562300,
      "node_id": "PRRC_kwDOABII585mX-u8",
      "diff_hunk": "@@ -347,7 +347,7 @@ class CTestNet4Params : public CChainParams {\n         m_assumed_chain_state_size = 0;\n \n         const char* testnet4_genesis_msg = \"03/May/2024 000000000000000000001ebd58c244970b3aa9d783bb001011fbe8ea8e98e00e\";\n-        const CScript testnet4_genesis_script = CScript() << ParseHex(\"000000000000000000000000000000000000000000000000000000000000000000\") << OP_CHECKSIG;\n+        const CScript testnet4_genesis_script = CScript() << ToByteVector(ArrayFromHex(\"000000000000000000000000000000000000000000000000000000000000000000\")) << OP_CHECKSIG;",
      "path": "src/kernel/chainparams.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": 1717438506,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Now explained in commit message 0a82c18457ec81e911b835b2ac76ad7475384983 as suggested in https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717386520.",
      "created_at": "2024-08-14T21:15:24Z",
      "updated_at": "2024-08-14T21:33:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717562300",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717562300"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 350,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717562892",
      "pull_request_review_id": 2238976235,
      "id": 1717562892,
      "node_id": "PRRC_kwDOABII585mX-4M",
      "diff_hunk": "@@ -71,7 +71,7 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n-    const CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+    const CScript genesisOutputScript = CScript() << ToByteVector(ArrayFromHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\")) << OP_CHECKSIG;",
      "path": "src/kernel/chainparams.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "8ad7e7d3fdfed4b126859dd83ab81cf8a8ae82a9",
      "in_reply_to_id": 1717386520,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Now explained in commit message 0a82c18457ec81e911b835b2ac76ad7475384983",
      "created_at": "2024-08-14T21:16:05Z",
      "updated_at": "2024-08-14T21:33:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717562892",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717562892"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717564420",
      "pull_request_review_id": 2238976235,
      "id": 1717564420,
      "node_id": "PRRC_kwDOABII585mX_QE",
      "diff_hunk": "@@ -67,6 +68,36 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 14,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "240bc10e3f5f90fcc386b1a72ee2067a156abff3",
      "in_reply_to_id": 1717088367,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Now part of b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795",
      "created_at": "2024-08-14T21:17:55Z",
      "updated_at": "2024-08-14T21:33:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717564420",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717564420"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717565594",
      "pull_request_review_id": 2238976235,
      "id": 1717565594,
      "node_id": "PRRC_kwDOABII585mX_ia",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 33,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": 1717449874,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm burned by old MSVC warnings (probably not current) \"implicit conversion to bool\" so I'd rather not.",
      "created_at": "2024-08-14T21:19:13Z",
      "updated_at": "2024-08-14T21:33:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717565594",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717565594"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717568070",
      "pull_request_review_id": 2238976235,
      "id": 1717568070,
      "node_id": "PRRC_kwDOABII585mYAJG",
      "diff_hunk": "@@ -67,6 +68,36 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    // Only lowercase letters are supported, for consistency.\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Called with an invalid hex digit\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Uses a stack based container (array). Care needs to be\n+ *          taken to avoid using up too much stack memory especially in\n+ *          recursive functions or non-leaf nodes of the call graph.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, (Size - 1) / 2> ArrayFromHex(const char (&hex_str)[Size])\n+{\n+    // - 1 comes from implicit null terminator\n+    if ((Size - 1) % 2 == 1) throw \"2 hex digits per byte is required\";\n+    std::array<Byte, (Size - 1) / 2> rv{};\n+    size_t it = 0;",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 34,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "240bc10e3f5f90fcc386b1a72ee2067a156abff3",
      "in_reply_to_id": 1717177489,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2024-08-14T21:21:48Z",
      "updated_at": "2024-08-14T21:33:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717568070",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717568070"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717568246",
      "pull_request_review_id": 2238976235,
      "id": 1717568246,
      "node_id": "PRRC_kwDOABII585mYAL2",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)\n+{\n+    // No need to check HexDigit() return values or that hex_str has even length\n+    // since ConstevalHexLiteral has already validated.\n+    std::vector<Byte> rv(hex_str.inner.size() / 2);\n+    auto it = hex_str.inner.begin();\n+    for (auto& elem : rv) {\n+        auto hi = HexDigit(*(it++)) << 4;\n+        elem = Byte(hi | HexDigit(*(it++)));\n+    }\n+    return rv;\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Unlike VecFromHex which returns a vector, the returned array may use\n+ *          significant stack space if called inside a function.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, Size / 2> ArrayFromHex(const char (&hex_str)[Size])",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 59,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": 1717324499,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2024-08-14T21:22:01Z",
      "updated_at": "2024-08-14T21:33:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717568246",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717568246"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717569863",
      "pull_request_review_id": 2238976235,
      "id": 1717569863,
      "node_id": "PRRC_kwDOABII585mYAlH",
      "diff_hunk": "@@ -87,7 +87,7 @@ bool CCrypter::Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned\n     return true;\n }\n \n-bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingMaterial& vchPlaintext) const\n+bool CCrypter::Decrypt(std::span<const unsigned char> vchCiphertext, CKeyingMaterial& vchPlaintext) const",
      "path": "src/wallet/crypter.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "240bc10e3f5f90fcc386b1a72ee2067a156abff3",
      "in_reply_to_id": 1716969813,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, slightly, `vchCiphertext` -> `chCiphertext` (already some precedence for `ch`-prefix). Also changed `vchSalt` -> `salt` in some places.",
      "created_at": "2024-08-14T21:23:51Z",
      "updated_at": "2024-08-14T21:33:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717569863",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717569863"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717575383",
      "pull_request_review_id": 2238976235,
      "id": 1717575383,
      "node_id": "PRRC_kwDOABII585mYB7X",
      "diff_hunk": "@@ -67,6 +68,36 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    // Only lowercase letters are supported, for consistency.\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Called with an invalid hex digit\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Uses a stack based container (array). Care needs to be\n+ *          taken to avoid using up too much stack memory especially in\n+ *          recursive functions or non-leaf nodes of the call graph.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, (Size - 1) / 2> ArrayFromHex(const char (&hex_str)[Size])\n+{\n+    // - 1 comes from implicit null terminator\n+    if ((Size - 1) % 2 == 1) throw \"2 hex digits per byte is required\";\n+    std::array<Byte, (Size - 1) / 2> rv{};",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 33,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "09458eadc9a4484ba37a70d1b378ed3f3c9e31d0",
      "in_reply_to_id": 1716648031,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added 4 of you in b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795, hopefully you don't mind the company. :)\r\n\r\n@maflcko let me know if you prefer a different identifier to make GitHub rendering prettier.",
      "created_at": "2024-08-14T21:30:46Z",
      "updated_at": "2024-08-14T21:33:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717575383",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717575383"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717578019",
      "pull_request_review_id": 2239235699,
      "id": 1717578019,
      "node_id": "PRRC_kwDOABII585mYCkj",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 31,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": 1717447789,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done in latest.",
      "created_at": "2024-08-14T21:33:47Z",
      "updated_at": "2024-08-14T21:33:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717578019",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717578019"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717580883",
      "pull_request_review_id": 2239239865,
      "id": 1717580883,
      "node_id": "PRRC_kwDOABII585mYDRT",
      "diff_hunk": "@@ -254,7 +254,11 @@ class XOnlyPubKey\n     bool IsNull() const { return m_keydata.IsNull(); }\n \n     /** Construct an x-only pubkey from exactly 32 bytes. */\n-    explicit XOnlyPubKey(Span<const unsigned char> bytes);\n+    constexpr explicit XOnlyPubKey(Span<const unsigned char> bytes)\n+    {\n+        assert(bytes.size() == 32);",
      "path": "src/pubkey.h",
      "position": null,
      "original_position": 7,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "240bc10e3f5f90fcc386b1a72ee2067a156abff3",
      "in_reply_to_id": 1716732991,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Further changed to just:\r\n```C++\r\nconstexpr explicit XOnlyPubKey(Span<const unsigned char> bytes) : m_keydata{bytes} {}\r\n```\r\nSince `base_blob(Span<const unsigned char>)` does the exact length assert internally.",
      "created_at": "2024-08-14T21:37:19Z",
      "updated_at": "2024-08-14T21:37:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717580883",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717580883"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 259,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717589830",
      "pull_request_review_id": 2239254641,
      "id": 1717589830,
      "node_id": "PRRC_kwDOABII585mYFdG",
      "diff_hunk": "@@ -125,20 +125,11 @@ class base_blob\n template <unsigned int BITS>\n consteval base_blob<BITS>::base_blob(std::string_view hex_str)\n {\n-    // Non-lookup table version of HexDigit().\n-    auto from_hex = [](const char c) -> int8_t {\n-        if (c >= '0' && c <= '9') return c - '0';\n-        // Only lowercase letters are supported, for consistency.\n-        if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n-\n-        throw \"Called ctor with an invalid hex digit\";\n-    };\n-\n     if (hex_str.length() != m_data.size() * 2) throw \"Hex string must fit exactly\";\n     auto str_it = hex_str.rbegin();\n     for (auto& elem : m_data) {\n-        auto lo = from_hex(*(str_it++));\n-        elem = (from_hex(*(str_it++)) << 4) | lo;\n+        auto lo = ConstevalHexDigit(*(str_it++));",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 18,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "09458eadc9a4484ba37a70d1b378ed3f3c9e31d0",
      "in_reply_to_id": 1716752262,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> So I guess this commit drops support for XCode on macOS Ventura 13. Not sure if doc/build-osx.md needs to be adjusted, similar to https://github.com/bitcoin/bitcoin/pull/29934/files\r\n\r\nAccording to my earlier (pending and therefore out of order) message, https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716900164, the clang version is not the issue. So simply changing to `llvm@18` in the docs might not be correct.\r\n\r\nWhat is your clang version after the XCode upgrade @stickies-v?",
      "created_at": "2024-08-14T21:49:31Z",
      "updated_at": "2024-08-14T21:49:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717589830",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717589830"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717819227",
      "pull_request_review_id": 2239084398,
      "id": 1717819227,
      "node_id": "PRRC_kwDOABII585mY9db",
      "diff_hunk": "@@ -67,6 +68,67 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : ConstevalHexLiteral{std::string_view{hex_str}} {}\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 26,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"refactor: Add consteval ArrayFromHex and VecFromHex\" (b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795)\r\n\r\nI can't see a benefit to defining a string_view constructor here and depending on string_view when this class is only supposed to accept null terminated string literals. This class could be simplified by dropping this constructor, dropping the string_view member and just declaring a const char* member.",
      "created_at": "2024-08-15T02:59:02Z",
      "updated_at": "2024-08-15T12:46:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717819227",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717819227"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717821819",
      "pull_request_review_id": 2239084398,
      "id": 1717821819,
      "node_id": "PRRC_kwDOABII585mY-F7",
      "diff_hunk": "@@ -67,6 +68,67 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : ConstevalHexLiteral{std::string_view{hex_str}} {}",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 25,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"refactor: Add consteval ArrayFromHex and VecFromHex\" (b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795)\r\n\r\nThis will do a weird thing when passed a non-null terminated string and give an error about an out of bounds array access (\"error: array subscript value ‘2’ is outside the bounds of array ‘hex’ of type ‘const char [2]’\") for:\r\n\r\n```c++\r\nconstexpr char hex[] = {'a', 'b'};\r\nVecFromHex(hex);\r\n```\r\n\r\nThis could be simplified and made less confusing by not requiring character arrays to be null terminated.",
      "created_at": "2024-08-15T03:04:15Z",
      "updated_at": "2024-08-15T12:46:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717821819",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717821819"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717827853",
      "pull_request_review_id": 2239084398,
      "id": 1717827853,
      "node_id": "PRRC_kwDOABII585mY_kN",
      "diff_hunk": "@@ -67,6 +68,67 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 22,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"refactor: Add consteval ArrayFromHex and VecFromHex\" \r\n(b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795)\r\n\r\nI don't think it makes sense to have a class that check a hex string at compile time, store the literal hex string in the binary, and then parse the hex string again. It makes the implementation unnecessarily complicated because code loops over the hex string ConstevalHexLiteral 3 different places instead of 1, duplicates checks like `throw \"2 hex digits required per byte\"` twice, and defines an extra class to implement an implicit conversion all for the benefit of storing hex instead of binary data in the compiled code and doing unnecessary parsing at runtime. It don't think there is a justification for this and would recommend going for the alternate approach suggested above using util::HexLiteral and util::Vec functions.",
      "created_at": "2024-08-15T03:17:32Z",
      "updated_at": "2024-08-15T12:46:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717827853",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717827853"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717828979",
      "pull_request_review_id": 2239084398,
      "id": 1717828979,
      "node_id": "PRRC_kwDOABII585mY_1z",
      "diff_hunk": "@@ -67,6 +68,67 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : ConstevalHexLiteral{std::string_view{hex_str}} {}\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)\n+{\n+    // No need to check HexDigit() return values or that hex_str has even length\n+    // since ConstevalHexLiteral has already validated.\n+    std::vector<Byte> rv(hex_str.inner.size() / 2);\n+    auto it = hex_str.inner.begin();\n+    for (auto& elem : rv) {\n+        auto hi = HexDigit(*(it++)) << 4;\n+        elem = Byte(hi | HexDigit(*(it++)));",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 49,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"refactor: Add consteval ArrayFromHex and VecFromHex\" \r\n(b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795)\r\n\r\nI think it would be safer and more explicit to use `static_cast<Byte>(...)` instead of functional cast `Byte(...)`. Not actually sure about this particular situation, but in general there are unsafe conversions that C casts allow which static_cast does not allow.",
      "created_at": "2024-08-15T03:19:57Z",
      "updated_at": "2024-08-15T12:46:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717828979",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717828979"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 108,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718048796",
      "pull_request_review_id": 2239843269,
      "id": 1718048796,
      "node_id": "PRRC_kwDOABII585mZ1gc",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 33,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": 1717449874,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In other cases we're adding and subtracting booleans, but I'm fine with both, see: https://github.com/bitcoin/bitcoin/pull/30535/files#diff-09e6cf871236bf03d32cca9405837d9b7927690b2296a2de17c9be6ea0e75959R74",
      "created_at": "2024-08-15T07:06:07Z",
      "updated_at": "2024-08-15T07:06:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718048796",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718048796"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718060639",
      "pull_request_review_id": 2239861784,
      "id": 1718060639,
      "node_id": "PRRC_kwDOABII585mZ4Zf",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 33,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": 1717449874,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's some next level terseness. Okay, will change if I re-touch.",
      "created_at": "2024-08-15T07:21:56Z",
      "updated_at": "2024-08-15T07:21:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718060639",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718060639"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718117883",
      "pull_request_review_id": 2239947187,
      "id": 1718117883,
      "node_id": "PRRC_kwDOABII585maGX7",
      "diff_hunk": "@@ -125,20 +125,11 @@ class base_blob\n template <unsigned int BITS>\n consteval base_blob<BITS>::base_blob(std::string_view hex_str)\n {\n-    // Non-lookup table version of HexDigit().\n-    auto from_hex = [](const char c) -> int8_t {\n-        if (c >= '0' && c <= '9') return c - '0';\n-        // Only lowercase letters are supported, for consistency.\n-        if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n-\n-        throw \"Called ctor with an invalid hex digit\";\n-    };\n-\n     if (hex_str.length() != m_data.size() * 2) throw \"Hex string must fit exactly\";\n     auto str_it = hex_str.rbegin();\n     for (auto& elem : m_data) {\n-        auto lo = from_hex(*(str_it++));\n-        elem = (from_hex(*(str_it++)) << 4) | lo;\n+        auto lo = ConstevalHexDigit(*(str_it++));",
      "path": "src/uint256.h",
      "position": null,
      "original_position": 18,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "09458eadc9a4484ba37a70d1b378ed3f3c9e31d0",
      "in_reply_to_id": 1716752262,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Correct, the issue is not the clang version, but the stdlib version. `MacOSX14.0.sdk` does seem to have an issue in the iterators implementation. The minimum clang (and libc++) version is documented in `doc/dependencies.md` to be clang-16.\r\n\r\nHowever, Apple somehow ships a completely separately versioned clang and stdlib with Xcode. Apples Xcode 14 stdlib seems to be no longer supported after this commit.\r\n\r\nGiven that Xcode 15 dropped support for macOS Ventura 13, made me leave the previous comment https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716956530 about possibly extending the commit to mention that.\r\n\r\nAgain, I don't use Apple, so I don't care, but I wanted to mention it.",
      "created_at": "2024-08-15T08:27:47Z",
      "updated_at": "2024-08-15T08:27:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718117883",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718117883"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718137078",
      "pull_request_review_id": 2239975805,
      "id": 1718137078,
      "node_id": "PRRC_kwDOABII585maLD2",
      "diff_hunk": "@@ -32,20 +31,19 @@ static void TestPassphraseSingle(const std::vector<unsigned char>& vchSalt, cons\n             HexStr(crypt.vchIV) + std::string(\" != \") + HexStr(correctIV));\n }\n \n-static void TestPassphrase(const std::vector<unsigned char>& vchSalt, const SecureString& passphrase, uint32_t rounds,\n-                 const std::vector<unsigned char>& correctKey = std::vector<unsigned char>(),\n-                 const std::vector<unsigned char>& correctIV=std::vector<unsigned char>())\n+static void TestPassphrase(std::span<const unsigned char> chSalt, const SecureString& passphrase, uint32_t rounds,\n+                 std::span<const unsigned char> correctKey = {}, std::span<const unsigned char> correctIV = {})\n {\n-    TestPassphraseSingle(vchSalt, passphrase, rounds, correctKey, correctIV);\n+    TestPassphraseSingle(chSalt, passphrase, rounds, correctKey, correctIV);\n     for(SecureString::const_iterator i(passphrase.begin()); i != passphrase.end(); ++i)\n-        TestPassphraseSingle(vchSalt, SecureString(i, passphrase.end()), rounds);\n+        TestPassphraseSingle(chSalt, SecureString(i, passphrase.end()), rounds);\n }\n \n-static void TestDecrypt(const CCrypter& crypt, const std::vector<unsigned char>& vchCiphertext, \\\n+static void TestDecrypt(const CCrypter& crypt, std::span<const unsigned char> chCiphertext, \\\n                         const std::vector<unsigned char>& vchPlaintext = std::vector<unsigned char>())\n {\n     CKeyingMaterial vchDecrypted;\n-    crypt.Decrypt(vchCiphertext, vchDecrypted);\n+    crypt.Decrypt(chCiphertext, vchDecrypted);",
      "path": "src/wallet/test/wallet_crypto_tests.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "9c4aad3fe4cb74bb1d9afeece78e2dd6ae1ad08e",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "style nit in 9c4aad3fe4cb74bb1d9afeece78e2dd6ae1ad08e: When renaming this, I'd suggest to use the \"fully\" correct naming style `ciphertext` (snake_case without type prefix), according to the style guide.\r\n\r\n(An alternative would be to leave it completely untouched)",
      "created_at": "2024-08-15T08:48:10Z",
      "updated_at": "2024-08-15T10:06:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718137078",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718137078"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718187725",
      "pull_request_review_id": 2239975805,
      "id": 1718187725,
      "node_id": "PRRC_kwDOABII585maXbN",
      "diff_hunk": "@@ -67,6 +68,67 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : ConstevalHexLiteral{std::string_view{hex_str}} {}\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 40,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "style nit in https://github.com/bitcoin/bitcoin/commit/b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795:\r\n\r\nI wonder if it makes sense to pick the default as `Byte = std::byte` now. Obviously the diff will be larger, but longer term it seems cleaner to converge to `std::byte`, so having that as default will make the future easier, no?",
      "created_at": "2024-08-15T09:32:47Z",
      "updated_at": "2024-08-15T10:06:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718187725",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718187725"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718210663",
      "pull_request_review_id": 2239975805,
      "id": 1718210663,
      "node_id": "PRRC_kwDOABII585madBn",
      "diff_hunk": "@@ -71,7 +71,7 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n-    const CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+    const CScript genesisOutputScript = CScript() << ToByteVector(ArrayFromHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\")) << OP_CHECKSIG;",
      "path": "src/kernel/chainparams.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "0a82c18457ec81e911b835b2ac76ad7475384983",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "style nit in 0a82c18457ec81e911b835b2ac76ad7475384983:\r\n\r\nI know this has been mentioned before, but performance doesn't matter here, so using just `VecFromHex` seems shorter and clearer?",
      "created_at": "2024-08-15T09:56:52Z",
      "updated_at": "2024-08-15T10:06:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718210663",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718210663"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718211451",
      "pull_request_review_id": 2239975805,
      "id": 1718211451,
      "node_id": "PRRC_kwDOABII585madN7",
      "diff_hunk": "@@ -3931,7 +3931,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         // If the peer is old enough to have the old alert system, send it the final alert.\n         if (greatest_common_version <= 70012) {\n-            const auto finalAlert{ParseHex(\"60010000000000000000000000ffffff7f00000000ffffff7ffeffff7f01ffffff7f00000000ffffff7f00ffffff7f002f555247454e543a20416c657274206b657920636f6d70726f6d697365642c2075706772616465207265717569726564004630440220653febd6410f470f6bae11cad19c48413becb1ac2c17f908fd0fd53bdc3abd5202206d0e9c96fe88d4a0f01ed9dedae2b6f9e00da94cad0fecaae66ecf689bf71b50\")};\n+            constexpr auto finalAlert{ArrayFromHex(\"60010000000000000000000000ffffff7f00000000ffffff7ffeffff7f01ffffff7f00000000ffffff7f00ffffff7f002f555247454e543a20416c657274206b657920636f6d70726f6d697365642c2075706772616465207265717569726564004630440220653febd6410f470f6bae11cad19c48413becb1ac2c17f908fd0fd53bdc3abd5202206d0e9c96fe88d4a0f01ed9dedae2b6f9e00da94cad0fecaae66ecf689bf71b50\")};\n             MakeAndPushMessage(pfrom, \"alert\", Span{finalAlert});",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "0a82c18457ec81e911b835b2ac76ad7475384983",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "style nit in https://github.com/bitcoin/bitcoin/commit/0a82c18457ec81e911b835b2ac76ad7475384983:\r\n\r\nSpan and array serialization is the same, so in theory you could drop this call to Span.",
      "created_at": "2024-08-15T09:57:45Z",
      "updated_at": "2024-08-15T10:06:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718211451",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718211451"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3935,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718214663",
      "pull_request_review_id": 2239975805,
      "id": 1718214663,
      "node_id": "PRRC_kwDOABII585maeAH",
      "diff_hunk": "@@ -1352,12 +1352,18 @@ BOOST_AUTO_TEST_CASE(script_GetScriptAsm)\n     BOOST_CHECK_EQUAL(derSig + \"83 \" + pubKey, ScriptToAsmStr(CScript() << ToByteVector(ParseHex(derSig + \"83\")) << vchPubKey));\n }\n \n-static CScript ScriptFromHex(const std::string& str)\n+static CScript ScriptFromHexStr(const std::string& str)\n {\n     std::vector<unsigned char> data = ParseHex(str);\n     return CScript(data.begin(), data.end());\n }\n \n+static CScript ScriptFromHex(ConstevalHexLiteral str)\n+{\n+    std::vector<unsigned char> data = VecFromHex(str);\n+    return CScript(data.begin(), data.end());\n+}",
      "path": "src/test/script_tests.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "0a82c18457ec81e911b835b2ac76ad7475384983",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "style nit in https://github.com/bitcoin/bitcoin/commit/0a82c18457ec81e911b835b2ac76ad7475384983:\r\n\r\nStill not sure about this. The benefit seems limited to offer two functions that effectively do the same in tests. It is just extra stuff for test writers (and readers) to keep in mind, when reviewing or writing new tests. Just having one function (the already existing one) seems easier.\r\n\r\nThe benefit of compile-time enforcement in tests seems limited, because running this test is way faster than compiling it.\r\n\r\n",
      "created_at": "2024-08-15T10:01:31Z",
      "updated_at": "2024-08-15T10:06:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718214663",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718214663"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 1361,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1368,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718218266",
      "pull_request_review_id": 2240096017,
      "id": 1718218266,
      "node_id": "PRRC_kwDOABII585mae4a",
      "diff_hunk": "@@ -148,10 +148,14 @@ BOOST_AUTO_TEST_CASE(parse_hex)\n     std::vector<unsigned char> result;\n     std::vector<unsigned char> expected(std::begin(ParseHex_expected), std::end(ParseHex_expected));\n     // Basic test vector\n+    result = ToByteVector(ArrayFromHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\"));",
      "path": "src/test/util_tests.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: this is closely tied to `ParseHex_expected`, if you modify again, consider extracting all 5 usages next to it.",
      "created_at": "2024-08-15T10:05:13Z",
      "updated_at": "2024-08-15T10:51:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718218266",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718218266"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718237308",
      "pull_request_review_id": 2240123641,
      "id": 1718237308,
      "node_id": "PRRC_kwDOABII585majh8",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 25,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": 1717433775,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's strange, I don't see how a string literal would need a conversion when there's a `const char*` ctor? It seems to work fine for [`ConstevalStringLiteral`](https://github.com/bitcoin/bitcoin/blob/2f7d9aec4d049701fccfc029f44934d187467432/src/util/translation.h#L72) too, so pardon my insistence but I think perhaps this compiler error might be because of another issue? Would you mind trying this diff on 734ac5a9002493013c0f8afe763f751ac99f89c8?\r\n\r\n<details>\r\n<summary>git diff on 734ac5a900</summary>\r\n\r\n```diff\r\ndiff --git a/src/util/strencodings.h b/src/util/strencodings.h\r\nindex fbd116c77c..63f46396d3 100644\r\n--- a/src/util/strencodings.h\r\n+++ b/src/util/strencodings.h\r\n@@ -80,8 +80,7 @@ consteval uint8_t ConstevalHexDigit(const char c)\r\n \r\n struct ConstevalHexLiteral {\r\n     const std::string_view inner;\r\n-    template <size_t N>\r\n-    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : ConstevalHexLiteral{std::string_view{hex_str}} {}\r\n+    consteval ConstevalHexLiteral(const char* hex_str) : ConstevalHexLiteral{std::string_view{hex_str}} {}\r\n     consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\r\n     consteval ConstevalHexLiteral(std::nullptr_t) = delete;\r\n \r\n\r\n```\r\n</details>\r\n",
      "created_at": "2024-08-15T10:28:02Z",
      "updated_at": "2024-08-15T10:28:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718237308",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718237308"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 83,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718238341",
      "pull_request_review_id": 2240125318,
      "id": 1718238341,
      "node_id": "PRRC_kwDOABII585majyF",
      "diff_hunk": "@@ -32,20 +31,19 @@ static void TestPassphraseSingle(const std::vector<unsigned char>& vchSalt, cons\n             HexStr(crypt.vchIV) + std::string(\" != \") + HexStr(correctIV));\n }\n \n-static void TestPassphrase(const std::vector<unsigned char>& vchSalt, const SecureString& passphrase, uint32_t rounds,\n-                 const std::vector<unsigned char>& correctKey = std::vector<unsigned char>(),\n-                 const std::vector<unsigned char>& correctIV=std::vector<unsigned char>())\n+static void TestPassphrase(std::span<const unsigned char> chSalt, const SecureString& passphrase, uint32_t rounds,\n+                 std::span<const unsigned char> correctKey = {}, std::span<const unsigned char> correctIV = {})\n {\n-    TestPassphraseSingle(vchSalt, passphrase, rounds, correctKey, correctIV);\n+    TestPassphraseSingle(chSalt, passphrase, rounds, correctKey, correctIV);\n     for(SecureString::const_iterator i(passphrase.begin()); i != passphrase.end(); ++i)\n-        TestPassphraseSingle(vchSalt, SecureString(i, passphrase.end()), rounds);\n+        TestPassphraseSingle(chSalt, SecureString(i, passphrase.end()), rounds);\n }\n \n-static void TestDecrypt(const CCrypter& crypt, const std::vector<unsigned char>& vchCiphertext, \\\n+static void TestDecrypt(const CCrypter& crypt, std::span<const unsigned char> chCiphertext, \\\n                         const std::vector<unsigned char>& vchPlaintext = std::vector<unsigned char>())\n {\n     CKeyingMaterial vchDecrypted;\n-    crypt.Decrypt(vchCiphertext, vchDecrypted);\n+    crypt.Decrypt(chCiphertext, vchDecrypted);",
      "path": "src/wallet/test/wallet_crypto_tests.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "9c4aad3fe4cb74bb1d9afeece78e2dd6ae1ad08e",
      "in_reply_to_id": 1718137078,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree. Would either use the [fully correct naming style](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-c), or not do the rename at all.",
      "created_at": "2024-08-15T10:29:25Z",
      "updated_at": "2024-08-15T10:34:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718238341",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718238341"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718241896",
      "pull_request_review_id": 2240096017,
      "id": 1718241896,
      "node_id": "PRRC_kwDOABII585makpo",
      "diff_hunk": "@@ -143,19 +143,28 @@ BOOST_AUTO_TEST_CASE(key_test1)\n     BOOST_CHECK(key1.Sign(hashMsg, detsig));\n     BOOST_CHECK(key1C.Sign(hashMsg, detsigc));\n     BOOST_CHECK(detsig == detsigc);\n-    BOOST_CHECK(detsig == ParseHex(\"304402205dbbddda71772d95ce91cd2d14b592cfbc1dd0aabd6a394b6c2d377bbe59d31d022014ddda21494a4e221f0824f0b8b924c43fa43c0ad57dccdaa11f81a6bd4582f6\"));\n+    constexpr auto expected_sig1{ArrayFromHex(\"304402205dbbddda71772d95ce91cd2d14b592cfbc1dd0aabd6a394b6c2d377bbe59d31d022014ddda21494a4e221f0824f0b8b924c43fa43c0ad57dccdaa11f81a6bd4582f6\")};\n+    BOOST_CHECK_EQUAL_COLLECTIONS(detsig.begin(), detsig.end(), expected_sig1.begin(), expected_sig1.end());",
      "path": "src/test/key_tests.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "734ac5a9002493013c0f8afe763f751ac99f89c8",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This was quite simple before, now it might be faster by a few nanos, but it's less readable.\r\nGiven that `HexStr` was already tested properly, could we maybe go the other way and convert `detsig` to hex string and compare against the hard coded value, i.e.\r\n```suggestion\r\n    BOOST_CHECK_EQUAL(HexStr(detsig), \"304402205dbbddda71772d95ce91cd2d14b592cfbc1dd0aabd6a394b6c2d377bbe59d31d022014ddda21494a4e221f0824f0b8b924c43fa43c0ad57dccdaa11f81a6bd4582f6\");\r\n```",
      "created_at": "2024-08-15T10:33:56Z",
      "updated_at": "2024-08-15T10:51:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718241896",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718241896"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 146,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718251992",
      "pull_request_review_id": 2240096017,
      "id": 1718251992,
      "node_id": "PRRC_kwDOABII585manHY",
      "diff_hunk": "@@ -67,6 +68,67 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : ConstevalHexLiteral{std::string_view{hex_str}} {}\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)\n+{\n+    // No need to check HexDigit() return values or that hex_str has even length\n+    // since ConstevalHexLiteral has already validated.\n+    std::vector<Byte> rv(hex_str.inner.size() / 2);\n+    auto it = hex_str.inner.begin();\n+    for (auto& elem : rv) {\n+        auto hi = HexDigit(*(it++)) << 4;\n+        elem = Byte(hi | HexDigit(*(it++)));\n+    }\n+    return rv;\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Unlike VecFromHex which returns a vector, the returned array may use\n+ *          significant stack space if called inside a function.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, Size / 2> ArrayFromHex(const char (&hex_str)[Size])\n+    // 2 hex digits required per byte + implicit null terminator\n+    requires (Size % 2 == 1)\n+{\n+    if (hex_str[Size - 1] != '\\0') throw \"null terminator required\";",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 63,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "734ac5a9002493013c0f8afe763f751ac99f89c8",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If we insist that this is an important check, it seems a bit jumpy to do the check at the beginning, after which we iterate over the elements and arrive exactly at that element - and just silently skip it.\r\nAlternatively, we could check for `\\0` when we get there, after we've processed the rest of the chars, i.e.\r\n```C++\r\n    assert(!hex_str[i]);\r\n    return rv;\r\n```",
      "created_at": "2024-08-15T10:47:14Z",
      "updated_at": "2024-08-15T10:51:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718251992",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718251992"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718252997",
      "pull_request_review_id": 2240096017,
      "id": 1718252997,
      "node_id": "PRRC_kwDOABII585manXF",
      "diff_hunk": "@@ -13,9 +13,9 @@\n \n static void Bech32Encode(benchmark::Bench& bench)\n {\n-    std::vector<uint8_t> v = ParseHex(\"c97f5a67ec381b760aeaf67573bc164845ff39a3bb26a1cee401ac67243b48db\");\n+    constexpr std::array<uint8_t, 32> v{ArrayFromHex(\"c97f5a67ec381b760aeaf67573bc164845ff39a3bb26a1cee401ac67243b48db\")};",
      "path": "src/bench/bech32.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "734ac5a9002493013c0f8afe763f751ac99f89c8",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "btw, this is in the preprocessing phase of the benchmark, the performance doesn't matter here at all - only inside the `.run(` part, so I'd go with the cleanest code here, too (if this is it, just resolve the comment).",
      "created_at": "2024-08-15T10:48:34Z",
      "updated_at": "2024-08-15T10:52:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718252997",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718252997"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718446549",
      "pull_request_review_id": 2240460999,
      "id": 1718446549,
      "node_id": "PRRC_kwDOABII585mbWnV",
      "diff_hunk": "@@ -148,10 +148,14 @@ BOOST_AUTO_TEST_CASE(parse_hex)\n     std::vector<unsigned char> result;\n     std::vector<unsigned char> expected(std::begin(ParseHex_expected), std::end(ParseHex_expected));\n     // Basic test vector\n+    result = ToByteVector(ArrayFromHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\"));",
      "path": "src/test/util_tests.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795",
      "in_reply_to_id": 1718218266,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "To be clear, you are suggesting extracting the repeated string literal \"04678afdb0fe5548271967f1a67130b7105c...\" into a `constexpr` variable?",
      "created_at": "2024-08-15T14:01:39Z",
      "updated_at": "2024-08-15T14:01:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718446549",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718446549"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718966018",
      "pull_request_review_id": 2241288588,
      "id": 1718966018,
      "node_id": "PRRC_kwDOABII585mdVcC",
      "diff_hunk": "@@ -13,9 +13,9 @@\n \n static void Bech32Encode(benchmark::Bench& bench)\n {\n-    std::vector<uint8_t> v = ParseHex(\"c97f5a67ec381b760aeaf67573bc164845ff39a3bb26a1cee401ac67243b48db\");\n+    constexpr std::array<uint8_t, 32> v{ArrayFromHex(\"c97f5a67ec381b760aeaf67573bc164845ff39a3bb26a1cee401ac67243b48db\")};",
      "path": "src/bench/bech32.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "734ac5a9002493013c0f8afe763f751ac99f89c8",
      "in_reply_to_id": 1718252997,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, this change isn't to improve benchmark performance.\r\n\r\nIMO the changed version is cleaner - the number of bytes to be converted is explicitly enforced in the type and can be connected to the calculation below.",
      "created_at": "2024-08-15T20:40:18Z",
      "updated_at": "2024-08-15T21:16:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718966018",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718966018"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718972546",
      "pull_request_review_id": 2241288588,
      "id": 1718972546,
      "node_id": "PRRC_kwDOABII585mdXCC",
      "diff_hunk": "@@ -71,7 +71,7 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n-    const CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+    const CScript genesisOutputScript = CScript() << ToByteVector(ArrayFromHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\")) << OP_CHECKSIG;",
      "path": "src/kernel/chainparams.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "0a82c18457ec81e911b835b2ac76ad7475384983",
      "in_reply_to_id": 1718210663,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's because part of my goal with this PR was to etch these bytes into the runtime binary. Things that can be done at compile time without too much hassle should be done at compile time IMO.\r\n\r\nIf we go the `Vec(HexLiteral` route at least it becomes shorter.",
      "created_at": "2024-08-15T20:47:04Z",
      "updated_at": "2024-08-15T21:16:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718972546",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718972546"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718976845",
      "pull_request_review_id": 2241288588,
      "id": 1718976845,
      "node_id": "PRRC_kwDOABII585mdYFN",
      "diff_hunk": "@@ -3931,7 +3931,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         // If the peer is old enough to have the old alert system, send it the final alert.\n         if (greatest_common_version <= 70012) {\n-            const auto finalAlert{ParseHex(\"60010000000000000000000000ffffff7f00000000ffffff7ffeffff7f01ffffff7f00000000ffffff7f00ffffff7f002f555247454e543a20416c657274206b657920636f6d70726f6d697365642c2075706772616465207265717569726564004630440220653febd6410f470f6bae11cad19c48413becb1ac2c17f908fd0fd53bdc3abd5202206d0e9c96fe88d4a0f01ed9dedae2b6f9e00da94cad0fecaae66ecf689bf71b50\")};\n+            constexpr auto finalAlert{ArrayFromHex(\"60010000000000000000000000ffffff7f00000000ffffff7ffeffff7f01ffffff7f00000000ffffff7f00ffffff7f002f555247454e543a20416c657274206b657920636f6d70726f6d697365642c2075706772616465207265717569726564004630440220653febd6410f470f6bae11cad19c48413becb1ac2c17f908fd0fd53bdc3abd5202206d0e9c96fe88d4a0f01ed9dedae2b6f9e00da94cad0fecaae66ecf689bf71b50\")};\n             MakeAndPushMessage(pfrom, \"alert\", Span{finalAlert});",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "0a82c18457ec81e911b835b2ac76ad7475384983",
      "in_reply_to_id": 1718211451,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I got lost around `SerializeMany` :), but agree, **serialize.h** does the `std::array` -> `Span` conversion internally.",
      "created_at": "2024-08-15T20:51:46Z",
      "updated_at": "2024-08-15T21:16:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718976845",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718976845"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3935,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718978767",
      "pull_request_review_id": 2241288588,
      "id": 1718978767,
      "node_id": "PRRC_kwDOABII585mdYjP",
      "diff_hunk": "@@ -143,19 +143,28 @@ BOOST_AUTO_TEST_CASE(key_test1)\n     BOOST_CHECK(key1.Sign(hashMsg, detsig));\n     BOOST_CHECK(key1C.Sign(hashMsg, detsigc));\n     BOOST_CHECK(detsig == detsigc);\n-    BOOST_CHECK(detsig == ParseHex(\"304402205dbbddda71772d95ce91cd2d14b592cfbc1dd0aabd6a394b6c2d377bbe59d31d022014ddda21494a4e221f0824f0b8b924c43fa43c0ad57dccdaa11f81a6bd4582f6\"));\n+    constexpr auto expected_sig1{ArrayFromHex(\"304402205dbbddda71772d95ce91cd2d14b592cfbc1dd0aabd6a394b6c2d377bbe59d31d022014ddda21494a4e221f0824f0b8b924c43fa43c0ad57dccdaa11f81a6bd4582f6\")};\n+    BOOST_CHECK_EQUAL_COLLECTIONS(detsig.begin(), detsig.end(), expected_sig1.begin(), expected_sig1.end());",
      "path": "src/test/key_tests.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "734ac5a9002493013c0f8afe763f751ac99f89c8",
      "in_reply_to_id": 1718241896,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thank you!",
      "created_at": "2024-08-15T20:53:56Z",
      "updated_at": "2024-08-15T21:16:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718978767",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718978767"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 146,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718988155",
      "pull_request_review_id": 2241288588,
      "id": 1718988155,
      "node_id": "PRRC_kwDOABII585mda17",
      "diff_hunk": "@@ -67,6 +68,67 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : ConstevalHexLiteral{std::string_view{hex_str}} {}",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 25,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795",
      "in_reply_to_id": 1717821819,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "As mentioned in https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717420847, who would do that?\r\n\r\nSomeone could theoretically do\r\n```C++\r\nconstexpr char hex[] = {'a', 'b', '\\0', '\\0', '\\0'};\r\nVecFromHex(hex);\r\n```\r\nand have your version fail to compile.",
      "created_at": "2024-08-15T21:01:59Z",
      "updated_at": "2024-08-15T21:16:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718988155",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718988155"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718993637",
      "pull_request_review_id": 2241288588,
      "id": 1718993637,
      "node_id": "PRRC_kwDOABII585mdcLl",
      "diff_hunk": "@@ -67,6 +68,67 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : ConstevalHexLiteral{std::string_view{hex_str}} {}\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 26,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795",
      "in_reply_to_id": 1717819227,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The intention was that the `string_view` length which is used at runtime would have a higher chance of being calculated at compile time.",
      "created_at": "2024-08-15T21:05:15Z",
      "updated_at": "2024-08-15T21:16:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718993637",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718993637"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718996633",
      "pull_request_review_id": 2241288588,
      "id": 1718996633,
      "node_id": "PRRC_kwDOABII585mdc6Z",
      "diff_hunk": "@@ -67,6 +68,67 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : ConstevalHexLiteral{std::string_view{hex_str}} {}\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)\n+{\n+    // No need to check HexDigit() return values or that hex_str has even length\n+    // since ConstevalHexLiteral has already validated.\n+    std::vector<Byte> rv(hex_str.inner.size() / 2);\n+    auto it = hex_str.inner.begin();\n+    for (auto& elem : rv) {\n+        auto hi = HexDigit(*(it++)) << 4;\n+        elem = Byte(hi | HexDigit(*(it++)));",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 49,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795",
      "in_reply_to_id": 1717828979,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for finding this! Remains from battling the compiler.",
      "created_at": "2024-08-15T21:07:43Z",
      "updated_at": "2024-08-15T21:16:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718996633",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718996633"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 108,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718998801",
      "pull_request_review_id": 2241288588,
      "id": 1718998801,
      "node_id": "PRRC_kwDOABII585mddcR",
      "diff_hunk": "@@ -67,6 +68,67 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : ConstevalHexLiteral{std::string_view{hex_str}} {}\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)\n+{\n+    // No need to check HexDigit() return values or that hex_str has even length\n+    // since ConstevalHexLiteral has already validated.\n+    std::vector<Byte> rv(hex_str.inner.size() / 2);\n+    auto it = hex_str.inner.begin();\n+    for (auto& elem : rv) {\n+        auto hi = HexDigit(*(it++)) << 4;\n+        elem = Byte(hi | HexDigit(*(it++)));\n+    }\n+    return rv;\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Unlike VecFromHex which returns a vector, the returned array may use\n+ *          significant stack space if called inside a function.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, Size / 2> ArrayFromHex(const char (&hex_str)[Size])\n+    // 2 hex digits required per byte + implicit null terminator\n+    requires (Size % 2 == 1)\n+{\n+    if (hex_str[Size - 1] != '\\0') throw \"null terminator required\";",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 63,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "734ac5a9002493013c0f8afe763f751ac99f89c8",
      "in_reply_to_id": 1718251992,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I see what you mean and tried it out, but ended up preferring input validation at the top of the function.",
      "created_at": "2024-08-15T21:09:45Z",
      "updated_at": "2024-08-15T21:16:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718998801",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718998801"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719000295",
      "pull_request_review_id": 2241288588,
      "id": 1719000295,
      "node_id": "PRRC_kwDOABII585mddzn",
      "diff_hunk": "@@ -67,6 +68,67 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : ConstevalHexLiteral{std::string_view{hex_str}} {}\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 40,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795",
      "in_reply_to_id": 1718187725,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "See https://github.com/bitcoin/bitcoin/pull/30377/files#r1716903532",
      "created_at": "2024-08-15T21:10:51Z",
      "updated_at": "2024-08-15T21:16:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1719000295",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719000295"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719001947",
      "pull_request_review_id": 2241288588,
      "id": 1719001947,
      "node_id": "PRRC_kwDOABII585mdeNb",
      "diff_hunk": "@@ -32,20 +31,19 @@ static void TestPassphraseSingle(const std::vector<unsigned char>& vchSalt, cons\n             HexStr(crypt.vchIV) + std::string(\" != \") + HexStr(correctIV));\n }\n \n-static void TestPassphrase(const std::vector<unsigned char>& vchSalt, const SecureString& passphrase, uint32_t rounds,\n-                 const std::vector<unsigned char>& correctKey = std::vector<unsigned char>(),\n-                 const std::vector<unsigned char>& correctIV=std::vector<unsigned char>())\n+static void TestPassphrase(std::span<const unsigned char> chSalt, const SecureString& passphrase, uint32_t rounds,\n+                 std::span<const unsigned char> correctKey = {}, std::span<const unsigned char> correctIV = {})\n {\n-    TestPassphraseSingle(vchSalt, passphrase, rounds, correctKey, correctIV);\n+    TestPassphraseSingle(chSalt, passphrase, rounds, correctKey, correctIV);\n     for(SecureString::const_iterator i(passphrase.begin()); i != passphrase.end(); ++i)\n-        TestPassphraseSingle(vchSalt, SecureString(i, passphrase.end()), rounds);\n+        TestPassphraseSingle(chSalt, SecureString(i, passphrase.end()), rounds);\n }\n \n-static void TestDecrypt(const CCrypter& crypt, const std::vector<unsigned char>& vchCiphertext, \\\n+static void TestDecrypt(const CCrypter& crypt, std::span<const unsigned char> chCiphertext, \\\n                         const std::vector<unsigned char>& vchPlaintext = std::vector<unsigned char>())\n {\n     CKeyingMaterial vchDecrypted;\n-    crypt.Decrypt(vchCiphertext, vchDecrypted);\n+    crypt.Decrypt(chCiphertext, vchDecrypted);",
      "path": "src/wallet/test/wallet_crypto_tests.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "9c4aad3fe4cb74bb1d9afeece78e2dd6ae1ad08e",
      "in_reply_to_id": 1718137078,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good suggestion, seems to work out well.",
      "created_at": "2024-08-15T21:12:19Z",
      "updated_at": "2024-08-15T21:16:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1719001947",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719001947"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719074063",
      "pull_request_review_id": 2241451762,
      "id": 1719074063,
      "node_id": "PRRC_kwDOABII585mdv0P",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 25,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": 1717433775,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thank you for being persistent! Must have had other local changes interacting badly with it when I tried it. Got it working with only your diff, so if we end up resurrecting `ConstevalHexLiteral` I'll go with your version.",
      "created_at": "2024-08-15T22:25:05Z",
      "updated_at": "2024-08-15T22:25:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1719074063",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719074063"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 83,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719107583",
      "pull_request_review_id": 2241499736,
      "id": 1719107583,
      "node_id": "PRRC_kwDOABII585md3__",
      "diff_hunk": "@@ -1361,6 +1361,12 @@ static CScript ScriptFromHex(const std::string& str)\n     return CScript(data.begin(), data.end());\n }\n \n+template<size_t N>\n+CScript Script(const std::array<uint8_t, N>& array)\n+{\n+    return {array.begin(), array.end()};",
      "path": "src/test/script_tests.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "ced7cec1c6d79159f8212d3a92a8f7583ef11884",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"refactor: add util::HexLiteral and util::Vec using statements\" (ced7cec1c6d79159f8212d3a92a8f7583ef11884)\r\n\r\nIt seems like there is a problem with this on windows, looks like because begin and end are returning `std::_Array_const_iterator` types, instead of character pointers. Following change might fix it:\r\n\r\n```diff\r\n-    return {array.begin(), array.end()};\r\n+    return {array.data(), array.data() + array.size()};\r\n```\r\nError is:\r\n\r\nhttps://github.com/bitcoin/bitcoin/actions/runs/10411271977/job/28834888600?pr=30377#step:20:2031\r\n\r\n```c++\r\nD:\\a\\bitcoin\\bitcoin\\src\\test\\script_tests.cpp(1367,12): error C2440: 'return': cannot convert from 'initializer list' to 'CScript' [D:\\a\\bitcoin\\bitcoin\\build_msvc\\test_bitcoin\\test_bitcoin.vcxproj]\r\n  D:\\a\\bitcoin\\bitcoin\\src\\test\\script_tests.cpp(1367,5): note: 'CScript::CScript': no overloaded function could convert all the argument types\r\n  D:\\a\\bitcoin\\bitcoin\\src\\script\\script.h(436,5): note: could be 'CScript::CScript(const unsigned char *,const unsigned char *)'\r\n  D:\\a\\bitcoin\\bitcoin\\src\\test\\script_tests.cpp(1367,5): note: 'CScript::CScript(const unsigned char *,const unsigned char *)': cannot convert argument 1 from 'std::_Array_const_iterator<_Ty,4>' to 'const unsigned char *'\r\n          with\r\n          [\r\n              _Ty=uint8_t\r\n          ]\r\n  D:\\a\\bitcoin\\bitcoin\\src\\test\\script_tests.cpp(1367,24): note: No user-defined-conversion operator available that can perform this conversion, or the operator cannot be called\r\n  D:\\a\\bitcoin\\bitcoin\\src\\script\\script.h(435,5): note: or       'CScript::CScript(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_Ty>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_Ty>>>)'\r\n          with\r\n          [\r\n              _Ty=unsigned char\r\n          ]\r\n  D:\\a\\bitcoin\\bitcoin\\src\\test\\script_tests.cpp(1367,5): note: 'CScript::CScript(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_Ty>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_Ty>>>)': cannot convert argument 1 from 'std::_Array_const_iterator<_Ty,4>' to 'std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_Ty>>>'\r\n          with\r\n          [\r\n              _Ty=unsigned char\r\n          ]\r\n          and\r\n          [\r\n              _Ty=uint8_t\r\n          ]\r\n          and\r\n          [\r\n              _Ty=unsigned char\r\n          ]\r\n  D:\\a\\bitcoin\\bitcoin\\src\\test\\script_tests.cpp(1367,24): note: No user-defined-conversion operator available that can perform this conversion, or the operator cannot be called\r\n  D:\\a\\bitcoin\\bitcoin\\src\\script\\script.h(434,5): note: or       'CScript::CScript(prevector<28,unsigned char,uint32_t,int32_t>::const_iterator,prevector<28,unsigned char,uint32_t,int32_t>::const_iterator)'\r\n  D:\\a\\bitcoin\\bitcoin\\src\\test\\script_tests.cpp(1367,5): note: 'CScript::CScript(prevector<28,unsigned char,uint32_t,int32_t>::const_iterator,prevector<28,unsigned char,uint32_t,int32_t>::const_iterator)': cannot convert argument 1 from 'std::_Array_const_iterator<_Ty,4>' to 'prevector<28,unsigned char,uint32_t,int32_t>::const_iterator'\r\n          with\r\n          [\r\n              _Ty=uint8_t\r\n          ]\r\n  D:\\a\\bitcoin\\bitcoin\\src\\test\\script_tests.cpp(1367,24): note: No user-defined-conversion operator available that can perform this conversion, or the operator cannot be called\r\n  D:\\a\\bitcoin\\bitcoin\\src\\test\\script_tests.cpp(1367,5): note: while trying to match the argument list '(std::_Array_const_iterator<_Ty,4>, std::_Array_const_iterator<_Ty,4>)'\r\n          with\r\n          [\r\n              _Ty=uint8_t\r\n          ]\r\n  D:\\a\\bitcoin\\bitcoin\\src\\test\\script_tests.cpp(1367,5): note: the template instantiation context (the oldest one first) is\r\n  D:\\a\\bitcoin\\bitcoin\\src\\test\\script_tests.cpp(1395,9): note: see reference to function template instantiation 'CScript script_tests::Script<4>(const std::array<uint8_t,4> &)' being compiled\r\n  serfloat_tests.cpp\r\nD:\\a\\bitcoin\\bitcoin\\src\\test\\script_tests.cpp(1367,12): error C2440: 'return': cannot convert from 'initializer list' to 'CScript' [D:\\a\\bitcoin\\bitcoin\\build_msvc\\test_bitcoin\\test_bitcoin.vcxproj]\r\n```",
      "created_at": "2024-08-15T23:23:44Z",
      "updated_at": "2024-08-15T23:48:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1719107583",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719107583"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1367,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719324036",
      "pull_request_review_id": 2241851111,
      "id": 1719324036,
      "node_id": "PRRC_kwDOABII585mes2E",
      "diff_hunk": "@@ -1361,6 +1361,12 @@ static CScript ScriptFromHex(const std::string& str)\n     return CScript(data.begin(), data.end());\n }\n \n+template<size_t N>\n+CScript Script(const std::array<uint8_t, N>& array)\n+{\n+    return {array.begin(), array.end()};",
      "path": "src/test/script_tests.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "ced7cec1c6d79159f8212d3a92a8f7583ef11884",
      "in_reply_to_id": 1719107583,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is https://github.com/bitcoin/bitcoin/pull/29369 related or possibly a fix?",
      "created_at": "2024-08-16T05:18:10Z",
      "updated_at": "2024-08-16T05:18:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1719324036",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719324036"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1367,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719345193",
      "pull_request_review_id": 2241890604,
      "id": 1719345193,
      "node_id": "PRRC_kwDOABII585meyAp",
      "diff_hunk": "@@ -369,4 +370,44 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ *\n+ * @note It may be preferable to use Vec(HexLiteral(...)) instead of\n+ * HexLiteral() to save stack space when declaring a local variable, if the hex\n+ * string is large. Alternately the variable could be declared constexpr to\n+ * avoid using stack space.\n+ */\n+template <typename Byte = uint8_t, size_t N>",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 29,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "84c830f27fd62db4a9cb93bf6d28a86f7751e504",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "style nit in 84c830f27fd62db4a9cb93bf6d28a86f7751e504: Could use `std::byte` as default? (See below for reasoning)\r\n\r\n(Reply to https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1719000295)\r\n\r\nI think your link should say https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716903532\r\n\r\nThis is a newly introduced function, so I think changing it should not extend to untouched files.\r\nTo clarify, I am not saying that you should switch callers to use `std::byte`, only the default.\r\n\r\nWhat I meant is that (for now) in this pull request you make the default choice `std::byte` for `Byte` and adjust the scripted-diff to use `HexLiteral<uint8_t>`. Obviously the diff will be <strike>larger</strike> more verbose, but longer term it seems cleaner to converge to `std::byte`. This means that the future change converging to `std::byte` will be cleaning up the code by being able to drop the `<uint8_t>` and fall back on the default. Also, using the explicit `<uint8_t>` makes it easier to spot places that still use the \"legacy\" description of bytes, and it acts as a sort-of \"TODO-comment\".\r\n\r\nAlso, \"modern\" places that require (or allow) `std::byte` today already, can simply use the function without having to specify that a Byte should mean `std::byte`.\r\n\r\nThis is in symmetry with the recently introduced `TryParseHex`, which also defaults to `std::byte`.",
      "created_at": "2024-08-16T05:38:04Z",
      "updated_at": "2024-08-16T05:48:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1719345193",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719345193"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 390,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719367069",
      "pull_request_review_id": 2241931571,
      "id": 1719367069,
      "node_id": "PRRC_kwDOABII585me3Wd",
      "diff_hunk": "@@ -71,7 +71,7 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n-    const CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+    const CScript genesisOutputScript = CScript() << ToByteVector(ArrayFromHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\")) << OP_CHECKSIG;",
      "path": "src/kernel/chainparams.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "0a82c18457ec81e911b835b2ac76ad7475384983",
      "in_reply_to_id": 1718210663,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> It's because part of my goal with this PR was to etch these bytes into the runtime binary. Things that can be done at compile time without too much hassle should be done at compile time IMO.\r\n> \r\n> If we go the `Vec(HexLiteral` route at least it becomes shorter.\r\n\r\nMakes sense, thanks for looking into it!",
      "created_at": "2024-08-16T05:55:17Z",
      "updated_at": "2024-08-16T05:55:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1719367069",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719367069"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719742146",
      "pull_request_review_id": 2242550873,
      "id": 1719742146,
      "node_id": "PRRC_kwDOABII585mgS7C",
      "diff_hunk": "@@ -1361,6 +1361,12 @@ static CScript ScriptFromHex(const std::string& str)\n     return CScript(data.begin(), data.end());\n }\n \n+template<size_t N>\n+CScript Script(const std::array<uint8_t, N>& array)\n+{\n+    return {array.begin(), array.end()};",
      "path": "src/test/script_tests.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "ced7cec1c6d79159f8212d3a92a8f7583ef11884",
      "in_reply_to_id": 1719107583,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, #29369 looks like a possible fix. Applied @ryanofsky's workaround for now but will have a look at that PR.",
      "created_at": "2024-08-16T11:51:20Z",
      "updated_at": "2024-08-16T11:51:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1719742146",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719742146"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1367,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719753108",
      "pull_request_review_id": 2242567712,
      "id": 1719753108,
      "node_id": "PRRC_kwDOABII585mgVmU",
      "diff_hunk": "@@ -369,4 +370,44 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ *\n+ * @note It may be preferable to use Vec(HexLiteral(...)) instead of\n+ * HexLiteral() to save stack space when declaring a local variable, if the hex\n+ * string is large. Alternately the variable could be declared constexpr to\n+ * avoid using stack space.\n+ */\n+template <typename Byte = uint8_t, size_t N>",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 29,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "84c830f27fd62db4a9cb93bf6d28a86f7751e504",
      "in_reply_to_id": 1719345193,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah, hadn't seen your #25227 before. It seems easier to default to `std::byte` when introducing `TryParseHex` without any prior callers. But thanks to your elaboration on the effort already under way to use `std::byte`, I did some more grepping and decided it might be worth attempting. Changed defaults in latest push 01e18d94d9577f415748869376988e3f0f59ced0 and worked through the fallout. The scripted-diff ended up with a lot less work in that version.\r\n\r\n(The push right before it in 3a96b9f4b56c2ef47f41e9baa9ce36a268aa9440 applies the other more minor fixes without changing the default to `std::byte`).\r\n\r\nGood to see that you were already thinking about compile-time versions in https://github.com/bitcoin/bitcoin/pull/25227#issuecomment-1349509341.\r\n",
      "created_at": "2024-08-16T12:01:31Z",
      "updated_at": "2024-08-16T12:01:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1719753108",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719753108"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 390,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719761131",
      "pull_request_review_id": 2242580852,
      "id": 1719761131,
      "node_id": "PRRC_kwDOABII585mgXjr",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)\n+{\n+    // No need to check HexDigit() return values or that hex_str has even length\n+    // since ConstevalHexLiteral has already validated.\n+    std::vector<Byte> rv(hex_str.inner.size() / 2);\n+    auto it = hex_str.inner.begin();\n+    for (auto& elem : rv) {\n+        auto hi = HexDigit(*(it++)) << 4;\n+        elem = Byte(hi | HexDigit(*(it++)));\n+    }\n+    return rv;\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Unlike VecFromHex which returns a vector, the returned array may use\n+ *          significant stack space if called inside a function.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, Size / 2> ArrayFromHex(const char (&hex_str)[Size])\n+{\n+    // Size should be uneven due to implicit null terminator.\n+    if (Size % 2 == 0) throw \"2 hex digits required per byte\";",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 62,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "b997d266e549ad6745d01a696cd9fbf1d3525944",
      "in_reply_to_id": 1717373651,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Continued in https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718988155\r\n\r\nResolving this one for now.",
      "created_at": "2024-08-16T12:10:07Z",
      "updated_at": "2024-08-16T12:10:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1719761131",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719761131"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719910914",
      "pull_request_review_id": 2242829972,
      "id": 1719910914,
      "node_id": "PRRC_kwDOABII585mg8IC",
      "diff_hunk": "@@ -253,8 +253,7 @@ class XOnlyPubKey\n      *  !IsFullyValid(). */\n     bool IsNull() const { return m_keydata.IsNull(); }\n \n-    /** Construct an x-only pubkey from exactly 32 bytes. */",
      "path": "src/pubkey.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "1dddb4fb0ff88162e58e50e56d5e889bb5727a81",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit in 1dddb4fb0ff88162e58e50e56d5e889bb5727a81: Any reason to remove the comment? Seems important to keep, otherwise a dev may be surprised when the function crashes when it isn't exactly 32 bytes.",
      "created_at": "2024-08-16T14:19:55Z",
      "updated_at": "2024-08-16T15:47:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1719910914",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719910914"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 256,
      "original_line": 256,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719915623",
      "pull_request_review_id": 2242829972,
      "id": 1719915623,
      "node_id": "PRRC_kwDOABII585mg9Rn",
      "diff_hunk": "@@ -253,8 +253,7 @@ class XOnlyPubKey\n      *  !IsFullyValid(). */\n     bool IsNull() const { return m_keydata.IsNull(); }\n \n-    /** Construct an x-only pubkey from exactly 32 bytes. */\n-    explicit XOnlyPubKey(Span<const unsigned char> bytes);\n+    constexpr explicit XOnlyPubKey(Span<const unsigned char> bytes) : m_keydata{bytes} {}",
      "path": "src/pubkey.h",
      "position": 6,
      "original_position": 6,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "1dddb4fb0ff88162e58e50e56d5e889bb5727a81",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit in https://github.com/bitcoin/bitcoin/commit/1dddb4fb0ff88162e58e50e56d5e889bb5727a81: Use `std::span` to avoid having to touch this again in the future for that reason?",
      "created_at": "2024-08-16T14:23:23Z",
      "updated_at": "2024-08-16T15:47:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1719915623",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719915623"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 256,
      "original_line": 256,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719917818",
      "pull_request_review_id": 2242829972,
      "id": 1719917818,
      "node_id": "PRRC_kwDOABII585mg9z6",
      "diff_hunk": "@@ -24,8 +24,8 @@ int CCrypter::BytesToKeySHA512AES(const std::vector<unsigned char>& chSalt, cons\n     unsigned char buf[CSHA512::OUTPUT_SIZE];\n     CSHA512 di;\n \n-    di.Write((const unsigned char*)strKeyData.data(), strKeyData.size());\n-    di.Write(chSalt.data(), chSalt.size());\n+    di.Write((const unsigned char*)key_data.data(), key_data.size());",
      "path": "src/wallet/crypter.cpp",
      "position": 15,
      "original_position": 15,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "1dddb4fb0ff88162e58e50e56d5e889bb5727a81",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit in https://github.com/bitcoin/bitcoin/commit/1dddb4fb0ff88162e58e50e56d5e889bb5727a81: Use the safe `UCharCast` while touching this, instead of the possibly unsafe pointer cast?",
      "created_at": "2024-08-16T14:25:12Z",
      "updated_at": "2024-08-16T15:47:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1719917818",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719917818"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 27,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719924332",
      "pull_request_review_id": 2242829972,
      "id": 1719924332,
      "node_id": "PRRC_kwDOABII585mg_Zs",
      "diff_hunk": "@@ -115,20 +113,20 @@ bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vch\n     return cKeyCrypter.Encrypt(vchPlaintext, vchCiphertext);\n }\n \n-bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext)\n+bool DecryptSecret(const CKeyingMaterial& vMasterKey, std::span<const unsigned char> chCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext)\n {\n     CCrypter cKeyCrypter;\n     std::vector<unsigned char> chIV(WALLET_CRYPTO_IV_SIZE);\n     memcpy(chIV.data(), &nIV, WALLET_CRYPTO_IV_SIZE);\n     if(!cKeyCrypter.SetKey(vMasterKey, chIV))\n         return false;\n-    return cKeyCrypter.Decrypt(vchCiphertext, vchPlaintext);\n+    return cKeyCrypter.Decrypt(chCiphertext, vchPlaintext);",
      "path": "src/wallet/crypter.cpp",
      "position": 79,
      "original_position": 79,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "1dddb4fb0ff88162e58e50e56d5e889bb5727a81",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit in https://github.com/bitcoin/bitcoin/commit/1dddb4fb0ff88162e58e50e56d5e889bb5727a81: Wrong rename?",
      "created_at": "2024-08-16T14:29:54Z",
      "updated_at": "2024-08-16T15:47:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1719924332",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719924332"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 123,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720015406",
      "pull_request_review_id": 2242829972,
      "id": 1720015406,
      "node_id": "PRRC_kwDOABII585mhVou",
      "diff_hunk": "@@ -71,7 +74,7 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n-    const CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+    const CScript genesisOutputScript = CScript() << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\")) << OP_CHECKSIG;",
      "path": "src/kernel/chainparams.cpp",
      "position": 15,
      "original_position": 15,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "original_commit_id": "82c9080f235f6ffbe983b1360dc5741ce95e9a7d",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit in 82c9080f235f6ffbe983b1360dc5741ce95e9a7d: Follow-up nit: I think it was me who suggested to avoid array/span serialization in script, but I think it could be considered when the vector serialization is mirrored. I understand that this would be different from the `serialize.h` serialization, but the two are separate anyway (and script inherits the whole prevector functions to insert raw bytes at any point anyway).\r\n\r\nIn any case, this doesn't remove the need for `Vec` and can be done in a follow-up.",
      "created_at": "2024-08-16T15:43:03Z",
      "updated_at": "2024-08-16T15:48:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1720015406",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720015406"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 77,
      "original_line": 77,
      "side": "RIGHT"
    }
  ]
}