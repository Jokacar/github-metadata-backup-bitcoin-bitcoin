{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546",
    "id": 1994139978,
    "node_id": "PR_kwDOABII58523ClK",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/30546",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/30546.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/30546.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30546",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30546/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/fae8c25d07cf003df1470699df4ef475055bb885",
    "number": 30546,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "util: Use consteval checked format string in FatalErrorf, LogConnectFailure",
    "user": {
      "login": "maflcko",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maflcko",
      "html_url": "https://github.com/maflcko",
      "followers_url": "https://api.github.com/users/maflcko/followers",
      "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
      "organizations_url": "https://api.github.com/users/maflcko/orgs",
      "repos_url": "https://api.github.com/users/maflcko/repos",
      "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/maflcko/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The `test/lint/lint-format-strings.py` was designed to count the number of format specifiers and assert that they are equal to the number of parameters passed to the format function. The goal seems reasonable, but the implementation has many problems:\r\n\r\n* It is written in Python, meaning that C++ code can not be parsed correctly. Currently it relies on brittle regex and string parsing.\r\n* Apart from the parsing errors, there are also many logic errors. For example, `count_format_specifiers` allows a mix of positional specifiers and non-positional specifiers, which can lead to runtime format bugs. Also, `count_format_specifiers` silently skipped over \"special\" format specifiers, which are valid in tinyformat, which again can lead to runtime format bugs being undetected.\r\n* The brittle logic has a history of breaking in pull requests that are otherwise fine. This causes the CI to fail and the pull request being blocked from progress until the bug in the linter is fixed, or the code is rewritten to work around the bug.\r\n* It is only run in the CI, or when the developer invokes the script. It would be better if the developer got the error message at compile-time, directly when writing the code.\r\n\r\nFix all issues by using a `consteval` checked format string in `FatalErrorf` and `LogConnectFailure`.\r\n\r\nThis is the first step toward https://github.com/bitcoin/bitcoin/issues/30530 and a follow-up will apply the approach to the other places.",
    "labels": [
      {
        "id": 241832923,
        "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
        "name": "Utils/log/libs",
        "description": "",
        "color": "5319e7",
        "default": false
      },
      {
        "id": 5334691551,
        "node_id": "LA_kwDOABII588AAAABPfju3w",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
        "name": "CI failed",
        "description": "",
        "color": "cccccc",
        "default": false
      }
    ],
    "created_at": "2024-07-30T10:47:49Z",
    "updated_at": "2024-09-12T08:58:58Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "9b8401b408cf14d4d73b8984ac8fc14aa20de286",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "maflcko:2407-log",
      "ref": "2407-log",
      "sha": "fae8c25d07cf003df1470699df4ef475055bb885",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 40046254,
        "node_id": "MDEwOlJlcG9zaXRvcnk0MDA0NjI1NA==",
        "name": "bitcoin-core",
        "full_name": "maflcko/bitcoin-core",
        "owner": {
          "login": "maflcko",
          "id": 6399679,
          "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/maflcko",
          "html_url": "https://github.com/maflcko",
          "followers_url": "https://api.github.com/users/maflcko/followers",
          "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
          "organizations_url": "https://api.github.com/users/maflcko/orgs",
          "repos_url": "https://api.github.com/users/maflcko/repos",
          "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/maflcko/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/maflcko/bitcoin-core",
        "fork": true,
        "url": "https://api.github.com/repos/maflcko/bitcoin-core",
        "archive_url": "https://api.github.com/repos/maflcko/bitcoin-core/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/maflcko/bitcoin-core/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/maflcko/bitcoin-core/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/maflcko/bitcoin-core/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/maflcko/bitcoin-core/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/maflcko/bitcoin-core/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/maflcko/bitcoin-core/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/maflcko/bitcoin-core/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/maflcko/bitcoin-core/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/maflcko/bitcoin-core/contributors",
        "deployments_url": "https://api.github.com/repos/maflcko/bitcoin-core/deployments",
        "downloads_url": "https://api.github.com/repos/maflcko/bitcoin-core/downloads",
        "events_url": "https://api.github.com/repos/maflcko/bitcoin-core/events",
        "forks_url": "https://api.github.com/repos/maflcko/bitcoin-core/forks",
        "git_commits_url": "https://api.github.com/repos/maflcko/bitcoin-core/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/maflcko/bitcoin-core/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/maflcko/bitcoin-core/git/tags%7B/sha%7D",
        "git_url": "git://github.com/maflcko/bitcoin-core.git",
        "issue_comment_url": "https://api.github.com/repos/maflcko/bitcoin-core/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/maflcko/bitcoin-core/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/maflcko/bitcoin-core/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/maflcko/bitcoin-core/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/maflcko/bitcoin-core/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/maflcko/bitcoin-core/languages",
        "merges_url": "https://api.github.com/repos/maflcko/bitcoin-core/merges",
        "milestones_url": "https://api.github.com/repos/maflcko/bitcoin-core/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/maflcko/bitcoin-core/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/maflcko/bitcoin-core/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/maflcko/bitcoin-core/releases%7B/id%7D",
        "ssh_url": "git@github.com:maflcko/bitcoin-core.git",
        "stargazers_url": "https://api.github.com/repos/maflcko/bitcoin-core/stargazers",
        "statuses_url": "https://api.github.com/repos/maflcko/bitcoin-core/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/maflcko/bitcoin-core/subscribers",
        "subscription_url": "https://api.github.com/repos/maflcko/bitcoin-core/subscription",
        "tags_url": "https://api.github.com/repos/maflcko/bitcoin-core/tags",
        "teams_url": "https://api.github.com/repos/maflcko/bitcoin-core/teams",
        "trees_url": "https://api.github.com/repos/maflcko/bitcoin-core/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/maflcko/bitcoin-core.git",
        "hooks_url": "https://api.github.com/repos/maflcko/bitcoin-core/hooks",
        "svn_url": "https://github.com/maflcko/bitcoin-core",
        "homepage": "",
        "language": "C++",
        "forks_count": 12,
        "stargazers_count": 25,
        "watchers_count": 25,
        "size": 236820,
        "default_branch": "master",
        "open_issues_count": 18,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-09-12T08:10:58Z",
        "created_at": "2015-08-01T12:42:47Z",
        "updated_at": "2023-10-29T15:00:48Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "349632e022da22a457a85650360b5be41fa500dc",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36155,
        "stargazers_count": 78345,
        "watchers_count": 78345,
        "size": 268226,
        "default_branch": "master",
        "open_issues_count": 667,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-09-12T08:54:23Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-09-12T08:54:34Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 166,
    "deletions": 20,
    "changed_files": 8,
    "commits": 4,
    "review_comments": 131,
    "comments": 12
  },
  "events": [
    {
      "event": "commented",
      "id": 2258052438,
      "node_id": "IC_kwDOABII586GlyVW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2258052438",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T10:47:52Z",
      "updated_at": "2024-09-12T08:11:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/30546).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [hodlinator](https://github.com/bitcoin/bitcoin/pull/30546#pullrequestreview-2273568357) |\n| Approach ACK | [stickies-v](https://github.com/bitcoin/bitcoin/pull/30546#pullrequestreview-2296299754) |\n| Stale ACK | [TheCharlatan](https://github.com/bitcoin/bitcoin/pull/30546#pullrequestreview-2240226231), [l0rinc](https://github.com/bitcoin/bitcoin/pull/30546#issuecomment-2340474919), [ryanofsky](https://github.com/bitcoin/bitcoin/pull/30546#pullrequestreview-2298007577) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#30635](https://github.com/bitcoin/bitcoin/pull/30635) (rpc: add optional blockhash to waitfornewblock by Sjors)\n* [#30409](https://github.com/bitcoin/bitcoin/pull/30409) (Introduce waitTipChanged() mining interface, replace RPCNotifyBlockChange, drop CRPCSignals & g_best_block by Sjors)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#issuecomment-2258052438",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30546"
    },
    {
      "event": "renamed",
      "id": 13693990016,
      "node_id": "RTE_lADOABII586RSaPbzwAAAAMwObSA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13693990016",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T10:47:55Z",
      "rename": {
        "from": " util: Use consteval checked format string in FatalErrorf ",
        "to": "util: Use consteval checked format string in FatalErrorf"
      }
    },
    {
      "event": "labeled",
      "id": 13693990128,
      "node_id": "LE_lADOABII586RSaPbzwAAAAMwObTw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13693990128",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T10:47:55Z",
      "label": {
        "name": "Utils/log/libs",
        "color": "5319e7"
      }
    },
    {
      "event": "commented",
      "id": 2258069845,
      "node_id": "IC_kwDOABII586Gl2lV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2258069845",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T10:57:05Z",
      "updated_at": "2024-07-30T10:57:05Z",
      "author_association": "MEMBER",
      "body": "Can be tested with the following diff:\r\n\r\n```diff\r\ndiff --git a/src/index/base.cpp b/src/index/base.cpp\r\nindex 955d7b67c9..9811074a2c 100644\r\n--- a/src/index/base.cpp\r\n+++ b/src/index/base.cpp\r\n@@ -179,7 +179,7 @@ void BaseIndex::Sync()\r\n                 }\r\n             }\r\n             if (pindex_next->pprev != pindex && !Rewind(pindex, pindex_next->pprev)) {\r\n-                FatalErrorf(\"%s: Failed to rewind index %s to a previous chain tip\", __func__, GetName());\r\n+                FatalErrorf(\"%s: /* Failed to rewind index %s to a previous chain tip */\", __func__, GetName());\r\n                 return;\r\n             }\r\n             pindex = pindex_next;\r\n```\r\n\r\nOn master (fails):\r\n\r\n```\r\n$ ./test/lint/lint-format-strings.py \r\nsrc/index/base.cpp: Expected 1 argument(s) after format string but found 2 argument(s): FatalErrorf(\"%s: \", __func__, GetName())\r\n```\r\n\r\nOn this pull (compilation check passes correctly).",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#issuecomment-2258069845",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30546"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13694330741,
      "node_id": "HRFPE_lADOABII586RSaPbzwAAAAMwPud1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13694330741",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T11:15:11Z"
    },
    {
      "event": "labeled",
      "id": 13694331519,
      "node_id": "LE_lADOABII586RSaPbzwAAAAMwPup_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13694331519",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T11:15:15Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13694394190,
      "node_id": "HRFPE_lADOABII586RSaPbzwAAAAMwP99O",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13694394190",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T11:20:08Z"
    },
    {
      "event": "unlabeled",
      "id": 13695571845,
      "node_id": "UNLE_lADOABII586RSaPbzwAAAAMwUdeF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13695571845",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T12:54:13Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13725526604,
      "node_id": "HRFPE_lADOABII586RSaPbzwAAAAMyGupM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13725526604",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-01T12:47:06Z"
    },
    {
      "event": "labeled",
      "id": 13725658067,
      "node_id": "LE_lADOABII586RSaPbzwAAAAMyHOvT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13725658067",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-01T12:56:38Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13725700199,
      "node_id": "HRFPE_lADOABII586RSaPbzwAAAAMyHZBn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13725700199",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-01T12:59:28Z"
    },
    {
      "event": "reviewed",
      "id": 2212994424,
      "node_id": "PRR_kwDOABII586D5514",
      "url": null,
      "actor": null,
      "commit_id": "fac123acec2bcd84d5daca3ed815f4e00c2222f0",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#pullrequestreview-2212994424",
      "submitted_at": "2024-08-01T14:20:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
    },
    {
      "event": "unlabeled",
      "id": 13727067204,
      "node_id": "UNLE_lADOABII586RSaPbzwAAAAMyMmxE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13727067204",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-01T14:21:29Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13728120993,
      "node_id": "HRFPE_lADOABII586RSaPbzwAAAAMyQoCh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13728120993",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-01T15:35:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13737279647,
      "node_id": "HRFPE_lADOABII586RSaPbzwAAAAMyzkCf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13737279647",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-02T07:03:32Z"
    },
    {
      "event": "reviewed",
      "id": 2240226231,
      "node_id": "PRR_kwDOABII586FhyO3",
      "url": null,
      "actor": null,
      "commit_id": "fa1f64d15e75137a6d4b469e7de6e1be0fda762a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK fa1f64d15e75137a6d4b469e7de6e1be0fda762a",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#pullrequestreview-2240226231",
      "submitted_at": "2024-08-15T11:56:51Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13895208245,
      "node_id": "HRFPE_lADOABII586RSaPbzwAAAAM8OA01",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13895208245",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T12:26:59Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14060404889,
      "node_id": "HRFPE_lADOABII586RSaPbzwAAAANGEMCZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14060404889",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-29T11:47:30Z"
    },
    {
      "event": "commented",
      "id": 2319973847,
      "node_id": "IC_kwDOABII586KR_3X",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2319973847",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-30T04:06:09Z",
      "updated_at": "2024-08-30T04:06:09Z",
      "author_association": "MEMBER",
      "body": "Rebased for fresh cmake CI",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#issuecomment-2319973847",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30546"
    },
    {
      "event": "reviewed",
      "id": 2272243082,
      "node_id": "PRR_kwDOABII586Hb62K",
      "url": null,
      "actor": null,
      "commit_id": "faafbcd5e7245586e3f002147b65cc6133bf9a6f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Approach NACK, it seems to me there's a way to properly test this (including failure cases):\r\n\r\n<details>\r\n<summary>Details</summary>\r\n\r\n```patch\r\nIndex: src/test/string_tests.cpp\r\n<+>UTF-8\r\n===================================================================\r\ndiff --git a/src/test/string_tests.cpp b/src/test/string_tests.cpp\r\nnew file mode 100644\r\n--- /dev/null(date 1725028151058)\r\n+++ b/src/test/string_tests.cpp(date 1725028151058)\r\n@@ -0,0 +1,52 @@\r\n+#include <boost/test/unit_test.hpp>\r\n+#include <index/base.h>\r\n+#include <test/util/setup_common.h>\r\n+#include <univalue.h>\r\n+#include <util/string.h>\r\n+\r\n+#include <string>\r\n+\r\n+using namespace util;\r\n+\r\n+BOOST_FIXTURE_TEST_SUITE(string_tests, BasicTestingSetup)\r\n+\r\n+BOOST_AUTO_TEST_CASE(CheckNumFormatSpecifiers_test)\r\n+{\r\n+    // No format specifiers\r\n+    ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"\");\r\n+    ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"%\");\r\n+    ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"%%\");\r\n+    ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"%%%\");\r\n+    ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"_%\");\r\n+    ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"_%%\");\r\n+    ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"%%_%\");\r\n+    ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"_%%%\");\r\n+\r\n+    // Single format specifier\r\n+    ConstevalFormatString<1>::CheckNumFormatSpecifiers(\"%d\");\r\n+    ConstevalFormatString<1>::CheckNumFormatSpecifiers(\"%_\");\r\n+    ConstevalFormatString<1>::CheckNumFormatSpecifiers(\"%_%\");\r\n+    ConstevalFormatString<1>::CheckNumFormatSpecifiers(\"%%%_\");\r\n+    ConstevalFormatString<1>::CheckNumFormatSpecifiers(\"%_%%\");\r\n+    ConstevalFormatString<1>::CheckNumFormatSpecifiers(\"%d%%\");\r\n+\r\n+    // Multiple format specifiers\r\n+    ConstevalFormatString<2>::CheckNumFormatSpecifiers(\"%d%s\");\r\n+    ConstevalFormatString<3>::CheckNumFormatSpecifiers(\"%d%s%f\");\r\n+    ConstevalFormatString<2>::CheckNumFormatSpecifiers(\"%%d%d%i\");\r\n+    ConstevalFormatString<3>::CheckNumFormatSpecifiers(\"%d%s%%d%i\");\r\n+\r\n+    // Positional arguments\r\n+    ConstevalFormatString<2>::CheckNumFormatSpecifiers(\"%1$d%2$s\");\r\n+    ConstevalFormatString<3>::CheckNumFormatSpecifiers(\"%3$d%1$s%2$f\");\r\n+    ConstevalFormatString<3>::CheckNumFormatSpecifiers(\"%3$d%%d%1$s%2$f\");\r\n+    ConstevalFormatString<2>::CheckNumFormatSpecifiers(\"%1$d%s\");\r\n+\r\n+    // Negative cases\r\n+    BOOST_CHECK_THROW(ConstevalFormatString<1>::CheckNumFormatSpecifiers(\"\"), std::runtime_error);\r\n+    BOOST_CHECK_THROW(ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"%d\"), std::runtime_error);\r\n+    BOOST_CHECK_THROW(ConstevalFormatString<2>::CheckNumFormatSpecifiers(\"%d\"), std::runtime_error);\r\n+    BOOST_CHECK_THROW(ConstevalFormatString<3>::CheckNumFormatSpecifiers(\"%1$d%2$s\"), std::runtime_error);\r\n+}\r\n+\r\n+BOOST_AUTO_TEST_SUITE_END()\r\n\\ No newline at end of file\r\nIndex: src/util/string.h\r\n<+>UTF-8\r\n===================================================================\r\ndiff --git a/src/util/string.h b/src/util/string.h\r\n--- a/src/util/string.h(revision 60c75975b55adcce015a857c529baafd65b58394)\r\n+++ b/src/util/string.h(date 1725027928051)\r\n@@ -22,20 +22,18 @@\r\n struct ConstevalFormatString {\r\n     const char* const fmt;\r\n     consteval ConstevalFormatString(const char* str) : fmt{str} { CheckNumFormatSpecifiers(fmt); }\r\n-    consteval static void CheckNumFormatSpecifiers(std::string_view str)\r\n+    constexpr static void CheckNumFormatSpecifiers(std::string_view str)\r\n     {\r\n-        int count{0};\r\n-        bool begin_f{false};\r\n+        int excess{num_params};\r\n+        bool in_format{false};\r\n         for (char c : str) {\r\n-            bool perc{c == '%'};\r\n-            if (begin_f) {\r\n-                count += !perc;\r\n-                begin_f = false;\r\n-                continue;\r\n+            if (c == '%') in_format = !in_format;\r\n+            else if (in_format) {\r\n+                --excess;\r\n+                in_format = false;\r\n             }\r\n-            if (perc) begin_f = true;\r\n         }\r\n-        if (num_params != count) throw \"Number of format specifiers and arguments must match\";\r\n+        if (excess) throw std::runtime_error(\"Format specifier count must match the argument count!\");\r\n     }\r\n };\r\n \r\nIndex: src/test/CMakeLists.txt\r\n<+>UTF-8\r\n===================================================================\r\ndiff --git a/src/test/CMakeLists.txt b/src/test/CMakeLists.txt\r\n--- a/src/test/CMakeLists.txt(revision 60c75975b55adcce015a857c529baafd65b58394)\r\n+++ b/src/test/CMakeLists.txt(date 1725025275931)\r\n@@ -119,6 +119,7 @@\r\n   sock_tests.cpp\r\n   span_tests.cpp\r\n   streams_tests.cpp\r\n+  string_tests.cpp\r\n   sync_tests.cpp\r\n   system_tests.cpp\r\n   timeoffsets_tests.cpp\r\nIndex: src/util/string.cpp\r\n<+>UTF-8\r\n===================================================================\r\ndiff --git a/src/util/string.cpp b/src/util/string.cpp\r\n--- a/src/util/string.cpp(revision 60c75975b55adcce015a857c529baafd65b58394)\r\n+++ b/src/util/string.cpp(date 1725025405333)\r\n@@ -9,24 +9,6 @@\r\n \r\n namespace util {\r\n \r\n-// Compile-time sanity checks\r\n-static_assert([] {\r\n-    ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"\");\r\n-    ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"%\");\r\n-    ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"%%\");\r\n-    ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"%%%\");\r\n-    ConstevalFormatString<1>::CheckNumFormatSpecifiers(\"%_\");\r\n-    ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"_%\");\r\n-    ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"%%_\");\r\n-    ConstevalFormatString<1>::CheckNumFormatSpecifiers(\"%_%\");\r\n-    ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"_%%\");\r\n-    ConstevalFormatString<1>::CheckNumFormatSpecifiers(\"%%%_\");\r\n-    ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"%%_%\");\r\n-    ConstevalFormatString<1>::CheckNumFormatSpecifiers(\"%_%%\");\r\n-    ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"_%%%\");\r\n-    return true; // All checks above compiled and passed\r\n-}());\r\n-\r\n void ReplaceAll(std::string& in_out, const std::string& search, const std::string& substitute)\r\n {\r\n     if (search.empty()) return;\r\n```\r\n\r\n</details>",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#pullrequestreview-2272243082",
      "submitted_at": "2024-08-30T14:35:31Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
    },
    {
      "event": "reviewed",
      "id": 2272584147,
      "node_id": "PRR_kwDOABII586HdOHT",
      "url": null,
      "actor": null,
      "commit_id": "faafbcd5e7245586e3f002147b65cc6133bf9a6f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#pullrequestreview-2272584147",
      "submitted_at": "2024-08-30T14:42:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
    },
    {
      "event": "reviewed",
      "id": 2273568357,
      "node_id": "PRR_kwDOABII586Hg-Zl",
      "url": null,
      "actor": null,
      "commit_id": "faafbcd5e7245586e3f002147b65cc6133bf9a6f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK faafbcd5e7245586e3f002147b65cc6133bf9a6f\r\n\r\n#### Specifier validation\r\n\r\n**run-lint-format-strings.py** does handle more complex format specifications through the [\"%(.*?)[aAcdeEfFgGinopsuxX]\" regexp](https://github.com/bitcoin/bitcoin/pull/30546/files#diff-bdbca6eab11048c0ffaa903b5ee733cec028f10051bf92cf9da966412669e9c9L253). (https://en.cppreference.com/w/cpp/io/c/fprintf for details on what should be supported).\r\n\r\nUnsupported conversion specifiers are printed as-is by `printf`:\r\n`printf(\"%1 %H %d %K %k\", 10); -> \"%1 %H 10 %K %k\"`\r\nShould easily be made into errors:\r\n`std::string_view{\"aAcdeEfFgGinopsuxX\"}.find(c) == std::string_view::npos`\r\n\r\n(Having something between the %-sign and a valid conversion specifier-letter should probably be an error if we don't handle it).\r\n\r\n#### (Type safety)\r\n\r\nIt would be really cool if we also checked for type safety à la [__attribute__ ((format (printf, ...)))](https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-format-function-attribute) but **run-lint-format-strings.py** primarily attempts to verify that the count of args matched. Better done as a follow-up PR if someone's up for it.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#pullrequestreview-2273568357",
      "submitted_at": "2024-08-30T22:15:15Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14146562172,
      "node_id": "HRFPE_lADOABII586RSaPbzwAAAANLM2h8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14146562172",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-05T12:46:33Z"
    },
    {
      "event": "reviewed",
      "id": 2282991991,
      "node_id": "PRR_kwDOABII586IE7F3",
      "url": null,
      "actor": null,
      "commit_id": "fa591a25298493abdb3d41d5c8756c913c3a92c0",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#pullrequestreview-2282991991",
      "submitted_at": "2024-09-05T13:12:43Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14150152584,
      "node_id": "HRFPE_lADOABII586RSaPbzwAAAANLajGI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14150152584",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-05T16:28:55Z"
    },
    {
      "event": "reviewed",
      "id": 2283882274,
      "node_id": "PRR_kwDOABII586IIUci",
      "url": null,
      "actor": null,
      "commit_id": "fa72ce66421d3f90a6794b3e54e56873ae81265f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, the remaining nits are non-blocking",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#pullrequestreview-2283882274",
      "submitted_at": "2024-09-05T19:12:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
    },
    {
      "event": "reviewed",
      "id": 2283896230,
      "node_id": "PRR_kwDOABII586IIX2m",
      "url": null,
      "actor": null,
      "commit_id": "fa72ce66421d3f90a6794b3e54e56873ae81265f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#pullrequestreview-2283896230",
      "submitted_at": "2024-09-05T19:15:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
    },
    {
      "event": "commented",
      "id": 2332633451,
      "node_id": "IC_kwDOABII586LCSlr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2332633451",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-05T21:08:48Z",
      "updated_at": "2024-09-05T21:08:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "#### Invalid chars check\r\n\r\nHere follows an implementation of the low bar of what I stated in https://github.com/bitcoin/bitcoin/pull/30546#pullrequestreview-2273568357. It's implemented on top of fa72ce66421d3f90a6794b3e54e56873ae81265f.\r\n\r\n<details>\r\n<summary>\r\n\r\n##### Diff\r\n\r\n</summary>\r\n\r\nI've confirmed that \"aAcdfeEfFgGinopsuxX\" matches what I linked to in cppreference and also the Python version being replaced.\r\n\r\n```diff\r\n\r\ndiff --git a/src/test/util_string_tests.cpp b/src/test/util_string_tests.cpp\r\nindex ecc28f5b96..9254f57b64 100644\r\n--- a/src/test/util_string_tests.cpp\r\n+++ b/src/test/util_string_tests.cpp\r\n@@ -16,11 +16,11 @@ BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\r\n     static_assert([] {\r\n         ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\r\n         ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\r\n-        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_\");\r\n-        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%_\");\r\n-        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"_%%\");\r\n-        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%_\");\r\n-        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_%%\");\r\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s\");\r\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%s\");\r\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"s%%\");\r\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%s\");\r\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s%%\");\r\n         return true; // All checks above compiled and passed\r\n     }());\r\n \r\n@@ -31,18 +31,25 @@ BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\r\n         bool operator()(const ErrType& str) const { return std::string_view{str} == \"Format specifier count must match the argument count!\"; }\r\n     };\r\n     BOOST_CHECK_EXCEPTION(ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"\"), ErrType, CheckThrowNumSpec{});\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%_\"), ErrType, CheckThrowNumSpec{});\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%_\"), ErrType, CheckThrowNumSpec{});\r\n+    BOOST_CHECK_EXCEPTION(ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%s\"), ErrType, CheckThrowNumSpec{});\r\n+    BOOST_CHECK_EXCEPTION(ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%s\"), ErrType, CheckThrowNumSpec{});\r\n \r\n     struct CheckThrowTerm {\r\n         bool operator()(const ErrType& str) const { return std::string_view{str} == \"Format specifier incorrectly terminated by end of string!\"; }\r\n     };\r\n     BOOST_CHECK_EXCEPTION(ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%\"), ErrType, CheckThrowTerm{});\r\n     BOOST_CHECK_EXCEPTION(ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%%\"), ErrType, CheckThrowTerm{});\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"_%\"), ErrType, CheckThrowTerm{});\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_%\"), ErrType, CheckThrowTerm{});\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%_%\"), ErrType, CheckThrowTerm{});\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"_%%%\"), ErrType, CheckThrowTerm{});\r\n+    BOOST_CHECK_EXCEPTION(ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"s%\"), ErrType, CheckThrowTerm{});\r\n+    BOOST_CHECK_EXCEPTION(ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s%\"), ErrType, CheckThrowTerm{});\r\n+    BOOST_CHECK_EXCEPTION(ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%s%\"), ErrType, CheckThrowTerm{});\r\n+    BOOST_CHECK_EXCEPTION(ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"s%%%\"), ErrType, CheckThrowTerm{});\r\n+\r\n+    struct CheckThrowInvalid {\r\n+        bool operator()(const ErrType& str) const { return std::string_view{str} == \"Invalid format specifier!\"; }\r\n+    };\r\n+    BOOST_CHECK_EXCEPTION(ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%2\"), ErrType, CheckThrowInvalid{});\r\n+    BOOST_CHECK_EXCEPTION(ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%$\"), ErrType, CheckThrowInvalid{});\r\n+    BOOST_CHECK_EXCEPTION(ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%z\"), ErrType, CheckThrowInvalid{});\r\n }\r\n \r\n BOOST_AUTO_TEST_SUITE_END()\r\ndiff --git a/src/util/string.h b/src/util/string.h\r\nindex e968de5575..5ae54e1217 100644\r\n--- a/src/util/string.h\r\n+++ b/src/util/string.h\r\n@@ -29,6 +29,9 @@ struct ConstevalFormatString {\r\n         for (char c : str) {\r\n             bool perc{c == '%'};\r\n             if (begin_f) {\r\n+                if (!perc && std::string_view{\"aAcdfeEfFgGinopsuxX\"}.find(c) == std::string_view::npos) {\r\n+                    throw \"Invalid format specifier!\";\r\n+                }\r\n                 count += !perc;\r\n                 begin_f = false;\r\n                 continue;\r\n```\r\n</details>",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#issuecomment-2332633451",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30546"
    },
    {
      "event": "commented",
      "id": 2333261303,
      "node_id": "IC_kwDOABII586LEr33",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2333261303",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-06T05:29:01Z",
      "updated_at": "2024-09-06T05:29:01Z",
      "author_association": "MEMBER",
      "body": "> throw \"Invalid format specifier!\";\r\n\r\n\r\nIn tinyformat there is no such thing, so I'll leave this as-is for now.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#issuecomment-2333261303",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30546"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14156814071,
      "node_id": "HRFPE_lADOABII586RSaPbzwAAAANLz9b3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14156814071",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-06T05:36:46Z"
    },
    {
      "event": "commented",
      "id": 2333269373,
      "node_id": "IC_kwDOABII586LEt19",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2333269373",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-06T05:37:44Z",
      "updated_at": "2024-09-06T05:37:44Z",
      "author_association": "MEMBER",
      "body": "Replied to all review comments and force pushed a small style-only change in the test.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#issuecomment-2333269373",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30546"
    },
    {
      "event": "reviewed",
      "id": 2285402162,
      "node_id": "PRR_kwDOABII586IOHgy",
      "url": null,
      "actor": null,
      "commit_id": "fa092749094aa483e3ce0243885ce2eb8ed22cbb",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "While I would still prefer some of our comments to be reconsidered, I’m also fine with merging the change as is.\r\nThanks for streamlining the developer experience with these small but useful checks!\r\n\r\nACK fa092749094aa483e3ce0243885ce2eb8ed22cbb",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#pullrequestreview-2285402162",
      "submitted_at": "2024-09-06T08:30:13Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
    },
    {
      "event": "review_requested",
      "id": 14158531622,
      "node_id": "RRE_lADOABII586RSaPbzwAAAANL6gwm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14158531622",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-06T08:30:17Z",
      "requested_reviewer": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 14158531735,
      "node_id": "RRE_lADOABII586RSaPbzwAAAANL6gyX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14158531735",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-06T08:30:18Z",
      "requested_reviewer": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "commented",
      "id": 2333558016,
      "node_id": "IC_kwDOABII586LF0UA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2333558016",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-06T08:47:03Z",
      "updated_at": "2024-09-06T08:47:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "> In tinyformat there is no such thing, so I'll leave this as-is for now.\r\n\r\nMy motivation is not to reach parity with *tinyformat*, it is to at least cover some of what the prior linter did:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/c3af4b1ec3fdb308404199ddd0df5170793a2c39/test/lint/run-lint-format-strings.py#L230-L253\r\n\r\nAn alternative to making it an error is to simply make invalid chars not count, which is closer to the old behavior. Would that be okay?\r\n\r\nIf you don't want to bring over at least some of that specific functionality, the PR summary should state why.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#issuecomment-2333558016",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30546"
    },
    {
      "event": "commented",
      "id": 2333643144,
      "node_id": "IC_kwDOABII586LGJGI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2333643144",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-06T09:25:55Z",
      "updated_at": "2024-09-06T09:25:55Z",
      "author_association": "MEMBER",
      "body": "Thanks for clarifying! I think not counting \"invalid\" ones would be wrong, because tinyformat treats them as valid. Silently not counting them is another bug in the Python code, because it will lead to a `tinyformat: Too many conversion specifiers in format string`. See https://godbolt.org/z/4ncfqvnjY\r\n\r\nI didn't really want to give a full list of all bugs in the Python code, but I've modified the PR summary to mention this bug as well. Let me know if this sounds acceptable.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#issuecomment-2333643144",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30546"
    },
    {
      "event": "commented",
      "id": 2333713098,
      "node_id": "IC_kwDOABII586LGaLK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2333713098",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-06T10:02:07Z",
      "updated_at": "2024-09-06T10:02:07Z",
      "author_association": "MEMBER",
      "body": "Actually, according to `git grep --extended-regexp '%[0-9]\\$' -- '*.cpp' '*.h'` positional args are used. Let me fix that up.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#issuecomment-2333713098",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30546"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14161742024,
      "node_id": "HRFPE_lADOABII586RSaPbzwAAAANMGwjI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14161742024",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-06T13:00:18Z"
    },
    {
      "event": "commented",
      "id": 2334000135,
      "node_id": "IC_kwDOABII586LHgQH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2334000135",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-06T13:00:38Z",
      "updated_at": "2024-09-06T13:14:01Z",
      "author_association": "MEMBER",
      "body": "Force pushed and updated the PR description to list the two additional bugs in the python code.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#issuecomment-2334000135",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30546"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14162046498,
      "node_id": "HRFPE_lADOABII586RSaPbzwAAAANMH64i",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14162046498",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-06T13:24:47Z"
    },
    {
      "event": "commented",
      "id": 2334050487,
      "node_id": "IC_kwDOABII586LHsi3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2334050487",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-06T13:24:52Z",
      "updated_at": "2024-09-06T13:24:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/29783243214</sub>\n\n<details><summary>Hints</summary>\n\nMake sure to run all tests locally, according to the documentation.\n\nThe failure may happen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#issuecomment-2334050487",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30546"
    },
    {
      "event": "labeled",
      "id": 14162047426,
      "node_id": "LE_lADOABII586RSaPbzwAAAANMH7HC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14162047426",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-06T13:24:52Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14162166967,
      "node_id": "HRFPE_lADOABII586RSaPbzwAAAANMIYS3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14162166967",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-06T13:31:53Z"
    },
    {
      "event": "unlabeled",
      "id": 14163227638,
      "node_id": "UNLE_lADOABII586RSaPbzwAAAANMMbP2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14163227638",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-06T14:38:11Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2286549302,
      "node_id": "PRR_kwDOABII586ISfk2",
      "url": null,
      "actor": null,
      "commit_id": "fa18f7cc9ac36ebe0fa8c381b1db76085812e95f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK fa18f7cc9ac36ebe0fa8c381b1db76085812e95f",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#pullrequestreview-2286549302",
      "submitted_at": "2024-09-06T15:23:40Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
    },
    {
      "event": "labeled",
      "id": 14165843570,
      "node_id": "LE_lADOABII586RSaPbzwAAAANMWZ5y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14165843570",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-06T18:38:54Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2290090683,
      "node_id": "PRR_kwDOABII586IgAK7",
      "url": null,
      "actor": null,
      "commit_id": "fa18f7cc9ac36ebe0fa8c381b1db76085812e95f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK. Doing this at compile time is much more helpful, besides the bugs being fixed.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#pullrequestreview-2290090683",
      "submitted_at": "2024-09-09T20:53:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14197365741,
      "node_id": "HRFPE_lADOABII586RSaPbzwAAAANOOpvt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14197365741",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-10T11:38:52Z"
    },
    {
      "event": "commented",
      "id": 2340474919,
      "node_id": "IC_kwDOABII586LgNAn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2340474919",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-10T11:57:22Z",
      "updated_at": "2024-09-10T11:57:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK faa32adbcf4c04f0a426eaba4a43b29a293de72b\r\n\r\n<details>\r\n<summary>Details</summary>\r\n\r\n* brace initialization in base.cpp\r\n* pos*t*itional typo fix\r\n* added ConstevalFormatString  overload\r\n\r\n</details>\r\n",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#issuecomment-2340474919",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30546"
    },
    {
      "event": "review_requested",
      "id": 14197607854,
      "node_id": "RRE_lADOABII586RSaPbzwAAAANOPk2u",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14197607854",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-10T11:57:27Z",
      "requested_reviewer": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "reviewed",
      "id": 2292205040,
      "node_id": "PRR_kwDOABII586IoEXw",
      "url": null,
      "actor": null,
      "commit_id": "faa32adbcf4c04f0a426eaba4a43b29a293de72b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#pullrequestreview-2292205040",
      "submitted_at": "2024-09-10T11:57:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
    },
    {
      "event": "reviewed",
      "id": 2292377447,
      "node_id": "PRR_kwDOABII586Ioudn",
      "url": null,
      "actor": null,
      "commit_id": "faa32adbcf4c04f0a426eaba4a43b29a293de72b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Reviewed faa32adbcf4c04f0a426eaba4a43b29a293de72b\r\n\r\n`git range-diff master fa72ce6 faa32ad`\r\n\r\n- Implemented positional args after me finally communicating clearly enough. \r\n- Added `ConstevalFormatString` overload directly into the `tinyformat` namespace to ease future adoption.\r\n- Uses more terse lambdas instead of explicit `struct`s for checking exceptions. :+1: \r\n\r\nDoes not implement support for '*', but not currently used anyway:\r\nhttps://github.com/bitcoin/bitcoin/blob/c3af4b1ec3fdb308404199ddd0df5170793a2c39/test/lint/run-lint-format-strings.py#L247\r\n\r\nNew concern: Does not support supplying an integer to specify width together with an optional `0` to change padding from spaces to zeroes. (See inline comment).",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#pullrequestreview-2292377447",
      "submitted_at": "2024-09-10T13:58:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
    },
    {
      "event": "review_requested",
      "id": 14199537778,
      "node_id": "RRE_lADOABII586RSaPbzwAAAANOW8By",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14199537778",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-10T13:58:52Z",
      "requested_reviewer": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "reviewed",
      "id": 2291996189,
      "node_id": "PRR_kwDOABII586InRYd",
      "url": null,
      "actor": null,
      "commit_id": "faa32adbcf4c04f0a426eaba4a43b29a293de72b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I'm still a strong Concept ACK on this, but I wonder if the incremental appoach currently taken is the best approach. We'll have to (I think quite likely non-trivially) update the logic based on flags, widths, precisions, conversion, ... actually used in the codebase, as seen with e.g. the [precision](https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1752314431) and [zero-padding](https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1752026952) comments?\r\n\r\nSo perhaps it'd be sensible to first create a draft PR/branch that forces `ConstevalFormatString` everywhere, informing our requirements and adding full unit test coverage, and then once we have a good overview, branch off the minimal subset of changes required to update `FatalErrorf` as to keep that first (i.e. this) PR merge-able?",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#pullrequestreview-2291996189",
      "submitted_at": "2024-09-10T16:59:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
    },
    {
      "event": "review_requested",
      "id": 14202346874,
      "node_id": "RRE_lADOABII586RSaPbzwAAAANOhp16",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14202346874",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-10T17:00:56Z",
      "requested_reviewer": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14203321184,
      "node_id": "HRFPE_lADOABII586RSaPbzwAAAANOlXtg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14203321184",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-10T18:10:47Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14213315655,
      "node_id": "HRFPE_lADOABII586RSaPbzwAAAANPLfxH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14213315655",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-11T10:03:36Z"
    },
    {
      "event": "reviewed",
      "id": 2296299754,
      "node_id": "PRR_kwDOABII586I3sDq",
      "url": null,
      "actor": null,
      "commit_id": "faca9a821963d629987f6c2a2f7d13b1bf01162c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK and code LGTM faca9a821963d629987f6c2a2f7d13b1bf01162c , left some suggestions that would be nice.\r\n\r\nPR description also needs a bit of updating for the 2 new commits re forbidden functions and covering `LogConnectFailure`. The 2 new commits don't seem necessary for this PR but they were trivial to review and relevant to the goal so I'm okay keeping them.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#pullrequestreview-2296299754",
      "submitted_at": "2024-09-11T11:49:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
    },
    {
      "event": "renamed",
      "id": 14215900104,
      "node_id": "RTE_lADOABII586RSaPbzwAAAANPVWvI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14215900104",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-11T13:03:07Z",
      "rename": {
        "from": "util: Use consteval checked format string in FatalErrorf",
        "to": "util: Use consteval checked format string in FatalErrorf, LogConnectFailure"
      }
    },
    {
      "event": "reviewed",
      "id": 2296466018,
      "node_id": "PRR_kwDOABII586I4Upi",
      "url": null,
      "actor": null,
      "commit_id": "faca9a821963d629987f6c2a2f7d13b1bf01162c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for your patience and for striving to eliminate developer frustration.\r\nI like the concept a lot, but have some preferences regarding parser intuitiveness, hope you'll consider my suggestions.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#pullrequestreview-2296466018",
      "submitted_at": "2024-09-11T13:32:08Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14216513716,
      "node_id": "HRFPE_lADOABII586RSaPbzwAAAANPXsi0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14216513716",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-11T13:40:25Z"
    },
    {
      "event": "reviewed",
      "id": 2297063726,
      "node_id": "PRR_kwDOABII586I6mku",
      "url": null,
      "actor": null,
      "commit_id": "fa7819bfadd29e41a1c9283828f7e32934d4fbd9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Reviewed fa7819bfadd29e41a1c9283828f7e32934d4fbd9\r\n\r\n`git range-diff master faa32ad fa7819b`\r\n\r\n- Removed validation of `aAcdfeEfFgGinopsuxX` as tinyformat does not implement it either - acceptable (Edit: parity with tinyformat is more important than parity with a custom linter for tinyformat).\r\n- Implemented support for width/padding-specification.\r\n- Now applies to `LogConnectFailure`.\r\n- Adds commit fafe6313cce2b97d86bd6f907ffe93c98cf9cb59 which deduplicates lints.\r\n\r\n#### fafe6313cce2b97d86bd6f907ffe93c98cf9cb59 - lint: Remove forbidden functions from lint-format-strings.py\r\n\r\nCould move this commit first since it is not dependent on the prior commits?",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#pullrequestreview-2297063726",
      "submitted_at": "2024-09-11T14:22:02Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGZhZTdiODNlYjU4ZDIyZWQ4Mzg3ODU2MTYwMzk5MTEzMTM3MmNkZDc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fae7b83eb58d22ed83878561603991131372cdd7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fae7b83eb58d22ed83878561603991131372cdd7",
      "tree": {
        "sha": "51eca17b4dfdb0f02e83fe2c0b20c89ca6d17ef2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/51eca17b4dfdb0f02e83fe2c0b20c89ca6d17ef2"
      },
      "verification": {
        "verified": false,
        "reason": "no_user",
        "payload": "tree 51eca17b4dfdb0f02e83fe2c0b20c89ca6d17ef2\nparent 2756797ecaf07b1a39645282e879bc70890e3f0b\nauthor MarcoFalke <*~=`'#}+{/-|&$^_@721217.xyz> 1725998123 +0200\ncommitter MarcoFalke <*~=`'#}+{/-|&$^_@721217.xyz> 1726066377 +0200\n\nlint: Remove forbidden functions from lint-format-strings.py\n\nGiven that all of them are forbidden by the\ntest/lint/lint-locale-dependence.py check, they can be removed.\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgqxY/aMPiuXoCFn6iAEyAhvUqFX\njanTudd31Jtt35ct0AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQB2dxOmaH+aiXJqryBXtWxVdi/j+3xrDcJRc5z7MP2R7GX52Tf+LNLiuNOXelAUN2C\nnc2K1jtGBLuERtl/Kp9wI=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2756797ecaf07b1a39645282e879bc70890e3f0b",
          "sha": "2756797ecaf07b1a39645282e879bc70890e3f0b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2756797ecaf07b1a39645282e879bc70890e3f0b"
        }
      ],
      "message": "lint: Remove forbidden functions from lint-format-strings.py\n\nGiven that all of them are forbidden by the\ntest/lint/lint-locale-dependence.py check, they can be removed.",
      "committer": {
        "name": "MarcoFalke",
        "email": "*~=`'#}+{/-|&$^_@721217.xyz",
        "date": "2024-09-11T14:52:57Z"
      },
      "author": {
        "name": "MarcoFalke",
        "email": "*~=`'#}+{/-|&$^_@721217.xyz",
        "date": "2024-09-10T19:55:23Z"
      },
      "sha": "fae7b83eb58d22ed83878561603991131372cdd7"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14217791727,
      "node_id": "HRFPE_lADOABII586RSaPbzwAAAANPckjv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14217791727",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-11T14:53:41Z"
    },
    {
      "event": "reviewed",
      "id": 2297572187,
      "node_id": "PRR_kwDOABII586I8itb",
      "url": null,
      "actor": null,
      "commit_id": "faa5a8e4480de69086796dba49b65ef73058f8d7",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK faa5a8e4480de69086796dba49b65ef73058f8d7\r\n\r\nI like this approach of implementing a loose compile time checker that avoids too much complexity by supporting a superset of tinyformat syntax. This approach is more flexible and should be easier to roll out than the opposite approach which would avoid complexity by only supporting a subset of tinyformat syntax.\r\n\r\nIn longer run though, I think just supporting a subset of tinyformat syntax would be preferable to provide more safety, and make the checking code easier to understand. @l0rinc seems to have some good ideas about this and be pretty eager to rewrite the checking function, so there should be opportunities to make future improvements after this is used more widely.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#pullrequestreview-2297572187",
      "submitted_at": "2024-09-11T16:03:56Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
    },
    {
      "event": "review_requested",
      "id": 14218917615,
      "node_id": "RRE_lADOABII586RSaPbzwAAAANPg3bv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14218917615",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-11T16:04:01Z",
      "requested_reviewer": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 14218917967,
      "node_id": "RRE_lADOABII586RSaPbzwAAAANPg3hP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14218917967",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-11T16:04:02Z",
      "requested_reviewer": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 14218918145,
      "node_id": "RRE_lADOABII586RSaPbzwAAAANPg3kB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14218918145",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-11T16:04:03Z",
      "requested_reviewer": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14219255761,
      "node_id": "HRFPE_lADOABII586RSaPbzwAAAANPiJ_R",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14219255761",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-11T16:28:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14219259245,
      "node_id": "HRFPE_lADOABII586RSaPbzwAAAANPiK1t",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14219259245",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-11T16:28:27Z"
    },
    {
      "event": "reviewed",
      "id": 2298007577,
      "node_id": "PRR_kwDOABII586I-NAZ",
      "url": null,
      "actor": null,
      "commit_id": "fa26462e95291652b4021d91b014655f678149e8",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK fa26462e95291652b4021d91b014655f678149e8. Just new tests and comments since last review",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#pullrequestreview-2298007577",
      "submitted_at": "2024-09-11T17:11:17Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
    },
    {
      "event": "reviewed",
      "id": 2298052654,
      "node_id": "PRR_kwDOABII586I-YAu",
      "url": null,
      "actor": null,
      "commit_id": "fa26462e95291652b4021d91b014655f678149e8",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Reviewed fa26462e95291652b4021d91b014655f678149e8\r\n\r\n`git range-diff master fa7819b fa26462`\r\n\r\n- Moved independent commit to the beginning, thanks!\r\n- Added some comments.\r\n\r\nI really like that this is being worked upon and want to help us find the best trade-offs in settling on a solution.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#pullrequestreview-2298052654",
      "submitted_at": "2024-09-11T20:54:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
    },
    {
      "event": "review_requested",
      "id": 14222824273,
      "node_id": "RRE_lADOABII586RSaPbzwAAAANPvxNR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14222824273",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-11T20:54:34Z",
      "requested_reviewer": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGZhN2U4ZDk0ZmZhNDdjNmYyYmVlYWFmY2EyZWY4YzViOGZjODJkNDU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa7e8d94ffa47c6f2beeaafca2ef8c5b8fc82d45",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fa7e8d94ffa47c6f2beeaafca2ef8c5b8fc82d45",
      "tree": {
        "sha": "a13d38c741c5a2bc3aa06c5bfec009f72d0f9083",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a13d38c741c5a2bc3aa06c5bfec009f72d0f9083"
      },
      "verification": {
        "verified": false,
        "reason": "no_user",
        "payload": "tree a13d38c741c5a2bc3aa06c5bfec009f72d0f9083\nparent fae7b83eb58d22ed83878561603991131372cdd7\nauthor MarcoFalke <*~=`'#}+{/-|&$^_@721217.xyz> 1722337097 +0200\ncommitter MarcoFalke <*~=`'#}+{/-|&$^_@721217.xyz> 1726128616 +0200\n\nutil: Add ConstevalFormatString\n\nThe type is used to wrap a format string once it has been compile-time\nchecked to contain the right number of format specifiers.\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgqxY/aMPiuXoCFn6iAEyAhvUqFX\njanTudd31Jtt35ct0AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQGwWynuGyY7oZxpAUyhAZ0KRjzGA8dFCtEYdC9RqGfoUmlROVwTki97oG9g8BpeFiO\nPOl+q6jKhIkt1+E3GdnQ0=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fae7b83eb58d22ed83878561603991131372cdd7",
          "sha": "fae7b83eb58d22ed83878561603991131372cdd7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fae7b83eb58d22ed83878561603991131372cdd7"
        }
      ],
      "message": "util: Add ConstevalFormatString\n\nThe type is used to wrap a format string once it has been compile-time\nchecked to contain the right number of format specifiers.",
      "committer": {
        "name": "MarcoFalke",
        "email": "*~=`'#}+{/-|&$^_@721217.xyz",
        "date": "2024-09-12T08:10:16Z"
      },
      "author": {
        "name": "MarcoFalke",
        "email": "*~=`'#}+{/-|&$^_@721217.xyz",
        "date": "2024-07-30T10:58:17Z"
      },
      "sha": "fa7e8d94ffa47c6f2beeaafca2ef8c5b8fc82d45"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGZhYzk1OTIxOGMwNzgwMjUyOTYwZDRhNDE1MDIzMGVmNTQ1MTY0YTM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fac959218c0780252960d4a4150230ef545164a3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fac959218c0780252960d4a4150230ef545164a3",
      "tree": {
        "sha": "3f41ac4a835d87678942e3fa69a76773eef7191b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3f41ac4a835d87678942e3fa69a76773eef7191b"
      },
      "verification": {
        "verified": false,
        "reason": "no_user",
        "payload": "tree 3f41ac4a835d87678942e3fa69a76773eef7191b\nparent fa7e8d94ffa47c6f2beeaafca2ef8c5b8fc82d45\nauthor MarcoFalke <*~=`'#}+{/-|&$^_@721217.xyz> 1722341874 +0200\ncommitter MarcoFalke <*~=`'#}+{/-|&$^_@721217.xyz> 1726128620 +0200\n\nutil: Use compile-time check for FatalErrorf\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgqxY/aMPiuXoCFn6iAEyAhvUqFX\njanTudd31Jtt35ct0AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQFTJQ2NrEvXKXZNj5ETRJrSpA2PlQ0U/kEZ3o6aW6AUULiGnQhDK5vn/jPkHbET9nu\nV1ny1Sp42x7fDAPfuMfQw=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa7e8d94ffa47c6f2beeaafca2ef8c5b8fc82d45",
          "sha": "fa7e8d94ffa47c6f2beeaafca2ef8c5b8fc82d45",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fa7e8d94ffa47c6f2beeaafca2ef8c5b8fc82d45"
        }
      ],
      "message": "util: Use compile-time check for FatalErrorf",
      "committer": {
        "name": "MarcoFalke",
        "email": "*~=`'#}+{/-|&$^_@721217.xyz",
        "date": "2024-09-12T08:10:20Z"
      },
      "author": {
        "name": "MarcoFalke",
        "email": "*~=`'#}+{/-|&$^_@721217.xyz",
        "date": "2024-07-30T12:17:54Z"
      },
      "sha": "fac959218c0780252960d4a4150230ef545164a3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGZhZThjMjVkMDdjZjAwM2RmMTQ3MDY5OWRmNGVmNDc1MDU1YmI4ODU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fae8c25d07cf003df1470699df4ef475055bb885",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fae8c25d07cf003df1470699df4ef475055bb885",
      "tree": {
        "sha": "335878e6790b389f20e105286bb98824065c4771",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/335878e6790b389f20e105286bb98824065c4771"
      },
      "verification": {
        "verified": false,
        "reason": "no_user",
        "payload": "tree 335878e6790b389f20e105286bb98824065c4771\nparent fac959218c0780252960d4a4150230ef545164a3\nauthor MarcoFalke <*~=`'#}+{/-|&$^_@721217.xyz> 1726000796 +0200\ncommitter MarcoFalke <*~=`'#}+{/-|&$^_@721217.xyz> 1726128634 +0200\n\nutil: Use compile-time check for LogConnectFailure\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgqxY/aMPiuXoCFn6iAEyAhvUqFX\njanTudd31Jtt35ct0AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQCUMlvNx24tOCf/c5HG0FdCDiIx+mXzcWL6kOVwQvqJ+EPiqNRboPtMIV3ybFLo2op\nJe5lp4zq3wAB1brk3/WQU=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fac959218c0780252960d4a4150230ef545164a3",
          "sha": "fac959218c0780252960d4a4150230ef545164a3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fac959218c0780252960d4a4150230ef545164a3"
        }
      ],
      "message": "util: Use compile-time check for LogConnectFailure",
      "committer": {
        "name": "MarcoFalke",
        "email": "*~=`'#}+{/-|&$^_@721217.xyz",
        "date": "2024-09-12T08:10:34Z"
      },
      "author": {
        "name": "MarcoFalke",
        "email": "*~=`'#}+{/-|&$^_@721217.xyz",
        "date": "2024-09-10T20:39:56Z"
      },
      "sha": "fae8c25d07cf003df1470699df4ef475055bb885"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14228510138,
      "node_id": "HRFPE_lADOABII586RSaPbzwAAAANQFdW6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14228510138",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-12T08:11:01Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1700290935",
      "pull_request_review_id": 2212994424,
      "id": 1700290935,
      "node_id": "PRRC_kwDOABII585lWGF3",
      "diff_hunk": "@@ -17,6 +17,28 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <int num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { CheckNumFormatSpecifiers(fmt); }\n+    consteval static void CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        int count{0};\n+        bool begin_f{false};\n+        for (char c : str) {\n+            bool perc{c == '%'};\n+            if (begin_f) {\n+                count += !perc;\n+                begin_f = false;\n+                continue;\n+            }\n+            if (perc) begin_f = true;\n+        }\n+        assert(num_params == count);",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 28,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fac123acec2bcd84d5daca3ed815f4e00c2222f0",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it would be good practice to add a comment directly behind these asserts in consteval functions explaining what the error is, so we get better error messages e.g.\r\n```\r\nassert(num_params == count); // The number of format arguments has to match the number of format specifiers in the string.\r\n```\r\n",
      "created_at": "2024-08-01T14:20:45Z",
      "updated_at": "2024-08-01T14:22:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1700290935",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1700290935"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1700405475",
      "pull_request_review_id": 2213183456,
      "id": 1700405475,
      "node_id": "PRRC_kwDOABII585lWiDj",
      "diff_hunk": "@@ -17,6 +17,28 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <int num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { CheckNumFormatSpecifiers(fmt); }\n+    consteval static void CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        int count{0};\n+        bool begin_f{false};\n+        for (char c : str) {\n+            bool perc{c == '%'};\n+            if (begin_f) {\n+                count += !perc;\n+                begin_f = false;\n+                continue;\n+            }\n+            if (perc) begin_f = true;\n+        }\n+        assert(num_params == count);",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 28,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fac123acec2bcd84d5daca3ed815f4e00c2222f0",
      "in_reply_to_id": 1700290935,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, done!",
      "created_at": "2024-08-01T15:35:25Z",
      "updated_at": "2024-08-01T15:35:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1700405475",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1700405475"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1701382923",
      "pull_request_review_id": 2214809373,
      "id": 1701382923,
      "node_id": "PRRC_kwDOABII585laQsL",
      "diff_hunk": "@@ -17,6 +17,28 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <int num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { CheckNumFormatSpecifiers(fmt); }\n+    consteval static void CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        int count{0};\n+        bool begin_f{false};\n+        for (char c : str) {\n+            bool perc{c == '%'};\n+            if (begin_f) {\n+                count += !perc;\n+                begin_f = false;\n+                continue;\n+            }\n+            if (perc) begin_f = true;\n+        }\n+        assert(num_params == count);",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 28,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fac123acec2bcd84d5daca3ed815f4e00c2222f0",
      "in_reply_to_id": 1700290935,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed to `throw`, to avoid having to add an include:\r\n\r\n```\r\nutil/string.h should add these lines:\r\n#include <assert.h>     // for assert\r\n```\r\n\r\nIt will look like:\r\n\r\n```\r\n./util/string.h:38:34: note: subexpression not valid in a constant expression\r\n   38 |         if (num_params != count) throw \"Number of format specifiers and arguments must match\";\r\n      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nutil/string.cpp:15:5: note: in call to 'CheckNumFormatSpecifiers({0, &\"\"[0]})'\r\n   15 |     ConstevalFormatString<1>::CheckNumFormatSpecifiers(\"\");\r\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n",
      "created_at": "2024-08-02T06:59:30Z",
      "updated_at": "2024-08-02T06:59:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1701382923",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1701382923"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718305178",
      "pull_request_review_id": 2240226231,
      "id": 1718305178,
      "node_id": "PRRC_kwDOABII585ma0Ga",
      "diff_hunk": "@@ -27,9 +27,9 @@ constexpr auto SYNC_LOG_INTERVAL{30s};\n constexpr auto SYNC_LOCATOR_WRITE_INTERVAL{30s};\n \n template <typename... Args>\n-void BaseIndex::FatalErrorf(const char* fmt, const Args&... args)\n+void BaseIndex::FatalErrorf(util::ConstevalFormatString<sizeof...(Args)> fmt, const Args&... args)",
      "path": "src/index/base.cpp",
      "position": 19,
      "original_position": 11,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa1f64d15e75137a6d4b469e7de6e1be0fda762a",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: Add include for `util/string.h`",
      "created_at": "2024-08-15T11:55:03Z",
      "updated_at": "2024-08-15T11:56:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1718305178",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718305178"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 31,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718333530",
      "pull_request_review_id": 2240270374,
      "id": 1718333530,
      "node_id": "PRRC_kwDOABII585ma7Ba",
      "diff_hunk": "@@ -27,9 +27,9 @@ constexpr auto SYNC_LOG_INTERVAL{30s};\n constexpr auto SYNC_LOCATOR_WRITE_INTERVAL{30s};\n \n template <typename... Args>\n-void BaseIndex::FatalErrorf(const char* fmt, const Args&... args)\n+void BaseIndex::FatalErrorf(util::ConstevalFormatString<sizeof...(Args)> fmt, const Args&... args)",
      "path": "src/index/base.cpp",
      "position": 19,
      "original_position": 11,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa1f64d15e75137a6d4b469e7de6e1be0fda762a",
      "in_reply_to_id": 1718305178,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sure, done",
      "created_at": "2024-08-15T12:27:40Z",
      "updated_at": "2024-08-15T12:27:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1718333530",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718333530"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 31,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1738611420",
      "pull_request_review_id": 2272243082,
      "id": 1738611420,
      "node_id": "PRRC_kwDOABII585noRrc",
      "diff_hunk": "@@ -27,9 +28,9 @@ constexpr auto SYNC_LOG_INTERVAL{30s};\n constexpr auto SYNC_LOCATOR_WRITE_INTERVAL{30s};\n \n template <typename... Args>\n-void BaseIndex::FatalErrorf(const char* fmt, const Args&... args)\n+void BaseIndex::FatalErrorf(util::ConstevalFormatString<sizeof...(Args)> fmt, const Args&... args)",
      "path": "src/index/base.cpp",
      "position": 19,
      "original_position": 19,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faafbcd5e7245586e3f002147b65cc6133bf9a6f",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Reproduced it locally by adding an invalid entry:\r\n```C++\r\nFatalErrorf(\"%s%s: Failed to rewind index %s to a previous chain tip\", __func__, GetName());\r\n```\r\nThe error looks like:\r\n> bitcoin/src/index/base.cpp:183:29: error: call to consteval function 'util::ConstevalFormatString<2>::ConstevalFormatString' is not a constant expression\r\n                FatalErrorf(\"%s%s: Failed to rewind index %s to a previous chain tip\", __func__, GetName());",
      "created_at": "2024-08-30T12:57:54Z",
      "updated_at": "2024-08-30T14:35:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1738611420",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1738611420"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 31,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1738629058",
      "pull_request_review_id": 2272243082,
      "id": 1738629058,
      "node_id": "PRRC_kwDOABII585noV_C",
      "diff_hunk": "@@ -27,9 +28,9 @@ constexpr auto SYNC_LOG_INTERVAL{30s};\n constexpr auto SYNC_LOCATOR_WRITE_INTERVAL{30s};\n \n template <typename... Args>\n-void BaseIndex::FatalErrorf(const char* fmt, const Args&... args)\n+void BaseIndex::FatalErrorf(util::ConstevalFormatString<sizeof...(Args)> fmt, const Args&... args)",
      "path": "src/index/base.cpp",
      "position": 19,
      "original_position": 19,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faafbcd5e7245586e3f002147b65cc6133bf9a6f",
      "in_reply_to_id": 1738611420,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also checked the valid values from the tinyformat docs:\r\n```C++\r\nFatalErrorf(\"%s%%: Failed to rewind index %s to a previous chain tip\", __func__, GetName());\r\nFatalErrorf(\"%s, %s %d, %.2d:%.2d\\n\", 0, 0, 0, 0, 0);\r\nFatalErrorf(\"%1$s, %3$d. %2$s, %4$d:%5$.2d\\n\", 0, 0, 0, 0, 0);\r\n```\r\n\r\nThey're not giving any errors 👍 ",
      "created_at": "2024-08-30T13:06:39Z",
      "updated_at": "2024-08-30T14:35:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1738629058",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1738629058"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 31,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1738767723",
      "pull_request_review_id": 2272243082,
      "id": 1738767723,
      "node_id": "PRRC_kwDOABII585no31r",
      "diff_hunk": "@@ -8,6 +8,25 @@\n #include <string>\n \n namespace util {\n+\n+// Compile-time sanity checks\n+static_assert([] {",
      "path": "src/util/string.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faafbcd5e7245586e3f002147b65cc6133bf9a6f",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This would pass if we forgot to add an exception (the point of this PR), so it would be preferable to test the negative cases as well. This is the reason for my NACK",
      "created_at": "2024-08-30T14:18:31Z",
      "updated_at": "2024-08-31T14:32:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1738767723",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1738767723"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1738772982",
      "pull_request_review_id": 2272243082,
      "id": 1738772982,
      "node_id": "PRRC_kwDOABII585no5H2",
      "diff_hunk": "@@ -17,6 +17,28 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <int num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { CheckNumFormatSpecifiers(fmt); }\n+    consteval static void CheckNumFormatSpecifiers(std::string_view str)",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 15,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faafbcd5e7245586e3f002147b65cc6133bf9a6f",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "making this `consteval` prohibits us from testing this properly - positives are awkward, and negatives are pretty much impossible.\r\nWe could change this to a `constexpr`, leaving the constructor as `consteval`, keeping the usage failures during runtime and be able to properly test it via positive and negative cases.",
      "created_at": "2024-08-30T14:21:40Z",
      "updated_at": "2024-09-05T12:55:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1738772982",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1738772982"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1738774021",
      "pull_request_review_id": 2272243082,
      "id": 1738774021,
      "node_id": "PRRC_kwDOABII585no5YF",
      "diff_hunk": "@@ -17,6 +17,28 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <int num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { CheckNumFormatSpecifiers(fmt); }\n+    consteval static void CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        int count{0};\n+        bool begin_f{false};\n+        for (char c : str) {\n+            bool perc{c == '%'};\n+            if (begin_f) {\n+                count += !perc;\n+                begin_f = false;\n+                continue;\n+            }\n+            if (perc) begin_f = true;\n+        }\n+        if (num_params != count) throw \"Number of format specifiers and arguments must match\";",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 28,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faafbcd5e7245586e3f002147b65cc6133bf9a6f",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We should be able to simplify this.\r\n\r\n-----\r\n\r\nSuggestion 1: we swap the state machine when encountering a `%`, otherwise inc the param count and step out of the format:\r\n```C++\r\nconstexpr static void CheckNumFormatSpecifiers(std::string_view str)\r\n{\r\n    int count{0};\r\n    bool in_format{false};\r\n    for (char c : str) {\r\n        if (c == '%') in_format = !in_format;\r\n        else if (in_format) {\r\n            ++count;\r\n            in_format = false;\r\n        }\r\n    }\r\n    if (num_params != count) throw std::runtime_error(\"Format specifier count must match the argument count!\");\r\n }\r\n```\r\n\r\n----\r\n\r\nSuggestion 2: count the excesses and throw when there is any:\r\n```C++\r\nconstexpr static void CheckNumFormatSpecifiers(std::string_view str)\r\n{\r\n    int excess{num_params};\r\n    bool in_format{false};\r\n    for (char c : str) {\r\n        if (c == '%') in_format = !in_format;\r\n        else if (in_format) {\r\n            --excess;\r\n            in_format = false;\r\n        }\r\n    }\r\n    if (excess) throw std::runtime_error(\"Format specifier count must match the argument count!\");\r\n }\r\n```",
      "created_at": "2024-08-30T14:22:14Z",
      "updated_at": "2024-09-05T19:16:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1738774021",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1738774021"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 27,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1738781118",
      "pull_request_review_id": 2272243082,
      "id": 1738781118,
      "node_id": "PRRC_kwDOABII585no7G-",
      "diff_hunk": "@@ -17,6 +17,28 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <int num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { CheckNumFormatSpecifiers(fmt); }\n+    consteval static void CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        int count{0};\n+        bool begin_f{false};\n+        for (char c : str) {\n+            bool perc{c == '%'};\n+            if (begin_f) {\n+                count += !perc;\n+                begin_f = false;\n+                continue;\n+            }\n+            if (perc) begin_f = true;\n+        }\n+        if (num_params != count) throw \"Number of format specifiers and arguments must match\";",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 28,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faafbcd5e7245586e3f002147b65cc6133bf9a6f",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "if we'd throw a `runtime_error`, testing would become slightly more reasonable:\r\n```C++\r\nstd::runtime_error(\"Format specifier count must match the argument count!\")\r\n```\r\notherwise it's:\r\n```C++\r\nBOOST_CHECK_THROW(ConstevalFormatString<1>::CheckNumFormatSpecifiers(\"\"), const char*);\r\n```\r\n\r\nnit: slight rewording",
      "created_at": "2024-08-30T14:26:13Z",
      "updated_at": "2024-08-31T14:33:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1738781118",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1738781118"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 27,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1738819032",
      "pull_request_review_id": 2272584147,
      "id": 1738819032,
      "node_id": "PRRC_kwDOABII585npEXY",
      "diff_hunk": "@@ -8,6 +8,25 @@\n #include <string>\n \n namespace util {\n+\n+// Compile-time sanity checks\n+static_assert([] {\n+    ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"\");\n+    ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"%\");\n+    ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"%%\");\n+    ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"%%%\");",
      "path": "src/util/string.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faafbcd5e7245586e3f002147b65cc6133bf9a6f",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "shouldn't we warn in this case as well, i.e. an unfinished `%`?\r\nThe tinyformat tests use two trailing `%` when it's a literal `%`:\r\nhttps://github.com/c42f/tinyformat/blob/master/tinyformat_test.cpp#L144",
      "created_at": "2024-08-30T14:42:28Z",
      "updated_at": "2024-08-30T14:45:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1738819032",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1738819032"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1739453939",
      "pull_request_review_id": 2273568357,
      "id": 1739453939,
      "node_id": "PRRC_kwDOABII585nrfXz",
      "diff_hunk": "@@ -17,6 +17,28 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <int num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { CheckNumFormatSpecifiers(fmt); }\n+    consteval static void CheckNumFormatSpecifiers(std::string_view str)",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 15,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faafbcd5e7245586e3f002147b65cc6133bf9a6f",
      "in_reply_to_id": 1738772982,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "One could potentially keep it `consteval` and have `CheckNumFormatSpecifiers` return a `bool` to provide for negatives, but the error messaging would suffer.",
      "created_at": "2024-08-30T22:10:53Z",
      "updated_at": "2024-08-30T22:15:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1739453939",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1739453939"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745462272",
      "pull_request_review_id": 2282925545,
      "id": 1745462272,
      "node_id": "PRRC_kwDOABII585oCaQA",
      "diff_hunk": "@@ -8,6 +8,25 @@\n #include <string>\n \n namespace util {\n+\n+// Compile-time sanity checks\n+static_assert([] {\n+    ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"\");\n+    ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"%\");\n+    ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"%%\");\n+    ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"%%%\");",
      "path": "src/util/string.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faafbcd5e7245586e3f002147b65cc6133bf9a6f",
      "in_reply_to_id": 1738819032,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe in a follow-up, given that the existing linter doesn't warn either?",
      "created_at": "2024-09-05T12:49:30Z",
      "updated_at": "2024-09-05T12:49:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1745462272",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745462272"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745464467",
      "pull_request_review_id": 2282928562,
      "id": 1745464467,
      "node_id": "PRRC_kwDOABII585oCayT",
      "diff_hunk": "@@ -8,6 +8,25 @@\n #include <string>\n \n namespace util {\n+\n+// Compile-time sanity checks\n+static_assert([] {",
      "path": "src/util/string.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faafbcd5e7245586e3f002147b65cc6133bf9a6f",
      "in_reply_to_id": 1738767723,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> NACK\r\n\r\nOk, moved the tests to a unit test file. I hope this is better.",
      "created_at": "2024-09-05T12:50:11Z",
      "updated_at": "2024-09-05T12:50:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1745464467",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745464467"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745472652",
      "pull_request_review_id": 2282944453,
      "id": 1745472652,
      "node_id": "PRRC_kwDOABII585oCcyM",
      "diff_hunk": "@@ -17,6 +17,28 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <int num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { CheckNumFormatSpecifiers(fmt); }\n+    consteval static void CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        int count{0};\n+        bool begin_f{false};\n+        for (char c : str) {\n+            bool perc{c == '%'};\n+            if (begin_f) {\n+                count += !perc;\n+                begin_f = false;\n+                continue;\n+            }\n+            if (perc) begin_f = true;\n+        }\n+        if (num_params != count) throw \"Number of format specifiers and arguments must match\";",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 28,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faafbcd5e7245586e3f002147b65cc6133bf9a6f",
      "in_reply_to_id": 1738781118,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> BOOST_CHECK_THROW\r\n\r\nI am not using `BOOST_CHECK_THROW`, so I'll leave this as-is for now.",
      "created_at": "2024-09-05T12:52:21Z",
      "updated_at": "2024-09-05T12:52:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1745472652",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745472652"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 27,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745475010",
      "pull_request_review_id": 2282948192,
      "id": 1745475010,
      "node_id": "PRRC_kwDOABII585oCdXC",
      "diff_hunk": "@@ -17,6 +17,28 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <int num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { CheckNumFormatSpecifiers(fmt); }\n+    consteval static void CheckNumFormatSpecifiers(std::string_view str)",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 15,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faafbcd5e7245586e3f002147b65cc6133bf9a6f",
      "in_reply_to_id": 1738772982,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> We could change this to a `constexpr`, leaving the constructor as `consteval`, keeping the usage failures during runtime and be able to properly test it via positive and negative cases.\r\n\r\nOk, done",
      "created_at": "2024-09-05T12:52:50Z",
      "updated_at": "2024-09-05T12:52:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1745475010",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745475010"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745500013",
      "pull_request_review_id": 2282991991,
      "id": 1745500013,
      "node_id": "PRRC_kwDOABII585oCjdt",
      "diff_hunk": "@@ -17,6 +17,28 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <int num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { CheckNumFormatSpecifiers(fmt); }\n+    consteval static void CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        int count{0};\n+        bool begin_f{false};\n+        for (char c : str) {\n+            bool perc{c == '%'};\n+            if (begin_f) {\n+                count += !perc;\n+                begin_f = false;\n+                continue;\n+            }\n+            if (perc) begin_f = true;\n+        }\n+        if (num_params != count) throw \"Number of format specifiers and arguments must match\";",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 28,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faafbcd5e7245586e3f002147b65cc6133bf9a6f",
      "in_reply_to_id": 1738781118,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "How come? Wouldn't that be a simpler way to check that we're throwing in this case (instead of the constant `err` and `err_types` which cannot even change)\r\n```C++\r\nBOOST_CHECK_THROW(ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"\"), const char*);\r\n```",
      "created_at": "2024-09-05T13:03:25Z",
      "updated_at": "2024-09-05T13:13:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1745500013",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745500013"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 27,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745505000",
      "pull_request_review_id": 2282991991,
      "id": 1745505000,
      "node_id": "PRRC_kwDOABII585oCkro",
      "diff_hunk": "@@ -0,0 +1,44 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n+{\n+    // Compile-time sanity checks\n+    static_assert([] {\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"_%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%_\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"_%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%_\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%_%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_%%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"_%%%\");\n+        return true; // All checks above compiled and passed\n+    }());",
      "path": "src/test/util_string_tests.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa09c161cace18429fadc2f3cf025c2ad38968a3",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "the errors are really ugly this way:\r\n> util_string_tests.cpp:16:19: error: static assertion expression is not an integral constant expression\r\n    static_assert([] {\r\n                  ^~~~\r\n\r\nWould there be any disadvantage in inlining them?\r\n```C++\r\nBOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\r\n{\r\n    ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\r\n    ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%\");\r\n...\r\n    ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_%%\");\r\n    ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"_%%%\");\r\n```",
      "created_at": "2024-09-05T13:06:39Z",
      "updated_at": "2024-09-05T13:12:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1745505000",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745505000"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 15,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745509491",
      "pull_request_review_id": 2282991991,
      "id": 1745509491,
      "node_id": "PRRC_kwDOABII585oClxz",
      "diff_hunk": "@@ -0,0 +1,44 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n+{\n+    // Compile-time sanity checks\n+    static_assert([] {\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"_%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%_\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"_%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%_\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%_%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_%%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"_%%%\");\n+        return true; // All checks above compiled and passed\n+    }());\n+\n+    // Negative checks at runtime\n+    constexpr auto err{\"Number of format specifiers and arguments must match\"};\n+    using err_type = decltype(err);\n+    struct CheckThrow {\n+        bool operator()(const err_type& str) const { return std::string_view{str} == err; }\n+    };\n+    BOOST_CHECK_EXCEPTION(ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"\"), err_type, CheckThrow{});\n+    BOOST_CHECK_EXCEPTION(ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%_\"), err_type, CheckThrow{});\n+    BOOST_CHECK_EXCEPTION(ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%_\"), err_type, CheckThrow{});",
      "path": "src/test/util_string_tests.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa09c161cace18429fadc2f3cf025c2ad38968a3",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "As mentioned in another comment, wouldn't this be simpler:\r\n```C++\r\n    BOOST_CHECK_THROW(ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"\"), const char*);\r\n    BOOST_CHECK_THROW(ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%_\"), const char*);\r\n    BOOST_CHECK_THROW(ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%_\"), const char*);\r\n```\r\n?",
      "created_at": "2024-09-05T13:09:34Z",
      "updated_at": "2024-09-05T13:12:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1745509491",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745509491"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 34,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745513285",
      "pull_request_review_id": 2282991991,
      "id": 1745513285,
      "node_id": "PRRC_kwDOABII585oCmtF",
      "diff_hunk": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2019-2022 The Bitcoin Core developers\n+// Copyright (c) 2019-present The Bitcoin Core developers",
      "path": "src/util/string.cpp",
      "position": null,
      "original_position": 2,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa591a25298493abdb3d41d5c8756c913c3a92c0",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "is this a leftover or just a header-symmetry?",
      "created_at": "2024-09-05T13:11:23Z",
      "updated_at": "2024-09-05T13:14:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1745513285",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745513285"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745637880",
      "pull_request_review_id": 2283219152,
      "id": 1745637880,
      "node_id": "PRRC_kwDOABII585oDFH4",
      "diff_hunk": "@@ -17,6 +17,28 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <int num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { CheckNumFormatSpecifiers(fmt); }\n+    consteval static void CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        int count{0};\n+        bool begin_f{false};\n+        for (char c : str) {\n+            bool perc{c == '%'};\n+            if (begin_f) {\n+                count += !perc;\n+                begin_f = false;\n+                continue;\n+            }\n+            if (perc) begin_f = true;\n+        }\n+        if (num_params != count) throw \"Number of format specifiers and arguments must match\";",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 28,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faafbcd5e7245586e3f002147b65cc6133bf9a6f",
      "in_reply_to_id": 1738781118,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In the future more (constant) errors will be added, so I think checking what type of error was thrown is useful and doesn't seem harmful either way in the tests?",
      "created_at": "2024-09-05T14:19:18Z",
      "updated_at": "2024-09-05T14:19:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1745637880",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745637880"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 27,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745687847",
      "pull_request_review_id": 2283299480,
      "id": 1745687847,
      "node_id": "PRRC_kwDOABII585oDRUn",
      "diff_hunk": "@@ -17,6 +17,28 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <int num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { CheckNumFormatSpecifiers(fmt); }\n+    consteval static void CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        int count{0};\n+        bool begin_f{false};\n+        for (char c : str) {\n+            bool perc{c == '%'};\n+            if (begin_f) {\n+                count += !perc;\n+                begin_f = false;\n+                continue;\n+            }\n+            if (perc) begin_f = true;\n+        }\n+        if (num_params != count) throw \"Number of format specifiers and arguments must match\";",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 28,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faafbcd5e7245586e3f002147b65cc6133bf9a6f",
      "in_reply_to_id": 1738781118,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Seems a bit excessive to me, could we maybe specialize the tests when those errors are actually added?\r\n\r\nEdit: the build failure seems related:\r\n\r\n<details>\r\n<summary>Details</summary>\r\n\r\n> D:\\a\\bitcoin\\bitcoin\\src\\test\\util_string_tests.cpp(37,86): error C2326: 'bool util_string_tests::ConstevalFormatString_NumSpec::test_method::CheckThrow::operator ()(util_string_tests::ConstevalFormatString_NumSpec::test_method::err_type &) const': function cannot access 'err' [D:\\a\\bitcoin\\bitcoin\\build\\src\\test\\test_bitcoin.vcxproj]\r\n\r\n</details>",
      "created_at": "2024-09-05T14:45:42Z",
      "updated_at": "2024-09-05T14:48:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1745687847",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745687847"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 27,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745716933",
      "pull_request_review_id": 2283346989,
      "id": 1745716933,
      "node_id": "PRRC_kwDOABII585oDYbF",
      "diff_hunk": "@@ -0,0 +1,44 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n+{\n+    // Compile-time sanity checks\n+    static_assert([] {\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"_%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%_\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"_%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%_\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%_%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_%%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"_%%%\");\n+        return true; // All checks above compiled and passed\n+    }());",
      "path": "src/test/util_string_tests.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa09c161cace18429fadc2f3cf025c2ad38968a3",
      "in_reply_to_id": 1745505000,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> ugly\r\n\r\nBoth clang and gcc print the subexpression as well as the violating call, and the error will look similar to a \"real\" error (except for being more verbose).\r\n\r\nA failure in your example would be simply a core dump, which is even worse, no?\r\n\r\nMoving the checks from being done at compile-time to be done at runtime means that possible errors will be caught later.",
      "created_at": "2024-09-05T15:01:42Z",
      "updated_at": "2024-09-05T15:01:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1745716933",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745716933"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 15,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745827757",
      "pull_request_review_id": 2283530888,
      "id": 1745827757,
      "node_id": "PRRC_kwDOABII585oDzet",
      "diff_hunk": "@@ -17,6 +17,28 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <int num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { CheckNumFormatSpecifiers(fmt); }\n+    consteval static void CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        int count{0};\n+        bool begin_f{false};\n+        for (char c : str) {\n+            bool perc{c == '%'};\n+            if (begin_f) {\n+                count += !perc;\n+                begin_f = false;\n+                continue;\n+            }\n+            if (perc) begin_f = true;\n+        }\n+        if (num_params != count) throw \"Number of format specifiers and arguments must match\";",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 28,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faafbcd5e7245586e3f002147b65cc6133bf9a6f",
      "in_reply_to_id": 1738774021,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think one of them may have been my initial version, but I changed it because I didn't like the `else` and assigning the bool from itself (inverted).\r\n\r\nSo I'll leave this as-is for now.",
      "created_at": "2024-09-05T16:13:08Z",
      "updated_at": "2024-09-05T16:13:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1745827757",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745827757"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 27,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745847260",
      "pull_request_review_id": 2283565540,
      "id": 1745847260,
      "node_id": "PRRC_kwDOABII585oD4Pc",
      "diff_hunk": "@@ -17,6 +17,28 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <int num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { CheckNumFormatSpecifiers(fmt); }\n+    consteval static void CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        int count{0};\n+        bool begin_f{false};\n+        for (char c : str) {\n+            bool perc{c == '%'};\n+            if (begin_f) {\n+                count += !perc;\n+                begin_f = false;\n+                continue;\n+            }\n+            if (perc) begin_f = true;\n+        }\n+        if (num_params != count) throw \"Number of format specifiers and arguments must match\";",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 28,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faafbcd5e7245586e3f002147b65cc6133bf9a6f",
      "in_reply_to_id": 1738781118,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> build failure\r\n\r\nHmm. Pushed something to work around the msvc build failure.",
      "created_at": "2024-09-05T16:28:11Z",
      "updated_at": "2024-09-05T16:28:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1745847260",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745847260"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 27,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745847386",
      "pull_request_review_id": 2283565720,
      "id": 1745847386,
      "node_id": "PRRC_kwDOABII585oD4Ra",
      "diff_hunk": "@@ -8,6 +8,25 @@\n #include <string>\n \n namespace util {\n+\n+// Compile-time sanity checks\n+static_assert([] {\n+    ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"\");\n+    ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"%\");\n+    ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"%%\");\n+    ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"%%%\");",
      "path": "src/util/string.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faafbcd5e7245586e3f002147b65cc6133bf9a6f",
      "in_reply_to_id": 1738819032,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Actually, done here, because it is just one line of code :sweat_smile: \r\n\r\n\r\n<!-- https://godbolt.org/z/xdv4Y8z64",
      "created_at": "2024-09-05T16:28:16Z",
      "updated_at": "2024-09-05T16:58:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1745847386",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745847386"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745847825",
      "pull_request_review_id": 2283566629,
      "id": 1745847825,
      "node_id": "PRRC_kwDOABII585oD4YR",
      "diff_hunk": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2019-2022 The Bitcoin Core developers\n+// Copyright (c) 2019-present The Bitcoin Core developers",
      "path": "src/util/string.cpp",
      "position": null,
      "original_position": 2,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa591a25298493abdb3d41d5c8756c913c3a92c0",
      "in_reply_to_id": 1745513285,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For symmetry, but removed in the last push.",
      "created_at": "2024-09-05T16:28:40Z",
      "updated_at": "2024-09-05T16:28:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1745847825",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745847825"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745986533",
      "pull_request_review_id": 2283798538,
      "id": 1745986533,
      "node_id": "PRRC_kwDOABII585oEaPl",
      "diff_hunk": "@@ -17,6 +17,28 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <int num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { CheckNumFormatSpecifiers(fmt); }\n+    consteval static void CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        int count{0};\n+        bool begin_f{false};\n+        for (char c : str) {\n+            bool perc{c == '%'};\n+            if (begin_f) {\n+                count += !perc;\n+                begin_f = false;\n+                continue;\n+            }\n+            if (perc) begin_f = true;\n+        }\n+        if (num_params != count) throw \"Number of format specifiers and arguments must match\";",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 28,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faafbcd5e7245586e3f002147b65cc6133bf9a6f",
      "in_reply_to_id": 1738774021,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "These alternatives work like a simple state machine, close to how we would look at the code: are we inside a format (i.e. started with %) or outside, switching states between the two. The second suggestion can even be used to determine is the number of params is more or if it's less than the desired one.",
      "created_at": "2024-09-05T18:26:50Z",
      "updated_at": "2024-09-05T18:26:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1745986533",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745986533"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 27,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745999190",
      "pull_request_review_id": 2283820620,
      "id": 1745999190,
      "node_id": "PRRC_kwDOABII585oEdVW",
      "diff_hunk": "@@ -0,0 +1,44 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n+{\n+    // Compile-time sanity checks\n+    static_assert([] {\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"_%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%_\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"_%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%_\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%_%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_%%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"_%%%\");\n+        return true; // All checks above compiled and passed\n+    }());",
      "path": "src/test/util_string_tests.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa09c161cace18429fadc2f3cf025c2ad38968a3",
      "in_reply_to_id": 1745505000,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "While the code is slightly simpler (-4 lines, indentation), the error message in case of failure is also simpler:\r\n\r\n<details>\r\n<summary>with static assert</summary>\r\n\r\n```\r\nbitcoin/src/test/util_string_tests.cpp:16:19: error: static assertion expression is not an integral constant expression\r\n    static_assert([] {\r\n                  ^~~~\r\nbitcoin/src/util/string.h:39:34: note: subexpression not valid in a constant expression\r\n        if (num_params != count) throw \"Format specifier count must match the argument count!\";\r\n                                 ^\r\nbitcoin/src/test/util_string_tests.cpp:22:9: note: in call to 'Detail_CheckNumFormatSpecifiers({&\"% % %_\"[0], 6})'\r\n        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"% % %_\");\r\n        ^\r\nbitcoin/src/test/util_string_tests.cpp:16:19: note: in call to '&[] {\r\n    ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\r\n    ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\r\n    ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_\");\r\n    ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%_\");\r\n    ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"_%%\");\r\n    ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"% % %_\");\r\n    ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_%%\");\r\n    return true;\r\n}->operator()()'\r\n    static_assert([] {\r\n                  ^\r\n1 error generated.\r\nmake[2]: *** [src/test/CMakeFiles/test_bitcoin.dir/util_string_tests.cpp.o] Error 1\r\nmake[1]: *** [src/test/CMakeFiles/test_bitcoin.dir/all] Error 2\r\nmake: *** [all] Error 2\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>without static assert</summary>\r\n\r\n```\r\nunknown location:0: fatal error: in \"util_string_tests/ConstevalFormatString_NumSpec\": C string: Format specifier count must match the argument count!\r\nsrc/test/util_string_tests.cpp:13: last checkpoint: \"ConstevalFormatString_NumSpec\" test entry\r\n\r\n*** 1 failure is detected in the test module \"Bitcoin Core Test Suite\"\r\n```\r\n\r\n</details>\r\n\r\n> Moving the checks from being done at compile-time to be done at runtime means that possible errors will be caught later\r\n\r\nIn reality these lines will rarely be modified - but probably read more often, so I'd go for the simpler code.\r\nIf you still insist that this is better, please resolve the comment.",
      "created_at": "2024-09-05T18:38:19Z",
      "updated_at": "2024-09-05T18:38:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1745999190",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745999190"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 15,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746036271",
      "pull_request_review_id": 2283882274,
      "id": 1746036271,
      "node_id": "PRRC_kwDOABII585oEmYv",
      "diff_hunk": "@@ -0,0 +1,48 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n+{\n+    // Compile-time sanity checks\n+    static_assert([] {\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%_\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"_%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%_\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_%%\");\n+        return true; // All checks above compiled and passed\n+    }());\n+\n+    // Negative checks at runtime\n+    using ErrType = const char*;\n+\n+    struct CheckThrowNumSpec {\n+        bool operator()(const ErrType& str) const { return std::string_view{str} == \"Format specifier count must match the argument count!\"; }\n+    };",
      "path": "src/test/util_string_tests.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa72ce66421d3f90a6794b3e54e56873ae81265f",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Instead of a functor I think we can simplify this by using a lambda.\r\nAnd we can also simplify the comparison by using string_literals, i.e.:\r\n```C++\r\n#include <string>\r\nusing namespace std::string_literals;\r\n...\r\n    auto check_throw_num_spec = [](ErrType str) { return str == \"Format specifier count must match the argument count!\"s; };\r\n    BOOST_CHECK_EXCEPTION(ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"\"), ErrType, check_throw_num_spec);\r\n...\r\n```",
      "created_at": "2024-09-05T19:11:06Z",
      "updated_at": "2024-09-05T19:13:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1746036271",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746036271"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 30,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746046371",
      "pull_request_review_id": 2283896230,
      "id": 1746046371,
      "node_id": "PRRC_kwDOABII585oEo2j",
      "diff_hunk": "@@ -17,6 +17,29 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <int num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        int count{0};",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 17,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa72ce66421d3f90a6794b3e54e56873ae81265f",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If you keep this version, `num_params` can likely be a `size_t` instead:\r\n```diff\r\ndiff --git a/src/util/string.h b/src/util/string.h\r\n--- a/src/util/string.h\t(revision fa72ce66421d3f90a6794b3e54e56873ae81265f)\r\n+++ b/src/util/string.h\t(date 1725561949080)\r\n@@ -18,13 +18,13 @@\r\n \r\n namespace util {\r\n /** Type to denote a format string that was checked at compile time */\r\n-template <int num_params>\r\n+template <size_t num_params>\r\n struct ConstevalFormatString {\r\n     const char* const fmt;\r\n     consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\r\n     constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\r\n     {\r\n-        int count{0};\r\n+        size_t count{0};\r\n         bool begin_f{false};\r\n         for (char c : str) {\r\n             bool perc{c == '%'};\r\n```",
      "created_at": "2024-09-05T19:15:11Z",
      "updated_at": "2024-09-05T19:15:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1746046371",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746046371"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 21,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746079204",
      "pull_request_review_id": 2283949696,
      "id": 1746079204,
      "node_id": "PRRC_kwDOABII585oEw3k",
      "diff_hunk": "@@ -17,6 +17,28 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <int num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { CheckNumFormatSpecifiers(fmt); }\n+    consteval static void CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        int count{0};\n+        bool begin_f{false};\n+        for (char c : str) {\n+            bool perc{c == '%'};\n+            if (begin_f) {\n+                count += !perc;\n+                begin_f = false;\n+                continue;\n+            }\n+            if (perc) begin_f = true;\n+        }\n+        if (num_params != count) throw \"Number of format specifiers and arguments must match\";",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 28,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faafbcd5e7245586e3f002147b65cc6133bf9a6f",
      "in_reply_to_id": 1738774021,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "By counting the excess we could give more fine-grained errors, e.g:\r\n```C++\r\nconstexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\r\n{\r\n    int excess{num_params};\r\n    bool in_format{false};\r\n    for (char c: str) {\r\n        if (c == '%') in_format = !in_format;\r\n        else if (in_format) {\r\n            --excess;\r\n            in_format = false;\r\n        }\r\n    }\r\n    if (in_format) throw \"Format specifier incorrectly terminated by end of string!\";\r\n    if (excess > 0) throw \"Too few format specifiers!\";\r\n    if (excess < 0) throw \"Too many format specifiers!\";\r\n}\r\n```\r\n\r\nand tests like:\r\n```C++\r\nauto check_too_many_specifiers = [](ErrType str) { return str == \"Too many format specifiers!\"s; };\r\nBOOST_CHECK_EXCEPTION(ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%_\"), ErrType, check_too_many_specifiers);\r\n\r\nauto check_too_few_specifiers = [](ErrType str) { return str == \"Too few format specifiers!\"s; };\r\nBOOST_CHECK_EXCEPTION(ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"\"), ErrType, check_too_few_specifiers);\r\nBOOST_CHECK_EXCEPTION(ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%_\"), ErrType, check_too_few_specifiers);\r\n```",
      "created_at": "2024-09-05T19:46:39Z",
      "updated_at": "2024-09-05T19:46:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1746079204",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746079204"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 27,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746523131",
      "pull_request_review_id": 2284812915,
      "id": 1746523131,
      "node_id": "PRRC_kwDOABII585oGdP7",
      "diff_hunk": "@@ -17,6 +17,28 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <int num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { CheckNumFormatSpecifiers(fmt); }\n+    consteval static void CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        int count{0};\n+        bool begin_f{false};\n+        for (char c : str) {\n+            bool perc{c == '%'};\n+            if (begin_f) {\n+                count += !perc;\n+                begin_f = false;\n+                continue;\n+            }\n+            if (perc) begin_f = true;\n+        }\n+        if (num_params != count) throw \"Number of format specifiers and arguments must match\";",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 28,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faafbcd5e7245586e3f002147b65cc6133bf9a6f",
      "in_reply_to_id": 1738774021,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> By counting the excess we could give more fine-grained errors, e.g:\r\n\r\nI don't think this is useful, because the error message will say that there are \"too few/many format specifiers\". However, the inverse might be true: \"Too many/few args\".\r\n\r\nSo I'll leave this as-is for now. I'd say the important thing is the error, not the exact wording of the error message.",
      "created_at": "2024-09-06T05:18:31Z",
      "updated_at": "2024-09-06T05:18:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1746523131",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746523131"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 27,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746523781",
      "pull_request_review_id": 2284815693,
      "id": 1746523781,
      "node_id": "PRRC_kwDOABII585oGdaF",
      "diff_hunk": "@@ -0,0 +1,44 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n+{\n+    // Compile-time sanity checks\n+    static_assert([] {\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"_%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%_\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"_%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%_\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%_%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_%%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"_%%%\");\n+        return true; // All checks above compiled and passed\n+    }());",
      "path": "src/test/util_string_tests.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa09c161cace18429fadc2f3cf025c2ad38968a3",
      "in_reply_to_id": 1745505000,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> If you still insist that this is better, please resolve the comment.\r\n\r\nYes, for now I'll resolve this. Thanks for the review!",
      "created_at": "2024-09-06T05:19:34Z",
      "updated_at": "2024-09-06T05:19:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1746523781",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746523781"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 15,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746525983",
      "pull_request_review_id": 2284825564,
      "id": 1746525983,
      "node_id": "PRRC_kwDOABII585oGd8f",
      "diff_hunk": "@@ -17,6 +17,29 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <int num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        int count{0};",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 17,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa72ce66421d3f90a6794b3e54e56873ae81265f",
      "in_reply_to_id": 1746046371,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Compilers can only walk so far in a consteval/constexpr context, so that it doesn't matter if there are 31 bits to count, or 64. \r\n\r\nI'll leave this as-is for now.",
      "created_at": "2024-09-06T05:23:17Z",
      "updated_at": "2024-09-06T05:23:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1746525983",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746525983"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 21,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746533300",
      "pull_request_review_id": 2284856762,
      "id": 1746533300,
      "node_id": "PRRC_kwDOABII585oGfu0",
      "diff_hunk": "@@ -0,0 +1,48 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n+{\n+    // Compile-time sanity checks\n+    static_assert([] {\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%_\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"_%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%_\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_%%\");\n+        return true; // All checks above compiled and passed\n+    }());\n+\n+    // Negative checks at runtime\n+    using ErrType = const char*;\n+\n+    struct CheckThrowNumSpec {\n+        bool operator()(const ErrType& str) const { return std::string_view{str} == \"Format specifier count must match the argument count!\"; }\n+    };",
      "path": "src/test/util_string_tests.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa72ce66421d3f90a6794b3e54e56873ae81265f",
      "in_reply_to_id": 1746036271,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, switched to lambdas! (Kept the string_view for now)",
      "created_at": "2024-09-06T05:35:36Z",
      "updated_at": "2024-09-06T05:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1746533300",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746533300"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 30,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746694411",
      "pull_request_review_id": 2285353916,
      "id": 1746694411,
      "node_id": "PRRC_kwDOABII585oHHEL",
      "diff_hunk": "@@ -17,6 +17,29 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <int num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        int count{0};",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 17,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa72ce66421d3f90a6794b3e54e56873ae81265f",
      "in_reply_to_id": 1746046371,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "it's not the counting, it's to document that this version doesn't have negatives (like the excess version does)",
      "created_at": "2024-09-06T08:16:21Z",
      "updated_at": "2024-09-06T08:16:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1746694411",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746694411"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 21,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746696954",
      "pull_request_review_id": 2285361270,
      "id": 1746696954,
      "node_id": "PRRC_kwDOABII585oHHr6",
      "diff_hunk": "@@ -0,0 +1,48 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n+{\n+    // Compile-time sanity checks\n+    static_assert([] {\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%_\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"_%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%_\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_%%\");\n+        return true; // All checks above compiled and passed\n+    }());\n+\n+    // Negative checks at runtime\n+    using ErrType = const char*;\n+\n+    struct CheckThrowNumSpec {\n+        bool operator()(const ErrType& str) const { return std::string_view{str} == \"Format specifier count must match the argument count!\"; }\n+    };",
      "path": "src/test/util_string_tests.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa72ce66421d3f90a6794b3e54e56873ae81265f",
      "in_reply_to_id": 1746036271,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What's the advantage of the `string_view` version?",
      "created_at": "2024-09-06T08:18:29Z",
      "updated_at": "2024-09-06T08:18:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1746696954",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746696954"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 30,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746708893",
      "pull_request_review_id": 2285393902,
      "id": 1746708893,
      "node_id": "PRRC_kwDOABII585oHKmd",
      "diff_hunk": "@@ -17,6 +17,28 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <int num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { CheckNumFormatSpecifiers(fmt); }\n+    consteval static void CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        int count{0};\n+        bool begin_f{false};\n+        for (char c : str) {\n+            bool perc{c == '%'};\n+            if (begin_f) {\n+                count += !perc;\n+                begin_f = false;\n+                continue;\n+            }\n+            if (perc) begin_f = true;\n+        }\n+        if (num_params != count) throw \"Number of format specifiers and arguments must match\";",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 28,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faafbcd5e7245586e3f002147b65cc6133bf9a6f",
      "in_reply_to_id": 1738774021,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> important thing is the error, not the exact wording of the error message\r\n\r\nYou have separate error for trailing `%`, why not have dedicated errors for when the format specifiers are fewer/more than the args?",
      "created_at": "2024-09-06T08:27:52Z",
      "updated_at": "2024-09-06T08:27:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1746708893",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746708893"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 27,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746712867",
      "pull_request_review_id": 2285404467,
      "id": 1746712867,
      "node_id": "PRRC_kwDOABII585oHLkj",
      "diff_hunk": "@@ -0,0 +1,48 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n+{\n+    // Compile-time sanity checks\n+    static_assert([] {\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%_\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"_%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%_\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_%%\");\n+        return true; // All checks above compiled and passed\n+    }());\n+\n+    // Negative checks at runtime\n+    using ErrType = const char*;\n+\n+    struct CheckThrowNumSpec {\n+        bool operator()(const ErrType& str) const { return std::string_view{str} == \"Format specifier count must match the argument count!\"; }\n+    };",
      "path": "src/test/util_string_tests.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa72ce66421d3f90a6794b3e54e56873ae81265f",
      "in_reply_to_id": 1746036271,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Just being a bit more explicit. A single `s` character may otherwise be missed or removed in the future, leading to a raw pointer compare, which would be wrong.\r\n\r\n",
      "created_at": "2024-09-06T08:30:54Z",
      "updated_at": "2024-09-06T08:30:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1746712867",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746712867"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 30,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746714182",
      "pull_request_review_id": 2285408191,
      "id": 1746714182,
      "node_id": "PRRC_kwDOABII585oHL5G",
      "diff_hunk": "@@ -17,6 +17,28 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <int num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { CheckNumFormatSpecifiers(fmt); }\n+    consteval static void CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        int count{0};\n+        bool begin_f{false};\n+        for (char c : str) {\n+            bool perc{c == '%'};\n+            if (begin_f) {\n+                count += !perc;\n+                begin_f = false;\n+                continue;\n+            }\n+            if (perc) begin_f = true;\n+        }\n+        if (num_params != count) throw \"Number of format specifiers and arguments must match\";",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 28,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faafbcd5e7245586e3f002147b65cc6133bf9a6f",
      "in_reply_to_id": 1738774021,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> why not\r\n\r\nThe reason is in my previous reply.",
      "created_at": "2024-09-06T08:31:57Z",
      "updated_at": "2024-09-06T08:31:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1746714182",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746714182"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 27,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746719104",
      "pull_request_review_id": 2285421946,
      "id": 1746719104,
      "node_id": "PRRC_kwDOABII585oHNGA",
      "diff_hunk": "@@ -17,6 +17,29 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <int num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        int count{0};",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 17,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa72ce66421d3f90a6794b3e54e56873ae81265f",
      "in_reply_to_id": 1746046371,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok, in that case I'd prefer `unsigned count{0};`. I may switch to that, if I have to re-touch.",
      "created_at": "2024-09-06T08:35:59Z",
      "updated_at": "2024-09-06T08:35:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1746719104",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746719104"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 21,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746720865",
      "pull_request_review_id": 2285426913,
      "id": 1746720865,
      "node_id": "PRRC_kwDOABII585oHNhh",
      "diff_hunk": "@@ -0,0 +1,48 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n+{\n+    // Compile-time sanity checks\n+    static_assert([] {\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%_\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"_%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%_\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_%%\");\n+        return true; // All checks above compiled and passed\n+    }());\n+\n+    // Negative checks at runtime\n+    using ErrType = const char*;\n+\n+    struct CheckThrowNumSpec {\n+        bool operator()(const ErrType& str) const { return std::string_view{str} == \"Format specifier count must match the argument count!\"; }\n+    };",
      "path": "src/test/util_string_tests.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa72ce66421d3f90a6794b3e54e56873ae81265f",
      "in_reply_to_id": 1746036271,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ok, that's fair, thanks.",
      "created_at": "2024-09-06T08:37:24Z",
      "updated_at": "2024-09-06T08:37:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1746720865",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746720865"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 30,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746725437",
      "pull_request_review_id": 2285439036,
      "id": 1746725437,
      "node_id": "PRRC_kwDOABII585oHOo9",
      "diff_hunk": "@@ -17,6 +17,28 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <int num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { CheckNumFormatSpecifiers(fmt); }\n+    consteval static void CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        int count{0};\n+        bool begin_f{false};\n+        for (char c : str) {\n+            bool perc{c == '%'};\n+            if (begin_f) {\n+                count += !perc;\n+                begin_f = false;\n+                continue;\n+            }\n+            if (perc) begin_f = true;\n+        }\n+        if (num_params != count) throw \"Number of format specifiers and arguments must match\";",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 28,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faafbcd5e7245586e3f002147b65cc6133bf9a6f",
      "in_reply_to_id": 1738774021,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I saw your previous response, I was quoting from it in mine. Anyway, you can resolve this comment.",
      "created_at": "2024-09-06T08:40:54Z",
      "updated_at": "2024-09-06T08:40:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1746725437",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746725437"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 27,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747300351",
      "pull_request_review_id": 2286549302,
      "id": 1747300351,
      "node_id": "PRRC_kwDOABII585oJa__",
      "diff_hunk": "@@ -17,6 +17,54 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_nor{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0}; // Max number in positional specifier, like %8$s\n+        bool begin_f{false};\n+        for (auto it{str.begin()}; it < str.end(); ++it) {\n+            bool perc{*it == '%'};\n+            if (begin_f) {\n+                // Almost any char is allowed by tinyformat to be used in a\n+                // format specifier, but a stricter check avoids bugs. For\n+                // instance, a strict check prevents consuming the newline\n+                // terminator in the format string \"%\\n\". Also, excluding '0'\n+                // avoids an out-of-range position error in tinyformat for the\n+                // format string \"%0$s\\n\".\n+                if (std::string_view{\"123456789aAcdfeEfFgGinopsuxX%\"}.find(*it) == std::string_view::npos) throw \"Invalid format specifier!\";\n+                auto it_num{it};\n+                unsigned maybe_num{0};\n+                while ('0' <= *it_num && *it_num <= '9') {\n+                    maybe_num *= 10;\n+                    maybe_num += *it_num - '0';\n+                    ++it_num;\n+                };\n+                if (it_num == it) {\n+                    // Non-positional specifier\n+                    count_nor += !perc;\n+                } else {\n+                    // Positional specifier\n+                    if (*it_num != '$' || std::string_view{\"aAcdfeEfFgGinopsuxX\"}.find(*(++it_num)) == std::string_view::npos) {",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 42,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa18f7cc9ac36ebe0fa8c381b1db76085812e95f",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "can we reduce the duplication between line 39 and this set of values?",
      "created_at": "2024-09-06T15:22:56Z",
      "updated_at": "2024-09-06T15:23:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1747300351",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747300351"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747342326",
      "pull_request_review_id": 2286610648,
      "id": 1747342326,
      "node_id": "PRRC_kwDOABII585oJlP2",
      "diff_hunk": "@@ -17,6 +17,54 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_nor{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0}; // Max number in positional specifier, like %8$s\n+        bool begin_f{false};\n+        for (auto it{str.begin()}; it < str.end(); ++it) {\n+            bool perc{*it == '%'};\n+            if (begin_f) {\n+                // Almost any char is allowed by tinyformat to be used in a\n+                // format specifier, but a stricter check avoids bugs. For\n+                // instance, a strict check prevents consuming the newline\n+                // terminator in the format string \"%\\n\". Also, excluding '0'\n+                // avoids an out-of-range position error in tinyformat for the\n+                // format string \"%0$s\\n\".\n+                if (std::string_view{\"123456789aAcdfeEfFgGinopsuxX%\"}.find(*it) == std::string_view::npos) throw \"Invalid format specifier!\";\n+                auto it_num{it};\n+                unsigned maybe_num{0};\n+                while ('0' <= *it_num && *it_num <= '9') {\n+                    maybe_num *= 10;\n+                    maybe_num += *it_num - '0';\n+                    ++it_num;\n+                };\n+                if (it_num == it) {\n+                    // Non-positional specifier\n+                    count_nor += !perc;\n+                } else {\n+                    // Positional specifier\n+                    if (*it_num != '$' || std::string_view{\"aAcdfeEfFgGinopsuxX\"}.find(*(++it_num)) == std::string_view::npos) {",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 42,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa18f7cc9ac36ebe0fa8c381b1db76085812e95f",
      "in_reply_to_id": 1747300351,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, but it will be more code and complexity, so I'll leave this as-is for now.",
      "created_at": "2024-09-06T15:46:30Z",
      "updated_at": "2024-09-06T15:46:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1747342326",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747342326"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747378139",
      "pull_request_review_id": 2286666176,
      "id": 1747378139,
      "node_id": "PRRC_kwDOABII585oJt_b",
      "diff_hunk": "@@ -17,6 +17,54 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_nor{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0}; // Max number in positional specifier, like %8$s\n+        bool begin_f{false};\n+        for (auto it{str.begin()}; it < str.end(); ++it) {\n+            bool perc{*it == '%'};\n+            if (begin_f) {\n+                // Almost any char is allowed by tinyformat to be used in a\n+                // format specifier, but a stricter check avoids bugs. For\n+                // instance, a strict check prevents consuming the newline\n+                // terminator in the format string \"%\\n\". Also, excluding '0'\n+                // avoids an out-of-range position error in tinyformat for the\n+                // format string \"%0$s\\n\".\n+                if (std::string_view{\"123456789aAcdfeEfFgGinopsuxX%\"}.find(*it) == std::string_view::npos) throw \"Invalid format specifier!\";\n+                auto it_num{it};\n+                unsigned maybe_num{0};\n+                while ('0' <= *it_num && *it_num <= '9') {\n+                    maybe_num *= 10;\n+                    maybe_num += *it_num - '0';\n+                    ++it_num;\n+                };\n+                if (it_num == it) {\n+                    // Non-positional specifier\n+                    count_nor += !perc;\n+                } else {\n+                    // Positional specifier\n+                    if (*it_num != '$' || std::string_view{\"aAcdfeEfFgGinopsuxX\"}.find(*(++it_num)) == std::string_view::npos) {",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 42,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa18f7cc9ac36ebe0fa8c381b1db76085812e95f",
      "in_reply_to_id": 1747300351,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agree, in C++23 we can just use `.contains` which would simplify this slightly",
      "created_at": "2024-09-06T16:08:21Z",
      "updated_at": "2024-09-06T16:08:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1747378139",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747378139"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1750371020",
      "pull_request_review_id": 2290090683,
      "id": 1750371020,
      "node_id": "PRRC_kwDOABII585oVIrM",
      "diff_hunk": "@@ -17,6 +17,54 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_nor{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0}; // Max number in positional specifier, like %8$s\n+        bool begin_f{false};\n+        for (auto it{str.begin()}; it < str.end(); ++it) {\n+            bool perc{*it == '%'};\n+            if (begin_f) {\n+                // Almost any char is allowed by tinyformat to be used in a\n+                // format specifier, but a stricter check avoids bugs. For\n+                // instance, a strict check prevents consuming the newline\n+                // terminator in the format string \"%\\n\". Also, excluding '0'\n+                // avoids an out-of-range position error in tinyformat for the\n+                // format string \"%0$s\\n\".\n+                if (std::string_view{\"123456789aAcdfeEfFgGinopsuxX%\"}.find(*it) == std::string_view::npos) throw \"Invalid format specifier!\";\n+                auto it_num{it};\n+                unsigned maybe_num{0};\n+                while ('0' <= *it_num && *it_num <= '9') {\n+                    maybe_num *= 10;\n+                    maybe_num += *it_num - '0';\n+                    ++it_num;\n+                };\n+                if (it_num == it) {\n+                    // Non-positional specifier\n+                    count_nor += !perc;\n+                } else {\n+                    // Positional specifier\n+                    if (*it_num != '$' || std::string_view{\"aAcdfeEfFgGinopsuxX\"}.find(*(++it_num)) == std::string_view::npos) {\n+                        throw \"Invalid positional format specifier!\";\n+                    }\n+                    count_pos = std::max(count_pos, maybe_num);\n+                }\n+                begin_f = false;\n+                continue;\n+            }\n+            if (perc) begin_f = true;\n+        }\n+        if (count_nor && count_pos) throw \"Format specifiers must be all postitional or all non-positional!\";",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 52,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa18f7cc9ac36ebe0fa8c381b1db76085812e95f",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "typo nit\r\n```suggestion\r\n        if (count_nor && count_pos) throw \"Format specifiers must be all positional or all non-positional!\";\r\n```",
      "created_at": "2024-09-09T14:24:07Z",
      "updated_at": "2024-09-09T20:53:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1750371020",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1750371020"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1750918625",
      "pull_request_review_id": 2290090683,
      "id": 1750918625,
      "node_id": "PRRC_kwDOABII585oXOXh",
      "diff_hunk": "@@ -27,9 +28,9 @@ constexpr auto SYNC_LOG_INTERVAL{30s};\n constexpr auto SYNC_LOCATOR_WRITE_INTERVAL{30s};\n \n template <typename... Args>\n-void BaseIndex::FatalErrorf(const char* fmt, const Args&... args)\n+void BaseIndex::FatalErrorf(util::ConstevalFormatString<sizeof...(Args)> fmt, const Args&... args)\n {\n-    auto message = tfm::format(fmt, args...);\n+    auto message{tfm::format(fmt.fmt, args...)};",
      "path": "src/index/base.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa18f7cc9ac36ebe0fa8c381b1db76085812e95f",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not necessary to be done in this PR because there's only one  callsite, but I suppose in the follow-up it'll make sense to add a `template <typename... Args> tfm::format(util::ConstevalFormatString<sizeof...(Args)> fmt, const Args&... args)` overload?",
      "created_at": "2024-09-09T20:52:13Z",
      "updated_at": "2024-09-09T20:53:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1750918625",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1750918625"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1751290182",
      "pull_request_review_id": 2291411320,
      "id": 1751290182,
      "node_id": "PRRC_kwDOABII585oYpFG",
      "diff_hunk": "@@ -27,9 +28,9 @@ constexpr auto SYNC_LOG_INTERVAL{30s};\n constexpr auto SYNC_LOCATOR_WRITE_INTERVAL{30s};\n \n template <typename... Args>\n-void BaseIndex::FatalErrorf(const char* fmt, const Args&... args)\n+void BaseIndex::FatalErrorf(util::ConstevalFormatString<sizeof...(Args)> fmt, const Args&... args)\n {\n-    auto message = tfm::format(fmt, args...);\n+    auto message{tfm::format(fmt.fmt, args...)};",
      "path": "src/index/base.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa18f7cc9ac36ebe0fa8c381b1db76085812e95f",
      "in_reply_to_id": 1750918625,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes. I am thinking that it could make sense to have a wrapper-header around tinyformat, so that each relevant tfm function can be called with `ConstevalFormatString`.",
      "created_at": "2024-09-10T05:44:20Z",
      "updated_at": "2024-09-10T05:44:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1751290182",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1751290182"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1751669308",
      "pull_request_review_id": 2291996189,
      "id": 1751669308,
      "node_id": "PRRC_kwDOABII585oaFo8",
      "diff_hunk": "@@ -17,6 +17,54 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_nor{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0}; // Max number in positional specifier, like %8$s\n+        bool begin_f{false};\n+        for (auto it{str.begin()}; it < str.end(); ++it) {\n+            bool perc{*it == '%'};\n+            if (begin_f) {\n+                // Almost any char is allowed by tinyformat to be used in a\n+                // format specifier, but a stricter check avoids bugs. For\n+                // instance, a strict check prevents consuming the newline\n+                // terminator in the format string \"%\\n\". Also, excluding '0'\n+                // avoids an out-of-range position error in tinyformat for the\n+                // format string \"%0$s\\n\".\n+                if (std::string_view{\"123456789aAcdfeEfFgGinopsuxX%\"}.find(*it) == std::string_view::npos) throw \"Invalid format specifier!\";\n+                auto it_num{it};\n+                unsigned maybe_num{0};\n+                while ('0' <= *it_num && *it_num <= '9') {\n+                    maybe_num *= 10;\n+                    maybe_num += *it_num - '0';\n+                    ++it_num;\n+                };\n+                if (it_num == it) {\n+                    // Non-positional specifier\n+                    count_nor += !perc;\n+                } else {\n+                    // Positional specifier\n+                    if (*it_num != '$' || std::string_view{\"aAcdfeEfFgGinopsuxX\"}.find(*(++it_num)) == std::string_view::npos) {\n+                        throw \"Invalid positional format specifier!\";\n+                    }\n+                    count_pos = std::max(count_pos, maybe_num);\n+                }\n+                begin_f = false;\n+                continue;\n+            }\n+            if (perc) begin_f = true;\n+        }\n+        if (count_nor && count_pos) throw \"Format specifiers must be all postitional or all non-positional!\";\n+        unsigned count{count_nor | count_pos};\n+        if (num_params != count) throw \"Format specifier count must match the argument count!\";",
      "path": "src/util/string.h",
      "position": 75,
      "original_position": 54,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa18f7cc9ac36ebe0fa8c381b1db76085812e95f",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think having a separate `CountNumberFormatSpecifiers` would have made testing this function a bit easier and with better error feedback, while simultaneously also reducing template instantiation. Neither are overwhelmingly strong arguments, but I don't think there are really any downsides either?\r\n\r\nE.g. sample, pretty rough (but passes tests) diff:\r\n\r\n<details>\r\n<summary>git diff on faa32adbcf</summary>\r\n\r\n```diff\r\ndiff --git a/src/test/util_string_tests.cpp b/src/test/util_string_tests.cpp\r\nindex 1e041f37c6..43b63751d9 100644\r\n--- a/src/test/util_string_tests.cpp\r\n+++ b/src/test/util_string_tests.cpp\r\n@@ -7,51 +7,58 @@\r\n #include <boost/test/unit_test.hpp>\r\n \r\n using namespace util;\r\n+using namespace util::detail;\r\n \r\n BOOST_AUTO_TEST_SUITE(util_string_tests)\r\n \r\n BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\r\n {\r\n-    // Compile-time sanity checks\r\n-    static_assert([] {\r\n-        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\r\n-        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\r\n-        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s\");\r\n-        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%s\");\r\n-        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"s%%\");\r\n-        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%s\");\r\n-        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s%%\");\r\n-        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\" 1$s\");\r\n-        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s\");\r\n-        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s%1$s\");\r\n-        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s\");\r\n-        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s 4$s %2$s\");\r\n-        ConstevalFormatString<129>::Detail_CheckNumFormatSpecifiers(\"%129$s 999$s %2$s\");\r\n-        return true; // All checks above compiled and passed\r\n-    }());\r\n+    BOOST_CHECK_EQUAL(0, CountNumFormatSpecifiers(\"\"));\r\n+    BOOST_CHECK_EQUAL(0, CountNumFormatSpecifiers(\"%%\"));\r\n+    BOOST_CHECK_EQUAL(1, CountNumFormatSpecifiers(\"%s\"));\r\n+    BOOST_CHECK_EQUAL(0, CountNumFormatSpecifiers(\"%%s\"));\r\n+    BOOST_CHECK_EQUAL(0, CountNumFormatSpecifiers(\"s%%\"));\r\n+    BOOST_CHECK_EQUAL(1, CountNumFormatSpecifiers(\"%%%s\"));\r\n+    BOOST_CHECK_EQUAL(1, CountNumFormatSpecifiers(\"%s%%\"));\r\n+    BOOST_CHECK_EQUAL(0, CountNumFormatSpecifiers(\" 1$s\"));\r\n+    BOOST_CHECK_EQUAL(1, CountNumFormatSpecifiers(\"%1$s\"));\r\n+    BOOST_CHECK_EQUAL(1, CountNumFormatSpecifiers(\"%1$s%1$s\"));\r\n+    BOOST_CHECK_EQUAL(2, CountNumFormatSpecifiers(\"%2$s\"));\r\n+    BOOST_CHECK_EQUAL(2, CountNumFormatSpecifiers(\"%2$s 4$s %2$s\"));\r\n+    BOOST_CHECK_EQUAL(129, CountNumFormatSpecifiers(\"%129$s 999$s %2$s\"));\r\n+\r\n+    // existing \"tests\" in run-lint-format-strings.py parse_string_content\r\n+    BOOST_CHECK_EQUAL(0, CountNumFormatSpecifiers(\"foo bar foo\"));\r\n+    BOOST_CHECK_EQUAL(1, CountNumFormatSpecifiers(\"foo %d bar foo\"));\r\n+    BOOST_CHECK_EQUAL(2, CountNumFormatSpecifiers(\"foo %d bar %i foo\"));\r\n+    BOOST_CHECK_EQUAL(2, CountNumFormatSpecifiers(\"foo %d bar %i foo %% foo\"));\r\n+    BOOST_CHECK_EQUAL(3, CountNumFormatSpecifiers(\"foo %d bar %i foo %% foo %d foo\"));\r\n+    // BOOST_CHECK_EQUAL(4, CountNumFormatSpecifiers(\"foo %d bar %i foo %% foo %*d foo\"));\r\n+    BOOST_CHECK_EQUAL(5, CountNumFormatSpecifiers(\"foo %5$d\"));\r\n+    // BOOST_CHECK_EQUAL(7, CountNumFormatSpecifiers(\"foo %5$*7$d\"));\r\n \r\n     // Negative checks at runtime\r\n     using ErrType = const char*;\r\n \r\n     auto check_mix{[](const ErrType& str) { return std::string_view{str} == \"Format specifiers must be all positional or all non-positional!\"; }};\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s%1$s\"), ErrType, check_mix);\r\n+    BOOST_CHECK_EXCEPTION(CountNumFormatSpecifiers(\"%s%1$s\"), ErrType, check_mix);\r\n \r\n     auto check_num_spec{[](const ErrType& str) { return std::string_view{str} == \"Format specifier count must match the argument count!\"; }};\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"\"), ErrType, check_num_spec);\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%s\"), ErrType, check_num_spec);\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%s\"), ErrType, check_num_spec);\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%1$s\"), ErrType, check_num_spec);\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%1$s\"), ErrType, check_num_spec);\r\n+    BOOST_CHECK_EXCEPTION(ConstevalFormatString<1>::CheckNumFormatSpecifiers(\"\"), ErrType, check_num_spec);\r\n+    BOOST_CHECK_EXCEPTION(ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"%s\"), ErrType, check_num_spec);\r\n+    BOOST_CHECK_EXCEPTION(ConstevalFormatString<2>::CheckNumFormatSpecifiers(\"%s\"), ErrType, check_num_spec);\r\n+    BOOST_CHECK_EXCEPTION(ConstevalFormatString<0>::CheckNumFormatSpecifiers(\"%1$s\"), ErrType, check_num_spec);\r\n+    BOOST_CHECK_EXCEPTION(ConstevalFormatString<2>::CheckNumFormatSpecifiers(\"%1$s\"), ErrType, check_num_spec);\r\n \r\n     auto check_special{[](const ErrType& str) { return std::string_view{str} == \"Invalid format specifier!\"; }};\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_\"), ErrType, check_special);\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%\\n\"), ErrType, check_special);\r\n+    BOOST_CHECK_EXCEPTION(CountNumFormatSpecifiers(\"%_\"), ErrType, check_special);\r\n+    BOOST_CHECK_EXCEPTION(CountNumFormatSpecifiers(\"%\\n\"), ErrType, check_special);\r\n     // The \"special\" check also excludes \"0\", which would be out-of-range in tinyformat\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%0$s\"), ErrType, check_special);\r\n+    BOOST_CHECK_EXCEPTION(CountNumFormatSpecifiers(\"%0$s\"), ErrType, check_special);\r\n \r\n     auto check_special_pos{[](const ErrType& str) { return std::string_view{str} == \"Invalid positional format specifier!\"; }};\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%1$\"), ErrType, check_special_pos);\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%1$_\"), ErrType, check_special_pos);\r\n+    BOOST_CHECK_EXCEPTION(CountNumFormatSpecifiers(\"%1$\"), ErrType, check_special_pos);\r\n+    BOOST_CHECK_EXCEPTION(CountNumFormatSpecifiers(\"%1$_\"), ErrType, check_special_pos);\r\n }\r\n \r\n BOOST_AUTO_TEST_SUITE_END()\r\ndiff --git a/src/test/util_tests.cpp b/src/test/util_tests.cpp\r\nindex 1624fb8b5b..ceb2e9ad54 100644\r\n--- a/src/test/util_tests.cpp\r\n+++ b/src/test/util_tests.cpp\r\n@@ -154,18 +154,18 @@ BOOST_AUTO_TEST_CASE(parse_hex)\r\n \r\n     // Basic test vector\r\n     std::vector<unsigned char> expected(std::begin(HEX_PARSE_OUTPUT), std::end(HEX_PARSE_OUTPUT));\r\n-    constexpr std::array<std::byte, 65> hex_literal_array{operator\"\"_hex<util::detail::Hex(HEX_PARSE_INPUT)>()};\r\n+    constexpr std::array<std::byte, 65> hex_literal_array{operator\"\"_hex<util::hex_literals::detail::Hex(HEX_PARSE_INPUT)>()};\r\n     auto hex_literal_span{MakeUCharSpan(hex_literal_array)};\r\n     BOOST_CHECK_EQUAL_COLLECTIONS(hex_literal_span.begin(), hex_literal_span.end(), expected.begin(), expected.end());\r\n \r\n-    const std::vector<std::byte> hex_literal_vector{operator\"\"_hex_v<util::detail::Hex(HEX_PARSE_INPUT)>()};\r\n+    const std::vector<std::byte> hex_literal_vector{operator\"\"_hex_v<util::hex_literals::detail::Hex(HEX_PARSE_INPUT)>()};\r\n     hex_literal_span = MakeUCharSpan(hex_literal_vector);\r\n     BOOST_CHECK_EQUAL_COLLECTIONS(hex_literal_span.begin(), hex_literal_span.end(), expected.begin(), expected.end());\r\n \r\n-    constexpr std::array<uint8_t, 65> hex_literal_array_uint8{operator\"\"_hex_u8<util::detail::Hex(HEX_PARSE_INPUT)>()};\r\n+    constexpr std::array<uint8_t, 65> hex_literal_array_uint8{operator\"\"_hex_u8<util::hex_literals::detail::Hex(HEX_PARSE_INPUT)>()};\r\n     BOOST_CHECK_EQUAL_COLLECTIONS(hex_literal_array_uint8.begin(), hex_literal_array_uint8.end(), expected.begin(), expected.end());\r\n \r\n-    result = operator\"\"_hex_v_u8<util::detail::Hex(HEX_PARSE_INPUT)>();\r\n+    result = operator\"\"_hex_v_u8<util::hex_literals::detail::Hex(HEX_PARSE_INPUT)>();\r\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\r\n \r\n     result = ParseHex(HEX_PARSE_INPUT);\r\ndiff --git a/src/util/strencodings.h b/src/util/strencodings.h\r\nindex 1543de03ab..0f145d91c5 100644\r\n--- a/src/util/strencodings.h\r\n+++ b/src/util/strencodings.h\r\n@@ -406,7 +406,7 @@ consteval uint8_t ConstevalHexDigit(const char c)\r\n  *   ParseHex() does is because heap-based containers cannot cross the compile-\r\n  *   time/runtime barrier.\r\n  */\r\n-inline namespace hex_literals {\r\n+namespace hex_literals {\r\n namespace detail {\r\n \r\n template <size_t N>\r\n@@ -427,16 +427,16 @@ struct Hex {\r\n \r\n } // namespace detail\r\n \r\n-template <util::detail::Hex str>\r\n+template <detail::Hex str>\r\n constexpr auto operator\"\"_hex() { return str.bytes; }\r\n \r\n-template <util::detail::Hex str>\r\n+template <detail::Hex str>\r\n constexpr auto operator\"\"_hex_u8() { return std::bit_cast<std::array<uint8_t, str.bytes.size()>>(str.bytes); }\r\n \r\n-template <util::detail::Hex str>\r\n+template <detail::Hex str>\r\n constexpr auto operator\"\"_hex_v() { return std::vector<std::byte>{str.bytes.begin(), str.bytes.end()}; }\r\n \r\n-template <util::detail::Hex str>\r\n+template <detail::Hex str>\r\n inline auto operator\"\"_hex_v_u8() { return std::vector<uint8_t>{UCharCast(str.bytes.data()), UCharCast(str.bytes.data() + str.bytes.size())}; }\r\n \r\n } // inline namespace hex_literals\r\ndiff --git a/src/util/string.h b/src/util/string.h\r\nindex 754972b4ed..418dd92ca3 100644\r\n--- a/src/util/string.h\r\n+++ b/src/util/string.h\r\n@@ -18,50 +18,57 @@\r\n #include <vector>\r\n \r\n namespace util {\r\n+namespace detail {\r\n+constexpr unsigned int CountNumFormatSpecifiers(std::string_view str) \r\n+{\r\n+    unsigned count_nor{0}; // Number of \"normal\" specifiers, like %s\r\n+    unsigned count_pos{0}; // Max number in positional specifier, like %8$s\r\n+    bool begin_f{false};\r\n+    for (auto it{str.begin()}; it < str.end(); ++it) {\r\n+        bool perc{*it == '%'};\r\n+        if (begin_f) {\r\n+            // Almost any char is allowed by tinyformat to be used in a\r\n+            // format specifier, but a stricter check avoids bugs. For\r\n+            // instance, a strict check prevents consuming the newline\r\n+            // terminator in the format string \"%\\n\". Also, excluding '0'\r\n+            // avoids an out-of-range position error in tinyformat for the\r\n+            // format string \"%0$s\\n\".\r\n+            if (std::string_view{\"123456789aAcdfeEfFgGinopsuxX%\"}.find(*it) == std::string_view::npos) throw \"Invalid format specifier!\";\r\n+            auto it_num{it};\r\n+            unsigned maybe_num{0};\r\n+            while ('0' <= *it_num && *it_num <= '9') {\r\n+                maybe_num *= 10;\r\n+                maybe_num += *it_num - '0';\r\n+                ++it_num;\r\n+            };\r\n+            if (it_num == it) {\r\n+                // Non-positional specifier\r\n+                count_nor += !perc;\r\n+            } else {\r\n+                // Positional specifier\r\n+                if (*it_num != '$' || std::string_view{\"aAcdfeEfFgGinopsuxX\"}.find(*(++it_num)) == std::string_view::npos) {\r\n+                    throw \"Invalid positional format specifier!\";\r\n+                }\r\n+                count_pos = std::max(count_pos, maybe_num);\r\n+            }\r\n+            begin_f = false;\r\n+            continue;\r\n+        }\r\n+        if (perc) begin_f = true;\r\n+    }\r\n+    if (count_nor && count_pos) throw \"Format specifiers must be all positional or all non-positional!\";\r\n+    unsigned count{count_nor | count_pos};\r\n+    return count;\r\n+}\r\n+} // namespace detail\r\n /** Type to denote a format string that was checked at compile time */\r\n template <unsigned num_params>\r\n struct ConstevalFormatString {\r\n     const char* const fmt;\r\n-    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\r\n-    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\r\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { CheckNumFormatSpecifiers(str); }\r\n+    constexpr static void CheckNumFormatSpecifiers(std::string_view str)\r\n     {\r\n-        unsigned count_nor{0}; // Number of \"normal\" specifiers, like %s\r\n-        unsigned count_pos{0}; // Max number in positional specifier, like %8$s\r\n-        bool begin_f{false};\r\n-        for (auto it{str.begin()}; it < str.end(); ++it) {\r\n-            bool perc{*it == '%'};\r\n-            if (begin_f) {\r\n-                // Almost any char is allowed by tinyformat to be used in a\r\n-                // format specifier, but a stricter check avoids bugs. For\r\n-                // instance, a strict check prevents consuming the newline\r\n-                // terminator in the format string \"%\\n\". Also, excluding '0'\r\n-                // avoids an out-of-range position error in tinyformat for the\r\n-                // format string \"%0$s\\n\".\r\n-                if (std::string_view{\"123456789aAcdfeEfFgGinopsuxX%\"}.find(*it) == std::string_view::npos) throw \"Invalid format specifier!\";\r\n-                auto it_num{it};\r\n-                unsigned maybe_num{0};\r\n-                while ('0' <= *it_num && *it_num <= '9') {\r\n-                    maybe_num *= 10;\r\n-                    maybe_num += *it_num - '0';\r\n-                    ++it_num;\r\n-                };\r\n-                if (it_num == it) {\r\n-                    // Non-positional specifier\r\n-                    count_nor += !perc;\r\n-                } else {\r\n-                    // Positional specifier\r\n-                    if (*it_num != '$' || std::string_view{\"aAcdfeEfFgGinopsuxX\"}.find(*(++it_num)) == std::string_view::npos) {\r\n-                        throw \"Invalid positional format specifier!\";\r\n-                    }\r\n-                    count_pos = std::max(count_pos, maybe_num);\r\n-                }\r\n-                begin_f = false;\r\n-                continue;\r\n-            }\r\n-            if (perc) begin_f = true;\r\n-        }\r\n-        if (count_nor && count_pos) throw \"Format specifiers must be all positional or all non-positional!\";\r\n-        unsigned count{count_nor | count_pos};\r\n+        unsigned count{detail::CountNumFormatSpecifiers(str)};\r\n         if (num_params != count) throw \"Format specifier count must match the argument count!\";\r\n     }\r\n };\r\n\r\n```\r\n</details>\r\n",
      "created_at": "2024-09-10T10:10:42Z",
      "updated_at": "2024-09-10T16:59:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1751669308",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1751669308"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 78,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1751671633",
      "pull_request_review_id": 2291996189,
      "id": 1751671633,
      "node_id": "PRRC_kwDOABII585oaGNR",
      "diff_hunk": "@@ -17,6 +17,54 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_nor{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0}; // Max number in positional specifier, like %8$s\n+        bool begin_f{false};\n+        for (auto it{str.begin()}; it < str.end(); ++it) {\n+            bool perc{*it == '%'};",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 21,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa18f7cc9ac36ebe0fa8c381b1db76085812e95f",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Note: it seems we are explicitly preventing `*` dynamic width/precision specifiers here, which was previously allowed (and checked) with the linter. That's not necessarily bad, it seems we're not currently using them (quick non-exhaustive search) and it can of course be added back in later, and we're throwing instead of silently ignoring it.",
      "created_at": "2024-09-10T10:12:23Z",
      "updated_at": "2024-09-10T16:59:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1751671633",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1751671633"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1751802942",
      "pull_request_review_id": 2292205040,
      "id": 1751802942,
      "node_id": "PRRC_kwDOABII585oamQ-",
      "diff_hunk": "@@ -173,4 +222,12 @@ template <typename T1, size_t PREFIX_LEN>\n }\n } // namespace util\n \n+namespace tinyformat {\n+template <typename... Args>\n+std::string format(util::ConstevalFormatString<sizeof...(Args)> fmt, const Args&... args)",
      "path": "src/util/string.h",
      "position": 88,
      "original_position": 75,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faa32adbcf4c04f0a426eaba4a43b29a293de72b",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "can we still have errors like [this](https://github.com/bitcoin/bitcoin/blob/master/src/logging.h#L253-L265) after this change? ",
      "created_at": "2024-09-10T11:51:49Z",
      "updated_at": "2024-09-10T11:57:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1751802942",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1751802942"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 240,
      "original_line": 240,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1751829061",
      "pull_request_review_id": 2292248515,
      "id": 1751829061,
      "node_id": "PRRC_kwDOABII585oaspF",
      "diff_hunk": "@@ -173,4 +222,12 @@ template <typename T1, size_t PREFIX_LEN>\n }\n } // namespace util\n \n+namespace tinyformat {\n+template <typename... Args>\n+std::string format(util::ConstevalFormatString<sizeof...(Args)> fmt, const Args&... args)",
      "path": "src/util/string.h",
      "position": 88,
      "original_position": 75,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faa32adbcf4c04f0a426eaba4a43b29a293de72b",
      "in_reply_to_id": 1751802942,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, in theory. The goal of this pull request is to make them less likely. According to the pull request description, \"This is the first step toward https://github.com/bitcoin/bitcoin/issues/30530 and a follow-up will apply the approach to the other places.\"",
      "created_at": "2024-09-10T12:10:55Z",
      "updated_at": "2024-09-10T12:12:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1751829061",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1751829061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 240,
      "original_line": 240,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1751830708",
      "pull_request_review_id": 2292251229,
      "id": 1751830708,
      "node_id": "PRRC_kwDOABII585oatC0",
      "diff_hunk": "@@ -27,9 +28,9 @@ constexpr auto SYNC_LOG_INTERVAL{30s};\n constexpr auto SYNC_LOCATOR_WRITE_INTERVAL{30s};\n \n template <typename... Args>\n-void BaseIndex::FatalErrorf(const char* fmt, const Args&... args)\n+void BaseIndex::FatalErrorf(util::ConstevalFormatString<sizeof...(Args)> fmt, const Args&... args)\n {\n-    auto message = tfm::format(fmt, args...);\n+    auto message{tfm::format(fmt.fmt, args...)};",
      "path": "src/index/base.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa18f7cc9ac36ebe0fa8c381b1db76085812e95f",
      "in_reply_to_id": 1750918625,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, adjusted in the last push.",
      "created_at": "2024-09-10T12:12:10Z",
      "updated_at": "2024-09-10T12:12:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1751830708",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1751830708"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1751830795",
      "pull_request_review_id": 2292251368,
      "id": 1751830795,
      "node_id": "PRRC_kwDOABII585oatEL",
      "diff_hunk": "@@ -17,6 +17,54 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_nor{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0}; // Max number in positional specifier, like %8$s\n+        bool begin_f{false};\n+        for (auto it{str.begin()}; it < str.end(); ++it) {\n+            bool perc{*it == '%'};\n+            if (begin_f) {\n+                // Almost any char is allowed by tinyformat to be used in a\n+                // format specifier, but a stricter check avoids bugs. For\n+                // instance, a strict check prevents consuming the newline\n+                // terminator in the format string \"%\\n\". Also, excluding '0'\n+                // avoids an out-of-range position error in tinyformat for the\n+                // format string \"%0$s\\n\".\n+                if (std::string_view{\"123456789aAcdfeEfFgGinopsuxX%\"}.find(*it) == std::string_view::npos) throw \"Invalid format specifier!\";\n+                auto it_num{it};\n+                unsigned maybe_num{0};\n+                while ('0' <= *it_num && *it_num <= '9') {\n+                    maybe_num *= 10;\n+                    maybe_num += *it_num - '0';\n+                    ++it_num;\n+                };\n+                if (it_num == it) {\n+                    // Non-positional specifier\n+                    count_nor += !perc;\n+                } else {\n+                    // Positional specifier\n+                    if (*it_num != '$' || std::string_view{\"aAcdfeEfFgGinopsuxX\"}.find(*(++it_num)) == std::string_view::npos) {\n+                        throw \"Invalid positional format specifier!\";\n+                    }\n+                    count_pos = std::max(count_pos, maybe_num);\n+                }\n+                begin_f = false;\n+                continue;\n+            }\n+            if (perc) begin_f = true;\n+        }\n+        if (count_nor && count_pos) throw \"Format specifiers must be all postitional or all non-positional!\";",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 52,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa18f7cc9ac36ebe0fa8c381b1db76085812e95f",
      "in_reply_to_id": 1750371020,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, adjusted in the last push.",
      "created_at": "2024-09-10T12:12:14Z",
      "updated_at": "2024-09-10T12:12:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1751830795",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1751830795"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1751893100",
      "pull_request_review_id": 2292377447,
      "id": 1751893100,
      "node_id": "PRRC_kwDOABII585oa8Rs",
      "diff_hunk": "@@ -17,6 +18,54 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_nor{0}; // Number of \"normal\" specifiers, like %s",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 25,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faa32adbcf4c04f0a426eaba4a43b29a293de72b",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit:\r\n```suggestion\r\n        unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\r\n```\r\n\"nor\" collides with the conjunction word \"nor\" and with https://en.wikipedia.org/wiki/Logical_NOR",
      "created_at": "2024-09-10T12:53:15Z",
      "updated_at": "2024-09-10T13:58:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1751893100",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1751893100"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1751902511",
      "pull_request_review_id": 2292377447,
      "id": 1751902511,
      "node_id": "PRRC_kwDOABII585oa-kv",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n+{\n+    // Compile-time sanity checks\n+    static_assert([] {\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"s%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s%%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\" 1$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s%1$s\");\n+        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s\");\n+        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s 4$s %2$s\");\n+        ConstevalFormatString<129>::Detail_CheckNumFormatSpecifiers(\"%129$s 999$s %2$s\");\n+        return true; // All checks above compiled and passed\n+    }());\n+\n+    // Negative checks at runtime\n+    using ErrType = const char*;\n+\n+    auto check_mix{[](const ErrType& str) { return std::string_view{str} == \"Format specifiers must be all positional or all non-positional!\"; }};",
      "path": "src/test/util_string_tests.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faa32adbcf4c04f0a426eaba4a43b29a293de72b",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Possibly slightly more optimal to encourage compile time length calculation for the string literal on the right. But maybe compilers already do the `const char[]` -> `string_view` conversion for the literal on the right at compile time to later match `string_view::operator==` at runtime.\r\n```suggestion\r\n    auto check_mix{[](const ErrType& str) { return str == std::string_view{\"Format specifiers must be all positional or all non-positional!\"}; }};\r\n```",
      "created_at": "2024-09-10T12:59:20Z",
      "updated_at": "2024-09-10T13:58:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1751902511",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1751902511"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1752026952",
      "pull_request_review_id": 2292377447,
      "id": 1752026952,
      "node_id": "PRRC_kwDOABII585obc9I",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n+{\n+    // Compile-time sanity checks\n+    static_assert([] {\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"s%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s%%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\" 1$s\");",
      "path": "src/test/util_string_tests.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faa32adbcf4c04f0a426eaba4a43b29a293de72b",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Tried adding\r\n```\r\n        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%02d\");\r\n```\r\nhere and it fails.\r\n\r\nRan\r\n`git grep -E '\"[^\"]*%[0-9]+[aAcdfeEfFgGinopsuxX*][^\"]*' src/ ':(exclude)src/leveldb' ':(exclude)src/secp256k1' ':(exclude)*.ts'`\r\nand it feels like a common enough case to want to have fixed width formatting (*optionally* `0`-padded). Examples:\r\n```\r\nsrc/netbase.cpp:            LogError(\"Proxy requested wrong authentication method %02x\\n\", pchRet1[1]);\r\nsrc/flatfile.cpp:                LogDebug(BCLog::VALIDATION, \"Pre-allocating up to position 0x%x in %s%05u.dat\\n\", new_size, m_prefix, pos.nFile);\r\nsrc/init.cpp:                LogPrintf(\" block index %15dms\\n\", Ticks<std::chrono::milliseconds>(SteadyClock::now() - load_block_index_start_time));\r\nsrc/node/blockstorage.cpp:            LogDebug(BCLog::BLOCKSTORAGE, \"Prune: %s deleted blk/rev (%05u)\\n\", __func__, *it);\r\nsrc/node/blockstorage.cpp:                          \"Failed to flush previous block file %05i (finalize=1, finalize_undo=%i) before opening new block file %05i\\n\",\r\nsrc/node/blockstorage.cpp:                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning, \"Failed to flush undo file %05i\\n\", _pos.nFile);\r\nsrc/node/blockstorage.cpp:            LogPrintf(\"Reindexing block file blk%05u.dat...\\n\", (unsigned int)nFile);\r\n```\r\n\r\nSorry for not realizing and raising this in an earlier review.",
      "created_at": "2024-09-10T13:53:36Z",
      "updated_at": "2024-09-10T13:58:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1752026952",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1752026952"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1752314431",
      "pull_request_review_id": 2291996189,
      "id": 1752314431,
      "node_id": "PRRC_kwDOABII585ocjI_",
      "diff_hunk": "@@ -17,6 +18,54 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_nor{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0}; // Max number in positional specifier, like %8$s\n+        bool begin_f{false};\n+        for (auto it{str.begin()}; it < str.end(); ++it) {\n+            bool perc{*it == '%'};\n+            if (begin_f) {\n+                // Almost any char is allowed by tinyformat to be used in a\n+                // format specifier, but a stricter check avoids bugs. For\n+                // instance, a strict check prevents consuming the newline\n+                // terminator in the format string \"%\\n\". Also, excluding '0'\n+                // avoids an out-of-range position error in tinyformat for the\n+                // format string \"%0$s\\n\".\n+                if (std::string_view{\"123456789aAcdfeEfFgGinopsuxX%\"}.find(*it) == std::string_view::npos) throw \"Invalid format specifier!\";",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 37,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faa32adbcf4c04f0a426eaba4a43b29a293de72b",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We do have quite a few use cases of `\\.[\\d+]f` precision that would throw here. No issue in the current code, but would like have to be overhauled in the next PR?",
      "created_at": "2024-09-10T16:48:09Z",
      "updated_at": "2024-09-10T16:59:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1752314431",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1752314431"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1752469255",
      "pull_request_review_id": 2293343673,
      "id": 1752469255,
      "node_id": "PRRC_kwDOABII585odI8H",
      "diff_hunk": "@@ -17,6 +18,54 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_nor{0}; // Number of \"normal\" specifiers, like %s",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 25,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faa32adbcf4c04f0a426eaba4a43b29a293de72b",
      "in_reply_to_id": 1751893100,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, fixed.",
      "created_at": "2024-09-10T18:13:10Z",
      "updated_at": "2024-09-10T18:13:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1752469255",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1752469255"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1752472646",
      "pull_request_review_id": 2293349409,
      "id": 1752472646,
      "node_id": "PRRC_kwDOABII585odJxG",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n+{\n+    // Compile-time sanity checks\n+    static_assert([] {\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"s%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s%%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\" 1$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s%1$s\");\n+        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s\");\n+        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s 4$s %2$s\");\n+        ConstevalFormatString<129>::Detail_CheckNumFormatSpecifiers(\"%129$s 999$s %2$s\");\n+        return true; // All checks above compiled and passed\n+    }());\n+\n+    // Negative checks at runtime\n+    using ErrType = const char*;\n+\n+    auto check_mix{[](const ErrType& str) { return std::string_view{str} == \"Format specifiers must be all positional or all non-positional!\"; }};",
      "path": "src/test/util_string_tests.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faa32adbcf4c04f0a426eaba4a43b29a293de72b",
      "in_reply_to_id": 1751902511,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, fixed.",
      "created_at": "2024-09-10T18:13:47Z",
      "updated_at": "2024-09-10T18:13:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1752472646",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1752472646"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1752491985",
      "pull_request_review_id": 2293384066,
      "id": 1752491985,
      "node_id": "PRRC_kwDOABII585odOfR",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n+{\n+    // Compile-time sanity checks\n+    static_assert([] {\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"s%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s%%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\" 1$s\");",
      "path": "src/test/util_string_tests.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faa32adbcf4c04f0a426eaba4a43b29a293de72b",
      "in_reply_to_id": 1752026952,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Sorry for not realizing and raising this in an earlier review.\r\n\r\nNo worries. It was my mistake for pushing the wrong diff.\r\n\r\n\r\nMy initial patch from July only had very basic checking and accepted any format specifier (like tinyformat). When I added support for positional args a few days ago (https://github.com/bitcoin/bitcoin/pull/30546#issuecomment-2333713098), I also tried to validate format specifiers itself.\r\n\r\nHowever, given that tinyformat accepts any specifier, and given that incorrect specifiers weren't an issue in the past, I think it is probably not worth it to spend time on fully re-implementing tinyformat parsing at compile time.\r\n\r\nThe main issue to detect is the count mismatch.\r\n\r\nSo I've reverted to the initial version from July, with only support added for positional args.\r\n\r\n",
      "created_at": "2024-09-10T18:22:11Z",
      "updated_at": "2024-09-10T18:22:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1752491985",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1752491985"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1752494409",
      "pull_request_review_id": 2293388213,
      "id": 1752494409,
      "node_id": "PRRC_kwDOABII585odPFJ",
      "diff_hunk": "@@ -17,6 +17,54 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_nor{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0}; // Max number in positional specifier, like %8$s\n+        bool begin_f{false};\n+        for (auto it{str.begin()}; it < str.end(); ++it) {\n+            bool perc{*it == '%'};\n+            if (begin_f) {\n+                // Almost any char is allowed by tinyformat to be used in a\n+                // format specifier, but a stricter check avoids bugs. For\n+                // instance, a strict check prevents consuming the newline\n+                // terminator in the format string \"%\\n\". Also, excluding '0'\n+                // avoids an out-of-range position error in tinyformat for the\n+                // format string \"%0$s\\n\".\n+                if (std::string_view{\"123456789aAcdfeEfFgGinopsuxX%\"}.find(*it) == std::string_view::npos) throw \"Invalid format specifier!\";\n+                auto it_num{it};\n+                unsigned maybe_num{0};\n+                while ('0' <= *it_num && *it_num <= '9') {\n+                    maybe_num *= 10;\n+                    maybe_num += *it_num - '0';\n+                    ++it_num;\n+                };\n+                if (it_num == it) {\n+                    // Non-positional specifier\n+                    count_nor += !perc;\n+                } else {\n+                    // Positional specifier\n+                    if (*it_num != '$' || std::string_view{\"aAcdfeEfFgGinopsuxX\"}.find(*(++it_num)) == std::string_view::npos) {\n+                        throw \"Invalid positional format specifier!\";\n+                    }\n+                    count_pos = std::max(count_pos, maybe_num);\n+                }\n+                begin_f = false;\n+                continue;\n+            }\n+            if (perc) begin_f = true;\n+        }\n+        if (count_nor && count_pos) throw \"Format specifiers must be all postitional or all non-positional!\";\n+        unsigned count{count_nor | count_pos};\n+        if (num_params != count) throw \"Format specifier count must match the argument count!\";",
      "path": "src/util/string.h",
      "position": 75,
      "original_position": 54,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa18f7cc9ac36ebe0fa8c381b1db76085812e95f",
      "in_reply_to_id": 1751669308,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for a diff that compiles. However, I think that making implementation details verbose to use is a feature to avoid developers from accidentally using them in real code. The verbosity in tests is a bit annoying, but seems acceptable to me.\r\n\r\nI'll leave this as-is for now.",
      "created_at": "2024-09-10T18:23:50Z",
      "updated_at": "2024-09-10T18:23:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1752494409",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1752494409"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 78,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1752497709",
      "pull_request_review_id": 2293393346,
      "id": 1752497709,
      "node_id": "PRRC_kwDOABII585odP4t",
      "diff_hunk": "@@ -17,6 +17,54 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_nor{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0}; // Max number in positional specifier, like %8$s\n+        bool begin_f{false};\n+        for (auto it{str.begin()}; it < str.end(); ++it) {\n+            bool perc{*it == '%'};",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 21,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa18f7cc9ac36ebe0fa8c381b1db76085812e95f",
      "in_reply_to_id": 1751671633,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks! I think it was wrong for me to try to re-implement tinyformat parsing at compile time and drop the features that aren't currently needed. I've reverted the pull to an earlier state, so that any tinyformat feature continues to work, just like before. (C.f. https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1752491985)\r\n\r\nEdit: `*` dynamic specifiers aren't implemented in the latest push, so they are still unsupported. Given that they are not used, I think it is fine if future code using them just falls back to a non-consteval format string. Maybe std::format will be available then, so they could also just use https://en.cppreference.com/w/cpp/utility/format/spec#Width_and_precision (which is consteval checked)",
      "created_at": "2024-09-10T18:26:11Z",
      "updated_at": "2024-09-10T20:09:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1752497709",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1752497709"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1752498486",
      "pull_request_review_id": 2293394596,
      "id": 1752498486,
      "node_id": "PRRC_kwDOABII585odQE2",
      "diff_hunk": "@@ -17,6 +18,54 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_nor{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0}; // Max number in positional specifier, like %8$s\n+        bool begin_f{false};\n+        for (auto it{str.begin()}; it < str.end(); ++it) {\n+            bool perc{*it == '%'};\n+            if (begin_f) {\n+                // Almost any char is allowed by tinyformat to be used in a\n+                // format specifier, but a stricter check avoids bugs. For\n+                // instance, a strict check prevents consuming the newline\n+                // terminator in the format string \"%\\n\". Also, excluding '0'\n+                // avoids an out-of-range position error in tinyformat for the\n+                // format string \"%0$s\\n\".\n+                if (std::string_view{\"123456789aAcdfeEfFgGinopsuxX%\"}.find(*it) == std::string_view::npos) throw \"Invalid format specifier!\";",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 37,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faa32adbcf4c04f0a426eaba4a43b29a293de72b",
      "in_reply_to_id": 1752314431,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, and good catch! I've reverted this, see https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1752491985",
      "created_at": "2024-09-10T18:26:50Z",
      "updated_at": "2024-09-10T18:26:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1752498486",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1752498486"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1752696755",
      "pull_request_review_id": 2293731481,
      "id": 1752696755,
      "node_id": "PRRC_kwDOABII585oeAez",
      "diff_hunk": "@@ -17,6 +17,54 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_nor{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0}; // Max number in positional specifier, like %8$s\n+        bool begin_f{false};\n+        for (auto it{str.begin()}; it < str.end(); ++it) {\n+            bool perc{*it == '%'};\n+            if (begin_f) {\n+                // Almost any char is allowed by tinyformat to be used in a\n+                // format specifier, but a stricter check avoids bugs. For\n+                // instance, a strict check prevents consuming the newline\n+                // terminator in the format string \"%\\n\". Also, excluding '0'\n+                // avoids an out-of-range position error in tinyformat for the\n+                // format string \"%0$s\\n\".\n+                if (std::string_view{\"123456789aAcdfeEfFgGinopsuxX%\"}.find(*it) == std::string_view::npos) throw \"Invalid format specifier!\";\n+                auto it_num{it};\n+                unsigned maybe_num{0};\n+                while ('0' <= *it_num && *it_num <= '9') {\n+                    maybe_num *= 10;\n+                    maybe_num += *it_num - '0';\n+                    ++it_num;\n+                };\n+                if (it_num == it) {\n+                    // Non-positional specifier\n+                    count_nor += !perc;\n+                } else {\n+                    // Positional specifier\n+                    if (*it_num != '$' || std::string_view{\"aAcdfeEfFgGinopsuxX\"}.find(*(++it_num)) == std::string_view::npos) {\n+                        throw \"Invalid positional format specifier!\";\n+                    }\n+                    count_pos = std::max(count_pos, maybe_num);\n+                }\n+                begin_f = false;\n+                continue;\n+            }\n+            if (perc) begin_f = true;\n+        }\n+        if (count_nor && count_pos) throw \"Format specifiers must be all postitional or all non-positional!\";\n+        unsigned count{count_nor | count_pos};\n+        if (num_params != count) throw \"Format specifier count must match the argument count!\";",
      "path": "src/util/string.h",
      "position": 75,
      "original_position": 54,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa18f7cc9ac36ebe0fa8c381b1db76085812e95f",
      "in_reply_to_id": 1751669308,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> making implementation details verbose to use is a feature to avoid developers from accidentally using them in real code\r\n\r\nI can't immediately see a use case for this function, but is there a reason we'd want to actively discourage this function from being used?  It seems harmless to me, but if there is, perhaps it'd be good to add a brief docstring to the function to describe that?\r\n\r\n> The verbosity in tests is a bit annoying, but seems acceptable to me.\r\n\r\nI agree.",
      "created_at": "2024-09-10T20:43:07Z",
      "updated_at": "2024-09-10T20:43:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1752696755",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1752696755"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 78,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1752698600",
      "pull_request_review_id": 2293734478,
      "id": 1752698600,
      "node_id": "PRRC_kwDOABII585oeA7o",
      "diff_hunk": "@@ -17,6 +17,54 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_nor{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0}; // Max number in positional specifier, like %8$s\n+        bool begin_f{false};\n+        for (auto it{str.begin()}; it < str.end(); ++it) {\n+            bool perc{*it == '%'};",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 21,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa18f7cc9ac36ebe0fa8c381b1db76085812e95f",
      "in_reply_to_id": 1751671633,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Given that they are not used,\r\n\r\nYup, I agree with the simplified approach. I didn't like the half/half of quite a of bit of complexity without being complete, this makes more sense.  Can be marked as resolved, thanks!",
      "created_at": "2024-09-10T20:44:56Z",
      "updated_at": "2024-09-10T20:44:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1752698600",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1752698600"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1753752267",
      "pull_request_review_id": 2296176455,
      "id": 1753752267,
      "node_id": "PRRC_kwDOABII585oiCLL",
      "diff_hunk": "@@ -17,6 +17,54 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_nor{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0}; // Max number in positional specifier, like %8$s\n+        bool begin_f{false};\n+        for (auto it{str.begin()}; it < str.end(); ++it) {\n+            bool perc{*it == '%'};\n+            if (begin_f) {\n+                // Almost any char is allowed by tinyformat to be used in a\n+                // format specifier, but a stricter check avoids bugs. For\n+                // instance, a strict check prevents consuming the newline\n+                // terminator in the format string \"%\\n\". Also, excluding '0'\n+                // avoids an out-of-range position error in tinyformat for the\n+                // format string \"%0$s\\n\".\n+                if (std::string_view{\"123456789aAcdfeEfFgGinopsuxX%\"}.find(*it) == std::string_view::npos) throw \"Invalid format specifier!\";\n+                auto it_num{it};\n+                unsigned maybe_num{0};\n+                while ('0' <= *it_num && *it_num <= '9') {\n+                    maybe_num *= 10;\n+                    maybe_num += *it_num - '0';\n+                    ++it_num;\n+                };\n+                if (it_num == it) {\n+                    // Non-positional specifier\n+                    count_nor += !perc;\n+                } else {\n+                    // Positional specifier\n+                    if (*it_num != '$' || std::string_view{\"aAcdfeEfFgGinopsuxX\"}.find(*(++it_num)) == std::string_view::npos) {\n+                        throw \"Invalid positional format specifier!\";\n+                    }\n+                    count_pos = std::max(count_pos, maybe_num);\n+                }\n+                begin_f = false;\n+                continue;\n+            }\n+            if (perc) begin_f = true;\n+        }\n+        if (count_nor && count_pos) throw \"Format specifiers must be all postitional or all non-positional!\";\n+        unsigned count{count_nor | count_pos};\n+        if (num_params != count) throw \"Format specifier count must match the argument count!\";",
      "path": "src/util/string.h",
      "position": 75,
      "original_position": 54,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa18f7cc9ac36ebe0fa8c381b1db76085812e95f",
      "in_reply_to_id": 1751669308,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> is there a reason we'd want to actively discourage this function from being used?\r\n\r\nMostly just to avoid someone from using the function over `sizeof...(Args)`, which would render everything pointless, because calculating the same value at compile time is obviously going to always pass (modulo parsing errors)",
      "created_at": "2024-09-11T09:19:18Z",
      "updated_at": "2024-09-11T09:19:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1753752267",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1753752267"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 78,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1753929285",
      "pull_request_review_id": 2296299754,
      "id": 1753929285,
      "node_id": "PRRC_kwDOABII585oitZF",
      "diff_hunk": "@@ -0,0 +1,66 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n+{\n+    // Compile-time sanity checks\n+    static_assert([] {\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"s%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s%%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\" 1$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s%1$s\");\n+        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s\");\n+        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s 4$s %2$s\");\n+        ConstevalFormatString<129>::Detail_CheckNumFormatSpecifiers(\"%129$s 999$s %2$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%02d\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%+2s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%+2s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%.6i\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%5.2f\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%#x\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%*c\");",
      "path": "src/test/util_string_tests.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faca9a821963d629987f6c2a2f7d13b1bf01162c",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this test should have a comment that the current behaviour is because our counting implementation is incorrect, not because it's desired behaviour. Otherwise this could be confusing to developers improving it in the future.\r\n\r\nOr even better, add a separate group (within the same static_assert) of tests with behaviour we know would be an improvement, but is not currently implemented:\r\n\r\n```cpp\r\n        // The current implementation ignores `*` dynamic width/precision\r\n        // arguments to minimize code complexity, but this behaviour does\r\n        // not need to be preserved.\r\n        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%*c\");\r\n        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$*3$d\");\r\n        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%.*f\");\r\n```",
      "created_at": "2024-09-11T10:14:48Z",
      "updated_at": "2024-09-11T11:50:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1753929285",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1753929285"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1753962403",
      "pull_request_review_id": 2296299754,
      "id": 1753962403,
      "node_id": "PRRC_kwDOABII585oi1ej",
      "diff_hunk": "@@ -17,6 +18,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n+        for (auto it{str.begin()}; it < str.end();) {\n+            if (*it != '%') {\n+                ++it;\n+                continue;\n+            }\n+\n+            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            if (*it == '%') {\n+                // %%\n+                ++it;\n+                continue;\n+            }\n+\n+            // Test for positional specifier, like %8$\n+            auto it_num{it};\n+            unsigned maybe_num{0};\n+            while ('0' <= *it_num && *it_num <= '9') {\n+                maybe_num *= 10;\n+                maybe_num += *it_num - '0';\n+                ++it_num;\n+            };\n+\n+            if (*it_num == '$') {\n+                // Positional specifier\n+                if (maybe_num == 0) throw \"Positional format specifier must indicate at least 1\";\n+                count_pos = std::max(count_pos, maybe_num);\n+                it = it_num;",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 53,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faca9a821963d629987f6c2a2f7d13b1bf01162c",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think we need the extra `it_num` here, just seems to add code and iterations?\r\n```suggestion\r\n            unsigned maybe_num{0};\r\n            while ('0' <= *it && *it <= '9') {\r\n                maybe_num *= 10;\r\n                maybe_num += *it - '0';\r\n                ++it;\r\n            };\r\n\r\n            if (*it == '$') {\r\n                // Positional specifier\r\n                if (maybe_num == 0) throw \"Positional format specifier must indicate at least 1\";\r\n                count_pos = std::max(count_pos, maybe_num);\r\n```",
      "created_at": "2024-09-11T10:25:58Z",
      "updated_at": "2024-09-11T11:49:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1753962403",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1753962403"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 44,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1753972269",
      "pull_request_review_id": 2296299754,
      "id": 1753972269,
      "node_id": "PRRC_kwDOABII585oi34t",
      "diff_hunk": "@@ -17,6 +18,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n+        for (auto it{str.begin()}; it < str.end();) {\n+            if (*it != '%') {\n+                ++it;\n+                continue;\n+            }\n+\n+            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            if (*it == '%') {\n+                // %%\n+                ++it;\n+                continue;\n+            }\n+\n+            // Test for positional specifier, like %8$",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 40,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faca9a821963d629987f6c2a2f7d13b1bf01162c",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This comment is a bit misleading, numbers can also be used for flags and width, e.g. `%02d`.",
      "created_at": "2024-09-11T10:29:03Z",
      "updated_at": "2024-09-11T11:49:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1753972269",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1753972269"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1753990981",
      "pull_request_review_id": 2296299754,
      "id": 1753990981,
      "node_id": "PRRC_kwDOABII585oi8dF",
      "diff_hunk": "@@ -17,6 +18,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n+        for (auto it{str.begin()}; it < str.end();) {\n+            if (*it != '%') {\n+                ++it;\n+                continue;\n+            }\n+\n+            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            if (*it == '%') {\n+                // %%\n+                ++it;\n+                continue;\n+            }\n+\n+            // Test for positional specifier, like %8$\n+            auto it_num{it};\n+            unsigned maybe_num{0};\n+            while ('0' <= *it_num && *it_num <= '9') {\n+                maybe_num *= 10;\n+                maybe_num += *it_num - '0';\n+                ++it_num;\n+            };\n+\n+            if (*it_num == '$') {\n+                // Positional specifier\n+                if (maybe_num == 0) throw \"Positional format specifier must indicate at least 1\";",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 51,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faca9a821963d629987f6c2a2f7d13b1bf01162c",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "phrasing nit\r\n```suggestion\r\n                if (maybe_num == 0) throw \"Positional format specifier must have position of at least 1\";\r\n```",
      "created_at": "2024-09-11T10:35:22Z",
      "updated_at": "2024-09-11T11:49:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1753990981",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1753990981"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754015054",
      "pull_request_review_id": 2296299754,
      "id": 1754015054,
      "node_id": "PRRC_kwDOABII585ojCVO",
      "diff_hunk": "@@ -16,25 +16,15 @@\n import sys\n \n FUNCTION_NAMES_AND_NUMBER_OF_LEADING_ARGUMENTS = [\n-    'FatalErrorf,0',\n-    'fprintf,1',\n     'tfm::format,1',  # Assuming tfm::::format(std::ostream&, ...\n-    'LogConnectFailure,1',\n     'LogError,0',\n     'LogWarning,0',\n     'LogInfo,0',\n     'LogDebug,1',\n     'LogTrace,1',\n     'LogPrintf,0',\n     'LogPrintLevel,2',\n-    'printf,0',\n-    'snprintf,2',\n-    'sprintf,1',\n     'strprintf,0',\n-    'vfprintf,1',\n-    'vprintf,1',\n-    'vsnprintf,1',",
      "path": "test/lint/lint-format-strings.py",
      "position": 21,
      "original_position": 21,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faca9a821963d629987f6c2a2f7d13b1bf01162c",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think we can then also remove the `(\"src/dbwrapper.cpp\", \"vsnprintf(p, limit - p, format, backup_ap)\"),` in `FALSE_POSITIVES` in `run-lint-format-strings.py`?",
      "created_at": "2024-09-11T10:43:11Z",
      "updated_at": "2024-09-11T11:49:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754015054",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754015054"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 36,
      "original_line": 36,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754093556",
      "pull_request_review_id": 2296466018,
      "id": 1754093556,
      "node_id": "PRRC_kwDOABII585ojVf0",
      "diff_hunk": "@@ -17,6 +17,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n+        for (auto it{str.begin()}; it < str.end();) {\n+            if (*it != '%') {\n+                ++it;\n+                continue;\n+            }\n+\n+            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            if (*it == '%') {\n+                // %%\n+                ++it;\n+                continue;\n+            }\n+\n+            // Test for positional specifier, like %8$",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 32,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa53bb4de8c46af944dc9d34bfef839ba20959bd",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: personally I'd prohibit positional args completely, they can be super confusing - and shouldn't be needed, we can extract variables before the call if we need to repeat them, instead of the reader being forced to count parameters... but if we do, I have a few suggestions",
      "created_at": "2024-09-11T11:09:14Z",
      "updated_at": "2024-09-11T13:32:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754093556",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754093556"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754104713",
      "pull_request_review_id": 2296299754,
      "id": 1754104713,
      "node_id": "PRRC_kwDOABII585ojYOJ",
      "diff_hunk": "@@ -17,6 +18,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 18,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faca9a821963d629987f6c2a2f7d13b1bf01162c",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this docstring could be beefed up. To give it a start:\r\n\r\n```\r\n/**\r\n * @brief A wrapper for a compile-time partially validated format string\r\n *\r\n * This struct can be used to enforce partial compile-time validation of format strings, to reduce\r\n * the likelihood of tinyformat throwing exceptions at run-time. Validation is partial to try and\r\n * prevent the most common errors while avoiding re-implementing the entire parsing logic.\r\n * \r\n * @note Counting of `*` dynamic width and precision fields (such as `%*c`, `%2$*3$d`, `%.*f`) is\r\n * notably not implemented to minimize code complexity as long they are not used in the codebase.\r\n * Usage of these fields is not counted and can lead to run-time exceptions.\r\n */\r\n```",
      "created_at": "2024-09-11T11:13:01Z",
      "updated_at": "2024-09-11T11:49:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754104713",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754104713"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754239951",
      "pull_request_review_id": 2296466018,
      "id": 1754239951,
      "node_id": "PRRC_kwDOABII585oj5PP",
      "diff_hunk": "@@ -17,6 +18,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n+        for (auto it{str.begin()}; it < str.end();) {\n+            if (*it != '%') {\n+                ++it;\n+                continue;\n+            }\n+\n+            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            if (*it == '%') {\n+                // %%\n+                ++it;\n+                continue;\n+            }\n+\n+            // Test for positional specifier, like %8$\n+            auto it_num{it};\n+            unsigned maybe_num{0};\n+            while ('0' <= *it_num && *it_num <= '9') {\n+                maybe_num *= 10;\n+                maybe_num += *it_num - '0';\n+                ++it_num;\n+            };\n+\n+            if (*it_num == '$') {\n+                // Positional specifier\n+                if (maybe_num == 0) throw \"Positional format specifier must indicate at least 1\";",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 51,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faca9a821963d629987f6c2a2f7d13b1bf01162c",
      "in_reply_to_id": 1753990981,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "👍, \"indicate\" may not be the best choice in this context, how about:\r\n```suggestion\r\n                if (maybe_num == 0) throw \"Positional format specifiers start at 1\"};\r\n```",
      "created_at": "2024-09-11T11:56:03Z",
      "updated_at": "2024-09-11T13:32:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754239951",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754239951"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754284187",
      "pull_request_review_id": 2296466018,
      "id": 1754284187,
      "node_id": "PRRC_kwDOABII585okECb",
      "diff_hunk": "@@ -17,6 +18,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n+        for (auto it{str.begin()}; it < str.end();) {\n+            if (*it != '%') {\n+                ++it;\n+                continue;\n+            }\n+\n+            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            if (*it == '%') {\n+                // %%\n+                ++it;\n+                continue;\n+            }\n+\n+            // Test for positional specifier, like %8$\n+            auto it_num{it};\n+            unsigned maybe_num{0};\n+            while ('0' <= *it_num && *it_num <= '9') {\n+                maybe_num *= 10;\n+                maybe_num += *it_num - '0';\n+                ++it_num;\n+            };\n+\n+            if (*it_num == '$') {\n+                // Positional specifier\n+                if (maybe_num == 0) throw \"Positional format specifier must indicate at least 1\";\n+                count_pos = std::max(count_pos, maybe_num);\n+                it = it_num;\n+                if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            } else {\n+                // Non-positional specifier\n+                ++count_normal;\n+                ++it;\n+            }\n+        }\n+        if (count_normal && count_pos) throw \"Format specifiers must be all positional or all non-positional!\";\n+        unsigned count{count_normal | count_pos};",
      "path": "src/util/string.h",
      "position": 74,
      "original_position": 62,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faca9a821963d629987f6c2a2f7d13b1bf01162c",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "since we can only have either `count_normal` or `count_pos`, but we also need to detect if both were called, could we separate the two concerns: have a single count which is used in both cases and two booleans, a \"has_normal\" and a \"has_positional\"?",
      "created_at": "2024-09-11T12:10:45Z",
      "updated_at": "2024-09-11T13:32:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754284187",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754284187"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 77,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754518405",
      "pull_request_review_id": 2296466018,
      "id": 1754518405,
      "node_id": "PRRC_kwDOABII585ok9OF",
      "diff_hunk": "@@ -17,6 +18,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)",
      "path": "src/util/string.h",
      "position": 36,
      "original_position": 23,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faca9a821963d629987f6c2a2f7d13b1bf01162c",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "While it gets the job done, I think the parser is unnecessarily complicated for several reasons:\r\n* Redundant Counters: Separate (but mutually exclusive) `count_normal` and `count_pos`.\r\n* Repetition: The check for \"Format specifier incorrectly terminated by end of string\" is repeated in multiple places.\r\n* Inefficient Character Handling: Multiple character checks for `%` (and manual digit detection).\r\n* Scattered Iterations: Increment operations (++it), continue statements, and lookaheads (str.end()) make the control flow harder to follow.\r\n\r\nI have a hard time explaining the behavior of the parser in words, following the logic of the code. Can we use a state-machine based parser instead, without lookaround, iterating char by char without jumping around, changing the state as we go along, e.g. something like this:\r\n```C++\r\nconstexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\r\n{\r\n    unsigned count{0};\r\n    unsigned maybe_num{0};\r\n    bool inside_format_specifier = false;\r\n    bool has_normal = false, has_positional = false;\r\n    for (auto it = str.begin(); it < str.end(); ++it) {\r\n        if (*it == '%') inside_format_specifier = !inside_format_specifier;\r\n        else if (inside_format_specifier) {\r\n            if (std::isdigit(*it)) maybe_num = maybe_num * 10 + (*it - '0');\r\n            else if (*it == '$') {\r\n                if (maybe_num == 0) throw \"Positional format specifier must be at least 1\";\r\n                count = std::max(count, maybe_num);\r\n                has_positional = true;\r\n                inside_format_specifier = false;\r\n            } else {\r\n                ++count;\r\n                maybe_num = 0;\r\n                has_normal = true;\r\n                inside_format_specifier = false;\r\n            }\r\n        } else maybe_num = 0;\r\n    }\r\n\r\n    if (has_normal && has_positional) throw \"Format specifiers must be all positional or all non-positional!\";\r\n    if (inside_format_specifier || maybe_num > 0) throw \"Format specifier incorrectly terminated by end of string\";\r\n    if (num_params != count) throw \"Format specifier count must match the argument count!\";\r\n}\r\n```\r\n\r\nThis is the reason I'm not ack-ig yet.",
      "created_at": "2024-09-11T13:22:25Z",
      "updated_at": "2024-09-11T13:32:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754518405",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754518405"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 39,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754535527",
      "pull_request_review_id": 2296466018,
      "id": 1754535527,
      "node_id": "PRRC_kwDOABII585olBZn",
      "diff_hunk": "@@ -17,6 +18,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n+        for (auto it{str.begin()}; it < str.end();) {\n+            if (*it != '%') {\n+                ++it;\n+                continue;\n+            }\n+\n+            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            if (*it == '%') {\n+                // %%\n+                ++it;\n+                continue;\n+            }\n+\n+            // Test for positional specifier, like %8$\n+            auto it_num{it};\n+            unsigned maybe_num{0};\n+            while ('0' <= *it_num && *it_num <= '9') {\n+                maybe_num *= 10;\n+                maybe_num += *it_num - '0';\n+                ++it_num;\n+            };\n+\n+            if (*it_num == '$') {\n+                // Positional specifier\n+                if (maybe_num == 0) throw \"Positional format specifier must indicate at least 1\";\n+                count_pos = std::max(count_pos, maybe_num);",
      "path": "src/util/string.h",
      "position": 63,
      "original_position": 52,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faca9a821963d629987f6c2a2f7d13b1bf01162c",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Alternatively, we could cheaply collect the referenced indexes to a `std::set<unsigned> referenced_params;` and check that all of them were referenced, i.e. `if (referenced_params.size() != num_params) throw \"Not all parameters are referenced!\";`",
      "created_at": "2024-09-11T13:27:08Z",
      "updated_at": "2024-09-11T13:32:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754535527",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754535527"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 66,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754542178",
      "pull_request_review_id": 2296466018,
      "id": 1754542178,
      "node_id": "PRRC_kwDOABII585olDBi",
      "diff_hunk": "@@ -17,6 +18,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n+        for (auto it{str.begin()}; it < str.end();) {\n+            if (*it != '%') {\n+                ++it;\n+                continue;\n+            }\n+\n+            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";",
      "path": "src/util/string.h",
      "position": 46,
      "original_position": 33,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faca9a821963d629987f6c2a2f7d13b1bf01162c",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't particularly like that we have lookaheads even though we should be able to detect this at the very end - which would enable us to remove the duplicated throw.",
      "created_at": "2024-09-11T13:29:04Z",
      "updated_at": "2024-09-11T13:32:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754542178",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754542178"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 49,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754545143",
      "pull_request_review_id": 2296466018,
      "id": 1754545143,
      "node_id": "PRRC_kwDOABII585olDv3",
      "diff_hunk": "@@ -17,6 +18,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n+        for (auto it{str.begin()}; it < str.end();) {\n+            if (*it != '%') {\n+                ++it;\n+                continue;",
      "path": "src/util/string.h",
      "position": 43,
      "original_position": 30,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faca9a821963d629987f6c2a2f7d13b1bf01162c",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I find these jumps quite confusing, it doesn't reflect how I would manually read and interpret such a format string",
      "created_at": "2024-09-11T13:29:51Z",
      "updated_at": "2024-09-11T13:32:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754545143",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754545143"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": 45,
      "original_start_line": 32,
      "start_side": "RIGHT",
      "line": 46,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754581608",
      "pull_request_review_id": 2297094602,
      "id": 1754581608,
      "node_id": "PRRC_kwDOABII585olMpo",
      "diff_hunk": "@@ -0,0 +1,66 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n+{\n+    // Compile-time sanity checks\n+    static_assert([] {\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"s%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s%%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\" 1$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s%1$s\");\n+        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s\");\n+        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s 4$s %2$s\");\n+        ConstevalFormatString<129>::Detail_CheckNumFormatSpecifiers(\"%129$s 999$s %2$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%02d\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%+2s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%+2s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%.6i\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%5.2f\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%#x\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%*c\");",
      "path": "src/test/util_string_tests.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faca9a821963d629987f6c2a2f7d13b1bf01162c",
      "in_reply_to_id": 1753929285,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, done!\r\n\r\n(Side note: `count_format_specifiers` also does not implement `*` parsing correctly, which I guess was never detected because it was never used)",
      "created_at": "2024-09-11T13:40:39Z",
      "updated_at": "2024-09-11T13:40:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754581608",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754581608"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754585565",
      "pull_request_review_id": 2297099786,
      "id": 1754585565,
      "node_id": "PRRC_kwDOABII585olNnd",
      "diff_hunk": "@@ -17,6 +18,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n+        for (auto it{str.begin()}; it < str.end();) {\n+            if (*it != '%') {\n+                ++it;\n+                continue;\n+            }\n+\n+            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            if (*it == '%') {\n+                // %%\n+                ++it;\n+                continue;\n+            }\n+\n+            // Test for positional specifier, like %8$\n+            auto it_num{it};\n+            unsigned maybe_num{0};\n+            while ('0' <= *it_num && *it_num <= '9') {\n+                maybe_num *= 10;\n+                maybe_num += *it_num - '0';\n+                ++it_num;\n+            };\n+\n+            if (*it_num == '$') {\n+                // Positional specifier\n+                if (maybe_num == 0) throw \"Positional format specifier must indicate at least 1\";\n+                count_pos = std::max(count_pos, maybe_num);\n+                it = it_num;",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 53,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faca9a821963d629987f6c2a2f7d13b1bf01162c",
      "in_reply_to_id": 1753962403,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, removed!",
      "created_at": "2024-09-11T13:41:46Z",
      "updated_at": "2024-09-11T13:41:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754585565",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754585565"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 44,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754586257",
      "pull_request_review_id": 2297100687,
      "id": 1754586257,
      "node_id": "PRRC_kwDOABII585olNyR",
      "diff_hunk": "@@ -16,25 +16,15 @@\n import sys\n \n FUNCTION_NAMES_AND_NUMBER_OF_LEADING_ARGUMENTS = [\n-    'FatalErrorf,0',\n-    'fprintf,1',\n     'tfm::format,1',  # Assuming tfm::::format(std::ostream&, ...\n-    'LogConnectFailure,1',\n     'LogError,0',\n     'LogWarning,0',\n     'LogInfo,0',\n     'LogDebug,1',\n     'LogTrace,1',\n     'LogPrintf,0',\n     'LogPrintLevel,2',\n-    'printf,0',\n-    'snprintf,2',\n-    'sprintf,1',\n     'strprintf,0',\n-    'vfprintf,1',\n-    'vprintf,1',\n-    'vsnprintf,1',",
      "path": "test/lint/lint-format-strings.py",
      "position": 21,
      "original_position": 21,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faca9a821963d629987f6c2a2f7d13b1bf01162c",
      "in_reply_to_id": 1754015054,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, removed!",
      "created_at": "2024-09-11T13:41:58Z",
      "updated_at": "2024-09-11T13:41:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754586257",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754586257"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 36,
      "original_line": 36,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754587654",
      "pull_request_review_id": 2297102488,
      "id": 1754587654,
      "node_id": "PRRC_kwDOABII585olOIG",
      "diff_hunk": "@@ -17,6 +18,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n+        for (auto it{str.begin()}; it < str.end();) {\n+            if (*it != '%') {\n+                ++it;\n+                continue;\n+            }\n+\n+            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            if (*it == '%') {\n+                // %%\n+                ++it;\n+                continue;\n+            }\n+\n+            // Test for positional specifier, like %8$",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 40,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faca9a821963d629987f6c2a2f7d13b1bf01162c",
      "in_reply_to_id": 1753972269,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, (re)moved.",
      "created_at": "2024-09-11T13:42:22Z",
      "updated_at": "2024-09-11T13:42:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754587654",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754587654"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754589089",
      "pull_request_review_id": 2297104327,
      "id": 1754589089,
      "node_id": "PRRC_kwDOABII585olOeh",
      "diff_hunk": "@@ -17,6 +18,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n+        for (auto it{str.begin()}; it < str.end();) {\n+            if (*it != '%') {\n+                ++it;\n+                continue;\n+            }\n+\n+            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            if (*it == '%') {\n+                // %%\n+                ++it;\n+                continue;\n+            }\n+\n+            // Test for positional specifier, like %8$\n+            auto it_num{it};\n+            unsigned maybe_num{0};\n+            while ('0' <= *it_num && *it_num <= '9') {\n+                maybe_num *= 10;\n+                maybe_num += *it_num - '0';\n+                ++it_num;\n+            };\n+\n+            if (*it_num == '$') {\n+                // Positional specifier\n+                if (maybe_num == 0) throw \"Positional format specifier must indicate at least 1\";",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 51,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faca9a821963d629987f6c2a2f7d13b1bf01162c",
      "in_reply_to_id": 1753990981,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, rephrased!",
      "created_at": "2024-09-11T13:42:47Z",
      "updated_at": "2024-09-11T13:42:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754589089",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754589089"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754591363",
      "pull_request_review_id": 2297107415,
      "id": 1754591363,
      "node_id": "PRRC_kwDOABII585olPCD",
      "diff_hunk": "@@ -17,6 +18,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 18,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faca9a821963d629987f6c2a2f7d13b1bf01162c",
      "in_reply_to_id": 1754104713,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, took it and extended the `@note` a bit.",
      "created_at": "2024-09-11T13:43:27Z",
      "updated_at": "2024-09-11T13:43:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754591363",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754591363"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754600910",
      "pull_request_review_id": 2297121439,
      "id": 1754600910,
      "node_id": "PRRC_kwDOABII585olRXO",
      "diff_hunk": "@@ -17,6 +17,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n+        for (auto it{str.begin()}; it < str.end();) {\n+            if (*it != '%') {\n+                ++it;\n+                continue;\n+            }\n+\n+            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            if (*it == '%') {\n+                // %%\n+                ++it;\n+                continue;\n+            }\n+\n+            // Test for positional specifier, like %8$",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 32,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa53bb4de8c46af944dc9d34bfef839ba20959bd",
      "in_reply_to_id": 1754093556,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "They are needed, see https://github.com/bitcoin/bitcoin/pull/30546#issuecomment-2333713098\r\n\r\nIf you want to prohibit them, a separate pull request may better suited to remove them.",
      "created_at": "2024-09-11T13:46:08Z",
      "updated_at": "2024-09-11T13:46:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754600910",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754600910"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754603796",
      "pull_request_review_id": 2297124770,
      "id": 1754603796,
      "node_id": "PRRC_kwDOABII585olSEU",
      "diff_hunk": "@@ -17,6 +18,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n+        for (auto it{str.begin()}; it < str.end();) {\n+            if (*it != '%') {\n+                ++it;\n+                continue;\n+            }\n+\n+            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            if (*it == '%') {\n+                // %%\n+                ++it;\n+                continue;\n+            }\n+\n+            // Test for positional specifier, like %8$\n+            auto it_num{it};\n+            unsigned maybe_num{0};\n+            while ('0' <= *it_num && *it_num <= '9') {\n+                maybe_num *= 10;\n+                maybe_num += *it_num - '0';\n+                ++it_num;\n+            };\n+\n+            if (*it_num == '$') {\n+                // Positional specifier\n+                if (maybe_num == 0) throw \"Positional format specifier must indicate at least 1\";\n+                count_pos = std::max(count_pos, maybe_num);\n+                it = it_num;\n+                if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            } else {\n+                // Non-positional specifier\n+                ++count_normal;\n+                ++it;\n+            }\n+        }\n+        if (count_normal && count_pos) throw \"Format specifiers must be all positional or all non-positional!\";\n+        unsigned count{count_normal | count_pos};",
      "path": "src/util/string.h",
      "position": 74,
      "original_position": 62,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faca9a821963d629987f6c2a2f7d13b1bf01162c",
      "in_reply_to_id": 1754284187,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "A single count and two booleans are three symbols, whereas two counts are two symbols, which seems easier",
      "created_at": "2024-09-11T13:46:52Z",
      "updated_at": "2024-09-11T13:46:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754603796",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754603796"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 77,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754612375",
      "pull_request_review_id": 2297134442,
      "id": 1754612375,
      "node_id": "PRRC_kwDOABII585olUKX",
      "diff_hunk": "@@ -17,6 +18,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)",
      "path": "src/util/string.h",
      "position": 36,
      "original_position": 23,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faca9a821963d629987f6c2a2f7d13b1bf01162c",
      "in_reply_to_id": 1754518405,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Your suggestion does not compile, so I'll leave this as-is for now.\r\n\r\n```\r\nsrc/util/string.h:47:17: note: non-constexpr function 'isdigit' cannot be used in a constant expression\r\n   47 |             if (std::isdigit(*it)) maybe_num = maybe_num * 10 + (*it - '0');\r\n      |                 ^\r\n",
      "created_at": "2024-09-11T13:49:04Z",
      "updated_at": "2024-09-11T13:49:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754612375",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754612375"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 39,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754614739",
      "pull_request_review_id": 2297137321,
      "id": 1754614739,
      "node_id": "PRRC_kwDOABII585olUvT",
      "diff_hunk": "@@ -17,6 +18,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n+        for (auto it{str.begin()}; it < str.end();) {\n+            if (*it != '%') {\n+                ++it;\n+                continue;\n+            }\n+\n+            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            if (*it == '%') {\n+                // %%\n+                ++it;\n+                continue;\n+            }\n+\n+            // Test for positional specifier, like %8$\n+            auto it_num{it};\n+            unsigned maybe_num{0};\n+            while ('0' <= *it_num && *it_num <= '9') {\n+                maybe_num *= 10;\n+                maybe_num += *it_num - '0';\n+                ++it_num;\n+            };\n+\n+            if (*it_num == '$') {\n+                // Positional specifier\n+                if (maybe_num == 0) throw \"Positional format specifier must indicate at least 1\";\n+                count_pos = std::max(count_pos, maybe_num);\n+                it = it_num;\n+                if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            } else {\n+                // Non-positional specifier\n+                ++count_normal;\n+                ++it;\n+            }\n+        }\n+        if (count_normal && count_pos) throw \"Format specifiers must be all positional or all non-positional!\";\n+        unsigned count{count_normal | count_pos};",
      "path": "src/util/string.h",
      "position": 74,
      "original_position": 62,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faca9a821963d629987f6c2a2f7d13b1bf01162c",
      "in_reply_to_id": 1754284187,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The error messages indicate two separate concerns, it would make sense logically to separate them as well",
      "created_at": "2024-09-11T13:49:44Z",
      "updated_at": "2024-09-11T13:49:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754614739",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754614739"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 77,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754628343",
      "pull_request_review_id": 2297154576,
      "id": 1754628343,
      "node_id": "PRRC_kwDOABII585olYD3",
      "diff_hunk": "@@ -17,6 +17,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n+        for (auto it{str.begin()}; it < str.end();) {\n+            if (*it != '%') {\n+                ++it;\n+                continue;\n+            }\n+\n+            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            if (*it == '%') {\n+                // %%\n+                ++it;\n+                continue;\n+            }\n+\n+            // Test for positional specifier, like %8$",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 32,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa53bb4de8c46af944dc9d34bfef839ba20959bd",
      "in_reply_to_id": 1754093556,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I know they're *used*, but I'd argue they're not *needed*, i.e. instead of\r\n```C++\r\nconst std::string error = strprintf(\r\n    \"Data directory %1$s contains a %2$s file which is ignored, because a different configuration file \"\r\n    \"%3$s from %4$s is being used instead. Possible ways to address this would be to:\\n\"\r\n    \"- Delete or rename the %2$s file in data directory %1$s.\\n\"\r\n    \"- Change datadir= or conf= options to specify one configuration file, not two, and use \"\r\n    \"includeconf= to include any other configuration files.\\n\"\r\n    \"- Set allowignoredconf=1 option to treat this condition as a warning, not an error.\",\r\n    fs::quoted(fs::PathToString(base_path)),\r\n    fs::quoted(BITCOIN_CONF_FILENAME),\r\n    fs::quoted(fs::PathToString(orig_config_path)),\r\n    config_source);\r\n```\r\nwe could simply repeat the args in the same way they're repeated in the text (instead of requiring the reader to jump around)\r\n```C++\r\nconst std::string base_path_str = fs::quoted(fs::PathToString(base_path));\r\nconst std::string config_file_name = fs::quoted(BITCOIN_CONF_FILENAME);\r\nconst std::string orig_config_path_str = fs::quoted(fs::PathToString(orig_config_path));\r\nconst std::string error = strprintf(\r\n    \"Data directory %s contains a %s file which is ignored, because a different configuration file \"\r\n    \"%s from %s is being used instead. Possible ways to address this would be to:\\n\"\r\n    \"- Delete or rename the %s file in data directory %s.\\n\"\r\n    \"- Change datadir= or conf= options to specify one configuration file, not two, and use \"\r\n    \"includeconf= to include any other configuration files.\\n\"\r\n    \"- Set allowignoredconf=1 option to treat this condition as a warning, not an error.\",\r\n    base_path_str,\r\n    config_file_name,\r\n    orig_config_path_str,\r\n    config_source,\r\n    config_file_name,\r\n    base_path_str\r\n);\r\n```",
      "created_at": "2024-09-11T13:53:44Z",
      "updated_at": "2024-09-11T13:53:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754628343",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754628343"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754643534",
      "pull_request_review_id": 2297174272,
      "id": 1754643534,
      "node_id": "PRRC_kwDOABII585olbxO",
      "diff_hunk": "@@ -17,6 +18,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)",
      "path": "src/util/string.h",
      "position": 36,
      "original_position": 23,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faca9a821963d629987f6c2a2f7d13b1bf01162c",
      "in_reply_to_id": 1754518405,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Must be a compiler difference, you can use `if ('0' <= *it && *it <= '9')` instead:\r\n```C++\r\nconstexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\r\n{\r\n    unsigned count{0};\r\n    unsigned maybe_num{0};\r\n    bool inside_format = false;\r\n    bool has_normal = false, has_positional = false;\r\n    for (auto it = str.begin(); it < str.end(); ++it) {\r\n        if (*it == '%') inside_format = !inside_format;\r\n        else if (inside_format) {\r\n            if ('0' <= *it && *it <= '9') maybe_num = maybe_num * 10 + (*it - '0');\r\n            else if (*it == '$') {\r\n                if (maybe_num == 0) throw \"Positional format specifier must have position of at least 1\";\r\n                count = std::max(count, maybe_num);\r\n                has_positional = true;\r\n                inside_format = false;\r\n            } else {\r\n                ++count;\r\n                maybe_num = 0;\r\n                has_normal = true;\r\n                inside_format = false;\r\n            }\r\n        } else maybe_num = 0;\r\n    }\r\n\r\n    if (has_normal && has_positional) throw \"Format specifiers must be all positional or all non-positional!\";\r\n    if (inside_format || maybe_num > 0) throw \"Format specifier incorrectly terminated by end of string\";\r\n    if (num_params != count) throw \"Format specifier count must match the argument count!\";\r\n}\r\n```",
      "created_at": "2024-09-11T13:57:54Z",
      "updated_at": "2024-09-11T14:01:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754643534",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754643534"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 39,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754649705",
      "pull_request_review_id": 2297063726,
      "id": 1754649705,
      "node_id": "PRRC_kwDOABII585oldRp",
      "diff_hunk": "@@ -17,6 +18,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)",
      "path": "src/util/string.h",
      "position": 36,
      "original_position": 23,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faca9a821963d629987f6c2a2f7d13b1bf01162c",
      "in_reply_to_id": 1754518405,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Replying to https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754643534:\r\n\r\nCould be simply `for (char c : str)`.\r\n\r\nAlso the [coding style](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-c) only permits omitting braces on `if` when it isn't followed by `else`.",
      "created_at": "2024-09-11T13:59:41Z",
      "updated_at": "2024-09-11T14:22:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754649705",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754649705"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 39,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754654470",
      "pull_request_review_id": 2297188489,
      "id": 1754654470,
      "node_id": "PRRC_kwDOABII585olecG",
      "diff_hunk": "@@ -17,6 +17,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n+        for (auto it{str.begin()}; it < str.end();) {\n+            if (*it != '%') {\n+                ++it;\n+                continue;\n+            }\n+\n+            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            if (*it == '%') {\n+                // %%\n+                ++it;\n+                continue;\n+            }\n+\n+            // Test for positional specifier, like %8$",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 32,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa53bb4de8c46af944dc9d34bfef839ba20959bd",
      "in_reply_to_id": 1754093556,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If you want to prohibit them, a separate pull request may better suited to remove and prohibit them.",
      "created_at": "2024-09-11T14:01:04Z",
      "updated_at": "2024-09-11T14:01:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754654470",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754654470"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754662640",
      "pull_request_review_id": 2297199215,
      "id": 1754662640,
      "node_id": "PRRC_kwDOABII585olgbw",
      "diff_hunk": "@@ -17,6 +17,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n+        for (auto it{str.begin()}; it < str.end();) {\n+            if (*it != '%') {\n+                ++it;\n+                continue;\n+            }\n+\n+            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            if (*it == '%') {\n+                // %%\n+                ++it;\n+                continue;\n+            }\n+\n+            // Test for positional specifier, like %8$",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 32,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa53bb4de8c46af944dc9d34bfef839ba20959bd",
      "in_reply_to_id": 1754093556,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Absolutely, but we may not want to spend time implementing positional parsing, if we agree that we don't want to encourage their usage",
      "created_at": "2024-09-11T14:03:31Z",
      "updated_at": "2024-09-11T14:03:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754662640",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754662640"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754674269",
      "pull_request_review_id": 2297214316,
      "id": 1754674269,
      "node_id": "PRRC_kwDOABII585oljRd",
      "diff_hunk": "@@ -17,6 +17,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n+        for (auto it{str.begin()}; it < str.end();) {\n+            if (*it != '%') {\n+                ++it;\n+                continue;\n+            }\n+\n+            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            if (*it == '%') {\n+                // %%\n+                ++it;\n+                continue;\n+            }\n+\n+            // Test for positional specifier, like %8$",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 32,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa53bb4de8c46af944dc9d34bfef839ba20959bd",
      "in_reply_to_id": 1754093556,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Personally I think it can be useful (`std::format` also allows them), but I don't really care. I am happy to put this pull into a draft while it is waiting on the other issue/pull. However, I don't think this pull is the right place to make such a change.",
      "created_at": "2024-09-11T14:06:55Z",
      "updated_at": "2024-09-11T14:06:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754674269",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754674269"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754696512",
      "pull_request_review_id": 2297243365,
      "id": 1754696512,
      "node_id": "PRRC_kwDOABII585olotA",
      "diff_hunk": "@@ -17,6 +17,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n+        for (auto it{str.begin()}; it < str.end();) {\n+            if (*it != '%') {\n+                ++it;\n+                continue;\n+            }\n+\n+            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            if (*it == '%') {\n+                // %%\n+                ++it;\n+                continue;\n+            }\n+\n+            // Test for positional specifier, like %8$",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 32,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa53bb4de8c46af944dc9d34bfef839ba20959bd",
      "in_reply_to_id": 1754093556,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't want to delay the PR, just to clarify if it makes sense to work on this feature",
      "created_at": "2024-09-11T14:13:17Z",
      "updated_at": "2024-09-11T14:13:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754696512",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754696512"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754713518",
      "pull_request_review_id": 2297063726,
      "id": 1754713518,
      "node_id": "PRRC_kwDOABII585ols2u",
      "diff_hunk": "@@ -0,0 +1,74 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n+{\n+    // Compile-time sanity checks\n+    static_assert([] {\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"s%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s%%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\" 1$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s%1$s\");\n+        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s\");\n+        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s 4$s %2$s\");\n+        ConstevalFormatString<129>::Detail_CheckNumFormatSpecifiers(\"%129$s 999$s %2$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%02d\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%+2s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%+2s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%.6i\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%5.2f\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%#x\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%\\n\");",
      "path": "src/test/util_string_tests.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa7819bfadd29e41a1c9283828f7e32934d4fbd9",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "These lines (except maybe `%5.2f`?) should be moved to their own `static_assert` with a comment admitting they are invalid, but currently not caught (unlike the `static_assert` below which is valid but not properly handled).",
      "created_at": "2024-09-11T14:18:20Z",
      "updated_at": "2024-09-11T14:22:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754713518",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754713518"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 33,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754821069",
      "pull_request_review_id": 2297406185,
      "id": 1754821069,
      "node_id": "PRRC_kwDOABII585omHHN",
      "diff_hunk": "@@ -0,0 +1,74 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n+{\n+    // Compile-time sanity checks\n+    static_assert([] {\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"s%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s%%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\" 1$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s%1$s\");\n+        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s\");\n+        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s 4$s %2$s\");\n+        ConstevalFormatString<129>::Detail_CheckNumFormatSpecifiers(\"%129$s 999$s %2$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%02d\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%+2s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%+2s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%.6i\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%5.2f\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%#x\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%\\n\");",
      "path": "src/test/util_string_tests.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa7819bfadd29e41a1c9283828f7e32934d4fbd9",
      "in_reply_to_id": 1754713518,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "They are not invalid, because in tinyformat there isn't an invalid specifier, see https://github.com/bitcoin/bitcoin/pull/30546#issuecomment-2333261303\r\n\r\nAlso, stuff like `%.2fs` is pretty standard and valid floating point number formatting. See for example `src/logging/timer.h`",
      "created_at": "2024-09-11T14:48:53Z",
      "updated_at": "2024-09-11T14:48:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754821069",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754821069"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 33,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754827231",
      "pull_request_review_id": 2297413935,
      "id": 1754827231,
      "node_id": "PRRC_kwDOABII585omInf",
      "diff_hunk": "@@ -17,6 +17,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n+        for (auto it{str.begin()}; it < str.end();) {\n+            if (*it != '%') {\n+                ++it;\n+                continue;\n+            }\n+\n+            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            if (*it == '%') {\n+                // %%\n+                ++it;\n+                continue;\n+            }\n+\n+            // Test for positional specifier, like %8$",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 32,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa53bb4de8c46af944dc9d34bfef839ba20959bd",
      "in_reply_to_id": 1754093556,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think positional args are more readable than repeated args (even in this example which is atypically long) because:\r\n\r\n- People have limited working memories. it is a easier to see 4 parameters passed and remember what numbers 1-4 are than to see 6 parameters passed and remember what 1-6 are. Remembering a list is also harder if the list has duplicate values.\r\n- Positional arguments are more explicit. \"Configuration file %3$s\" it is clearer than \"Configuration file %s\" because it tells you that the 3rd argument is substituted. You don't have to manually scan the string and count earlier %s.\r\n- Positional arguments make it easier understand messages and see whether they are internally consistent. \"Data directory %1$s contains a %2$s file [...] Delete or rename the %2$s file in data directory %1$s\" is easier to understand and verify than the alternative with %s everywhere.\r\n\r\n\r\n\r\n",
      "created_at": "2024-09-11T14:50:39Z",
      "updated_at": "2024-09-11T14:50:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754827231",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754827231"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754885614",
      "pull_request_review_id": 2297496291,
      "id": 1754885614,
      "node_id": "PRRC_kwDOABII585omW3u",
      "diff_hunk": "@@ -17,6 +18,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n+        for (auto it{str.begin()}; it < str.end();) {\n+            if (*it != '%') {\n+                ++it;\n+                continue;",
      "path": "src/util/string.h",
      "position": 43,
      "original_position": 30,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faca9a821963d629987f6c2a2f7d13b1bf01162c",
      "in_reply_to_id": 1754545143,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I reacted in the opposite way when I saw this, happy to pop the `%%`-case off the mental stack early and focus on other cases.",
      "created_at": "2024-09-11T15:07:02Z",
      "updated_at": "2024-09-11T15:07:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754885614",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754885614"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": 45,
      "original_start_line": 32,
      "start_side": "RIGHT",
      "line": 46,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754891827",
      "pull_request_review_id": 2297504088,
      "id": 1754891827,
      "node_id": "PRRC_kwDOABII585omYYz",
      "diff_hunk": "@@ -17,6 +17,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n+        for (auto it{str.begin()}; it < str.end();) {\n+            if (*it != '%') {\n+                ++it;\n+                continue;\n+            }\n+\n+            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            if (*it == '%') {\n+                // %%\n+                ++it;\n+                continue;\n+            }\n+\n+            // Test for positional specifier, like %8$",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 32,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa53bb4de8c46af944dc9d34bfef839ba20959bd",
      "in_reply_to_id": 1754093556,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks @ryanofsky, it seems there is a need for that after all, please resolve this comment.",
      "created_at": "2024-09-11T15:08:47Z",
      "updated_at": "2024-09-11T15:08:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754891827",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754891827"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754908585",
      "pull_request_review_id": 2297528682,
      "id": 1754908585,
      "node_id": "PRRC_kwDOABII585omcep",
      "diff_hunk": "@@ -17,6 +18,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n+        for (auto it{str.begin()}; it < str.end();) {\n+            if (*it != '%') {\n+                ++it;\n+                continue;",
      "path": "src/util/string.h",
      "position": 43,
      "original_position": 30,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faca9a821963d629987f6c2a2f7d13b1bf01162c",
      "in_reply_to_id": 1754545143,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "but that's not what this does, that's below this condition.\r\nThis states: if the current char is not a `%`, ignore it - which wouldn't be the first thing I'd say when explaining to someone how the formatter works (especially since we're checking later for `%` again).",
      "created_at": "2024-09-11T15:13:20Z",
      "updated_at": "2024-09-11T15:14:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754908585",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754908585"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": 45,
      "original_start_line": 32,
      "start_side": "RIGHT",
      "line": 46,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754940176",
      "pull_request_review_id": 2297572187,
      "id": 1754940176,
      "node_id": "PRRC_kwDOABII585omkMQ",
      "diff_hunk": "@@ -17,6 +18,65 @@\n #include <vector>\n \n namespace util {\n+/**\n+ * @brief A wrapper for a compile-time partially validated format string\n+ *\n+ * This struct can be used to enforce partial compile-time validation of format\n+ * strings, to reduce the likelihood of tinyformat throwing exceptions at\n+ * run-time. Validation is partial to try and prevent the most common errors\n+ * while avoiding re-implementing the entire parsing logic.\n+ *\n+ * @note Counting of `*` dynamic width and precision fields (such as `%*c`,\n+ * `%2$*3$d`, `%.*f`) is not implemented to minimize code complexity as long as\n+ * they are not used in the codebase. Usage of these fields is not counted and\n+ * can lead to run-time exceptions. Code wanting to use the `*` specifier can\n+ * side-step this struct and call tinyformat directly.\n+ */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n+        for (auto it{str.begin()}; it < str.end();) {\n+            if (*it != '%') {\n+                ++it;\n+                continue;\n+            }\n+\n+            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            if (*it == '%') {\n+                // Percent escape: %%\n+                ++it;\n+                continue;\n+            }\n+\n+            unsigned maybe_num{0};\n+            while ('0' <= *it && *it <= '9') {\n+                maybe_num *= 10;\n+                maybe_num += *it - '0';\n+                ++it;\n+            };\n+\n+            if (*it == '$') {\n+                // Positional specifier, like %8$\n+                if (maybe_num == 0) throw \"Positional format specifier must have position of at least 1\";\n+                count_pos = std::max(count_pos, maybe_num);\n+                if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            } else {\n+                // Non-positional specifier, like %s",
      "path": "src/util/string.h",
      "position": 66,
      "original_position": 66,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faa5a8e4480de69086796dba49b65ef73058f8d7",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"util: Add ConstevalFormatString\" (fa512d7bd333c6bf5868fd131f9513bc51aab5aa)\r\n\r\nThis comment is true, but potentially misleading because it isn't mentioning that this case will also be reached in cases this function isn't checking like when `#` `+` `-` or space flags are used, when any `.precision` value is specified, as well as in invalid unterminated format arguments like `\"%0%s\"` that may treated as valid.\r\n\r\nWould suggest adding something like \"This case is also reached if any flags or position arguments were specified, which this implementation will not check\"",
      "created_at": "2024-09-11T15:22:41Z",
      "updated_at": "2024-09-11T16:03:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754940176",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754940176"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 69,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754971776",
      "pull_request_review_id": 2297572187,
      "id": 1754971776,
      "node_id": "PRRC_kwDOABII585omr6A",
      "diff_hunk": "@@ -0,0 +1,74 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n+{\n+    // Compile-time sanity checks\n+    static_assert([] {\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"s%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s%%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\" 1$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s%1$s\");\n+        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s\");",
      "path": "src/test/util_string_tests.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faa5a8e4480de69086796dba49b65ef73058f8d7",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"util: Add ConstevalFormatString\" (fa512d7bd333c6bf5868fd131f9513bc51aab5aa)\r\n\r\nThink it could be a good idea to some tests positional argument combined with width or precision options or flags like:\r\n\r\n```c++\r\nConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$5i\");\r\nConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$-5i\");\r\nConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$.5i\");\r\n```",
      "created_at": "2024-09-11T15:31:30Z",
      "updated_at": "2024-09-11T16:03:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754971776",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754971776"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754990024",
      "pull_request_review_id": 2297572187,
      "id": 1754990024,
      "node_id": "PRRC_kwDOABII585omwXI",
      "diff_hunk": "@@ -0,0 +1,74 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n+{\n+    // Compile-time sanity checks\n+    static_assert([] {\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"s%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s%%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\" 1$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s%1$s\");\n+        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s\");\n+        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s 4$s %2$s\");\n+        ConstevalFormatString<129>::Detail_CheckNumFormatSpecifiers(\"%129$s 999$s %2$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%02d\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%+2s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%+2s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%.6i\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%5.2f\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%#x\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%\\n\");\n+        return true; // All checks above compiled and passed\n+    }());\n+    static_assert([] {\n+        // The `*` specifier behavior is unsupported and can lead to runtime\n+        // errors when used in a ConstevalFormatString. Please refer to the\n+        // note in the ConstevalFormatString docs.\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%*c\");\n+        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$*3$d\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%.*f\");\n+        return true; // All checks above compiled and passed",
      "path": "src/test/util_string_tests.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa512d7bd333c6bf5868fd131f9513bc51aab5aa",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"util: Add ConstevalFormatString\" (fa512d7bd333c6bf5868fd131f9513bc51aab5aa)\r\n\r\nI think other invalid but accepted case that would be good to check for here or above (depending on whether or not tiny format treats them as runtime errors) would be:\r\n\r\n```\r\nConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%123%\");\r\nConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%123%s\");\r\n```",
      "created_at": "2024-09-11T15:37:09Z",
      "updated_at": "2024-09-11T16:03:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754990024",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1754990024"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755013263",
      "pull_request_review_id": 2297572187,
      "id": 1755013263,
      "node_id": "PRRC_kwDOABII585om2CP",
      "diff_hunk": "@@ -0,0 +1,74 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n+{\n+    // Compile-time sanity checks\n+    static_assert([] {\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"s%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s%%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\" 1$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s%1$s\");\n+        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s\");\n+        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s 4$s %2$s\");\n+        ConstevalFormatString<129>::Detail_CheckNumFormatSpecifiers(\"%129$s 999$s %2$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%02d\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%+2s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%+2s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%.6i\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%5.2f\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%#x\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%\\n\");",
      "path": "src/test/util_string_tests.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa7819bfadd29e41a1c9283828f7e32934d4fbd9",
      "in_reply_to_id": 1754713518,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754821069\r\n\r\n> They are not invalid, because in tinyformat there isn't an invalid specifier, see [#30546 (comment)](https://github.com/bitcoin/bitcoin/pull/30546#issuecomment-2333261303)\r\n\r\nWhen you say these are not invalid you are saying tinyformat accepts `strprintf(\"hello %\\n\", \"world\")`? Or saying something else?\r\n\r\nIn any case, it would be good to clarify in unit test comments which of the test cases tinyformat supports and which trigger exceptions. Potentially we could even extend the test to compare tinyformat behavior with  ConstevalFormat behavior to make things even clearer, but just having a comment to clarify how these cases are treated by tinyformat would be very helpful.",
      "created_at": "2024-09-11T15:44:26Z",
      "updated_at": "2024-09-11T16:03:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1755013263",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755013263"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 33,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755038937",
      "pull_request_review_id": 2297572187,
      "id": 1755038937,
      "node_id": "PRRC_kwDOABII585om8TZ",
      "diff_hunk": "@@ -17,6 +17,65 @@\n #include <vector>\n \n namespace util {\n+/**\n+ * @brief A wrapper for a compile-time partially validated format string\n+ *\n+ * This struct can be used to enforce partial compile-time validation of format\n+ * strings, to reduce the likelihood of tinyformat throwing exceptions at\n+ * run-time. Validation is partial to try and prevent the most common errors\n+ * while avoiding re-implementing the entire parsing logic.\n+ *\n+ * @note Counting of `*` dynamic width and precision fields (such as `%*c`,\n+ * `%2$*3$d`, `%.*f`) is not implemented to minimize code complexity as long as\n+ * they are not used in the codebase. Usage of these fields is not counted and\n+ * can lead to run-time exceptions. Code wanting to use the `*` specifier can",
      "path": "src/util/string.h",
      "position": 29,
      "original_position": 21,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa512d7bd333c6bf5868fd131f9513bc51aab5aa",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"util: Add ConstevalFormatString\" (fa512d7bd333c6bf5868fd131f9513bc51aab5aa)\r\n\r\nMaybe replace \"can\" with \"will\"? It seems like there is no usage of * that ConstevalFormat would accept and tinyformat would not treat as a runtime error. Or is that not the case?",
      "created_at": "2024-09-11T15:51:41Z",
      "updated_at": "2024-09-11T16:03:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1755038937",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755038937"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 32,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755082651",
      "pull_request_review_id": 2297756638,
      "id": 1755082651,
      "node_id": "PRRC_kwDOABII585onG-b",
      "diff_hunk": "@@ -17,6 +18,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n+        for (auto it{str.begin()}; it < str.end();) {\n+            if (*it != '%') {\n+                ++it;\n+                continue;",
      "path": "src/util/string.h",
      "position": 43,
      "original_position": 30,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faca9a821963d629987f6c2a2f7d13b1bf01162c",
      "in_reply_to_id": 1754545143,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> This states: if the current char is not a %, ignore it - which wouldn't be the first thing I'd say ...\r\n\r\nFor counting the specifiers, anything before the specifier begins with `%` can safely be ignored. I'd explain it this way, but I can see how someone may want to explain it in another way.\r\n\r\nPersonally, I am fine either way, because this is just a style nit for me. I'll leave this as-is for now, but I may or may not change something if I have to push again.",
      "created_at": "2024-09-11T16:04:06Z",
      "updated_at": "2024-09-11T16:04:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1755082651",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755082651"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": 45,
      "original_start_line": 32,
      "start_side": "RIGHT",
      "line": 46,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755133612",
      "pull_request_review_id": 2297842870,
      "id": 1755133612,
      "node_id": "PRRC_kwDOABII585onTas",
      "diff_hunk": "@@ -17,6 +17,65 @@\n #include <vector>\n \n namespace util {\n+/**\n+ * @brief A wrapper for a compile-time partially validated format string\n+ *\n+ * This struct can be used to enforce partial compile-time validation of format\n+ * strings, to reduce the likelihood of tinyformat throwing exceptions at\n+ * run-time. Validation is partial to try and prevent the most common errors\n+ * while avoiding re-implementing the entire parsing logic.\n+ *\n+ * @note Counting of `*` dynamic width and precision fields (such as `%*c`,\n+ * `%2$*3$d`, `%.*f`) is not implemented to minimize code complexity as long as\n+ * they are not used in the codebase. Usage of these fields is not counted and\n+ * can lead to run-time exceptions. Code wanting to use the `*` specifier can",
      "path": "src/util/string.h",
      "position": 29,
      "original_position": 21,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa512d7bd333c6bf5868fd131f9513bc51aab5aa",
      "in_reply_to_id": 1755038937,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think using positional args may work for `*`, but I haven't checked it.",
      "created_at": "2024-09-11T16:26:06Z",
      "updated_at": "2024-09-11T16:26:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1755133612",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755133612"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 32,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755134264",
      "pull_request_review_id": 2297844630,
      "id": 1755134264,
      "node_id": "PRRC_kwDOABII585onTk4",
      "diff_hunk": "@@ -0,0 +1,74 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n+{\n+    // Compile-time sanity checks\n+    static_assert([] {\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"s%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s%%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\" 1$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s%1$s\");\n+        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s\");\n+        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s 4$s %2$s\");\n+        ConstevalFormatString<129>::Detail_CheckNumFormatSpecifiers(\"%129$s 999$s %2$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%02d\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%+2s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%+2s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%.6i\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%5.2f\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%#x\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%\\n\");\n+        return true; // All checks above compiled and passed\n+    }());\n+    static_assert([] {\n+        // The `*` specifier behavior is unsupported and can lead to runtime\n+        // errors when used in a ConstevalFormatString. Please refer to the\n+        // note in the ConstevalFormatString docs.\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%*c\");\n+        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$*3$d\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%.*f\");\n+        return true; // All checks above compiled and passed",
      "path": "src/test/util_string_tests.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa512d7bd333c6bf5868fd131f9513bc51aab5aa",
      "in_reply_to_id": 1754990024,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For tinyformat, almost any format specifier type is valid. `%` as well: https://godbolt.org/z/f8zWsP6nT\r\n\r\nThanks, added the tests and a comment!",
      "created_at": "2024-09-11T16:26:34Z",
      "updated_at": "2024-09-11T16:26:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1755134264",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755134264"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755135236",
      "pull_request_review_id": 2297847211,
      "id": 1755135236,
      "node_id": "PRRC_kwDOABII585onT0E",
      "diff_hunk": "@@ -0,0 +1,74 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n+{\n+    // Compile-time sanity checks\n+    static_assert([] {\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"s%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s%%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\" 1$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s%1$s\");\n+        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s\");",
      "path": "src/test/util_string_tests.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faa5a8e4480de69086796dba49b65ef73058f8d7",
      "in_reply_to_id": 1754971776,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, added the tests!",
      "created_at": "2024-09-11T16:27:17Z",
      "updated_at": "2024-09-11T16:27:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1755135236",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755135236"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755135557",
      "pull_request_review_id": 2297848065,
      "id": 1755135557,
      "node_id": "PRRC_kwDOABII585onT5F",
      "diff_hunk": "@@ -17,6 +18,65 @@\n #include <vector>\n \n namespace util {\n+/**\n+ * @brief A wrapper for a compile-time partially validated format string\n+ *\n+ * This struct can be used to enforce partial compile-time validation of format\n+ * strings, to reduce the likelihood of tinyformat throwing exceptions at\n+ * run-time. Validation is partial to try and prevent the most common errors\n+ * while avoiding re-implementing the entire parsing logic.\n+ *\n+ * @note Counting of `*` dynamic width and precision fields (such as `%*c`,\n+ * `%2$*3$d`, `%.*f`) is not implemented to minimize code complexity as long as\n+ * they are not used in the codebase. Usage of these fields is not counted and\n+ * can lead to run-time exceptions. Code wanting to use the `*` specifier can\n+ * side-step this struct and call tinyformat directly.\n+ */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n+        for (auto it{str.begin()}; it < str.end();) {\n+            if (*it != '%') {\n+                ++it;\n+                continue;\n+            }\n+\n+            if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            if (*it == '%') {\n+                // Percent escape: %%\n+                ++it;\n+                continue;\n+            }\n+\n+            unsigned maybe_num{0};\n+            while ('0' <= *it && *it <= '9') {\n+                maybe_num *= 10;\n+                maybe_num += *it - '0';\n+                ++it;\n+            };\n+\n+            if (*it == '$') {\n+                // Positional specifier, like %8$\n+                if (maybe_num == 0) throw \"Positional format specifier must have position of at least 1\";\n+                count_pos = std::max(count_pos, maybe_num);\n+                if (++it >= str.end()) throw \"Format specifier incorrectly terminated by end of string\";\n+            } else {\n+                // Non-positional specifier, like %s",
      "path": "src/util/string.h",
      "position": 66,
      "original_position": 66,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faa5a8e4480de69086796dba49b65ef73058f8d7",
      "in_reply_to_id": 1754940176,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, added a comment!",
      "created_at": "2024-09-11T16:27:30Z",
      "updated_at": "2024-09-11T16:27:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1755135557",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755135557"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 69,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755136016",
      "pull_request_review_id": 2297849408,
      "id": 1755136016,
      "node_id": "PRRC_kwDOABII585onUAQ",
      "diff_hunk": "@@ -0,0 +1,74 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n+{\n+    // Compile-time sanity checks\n+    static_assert([] {\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"s%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s%%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\" 1$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s%1$s\");\n+        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s\");\n+        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s 4$s %2$s\");\n+        ConstevalFormatString<129>::Detail_CheckNumFormatSpecifiers(\"%129$s 999$s %2$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%02d\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%+2s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%+2s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%.6i\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%5.2f\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%#x\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%\\n\");",
      "path": "src/test/util_string_tests.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa7819bfadd29e41a1c9283828f7e32934d4fbd9",
      "in_reply_to_id": 1754713518,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, added a comment!",
      "created_at": "2024-09-11T16:27:53Z",
      "updated_at": "2024-09-11T16:27:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1755136016",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755136016"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 33,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755206069",
      "pull_request_review_id": 2298052654,
      "id": 1755206069,
      "node_id": "PRRC_kwDOABII585onlG1",
      "diff_hunk": "@@ -17,6 +18,55 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0};    // Max number in positional specifier, like %8$s\n+        for (auto it{str.begin()}; it < str.end();) {\n+            if (*it != '%') {\n+                ++it;\n+                continue;",
      "path": "src/util/string.h",
      "position": 43,
      "original_position": 30,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "faca9a821963d629987f6c2a2f7d13b1bf01162c",
      "in_reply_to_id": 1754545143,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In response to https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754908585:\r\n\r\n> but that's not what this does, that's below this condition.\r\n\r\nAh, yes, mixed them up. Still feels okay to ignore anything up to a '%' that way.\r\n\r\nBut I do also like l0rinc's approach in this thread https://github.com/bitcoin/bitcoin/pull/30546/files#r1754649705, although extra state tends to create room for more bugs.",
      "created_at": "2024-09-11T17:23:15Z",
      "updated_at": "2024-09-11T20:55:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1755206069",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755206069"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": 45,
      "original_start_line": 32,
      "start_side": "RIGHT",
      "line": 46,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755352516",
      "pull_request_review_id": 2298052654,
      "id": 1755352516,
      "node_id": "PRRC_kwDOABII585ooI3E",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n+{\n+    // Compile-time sanity checks\n+    static_assert([] {\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"s%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s%%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\" 1$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s%1$s\");\n+        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s\");\n+        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s 4$s %2$s\");\n+        ConstevalFormatString<129>::Detail_CheckNumFormatSpecifiers(\"%129$s 999$s %2$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%02d\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%+2s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%+2s\");",
      "path": "src/test/util_string_tests.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa26462e95291652b4021d91b014655f678149e8",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Duplicates",
      "created_at": "2024-09-11T18:49:25Z",
      "updated_at": "2024-09-11T20:54:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1755352516",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755352516"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 31,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755589971",
      "pull_request_review_id": 2298052654,
      "id": 1755589971,
      "node_id": "PRRC_kwDOABII585opC1T",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)",
      "path": "src/test/util_string_tests.cpp",
      "position": 29,
      "original_position": 13,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa26462e95291652b4021d91b014655f678149e8",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "#### A) Interlacing `tfm::format`\r\n\r\nPartially in response to @ryanofsky's [comment](https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1755013263)...\r\n\r\n> Potentially we could even extend the test to compare tinyformat behavior with ConstevalFormat behavior to make things even clearer, but just having a comment to clarify how these cases are treated by tinyformat would be very helpful.\r\n\r\n...and partially out of my own curiosity about how `tfm::format` really behaves - I added `tfm::format` testing interlaced with the functionality for counting format specifiers.\r\n\r\nIt disproved my intuition about mismatching counts from: https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1754713518\r\n\r\n#### B) Free function?\r\n\r\nAs a consequence of wanting to avoid...\r\n```C++\r\nstatic_assert([]() { ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\"); return true; }());\r\ntfm::format(\"\");\r\n```\r\n...I broke out a free function similarly to @stickies-v suggestion https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1751669308, enabling:\r\n```C++\r\nusing util::detail::CountFormatSpecifiers;\r\n\r\nstatic_assert(CountFormatSpecifiers(\"\") == 0);\r\ntfm::format(\"\");\r\n```\r\nWhile I agree with maflcko that [keeping functionality hard to use outside of the intended context](https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1752494409) has value, keeping tests straightforward is more important. If you prefer...\r\n```C++\r\nConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\r\ntfm::format(\"\");\r\n```\r\n...I guess that could work too.\r\n\r\n#### C) Dropped negatives\r\n\r\nAlso dropped some of the negative tests since the free `1` literal in...\r\n```C++\r\nstatic_assert(CountFormatSpecifiers(\"%1$s\") == 1);\r\n```\r\n...more clearly and solely at compile-time covers both...\r\n```C++\r\nConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s\");\r\n```\r\n...and...\r\n```C++\r\nBOOST_CHECK_EXCEPTION(ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%1$s\"), ErrType, check_num_spec);\r\nBOOST_CHECK_EXCEPTION(ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%1$s\"), ErrType, check_num_spec);\r\n```\r\n\r\n#### D) Split test function\r\n\r\nBroke `ConstevalFormatString_NumSpec` test function into:\r\n- `ConstevalFormatString_CorrectCounts`\r\n- `ConstevalFormatString_IncorrectCounts`\r\n- `ConstevalFormatString_NegativeChecks`\r\n\r\n#### E) Added `parse_string_content` tests\r\n\r\nAdded existing \"tests\" from *run-lint-format-strings.py* `parse_string_content` like @stickies-v did. Even if parity with tinyformat is more important than parity with a custom linter for tinyformat, I think it's still a nice touch.\r\n\r\n<details>\r\n<summary>\r\nCompiling <code>git diff -w</code> on top of fa26462e95291652b4021d91b014655f678149e8\r\n</summary>\r\n\r\n```diff\r\ndiff --git a/src/test/util_string_tests.cpp b/src/test/util_string_tests.cpp\r\nindex c6ee1ffed9..2f6fad50b7 100644\r\n--- a/src/test/util_string_tests.cpp\r\n+++ b/src/test/util_string_tests.cpp\r\n@@ -7,74 +7,172 @@\r\n #include <boost/test/unit_test.hpp>\r\n \r\n using namespace util;\r\n+using util::detail::CountFormatSpecifiers;\r\n+\r\n+namespace {\r\n+bool CheckTooMany(const tfm::format_error& s) { return s.what() == std::string_view{\"tinyformat: Too many conversion specifiers in format string\"}; }\r\n+bool CheckOutOfRange(const tfm::format_error& s) { return s.what() == std::string_view{\"tinyformat: Positional argument out of range\"}; }\r\n+}\r\n \r\n BOOST_AUTO_TEST_SUITE(util_string_tests)\r\n \r\n-BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\r\n+// These are counted correctly, since tinyformat will require the provided number of args.\r\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_CorrectCounts)\r\n {\r\n-    // Compile-time sanity checks\r\n-    static_assert([] {\r\n-        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\r\n-        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\r\n-        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s\");\r\n-        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%s\");\r\n-        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"s%%\");\r\n-        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%s\");\r\n-        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s%%\");\r\n-        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\" 1$s\");\r\n-        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s\");\r\n-        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s%1$s\");\r\n-        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s\");\r\n-        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s 4$s %2$s\");\r\n-        ConstevalFormatString<129>::Detail_CheckNumFormatSpecifiers(\"%129$s 999$s %2$s\");\r\n-        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%02d\");\r\n-        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%+2s\");\r\n-        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%+2s\");\r\n-        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%.6i\");\r\n-        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%5.2f\");\r\n-        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%#x\");\r\n-        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$5i\");\r\n-        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$-5i\");\r\n-        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$.5i\");\r\n-        // tinyformat accepts almost any \"type\" spec, even '%', or '_', or '\\n'.\r\n-        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%123%\");\r\n-        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%123%s\");\r\n-        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_\");\r\n-        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%\\n\");\r\n-        return true; // All checks above compiled and passed\r\n-    }());\r\n-    static_assert([] {\r\n+    static_assert(CountFormatSpecifiers(\"\") == 0);\r\n+    tfm::format(\"\");\r\n+\r\n+    static_assert(CountFormatSpecifiers(\"%%\") == 0);\r\n+    tfm::format(\"%%\");\r\n+\r\n+    static_assert(CountFormatSpecifiers(\"%s\") == 1);\r\n+    BOOST_CHECK_EXCEPTION(tfm::format(\"%s\"), tfm::format_error, CheckTooMany);\r\n+    tfm::format(\"%s\", \"foo\");\r\n+\r\n+    static_assert(CountFormatSpecifiers(\"%%s\") == 0);\r\n+    tfm::format(\"%%s\");\r\n+\r\n+    static_assert(CountFormatSpecifiers(\"s%%\") == 0);\r\n+    tfm::format(\"s%%\");\r\n+\r\n+    static_assert(CountFormatSpecifiers(\"%%%s\") == 1);\r\n+    BOOST_CHECK_EXCEPTION(tfm::format(\"%%%s\"), tfm::format_error, CheckTooMany);\r\n+    tfm::format(\"%%%s\", \"foo\");\r\n+\r\n+    static_assert(CountFormatSpecifiers(\"%s%%\") == 1);\r\n+    BOOST_CHECK_EXCEPTION(tfm::format(\"%s%%\"), tfm::format_error, CheckTooMany);\r\n+    tfm::format(\"%s%%\", \"foo\");\r\n+\r\n+    static_assert(CountFormatSpecifiers(\" 1$s\") == 0);\r\n+    tfm::format(\" 1$s\");\r\n+\r\n+    static_assert(CountFormatSpecifiers(\"%1$s\") == 1);\r\n+    BOOST_CHECK_EXCEPTION(tfm::format(\"%1$s\"), tfm::format_error, CheckOutOfRange);\r\n+    tfm::format(\"%1$s\", \"foo\");\r\n+\r\n+    static_assert(CountFormatSpecifiers(\"%1$s%1$s\") == 1);\r\n+    BOOST_CHECK_EXCEPTION(tfm::format(\"%1$s%1$s\"), tfm::format_error, CheckOutOfRange);\r\n+    tfm::format(\"%1$s%1$s\", \"foo\");\r\n+\r\n+    static_assert(CountFormatSpecifiers(\"%2$s\") == 2);\r\n+    BOOST_CHECK_EXCEPTION(tfm::format(\"%2$s\"), tfm::format_error, CheckOutOfRange);\r\n+    BOOST_CHECK_EXCEPTION(tfm::format(\"%2$s\", \"foo\"), tfm::format_error, CheckOutOfRange);\r\n+    tfm::format(\"%2$s\", \"foo\", \"bar\");\r\n+\r\n+    static_assert(CountFormatSpecifiers(\"%2$s 4$s %2$s\") == 2);\r\n+    BOOST_CHECK_EXCEPTION(tfm::format(\"%2$s 4$s %2$s\"), tfm::format_error, CheckOutOfRange);\r\n+    BOOST_CHECK_EXCEPTION(tfm::format(\"%2$s 4$s %2$s\", \"foo\"), tfm::format_error, CheckOutOfRange);\r\n+    tfm::format(\"%2$s 4$s %2$s\", \"foo\", \"bar\");\r\n+\r\n+    static_assert(CountFormatSpecifiers(\"%12$s 99$s %2$s\") == 12);\r\n+    BOOST_CHECK_EXCEPTION(tfm::format(\"%12$s 99$s %2$s\"), tfm::format_error, CheckOutOfRange);\r\n+    BOOST_CHECK_EXCEPTION(tfm::format(\"%12$s 99$s %2$s\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"), tfm::format_error, CheckOutOfRange);\r\n+    tfm::format(\"%12$s 99$s %2$s\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\");\r\n+\r\n+    static_assert(CountFormatSpecifiers(\"%02d\") == 1);\r\n+    BOOST_CHECK_EXCEPTION(tfm::format(\"%02d\"), tfm::format_error, CheckTooMany);\r\n+    tfm::format(\"%02d\", 1);\r\n+\r\n+    static_assert(CountFormatSpecifiers(\"%+2s\") == 1);\r\n+    BOOST_CHECK_EXCEPTION(tfm::format(\"%+2s\"), tfm::format_error, CheckTooMany);\r\n+    tfm::format(\"%+2s\", 1);\r\n+\r\n+    static_assert(CountFormatSpecifiers(\"%.6i\") == 1);\r\n+    BOOST_CHECK_EXCEPTION(tfm::format(\"%.6i\"), tfm::format_error, CheckTooMany);\r\n+    tfm::format(\"%.6i\", 1);\r\n+\r\n+    static_assert(CountFormatSpecifiers(\"%5.2f\") == 1);\r\n+    BOOST_CHECK_EXCEPTION(tfm::format(\"%5.2f\"), tfm::format_error, CheckTooMany);\r\n+    tfm::format(\"%5.2f\", 1);\r\n+\r\n+    static_assert(CountFormatSpecifiers(\"%1$5i\") == 1);\r\n+    BOOST_CHECK_EXCEPTION(tfm::format(\"%1$5i\"), tfm::format_error, CheckOutOfRange);\r\n+    tfm::format(\"%1$5i\", 1);\r\n+\r\n+    static_assert(CountFormatSpecifiers(\"%1$-5i\") == 1);\r\n+    BOOST_CHECK_EXCEPTION(tfm::format(\"%1$-5i\"), tfm::format_error, CheckOutOfRange);\r\n+    tfm::format(\"%1$-5i\", 1);\r\n+\r\n+    static_assert(CountFormatSpecifiers(\"%1$.5i\") == 1);\r\n+    BOOST_CHECK_EXCEPTION(tfm::format(\"%1$.5i\"), tfm::format_error, CheckOutOfRange);\r\n+    tfm::format(\"%1$.5i\", 1);\r\n+\r\n+    static_assert(CountFormatSpecifiers(\"%#x\") == 1);\r\n+    BOOST_CHECK_EXCEPTION(tfm::format(\"%#x\"), tfm::format_error, CheckTooMany);\r\n+    tfm::format(\"%#x\", 1);\r\n+\r\n+    static_assert(CountFormatSpecifiers(\"%123%\") == 1);\r\n+    BOOST_CHECK_EXCEPTION(tfm::format(\"%123%\"), tfm::format_error, CheckTooMany);\r\n+    tfm::format(\"%123%\", 1);\r\n+\r\n+    static_assert(CountFormatSpecifiers(\"%123%s\") == 1);\r\n+    BOOST_CHECK_EXCEPTION(tfm::format(\"%123%s\"), tfm::format_error, CheckTooMany);\r\n+    tfm::format(\"%123%s\", 1);\r\n+\r\n+    static_assert(CountFormatSpecifiers(\"%_\") == 1);\r\n+    BOOST_CHECK_EXCEPTION(tfm::format(\"%_\"), tfm::format_error, CheckTooMany);\r\n+    tfm::format(\"%_\", 1);\r\n+\r\n+    static_assert(CountFormatSpecifiers(\"%\\n\") == 1);\r\n+    BOOST_CHECK_EXCEPTION(tfm::format(\"%\\n\"), tfm::format_error, CheckTooMany);\r\n+    tfm::format(\"%\\n\", 1);\r\n+}\r\n+\r\n // The `*` specifier behavior is unsupported and can lead to runtime\r\n // errors when used in a ConstevalFormatString. Please refer to the\r\n // note in the ConstevalFormatString docs.\r\n-        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%*c\");\r\n-        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$*3$d\");\r\n-        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%.*f\");\r\n-        return true; // All checks above compiled and passed\r\n-    }());\r\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_IncorrectCounts)\r\n+{\r\n+    int a{}, b{}, c{};\r\n \r\n-    // Negative checks at runtime\r\n+    auto check_not_enough{[](const tfm::format_error& s) { return s.what() == std::string_view{\"tinyformat: Not enough arguments to read variable width or precision\"}; }};\r\n+    static_assert(CountFormatSpecifiers(\"%*c\") == 1);\r\n+    BOOST_CHECK_EXCEPTION(tfm::format(\"%*c\"), tfm::format_error, check_not_enough);\r\n+    BOOST_CHECK_EXCEPTION(tfm::format(\"%*c\", a), tfm::format_error, CheckTooMany);\r\n+    tfm::format(\"%*c\", a, b);\r\n+\r\n+    static_assert(CountFormatSpecifiers(\"%2$*3$d\") == 2);\r\n+    BOOST_CHECK_EXCEPTION(tfm::format(\"%2$*3$d\"), tfm::format_error, CheckOutOfRange);\r\n+    BOOST_CHECK_EXCEPTION(tfm::format(\"%2$*3$d\", a), tfm::format_error, CheckOutOfRange);\r\n+    BOOST_CHECK_EXCEPTION(tfm::format(\"%2$*3$d\", a, b), tfm::format_error, CheckOutOfRange);\r\n+    tfm::format(\"%2$*3$d\", a, b, c);\r\n+\r\n+    static_assert(CountFormatSpecifiers(\"%.*f\") == 1);\r\n+    BOOST_CHECK_EXCEPTION(tfm::format(\"%.*f\"), tfm::format_error, check_not_enough);\r\n+    BOOST_CHECK_EXCEPTION(tfm::format(\"%.*f\", a), tfm::format_error, CheckTooMany);\r\n+    tfm::format(\"%.*f\", a, b);\r\n+}\r\n+\r\n+// Negative checks. Executed at runtime as exceptions are not allowed at compile time.\r\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NegativeChecks)\r\n+{\r\n     using ErrType = const char*;\r\n \r\n     auto check_mix{[](const ErrType& str) { return str == std::string_view{\"Format specifiers must be all positional or all non-positional!\"}; }};\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s%1$s\"), ErrType, check_mix);\r\n-\r\n-    auto check_num_spec{[](const ErrType& str) { return str == std::string_view{\"Format specifier count must match the argument count!\"}; }};\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"\"), ErrType, check_num_spec);\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%s\"), ErrType, check_num_spec);\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%s\"), ErrType, check_num_spec);\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%1$s\"), ErrType, check_num_spec);\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%1$s\"), ErrType, check_num_spec);\r\n+    BOOST_CHECK_EXCEPTION(CountFormatSpecifiers(\"%s%1$s\"), ErrType, check_mix);\r\n \r\n     auto check_0_pos{[](const ErrType& str) { return str == std::string_view{\"Positional format specifier must have position of at least 1\"}; }};\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%$s\"), ErrType, check_0_pos);\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%$\"), ErrType, check_0_pos);\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%0$\"), ErrType, check_0_pos);\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%0$s\"), ErrType, check_0_pos);\r\n+    BOOST_CHECK_EXCEPTION(CountFormatSpecifiers(\"%$s\"), ErrType, check_0_pos);\r\n+    BOOST_CHECK_EXCEPTION(CountFormatSpecifiers(\"%$\"), ErrType, check_0_pos);\r\n+    BOOST_CHECK_EXCEPTION(CountFormatSpecifiers(\"%0$\"), ErrType, check_0_pos);\r\n+    BOOST_CHECK_EXCEPTION(CountFormatSpecifiers(\"%0$s\"), ErrType, check_0_pos);\r\n \r\n     auto check_term{[](const ErrType& str) { return str == std::string_view{\"Format specifier incorrectly terminated by end of string\"}; }};\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%\"), ErrType, check_term);\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$\"), ErrType, check_term);\r\n+    BOOST_CHECK_EXCEPTION(CountFormatSpecifiers(\"%\"), ErrType, check_term);\r\n+    BOOST_CHECK_EXCEPTION(CountFormatSpecifiers(\"%1$\"), ErrType, check_term);\r\n+}\r\n+\r\n+// Existing \"tests\" in run-lint-format-strings.py parse_string_content\r\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_run_lint_format_strings_parse_string_content)\r\n+{\r\n+    static_assert(CountFormatSpecifiers(\"foo bar foo\") == 0);\r\n+    static_assert(CountFormatSpecifiers(\"foo %d bar foo\") == 1);\r\n+    static_assert(CountFormatSpecifiers(\"foo %d bar %i foo\") == 2);\r\n+    static_assert(CountFormatSpecifiers(\"foo %d bar %i foo %% foo\") == 2);\r\n+    static_assert(CountFormatSpecifiers(\"foo %d bar %i foo %% foo %d foo\") == 3);\r\n+    //static_assert(CountFormatSpecifiers(\"foo %d bar %i foo %% foo %*d foo\") == 4); // not implemented\r\n+    static_assert(CountFormatSpecifiers(\"foo %5$d\") == 5);\r\n+    //static_assert(CountFormatSpecifiers(\"foo %5$*7$d\") == 7); // not implemented\r\n }\r\n \r\n BOOST_AUTO_TEST_SUITE_END()\r\ndiff --git a/src/test/util_tests.cpp b/src/test/util_tests.cpp\r\nindex 1624fb8b5b..bd40d596ef 100644\r\n--- a/src/test/util_tests.cpp\r\n+++ b/src/test/util_tests.cpp\r\n@@ -150,22 +150,24 @@ constexpr uint8_t HEX_PARSE_OUTPUT[] = {\r\n static_assert((sizeof(HEX_PARSE_INPUT) - 1) == 2 * sizeof(HEX_PARSE_OUTPUT));\r\n BOOST_AUTO_TEST_CASE(parse_hex)\r\n {\r\n+    using util::hex_literals::detail::Hex;\r\n+\r\n     std::vector<unsigned char> result;\r\n \r\n     // Basic test vector\r\n     std::vector<unsigned char> expected(std::begin(HEX_PARSE_OUTPUT), std::end(HEX_PARSE_OUTPUT));\r\n-    constexpr std::array<std::byte, 65> hex_literal_array{operator\"\"_hex<util::detail::Hex(HEX_PARSE_INPUT)>()};\r\n+    constexpr std::array<std::byte, 65> hex_literal_array{operator\"\"_hex<Hex(HEX_PARSE_INPUT)>()};\r\n     auto hex_literal_span{MakeUCharSpan(hex_literal_array)};\r\n     BOOST_CHECK_EQUAL_COLLECTIONS(hex_literal_span.begin(), hex_literal_span.end(), expected.begin(), expected.end());\r\n \r\n-    const std::vector<std::byte> hex_literal_vector{operator\"\"_hex_v<util::detail::Hex(HEX_PARSE_INPUT)>()};\r\n+    const std::vector<std::byte> hex_literal_vector{operator\"\"_hex_v<Hex(HEX_PARSE_INPUT)>()};\r\n     hex_literal_span = MakeUCharSpan(hex_literal_vector);\r\n     BOOST_CHECK_EQUAL_COLLECTIONS(hex_literal_span.begin(), hex_literal_span.end(), expected.begin(), expected.end());\r\n \r\n-    constexpr std::array<uint8_t, 65> hex_literal_array_uint8{operator\"\"_hex_u8<util::detail::Hex(HEX_PARSE_INPUT)>()};\r\n+    constexpr std::array<uint8_t, 65> hex_literal_array_uint8{operator\"\"_hex_u8<Hex(HEX_PARSE_INPUT)>()};\r\n     BOOST_CHECK_EQUAL_COLLECTIONS(hex_literal_array_uint8.begin(), hex_literal_array_uint8.end(), expected.begin(), expected.end());\r\n \r\n-    result = operator\"\"_hex_v_u8<util::detail::Hex(HEX_PARSE_INPUT)>();\r\n+    result = operator\"\"_hex_v_u8<Hex(HEX_PARSE_INPUT)>();\r\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\r\n \r\n     result = ParseHex(HEX_PARSE_INPUT);\r\ndiff --git a/src/util/strencodings.h b/src/util/strencodings.h\r\nindex 1543de03ab..b79806c251 100644\r\n--- a/src/util/strencodings.h\r\n+++ b/src/util/strencodings.h\r\n@@ -427,16 +427,16 @@ struct Hex {\r\n \r\n } // namespace detail\r\n \r\n-template <util::detail::Hex str>\r\n+template <util::hex_literals::detail::Hex str>\r\n constexpr auto operator\"\"_hex() { return str.bytes; }\r\n \r\n-template <util::detail::Hex str>\r\n+template <util::hex_literals::detail::Hex str>\r\n constexpr auto operator\"\"_hex_u8() { return std::bit_cast<std::array<uint8_t, str.bytes.size()>>(str.bytes); }\r\n \r\n-template <util::detail::Hex str>\r\n+template <util::hex_literals::detail::Hex str>\r\n constexpr auto operator\"\"_hex_v() { return std::vector<std::byte>{str.bytes.begin(), str.bytes.end()}; }\r\n \r\n-template <util::detail::Hex str>\r\n+template <util::hex_literals::detail::Hex str>\r\n inline auto operator\"\"_hex_v_u8() { return std::vector<uint8_t>{UCharCast(str.bytes.data()), UCharCast(str.bytes.data() + str.bytes.size())}; }\r\n \r\n } // inline namespace hex_literals\r\ndiff --git a/src/util/string.h b/src/util/string.h\r\nindex 4724d881ff..d99c1963c6 100644\r\n--- a/src/util/string.h\r\n+++ b/src/util/string.h\r\n@@ -18,25 +18,9 @@\r\n #include <vector>\r\n \r\n namespace util {\r\n-/**\r\n- * @brief A wrapper for a compile-time partially validated format string\r\n- *\r\n- * This struct can be used to enforce partial compile-time validation of format\r\n- * strings, to reduce the likelihood of tinyformat throwing exceptions at\r\n- * run-time. Validation is partial to try and prevent the most common errors\r\n- * while avoiding re-implementing the entire parsing logic.\r\n- *\r\n- * @note Counting of `*` dynamic width and precision fields (such as `%*c`,\r\n- * `%2$*3$d`, `%.*f`) is not implemented to minimize code complexity as long as\r\n- * they are not used in the codebase. Usage of these fields is not counted and\r\n- * can lead to run-time exceptions. Code wanting to use the `*` specifier can\r\n- * side-step this struct and call tinyformat directly.\r\n- */\r\n-template <unsigned num_params>\r\n-struct ConstevalFormatString {\r\n-    const char* const fmt;\r\n-    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\r\n-    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\r\n+\r\n+namespace detail {\r\n+constexpr static unsigned CountFormatSpecifiers(std::string_view str)\r\n {\r\n     unsigned count_normal{0}; // Number of \"normal\" specifiers, like %s\r\n     unsigned count_pos{0};    // Max number in positional specifier, like %8$s\r\n@@ -74,8 +58,31 @@ struct ConstevalFormatString {\r\n         // specifier is not checked. Parsing continues with the next '%'.\r\n     }\r\n     if (count_normal && count_pos) throw \"Format specifiers must be all positional or all non-positional!\";\r\n-        unsigned count{count_normal | count_pos};\r\n-        if (num_params != count) throw \"Format specifier count must match the argument count!\";\r\n+    return count_normal | count_pos;\r\n+}\r\n+} // namespace detail\r\n+\r\n+/**\r\n+ * @brief A wrapper for a compile-time partially validated format string\r\n+ *\r\n+ * This struct can be used to enforce partial compile-time validation of format\r\n+ * strings, to reduce the likelihood of tinyformat throwing exceptions at\r\n+ * run-time. Validation is partial to try and prevent the most common errors\r\n+ * while avoiding re-implementing the entire parsing logic.\r\n+ *\r\n+ * @note Counting of `*` dynamic width and precision fields (such as `%*c`,\r\n+ * `%2$*3$d`, `%.*f`) is not implemented to minimize code complexity as long as\r\n+ * they are not used in the codebase. Usage of these fields is not counted and\r\n+ * can lead to run-time exceptions. Code wanting to use the `*` specifier can\r\n+ * side-step this struct and call tinyformat directly.\r\n+ */\r\n+template <unsigned num_params>\r\n+struct ConstevalFormatString {\r\n+    const char* const fmt;\r\n+    consteval ConstevalFormatString(const char* str) : fmt{str}\r\n+    {\r\n+        if (detail::CountFormatSpecifiers(fmt) != num_params)\r\n+            throw \"Format specifier count must match the argument count!\";\r\n     }\r\n };\r\n``` \r\n\r\n(The unrelated changes in *strencodings.h*/*util_tests.cpp* are a consequence of clashing `util::detail` namespaces).\r\n\r\n</details>\r\n",
      "created_at": "2024-09-11T20:51:56Z",
      "updated_at": "2024-09-11T21:14:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1755589971",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755589971"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 29,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755612640",
      "pull_request_review_id": 2298656213,
      "id": 1755612640,
      "node_id": "PRRC_kwDOABII585opIXg",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n+{\n+    // Compile-time sanity checks\n+    static_assert([] {\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"s%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s%%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\" 1$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s%1$s\");\n+        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s\");\n+        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s 4$s %2$s\");\n+        ConstevalFormatString<129>::Detail_CheckNumFormatSpecifiers(\"%129$s 999$s %2$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%02d\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%+2s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%+2s\");",
      "path": "src/test/util_string_tests.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa26462e95291652b4021d91b014655f678149e8",
      "in_reply_to_id": 1755352516,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, I'll fix it up in the next follow-up, or if I have to re-push here, to avoid invalidating review over a harmless test style-nit.",
      "created_at": "2024-09-11T21:06:06Z",
      "updated_at": "2024-09-11T21:06:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1755612640",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755612640"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 31,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755647995",
      "pull_request_review_id": 2298702115,
      "id": 1755647995,
      "node_id": "PRRC_kwDOABII585opQ_7",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)",
      "path": "src/test/util_string_tests.cpp",
      "position": 29,
      "original_position": 13,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa26462e95291652b4021d91b014655f678149e8",
      "in_reply_to_id": 1755589971,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> While I agree with maflcko that [keeping functionality hard to use outside of the intended context](https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1752494409) has value, keeping tests straightforward is more important. If you prefer...\r\n\r\nThank you for the diff. However, I think that real code should be designed without taking tests into account (apart from being testable). Tests should always follow real code, not the other way round. I am sure the verbosity in the test can be reduced (maybe with a macro, or type alias, or ...), but I am not sure if the style-nits in the tests are so important, as long as the test is working properly and as expected.\r\n\r\nThe diff you shared also changes `util::hex_literals::detail::Hex`, which I don't really understand.\r\n\r\n\r\n\r\n> Even if parity with tinyformat is more important than parity with a custom linter for tinyformat, I think it's still a nice touch.\r\n\r\nAll relevant test coverage has been taken over, except for the `*` test coverage. But the `*` parsing is broken in the linter anyway, so I am not sure about the value of taking over test in a comment (dead code).\r\n\r\n\r\n",
      "created_at": "2024-09-11T21:25:08Z",
      "updated_at": "2024-09-11T21:25:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1755647995",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755647995"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 29,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755702207",
      "pull_request_review_id": 2298776365,
      "id": 1755702207,
      "node_id": "PRRC_kwDOABII585opeO_",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)",
      "path": "src/test/util_string_tests.cpp",
      "position": 29,
      "original_position": 13,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa26462e95291652b4021d91b014655f678149e8",
      "in_reply_to_id": 1755589971,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I think that real code should be designed without taking tests into account (apart from being testable). Tests should always follow real code, not the other way round.\r\n\r\nMaking the function return a value allowed for C) dropped negatives (and less runtime testing). But I can try to provide a new diff bringing them back and without changing *string.h*. My main point remains adding the interlaced tinyformat tests to prove parity.\r\n\r\n> The diff you shared also changes `util::hex_literals::detail::Hex`, which I don't really understand.\r\n\r\nIt's a consequence of clashes between `util::detail` namespaces. (Added note about that in a later edit).\r\n\r\n> All relevant test coverage has been taken over, except for the `*` test coverage. But the `*` parsing is broken in the linter anyway, so I am not sure about the value of taking over test in a comment (dead code).\r\n\r\nFair.",
      "created_at": "2024-09-11T21:46:50Z",
      "updated_at": "2024-09-11T21:46:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1755702207",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755702207"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 29,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755737721",
      "pull_request_review_id": 2298821295,
      "id": 1755737721,
      "node_id": "PRRC_kwDOABII585opm55",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)",
      "path": "src/test/util_string_tests.cpp",
      "position": 29,
      "original_position": 13,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa26462e95291652b4021d91b014655f678149e8",
      "in_reply_to_id": 1755589971,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> > The diff you shared also changes `util::hex_literals::detail::Hex`, which I don't really understand.\r\n> \r\n> It's a consequence of clashes between `util::detail` namespaces. (Added note about that in a later edit).\r\n\r\nThanks for explaining. I think this is another reason to keep `string.h` as-is for now.\r\n\r\n> My main point remains adding the interlaced tinyformat tests to prove parity.\r\n\r\nI think the `CheckTooMany` may be a bit too verbose and mostly unit tests for tinyformat itself. Especially, if they are followed by the happy-path. I think the value in checking that a runtime error occurs for an invalid setting that is already rejected at compile-time is limited.\r\n\r\nAlso, there are some tests that are \"unspecified behavior\" in tinyformat, albeit they are working \"as expected\" now. For example, (1) not consuming all positional args, (2) or mixing positional and non-positional. (The python linter also gets both wrong.) So I am not sure if unit tests should be added for this unspecified behavior. See also the tinyformat docs:\r\n\r\n```\r\n// The format can contain either numbered argument conversion specifications\r\n// (that is, \"%n$\" and \"*m$\"), or unnumbered argument conversion specifications\r\n// (that is, % and * ), but not both. The only exception to this is that %%\r\n// can be mixed with the \"%n$\" form. The results of mixing numbered and\r\n// unnumbered argument specifications in a format string are undefined.\r\n// When numbered argument specifications are used, specifying the Nth argument\r\n// requires that all the leading arguments, from the first to the (N-1)th,\r\n// are specified in the format string.",
      "created_at": "2024-09-11T22:07:50Z",
      "updated_at": "2024-09-11T22:07:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1755737721",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755737721"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 29,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1756344649",
      "pull_request_review_id": 2299516200,
      "id": 1756344649,
      "node_id": "PRRC_kwDOABII585or7FJ",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)",
      "path": "src/test/util_string_tests.cpp",
      "position": 29,
      "original_position": 13,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa26462e95291652b4021d91b014655f678149e8",
      "in_reply_to_id": 1755589971,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "<details>\r\n<summary>New <code>git diff -w</code></summary>\r\n\r\n```diff\r\ndiff --git a/src/test/util_string_tests.cpp b/src/test/util_string_tests.cpp\r\nindex c6ee1ffed9..3fed361e7e 100644\r\n--- a/src/test/util_string_tests.cpp\r\n+++ b/src/test/util_string_tests.cpp\r\n@@ -10,62 +10,140 @@ using namespace util;\r\n \r\n BOOST_AUTO_TEST_SUITE(util_string_tests)\r\n \r\n-BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\r\n+// These are counted correctly, since tinyformat will require the provided number of args.\r\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_CorrectCounts)\r\n {\r\n-    // Compile-time sanity checks\r\n-    static_assert([] {\r\n     ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\r\n+    tfm::format(\"\");\r\n+\r\n     ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\r\n+    tfm::format(\"%%\");\r\n+\r\n     ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s\");\r\n+    BOOST_CHECK_THROW(tfm::format(\"%s\"), tfm::format_error);\r\n+    tfm::format(\"%s\", \"foo\");\r\n+\r\n     ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%s\");\r\n+    tfm::format(\"%%s\");\r\n+\r\n     ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"s%%\");\r\n+    tfm::format(\"s%%\");\r\n+\r\n     ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%s\");\r\n+    BOOST_CHECK_THROW(tfm::format(\"%%%s\"), tfm::format_error);\r\n+    tfm::format(\"%%%s\", \"foo\");\r\n+\r\n     ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s%%\");\r\n+    BOOST_CHECK_THROW(tfm::format(\"%s%%\"), tfm::format_error);\r\n+    tfm::format(\"%s%%\", \"foo\");\r\n+\r\n     ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\" 1$s\");\r\n+    tfm::format(\" 1$s\");\r\n+\r\n     ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s\");\r\n+    BOOST_CHECK_THROW(tfm::format(\"%1$s\"), tfm::format_error);\r\n+    tfm::format(\"%1$s\", \"foo\");\r\n+\r\n     ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s%1$s\");\r\n+    BOOST_CHECK_THROW(tfm::format(\"%1$s%1$s\"), tfm::format_error);\r\n+    tfm::format(\"%1$s%1$s\", \"foo\");\r\n+\r\n     ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s\");\r\n+    BOOST_CHECK_THROW(tfm::format(\"%2$s\"), tfm::format_error);\r\n+    BOOST_CHECK_THROW(tfm::format(\"%2$s\", \"foo\"), tfm::format_error);\r\n+    tfm::format(\"%2$s\", \"foo\", \"bar\");\r\n+\r\n     ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s 4$s %2$s\");\r\n-        ConstevalFormatString<129>::Detail_CheckNumFormatSpecifiers(\"%129$s 999$s %2$s\");\r\n+    BOOST_CHECK_THROW(tfm::format(\"%2$s 4$s %2$s\"), tfm::format_error);\r\n+    BOOST_CHECK_THROW(tfm::format(\"%2$s 4$s %2$s\", \"foo\"), tfm::format_error);\r\n+    tfm::format(\"%2$s 4$s %2$s\", \"foo\", \"bar\");\r\n+\r\n+    ConstevalFormatString<12>::Detail_CheckNumFormatSpecifiers(\"%12$s 99$s %2$s\");\r\n+    BOOST_CHECK_THROW(tfm::format(\"%12$s 99$s %2$s\"), tfm::format_error);\r\n+    BOOST_CHECK_THROW(tfm::format(\"%12$s 99$s %2$s\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"), tfm::format_error);\r\n+    tfm::format(\"%12$s 99$s %2$s\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\");\r\n+\r\n     ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%02d\");\r\n+    BOOST_CHECK_THROW(tfm::format(\"%02d\"), tfm::format_error);\r\n+    tfm::format(\"%02d\", 1);\r\n+\r\n     ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%+2s\");\r\n-        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%+2s\");\r\n+    BOOST_CHECK_THROW(tfm::format(\"%+2s\"), tfm::format_error);\r\n+    tfm::format(\"%+2s\", 1);\r\n+\r\n     ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%.6i\");\r\n+    BOOST_CHECK_THROW(tfm::format(\"%.6i\"), tfm::format_error);\r\n+    tfm::format(\"%.6i\", 1);\r\n+\r\n     ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%5.2f\");\r\n-        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%#x\");\r\n+    BOOST_CHECK_THROW(tfm::format(\"%5.2f\"), tfm::format_error);\r\n+    tfm::format(\"%5.2f\", 1);\r\n+\r\n     ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$5i\");\r\n+    BOOST_CHECK_THROW(tfm::format(\"%1$5i\"), tfm::format_error);\r\n+    tfm::format(\"%1$5i\", 1);\r\n+\r\n     ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$-5i\");\r\n+    BOOST_CHECK_THROW(tfm::format(\"%1$-5i\"), tfm::format_error);\r\n+    tfm::format(\"%1$-5i\", 1);\r\n+\r\n     ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$.5i\");\r\n-        // tinyformat accepts almost any \"type\" spec, even '%', or '_', or '\\n'.\r\n+    BOOST_CHECK_THROW(tfm::format(\"%1$.5i\"), tfm::format_error);\r\n+    tfm::format(\"%1$.5i\", 1);\r\n+\r\n+    ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%#x\");\r\n+    BOOST_CHECK_THROW(tfm::format(\"%#x\"), tfm::format_error);\r\n+    tfm::format(\"%#x\", 1);\r\n+\r\n     ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%123%\");\r\n+    BOOST_CHECK_THROW(tfm::format(\"%123%\"), tfm::format_error);\r\n+    tfm::format(\"%123%\", 1);\r\n+\r\n     ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%123%s\");\r\n+    BOOST_CHECK_THROW(tfm::format(\"%123%s\"), tfm::format_error);\r\n+    tfm::format(\"%123%s\", 1);\r\n+\r\n     ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%_\");\r\n+    BOOST_CHECK_THROW(tfm::format(\"%_\"), tfm::format_error);\r\n+    tfm::format(\"%_\", 1);\r\n+\r\n     ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%\\n\");\r\n-        return true; // All checks above compiled and passed\r\n-    }());\r\n-    static_assert([] {\r\n+    BOOST_CHECK_THROW(tfm::format(\"%\\n\"), tfm::format_error);\r\n+    tfm::format(\"%\\n\", 1);\r\n+}\r\n+\r\n // The `*` specifier behavior is unsupported and can lead to runtime\r\n // errors when used in a ConstevalFormatString. Please refer to the\r\n // note in the ConstevalFormatString docs.\r\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_IncorrectCounts)\r\n+{\r\n+    int a{}, b{}, c{};\r\n+\r\n     ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%*c\");\r\n+    BOOST_CHECK_THROW(tfm::format(\"%*c\"), tfm::format_error);\r\n+    BOOST_CHECK_THROW(tfm::format(\"%*c\", a), tfm::format_error);\r\n+    tfm::format(\"%*c\", a, b);\r\n+\r\n     ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$*3$d\");\r\n+    BOOST_CHECK_THROW(tfm::format(\"%2$*3$d\"), tfm::format_error);\r\n+    BOOST_CHECK_THROW(tfm::format(\"%2$*3$d\", a), tfm::format_error);\r\n+    BOOST_CHECK_THROW(tfm::format(\"%2$*3$d\", a, b), tfm::format_error);\r\n+    tfm::format(\"%2$*3$d\", a, b, c);\r\n+\r\n     ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%.*f\");\r\n-        return true; // All checks above compiled and passed\r\n-    }());\r\n+    BOOST_CHECK_THROW(tfm::format(\"%.*f\"), tfm::format_error);\r\n+    BOOST_CHECK_THROW(tfm::format(\"%.*f\", a), tfm::format_error);\r\n+    tfm::format(\"%.*f\", a, b);\r\n+}\r\n \r\n-    // Negative checks at runtime\r\n+// Executed at runtime as exceptions are not allowed at compile time.\r\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NegativeChecks)\r\n+{\r\n     using ErrType = const char*;\r\n \r\n     auto check_mix{[](const ErrType& str) { return str == std::string_view{\"Format specifiers must be all positional or all non-positional!\"}; }};\r\n     BOOST_CHECK_EXCEPTION(ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s%1$s\"), ErrType, check_mix);\r\n \r\n-    auto check_num_spec{[](const ErrType& str) { return str == std::string_view{\"Format specifier count must match the argument count!\"}; }};\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"\"), ErrType, check_num_spec);\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%s\"), ErrType, check_num_spec);\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%s\"), ErrType, check_num_spec);\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%1$s\"), ErrType, check_num_spec);\r\n-    BOOST_CHECK_EXCEPTION(ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%1$s\"), ErrType, check_num_spec);\r\n-\r\n     auto check_0_pos{[](const ErrType& str) { return str == std::string_view{\"Positional format specifier must have position of at least 1\"}; }};\r\n     BOOST_CHECK_EXCEPTION(ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%$s\"), ErrType, check_0_pos);\r\n     BOOST_CHECK_EXCEPTION(ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%$\"), ErrType, check_0_pos);\r\n```\r\n\r\n</details>\r\n\r\n#### Changes compared to fa26462e95291652b4021d91b014655f678149e8\r\n\r\n- Interlaced tinyformat calls to prove and document parity between compile time and runtime checks. (The purpose isn't to to test tinyformat). Now using the less verbose `BOOST_CHECK_THROW` for tinyformat instead of `BOOST_CHECK_EXCEPTION`.\r\n- Breaking apart test function into multiple functions.\r\n- Still dropping a few negative tests, since they are proven by positive tests, even if less straightforward without the free function.\r\n\r\n<details>\r\n<summary>\r\n\r\n#### Runtime performance comparison (+0.3ms/+1.8% longer)\r\n\r\n</summary>\r\n\r\nfa26462e95291652b4021d91b014655f678149e8 + diff:\r\n```\r\nhyperfine --warmup 100 \"ctest -j 20 --test-dir build -R util_string_tests\"\r\nBenchmark 1: ctest -j 20 --test-dir build -R util_string_tests\r\n  Time (mean ± σ):      16.8 ms ±   0.2 ms    [User: 11.4 ms, System: 6.1 ms]\r\n  Range (min … max):    16.2 ms …  17.8 ms    156 runs\r\n```\r\n\r\nfa26462e95291652b4021d91b014655f678149e8:\r\n```\r\nhyperfine --warmup 100 \"ctest -j 20 --test-dir build -R util_string_tests\"\r\nBenchmark 1: ctest -j 20 --test-dir build -R util_string_tests\r\n  Time (mean ± σ):      16.5 ms ±   0.2 ms    [User: 10.6 ms, System: 6.5 ms]\r\n  Range (min … max):    16.0 ms …  17.4 ms    154 runs\r\n```\r\n</details>",
      "created_at": "2024-09-12T08:01:15Z",
      "updated_at": "2024-09-12T08:01:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1756344649",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1756344649"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 29,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1756387736",
      "pull_request_review_id": 2299580084,
      "id": 1756387736,
      "node_id": "PRRC_kwDOABII585osFmY",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\n+{\n+    // Compile-time sanity checks\n+    static_assert([] {\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"%%s\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\"s%%\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%%%s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%s%%\");\n+        ConstevalFormatString<0>::Detail_CheckNumFormatSpecifiers(\" 1$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%1$s%1$s\");\n+        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s\");\n+        ConstevalFormatString<2>::Detail_CheckNumFormatSpecifiers(\"%2$s 4$s %2$s\");\n+        ConstevalFormatString<129>::Detail_CheckNumFormatSpecifiers(\"%129$s 999$s %2$s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%02d\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%+2s\");\n+        ConstevalFormatString<1>::Detail_CheckNumFormatSpecifiers(\"%+2s\");",
      "path": "src/test/util_string_tests.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa26462e95291652b4021d91b014655f678149e8",
      "in_reply_to_id": 1755352516,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I pushed a test-only change to reduce the verbosity of the test and also drop the accidental duplicate line.\r\n\r\nThe tests now look like `PassFmt<0>(\"\");` for the passing case and `FailFmtWithError<0>(\"%s\", check_num_spec);` for the failing case.\r\n\r\nI hope this change is acceptable for reviewers to review. Otherwise, I'll revert back to the previous commit hash.",
      "created_at": "2024-09-12T08:27:36Z",
      "updated_at": "2024-09-12T08:27:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1756387736",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1756387736"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": 31,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1756411531",
      "pull_request_review_id": 2299616926,
      "id": 1756411531,
      "node_id": "PRRC_kwDOABII585osLaL",
      "diff_hunk": "@@ -17,6 +17,54 @@\n #include <vector>\n \n namespace util {\n+/** Type to denote a format string that was checked at compile time */\n+template <unsigned num_params>\n+struct ConstevalFormatString {\n+    const char* const fmt;\n+    consteval ConstevalFormatString(const char* str) : fmt{str} { Detail_CheckNumFormatSpecifiers(fmt); }\n+    constexpr static void Detail_CheckNumFormatSpecifiers(std::string_view str)\n+    {\n+        unsigned count_nor{0}; // Number of \"normal\" specifiers, like %s\n+        unsigned count_pos{0}; // Max number in positional specifier, like %8$s\n+        bool begin_f{false};\n+        for (auto it{str.begin()}; it < str.end(); ++it) {\n+            bool perc{*it == '%'};\n+            if (begin_f) {\n+                // Almost any char is allowed by tinyformat to be used in a\n+                // format specifier, but a stricter check avoids bugs. For\n+                // instance, a strict check prevents consuming the newline\n+                // terminator in the format string \"%\\n\". Also, excluding '0'\n+                // avoids an out-of-range position error in tinyformat for the\n+                // format string \"%0$s\\n\".\n+                if (std::string_view{\"123456789aAcdfeEfFgGinopsuxX%\"}.find(*it) == std::string_view::npos) throw \"Invalid format specifier!\";\n+                auto it_num{it};\n+                unsigned maybe_num{0};\n+                while ('0' <= *it_num && *it_num <= '9') {\n+                    maybe_num *= 10;\n+                    maybe_num += *it_num - '0';\n+                    ++it_num;\n+                };\n+                if (it_num == it) {\n+                    // Non-positional specifier\n+                    count_nor += !perc;\n+                } else {\n+                    // Positional specifier\n+                    if (*it_num != '$' || std::string_view{\"aAcdfeEfFgGinopsuxX\"}.find(*(++it_num)) == std::string_view::npos) {\n+                        throw \"Invalid positional format specifier!\";\n+                    }\n+                    count_pos = std::max(count_pos, maybe_num);\n+                }\n+                begin_f = false;\n+                continue;\n+            }\n+            if (perc) begin_f = true;\n+        }\n+        if (count_nor && count_pos) throw \"Format specifiers must be all postitional or all non-positional!\";\n+        unsigned count{count_nor | count_pos};\n+        if (num_params != count) throw \"Format specifier count must match the argument count!\";",
      "path": "src/util/string.h",
      "position": 75,
      "original_position": 54,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa18f7cc9ac36ebe0fa8c381b1db76085812e95f",
      "in_reply_to_id": 1751669308,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> > The verbosity in tests is a bit annoying, but seems acceptable to me.\r\n> \r\n> I agree.\r\n\r\nI pushed a test-only change in the latest push to reduce the verbosity to a minimum.",
      "created_at": "2024-09-12T08:40:49Z",
      "updated_at": "2024-09-12T08:40:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1756411531",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1756411531"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 78,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1756443830",
      "pull_request_review_id": 2299664387,
      "id": 1756443830,
      "node_id": "PRRC_kwDOABII585osTS2",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace util;\n+\n+BOOST_AUTO_TEST_SUITE(util_string_tests)\n+\n+BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)",
      "path": "src/test/util_string_tests.cpp",
      "position": 29,
      "original_position": 13,
      "commit_id": "fae8c25d07cf003df1470699df4ef475055bb885",
      "original_commit_id": "fa26462e95291652b4021d91b014655f678149e8",
      "in_reply_to_id": 1755589971,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "<details>\r\n<summary>\r\n\r\n#### Diff on top of fae8c25d07cf003df1470699df4ef475055bb885\r\n\r\n</summary>\r\n\r\n```diff\r\ndiff --git a/src/test/util_string_tests.cpp b/src/test/util_string_tests.cpp\r\nindex 4c61632fce..ed383e9dad 100644\r\n--- a/src/test/util_string_tests.cpp\r\n+++ b/src/test/util_string_tests.cpp\r\n@@ -17,7 +17,53 @@ template <unsigned NumArgs>\r\n inline void PassFmt(util::ConstevalFormatString<NumArgs> fmt)\r\n {\r\n     decltype(fmt)::Detail_CheckNumFormatSpecifiers(fmt.fmt); // This was run at compile-time, but run it again at run-time to avoid -Wunused.\r\n+\r\n+    // Prove parity with tinyformat\r\n+    switch (NumArgs) {\r\n+    case 0:\r\n+        tfm::format(fmt.fmt);\r\n+        break;\r\n+    case 1:\r\n+        BOOST_CHECK_THROW(tfm::format(fmt.fmt), tfm::format_error);\r\n+        tfm::format(fmt.fmt, \"foo\");\r\n+        break;\r\n+    case 2:\r\n+        BOOST_CHECK_THROW(tfm::format(fmt.fmt), tfm::format_error);\r\n+        BOOST_CHECK_THROW(tfm::format(fmt.fmt, \"foo\"), tfm::format_error);\r\n+        tfm::format(fmt.fmt, \"foo\", \"bar\");\r\n+        break;\r\n+    case 12:\r\n+        BOOST_CHECK_THROW(tfm::format(fmt.fmt), tfm::format_error);\r\n+        BOOST_CHECK_THROW(tfm::format(fmt.fmt, \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"), tfm::format_error);\r\n+        tfm::format(fmt.fmt, \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\");\r\n+        break;\r\n+    }\r\n }\r\n+\r\n+template <unsigned WrongNumArgs, unsigned CorrectArgs>\r\n+inline void PassFmtIncorrect(util::ConstevalFormatString<WrongNumArgs> fmt)\r\n+{\r\n+    decltype(fmt)::Detail_CheckNumFormatSpecifiers(fmt.fmt); // This was run at compile-time, but run it again at run-time to avoid -Wunused.\r\n+\r\n+    // Disprove parity with tinyformat\r\n+    static_assert(WrongNumArgs != CorrectArgs);\r\n+    int a{}, b{}, c{};\r\n+    switch (CorrectArgs) {\r\n+    case 2:\r\n+        BOOST_CHECK_THROW(tfm::format(fmt.fmt), tfm::format_error);\r\n+        BOOST_CHECK_THROW(tfm::format(fmt.fmt, a), tfm::format_error);\r\n+        tfm::format(fmt.fmt, a, b);\r\n+        break;\r\n+    case 3:\r\n+        BOOST_CHECK_THROW(tfm::format(fmt.fmt), tfm::format_error);\r\n+        BOOST_CHECK_THROW(tfm::format(fmt.fmt, a), tfm::format_error);\r\n+        BOOST_CHECK_THROW(tfm::format(fmt.fmt, a, b), tfm::format_error);\r\n+        tfm::format(fmt.fmt, a, b, c);\r\n+        break;\r\n+    }\r\n+}\r\n+\r\n+// Executed at runtime as exceptions are not allowed at compile time.\r\n template <unsigned WrongNumArgs>\r\n inline void FailFmtWithError(std::string_view wrong_fmt, std::string_view error)\r\n {\r\n@@ -40,7 +86,7 @@ BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\r\n     PassFmt<1>(\"%1$s%1$s\");\r\n     PassFmt<2>(\"%2$s\");\r\n     PassFmt<2>(\"%2$s 4$s %2$s\");\r\n-    PassFmt<129>(\"%129$s 999$s %2$s\");\r\n+    PassFmt<12>(\"%12$s 999$s %2$s\");\r\n     PassFmt<1>(\"%02d\");\r\n     PassFmt<1>(\"%+2s\");\r\n     PassFmt<1>(\"%.6i\");\r\n@@ -58,9 +104,9 @@ BOOST_AUTO_TEST_CASE(ConstevalFormatString_NumSpec)\r\n     // The `*` specifier behavior is unsupported and can lead to runtime\r\n     // errors when used in a ConstevalFormatString. Please refer to the\r\n     // note in the ConstevalFormatString docs.\r\n-    PassFmt<1>(\"%*c\");\r\n-    PassFmt<2>(\"%2$*3$d\");\r\n-    PassFmt<1>(\"%.*f\");\r\n+    PassFmtIncorrect<1, 2>(\"%*c\");\r\n+    PassFmtIncorrect<2, 3>(\"%2$*3$d\");\r\n+    PassFmtIncorrect<1, 2>(\"%.*f\");\r\n \r\n     auto check_mix{\"Format specifiers must be all positional or all non-positional!\"};\r\n     FailFmtWithError<1>(\"%s%1$s\", check_mix);\r\n```\r\n</details>\r\n\r\n#### Changes compared to fae8c25d07cf003df1470699df4ef475055bb885\r\n\r\ntinyformat calls to prove and document parity/non-parity between compile time and runtime checks. (The purpose isn't to to test tinyformat). (Using the less verbose `BOOST_CHECK_THROW` for tinyformat instead of `BOOST_CHECK_EXCEPTION`).\r\n\r\n<details>\r\n<summary>\r\n\r\n#### Runtime performance comparison (+0.1ms/+0.6% longer)\r\n\r\n</summary\r\n\r\nfae8c25d07cf003df1470699df4ef475055bb885 + diff:\r\n```\r\nhyperfine --warmup 100 \"ctest -j 20 --test-dir build -R util_string_tests\"\r\nBenchmark 1: ctest -j 20 --test-dir build -R util_string_tests\r\n  Time (mean ± σ):      16.8 ms ±   0.4 ms    [User: 10.9 ms, System: 6.6 ms]\r\n  Range (min … max):    16.4 ms …  19.9 ms    154 runs\r\n```\r\n\r\nfae8c25d07cf003df1470699df4ef475055bb885:\r\n```\r\nhyperfine --warmup 100 \"ctest -j 20 --test-dir build -R util_string_tests\"\r\nBenchmark 1: ctest -j 20 --test-dir build -R util_string_tests\r\n  Time (mean ± σ):      16.7 ms ±   0.3 ms    [User: 10.8 ms, System: 6.6 ms]\r\n  Range (min … max):    16.2 ms …  17.8 ms    157 runs\r\n```\r\n</details>\r\n",
      "created_at": "2024-09-12T08:58:58Z",
      "updated_at": "2024-09-12T08:58:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30546#discussion_r1756443830",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1756443830"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30546"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 29,
      "original_line": 29,
      "side": "RIGHT"
    }
  ]
}