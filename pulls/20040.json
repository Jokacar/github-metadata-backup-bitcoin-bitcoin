{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
    "id": 495028689,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDk1MDI4Njg5",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20040",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/20040.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/20040.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20040",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20040/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
    "number": 20040,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "wallet: Refactor OutputGroups to handle fees and spending eligibility on grouping",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Even after #17458, we still deal with setting fees of an `OutputGroup` and filtering the `OutputGroup` outside of the struct. We currently make all of the `OutputGroup`s in `SelectCoins` and then copy and modify them within each `SelectCoinsMinConf` scenario. This PR changes this to constructing the `OutputGroup`s within the `SelectCoinsMinConf` so that the scenario can be taken into account during the group construction. Furthermore, setting of fees and filtering for effective value is moved into `OutputGroup::Insert` itself so that we don't add undesirable outputs to an `OutputGroup` rather than deleting them afterwards.\r\n\r\nTo facilitate fee calculation and effective value filtering during `OutputGroup::Insert`, `OutputGroup` now takes the feerates in its constructor and computes the fees and effective value for each output during `Insert`.\r\n\r\nWhile removing `OutputGroup`s in accordance with the `CoinEligibilityFilter` still requires creating the `OutputGroup`s first, we can do that within the function that makes them - `GroupOutput`s.",
    "labels": [
      {
        "id": 149424,
        "node_id": "MDU6TGFiZWwxNDk0MjQ=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
        "name": "Wallet",
        "color": "08a781",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2020-09-29T18:46:52Z",
    "updated_at": "2022-08-16T17:12:05Z",
    "closed_at": "2021-02-01T09:44:00Z",
    "mergeable_state": "unknown",
    "merged_at": "2021-02-01T09:44:00Z",
    "merge_commit_sha": "7dc4807691b96e53c04ef779501618325a7fafc0",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_teams": [],
    "head": {
      "label": "achow101:inner-groupoutputs",
      "ref": "inner-groupoutputs",
      "sha": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 45006379,
        "node_id": "MDEwOlJlcG9zaXRvcnk0NTAwNjM3OQ==",
        "name": "bitcoin",
        "full_name": "achow101/bitcoin",
        "owner": {
          "login": "achow101",
          "id": 3782274,
          "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/achow101",
          "html_url": "https://github.com/achow101",
          "followers_url": "https://api.github.com/users/achow101/followers",
          "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
          "organizations_url": "https://api.github.com/users/achow101/orgs",
          "repos_url": "https://api.github.com/users/achow101/repos",
          "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/achow101/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/achow101/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/achow101/bitcoin",
        "archive_url": "https://api.github.com/repos/achow101/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/achow101/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/achow101/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/achow101/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/achow101/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/achow101/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/achow101/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/achow101/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/achow101/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/achow101/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/achow101/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/achow101/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/achow101/bitcoin/events",
        "forks_url": "https://api.github.com/repos/achow101/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/achow101/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/achow101/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/achow101/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/achow101/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/achow101/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/achow101/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/achow101/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/achow101/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/achow101/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/achow101/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/achow101/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/achow101/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/achow101/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/achow101/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/achow101/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:achow101/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/achow101/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/achow101/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/achow101/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/achow101/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/achow101/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/achow101/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/achow101/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/achow101/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/achow101/bitcoin/hooks",
        "svn_url": "https://github.com/achow101/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 9,
        "stargazers_count": 35,
        "watchers_count": 35,
        "size": 243676,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-02T20:20:33Z",
        "created_at": "2015-10-27T00:20:28Z",
        "updated_at": "2023-07-28T14:25:30Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "0038ce97584f28b0718a4c9f4faa8c0c42c5fe80",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35476,
        "stargazers_count": 70608,
        "watchers_count": 70608,
        "size": 236222,
        "default_branch": "master",
        "open_issues_count": 672,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-02T20:20:41Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-08-02T18:21:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 199,
    "deletions": 192,
    "changed_files": 6,
    "commits": 7,
    "review_comments": 48,
    "comments": 7
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYWNhZDAzNjU3NWVjOTk4ZjhiYmU0ZjEwZjYyMDZiMWM4YWQzZDIz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2acad036575ec998f8bbe4f10f6206b1c8ad3d23",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2acad036575ec998f8bbe4f10f6206b1c8ad3d23",
      "tree": {
        "sha": "58420b89f1488449d6b7f0d82c7dc95fd977c06f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/58420b89f1488449d6b7f0d82c7dc95fd977c06f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de4b7f25acef14f98ed09b7cbaa065067313d24b",
          "sha": "de4b7f25acef14f98ed09b7cbaa065067313d24b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/de4b7f25acef14f98ed09b7cbaa065067313d24b"
        }
      ],
      "message": "Remove OutputGroup non-default constructors",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-09-29T18:25:11Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-08-31T19:10:49Z"
      },
      "sha": "2acad036575ec998f8bbe4f10f6206b1c8ad3d23"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTQ4YThhY2RhNWU1OTRiYjliM2IyZDk4OTA1NmY5ZTAzZGRiZGJk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6148a8acda5e594bb9b3b2d989056f9e03ddbdbd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6148a8acda5e594bb9b3b2d989056f9e03ddbdbd",
      "tree": {
        "sha": "2ab4579b18956238a978f63802dc6c6839a44ef2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ab4579b18956238a978f63802dc6c6839a44ef2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2acad036575ec998f8bbe4f10f6206b1c8ad3d23",
          "sha": "2acad036575ec998f8bbe4f10f6206b1c8ad3d23",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2acad036575ec998f8bbe4f10f6206b1c8ad3d23"
        }
      ],
      "message": "Move GroupOutputs into SelectCoinsMinConf",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-09-29T18:25:21Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-08-31T19:30:51Z"
      },
      "sha": "6148a8acda5e594bb9b3b2d989056f9e03ddbdbd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OWIzOTlhYmE1ZDI3NDc2YjYxYjQ4NjVjYzM5NTUzZDAzOTY1ZDU3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99b399aba5d27476b61b4865cc39553d03965d57",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/99b399aba5d27476b61b4865cc39553d03965d57",
      "tree": {
        "sha": "6a8c2425180d7dc6c136476197b691029f9e82ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6a8c2425180d7dc6c136476197b691029f9e82ae"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6148a8acda5e594bb9b3b2d989056f9e03ddbdbd",
          "sha": "6148a8acda5e594bb9b3b2d989056f9e03ddbdbd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6148a8acda5e594bb9b3b2d989056f9e03ddbdbd"
        }
      ],
      "message": "Move fee setting of OutputGroup to Insert\n\nOutputGroup will handle the fee and effective value computations\ninside of Insert. It now needs to take the effective feerate and long\nterm feerates as arguments to its constructor.",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-09-29T18:25:56Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-08-31T19:56:30Z"
      },
      "sha": "99b399aba5d27476b61b4865cc39553d03965d57"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODk1ZTk4YjU5NGI4NzNmM2QzNGM4YmE2M2U5YjU1MTI1ZDUxYjVh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d895e98b594b873f3d34c8ba63e9b55125d51b5a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d895e98b594b873f3d34c8ba63e9b55125d51b5a",
      "tree": {
        "sha": "d92766ee4d8666e540d04fba0dfb320be969cbbc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d92766ee4d8666e540d04fba0dfb320be969cbbc"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99b399aba5d27476b61b4865cc39553d03965d57",
          "sha": "99b399aba5d27476b61b4865cc39553d03965d57",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/99b399aba5d27476b61b4865cc39553d03965d57"
        }
      ],
      "message": "Move EligibleForSpending into GroupOutputs\n\nInstead of filtering after the OutputGroups have been made, do it as\nthey are being made.",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-09-29T18:26:03Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-08-31T20:35:56Z"
      },
      "sha": "d895e98b594b873f3d34c8ba63e9b55125d51b5a"
    },
    {
      "event": "renamed",
      "id": 3821164044,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MzgyMTE2NDA0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3821164044",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-29T18:49:42Z",
      "rename": {
        "from": "wallet: Refactor OutputGroups to handle fees and spending eligibility on insert",
        "to": "wallet: Refactor OutputGroups to handle fees and spending eligibility on grouping"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3821429252,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzgyMTQyOTI1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3821429252",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-29T19:55:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3821478016,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzgyMTQ3ODAxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3821478016",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-29T20:07:58Z"
    },
    {
      "event": "labeled",
      "id": 3821495489,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM4MjE0OTU0ODk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3821495489",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-29T20:12:58Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-29T21:37:13Z",
      "updated_at": "2020-09-29T21:37:13Z",
      "source": {
        "issue": {
          "id": 515669728,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzM1MDkxNTQ4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17331",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17331/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17331/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17331/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/17331",
          "number": 17331,
          "state": "closed",
          "state_reason": null,
          "title": "Use effective values throughout coin selection",
          "body": "Changes `KnapsackSolver` to use effective values instead of just the nominal txout value. Since fees are taken into account during the selection itself, we finally get rid of the `CreateTransaction` loop as well as a few other things that only were only necessary because of that loop.\r\n\r\nThis should not change coin selection behavior at all (except maybe remove weird edge cases that were caused by the loop). In order to keep behavior the same, `KnapsackSolver` will select outputs with a negative effective value (as it did before).",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 18,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17331",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/17331",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/17331.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/17331.patch"
          },
          "closed_at": "2021-05-25T13:35:55Z",
          "created_at": "2019-10-31T18:59:06Z",
          "updated_at": "2022-08-16T17:23:01Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 701061868,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwMTA2MTg2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/701061868",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-30T00:18:21Z",
      "updated_at": "2020-12-03T05:30:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18418 (wallet: Increase OUTPUT_GROUP_MAX_ENTRIES to 100 by fjahr)\n* #17526 (Use Single Random Draw In addition to knapsack as coin selection fallback by achow101)\n* #17355 (gui: grey out used address in address book by za-kk)\n* #17331 (Use effective values throughout coin selection by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#issuecomment-701061868",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20040"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-30T02:52:35Z",
      "updated_at": "2020-09-30T02:52:35Z",
      "source": {
        "issue": {
          "id": 587034374,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzkzMDUxODEz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18418",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18418/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18418/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18418/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18418",
          "number": 18418,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Increase OUTPUT_GROUP_MAX_ENTRIES to 100",
          "body": "Follow-up to #17824.\r\n\r\nThis increases OUTPUT_GROUP_MAX_ENTRIES to 100 which means that OutputGroups will now be up to 100 outputs large, up from previously 10. The main motivation for this change is that during the PR review club on #17824 [several participants signaled](https://bitcoincore.reviews/17824.html#l-339) that 100 might be a better value here.\r\n\r\nI think fees should be manageable for users but more importantly, users should know what they can expect when using the wallet with this configuration, so I also tried to clarify the documentation on `-avoidpartialspends` and `avoid_reuse` a bit. If there are other additional ways how or docs where users can be made aware of the potential consequences of using these parameters, please let me know. Another small upside is that [there seem to be a high number of batching transactions with 100 and 200 inputs](https://miro.medium.com/max/3628/1*sZ5eaBSbsJsHx-J9iztq2g.png)([source](https://medium.com/@hasufly/an-analysis-of-batching-in-bitcoin-9bdf81a394e0)) giving these transactions a bit of a larger anonymity set, although that is probably a very weak argument. ",
          "user": {
            "login": "fjahr",
            "id": 1322187,
            "node_id": "MDQ6VXNlcjEzMjIxODc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fjahr",
            "html_url": "https://github.com/fjahr",
            "followers_url": "https://api.github.com/users/fjahr/followers",
            "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
            "organizations_url": "https://api.github.com/users/fjahr/orgs",
            "repos_url": "https://api.github.com/users/fjahr/repos",
            "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/fjahr/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 28,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18418",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18418",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18418.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18418.patch"
          },
          "closed_at": "2021-05-26T11:33:37Z",
          "created_at": "2020-03-24T15:13:40Z",
          "updated_at": "2022-08-16T17:23:08Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-30T03:14:10Z",
      "updated_at": "2020-09-30T03:14:10Z",
      "source": {
        "issue": {
          "id": 525313174,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzQyOTI5NTAy",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17526",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17526/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17526/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17526/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/17526",
          "number": 17526,
          "state": "closed",
          "state_reason": null,
          "title": "Add Single Random Draw as an additional coin selection algorithm",
          "body": "To ease in the use of SRD as our fallback mechanism, this PR adds it as a secondary fallback algorithm in addition to the knapsack solver. Since #22009, the solution with the least waste will be chosen. This pattern is continued with SRD simply being another solution whose waste is compared.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 25,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17526",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/17526",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/17526.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/17526.patch"
          },
          "closed_at": "2021-09-28T01:36:31Z",
          "created_at": "2019-11-19T22:47:59Z",
          "updated_at": "2023-03-22T10:20:18Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-30T03:17:27Z",
      "updated_at": "2020-09-30T03:17:27Z",
      "source": {
        "issue": {
          "id": 516676752,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzM1OTA0MjIz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17355",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17355/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17355/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17355/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/17355",
          "number": 17355,
          "state": "closed",
          "state_reason": null,
          "title": "gui: grey out used address in address book",
          "body": "Implements issue #17174, to grey out used addresses in the address book when the wallet has the `avoid_reuse` flag set.\r\n\r\nthis commit brings the `IsUsedDestination` method into the `Wallet.h` interface. It is then called in `addresstablemodel.cpp` to determine whether the address has been used or not whilst setting the font colour\r\n\r\nmaster\r\n<img width=\"840\" alt=\"Screenshot 2019-11-02 at 17 36 51\" src=\"https://user-images.githubusercontent.com/31032215/68075122-897dec00-fd9b-11e9-95ac-4a8f36635cc9.png\">\r\n\r\npr\r\n<img width=\"836\" alt=\"Screenshot 2019-11-02 at 17 33 41\" src=\"https://user-images.githubusercontent.com/31032215/68075130-9e5a7f80-fd9b-11e9-93e3-6d687b982c34.png\">\r\n\r\n",
          "user": {
            "login": "za-kk",
            "id": 31032215,
            "node_id": "MDQ6VXNlcjMxMDMyMjE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/31032215?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/za-kk",
            "html_url": "https://github.com/za-kk",
            "followers_url": "https://api.github.com/users/za-kk/followers",
            "following_url": "https://api.github.com/users/za-kk/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/za-kk/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/za-kk/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/za-kk/subscriptions",
            "organizations_url": "https://api.github.com/users/za-kk/orgs",
            "repos_url": "https://api.github.com/users/za-kk/repos",
            "events_url": "https://api.github.com/users/za-kk/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/za-kk/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 749416508,
              "node_id": "MDU6TGFiZWw3NDk0MTY1MDg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Up%20for%20grabs",
              "name": "Up for grabs",
              "color": "99a810",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "comments": 39,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17355",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/17355",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/17355.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/17355.patch"
          },
          "closed_at": "2021-11-14T15:02:54Z",
          "created_at": "2019-11-02T18:12:59Z",
          "updated_at": "2022-11-14T13:09:45Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3831409388,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzgzMTQwOTM4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3831409388",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-01T20:53:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3831962507,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzgzMTk2MjUwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3831962507",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-02T00:48:25Z"
    },
    {
      "event": "reviewed",
      "id": 501147294,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMTQ3Mjk0",
      "url": null,
      "actor": null,
      "commit_id": "6148a8acda5e594bb9b3b2d989056f9e03ddbdbd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "\r\n",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#pullrequestreview-501147294",
      "submitted_at": "2020-10-02T14:12:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTZkNzRmYjE2ODdhZTFkNDdhNThjMTUzZDA5ZDlhZmUwYjZkYzYw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/416d74fb1687ae1d47a58c153d09d9afe0b6dc60",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/416d74fb1687ae1d47a58c153d09d9afe0b6dc60",
      "tree": {
        "sha": "bd3fef5010a23b8fdcdd4f6f06d6a54aa0b71865",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd3fef5010a23b8fdcdd4f6f06d6a54aa0b71865"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d895e98b594b873f3d34c8ba63e9b55125d51b5a",
          "sha": "d895e98b594b873f3d34c8ba63e9b55125d51b5a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d895e98b594b873f3d34c8ba63e9b55125d51b5a"
        }
      ],
      "message": "Move OutputGroup positive only filtering into Insert",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-02T16:35:04Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-08-31T20:45:39Z"
      },
      "sha": "416d74fb1687ae1d47a58c153d09d9afe0b6dc60"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNmIzMDUyNzM5MTBkYjBlNDY3OThkMzYxNDEzYTdlODc4Y2I0NWY3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6b305273910db0e46798d361413a7e878cb45f7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f6b305273910db0e46798d361413a7e878cb45f7",
      "tree": {
        "sha": "7846e45d9059d90b7c807fc839ef9c3e37f198da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7846e45d9059d90b7c807fc839ef9c3e37f198da"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/416d74fb1687ae1d47a58c153d09d9afe0b6dc60",
          "sha": "416d74fb1687ae1d47a58c153d09d9afe0b6dc60",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/416d74fb1687ae1d47a58c153d09d9afe0b6dc60"
        }
      ],
      "message": "Explicitly filter out partial groups when we don't want them\n\nInstead of hacking OutputGroup::m_ancestors to discourage the inclusion\nof partial groups via the eligibility filter, add a parameter to the\neligibility filter that indicates whether we want to include the group.\nThen for those partial groups, don't return them in GroupOutputs if we\nindicate they aren't desired.",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-02T16:35:22Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-01T17:43:17Z"
      },
      "sha": "f6b305273910db0e46798d361413a7e878cb45f7"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3835012053,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzgzNTAxMjA1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3835012053",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-02T17:45:20Z"
    },
    {
      "event": "commented",
      "id": 702964010,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwMjk2NDAxMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/702964010",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-02T21:22:29Z",
      "updated_at": "2020-10-02T21:22:29Z",
      "author_association": "MEMBER",
      "body": "ACK https://github.com/bitcoin/bitcoin/pull/20040/commits/f6b305273910db0e46798d361413a7e878cb45f7",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#issuecomment-702964010",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20040"
    },
    {
      "event": "commented",
      "id": 706470625,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjQ3MDYyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/706470625",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-10T02:22:33Z",
      "updated_at": "2020-10-10T02:22:33Z",
      "author_association": "MEMBER",
      "body": "cc @Xekyo ",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#issuecomment-706470625",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20040"
    },
    {
      "event": "mentioned",
      "id": 3862269097,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzg2MjI2OTA5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3862269097",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-10T02:22:33Z"
    },
    {
      "event": "subscribed",
      "id": 3862269100,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4NjIyNjkxMDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3862269100",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-10T02:22:34Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-14T01:50:47Z",
      "updated_at": "2020-11-14T01:50:47Z",
      "source": {
        "issue": {
          "id": 510304768,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzMwNzAyNTU0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17211",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17211/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17211/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17211/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/17211",
          "number": 17211,
          "state": "closed",
          "state_reason": null,
          "title": "Allow fundrawtransaction and walletcreatefundedpsbt to take external inputs",
          "body": "Currently `fundrawtransaction` and `walletcreatefundedpsbt` both do not allow external inputs as the wallet does not have the information necessary to estimate their fees.\r\n\r\nThis PR adds an additional argument to both those RPCs which allows the user to specify solving data. This way, the wallet can use that solving data to estimate the size of those inputs. The solving data can be public keys, scripts, or descriptors.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 19,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17211",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/17211",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/17211.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/17211.patch"
          },
          "closed_at": "2021-10-04T09:08:48Z",
          "created_at": "2019-10-21T21:29:04Z",
          "updated_at": "2022-10-30T19:10:34Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "added_to_project",
      "id": 4017597182,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQ0MDE3NTk3MTgy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4017597182",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-19T19:44:56Z",
      "project_card": {
        "id": 49716278,
        "url": "https://api.github.com/projects/columns/cards/49716278",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "reviewed",
      "id": 538010853,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MDEwODUz",
      "url": null,
      "actor": null,
      "commit_id": "99b399aba5d27476b61b4865cc39553d03965d57",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#pullrequestreview-538010853",
      "submitted_at": "2020-11-24T22:35:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
    },
    {
      "event": "commented",
      "id": 736068730,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczNjA2ODczMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/736068730",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-30T21:31:05Z",
      "updated_at": "2020-11-30T21:31:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code Review ACK https://github.com/bitcoin/bitcoin/pull/20040/commits/f6b305273910db0e46798d361413a7e878cb45f7",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#issuecomment-736068730",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20040"
    },
    {
      "event": "commented",
      "id": 736070103,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczNjA3MDEwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/736070103",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-30T21:34:06Z",
      "updated_at": "2020-11-30T21:34:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "Disclaimer:\r\n@achow101  has walked me throw the PR, I have reviewed it at least twice. I think that the concept makes sense, but I'm not familiar with the wallet code globally and my C++ is somewhat rusty.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#issuecomment-736070103",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20040"
    },
    {
      "event": "mentioned",
      "id": 4054054882,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDA1NDA1NDg4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4054054882",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-30T21:34:06Z"
    },
    {
      "event": "subscribed",
      "id": 4054054887,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQwNTQwNTQ4ODc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4054054887",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-30T21:34:06Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-08T20:19:50Z",
      "updated_at": "2020-12-08T20:19:50Z",
      "source": {
        "issue": {
          "id": 759274112,
          "node_id": "MDU6SXNzdWU3NTkyNzQxMTI=",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20598",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20598/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20598/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20598/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/20598",
          "number": 20598,
          "state": "closed",
          "state_reason": "completed",
          "title": "Coin selection algorithm not working as expected resulting in more fees",
          "body": "One user reported the issue on Bitcoin SE: https://bitcoin.stackexchange.com/questions/100437/bitcoin-cli-0-19-1-wallet-not-sending-from-addresses-with-closest-amount\r\n\r\n_UTXO A_ : 0.5 BTC\r\n_UTXO B-Z_ : 0.5 BTC\r\n\r\n_UTXO B-Z_ are selected instead of _UTXO A_ as the input for the transaction if I try to pay someone 0.5 BTC or more. Size of transaction is increased so user has to pay _more fees_. \r\n\r\n**Expected behavior**\r\n\r\n_UTXO A_ should be selected as input automatically which will decrease the size of transaction and fees.\r\n\r\n**To reproduce**\r\n\r\nI tried to reproduce the issue by following below steps:\r\n\r\n1. Create 850 addresses in bitcoin core: `for ($i=1; $i -le 850; $i++) {.\\bitcoin-cli.exe getnewaddress}`\r\n\r\n2. Add random amounts similar to the transaction mentioned by user in the issue: `81e681e4d7ed58a7645b3d8ae38c584e14954c359e3db8788b5ef645d65e9e64`\r\n\r\n   CSV file with address and amounts: https://mega.nz/file/ixsyjDYC#19Ff2qZP7LQjCvhz4ISF84uESPBesWrZmMVngJWGMOk\r\n\r\n3. Create, Sign and Broadcast a transaction to one of the address in my bitcoin core wallet using above CSV file from electrum wallet\r\n\r\n   Tx: https://blockstream.info/testnet/tx/b5c6c6dd204420020795fbf356d4db85a9398dbd99e575c72b76ec5f8d8d78e2\r\n\r\n4. Send 0.54 BTC in one more transaction to my bitcoin core wallet: \r\n\r\n   https://blockstream.info/testnet/tx/37675b6d44d1fe1b8095349f5d08d12197cee76504a0da6b0ab99fb29a4fa176\r\n\r\n5. Finally we have a similar setup in bitcoin core to reproduce the issue. Try to send 0.49 BTC to some address and very small amounts to few other addresses by creating a transaction in bitcoin core wallet as the user did in tx mentioned on SE: https://i.imgur.com/utWKiZN.png\r\n\r\n    https://i.imgur.com/WtduQx8.png\r\n\r\n6. If I do not use \"coin control features\" and inputs are selected automatically:\r\n\r\n![image](https://user-images.githubusercontent.com/13405205/101463156-12823200-3963-11eb-84e6-b0dc22d50019.png)\r\n\r\n7. If use \"coin control features\" and select [UTXO with 0.54 BTC](https://i.imgur.com/0sBn3wE.png):\r\n\r\n![image](https://user-images.githubusercontent.com/13405205/101463464-77d62300-3963-11eb-9605-e55f1addcf8a.png)\r\n\r\n**System information**\r\n\r\nBitcoin Core v 0.20.0\r\n\r\n**Additional information**\r\n\r\nStill trying to understand how [Coin Selection Algorithm](https://bitcoin.stackexchange.com/questions/1077/what-is-the-coin-selection-algorithm) works, why it didn't select `tb1qztazgd5665j9q0ww7qw24ms42gny6vc2h3z5yg` as input automatically and how can we fix this.\r\n\r\nThe user has mentioned on SE: \r\n> I have a feeling that coin control favors more inputs with less combined \"change\" over less inputs with more combined change. In this case the change address (3BF5VhQgnabWMsB8QhVrBoWD6is2XMKuQs) received 0.00008051 BTC, where the input with the closest full amount amount would have resulted in (0.02544158 - tx fee) in change\r\n",
          "user": {
            "login": "ghost",
            "id": 10137,
            "node_id": "MDQ6VXNlcjEwMTM3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ghost",
            "html_url": "https://github.com/ghost",
            "followers_url": "https://api.github.com/users/ghost/followers",
            "following_url": "https://api.github.com/users/ghost/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ghost/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ghost/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
            "organizations_url": "https://api.github.com/users/ghost/orgs",
            "repos_url": "https://api.github.com/users/ghost/repos",
            "events_url": "https://api.github.com/users/ghost/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ghost/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64585,
              "node_id": "MDU6TGFiZWw2NDU4NQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Bug",
              "name": "Bug",
              "color": "FBBAAB",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "NONE",
          "locked": true,
          "comments": 19,
          "closed_at": "2021-10-07T13:53:02Z",
          "created_at": "2020-12-08T09:22:22Z",
          "updated_at": "2022-11-03T17:17:57Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 741305599,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0MTMwNTU5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/741305599",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-09T00:23:54Z",
      "updated_at": "2020-12-09T00:23:54Z",
      "author_association": "MEMBER",
      "body": "I've added a commit to rewrite `GroupOutputs` based on the comments left in downstream PR review (https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536209337)",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#issuecomment-741305599",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20040"
    },
    {
      "event": "reviewed",
      "id": 548714910,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NzE0OTEw",
      "url": null,
      "actor": null,
      "commit_id": "97256cabb3723dee32dc20aade7d3ae618cff59c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Just reviewed 97256cabb3723dee32dc20aade7d3ae618cff59c\r\n\r\nIt's much clearer, thank you also for the illustrative comments. Have a few naming suggestions.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#pullrequestreview-548714910",
      "submitted_at": "2020-12-10T00:43:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDQ1OTc2NjZkNTg5ZTM5MzU0ZTBkOGRkNWIyYWZiZTFhNWQ3ZDhl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "tree": {
        "sha": "20dbe7851e2879779a30f9c3409d1c3542759c06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20dbe7851e2879779a30f9c3409d1c3542759c06"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6b305273910db0e46798d361413a7e878cb45f7",
          "sha": "f6b305273910db0e46798d361413a7e878cb45f7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f6b305273910db0e46798d361413a7e878cb45f7"
        }
      ],
      "message": "Rewrite OutputGroups to be clearer and to use scriptPubKeys\n\nRewrite OutputGroups so that the logic is easier to follow and\nunderstand.\n\nThere is a slight behavior change as OutputGroups will be grouped by\nscriptPubKey rather than CTxDestination as before. This should have no\neffect on users as all addresses are a CTxDestination. However by using\nscriptPubKeys, we can correctly group outputs which fall into the\nNoDestination case. But we also shouldn't have any NoDestination\noutputs.",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-12-10T01:18:05Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-12-09T00:19:35Z"
      },
      "sha": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4092718087,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDA5MjcxODA4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4092718087",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-10T01:21:31Z"
    },
    {
      "event": "reviewed",
      "id": 548791890,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NzkxODkw",
      "url": null,
      "actor": null,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK: https://github.com/bitcoin/bitcoin/pull/20040/commits/5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#pullrequestreview-548791890",
      "submitted_at": "2020-12-10T03:31:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
    },
    {
      "event": "reviewed",
      "id": 560596635,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwNTk2NjM1",
      "url": null,
      "actor": null,
      "commit_id": "99b399aba5d27476b61b4865cc39553d03965d57",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e\r\n\r\nNice refactoring! I had a bunch of suggestions for small improvements but I don't consider them blocking for a merge.\r\n\r\nOne more comment: The behavior change in 416d74fb1687ae1d47a58c153d09d9afe0b6dc60 could be noted a little more explicitly I think. Before this change, the `OutputGroup`s are filled up and then filtered for positive-only later, sometimes then using groups that are not filled completely in coin selection. Now, since the non-positive coins are never inserted we will have full groups with only positive values. This will lead to different results in certain cases. I think this is an improvement and I don't see any issues arise from it but it wouldn't hurt to mention it in the commit message as it is in 5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#pullrequestreview-560596635",
      "submitted_at": "2021-01-01T21:58:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
    },
    {
      "event": "commented",
      "id": 769311295,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2OTMxMTI5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/769311295",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-28T19:14:23Z",
      "updated_at": "2021-01-28T19:14:23Z",
      "author_association": "MEMBER",
      "body": "@fjahr Since this now has two ACKs, I'm going to leave this as-is for now.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#issuecomment-769311295",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20040"
    },
    {
      "event": "mentioned",
      "id": 4262717071,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDI2MjcxNzA3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4262717071",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-28T19:14:23Z"
    },
    {
      "event": "subscribed",
      "id": 4262717074,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyNjI3MTcwNzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4262717074",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-28T19:14:23Z"
    },
    {
      "event": "review_requested",
      "id": 4264864845,
      "node_id": "MDIwOlJldmlld1JlcXVlc3RlZEV2ZW50NDI2NDg2NDg0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4264864845",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-29T07:56:12Z",
      "requested_reviewer": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 4264865784,
      "node_id": "MDIwOlJldmlld1JlcXVlc3RlZEV2ZW50NDI2NDg2NTc4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4264865784",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-29T07:56:30Z",
      "requested_reviewer": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "reviewed",
      "id": 580125543,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgwMTI1NTQz",
      "url": null,
      "actor": null,
      "commit_id": "d895e98b594b873f3d34c8ba63e9b55125d51b5a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Light utACK 5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e\r\n\r\nNice cleanup thanks Andrew!",
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#pullrequestreview-580125543",
      "submitted_at": "2021-02-01T09:02:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
    },
    {
      "event": "merged",
      "id": 4272623828,
      "node_id": "MDExOk1lcmdlZEV2ZW50NDI3MjYyMzgyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4272623828",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7dc4807691b96e53c04ef779501618325a7fafc0",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7dc4807691b96e53c04ef779501618325a7fafc0",
      "created_at": "2021-02-01T09:44:00Z"
    },
    {
      "event": "closed",
      "id": 4272623847,
      "node_id": "MDExOkNsb3NlZEV2ZW50NDI3MjYyMzg0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4272623847",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-01T09:44:00Z"
    },
    {
      "event": "removed_from_project",
      "id": 4275450963,
      "node_id": "MDIzOlJlbW92ZWRGcm9tUHJvamVjdEV2ZW50NDI3NTQ1MDk2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4275450963",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-01T19:10:20Z",
      "project_card": {
        "id": 49716278,
        "url": "https://api.github.com/projects/columns/cards/49716278",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "referenced",
      "id": 4276666491,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQyNzY2NjY0OTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4276666491",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d9c59c9bceee62331c7415d3ca9c46eda812e97e",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/d9c59c9bceee62331c7415d3ca9c46eda812e97e",
      "created_at": "2021-02-02T01:01:19Z"
    },
    {
      "event": "locked",
      "id": 7199066775,
      "node_id": "LOE_lADOABII584qZoBXzwAAAAGtGQqX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7199066775",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-16T17:12:05Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498830108",
      "pull_request_review_id": 501147294,
      "id": 498830108,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgzMDEwOA==",
      "diff_hunk": "@@ -610,8 +610,16 @@ struct CoinSelectionParams\n     size_t tx_noinputs_size = 0;\n     //! Indicate that we are subtracting the fee from outputs\n     bool m_subtract_fee_outputs = false;\n-\n-    CoinSelectionParams(bool use_bnb, size_t change_output_size, size_t change_spend_size, CFeeRate effective_fee, size_t tx_noinputs_size) : use_bnb(use_bnb), change_output_size(change_output_size), change_spend_size(change_spend_size), effective_fee(effective_fee), tx_noinputs_size(tx_noinputs_size) {}\n+    bool m_avoid_partial_spends = false;\n+\n+    CoinSelectionParams(bool use_bnb, size_t change_output_size, size_t change_spend_size, CFeeRate effective_fee, size_t tx_noinputs_size, bool avoid_partial) :",
      "path": "src/wallet/wallet.h",
      "position": 8,
      "original_position": 8,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "6148a8acda5e594bb9b3b2d989056f9e03ddbdbd",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "musing: this constructor only seems useful for tests",
      "created_at": "2020-10-02T13:43:54Z",
      "updated_at": "2020-12-10T01:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498830108",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498830108"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 615,
      "original_line": 615,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498839221",
      "pull_request_review_id": 501147294,
      "id": 498839221,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgzOTIyMQ==",
      "diff_hunk": "@@ -300,16 +300,24 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n  ******************************************************************************/\n \n-void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n+void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants, bool positive_only) {\n+    // Compute the effective value first\n+    CAmount coin_fee = output.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(output.m_input_bytes);\n+    CAmount ev = output.txout.nValue - coin_fee;",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "4b15eae4fce88704bbae818eb16b0fc263b325b2",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "const",
      "created_at": "2020-10-02T13:59:03Z",
      "updated_at": "2020-12-10T01:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498839221",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498839221"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 306,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498839303",
      "pull_request_review_id": 501147294,
      "id": 498839303,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgzOTMwMw==",
      "diff_hunk": "@@ -300,16 +300,24 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n  ******************************************************************************/\n \n-void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n+void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants, bool positive_only) {\n+    // Compute the effective value first\n+    CAmount coin_fee = output.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(output.m_input_bytes);",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "4b15eae4fce88704bbae818eb16b0fc263b325b2",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "const",
      "created_at": "2020-10-02T13:59:11Z",
      "updated_at": "2020-12-10T01:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498839303",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498839303"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 305,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498844850",
      "pull_request_review_id": 501147294,
      "id": 498844850,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0NDg1MA==",
      "diff_hunk": "@@ -2489,8 +2489,8 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, 2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max()), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1, true), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "d4b8b8d25a9d4202ec07dbb59047eca0142153d0",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: annotate the new bool\r\n\r\nAlso why is this being set to true? I thought that we get more *relaxed* as we fail to select with \"nicer\" coin sets? This seems to make it a tighter criteria?",
      "created_at": "2020-10-02T14:08:28Z",
      "updated_at": "2020-12-10T01:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498844850",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498844850"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2492,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498844979",
      "pull_request_review_id": 501147294,
      "id": 498844979,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0NDk3OQ==",
      "diff_hunk": "@@ -2489,8 +2489,8 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, 2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max()), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1, true), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n+        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max(), std::numeric_limits<uint64_t>::max(), true), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "d4b8b8d25a9d4202ec07dbb59047eca0142153d0",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: annotate the new bool",
      "created_at": "2020-10-02T14:08:40Z",
      "updated_at": "2020-12-10T01:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498844979",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498844979"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2493,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498845092",
      "pull_request_review_id": 501147294,
      "id": 498845092,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0NTA5Mg==",
      "diff_hunk": "@@ -4235,9 +4235,9 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n     if (!single_coin) {\n         for (auto& it : gmap) {\n             auto& group = it.second;\n-            if (full_groups.count(it.first) > 0) {\n-                // Make this unattractive as we want coin selection to avoid it if possible\n-                group.m_ancestors = max_ancestors - 1;\n+            if (full_groups.count(it.first) > 0 && !filter.m_include_partial_groups) {\n+                // Don't include partial groups if we don't want them yet",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "d4b8b8d25a9d4202ec07dbb59047eca0142153d0",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yet?",
      "created_at": "2020-10-02T14:08:53Z",
      "updated_at": "2020-12-10T01:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498845092",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498845092"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4239,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498927088",
      "pull_request_review_id": 501282076,
      "id": 498927088,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyNzA4OA==",
      "diff_hunk": "@@ -2489,8 +2489,8 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, 2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max()), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1, true), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "d4b8b8d25a9d4202ec07dbb59047eca0142153d0",
      "in_reply_to_id": 498844850,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, it's less restrictive. When it is false, we won't include partial groups. When is true, we do. At least that is the intended behavior.",
      "created_at": "2020-10-02T16:32:06Z",
      "updated_at": "2020-12-10T01:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498927088",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498927088"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2492,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498928313",
      "pull_request_review_id": 501283713,
      "id": 498928313,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyODMxMw==",
      "diff_hunk": "@@ -2489,8 +2489,8 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, 2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max()), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1, true), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "d4b8b8d25a9d4202ec07dbb59047eca0142153d0",
      "in_reply_to_id": 498844850,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ahhhh, I had \"avoid partial\" in my head for this.",
      "created_at": "2020-10-02T16:34:33Z",
      "updated_at": "2020-12-10T01:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498928313",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498928313"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2492,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498928438",
      "pull_request_review_id": 501283899,
      "id": 498928438,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyODQzOA==",
      "diff_hunk": "@@ -2489,8 +2489,8 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, 2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max()), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1, true), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "d4b8b8d25a9d4202ec07dbb59047eca0142153d0",
      "in_reply_to_id": 498844850,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "so yes, annotation is :ok_hand: because it would have fixed my thought here",
      "created_at": "2020-10-02T16:34:51Z",
      "updated_at": "2020-12-10T01:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498928438",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498928438"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2492,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498962378",
      "pull_request_review_id": 501329653,
      "id": 498962378,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2MjM3OA==",
      "diff_hunk": "@@ -300,16 +300,24 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n  ******************************************************************************/\n \n-void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n+void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants, bool positive_only) {\n+    // Compute the effective value first\n+    CAmount coin_fee = output.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(output.m_input_bytes);\n+    CAmount ev = output.txout.nValue - coin_fee;",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "4b15eae4fce88704bbae818eb16b0fc263b325b2",
      "in_reply_to_id": 498839221,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-02T17:45:25Z",
      "updated_at": "2020-12-10T01:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498962378",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498962378"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 306,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498962401",
      "pull_request_review_id": 501329697,
      "id": 498962401,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2MjQwMQ==",
      "diff_hunk": "@@ -300,16 +300,24 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n  ******************************************************************************/\n \n-void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n+void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants, bool positive_only) {\n+    // Compute the effective value first\n+    CAmount coin_fee = output.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(output.m_input_bytes);",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "4b15eae4fce88704bbae818eb16b0fc263b325b2",
      "in_reply_to_id": 498839303,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-02T17:45:29Z",
      "updated_at": "2020-12-10T01:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498962401",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498962401"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 305,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498962440",
      "pull_request_review_id": 501329746,
      "id": 498962440,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2MjQ0MA==",
      "diff_hunk": "@@ -2489,8 +2489,8 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, 2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max()), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1, true), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "d4b8b8d25a9d4202ec07dbb59047eca0142153d0",
      "in_reply_to_id": 498844850,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Annotated",
      "created_at": "2020-10-02T17:45:35Z",
      "updated_at": "2020-12-10T01:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498962440",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498962440"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2492,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498962489",
      "pull_request_review_id": 501329804,
      "id": 498962489,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2MjQ4OQ==",
      "diff_hunk": "@@ -2489,8 +2489,8 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, 2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max()), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1, true), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n+        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max(), std::numeric_limits<uint64_t>::max(), true), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "d4b8b8d25a9d4202ec07dbb59047eca0142153d0",
      "in_reply_to_id": 498844979,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-02T17:45:41Z",
      "updated_at": "2020-12-10T01:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498962489",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498962489"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2493,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498962524",
      "pull_request_review_id": 501329849,
      "id": 498962524,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2MjUyNA==",
      "diff_hunk": "@@ -4235,9 +4235,9 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n     if (!single_coin) {\n         for (auto& it : gmap) {\n             auto& group = it.second;\n-            if (full_groups.count(it.first) > 0) {\n-                // Make this unattractive as we want coin selection to avoid it if possible\n-                group.m_ancestors = max_ancestors - 1;\n+            if (full_groups.count(it.first) > 0 && !filter.m_include_partial_groups) {\n+                // Don't include partial groups if we don't want them yet",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "d4b8b8d25a9d4202ec07dbb59047eca0142153d0",
      "in_reply_to_id": 498845092,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "removed",
      "created_at": "2020-10-02T17:45:46Z",
      "updated_at": "2020-12-10T01:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498962524",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498962524"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4239,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529927059",
      "pull_request_review_id": 538010853,
      "id": 529927059,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkyNzA1OQ==",
      "diff_hunk": "@@ -302,6 +302,16 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n     m_outputs.push_back(output);\n+    CInputCoin& coin = m_outputs.back();\n+    coin.m_fee = coin.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(coin.m_input_bytes);",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "99b399aba5d27476b61b4865cc39553d03965d57",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think I have asked this before, but why can `m_input_bytes` ever be below zero here? Perhaps it would be good to have a comment to explain that.",
      "created_at": "2020-11-24T22:14:14Z",
      "updated_at": "2020-12-10T01:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r529927059",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529927059"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 306,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529935159",
      "pull_request_review_id": 538010853,
      "id": 529935159,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzNTE1OQ==",
      "diff_hunk": "@@ -4237,8 +4230,10 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n                     ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n                 }\n             } else {\n-                groups.emplace_back(effective_feerate, long_term_feerate);\n-                groups.back().Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n+                // This is for if each output gets it's own OutputGroup\n+                OutputGroup coin(effective_feerate, long_term_feerate);\n+                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n+                if (coin.EligibleForSpending(filter)) groups.push_back(coin);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "d895e98b594b873f3d34c8ba63e9b55125d51b5a",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Wouldn't this mean that if you got a tiny and a large UTXO associated with the same address that you would potentially form a OutputGroup with just the large coin? Shouldn't the group rather be ineligible as a whole to avoid the partial spend?",
      "created_at": "2020-11-24T22:21:56Z",
      "updated_at": "2020-12-10T01:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r529935159",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529935159"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4236,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529937239",
      "pull_request_review_id": 538010853,
      "id": 529937239,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzNzIzOQ==",
      "diff_hunk": "@@ -300,16 +300,24 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n  ******************************************************************************/\n \n-void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n+void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants, bool positive_only) {\n+    // Compute the effective value first\n+    const CAmount coin_fee = output.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(output.m_input_bytes);\n+    const CAmount ev = output.txout.nValue - coin_fee;",
      "path": "src/wallet/coinselection.cpp",
      "position": 8,
      "original_position": 8,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "416d74fb1687ae1d47a58c153d09d9afe0b6dc60",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think that this will result in the OutputGroup accepting uneconomic inputs in the case that the recipient is paying the fees. Should we perhaps rather filter by whether the UTXO are uneconomic, but just calculate with the value instead of the effective value for the case of the recipient paying the fees?",
      "created_at": "2020-11-24T22:23:56Z",
      "updated_at": "2020-12-10T01:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r529937239",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529937239"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 306,
      "original_line": 306,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529952999",
      "pull_request_review_id": 538024823,
      "id": 529952999,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk1Mjk5OQ==",
      "diff_hunk": "@@ -302,6 +302,16 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n     m_outputs.push_back(output);\n+    CInputCoin& coin = m_outputs.back();\n+    coin.m_fee = coin.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(coin.m_input_bytes);",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "99b399aba5d27476b61b4865cc39553d03965d57",
      "in_reply_to_id": 529927059,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`m_input_bytes` is initialized to `-1` to indicate that it hasn't been calculated yet.",
      "created_at": "2020-11-24T22:38:47Z",
      "updated_at": "2020-12-10T01:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r529952999",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529952999"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 306,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529955040",
      "pull_request_review_id": 538025870,
      "id": 529955040,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk1NTA0MA==",
      "diff_hunk": "@@ -4237,8 +4230,10 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n                     ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n                 }\n             } else {\n-                groups.emplace_back(effective_feerate, long_term_feerate);\n-                groups.back().Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n+                // This is for if each output gets it's own OutputGroup\n+                OutputGroup coin(effective_feerate, long_term_feerate);\n+                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n+                if (coin.EligibleForSpending(filter)) groups.push_back(coin);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "d895e98b594b873f3d34c8ba63e9b55125d51b5a",
      "in_reply_to_id": 529935159,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This would make the wallet more vulnerable to dust attacks. An attacker could them lock out a user from their funds by sending dust to an already used address.",
      "created_at": "2020-11-24T22:40:38Z",
      "updated_at": "2020-12-10T01:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r529955040",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529955040"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4236,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529957375",
      "pull_request_review_id": 538027112,
      "id": 529957375,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk1NzM3NQ==",
      "diff_hunk": "@@ -302,6 +302,16 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n     m_outputs.push_back(output);\n+    CInputCoin& coin = m_outputs.back();\n+    coin.m_fee = coin.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(coin.m_input_bytes);",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "99b399aba5d27476b61b4865cc39553d03965d57",
      "in_reply_to_id": 529927059,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "But this is at the point where we calculate the effective value of UTXOs, so we need to know the size. Why would we want to mitigate a missing size here rather than throwing?",
      "created_at": "2020-11-24T22:42:46Z",
      "updated_at": "2020-12-10T01:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r529957375",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529957375"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 306,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529963849",
      "pull_request_review_id": 538030362,
      "id": 529963849,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2Mzg0OQ==",
      "diff_hunk": "@@ -300,16 +300,24 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n  ******************************************************************************/\n \n-void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n+void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants, bool positive_only) {\n+    // Compute the effective value first\n+    const CAmount coin_fee = output.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(output.m_input_bytes);\n+    const CAmount ev = output.txout.nValue - coin_fee;",
      "path": "src/wallet/coinselection.cpp",
      "position": 8,
      "original_position": 8,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "416d74fb1687ae1d47a58c153d09d9afe0b6dc60",
      "in_reply_to_id": 529937239,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Given that the recipient paying the fees is typically used when sweeping the wallet, I don't think it really matters.",
      "created_at": "2020-11-24T22:49:00Z",
      "updated_at": "2020-12-10T01:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r529963849",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529963849"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 306,
      "original_line": 306,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529964003",
      "pull_request_review_id": 538030433,
      "id": 529964003,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2NDAwMw==",
      "diff_hunk": "@@ -4237,8 +4230,10 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n                     ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n                 }\n             } else {\n-                groups.emplace_back(effective_feerate, long_term_feerate);\n-                groups.back().Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n+                // This is for if each output gets it's own OutputGroup\n+                OutputGroup coin(effective_feerate, long_term_feerate);\n+                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n+                if (coin.EligibleForSpending(filter)) groups.push_back(coin);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "d895e98b594b873f3d34c8ba63e9b55125d51b5a",
      "in_reply_to_id": 529935159,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, I guess dust should get ignored altogether, but at higher fee rates this could in the worst-case even affect a small amount and a slightly larger amount, which should be prohibited by the partial spending restriction.",
      "created_at": "2020-11-24T22:49:09Z",
      "updated_at": "2020-12-10T01:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r529964003",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529964003"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4236,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530604074",
      "pull_request_review_id": 538799180,
      "id": 530604074,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwNDA3NA==",
      "diff_hunk": "@@ -300,16 +300,24 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n  ******************************************************************************/\n \n-void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n+void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants, bool positive_only) {\n+    // Compute the effective value first\n+    const CAmount coin_fee = output.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(output.m_input_bytes);\n+    const CAmount ev = output.txout.nValue - coin_fee;",
      "path": "src/wallet/coinselection.cpp",
      "position": 8,
      "original_position": 8,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "416d74fb1687ae1d47a58c153d09d9afe0b6dc60",
      "in_reply_to_id": 529937239,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh, I didn't realize that it was just used for that. Wouldn't it be much easier to implement that as a \"send everything\": no coin selection, just sum up everything, deduct fees and pay the recipient address that?",
      "created_at": "2020-11-25T19:38:47Z",
      "updated_at": "2020-12-10T01:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r530604074",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530604074"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 306,
      "original_line": 306,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530605164",
      "pull_request_review_id": 538800497,
      "id": 530605164,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwNTE2NA==",
      "diff_hunk": "@@ -300,16 +300,24 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n  ******************************************************************************/\n \n-void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n+void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants, bool positive_only) {\n+    // Compute the effective value first\n+    const CAmount coin_fee = output.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(output.m_input_bytes);\n+    const CAmount ev = output.txout.nValue - coin_fee;",
      "path": "src/wallet/coinselection.cpp",
      "position": 8,
      "original_position": 8,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "416d74fb1687ae1d47a58c153d09d9afe0b6dc60",
      "in_reply_to_id": 529937239,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's the most common use case I think, but not the only one.",
      "created_at": "2020-11-25T19:41:03Z",
      "updated_at": "2020-12-10T01:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r530605164",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530605164"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 306,
      "original_line": 306,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532812179",
      "pull_request_review_id": 541183554,
      "id": 532812179,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgxMjE3OQ==",
      "diff_hunk": "@@ -302,6 +302,16 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n     m_outputs.push_back(output);\n+    CInputCoin& coin = m_outputs.back();\n+    coin.m_fee = coin.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(coin.m_input_bytes);",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "99b399aba5d27476b61b4865cc39553d03965d57",
      "in_reply_to_id": 529927059,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since the intention is to not change behavior in this PR, I think I will leave this as is for now.\r\n\r\nAdditionally I don't think it is guaranteed that when we add a `CInputCoin` to an `OutputGroup` that we do know the size. It could be for a preset input or an input not in the wallet (there is a PR for that) where we add those coins to an `OutputGroup` and just don't use the effective value calculation. In those instances, the `m_input_bytes` may not be set.",
      "created_at": "2020-11-30T18:32:39Z",
      "updated_at": "2020-12-10T01:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r532812179",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532812179"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 306,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539739259",
      "pull_request_review_id": 548714910,
      "id": 539739259,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTczOTI1OQ==",
      "diff_hunk": "@@ -4193,58 +4193,90 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n-std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const {\n-    std::vector<OutputGroup> groups;\n-    std::map<CTxDestination, OutputGroup> gmap;\n-    std::set<CTxDestination> full_groups;\n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const\n+{\n+    std::vector<OutputGroup> groups_out;\n \n-    for (const auto& output : outputs) {\n-        if (output.fSpendable) {\n-            CTxDestination dst;\n-            CInputCoin input_coin = output.GetInputCoin();\n+    if (single_coin) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "97256cabb3723dee32dc20aade7d3ae618cff59c",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is this an optimization from the outside transferring the knowledge that all coins were received to separate destinations, or is this an instruction not to group coins? Assuming it's the latter, I would suggest `separate_coins: true` or `group_coins: false`.",
      "created_at": "2020-12-09T23:59:10Z",
      "updated_at": "2020-12-10T01:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r539739259",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539739259"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4200,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539751310",
      "pull_request_review_id": 548714910,
      "id": 539751310,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc1MTMxMA==",
      "diff_hunk": "@@ -4193,58 +4193,90 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n-std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const {\n-    std::vector<OutputGroup> groups;\n-    std::map<CTxDestination, OutputGroup> gmap;\n-    std::set<CTxDestination> full_groups;\n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const\n+{\n+    std::vector<OutputGroup> groups_out;\n \n-    for (const auto& output : outputs) {\n-        if (output.fSpendable) {\n-            CTxDestination dst;\n-            CInputCoin input_coin = output.GetInputCoin();\n+    if (single_coin) {\n+        // Single coin means no grouping. Each COutput gets its own OutputGroup.\n+        for (const COutput& output : outputs) {\n+            // Skip outputs we cannot spend\n+            if (!output.fSpendable) continue;\n \n             size_t ancestors, descendants;\n             chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n-            if (!single_coin && ExtractDestination(output.tx->tx->vout[output.i].scriptPubKey, dst)) {\n-                auto it = gmap.find(dst);\n-                if (it != gmap.end()) {\n-                    // Limit output groups to no more than OUTPUT_GROUP_MAX_ENTRIES\n-                    // number of entries, to protect against inadvertently creating\n-                    // a too-large transaction when using -avoidpartialspends to\n-                    // prevent breaking consensus or surprising users with a very\n-                    // high amount of fees.\n-                    if (it->second.m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n-                        groups.push_back(it->second);\n-                        it->second = OutputGroup{effective_feerate, long_term_feerate};\n-                        full_groups.insert(dst);\n-                    }\n-                    it->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                } else {\n-                    auto ins = gmap.emplace(dst, OutputGroup{effective_feerate, long_term_feerate});\n-                    ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                }\n-            } else {\n-                // This is for if each output gets it's own OutputGroup\n-                OutputGroup coin(effective_feerate, long_term_feerate);\n-                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                if (positive_only && coin.effective_value <= 0) continue;\n-                if (coin.m_outputs.size() > 0 && coin.EligibleForSpending(filter)) groups.push_back(coin);\n-            }\n+            CInputCoin input_coin = output.GetInputCoin();\n+\n+            // Make an OutputGroup containing just this output\n+            OutputGroup group{effective_feerate, long_term_feerate};\n+            group.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+\n+            // Check the OutputGroup's eligibility. Only add the eligible ones.\n+            if (positive_only && group.effective_value <= 0) continue;\n+            if (group.m_outputs.size() > 0 && group.EligibleForSpending(filter)) groups_out.push_back(group);\n         }\n+        return groups_out;\n     }\n-    if (!single_coin) {\n-        for (auto& it : gmap) {\n-            auto& group = it.second;\n-            if (full_groups.count(it.first) > 0 && !filter.m_include_partial_groups) {\n-                // Don't include partial groups if we don't want them\n+\n+    // We want to combine COutputs that have the same scriptPubKey into single OutputGroups\n+    // except when there are more than OUTPUT_GROUP_MAX_ENTRIES COutputs grouped in an OutputGroup.\n+    // To do this, we maintain a map where the key is the scriptPubKey and the value is a vector of OutputGroups.\n+    // For each COutput, we check if the scriptPubKey is in the map, and if it is, the COutput's CInputCoin is added\n+    // to the last OutputGroup in the vector for the scriptPubKey. When the last OutputGroup has\n+    // OUTPUT_GROUP_MAX_ENTRIES CInputCoins, a new OutputGroup is added to the end of the vector.\n+    std::map<CScript, std::vector<OutputGroup>> groups_map;\n+    for (const auto& output : outputs) {\n+        // Skip outputs we cannot spend\n+        if (!output.fSpendable) continue;\n+\n+        size_t ancestors, descendants;\n+        chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n+        CInputCoin input_coin = output.GetInputCoin();\n+        CScript spk = input_coin.txout.scriptPubKey;\n+\n+        std::vector<OutputGroup>& groups = groups_map[spk];\n+\n+        if (groups.size() == 0) {\n+            // No OutputGroups for this scriptPubKey yet, add one\n+            groups.emplace_back(effective_feerate, long_term_feerate);\n+        }\n+\n+        // Get the last OutputGroup in the vector so that we can add the CInputCoin to it\n+        // A pointer is used here so that group can be reassigned later if it is full.\n+        OutputGroup* group = &groups.back();\n+\n+        // Check if this OutputGroup is full. We limit to OUTPUT_GROUP_MAX_ENTRIES when using -avoidpartialspends\n+        // to avoid surprising users with very high fees.\n+        if (group->m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n+            // The last output group is full, add a new group to the vector and use that group for the insertion\n+            groups.emplace_back(effective_feerate, long_term_feerate);\n+            group = &groups.back();\n+        }\n+\n+        // Add the input_coin to group\n+        group->Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+    }\n+\n+    // Now we go through the entire map and pull out the OutputGroups\n+    for (const auto& groups_pair : groups_map) {\n+        const std::vector<OutputGroup>& groups = groups_pair.second;",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 108,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "97256cabb3723dee32dc20aade7d3ae618cff59c",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`groups` ⇒ `output_groups_per_spk`",
      "created_at": "2020-12-10T00:28:56Z",
      "updated_at": "2020-12-10T01:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r539751310",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539751310"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4262,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539752992",
      "pull_request_review_id": 548714910,
      "id": 539752992,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc1Mjk5Mg==",
      "diff_hunk": "@@ -4193,58 +4193,90 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n-std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const {\n-    std::vector<OutputGroup> groups;\n-    std::map<CTxDestination, OutputGroup> gmap;\n-    std::set<CTxDestination> full_groups;\n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const\n+{\n+    std::vector<OutputGroup> groups_out;\n \n-    for (const auto& output : outputs) {\n-        if (output.fSpendable) {\n-            CTxDestination dst;\n-            CInputCoin input_coin = output.GetInputCoin();\n+    if (single_coin) {\n+        // Single coin means no grouping. Each COutput gets its own OutputGroup.\n+        for (const COutput& output : outputs) {\n+            // Skip outputs we cannot spend\n+            if (!output.fSpendable) continue;\n \n             size_t ancestors, descendants;\n             chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n-            if (!single_coin && ExtractDestination(output.tx->tx->vout[output.i].scriptPubKey, dst)) {\n-                auto it = gmap.find(dst);\n-                if (it != gmap.end()) {\n-                    // Limit output groups to no more than OUTPUT_GROUP_MAX_ENTRIES\n-                    // number of entries, to protect against inadvertently creating\n-                    // a too-large transaction when using -avoidpartialspends to\n-                    // prevent breaking consensus or surprising users with a very\n-                    // high amount of fees.\n-                    if (it->second.m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n-                        groups.push_back(it->second);\n-                        it->second = OutputGroup{effective_feerate, long_term_feerate};\n-                        full_groups.insert(dst);\n-                    }\n-                    it->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                } else {\n-                    auto ins = gmap.emplace(dst, OutputGroup{effective_feerate, long_term_feerate});\n-                    ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                }\n-            } else {\n-                // This is for if each output gets it's own OutputGroup\n-                OutputGroup coin(effective_feerate, long_term_feerate);\n-                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                if (positive_only && coin.effective_value <= 0) continue;\n-                if (coin.m_outputs.size() > 0 && coin.EligibleForSpending(filter)) groups.push_back(coin);\n-            }\n+            CInputCoin input_coin = output.GetInputCoin();\n+\n+            // Make an OutputGroup containing just this output\n+            OutputGroup group{effective_feerate, long_term_feerate};\n+            group.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+\n+            // Check the OutputGroup's eligibility. Only add the eligible ones.\n+            if (positive_only && group.effective_value <= 0) continue;\n+            if (group.m_outputs.size() > 0 && group.EligibleForSpending(filter)) groups_out.push_back(group);\n         }\n+        return groups_out;\n     }\n-    if (!single_coin) {\n-        for (auto& it : gmap) {\n-            auto& group = it.second;\n-            if (full_groups.count(it.first) > 0 && !filter.m_include_partial_groups) {\n-                // Don't include partial groups if we don't want them\n+\n+    // We want to combine COutputs that have the same scriptPubKey into single OutputGroups\n+    // except when there are more than OUTPUT_GROUP_MAX_ENTRIES COutputs grouped in an OutputGroup.\n+    // To do this, we maintain a map where the key is the scriptPubKey and the value is a vector of OutputGroups.\n+    // For each COutput, we check if the scriptPubKey is in the map, and if it is, the COutput's CInputCoin is added\n+    // to the last OutputGroup in the vector for the scriptPubKey. When the last OutputGroup has\n+    // OUTPUT_GROUP_MAX_ENTRIES CInputCoins, a new OutputGroup is added to the end of the vector.\n+    std::map<CScript, std::vector<OutputGroup>> groups_map;",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 73,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "97256cabb3723dee32dc20aade7d3ae618cff59c",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`groups_map` ⇒ `spk_to_output_groups_map`",
      "created_at": "2020-12-10T00:33:05Z",
      "updated_at": "2020-12-10T01:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r539752992",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539752992"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539753640",
      "pull_request_review_id": 548714910,
      "id": 539753640,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc1MzY0MA==",
      "diff_hunk": "@@ -4193,58 +4193,90 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n-std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const {\n-    std::vector<OutputGroup> groups;\n-    std::map<CTxDestination, OutputGroup> gmap;\n-    std::set<CTxDestination> full_groups;\n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const\n+{\n+    std::vector<OutputGroup> groups_out;\n \n-    for (const auto& output : outputs) {\n-        if (output.fSpendable) {\n-            CTxDestination dst;\n-            CInputCoin input_coin = output.GetInputCoin();\n+    if (single_coin) {\n+        // Single coin means no grouping. Each COutput gets its own OutputGroup.\n+        for (const COutput& output : outputs) {\n+            // Skip outputs we cannot spend\n+            if (!output.fSpendable) continue;\n \n             size_t ancestors, descendants;\n             chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n-            if (!single_coin && ExtractDestination(output.tx->tx->vout[output.i].scriptPubKey, dst)) {\n-                auto it = gmap.find(dst);\n-                if (it != gmap.end()) {\n-                    // Limit output groups to no more than OUTPUT_GROUP_MAX_ENTRIES\n-                    // number of entries, to protect against inadvertently creating\n-                    // a too-large transaction when using -avoidpartialspends to\n-                    // prevent breaking consensus or surprising users with a very\n-                    // high amount of fees.\n-                    if (it->second.m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n-                        groups.push_back(it->second);\n-                        it->second = OutputGroup{effective_feerate, long_term_feerate};\n-                        full_groups.insert(dst);\n-                    }\n-                    it->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                } else {\n-                    auto ins = gmap.emplace(dst, OutputGroup{effective_feerate, long_term_feerate});\n-                    ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                }\n-            } else {\n-                // This is for if each output gets it's own OutputGroup\n-                OutputGroup coin(effective_feerate, long_term_feerate);\n-                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                if (positive_only && coin.effective_value <= 0) continue;\n-                if (coin.m_outputs.size() > 0 && coin.EligibleForSpending(filter)) groups.push_back(coin);\n-            }\n+            CInputCoin input_coin = output.GetInputCoin();\n+\n+            // Make an OutputGroup containing just this output\n+            OutputGroup group{effective_feerate, long_term_feerate};\n+            group.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+\n+            // Check the OutputGroup's eligibility. Only add the eligible ones.\n+            if (positive_only && group.effective_value <= 0) continue;\n+            if (group.m_outputs.size() > 0 && group.EligibleForSpending(filter)) groups_out.push_back(group);\n         }\n+        return groups_out;\n     }\n-    if (!single_coin) {\n-        for (auto& it : gmap) {\n-            auto& group = it.second;\n-            if (full_groups.count(it.first) > 0 && !filter.m_include_partial_groups) {\n-                // Don't include partial groups if we don't want them\n+\n+    // We want to combine COutputs that have the same scriptPubKey into single OutputGroups\n+    // except when there are more than OUTPUT_GROUP_MAX_ENTRIES COutputs grouped in an OutputGroup.\n+    // To do this, we maintain a map where the key is the scriptPubKey and the value is a vector of OutputGroups.\n+    // For each COutput, we check if the scriptPubKey is in the map, and if it is, the COutput's CInputCoin is added\n+    // to the last OutputGroup in the vector for the scriptPubKey. When the last OutputGroup has\n+    // OUTPUT_GROUP_MAX_ENTRIES CInputCoins, a new OutputGroup is added to the end of the vector.\n+    std::map<CScript, std::vector<OutputGroup>> groups_map;\n+    for (const auto& output : outputs) {\n+        // Skip outputs we cannot spend\n+        if (!output.fSpendable) continue;\n+\n+        size_t ancestors, descendants;\n+        chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n+        CInputCoin input_coin = output.GetInputCoin();\n+        CScript spk = input_coin.txout.scriptPubKey;\n+\n+        std::vector<OutputGroup>& groups = groups_map[spk];\n+\n+        if (groups.size() == 0) {\n+            // No OutputGroups for this scriptPubKey yet, add one\n+            groups.emplace_back(effective_feerate, long_term_feerate);\n+        }\n+\n+        // Get the last OutputGroup in the vector so that we can add the CInputCoin to it\n+        // A pointer is used here so that group can be reassigned later if it is full.\n+        OutputGroup* group = &groups.back();\n+\n+        // Check if this OutputGroup is full. We limit to OUTPUT_GROUP_MAX_ENTRIES when using -avoidpartialspends\n+        // to avoid surprising users with very high fees.\n+        if (group->m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n+            // The last output group is full, add a new group to the vector and use that group for the insertion\n+            groups.emplace_back(effective_feerate, long_term_feerate);\n+            group = &groups.back();\n+        }\n+\n+        // Add the input_coin to group\n+        group->Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+    }\n+\n+    // Now we go through the entire map and pull out the OutputGroups\n+    for (const auto& groups_pair : groups_map) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 107,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "97256cabb3723dee32dc20aade7d3ae618cff59c",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`groups_pair` ⇒ `spk_and_output_groups`",
      "created_at": "2020-12-10T00:34:48Z",
      "updated_at": "2020-12-10T01:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r539753640",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539753640"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539771115",
      "pull_request_review_id": 548746483,
      "id": 539771115,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3MTExNQ==",
      "diff_hunk": "@@ -4193,58 +4193,90 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n-std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const {\n-    std::vector<OutputGroup> groups;\n-    std::map<CTxDestination, OutputGroup> gmap;\n-    std::set<CTxDestination> full_groups;\n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const\n+{\n+    std::vector<OutputGroup> groups_out;\n \n-    for (const auto& output : outputs) {\n-        if (output.fSpendable) {\n-            CTxDestination dst;\n-            CInputCoin input_coin = output.GetInputCoin();\n+    if (single_coin) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "97256cabb3723dee32dc20aade7d3ae618cff59c",
      "in_reply_to_id": 539739259,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed to `separate_coins`",
      "created_at": "2020-12-10T01:21:20Z",
      "updated_at": "2020-12-10T01:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r539771115",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539771115"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4200,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539771171",
      "pull_request_review_id": 548746543,
      "id": 539771171,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3MTE3MQ==",
      "diff_hunk": "@@ -4193,58 +4193,90 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n-std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const {\n-    std::vector<OutputGroup> groups;\n-    std::map<CTxDestination, OutputGroup> gmap;\n-    std::set<CTxDestination> full_groups;\n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const\n+{\n+    std::vector<OutputGroup> groups_out;\n \n-    for (const auto& output : outputs) {\n-        if (output.fSpendable) {\n-            CTxDestination dst;\n-            CInputCoin input_coin = output.GetInputCoin();\n+    if (single_coin) {\n+        // Single coin means no grouping. Each COutput gets its own OutputGroup.\n+        for (const COutput& output : outputs) {\n+            // Skip outputs we cannot spend\n+            if (!output.fSpendable) continue;\n \n             size_t ancestors, descendants;\n             chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n-            if (!single_coin && ExtractDestination(output.tx->tx->vout[output.i].scriptPubKey, dst)) {\n-                auto it = gmap.find(dst);\n-                if (it != gmap.end()) {\n-                    // Limit output groups to no more than OUTPUT_GROUP_MAX_ENTRIES\n-                    // number of entries, to protect against inadvertently creating\n-                    // a too-large transaction when using -avoidpartialspends to\n-                    // prevent breaking consensus or surprising users with a very\n-                    // high amount of fees.\n-                    if (it->second.m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n-                        groups.push_back(it->second);\n-                        it->second = OutputGroup{effective_feerate, long_term_feerate};\n-                        full_groups.insert(dst);\n-                    }\n-                    it->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                } else {\n-                    auto ins = gmap.emplace(dst, OutputGroup{effective_feerate, long_term_feerate});\n-                    ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                }\n-            } else {\n-                // This is for if each output gets it's own OutputGroup\n-                OutputGroup coin(effective_feerate, long_term_feerate);\n-                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                if (positive_only && coin.effective_value <= 0) continue;\n-                if (coin.m_outputs.size() > 0 && coin.EligibleForSpending(filter)) groups.push_back(coin);\n-            }\n+            CInputCoin input_coin = output.GetInputCoin();\n+\n+            // Make an OutputGroup containing just this output\n+            OutputGroup group{effective_feerate, long_term_feerate};\n+            group.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+\n+            // Check the OutputGroup's eligibility. Only add the eligible ones.\n+            if (positive_only && group.effective_value <= 0) continue;\n+            if (group.m_outputs.size() > 0 && group.EligibleForSpending(filter)) groups_out.push_back(group);\n         }\n+        return groups_out;\n     }\n-    if (!single_coin) {\n-        for (auto& it : gmap) {\n-            auto& group = it.second;\n-            if (full_groups.count(it.first) > 0 && !filter.m_include_partial_groups) {\n-                // Don't include partial groups if we don't want them\n+\n+    // We want to combine COutputs that have the same scriptPubKey into single OutputGroups\n+    // except when there are more than OUTPUT_GROUP_MAX_ENTRIES COutputs grouped in an OutputGroup.\n+    // To do this, we maintain a map where the key is the scriptPubKey and the value is a vector of OutputGroups.\n+    // For each COutput, we check if the scriptPubKey is in the map, and if it is, the COutput's CInputCoin is added\n+    // to the last OutputGroup in the vector for the scriptPubKey. When the last OutputGroup has\n+    // OUTPUT_GROUP_MAX_ENTRIES CInputCoins, a new OutputGroup is added to the end of the vector.\n+    std::map<CScript, std::vector<OutputGroup>> groups_map;\n+    for (const auto& output : outputs) {\n+        // Skip outputs we cannot spend\n+        if (!output.fSpendable) continue;\n+\n+        size_t ancestors, descendants;\n+        chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n+        CInputCoin input_coin = output.GetInputCoin();\n+        CScript spk = input_coin.txout.scriptPubKey;\n+\n+        std::vector<OutputGroup>& groups = groups_map[spk];\n+\n+        if (groups.size() == 0) {\n+            // No OutputGroups for this scriptPubKey yet, add one\n+            groups.emplace_back(effective_feerate, long_term_feerate);\n+        }\n+\n+        // Get the last OutputGroup in the vector so that we can add the CInputCoin to it\n+        // A pointer is used here so that group can be reassigned later if it is full.\n+        OutputGroup* group = &groups.back();\n+\n+        // Check if this OutputGroup is full. We limit to OUTPUT_GROUP_MAX_ENTRIES when using -avoidpartialspends\n+        // to avoid surprising users with very high fees.\n+        if (group->m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n+            // The last output group is full, add a new group to the vector and use that group for the insertion\n+            groups.emplace_back(effective_feerate, long_term_feerate);\n+            group = &groups.back();\n+        }\n+\n+        // Add the input_coin to group\n+        group->Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+    }\n+\n+    // Now we go through the entire map and pull out the OutputGroups\n+    for (const auto& groups_pair : groups_map) {\n+        const std::vector<OutputGroup>& groups = groups_pair.second;",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 108,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "97256cabb3723dee32dc20aade7d3ae618cff59c",
      "in_reply_to_id": 539751310,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed to `groups_per_spk`",
      "created_at": "2020-12-10T01:21:31Z",
      "updated_at": "2020-12-10T01:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r539771171",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539771171"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4262,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539771259",
      "pull_request_review_id": 548746634,
      "id": 539771259,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3MTI1OQ==",
      "diff_hunk": "@@ -4193,58 +4193,90 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n-std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const {\n-    std::vector<OutputGroup> groups;\n-    std::map<CTxDestination, OutputGroup> gmap;\n-    std::set<CTxDestination> full_groups;\n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const\n+{\n+    std::vector<OutputGroup> groups_out;\n \n-    for (const auto& output : outputs) {\n-        if (output.fSpendable) {\n-            CTxDestination dst;\n-            CInputCoin input_coin = output.GetInputCoin();\n+    if (single_coin) {\n+        // Single coin means no grouping. Each COutput gets its own OutputGroup.\n+        for (const COutput& output : outputs) {\n+            // Skip outputs we cannot spend\n+            if (!output.fSpendable) continue;\n \n             size_t ancestors, descendants;\n             chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n-            if (!single_coin && ExtractDestination(output.tx->tx->vout[output.i].scriptPubKey, dst)) {\n-                auto it = gmap.find(dst);\n-                if (it != gmap.end()) {\n-                    // Limit output groups to no more than OUTPUT_GROUP_MAX_ENTRIES\n-                    // number of entries, to protect against inadvertently creating\n-                    // a too-large transaction when using -avoidpartialspends to\n-                    // prevent breaking consensus or surprising users with a very\n-                    // high amount of fees.\n-                    if (it->second.m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n-                        groups.push_back(it->second);\n-                        it->second = OutputGroup{effective_feerate, long_term_feerate};\n-                        full_groups.insert(dst);\n-                    }\n-                    it->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                } else {\n-                    auto ins = gmap.emplace(dst, OutputGroup{effective_feerate, long_term_feerate});\n-                    ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                }\n-            } else {\n-                // This is for if each output gets it's own OutputGroup\n-                OutputGroup coin(effective_feerate, long_term_feerate);\n-                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                if (positive_only && coin.effective_value <= 0) continue;\n-                if (coin.m_outputs.size() > 0 && coin.EligibleForSpending(filter)) groups.push_back(coin);\n-            }\n+            CInputCoin input_coin = output.GetInputCoin();\n+\n+            // Make an OutputGroup containing just this output\n+            OutputGroup group{effective_feerate, long_term_feerate};\n+            group.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+\n+            // Check the OutputGroup's eligibility. Only add the eligible ones.\n+            if (positive_only && group.effective_value <= 0) continue;\n+            if (group.m_outputs.size() > 0 && group.EligibleForSpending(filter)) groups_out.push_back(group);\n         }\n+        return groups_out;\n     }\n-    if (!single_coin) {\n-        for (auto& it : gmap) {\n-            auto& group = it.second;\n-            if (full_groups.count(it.first) > 0 && !filter.m_include_partial_groups) {\n-                // Don't include partial groups if we don't want them\n+\n+    // We want to combine COutputs that have the same scriptPubKey into single OutputGroups\n+    // except when there are more than OUTPUT_GROUP_MAX_ENTRIES COutputs grouped in an OutputGroup.\n+    // To do this, we maintain a map where the key is the scriptPubKey and the value is a vector of OutputGroups.\n+    // For each COutput, we check if the scriptPubKey is in the map, and if it is, the COutput's CInputCoin is added\n+    // to the last OutputGroup in the vector for the scriptPubKey. When the last OutputGroup has\n+    // OUTPUT_GROUP_MAX_ENTRIES CInputCoins, a new OutputGroup is added to the end of the vector.\n+    std::map<CScript, std::vector<OutputGroup>> groups_map;",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 73,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "97256cabb3723dee32dc20aade7d3ae618cff59c",
      "in_reply_to_id": 539752992,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed to `spk_to_groups_map`",
      "created_at": "2020-12-10T01:21:45Z",
      "updated_at": "2020-12-10T01:21:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r539771259",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539771259"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539771347",
      "pull_request_review_id": 548746705,
      "id": 539771347,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3MTM0Nw==",
      "diff_hunk": "@@ -4193,58 +4193,90 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n-std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const {\n-    std::vector<OutputGroup> groups;\n-    std::map<CTxDestination, OutputGroup> gmap;\n-    std::set<CTxDestination> full_groups;\n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const\n+{\n+    std::vector<OutputGroup> groups_out;\n \n-    for (const auto& output : outputs) {\n-        if (output.fSpendable) {\n-            CTxDestination dst;\n-            CInputCoin input_coin = output.GetInputCoin();\n+    if (single_coin) {\n+        // Single coin means no grouping. Each COutput gets its own OutputGroup.\n+        for (const COutput& output : outputs) {\n+            // Skip outputs we cannot spend\n+            if (!output.fSpendable) continue;\n \n             size_t ancestors, descendants;\n             chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n-            if (!single_coin && ExtractDestination(output.tx->tx->vout[output.i].scriptPubKey, dst)) {\n-                auto it = gmap.find(dst);\n-                if (it != gmap.end()) {\n-                    // Limit output groups to no more than OUTPUT_GROUP_MAX_ENTRIES\n-                    // number of entries, to protect against inadvertently creating\n-                    // a too-large transaction when using -avoidpartialspends to\n-                    // prevent breaking consensus or surprising users with a very\n-                    // high amount of fees.\n-                    if (it->second.m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n-                        groups.push_back(it->second);\n-                        it->second = OutputGroup{effective_feerate, long_term_feerate};\n-                        full_groups.insert(dst);\n-                    }\n-                    it->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                } else {\n-                    auto ins = gmap.emplace(dst, OutputGroup{effective_feerate, long_term_feerate});\n-                    ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                }\n-            } else {\n-                // This is for if each output gets it's own OutputGroup\n-                OutputGroup coin(effective_feerate, long_term_feerate);\n-                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                if (positive_only && coin.effective_value <= 0) continue;\n-                if (coin.m_outputs.size() > 0 && coin.EligibleForSpending(filter)) groups.push_back(coin);\n-            }\n+            CInputCoin input_coin = output.GetInputCoin();\n+\n+            // Make an OutputGroup containing just this output\n+            OutputGroup group{effective_feerate, long_term_feerate};\n+            group.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+\n+            // Check the OutputGroup's eligibility. Only add the eligible ones.\n+            if (positive_only && group.effective_value <= 0) continue;\n+            if (group.m_outputs.size() > 0 && group.EligibleForSpending(filter)) groups_out.push_back(group);\n         }\n+        return groups_out;\n     }\n-    if (!single_coin) {\n-        for (auto& it : gmap) {\n-            auto& group = it.second;\n-            if (full_groups.count(it.first) > 0 && !filter.m_include_partial_groups) {\n-                // Don't include partial groups if we don't want them\n+\n+    // We want to combine COutputs that have the same scriptPubKey into single OutputGroups\n+    // except when there are more than OUTPUT_GROUP_MAX_ENTRIES COutputs grouped in an OutputGroup.\n+    // To do this, we maintain a map where the key is the scriptPubKey and the value is a vector of OutputGroups.\n+    // For each COutput, we check if the scriptPubKey is in the map, and if it is, the COutput's CInputCoin is added\n+    // to the last OutputGroup in the vector for the scriptPubKey. When the last OutputGroup has\n+    // OUTPUT_GROUP_MAX_ENTRIES CInputCoins, a new OutputGroup is added to the end of the vector.\n+    std::map<CScript, std::vector<OutputGroup>> groups_map;\n+    for (const auto& output : outputs) {\n+        // Skip outputs we cannot spend\n+        if (!output.fSpendable) continue;\n+\n+        size_t ancestors, descendants;\n+        chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n+        CInputCoin input_coin = output.GetInputCoin();\n+        CScript spk = input_coin.txout.scriptPubKey;\n+\n+        std::vector<OutputGroup>& groups = groups_map[spk];\n+\n+        if (groups.size() == 0) {\n+            // No OutputGroups for this scriptPubKey yet, add one\n+            groups.emplace_back(effective_feerate, long_term_feerate);\n+        }\n+\n+        // Get the last OutputGroup in the vector so that we can add the CInputCoin to it\n+        // A pointer is used here so that group can be reassigned later if it is full.\n+        OutputGroup* group = &groups.back();\n+\n+        // Check if this OutputGroup is full. We limit to OUTPUT_GROUP_MAX_ENTRIES when using -avoidpartialspends\n+        // to avoid surprising users with very high fees.\n+        if (group->m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n+            // The last output group is full, add a new group to the vector and use that group for the insertion\n+            groups.emplace_back(effective_feerate, long_term_feerate);\n+            group = &groups.back();\n+        }\n+\n+        // Add the input_coin to group\n+        group->Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+    }\n+\n+    // Now we go through the entire map and pull out the OutputGroups\n+    for (const auto& groups_pair : groups_map) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 107,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "97256cabb3723dee32dc20aade7d3ae618cff59c",
      "in_reply_to_id": 539753640,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed to `spk_and_groups_pair`",
      "created_at": "2020-12-10T01:21:57Z",
      "updated_at": "2020-12-10T01:21:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r539771347",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539771347"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539817251",
      "pull_request_review_id": 548791890,
      "id": 539817251,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxNzI1MQ==",
      "diff_hunk": "@@ -300,16 +300,24 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n  ******************************************************************************/\n \n-void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n+void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants, bool positive_only) {\n+    // Compute the effective value first\n+    const CAmount coin_fee = output.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(output.m_input_bytes);\n+    const CAmount ev = output.txout.nValue - coin_fee;",
      "path": "src/wallet/coinselection.cpp",
      "position": 8,
      "original_position": 8,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "416d74fb1687ae1d47a58c153d09d9afe0b6dc60",
      "in_reply_to_id": 529937239,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It may be worth considering an explicit `sweepwallet` rpc since I don't think the expectations for \"recipient pays fees\" and \"empty my wallets and send as much as you can\" necessarily match. Although, maybe in both cases it would be appropriate not to use uneconomic UTXOs. ;)",
      "created_at": "2020-12-10T03:27:40Z",
      "updated_at": "2020-12-10T03:31:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r539817251",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539817251"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 306,
      "original_line": 306,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550788340",
      "pull_request_review_id": 560596635,
      "id": 550788340,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc4ODM0MA==",
      "diff_hunk": "@@ -78,15 +77,20 @@ struct OutputGroup\n     size_t m_descendants{0};\n     CAmount effective_value{0};\n     CAmount fee{0};\n+    CFeeRate m_effective_feerate{0};\n     CAmount long_term_fee{0};\n+    CFeeRate m_long_term_feerate{0};\n \n     OutputGroup() {}\n+    OutputGroup(const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate) :\n+        m_effective_feerate(effective_feerate),\n+        m_long_term_feerate(long_term_feerate)\n+    {}\n+\n     void Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants);\n     std::vector<CInputCoin>::iterator Discard(const CInputCoin& output);\n     bool EligibleForSpending(const CoinEligibilityFilter& eligibility_filter) const;\n \n-    //! Update the OutputGroup's fee, long_term_fee, and effective_value based on the given feerates",
      "path": "src/wallet/coinselection.h",
      "position": 52,
      "original_position": 31,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "99b399aba5d27476b61b4865cc39553d03965d57",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 99b399aba5d27476b61b4865cc39553d03965d57\r\n\r\nnit: Maybe add a similar comment to `Insert` that this updates the fees now if you retouch.",
      "created_at": "2021-01-01T17:27:10Z",
      "updated_at": "2021-01-01T21:58:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550788340",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550788340"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 99,
      "original_line": 88,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550788976",
      "pull_request_review_id": 560596635,
      "id": 550788976,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc4ODk3Ng==",
      "diff_hunk": "@@ -300,16 +300,24 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n  ******************************************************************************/\n \n-void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n+void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants, bool positive_only) {\n+    // Compute the effective value first\n+    const CAmount coin_fee = output.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(output.m_input_bytes);",
      "path": "src/wallet/coinselection.cpp",
      "position": 7,
      "original_position": 7,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "416d74fb1687ae1d47a58c153d09d9afe0b6dc60",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 416d74fb1687ae1d47a58c153d09d9afe0b6dc60\r\n\r\nnit: I think you could skip both intermediary vars (`coin_fee`, `ev`) here and instead set the `coin` members here and use them in the following lines without hurting readability.",
      "created_at": "2021-01-01T17:36:00Z",
      "updated_at": "2021-01-01T21:58:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550788976",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550788976"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 305,
      "original_line": 305,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550789643",
      "pull_request_review_id": 560596635,
      "id": 550789643,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc4OTY0Mw==",
      "diff_hunk": "@@ -841,7 +841,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     bool IsSpentKey(const uint256& hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void SetSpentKeyState(WalletBatch& batch, const uint256& hash, unsigned int n, bool used, std::set<CTxDestination>& tx_destinations) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n-    std::vector<OutputGroup> GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const size_t max_ancestors, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter) const;\n+    std::vector<OutputGroup> GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const size_t max_ancestors, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const;",
      "path": "src/wallet/wallet.h",
      "position": null,
      "original_position": 5,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "416d74fb1687ae1d47a58c153d09d9afe0b6dc60",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 416d74fb1687ae1d47a58c153d09d9afe0b6dc60\r\n\r\nnit: maybe make `positive_only` const as well?",
      "created_at": "2021-01-01T17:44:25Z",
      "updated_at": "2021-01-01T21:58:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550789643",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550789643"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 844,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550790769",
      "pull_request_review_id": 560596635,
      "id": 550790769,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MDc2OQ==",
      "diff_hunk": "@@ -2489,8 +2489,8 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, 2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max()), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1, true /* include_partial_groups */), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||",
      "path": "src/wallet/wallet.cpp",
      "position": 83,
      "original_position": 24,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "f6b305273910db0e46798d361413a7e878cb45f7",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in f6b305273910db0e46798d361413a7e878cb45f7\r\n\r\nNow since max_descendants and partial_groups are decoupled it could be discussed if it stays like this or if this coin selection step is split up into one which only tries with the old config (leaving out partial groups) and then one after that adds partial groups. But it can be left for a follow-up if that change is desired.",
      "created_at": "2021-01-01T17:57:35Z",
      "updated_at": "2021-01-01T21:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550790769",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550790769"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2492,
      "original_line": 2492,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550791777",
      "pull_request_review_id": 560596635,
      "id": 550791777,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MTc3Nw==",
      "diff_hunk": "@@ -4193,58 +4193,90 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n-std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const {\n-    std::vector<OutputGroup> groups;\n-    std::map<CTxDestination, OutputGroup> gmap;\n-    std::set<CTxDestination> full_groups;\n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool separate_coins, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const\n+{\n+    std::vector<OutputGroup> groups_out;\n \n-    for (const auto& output : outputs) {\n-        if (output.fSpendable) {\n-            CTxDestination dst;\n-            CInputCoin input_coin = output.GetInputCoin();\n+    if (separate_coins) {\n+        // Single coin means no grouping. Each COutput gets its own OutputGroup.",
      "path": "src/wallet/wallet.cpp",
      "position": 113,
      "original_position": 17,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e\r\n\r\nnit: update comment \"Single coin\" => \"Separate coin\"",
      "created_at": "2021-01-01T18:10:12Z",
      "updated_at": "2021-01-01T21:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550791777",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550791777"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4201,
      "original_line": 4201,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550793674",
      "pull_request_review_id": 560596635,
      "id": 550793674,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MzY3NA==",
      "diff_hunk": "@@ -4193,58 +4193,90 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n-std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const {\n-    std::vector<OutputGroup> groups;\n-    std::map<CTxDestination, OutputGroup> gmap;\n-    std::set<CTxDestination> full_groups;\n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool separate_coins, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const\n+{\n+    std::vector<OutputGroup> groups_out;\n \n-    for (const auto& output : outputs) {\n-        if (output.fSpendable) {\n-            CTxDestination dst;\n-            CInputCoin input_coin = output.GetInputCoin();\n+    if (separate_coins) {\n+        // Single coin means no grouping. Each COutput gets its own OutputGroup.\n+        for (const COutput& output : outputs) {\n+            // Skip outputs we cannot spend\n+            if (!output.fSpendable) continue;\n \n             size_t ancestors, descendants;\n             chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n-            if (!single_coin && ExtractDestination(output.tx->tx->vout[output.i].scriptPubKey, dst)) {\n-                auto it = gmap.find(dst);\n-                if (it != gmap.end()) {\n-                    // Limit output groups to no more than OUTPUT_GROUP_MAX_ENTRIES\n-                    // number of entries, to protect against inadvertently creating\n-                    // a too-large transaction when using -avoidpartialspends to\n-                    // prevent breaking consensus or surprising users with a very\n-                    // high amount of fees.\n-                    if (it->second.m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n-                        groups.push_back(it->second);\n-                        it->second = OutputGroup{effective_feerate, long_term_feerate};\n-                        full_groups.insert(dst);\n-                    }\n-                    it->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                } else {\n-                    auto ins = gmap.emplace(dst, OutputGroup{effective_feerate, long_term_feerate});\n-                    ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                }\n-            } else {\n-                // This is for if each output gets it's own OutputGroup\n-                OutputGroup coin(effective_feerate, long_term_feerate);\n-                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                if (positive_only && coin.effective_value <= 0) continue;\n-                if (coin.m_outputs.size() > 0 && coin.EligibleForSpending(filter)) groups.push_back(coin);\n-            }\n+            CInputCoin input_coin = output.GetInputCoin();\n+\n+            // Make an OutputGroup containing just this output\n+            OutputGroup group{effective_feerate, long_term_feerate};\n+            group.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+\n+            // Check the OutputGroup's eligibility. Only add the eligible ones.\n+            if (positive_only && group.effective_value <= 0) continue;",
      "path": "src/wallet/wallet.cpp",
      "position": 147,
      "original_position": 56,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e\r\n\r\nThere is already the effectively same check in `Insert` so I think the following line is enough (`group.m_outputs.size() > 0`) and this one can safely be removed.",
      "created_at": "2021-01-01T18:33:44Z",
      "updated_at": "2021-01-01T21:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550793674",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550793674"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4215,
      "original_line": 4215,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550807869",
      "pull_request_review_id": 560596635,
      "id": 550807869,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwNzg2OQ==",
      "diff_hunk": "@@ -4193,58 +4193,90 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n-std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const {\n-    std::vector<OutputGroup> groups;\n-    std::map<CTxDestination, OutputGroup> gmap;\n-    std::set<CTxDestination> full_groups;\n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool separate_coins, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const\n+{\n+    std::vector<OutputGroup> groups_out;\n \n-    for (const auto& output : outputs) {\n-        if (output.fSpendable) {\n-            CTxDestination dst;\n-            CInputCoin input_coin = output.GetInputCoin();\n+    if (separate_coins) {\n+        // Single coin means no grouping. Each COutput gets its own OutputGroup.\n+        for (const COutput& output : outputs) {\n+            // Skip outputs we cannot spend\n+            if (!output.fSpendable) continue;\n \n             size_t ancestors, descendants;\n             chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n-            if (!single_coin && ExtractDestination(output.tx->tx->vout[output.i].scriptPubKey, dst)) {\n-                auto it = gmap.find(dst);\n-                if (it != gmap.end()) {\n-                    // Limit output groups to no more than OUTPUT_GROUP_MAX_ENTRIES\n-                    // number of entries, to protect against inadvertently creating\n-                    // a too-large transaction when using -avoidpartialspends to\n-                    // prevent breaking consensus or surprising users with a very\n-                    // high amount of fees.\n-                    if (it->second.m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n-                        groups.push_back(it->second);\n-                        it->second = OutputGroup{effective_feerate, long_term_feerate};\n-                        full_groups.insert(dst);\n-                    }\n-                    it->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                } else {\n-                    auto ins = gmap.emplace(dst, OutputGroup{effective_feerate, long_term_feerate});\n-                    ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                }\n-            } else {\n-                // This is for if each output gets it's own OutputGroup\n-                OutputGroup coin(effective_feerate, long_term_feerate);\n-                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                if (positive_only && coin.effective_value <= 0) continue;\n-                if (coin.m_outputs.size() > 0 && coin.EligibleForSpending(filter)) groups.push_back(coin);\n-            }\n+            CInputCoin input_coin = output.GetInputCoin();\n+\n+            // Make an OutputGroup containing just this output\n+            OutputGroup group{effective_feerate, long_term_feerate};\n+            group.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+\n+            // Check the OutputGroup's eligibility. Only add the eligible ones.\n+            if (positive_only && group.effective_value <= 0) continue;\n+            if (group.m_outputs.size() > 0 && group.EligibleForSpending(filter)) groups_out.push_back(group);\n         }\n+        return groups_out;\n     }\n-    if (!single_coin) {\n-        for (auto& it : gmap) {\n-            auto& group = it.second;\n-            if (full_groups.count(it.first) > 0 && !filter.m_include_partial_groups) {\n-                // Don't include partial groups if we don't want them\n+\n+    // We want to combine COutputs that have the same scriptPubKey into single OutputGroups\n+    // except when there are more than OUTPUT_GROUP_MAX_ENTRIES COutputs grouped in an OutputGroup.\n+    // To do this, we maintain a map where the key is the scriptPubKey and the value is a vector of OutputGroups.\n+    // For each COutput, we check if the scriptPubKey is in the map, and if it is, the COutput's CInputCoin is added\n+    // to the last OutputGroup in the vector for the scriptPubKey. When the last OutputGroup has\n+    // OUTPUT_GROUP_MAX_ENTRIES CInputCoins, a new OutputGroup is added to the end of the vector.\n+    std::map<CScript, std::vector<OutputGroup>> spk_to_groups_map;\n+    for (const auto& output : outputs) {\n+        // Skip outputs we cannot spend\n+        if (!output.fSpendable) continue;\n+\n+        size_t ancestors, descendants;\n+        chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n+        CInputCoin input_coin = output.GetInputCoin();\n+        CScript spk = input_coin.txout.scriptPubKey;\n+\n+        std::vector<OutputGroup>& groups = spk_to_groups_map[spk];\n+\n+        if (groups.size() == 0) {\n+            // No OutputGroups for this scriptPubKey yet, add one\n+            groups.emplace_back(effective_feerate, long_term_feerate);\n+        }\n+\n+        // Get the last OutputGroup in the vector so that we can add the CInputCoin to it\n+        // A pointer is used here so that group can be reassigned later if it is full.\n+        OutputGroup* group = &groups.back();\n+\n+        // Check if this OutputGroup is full. We limit to OUTPUT_GROUP_MAX_ENTRIES when using -avoidpartialspends\n+        // to avoid surprising users with very high fees.\n+        if (group->m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n+            // The last output group is full, add a new group to the vector and use that group for the insertion\n+            groups.emplace_back(effective_feerate, long_term_feerate);\n+            group = &groups.back();\n+        }\n+\n+        // Add the input_coin to group\n+        group->Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+    }\n+\n+    // Now we go through the entire map and pull out the OutputGroups\n+    for (const auto& spk_and_groups_pair: spk_to_groups_map) {\n+        const std::vector<OutputGroup>& groups_per_spk= spk_and_groups_pair.second;",
      "path": "src/wallet/wallet.cpp",
      "position": 200,
      "original_position": 108,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e\r\n\r\nwhitespace missing before `=`",
      "created_at": "2021-01-01T21:16:17Z",
      "updated_at": "2021-01-01T21:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550807869",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550807869"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4262,
      "original_line": 4262,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550808110",
      "pull_request_review_id": 560596635,
      "id": 550808110,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwODExMA==",
      "diff_hunk": "@@ -4193,58 +4193,90 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n-std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const {\n-    std::vector<OutputGroup> groups;\n-    std::map<CTxDestination, OutputGroup> gmap;\n-    std::set<CTxDestination> full_groups;\n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool separate_coins, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const\n+{\n+    std::vector<OutputGroup> groups_out;\n \n-    for (const auto& output : outputs) {\n-        if (output.fSpendable) {\n-            CTxDestination dst;\n-            CInputCoin input_coin = output.GetInputCoin();\n+    if (separate_coins) {\n+        // Single coin means no grouping. Each COutput gets its own OutputGroup.\n+        for (const COutput& output : outputs) {\n+            // Skip outputs we cannot spend\n+            if (!output.fSpendable) continue;\n \n             size_t ancestors, descendants;\n             chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n-            if (!single_coin && ExtractDestination(output.tx->tx->vout[output.i].scriptPubKey, dst)) {\n-                auto it = gmap.find(dst);\n-                if (it != gmap.end()) {\n-                    // Limit output groups to no more than OUTPUT_GROUP_MAX_ENTRIES\n-                    // number of entries, to protect against inadvertently creating\n-                    // a too-large transaction when using -avoidpartialspends to\n-                    // prevent breaking consensus or surprising users with a very\n-                    // high amount of fees.\n-                    if (it->second.m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n-                        groups.push_back(it->second);\n-                        it->second = OutputGroup{effective_feerate, long_term_feerate};\n-                        full_groups.insert(dst);\n-                    }\n-                    it->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                } else {\n-                    auto ins = gmap.emplace(dst, OutputGroup{effective_feerate, long_term_feerate});\n-                    ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                }\n-            } else {\n-                // This is for if each output gets it's own OutputGroup\n-                OutputGroup coin(effective_feerate, long_term_feerate);\n-                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                if (positive_only && coin.effective_value <= 0) continue;\n-                if (coin.m_outputs.size() > 0 && coin.EligibleForSpending(filter)) groups.push_back(coin);\n-            }\n+            CInputCoin input_coin = output.GetInputCoin();\n+\n+            // Make an OutputGroup containing just this output\n+            OutputGroup group{effective_feerate, long_term_feerate};\n+            group.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+\n+            // Check the OutputGroup's eligibility. Only add the eligible ones.\n+            if (positive_only && group.effective_value <= 0) continue;\n+            if (group.m_outputs.size() > 0 && group.EligibleForSpending(filter)) groups_out.push_back(group);\n         }\n+        return groups_out;\n     }\n-    if (!single_coin) {\n-        for (auto& it : gmap) {\n-            auto& group = it.second;\n-            if (full_groups.count(it.first) > 0 && !filter.m_include_partial_groups) {\n-                // Don't include partial groups if we don't want them\n+\n+    // We want to combine COutputs that have the same scriptPubKey into single OutputGroups\n+    // except when there are more than OUTPUT_GROUP_MAX_ENTRIES COutputs grouped in an OutputGroup.\n+    // To do this, we maintain a map where the key is the scriptPubKey and the value is a vector of OutputGroups.\n+    // For each COutput, we check if the scriptPubKey is in the map, and if it is, the COutput's CInputCoin is added\n+    // to the last OutputGroup in the vector for the scriptPubKey. When the last OutputGroup has\n+    // OUTPUT_GROUP_MAX_ENTRIES CInputCoins, a new OutputGroup is added to the end of the vector.\n+    std::map<CScript, std::vector<OutputGroup>> spk_to_groups_map;\n+    for (const auto& output : outputs) {\n+        // Skip outputs we cannot spend\n+        if (!output.fSpendable) continue;\n+\n+        size_t ancestors, descendants;\n+        chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n+        CInputCoin input_coin = output.GetInputCoin();\n+        CScript spk = input_coin.txout.scriptPubKey;\n+\n+        std::vector<OutputGroup>& groups = spk_to_groups_map[spk];\n+\n+        if (groups.size() == 0) {\n+            // No OutputGroups for this scriptPubKey yet, add one\n+            groups.emplace_back(effective_feerate, long_term_feerate);\n+        }\n+\n+        // Get the last OutputGroup in the vector so that we can add the CInputCoin to it\n+        // A pointer is used here so that group can be reassigned later if it is full.\n+        OutputGroup* group = &groups.back();\n+\n+        // Check if this OutputGroup is full. We limit to OUTPUT_GROUP_MAX_ENTRIES when using -avoidpartialspends\n+        // to avoid surprising users with very high fees.\n+        if (group->m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n+            // The last output group is full, add a new group to the vector and use that group for the insertion\n+            groups.emplace_back(effective_feerate, long_term_feerate);\n+            group = &groups.back();\n+        }\n+\n+        // Add the input_coin to group\n+        group->Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+    }\n+\n+    // Now we go through the entire map and pull out the OutputGroups\n+    for (const auto& spk_and_groups_pair: spk_to_groups_map) {\n+        const std::vector<OutputGroup>& groups_per_spk= spk_and_groups_pair.second;\n+\n+        // Go through the vector backwards. This allows for the first item we deal with being the partial group.\n+        for (auto group_it = groups_per_spk.rbegin(); group_it != groups_per_spk.rend(); group_it++) {",
      "path": "src/wallet/wallet.cpp",
      "position": 203,
      "original_position": 111,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e\r\n\r\nnit: `++group_it`",
      "created_at": "2021-01-01T21:18:51Z",
      "updated_at": "2021-01-01T21:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550808110",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550808110"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4265,
      "original_line": 4265,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550808284",
      "pull_request_review_id": 560596635,
      "id": 550808284,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwODI4NA==",
      "diff_hunk": "@@ -4193,58 +4193,90 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n-std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const {\n-    std::vector<OutputGroup> groups;\n-    std::map<CTxDestination, OutputGroup> gmap;\n-    std::set<CTxDestination> full_groups;\n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool separate_coins, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const\n+{\n+    std::vector<OutputGroup> groups_out;\n \n-    for (const auto& output : outputs) {\n-        if (output.fSpendable) {\n-            CTxDestination dst;\n-            CInputCoin input_coin = output.GetInputCoin();\n+    if (separate_coins) {\n+        // Single coin means no grouping. Each COutput gets its own OutputGroup.\n+        for (const COutput& output : outputs) {\n+            // Skip outputs we cannot spend\n+            if (!output.fSpendable) continue;\n \n             size_t ancestors, descendants;\n             chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n-            if (!single_coin && ExtractDestination(output.tx->tx->vout[output.i].scriptPubKey, dst)) {\n-                auto it = gmap.find(dst);\n-                if (it != gmap.end()) {\n-                    // Limit output groups to no more than OUTPUT_GROUP_MAX_ENTRIES\n-                    // number of entries, to protect against inadvertently creating\n-                    // a too-large transaction when using -avoidpartialspends to\n-                    // prevent breaking consensus or surprising users with a very\n-                    // high amount of fees.\n-                    if (it->second.m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n-                        groups.push_back(it->second);\n-                        it->second = OutputGroup{effective_feerate, long_term_feerate};\n-                        full_groups.insert(dst);\n-                    }\n-                    it->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                } else {\n-                    auto ins = gmap.emplace(dst, OutputGroup{effective_feerate, long_term_feerate});\n-                    ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                }\n-            } else {\n-                // This is for if each output gets it's own OutputGroup\n-                OutputGroup coin(effective_feerate, long_term_feerate);\n-                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                if (positive_only && coin.effective_value <= 0) continue;\n-                if (coin.m_outputs.size() > 0 && coin.EligibleForSpending(filter)) groups.push_back(coin);\n-            }\n+            CInputCoin input_coin = output.GetInputCoin();\n+\n+            // Make an OutputGroup containing just this output\n+            OutputGroup group{effective_feerate, long_term_feerate};\n+            group.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+\n+            // Check the OutputGroup's eligibility. Only add the eligible ones.\n+            if (positive_only && group.effective_value <= 0) continue;\n+            if (group.m_outputs.size() > 0 && group.EligibleForSpending(filter)) groups_out.push_back(group);\n         }\n+        return groups_out;\n     }\n-    if (!single_coin) {\n-        for (auto& it : gmap) {\n-            auto& group = it.second;\n-            if (full_groups.count(it.first) > 0 && !filter.m_include_partial_groups) {\n-                // Don't include partial groups if we don't want them\n+\n+    // We want to combine COutputs that have the same scriptPubKey into single OutputGroups\n+    // except when there are more than OUTPUT_GROUP_MAX_ENTRIES COutputs grouped in an OutputGroup.\n+    // To do this, we maintain a map where the key is the scriptPubKey and the value is a vector of OutputGroups.\n+    // For each COutput, we check if the scriptPubKey is in the map, and if it is, the COutput's CInputCoin is added\n+    // to the last OutputGroup in the vector for the scriptPubKey. When the last OutputGroup has\n+    // OUTPUT_GROUP_MAX_ENTRIES CInputCoins, a new OutputGroup is added to the end of the vector.\n+    std::map<CScript, std::vector<OutputGroup>> spk_to_groups_map;\n+    for (const auto& output : outputs) {\n+        // Skip outputs we cannot spend\n+        if (!output.fSpendable) continue;\n+\n+        size_t ancestors, descendants;\n+        chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n+        CInputCoin input_coin = output.GetInputCoin();\n+        CScript spk = input_coin.txout.scriptPubKey;\n+\n+        std::vector<OutputGroup>& groups = spk_to_groups_map[spk];\n+\n+        if (groups.size() == 0) {\n+            // No OutputGroups for this scriptPubKey yet, add one\n+            groups.emplace_back(effective_feerate, long_term_feerate);\n+        }\n+\n+        // Get the last OutputGroup in the vector so that we can add the CInputCoin to it\n+        // A pointer is used here so that group can be reassigned later if it is full.\n+        OutputGroup* group = &groups.back();\n+\n+        // Check if this OutputGroup is full. We limit to OUTPUT_GROUP_MAX_ENTRIES when using -avoidpartialspends\n+        // to avoid surprising users with very high fees.\n+        if (group->m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n+            // The last output group is full, add a new group to the vector and use that group for the insertion\n+            groups.emplace_back(effective_feerate, long_term_feerate);\n+            group = &groups.back();\n+        }\n+\n+        // Add the input_coin to group\n+        group->Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+    }\n+\n+    // Now we go through the entire map and pull out the OutputGroups\n+    for (const auto& spk_and_groups_pair: spk_to_groups_map) {\n+        const std::vector<OutputGroup>& groups_per_spk= spk_and_groups_pair.second;\n+\n+        // Go through the vector backwards. This allows for the first item we deal with being the partial group.\n+        for (auto group_it = groups_per_spk.rbegin(); group_it != groups_per_spk.rend(); group_it++) {\n+            const OutputGroup& group = *group_it;\n+\n+            // Don't include partial groups if there are full groups too and we don't want partial groups\n+            if (group_it == groups_per_spk.rbegin() && groups_per_spk.size() > 1 && !filter.m_include_partial_groups) {\n                 continue;\n             }\n-            // If the OutputGroup is not eligible, don't add it\n+\n+            // Check the OutputGroup's eligibility. Only add the eligible ones.\n             if (positive_only && group.effective_value <= 0) continue;",
      "path": "src/wallet/wallet.cpp",
      "position": 213,
      "original_position": 121,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e\r\n\r\nsame as above, I think this is not necessary since Insert takes care of this now.",
      "created_at": "2021-01-01T21:20:37Z",
      "updated_at": "2021-01-01T21:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550808284",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550808284"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4274,
      "original_line": 4274,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550808494",
      "pull_request_review_id": 560596635,
      "id": 550808494,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwODQ5NA==",
      "diff_hunk": "@@ -4193,58 +4193,90 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n-std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const {\n-    std::vector<OutputGroup> groups;\n-    std::map<CTxDestination, OutputGroup> gmap;\n-    std::set<CTxDestination> full_groups;\n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool separate_coins, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const\n+{\n+    std::vector<OutputGroup> groups_out;\n \n-    for (const auto& output : outputs) {\n-        if (output.fSpendable) {\n-            CTxDestination dst;\n-            CInputCoin input_coin = output.GetInputCoin();\n+    if (separate_coins) {\n+        // Single coin means no grouping. Each COutput gets its own OutputGroup.\n+        for (const COutput& output : outputs) {\n+            // Skip outputs we cannot spend\n+            if (!output.fSpendable) continue;\n \n             size_t ancestors, descendants;\n             chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n-            if (!single_coin && ExtractDestination(output.tx->tx->vout[output.i].scriptPubKey, dst)) {\n-                auto it = gmap.find(dst);\n-                if (it != gmap.end()) {\n-                    // Limit output groups to no more than OUTPUT_GROUP_MAX_ENTRIES\n-                    // number of entries, to protect against inadvertently creating\n-                    // a too-large transaction when using -avoidpartialspends to\n-                    // prevent breaking consensus or surprising users with a very\n-                    // high amount of fees.\n-                    if (it->second.m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n-                        groups.push_back(it->second);\n-                        it->second = OutputGroup{effective_feerate, long_term_feerate};\n-                        full_groups.insert(dst);\n-                    }\n-                    it->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                } else {\n-                    auto ins = gmap.emplace(dst, OutputGroup{effective_feerate, long_term_feerate});\n-                    ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                }\n-            } else {\n-                // This is for if each output gets it's own OutputGroup\n-                OutputGroup coin(effective_feerate, long_term_feerate);\n-                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                if (positive_only && coin.effective_value <= 0) continue;\n-                if (coin.m_outputs.size() > 0 && coin.EligibleForSpending(filter)) groups.push_back(coin);\n-            }\n+            CInputCoin input_coin = output.GetInputCoin();\n+\n+            // Make an OutputGroup containing just this output\n+            OutputGroup group{effective_feerate, long_term_feerate};\n+            group.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+\n+            // Check the OutputGroup's eligibility. Only add the eligible ones.\n+            if (positive_only && group.effective_value <= 0) continue;\n+            if (group.m_outputs.size() > 0 && group.EligibleForSpending(filter)) groups_out.push_back(group);\n         }\n+        return groups_out;\n     }\n-    if (!single_coin) {\n-        for (auto& it : gmap) {\n-            auto& group = it.second;\n-            if (full_groups.count(it.first) > 0 && !filter.m_include_partial_groups) {\n-                // Don't include partial groups if we don't want them\n+\n+    // We want to combine COutputs that have the same scriptPubKey into single OutputGroups\n+    // except when there are more than OUTPUT_GROUP_MAX_ENTRIES COutputs grouped in an OutputGroup.\n+    // To do this, we maintain a map where the key is the scriptPubKey and the value is a vector of OutputGroups.\n+    // For each COutput, we check if the scriptPubKey is in the map, and if it is, the COutput's CInputCoin is added\n+    // to the last OutputGroup in the vector for the scriptPubKey. When the last OutputGroup has\n+    // OUTPUT_GROUP_MAX_ENTRIES CInputCoins, a new OutputGroup is added to the end of the vector.\n+    std::map<CScript, std::vector<OutputGroup>> spk_to_groups_map;\n+    for (const auto& output : outputs) {\n+        // Skip outputs we cannot spend\n+        if (!output.fSpendable) continue;\n+\n+        size_t ancestors, descendants;\n+        chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n+        CInputCoin input_coin = output.GetInputCoin();\n+        CScript spk = input_coin.txout.scriptPubKey;",
      "path": "src/wallet/wallet.cpp",
      "position": 167,
      "original_position": 81,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e\r\n\r\nnit: `spk` seems to be only used in the line below so I would drop it.",
      "created_at": "2021-01-01T21:23:50Z",
      "updated_at": "2021-01-01T21:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550808494",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550808494"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4235,
      "original_line": 4235,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550809203",
      "pull_request_review_id": 560596635,
      "id": 550809203,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwOTIwMw==",
      "diff_hunk": "@@ -42,21 +42,19 @@ static void CoinSelection(benchmark::Bench& bench)\n     }\n     addCoin(3 * COIN, wallet, wtxs);\n \n-    // Create groups\n-    std::vector<OutputGroup> groups;\n+    // Create coins",
      "path": "src/bench/coin_selection.cpp",
      "position": 6,
      "original_position": 6,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "6148a8acda5e594bb9b3b2d989056f9e03ddbdbd",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 6148a8acda5e594bb9b3b2d989056f9e03ddbdbd\r\n\r\nnit: This comment isn't that helpful, I would suggest something like \"Prepare coins in a format that can be passed to SelectCoinsMinConf()\"",
      "created_at": "2021-01-01T21:30:23Z",
      "updated_at": "2021-01-01T21:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550809203",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550809203"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550809486",
      "pull_request_review_id": 560596635,
      "id": 550809486,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwOTQ4Ng==",
      "diff_hunk": "@@ -2381,6 +2381,8 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n         temp.m_confirm_target = 1008;\n         CFeeRate long_term_feerate = GetMinimumFeeRate(*this, temp, &feeCalc);\n \n+        std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, eligibility_filter.max_ancestors);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "6148a8acda5e594bb9b3b2d989056f9e03ddbdbd",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 6148a8acda5e594bb9b3b2d989056f9e03ddbdbd\r\n\r\nThis line seems to be the same in both if-else blocks so it could be moved to the beginning of the function before the if",
      "created_at": "2021-01-01T21:33:57Z",
      "updated_at": "2021-01-01T21:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550809486",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550809486"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2384,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550809872",
      "pull_request_review_id": 560596635,
      "id": 550809872,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwOTg3Mg==",
      "diff_hunk": "@@ -302,6 +302,16 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n     m_outputs.push_back(output);\n+    CInputCoin& coin = m_outputs.back();\n+    coin.m_fee = coin.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(coin.m_input_bytes);",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "99b399aba5d27476b61b4865cc39553d03965d57",
      "in_reply_to_id": 529927059,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "A comment would still be a good idea :) ",
      "created_at": "2021-01-01T21:38:19Z",
      "updated_at": "2021-01-01T21:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550809872",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550809872"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 306,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550811930",
      "pull_request_review_id": 560607860,
      "id": 550811930,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgxMTkzMA==",
      "diff_hunk": "@@ -2381,6 +2381,8 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n         temp.m_confirm_target = 1008;\n         CFeeRate long_term_feerate = GetMinimumFeeRate(*this, temp, &feeCalc);\n \n+        std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, eligibility_filter.max_ancestors);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_commit_id": "6148a8acda5e594bb9b3b2d989056f9e03ddbdbd",
      "in_reply_to_id": 550809486,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah, never mind, it becomes necessary later when the `positive_only` param is added",
      "created_at": "2021-01-01T22:02:59Z",
      "updated_at": "2021-01-01T22:05:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550811930",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550811930"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2384,
      "side": "RIGHT"
    }
  ]
}