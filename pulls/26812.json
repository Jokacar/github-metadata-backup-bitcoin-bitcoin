{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812",
    "id": 1185011431,
    "node_id": "PR_kwDOABII585Godbn",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/26812",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/26812.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/26812.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/9a158da46cbdda6d4662196121cfc8721062de4f",
    "number": 26812,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "test: add end-to-end tests for CConnman and PeerManager",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Add fuzz and unit tests that write (fuzzed) data to a mocked socket and inspect what CConnman/PeerManager have written back to the socket, or check the internal state to verify that the behavior is as expected.\r\n\r\nThis is now possible, after most of https://github.com/bitcoin/bitcoin/pull/21878 has been merged - we don't do any syscalls (e.g. `connect()`, `recv()`) from the high level code and using a mocked socket allows testing the entire networking stack without opening actual network connections.",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      },
      {
        "id": 5334691551,
        "node_id": "LA_kwDOABII588AAAABPfju3w",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
        "name": "CI failed",
        "description": "",
        "color": "cccccc",
        "default": false
      }
    ],
    "created_at": "2023-01-04T14:39:37Z",
    "updated_at": "2024-05-02T17:54:08Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "71b02d257b82884988a52f27b971cf88f6a1785c",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "vasild:e2e_tests",
      "ref": "e2e_tests",
      "sha": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 120608826,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMjA2MDg4MjY=",
        "name": "bitcoin",
        "full_name": "vasild/bitcoin",
        "owner": {
          "login": "vasild",
          "id": 266751,
          "node_id": "MDQ6VXNlcjI2Njc1MQ==",
          "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/vasild",
          "html_url": "https://github.com/vasild",
          "followers_url": "https://api.github.com/users/vasild/followers",
          "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
          "organizations_url": "https://api.github.com/users/vasild/orgs",
          "repos_url": "https://api.github.com/users/vasild/repos",
          "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/vasild/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/vasild/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/vasild/bitcoin",
        "archive_url": "https://api.github.com/repos/vasild/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/vasild/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/vasild/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/vasild/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/vasild/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/vasild/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/vasild/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/vasild/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/vasild/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/vasild/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/vasild/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/vasild/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/vasild/bitcoin/events",
        "forks_url": "https://api.github.com/repos/vasild/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/vasild/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/vasild/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/vasild/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/vasild/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/vasild/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/vasild/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/vasild/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/vasild/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/vasild/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/vasild/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/vasild/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/vasild/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/vasild/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/vasild/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/vasild/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:vasild/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/vasild/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/vasild/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/vasild/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/vasild/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/vasild/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/vasild/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/vasild/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/vasild/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/vasild/bitcoin/hooks",
        "svn_url": "https://github.com/vasild/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 4,
        "watchers_count": 4,
        "size": 234794,
        "default_branch": "master",
        "open_issues_count": 2,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-05-02T12:27:19Z",
        "created_at": "2018-02-07T11:52:47Z",
        "updated_at": "2024-05-02T12:27:29Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "c8e3978114716bb8fb10695b9d187652f3ab4926",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35334,
        "stargazers_count": 76124,
        "watchers_count": 76124,
        "size": 257965,
        "default_branch": "master",
        "open_issues_count": 693,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-05-02T17:38:09Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-05-02T17:48:34Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 826,
    "deletions": 93,
    "changed_files": 11,
    "commits": 6,
    "review_comments": 83,
    "comments": 34
  },
  "events": [
    {
      "event": "commented",
      "id": 1371011959,
      "node_id": "IC_kwDOABII585Rt_t3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1371011959",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-04T14:39:40Z",
      "updated_at": "2024-02-16T17:38:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/26812).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [Sjors](https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1948964294) |\n| Stale ACK | [jonatack](https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1613651346) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1371011959",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "labeled",
      "id": 8151779370,
      "node_id": "LE_lADOABII585ai4RkzwAAAAHl4kgq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8151779370",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-04T14:39:42Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "reviewed",
      "id": 1235986976,
      "node_id": "PRR_kwDOABII585Jq6og",
      "url": null,
      "actor": null,
      "commit_id": "9b7e9dad271167af913828aaf3b75a9942770a34",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#pullrequestreview-1235986976",
      "submitted_at": "2023-01-04T14:46:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
    },
    {
      "event": "reviewed",
      "id": 1236481487,
      "node_id": "PRR_kwDOABII585JszXP",
      "url": null,
      "actor": null,
      "commit_id": "9b7e9dad271167af913828aaf3b75a9942770a34",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#pullrequestreview-1236481487",
      "submitted_at": "2023-01-04T22:09:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-04T22:52:11Z",
      "updated_at": "2023-01-04T22:52:11Z",
      "source": {
        "issue": {
          "id": 1498647161,
          "node_id": "PR_kwDOABII585FjrF4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26705",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26705/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26705/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26705/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26705",
          "number": 26705,
          "state": "closed",
          "state_reason": null,
          "title": "clang-tidy: Fix `modernize-use-default-member-init` in headers and force to check all headers",
          "body": "This PR:\r\n- fixes the only [remained](https://github.com/bitcoin/bitcoin/pull/26705#issuecomment-1353742082) check in headers, i.e., `modernize-use-default-member-init`\r\n- forces `clang-tidy` check all headers\r\n\r\nCloses bitcoin/bitcoin#26703.",
          "user": {
            "login": "hebasto",
            "id": 32963518,
            "node_id": "MDQ6VXNlcjMyOTYzNTE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hebasto",
            "html_url": "https://github.com/hebasto",
            "followers_url": "https://api.github.com/users/hebasto/followers",
            "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
            "organizations_url": "https://api.github.com/users/hebasto/orgs",
            "repos_url": "https://api.github.com/users/hebasto/repos",
            "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/hebasto/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 11,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26705",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26705",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26705.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26705.patch"
          },
          "closed_at": "2023-02-01T09:40:29Z",
          "created_at": "2022-12-15T15:33:56Z",
          "updated_at": "2024-03-05T12:36:57Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-04T23:22:18Z",
      "updated_at": "2023-01-04T23:22:18Z",
      "source": {
        "issue": {
          "id": 1477184609,
          "node_id": "PR_kwDOABII585EYIGU",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26642",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26642/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26642/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26642/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26642",
          "number": 26642,
          "state": "closed",
          "state_reason": null,
          "title": "clang-tidy: Add more `performance-*` checks and related fixes",
          "body": null,
          "user": {
            "login": "hebasto",
            "id": 32963518,
            "node_id": "MDQ6VXNlcjMyOTYzNTE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hebasto",
            "html_url": "https://github.com/hebasto",
            "followers_url": "https://api.github.com/users/hebasto/followers",
            "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
            "organizations_url": "https://api.github.com/users/hebasto/orgs",
            "repos_url": "https://api.github.com/users/hebasto/repos",
            "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/hebasto/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 27,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26642",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26642",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26642.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26642.patch"
          },
          "closed_at": "2023-03-27T13:36:52Z",
          "created_at": "2022-12-05T18:40:46Z",
          "updated_at": "2024-03-26T12:40:15Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-05T00:30:36Z",
      "updated_at": "2023-01-05T00:30:36Z",
      "source": {
        "issue": {
          "id": 1408975299,
          "node_id": "PR_kwDOABII585AzCJJ",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26312",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26312/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26312/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26312/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26312",
          "number": 26312,
          "state": "closed",
          "state_reason": null,
          "title": "Remove Sock::Get() and Sock::Sock()",
          "body": "_This is a piece of #21878, chopped off to ease review._\r\n\r\nPeeking at the underlying socket file descriptor of `Sock` and checkig if it is `INVALID_SOCKET` is bad encapsulation and stands in the way of testing/mocking/fuzzing.\r\n\r\nInstead use an empty `unique_ptr` to denote that there is no valid socket where appropriate or outright remove such checks where they are not necessary.\r\n\r\nThe default constructor `Sock::Sock()` is unnecessary now after recent changes, thus remove it.",
          "user": {
            "login": "vasild",
            "id": 266751,
            "node_id": "MDQ6VXNlcjI2Njc1MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vasild",
            "html_url": "https://github.com/vasild",
            "followers_url": "https://api.github.com/users/vasild/followers",
            "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
            "organizations_url": "https://api.github.com/users/vasild/orgs",
            "repos_url": "https://api.github.com/users/vasild/repos",
            "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/vasild/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 30,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26312",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26312",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26312.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26312.patch"
          },
          "closed_at": "2023-10-03T13:58:01Z",
          "created_at": "2022-10-14T08:28:59Z",
          "updated_at": "2023-10-04T11:42:11Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-05T02:06:40Z",
      "updated_at": "2023-01-05T02:06:40Z",
      "source": {
        "issue": {
          "id": 1299238264,
          "node_id": "PR_kwDOABII5847Ho23",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25572",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25572/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25572/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25572/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25572",
          "number": 25572,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Introduce EvictionManager and use it for the inbound eviction logic",
          "body": "This PR splits off the next couple commits from #25268 that introduce the `EvictionManager` and use it for  the inbound eviction logic.\r\n\r\nOne instance of the `EvictionManager` is created at start up and passed as a reference to the connection and peer managers. The connection and peer managers report all eviction relevant information (for inbound connections) to the eviction manager who ultimately suggests nodes to evict as the result of `EvictionManager::SelectNodeToEvict`.",
          "user": {
            "login": "dergoegge",
            "id": 8077169,
            "node_id": "MDQ6VXNlcjgwNzcxNjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dergoegge",
            "html_url": "https://github.com/dergoegge",
            "followers_url": "https://api.github.com/users/dergoegge/followers",
            "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
            "organizations_url": "https://api.github.com/users/dergoegge/orgs",
            "repos_url": "https://api.github.com/users/dergoegge/repos",
            "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dergoegge/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 11,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25572",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25572",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25572.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25572.patch"
          },
          "closed_at": "2023-09-28T20:06:18Z",
          "created_at": "2022-07-08T16:39:49Z",
          "updated_at": "2023-09-28T20:06:18Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-05T02:22:02Z",
      "updated_at": "2023-01-05T02:22:02Z",
      "source": {
        "issue": {
          "id": 1267157159,
          "node_id": "PR_kwDOABII5845cksp",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25325/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25325",
          "number": 25325,
          "state": "closed",
          "state_reason": null,
          "title": "Add pool based memory resource",
          "body": "A memory resource similar to `std::pmr::unsynchronized_pool_resource`, but optimized for node-based containers. The goal is to be able to cache more coins with the same memory usage, and allocate/deallocate faster.\r\n\r\nThis is a reimplementation of #22702. The goal was to implement it in a way that is simpler to review & test\r\n\r\n* There is now a generic `PoolResource` for allocating/deallocating memory. This has practically the same API as `std::pmr::memory_resource`. (Unfortunately I cannot use std::pmr because libc++ simply doesn't implement that API).\r\n* Thanks to sipa there is now a fuzzer for PoolResource! On a fast machine I ran it for ~770 million executions without finding any issue.\r\n\r\n* The estimation of the correct node size is now gone, PoolResource now has multiple pools and just needs to be created large enough to have space for the unordered_map nodes.\r\n\r\nI ran benchmarks with #22702, mergebase, and this PR. Frequency locked Intel i7-8700, clang++ 13.0.1 to reindex up to block 690000.\r\n\r\n```sh\r\nbitcoind -dbcache=5000 -assumevalid=00000000000000000002a23d6df20eecec15b21d32c75833cce28f113de888b7 -reindex-chainstate -printtoconsole=0 -stopatheight=690000\r\n```\r\n\r\nThe performance is practically identical with #22702, just 0.4% slower. It's ~21% faster than master:\r\n\r\n![Progress in Million Transactions over Time(2)](https://user-images.githubusercontent.com/14386/173288685-91952ade-f304-4825-8bfb-0725a71ca17b.png)\r\n\r\n![Size of Cache in MiB over Time](https://user-images.githubusercontent.com/14386/173291421-e6b410be-ac77-479b-ad24-5fafcebf81eb.png)\r\nNote that on cache drops mergebase's memory doesnt go so far down because it does not free the `CCoinsMap` bucket array.\r\n\r\n![Size of Cache in Million tx over Time(1)](https://user-images.githubusercontent.com/14386/173288703-a80c9c9e-93c8-4a16-9df8-610c89c61cc4.png)\r\n",
          "user": {
            "login": "martinus",
            "id": 14386,
            "node_id": "MDQ6VXNlcjE0Mzg2",
            "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martinus",
            "html_url": "https://github.com/martinus",
            "followers_url": "https://api.github.com/users/martinus/followers",
            "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
            "organizations_url": "https://api.github.com/users/martinus/orgs",
            "repos_url": "https://api.github.com/users/martinus/repos",
            "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/martinus/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 97470796,
              "node_id": "MDU6TGFiZWw5NzQ3MDc5Ng==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/UTXO%20Db%20and%20Indexes",
              "name": "UTXO Db and Indexes",
              "color": "fbca04",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 37,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25325",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25325",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25325.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25325.patch"
          },
          "closed_at": "2023-04-20T20:20:32Z",
          "created_at": "2022-06-10T07:16:06Z",
          "updated_at": "2023-12-04T12:15:11Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-05T03:47:51Z",
      "updated_at": "2023-01-05T03:47:51Z",
      "source": {
        "issue": {
          "id": 879275352,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjMzMDA2NDM4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21878",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21878/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21878/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21878/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21878",
          "number": 21878,
          "state": "closed",
          "state_reason": null,
          "title": "Make all networking code mockable",
          "body": "_This is a roadmap PR. It can be merged, but it can also be split into separate PRs and to get proper thorough review it is split._\r\n\r\nAdd wrapper methods to the syscalls `accept()`, `setsockopt()`, `getsockname()`, `bind()`, `listen()`  in the [`Sock`](https://github.com/bitcoin/bitcoin/blob/eb9a1fe03779bf05062b70f14190cb23ff42b46f/src/util/sock.h#L25) class (e.g. `Sock::Accept()`). Those methods can be overriden (mocked) by unit tests ([existent example in `master`](https://github.com/bitcoin/bitcoin/blob/eb9a1fe03779bf05062b70f14190cb23ff42b46f/src/test/util/net.h#L75)) and by fuzz tests ([existent example in `master`](https://github.com/bitcoin/bitcoin/blob/eb9a1fe03779bf05062b70f14190cb23ff42b46f/src/test/fuzz/util.h#L561)).\r\n\r\nChange everybody to use [`Sock`](https://github.com/bitcoin/bitcoin/blob/eb9a1fe03779bf05062b70f14190cb23ff42b46f/src/util/sock.h#L25) instead of [`SOCKET`](https://github.com/bitcoin/bitcoin/blob/eb9a1fe03779bf05062b70f14190cb23ff42b46f/src/compat.h#L41).\r\n\r\nMove the functionality of [`CConnman::SocketEvents()`](https://github.com/bitcoin/bitcoin/blob/eb9a1fe03779bf05062b70f14190cb23ff42b46f/src/net.cpp#L1334) to a mockable method of the [`Sock`](https://github.com/bitcoin/bitcoin/blob/eb9a1fe03779bf05062b70f14190cb23ff42b46f/src/util/sock.h#L25) class.\r\n\r\n### Already merged pieces of this PR\r\n* [x] https://github.com/bitcoin/bitcoin/pull/21943\r\n* [x] https://github.com/bitcoin/bitcoin/pull/23601\r\n* [x] https://github.com/bitcoin/bitcoin/pull/21879\r\n* [x] https://github.com/bitcoin/bitcoin/pull/23604\r\n* [x] https://github.com/bitcoin/bitcoin/pull/24357\r\n* [x] https://github.com/bitcoin/bitcoin/pull/24356\r\n* [x] https://github.com/bitcoin/bitcoin/pull/25428\r\n* [x] https://github.com/bitcoin/bitcoin/pull/25426\r\n* [x] https://github.com/bitcoin/bitcoin/pull/24378\r\n* [x] https://github.com/bitcoin/bitcoin/pull/25421\r\n* [x] https://github.com/bitcoin/bitcoin/pull/26312\r\n\r\n### Current pieces of this for review\r\n\r\n* [ ] https://github.com/bitcoin/bitcoin/pull/28584",
          "user": {
            "login": "vasild",
            "id": 266751,
            "node_id": "MDQ6VXNlcjI2Njc1MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vasild",
            "html_url": "https://github.com/vasild",
            "followers_url": "https://api.github.com/users/vasild/followers",
            "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
            "organizations_url": "https://api.github.com/users/vasild/orgs",
            "repos_url": "https://api.github.com/users/vasild/repos",
            "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/vasild/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 53,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21878",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21878",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21878.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21878.patch"
          },
          "closed_at": "2023-10-04T11:34:17Z",
          "created_at": "2021-05-07T16:04:35Z",
          "updated_at": "2023-10-04T11:35:04Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-11T10:24:41Z",
      "updated_at": "2023-01-11T10:24:41Z",
      "source": {
        "issue": {
          "id": 1238159102,
          "node_id": "PR_kwDOABII58437rQt",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25152",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25152/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25152/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25152/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25152",
          "number": 25152,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Split util/system into exception, shell, and fs-specific files",
          "body": "This is an attempt to significantly improve code organization while making changes as simple as possible to review.\r\n\r\nHere I split four files out of `util/system`:\r\n* `util/exception`, holding `PrintExceptionContinue`\r\n* `util/shell`, holding `ShellEscape`, `runCommand`\r\n* `util/fs`, holding various file, folder, and path-specific functions (building on `fs.h` and `filesystem`)\r\n* `util/args`, holding `ArgsManager` and related functions\r\n\r\nThe goal was to minimize review burden, so I made an effort to minimize the diffs and only modify the code when it was easy to confirm that the change would not have negative consequences.\r\n\r\nThat said, sourcing all of the windows-related headers was not straightforward, so I expect I'll need to touch this up to correct any issues there.",
          "user": {
            "login": "Empact",
            "id": 5470,
            "node_id": "MDQ6VXNlcjU0NzA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Empact",
            "html_url": "https://github.com/Empact",
            "followers_url": "https://api.github.com/users/Empact/followers",
            "following_url": "https://api.github.com/users/Empact/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Empact/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Empact/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
            "organizations_url": "https://api.github.com/users/Empact/orgs",
            "repos_url": "https://api.github.com/users/Empact/repos",
            "events_url": "https://api.github.com/users/Empact/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Empact/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25152",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25152",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25152.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25152.patch"
          },
          "closed_at": "2023-03-14T11:37:18Z",
          "created_at": "2022-05-17T06:52:25Z",
          "updated_at": "2024-03-13T12:38:20Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8211729232,
      "node_id": "HRFPE_lADOABII585ai4RkzwAAAAHpdQtQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8211729232",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-12T14:07:19Z"
    },
    {
      "event": "commented",
      "id": 1380407070,
      "node_id": "IC_kwDOABII585SR1ce",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1380407070",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-12T14:07:53Z",
      "updated_at": "2023-01-12T14:07:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "`9b7e9dad27...daee83c1c5`: optimize the fuzz test a bit",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1380407070",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8212121329,
      "node_id": "HRFPE_lADOABII585ai4RkzwAAAAHpewbx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8212121329",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-12T14:46:56Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-18T06:21:03Z",
      "updated_at": "2023-01-18T06:21:03Z",
      "source": {
        "issue": {
          "id": 1221671479,
          "node_id": "PR_kwDOABII5843Gzwx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25038",
          "number": 25038,
          "state": "closed",
          "state_reason": null,
          "title": "policy: nVersion=3 and Package RBF",
          "body": "**Note: this PR has been superseded by #28948 (v3) and #28984 (package RBF)**\r\n\r\nSee #27463 for overall package relay tracking.\r\n\r\nThis PR contains 2 projects: v3 policy and package RBF. Mailing list posts: [package RBF 1](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-September/019464.html) and [V3 + package RBF 2](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020937.html). It stems from a long discussion about RBF pinning, across a [mailing list thread](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019817.html) and [gist](https://gist.github.com/glozow/25d9662c52453bd08b4b4b1d3783b9ff).\r\n\r\nV3 Policy: A set of policy rules applied to transactions with their `nVersion` field set to 3. Namely, it allows users to opt in to more restrictive descendant limits for shared transactions. If adopted by many nodes in the network, V3 mitigates various RBF pinning attacks. See doc/policy/version3_transactions.md for the exact rules and rationale, and [these review club notes](bitcoincore.reviews/25038) for more background and discussion.\r\n\r\nPackage RBF: In addition to allowing a child to pay for its parents within the package, also allow the child to pay for replacing the parent's conflicts. For example, this allows LN users to replace commitment transactions existing in the mempool, simply by broadcasting their respective commitment transactions with a high-fee child. The commitment transactions can be signed with 0 fees, which means no overpaying.\r\n\r\nFAQ: is v3 still helpful even with cluster mempool (#27677) ?\r\n\r\n- Rule 3 pinning: This is addressed with v3 but not really with cluster mempool (descendant allowance is still too permissive).\r\n- Package RBF and ACP pinning: This PR allows for package RBF with v3 packages. V3 has an effective \"cluster limit\" of 2 which makes it very cheap to calculate the mining score of a v3 transaction. With cluster mempool, which also makes it easier to calculate mining score, we could have package RBF for non-v3 transactions.\r\n- Allowing 0fee transactions: This PR allows v3 transactions to be below minimum relay feerate, provided they are CPFP'd. This is because the simplified topology allows us to avoid situations like the ones described in #26933. With cluster mempool, we can allow this for non-v3 transactions.",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 82428251,
              "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
              "name": "TX fees and policy",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            },
            {
              "id": 1392286103,
              "node_id": "MDU6TGFiZWwxMzkyMjg2MTAz",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20Conceptual%20Review",
              "name": "Needs Conceptual Review",
              "description": "",
              "color": "fef2c0",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 33,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25038",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25038.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25038.patch"
          },
          "closed_at": "2023-12-11T15:18:12Z",
          "created_at": "2022-04-30T00:24:31Z",
          "updated_at": "2023-12-11T15:18:12Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-21T00:30:14Z",
      "updated_at": "2023-01-21T00:30:14Z",
      "source": {
        "issue": {
          "id": 1550856696,
          "node_id": "PR_kwDOABII585INr0Q",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26933",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26933/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26933/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26933/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26933",
          "number": 26933,
          "state": "closed",
          "state_reason": null,
          "title": "mempool: disallow txns under min relay fee, even in packages",
          "body": "Part of package relay, see #27463.\r\n\r\nNote that this still allows packages to bump transactions that are below the dynamic mempool minimum feerate, which means this still solves the \"mempool is congested and my presigned 1sat/vB tx is screwed\" problem for all transactions.\r\n\r\nOn master, the package policy (only accessible through regtest-only RPC submitpackage) allows 0-fee (or otherwise below min relay feerate) transactions if they are bumped by a child. However, with default package limits, we don't yet have a DoS-resistant way of ensuring these transactions remain bumped throughout their time in the mempool. Primarily, the fee-bumping child may later be replaced by another transaction that doesn't bump the parent(s). The parent(s) could potentially stay bumped by other transactions, but not enough to ever be selected by the `BlockAssembler` (due to `blockmintxfee`).\r\n\r\nFor example, (tested [here](https://github.com/glozow/bitcoin/commits/26933-motivation)):\r\n- The mempool accepts 24 below-minrelayfeerate transactions (\"0-fee parents\"), all bumped by a single high-fee transaction (\"the fee-bumping child\"). The fee-bumping child also spends a confirmed UTXO.\r\n- Two additional children are added to each 0-fee parent. These children each pay a feerate slightly above the minimum relay feerate (e.g. 1.9sat/vB) such that, for each 0-fee parent, the total fees of its two children divided by the total size of the children and parent is above the minimum relay feerate.\r\n- If a block template is built now, all transactions would be selected.\r\n- A transaction replaces the the fee-bumping child, spending only the confirmed UTXO and not any of the outputs from the 0-fee parents.\r\n - The 0-fee parents now each have 2 children. Their descendant feerates are above minrelayfeerate, which means that they remain in the mempool, even if the mempool evicts all below-minrelayfeerate packages.\r\n - If a block template is built now, none of the 0-fee parents or their children would be selected.\r\n - Even more low-feerate descendants can be added to these below-minrelayfeerate packages and they will not be evicted until they expire or the mempool reaches capacity.\r\n\r\nUnless we have a DoS-resistant way of ensuring package CPFP-bumped transactions are always bumped, allowing package CPFP to bump below-minrelayfeerate transactions can result in these problematic situations. See #27018 which proposes a partial solution with some limitations, and contains discussion about potential improvements to eviction strategy. While no adequate solution exists, for now, avoid these situations by requiring all transactions to meet min relay feerate.",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 164208572,
              "node_id": "MDU6TGFiZWwxNjQyMDg1NzI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool",
              "name": "Mempool",
              "color": "fef2c0",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 36,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26933",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26933",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26933.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26933.patch"
          },
          "closed_at": "2023-04-26T10:18:31Z",
          "created_at": "2023-01-20T13:33:27Z",
          "updated_at": "2024-01-15T11:59:58Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-21T03:19:02Z",
      "updated_at": "2023-01-21T03:19:02Z",
      "source": {
        "issue": {
          "id": 1426214940,
          "node_id": "PR_kwDOABII585BsmgJ",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26403",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26403/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26403/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26403/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26403",
          "number": 26403,
          "state": "closed",
          "state_reason": null,
          "title": "policy: Ephemeral anchors",
          "body": "TODO:\r\n\r\nI'll be updating to segwit variant soon, with updated BIP text.\r\n\r\n-----\r\n\r\nBuilds on top of https://github.com/bitcoin/bitcoin/pull/25038 for consideration of inclusion to the proposal. Requires V3, for simplicity of reasoning and usage. Implementation of idea written out at https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-October/021036.html\r\n\r\nBIP text here: https://github.com/instagibbs/bips/blob/ephemeral_anchor/bip-ephemeralanchors.mediawiki\r\n",
          "user": {
            "login": "instagibbs",
            "id": 5767891,
            "node_id": "MDQ6VXNlcjU3Njc4OTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/instagibbs",
            "html_url": "https://github.com/instagibbs",
            "followers_url": "https://api.github.com/users/instagibbs/followers",
            "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
            "organizations_url": "https://api.github.com/users/instagibbs/orgs",
            "repos_url": "https://api.github.com/users/instagibbs/repos",
            "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/instagibbs/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 82428251,
              "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
              "name": "TX fees and policy",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            },
            {
              "id": 1392286103,
              "node_id": "MDU6TGFiZWwxMzkyMjg2MTAz",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20Conceptual%20Review",
              "name": "Needs Conceptual Review",
              "description": "",
              "color": "fef2c0",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 29,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26403",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26403",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26403.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26403.patch"
          },
          "closed_at": "2023-12-05T16:30:56Z",
          "created_at": "2022-10-27T20:14:15Z",
          "updated_at": "2023-12-05T16:30:56Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-24T23:43:59Z",
      "updated_at": "2023-01-24T23:43:59Z",
      "source": {
        "issue": {
          "id": 1258121997,
          "node_id": "PR_kwDOABII5844-S2D",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25268",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25268/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25268/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25268/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25268",
          "number": 25268,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Introduce EvictionManager",
          "body": "At the moment, the eviction logic is mangled across two different components (`CConnman`, `PeerManager`), so we can't really test it in isolation. This is not completely true for the inbound eviction logic as it exists as static functions in `net.{h.cpp}` for which tests already exist. However, the outbound eviction logic is not covered by any fuzz tests and is only testable by spinning up both a connman and peerman.\r\n\r\nThis PR splits out the eviction logic into its own component `EvictionManager`. In addition to isolating the eviction logic, we get rid of several layer violations (e.g. `CConnman::ForEachNode/ForNode` calls, `CNode::m_last_block_time`, etc.) between `net` and `net processing`.\r\n\r\nOne instance of the `EvictionManager` is created at start up and passed as a reference to the connection and peer managers. The connection and peer managers report all eviction relevant information to the eviction manager who ultimately suggests nodes to evict as the result of `EvictionManager::SelectInboundNodeToEvict` and `EvictionManager::SelectOutboundNodesToEvict`.",
          "user": {
            "login": "dergoegge",
            "id": 8077169,
            "node_id": "MDQ6VXNlcjgwNzcxNjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dergoegge",
            "html_url": "https://github.com/dergoegge",
            "followers_url": "https://api.github.com/users/dergoegge/followers",
            "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
            "organizations_url": "https://api.github.com/users/dergoegge/orgs",
            "repos_url": "https://api.github.com/users/dergoegge/repos",
            "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dergoegge/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 12,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25268",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25268",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25268.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25268.patch"
          },
          "closed_at": "2023-09-28T20:06:22Z",
          "created_at": "2022-06-02T12:34:15Z",
          "updated_at": "2023-09-28T20:06:22Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 8409430281,
      "node_id": "LE_lADOABII585ai4RkzwAAAAH1PbkJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8409430281",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-01T11:35:37Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8479721911,
      "node_id": "HRFPE_lADOABII585ai4RkzwAAAAH5bkm3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8479721911",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-09T14:00:21Z"
    },
    {
      "event": "commented",
      "id": 1424234586,
      "node_id": "IC_kwDOABII585U5Bha",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1424234586",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-09T14:00:28Z",
      "updated_at": "2023-02-09T14:00:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "`32ab679f54...7c591c868d`: rebase due to conflicts",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1424234586",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "unlabeled",
      "id": 8480084825,
      "node_id": "UNLE_lADOABII585ai4RkzwAAAAH5c9NZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8480084825",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-09T14:33:42Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8561545829,
      "node_id": "HRFPE_lADOABII585ai4RkzwAAAAH-TtJl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8561545829",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-20T13:04:23Z"
    },
    {
      "event": "commented",
      "id": 1436999481,
      "node_id": "IC_kwDOABII585Vpt85",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1436999481",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-20T13:07:08Z",
      "updated_at": "2023-02-20T13:07:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "`7c591c868d...a81fe4ff9b`: rebase and put the fuzz tests in `fuzz/process_message.cpp` instead of in a new file, as [suggested](https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1068245906).",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1436999481",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-21T23:18:33Z",
      "updated_at": "2023-03-21T23:18:33Z",
      "source": {
        "issue": {
          "id": 1634763211,
          "node_id": "PR_kwDOABII585MlzUS",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27294",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27294/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27294/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27294/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27294",
          "number": 27294,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Move chain names to the util library",
          "body": "This pull request is part of the `libbitcoinkernel` project https://github.com/bitcoin/bitcoin/issues/24303 https://github.com/bitcoin/bitcoin/projects/18 and more specifically its \"Step 2: Decouple most non-consensus code from libbitcoinkernel\". It is also a follow up to #26177.\r\n\r\nThe code move of the chain name constants out of the `chainparamsbase` to their own separate header allows the kernel `chainparams` to no longer include `chainparamsbase`. The `chainparamsbase` contain references to the `ArgsManager` and networking related options that should not belong to the kernel library.\r\n\r\nThe commits are split up to accommodate scripted diffs.",
          "user": {
            "login": "TheCharlatan",
            "id": 8421793,
            "node_id": "MDQ6VXNlcjg0MjE3OTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TheCharlatan",
            "html_url": "https://github.com/TheCharlatan",
            "followers_url": "https://api.github.com/users/TheCharlatan/followers",
            "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
            "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
            "repos_url": "https://api.github.com/users/TheCharlatan/repos",
            "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27294",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27294",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27294.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27294.patch"
          },
          "closed_at": "2023-04-19T10:20:57Z",
          "created_at": "2023-03-21T22:10:17Z",
          "updated_at": "2024-04-18T12:43:17Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-24T07:24:01Z",
      "updated_at": "2023-03-24T07:24:01Z",
      "source": {
        "issue": {
          "id": 1347670684,
          "node_id": "PR_kwDOABII5849oK3U",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25908",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25908/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25908/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25908/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25908",
          "number": 25908,
          "state": "closed",
          "state_reason": null,
          "title": "p2p: remove adjusted time",
          "body": "After recent refactoring, the changes required to remove adjusted time are now quite straight forward. This PR removes the notion of adjusted time, along with the `-maxtimeadjustment` option. It doesn't do any other cleanup.\r\n\r\nOpening for discussion of gotchas / brainstorming / concept (N)ACKs.\r\n\r\n1 question from a reviewer was whether we should keep some sort of warning around for if our clock differs too much from our peers. Although it's unclear how useful that might be.\r\n\r\nCommits can be cleaned up / sqaushed. Missing release notes etc.\r\nWould close #4521.",
          "user": {
            "login": "fanquake",
            "id": 863730,
            "node_id": "MDQ6VXNlcjg2MzczMA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fanquake",
            "html_url": "https://github.com/fanquake",
            "followers_url": "https://api.github.com/users/fanquake/followers",
            "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
            "organizations_url": "https://api.github.com/users/fanquake/orgs",
            "repos_url": "https://api.github.com/users/fanquake/repos",
            "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/fanquake/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64584,
              "node_id": "MDU6TGFiZWw2NDU4NA==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming",
              "name": "Brainstorming",
              "color": "ebd775",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 10,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25908",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25908",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25908.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25908.patch"
          },
          "closed_at": "2023-05-17T15:03:46Z",
          "created_at": "2022-08-23T10:01:00Z",
          "updated_at": "2024-04-04T13:30:11Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-01T04:18:07Z",
      "updated_at": "2023-04-01T04:18:07Z",
      "source": {
        "issue": {
          "id": 1650131834,
          "node_id": "PR_kwDOABII585NZG7Z",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27385",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27385/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27385/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27385/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27385",
          "number": 27385,
          "state": "closed",
          "state_reason": null,
          "title": "net, refactor: extract Network and BIP155Network logic to node/network",
          "body": "This extracts the `Network` and `BIP155Network` logic to `node/network`.  The code has been living between `netaddress` and `netbase` and some compilation units include these large files when they only need a `Network` enum or related method.  Separating the code to a standalone unit in `node` improves code separation and helps with using only what is needed.\r\n\r\nI verified the `include` headers with https://cirrus-ci.com/task/6749578737745920 generated by https://github.com/bitcoin/bitcoin/pull/27385/commits/8f647a65d3484c7acd2d97f4b055c582d7734b6f while this was in draft and carefully narrowed them down to the most relevant ones.\r\n\r\nPossible todos for a follow-up: upgrade `Network` to an `enum class`, e.g. `NET_I2P` becomes `Network::I2P` and https://github.com/bitcoin/bitcoin/pull/27385/commits/5cfa3fb8b5815aaf96483a63526e5f0bf3c0a06b.",
          "user": {
            "login": "jonatack",
            "id": 2415484,
            "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonatack",
            "html_url": "https://github.com/jonatack",
            "followers_url": "https://api.github.com/users/jonatack/followers",
            "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
            "organizations_url": "https://api.github.com/users/jonatack/orgs",
            "repos_url": "https://api.github.com/users/jonatack/repos",
            "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jonatack/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 14,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27385",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27385",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27385.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27385.patch"
          },
          "closed_at": "2024-01-21T12:04:24Z",
          "created_at": "2023-03-31T22:40:50Z",
          "updated_at": "2024-01-21T12:04:24Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-13T04:17:26Z",
      "updated_at": "2023-04-13T04:17:26Z",
      "source": {
        "issue": {
          "id": 1500046485,
          "node_id": "PR_kwDOABII585FocrT",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26711/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26711/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26711/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26711",
          "number": 26711,
          "state": "closed",
          "state_reason": null,
          "title": "validate package transactions with their in-package ancestor sets",
          "body": "This contains everything to make mempool/validation logic ready for package relay (see #27463).\r\n\r\nDesign goals:\r\n- Be able to gracefully deal with any arbitrary list of transactions (these come from p2p)\r\n- Validate any ancestor package so that the incentive-compatible transactions end up in our mempool.\r\n  - If the transactions would be accepted individually, they should also be accepted through `AcceptPackage`. We don't want to accidentally reject things just because we happened to download them as a package.\r\n  - Bug prior to these changes: we required `IsChildWithParents` but if there were dependencies between the parents, we could end up (1) accepting a low-feerate child or (2) rejecting a high-feerate parent CPFPing another parent. See the \"interdependent parents\" test case for a specific example.\r\n- Be DoS-resistant.\r\n   - Avoid quadratic validation costs.\r\n   - Avoid loading a lot of stuff from disk, or loading repeatedly.\r\n\r\nThere are 2 main improvements to package evaluation here:\r\n(1) We submit transactions with their in-package ancestor sets.\r\n\t-  See unit test `package_ppfp`: without this change, we would reject everything.\r\n\t- See unit test `package_ppfc`: shows that this doesn't let us do \"parent pays for child;\" we only do this when the individual and ancestor feerates meet mempool minimum feerate\r\n(2) We linearize the package transactions based on ancestor set scoring.\r\n\t- See unit test `package_needs_reorder`: without this change, if we use the original order of transactions, we would only accept 1 grandparent, even if we submit subpackages.\r\n\t- See unit test `package_desc_limits`: without this change, we accept one of the lower-feerate transactions (a bit more of a \"nice to have\" than a \"must have\" example).\r\n\r\nA description of the package validation logic (originally https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1647523520):\r\n\r\n- Basic sanitization. Quit if it's too big, inconsistent, etc.\r\n- Linearize (Topological sort only)\r\n- **PreChecks loop** For each tx, grab UTXOs to calculate fees and filter out anything we should skip:\r\n    - If already in mempool (or same txid in mempool), mark as skip\r\n    - If missing inputs or conflict, record this failure and mark this and all descendants as skip.\r\n    - If no failures or TX_SINGLE_FAILURE, continue\r\n    - For some failures that we expect due to differing chainstates, skip these transactions and their descendants, but continue.\r\n    - Otherwise, record this failure and mark that we will `quit_early` (i.e. not do the Subpackage validation loop).\r\n- Refine our linearization using the fee information.\r\n- **Subpackage validation loop** For each transaction in the new linearized order:\r\n    - Get the transaction's ancestor subpackage.\r\n    - If the feerate of this transaction is insufficient, continue;\r\n    - If the feerate of this subpackage is insufficient, continue;\r\n    - Otherwise, try to submit the subpackage, using `AcceptSingleTransaction()` if it's just 1 tx\r\n    - if at any point we get a non-fee-related error, abort all.\r\n- Call `LimitMempoolSize`\r\n- Backfill results:\r\n    - If the transaction was in mempool, check to see if it's still there in case it was trimmed in `LimitMempoolSize`.\r\n    - Try to use results from the subpackage validation loop.\r\n    - If that doesn't exist (i.e. we quit early), use results from prechecks loop.\r\n    - If that doesn't exist (i.e. we quit early and we hadn't found a failure with it yet), fill with `TX_UNKNOWN`.\r\n\r\nThis means we will call `PreChecks` for each transaction 2 times (fewer if we quit early), and run all other validation checks at most 1 time. A transaction shouldn't be validated in the subpackage validation loop more than once.",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            },
            {
              "id": 164208572,
              "node_id": "MDU6TGFiZWwxNjQyMDg1NzI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool",
              "name": "Mempool",
              "color": "fef2c0",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 36,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26711",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26711.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26711.patch"
          },
          "closed_at": "2023-11-10T14:21:17Z",
          "created_at": "2022-12-16T11:27:00Z",
          "updated_at": "2023-11-10T14:21:17Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-15T22:28:58Z",
      "updated_at": "2023-04-15T22:28:58Z",
      "source": {
        "issue": {
          "id": 1669545174,
          "node_id": "PR_kwDOABII585OZMXO",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27469",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27469/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27469/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27469/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27469",
          "number": 27469,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: improve IBD sync time by skipping block scanning prior birth time",
          "body": "During initial block download, the node's wallet(s) scans every arriving block looking for data that it owns.\r\nThis process can be resource-intensive, as it involves sequentially scanning all transactions within each\r\narriving block.\r\n\r\nTo avoid wasting processing power, we can skip blocks that occurred before the wallet's creation time, \r\nsince these blocks are guaranteed not to contain any relevant wallet data.\r\n\r\nThis has direct implications (an speed improvement) on the underlying blockchain synchronization process\r\nas well. The reason is that the validation interface queue is limited to 10 tasks per time. This means that no\r\nmore than 10 blocks can be waiting for the wallet(s) to be processed while we are synchronizing the chain\r\n(activating the best chain to be more precise).\r\nWhich can be a bottleneck if blocks arrive and are processed faster from the network than what they are \r\nprocessed by the wallet(s).\r\n\r\nSo, by skipping not relevant blocks in the wallet's IBD scanning process, we will also improve the chain \r\nsynchronization time.",
          "user": {
            "login": "furszy",
            "id": 5377650,
            "node_id": "MDQ6VXNlcjUzNzc2NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/furszy",
            "html_url": "https://github.com/furszy",
            "followers_url": "https://api.github.com/users/furszy/followers",
            "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
            "organizations_url": "https://api.github.com/users/furszy/orgs",
            "repos_url": "https://api.github.com/users/furszy/repos",
            "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/furszy/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 17,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27469",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27469",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27469.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27469.patch"
          },
          "closed_at": "2023-05-27T01:35:47Z",
          "created_at": "2023-04-15T19:32:14Z",
          "updated_at": "2023-05-31T05:58:26Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-17T20:58:44Z",
      "updated_at": "2023-04-17T20:58:44Z",
      "source": {
        "issue": {
          "id": 1671559202,
          "node_id": "PR_kwDOABII585Of17A",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27476",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27476/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27476/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27476/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27476",
          "number": 27476,
          "state": "closed",
          "state_reason": null,
          "title": "mempool: keep CPFP'd transactions when loading from mempool.dat",
          "body": "Part of v3 and package relay (see #27463).\r\n\r\n**Problem**\r\nWhen loading mempool.dat, we apply -minrelaytxfee and mempool min feerate on each transaction, meaning we'll reject transactions that may be CPFP'd by later transactions mempool.dat. Even without package relay, we can run into this problem if we are shrinking -maxmempool or raising -minrelaytxfee on a restart.\r\n\r\n**Solution**\r\nWhen loading mempool.dat, use `bypass_limits=true` and then call `TrimToSize()` at the very end.\r\n\r\nAdvantages:\r\n- We definitely keep the \"highest descendant score\" transactions if mempool min feerate rises.\r\n- It's extremely simple implementation-wise.\r\n- It's simple to keep track of what made it in and what didn't.\r\n\r\nDisadvantages:\r\n- If mempool.dat is very large, we can exceed maxmempool by quite a bit.\r\n- This won't be sufficient for ephemeral anchors (unless `bypass_limits` allows not-yet-spent anchors).\r\n",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 164208572,
              "node_id": "MDU6TGFiZWwxNjQyMDg1NzI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool",
              "name": "Mempool",
              "color": "fef2c0",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27476",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27476",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27476.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27476.patch"
          },
          "closed_at": "2023-05-01T20:46:32Z",
          "created_at": "2023-04-17T16:28:02Z",
          "updated_at": "2024-05-02T12:45:59Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1514904243,
      "node_id": "IC_kwDOABII585aS5qz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1514904243",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-19T15:06:46Z",
      "updated_at": "2023-04-19T15:06:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "There may be a silent merge conflict. After rebase to current master at fde224a6610699a6a28cc27e299ac14cbf7e16ca, building with Clang 16 fails at commit `test: add a mocked Sock that allows inspecting what has been Send() to it`.\r\n\r\n<details><summary>build error</summary><p>\r\n\r\n```\r\ntest/util/net.cpp:280:12: error: no viable conversion from returned value of type 'const CNetMessage' to function return type 'std::optional<CNetMessage>'\r\n    return msg;\r\n           ^~~\r\n/opt/homebrew/opt/llvm/bin/../include/c++/v1/optional:736:41: note: candidate constructor not viable: no known conversion from 'const CNetMessage' to 'const optional<CNetMessage> &' for 1st argument\r\n    _LIBCPP_INLINE_VISIBILITY constexpr optional(const optional&) = default;\r\n                                        ^\r\n/opt/homebrew/opt/llvm/bin/../include/c++/v1/optional:737:41: note: candidate constructor not viable: no known conversion from 'const CNetMessage' to 'optional<CNetMessage> &&' for 1st argument\r\n    _LIBCPP_INLINE_VISIBILITY constexpr optional(optional&&) = default;\r\n                                        ^\r\n/opt/homebrew/opt/llvm/bin/../include/c++/v1/optional:738:41: note: candidate constructor not viable: no known conversion from 'const CNetMessage' to 'nullopt_t' for 1st argument\r\n    _LIBCPP_INLINE_VISIBILITY constexpr optional(nullopt_t) noexcept {}\r\n                                        ^\r\n/opt/homebrew/opt/llvm/bin/../include/c++/v1/optional:762:15: note: candidate template ignored: requirement '_CheckOptionalArgsCtor<const CNetMessage &>::__enable_implicit()' was not satisfied [with _Up = const CNetMessage &]\r\n    constexpr optional(_Up&& __v)\r\n              ^\r\n/opt/homebrew/opt/llvm/bin/../include/c++/v1/optional:777:35: note: candidate template ignored: could not match 'const optional<_Up>' against 'const CNetMessage'\r\n    _LIBCPP_CONSTEXPR_SINCE_CXX20 optional(const optional<_Up>& __v)\r\n                                  ^\r\n/opt/homebrew/opt/llvm/bin/../include/c++/v1/optional:795:35: note: candidate template ignored: could not match 'optional<_Up>' against 'const CNetMessage'\r\n    _LIBCPP_CONSTEXPR_SINCE_CXX20 optional(optional<_Up>&& __v)\r\n                                  ^\r\n/opt/homebrew/opt/llvm/bin/../include/c++/v1/optional:748:24: note: explicit constructor is not a candidate\r\n    constexpr explicit optional(_InPlaceT, _Args&&... __args)\r\n                       ^\r\n/opt/homebrew/opt/llvm/bin/../include/c++/v1/optional:769:24: note: explicit constructor is not a candidate\r\n    constexpr explicit optional(_Up&& __v)\r\n                       ^\r\n/opt/homebrew/opt/llvm/bin/../include/c++/v1/optional:785:44: note: explicit constructor is not a candidate\r\n    _LIBCPP_CONSTEXPR_SINCE_CXX20 explicit optional(const optional<_Up>& __v)\r\n                                           ^\r\n/opt/homebrew/opt/llvm/bin/../include/c++/v1/optional:803:44: note: explicit constructor is not a candidate\r\n    _LIBCPP_CONSTEXPR_SINCE_CXX20 explicit optional(optional<_Up>&& __v)\r\n                                           ^\r\n1 error generated.\r\nmake[2]: *** [test/util/libtest_util_a-net.o] Error 1\r\nmake[2]: *** Waiting for unfinished jobs....\r\nmake[1]: *** [all-recursive] Error 1\r\nmake: *** [all-recursive] Error 1\r\n```\r\n</p></details>\r\n\r\n```\r\n$ clang --version\r\nHomebrew clang version 16.0.1\r\nTarget: arm64-apple-darwin22.4.0\r\nThread model: posix\r\n```",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1514904243",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "commented",
      "id": 1514913010,
      "node_id": "IC_kwDOABII585aS7zy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1514913010",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-19T15:12:21Z",
      "updated_at": "2023-04-19T15:12:21Z",
      "author_association": "MEMBER",
      "body": "> There may be a silent merge conflict.\r\n\r\nProbably because of https://github.com/bitcoin/bitcoin/pull/27324, copying `CNetMessage`s is no longer possible.",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1514913010",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-19T17:47:54Z",
      "updated_at": "2023-04-19T17:47:54Z",
      "source": {
        "issue": {
          "id": 1674612117,
          "node_id": "PR_kwDOABII585OqCkB",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27491",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27491/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27491/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27491/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27491",
          "number": 27491,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Move chain constants to the util library",
          "body": "This pull request is part of the `libbitcoinkernel` project https://github.com/bitcoin/bitcoin/issues/24303 https://github.com/bitcoin/bitcoin/projects/18 and more specifically its \"Step 2: Decouple most non-consensus code from libbitcoinkernel\". It is also a follow up to #26177.\r\n\r\nIt replaces pull request https://github.com/bitcoin/bitcoin/pull/27294, which just moved the constants to a new file, but did not re-declare them as enums.\r\n\r\nThe code move of the chain name constants out of the `chainparamsbase` to their own separate header allows the kernel `chainparams` to no longer include `chainparamsbase`. The `chainparamsbase` contain references to the `ArgsManager` and networking related options that should not belong to the kernel library. Besides this move, the constants are re-declared as enums with helper functions facilitating string conversions.",
          "user": {
            "login": "TheCharlatan",
            "id": 8421793,
            "node_id": "MDQ6VXNlcjg0MjE3OTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TheCharlatan",
            "html_url": "https://github.com/TheCharlatan",
            "followers_url": "https://api.github.com/users/TheCharlatan/followers",
            "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
            "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
            "repos_url": "https://api.github.com/users/TheCharlatan/repos",
            "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 13,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27491",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27491",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27491.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27491.patch"
          },
          "closed_at": "2023-05-09T14:42:52Z",
          "created_at": "2023-04-19T10:19:09Z",
          "updated_at": "2023-05-10T10:41:20Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 9102674890,
      "node_id": "LE_lADOABII585ai4RkzwAAAAIej8vK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9102674890",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-26T11:55:00Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9232085403,
      "node_id": "HRFPE_lADOABII585ai4RkzwAAAAImRnGb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9232085403",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-12T11:34:15Z"
    },
    {
      "event": "commented",
      "id": 1545603904,
      "node_id": "IC_kwDOABII585cIAtA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1545603904",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-12T11:34:40Z",
      "updated_at": "2023-05-12T11:34:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "`a81fe4ff9b...f559067e27`: rebase due to conflicts, thanks for looking into this!",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1545603904",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "unlabeled",
      "id": 9233108130,
      "node_id": "UNLE_lADOABII585ai4RkzwAAAAImVgyi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9233108130",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-12T13:30:58Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-12T13:46:10Z",
      "updated_at": "2023-05-12T13:46:10Z",
      "source": {
        "issue": {
          "id": 1705885197,
          "node_id": "PR_kwDOABII585QS9YY",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27626",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27626/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27626/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27626/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27626",
          "number": 27626,
          "state": "closed",
          "state_reason": null,
          "title": "Parallel compact block downloads, take 3",
          "body": "This is an attempt at mitigating https://github.com/bitcoin/bitcoin/issues/25258 , which is a revival of https://github.com/bitcoin/bitcoin/pull/10984, which is a revival of https://github.com/bitcoin/bitcoin/pull/9447.\r\n\r\nThis PR attempts to mitigate a single case, where high bandwidth peers can bail us out of a flakey\r\npeer not completing blocks for us. We allow up to 2 additional getblocktxns requests per unique block.\r\nThis would hopefully allow the chance for an honest high bandwidth peer to hand us the transactions\r\neven if the first in flight peer stalls out.\r\n\r\nIn contrast to previous effort:\r\n\r\n1) it will not help if subsequent peers send block headers only, so only high-bandwidth peers this time. See: https://github.com/bitcoin/bitcoin/pull/10984/files#diff-6875de769e90cec84d2e8a9c1b962cdbcda44d870d42e4215827e599e11e90e3R1411\r\n2)  `MAX_GETBLOCKTXN_TXN_AFTER_FIRST_IN_FLIGHT` is removed, in favor of aiding recovery during turbulent mempools\r\n3) We require one of the 3 block fetching slots to be an outbound peer. This can be the original offering peer, or subsequent compact blocks given by high bandwidth peers.\r\n",
          "user": {
            "login": "instagibbs",
            "id": 5767891,
            "node_id": "MDQ6VXNlcjU3Njc4OTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/instagibbs",
            "html_url": "https://github.com/instagibbs",
            "followers_url": "https://api.github.com/users/instagibbs/followers",
            "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
            "organizations_url": "https://api.github.com/users/instagibbs/orgs",
            "repos_url": "https://api.github.com/users/instagibbs/repos",
            "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/instagibbs/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/60",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/60",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/60/labels",
            "id": 9286970,
            "node_id": "MI_kwDOABII584AjbU6",
            "number": 60,
            "state": "closed",
            "title": "26.0",
            "description": "",
            "creator": {
              "login": "fanquake",
              "id": 863730,
              "node_id": "MDQ6VXNlcjg2MzczMA==",
              "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/fanquake",
              "html_url": "https://github.com/fanquake",
              "followers_url": "https://api.github.com/users/fanquake/followers",
              "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
              "organizations_url": "https://api.github.com/users/fanquake/orgs",
              "repos_url": "https://api.github.com/users/fanquake/repos",
              "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/fanquake/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 116,
            "created_at": "2023-04-15T11:36:05Z",
            "updated_at": "2023-12-08T10:41:40Z",
            "closed_at": "2023-12-04T13:27:46Z"
          },
          "locked": false,
          "comments": 32,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27626",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27626",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27626.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27626.patch"
          },
          "closed_at": "2023-05-24T09:09:27Z",
          "created_at": "2023-05-11T14:05:20Z",
          "updated_at": "2023-06-02T15:00:47Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 9326083898,
      "node_id": "LE_lADOABII585ai4RkzwAAAAIr4L86",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9326083898",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-24T10:39:50Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "unsubscribed",
      "id": 9328617400,
      "node_id": "UE_lADOABII585ai4RkzwAAAAIsB2e4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9328617400",
      "actor": {
        "login": "joostjager",
        "id": 4638168,
        "node_id": "MDQ6VXNlcjQ2MzgxNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4638168?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joostjager",
        "html_url": "https://github.com/joostjager",
        "followers_url": "https://api.github.com/users/joostjager/followers",
        "following_url": "https://api.github.com/users/joostjager/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/joostjager/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/joostjager/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/joostjager/subscriptions",
        "organizations_url": "https://api.github.com/users/joostjager/orgs",
        "repos_url": "https://api.github.com/users/joostjager/repos",
        "events_url": "https://api.github.com/users/joostjager/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/joostjager/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-24T14:27:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9444404490,
      "node_id": "HRFPE_lADOABII585ai4RkzwAAAAIy7i0K",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9444404490",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-06T10:22:55Z"
    },
    {
      "event": "commented",
      "id": 1578372952,
      "node_id": "IC_kwDOABII585eFA9Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1578372952",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-06T10:23:17Z",
      "updated_at": "2023-06-06T10:23:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "`f559067e27...4c867de996`: rebase due to conflicts",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1578372952",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "reviewed",
      "id": 1464897993,
      "node_id": "PRR_kwDOABII585XUJHJ",
      "url": null,
      "actor": null,
      "commit_id": "4c867de996f58655aec3911f45367eb31865fb4d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#pullrequestreview-1464897993",
      "submitted_at": "2023-06-06T10:55:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
    },
    {
      "event": "unlabeled",
      "id": 9445203261,
      "node_id": "UNLE_lADOABII585ai4RkzwAAAAIy-l09",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9445203261",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-06T11:46:25Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9468834616,
      "node_id": "HRFPE_lADOABII585ai4RkzwAAAAI0YvM4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9468834616",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-08T07:48:18Z"
    },
    {
      "event": "commented",
      "id": 1582072953,
      "node_id": "IC_kwDOABII585eTIR5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1582072953",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-08T07:48:43Z",
      "updated_at": "2023-06-08T07:49:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "`4c867de996...35fc849412`: address a suggestion (remove usage of `CDataStream`)",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1582072953",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "labeled",
      "id": 9469626295,
      "node_id": "LE_lADOABII585ai4RkzwAAAAI0bwe3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9469626295",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-08T08:59:43Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9469787309,
      "node_id": "HRFPE_lADOABII585ai4RkzwAAAAI0cXyt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9469787309",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-08T09:12:04Z"
    },
    {
      "event": "commented",
      "id": 1582194359,
      "node_id": "IC_kwDOABII585eTl63",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1582194359",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-08T09:12:16Z",
      "updated_at": "2023-06-08T09:16:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "`35fc849412...bedbdf4a15`: address https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1219413577\r\n\r\n`bedbdf4a15...b96bd52f3a`: ditto, but move the check to the start of the test",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1582194359",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9469832202,
      "node_id": "HRFPE_lADOABII585ai4RkzwAAAAI0ciwK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9469832202",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-08T09:16:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9640812911,
      "node_id": "HRFPE_lADOABII585ai4RkzwAAAAI-oyFv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9640812911",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-26T15:48:40Z"
    },
    {
      "event": "commented",
      "id": 1607757096,
      "node_id": "IC_kwDOABII585f1G0o",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1607757096",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-26T15:48:48Z",
      "updated_at": "2023-06-26T15:48:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "`b96bd52f3a...4557cc336f`: rebase",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1607757096",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "unlabeled",
      "id": 9642768937,
      "node_id": "UNLE_lADOABII585ai4RkzwAAAAI-wPop",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9642768937",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-26T18:59:58Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1501951235,
      "node_id": "PRR_kwDOABII585ZhfUD",
      "url": null,
      "actor": null,
      "commit_id": "4557cc336fd8eb321b0db024b70213f46017071c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Reviewed/built/tested the first four commits up to https://github.com/bitcoin/bitcoin/commit/d2f46c705540c74c2b6f83a66535c3ead1cb95d4.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#pullrequestreview-1501951235",
      "submitted_at": "2023-06-27T22:59:43Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-28T11:51:19Z",
      "updated_at": "2023-06-28T11:51:19Z",
      "source": {
        "issue": {
          "id": 1778654231,
          "node_id": "PR_kwDOABII585UID3o",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27989",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27989/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27989/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27989/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27989",
          "number": 27989,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Move sock from util to common",
          "body": "Networking code should not be required by the kernel.",
          "user": {
            "login": "hebasto",
            "id": 32963518,
            "node_id": "MDQ6VXNlcjMyOTYzNTE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hebasto",
            "html_url": "https://github.com/hebasto",
            "followers_url": "https://api.github.com/users/hebasto/followers",
            "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
            "organizations_url": "https://api.github.com/users/hebasto/orgs",
            "repos_url": "https://api.github.com/users/hebasto/repos",
            "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/hebasto/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27989",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27989",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27989.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27989.patch"
          },
          "closed_at": "2023-06-30T09:36:59Z",
          "created_at": "2023-06-28T10:24:10Z",
          "updated_at": "2023-06-30T09:37:00Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1503702678,
      "node_id": "PRR_kwDOABII585ZoK6W",
      "url": null,
      "actor": null,
      "commit_id": "4557cc336fd8eb321b0db024b70213f46017071c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 4557cc336fd8eb321b0db024b70213f46017071c\r\n\r\nHappy to re-review for https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1245423693 and any of the suggestions below.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#pullrequestreview-1503702678",
      "submitted_at": "2023-06-28T19:13:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9676620753,
      "node_id": "HRFPE_lADOABII585ai4RkzwAAAAJAxYPR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9676620753",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-29T12:59:50Z"
    },
    {
      "event": "commented",
      "id": 1613145594,
      "node_id": "IC_kwDOABII585gJqX6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1613145594",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-29T13:00:57Z",
      "updated_at": "2023-06-29T13:18:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "`4557cc336f...353d323356`: take some suggestions\r\n\r\nInvalidates ACK from @jonatack \r\n\r\n`353d323356...612ba17fca`: proper rename of the test netmsg -> net_msg ",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1613145594",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "mentioned",
      "id": 9676633961,
      "node_id": "MEE_lADOABII585ai4RkzwAAAAJAxbdp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9676633961",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-29T13:00:58Z"
    },
    {
      "event": "subscribed",
      "id": 9676633981,
      "node_id": "SE_lADOABII585ai4RkzwAAAAJAxbd9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9676633981",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-29T13:00:58Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9676823665,
      "node_id": "HRFPE_lADOABII585ai4RkzwAAAAJAyJxx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9676823665",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-29T13:17:15Z"
    },
    {
      "event": "labeled",
      "id": 9676825436,
      "node_id": "LE_lADOABII585ai4RkzwAAAAJAyKNc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9676825436",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-29T13:17:24Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 9678697941,
      "node_id": "UNLE_lADOABII585ai4RkzwAAAAJA5TXV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9678697941",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-29T15:37:07Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1613651346,
      "node_id": "IC_kwDOABII585gLl2S",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1613651346",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-29T19:03:19Z",
      "updated_at": "2023-06-29T19:03:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK 612ba17fcadc955c142f21f9b1af0b60f0def55f",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1613651346",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-07T21:02:18Z",
      "updated_at": "2023-07-07T21:02:18Z",
      "source": {
        "issue": {
          "id": 1793434194,
          "node_id": "PR_kwDOABII585U6VtK",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28043",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28043/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28043/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28043/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28043",
          "number": 28043,
          "state": "closed",
          "state_reason": null,
          "title": "fuzz: Test headers pre-sync through p2p interface",
          "body": "This PR adds a regression fuzz test for #26355 and [some of the bugs](https://github.com/bitcoin/bitcoin/pull/25717/commits/ed6cddd98e32263fc116a4380af6d66da20da990) found during review of #25717.\r\n\r\nShould give us more confidence in doing #25725.",
          "user": {
            "login": "dergoegge",
            "id": 8077169,
            "node_id": "MDQ6VXNlcjgwNzcxNjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dergoegge",
            "html_url": "https://github.com/dergoegge",
            "followers_url": "https://api.github.com/users/dergoegge/followers",
            "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
            "organizations_url": "https://api.github.com/users/dergoegge/orgs",
            "repos_url": "https://api.github.com/users/dergoegge/repos",
            "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dergoegge/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/61",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/61",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/61/labels",
            "id": 9334188,
            "node_id": "MI_kwDOABII584Ajm2s",
            "number": 61,
            "state": "closed",
            "title": "27.0",
            "description": "",
            "creator": {
              "login": "sipa",
              "id": 548488,
              "node_id": "MDQ6VXNlcjU0ODQ4OA==",
              "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/sipa",
              "html_url": "https://github.com/sipa",
              "followers_url": "https://api.github.com/users/sipa/followers",
              "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
              "organizations_url": "https://api.github.com/users/sipa/orgs",
              "repos_url": "https://api.github.com/users/sipa/repos",
              "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/sipa/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 69,
            "created_at": "2023-04-27T08:01:57Z",
            "updated_at": "2024-04-16T08:33:17Z",
            "closed_at": "2024-04-16T08:33:17Z"
          },
          "locked": false,
          "comments": 10,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28043",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28043",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28043.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28043.patch"
          },
          "closed_at": "2024-01-26T11:41:54Z",
          "created_at": "2023-07-07T12:05:27Z",
          "updated_at": "2024-01-29T11:46:17Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 9807910828,
      "node_id": "LE_lADOABII585ai4RkzwAAAAJImNes",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9807910828",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-13T08:16:22Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1529671710,
      "node_id": "PRR_kwDOABII585bLPAe",
      "url": null,
      "actor": null,
      "commit_id": "612ba17fcadc955c142f21f9b1af0b60f0def55f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Not sure about changing the framework.\r\n\r\nAlso, needs rebase if still relevant.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#pullrequestreview-1529671710",
      "submitted_at": "2023-07-14T06:07:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-15T02:40:22Z",
      "updated_at": "2023-07-15T02:40:22Z",
      "source": {
        "issue": {
          "id": 1805084885,
          "node_id": "PR_kwDOABII585Vh-pc",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28077",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28077/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28077/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28077/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28077",
          "number": 28077,
          "state": "closed",
          "state_reason": null,
          "title": "I2P: also sleep after errors in Accept() & destroy the session if we get an unexpected error",
          "body": "### Background\r\n\r\nIn the `i2p::sam::Session` class:\r\n\r\n`Listen()` does:\r\n* if the session is not created yet\r\n  * create the control socket and on it:\r\n  * `HELLO`\r\n  * `SESSION CREATE ID=sessid`\r\n  * leave the control socked opened \r\n* create a new socket and on it:\r\n* `HELLO`\r\n* `STREAM ACCEPT ID=sessid`\r\n* read reply (`STREAM STATUS`), `Listen()` only succeeds if it contains `RESULT=OK`\r\n\r\nThen a wait starts, for a peer to connect. When connected,\r\n\r\n`Accept()` does:\r\n* on the socket from `STREAM ACCEPT` from `Listen()`: read the Base64 identification of the connecting peer\r\n\r\n### Problem\r\n\r\nThe I2P router may be in such a state that this happens in a quick succession (many times per second, see https://github.com/bitcoin/bitcoin/issues/22759#issuecomment-1609907115): `Listen()`-succeeds, `Accept()`-fails.\r\n\r\n`Accept()` fails because the I2P router sends something that is not Base64 on the socket: `STREAM STATUS RESULT=I2P_ERROR MESSAGE=\"Session was closed\"`\r\n\r\nWe only sleep after failed `Listen()` because the assumption was that if `Accept()` fails then the next `Listen()` will also fail.\r\n\r\n### Solution\r\n\r\nAvoid filling the log with \"Error accepting:\" messages and sleep also after a failed `Accept()`.\r\n\r\n### Extra changes\r\n\r\n* Reset the error waiting time after one successful connection. Otherwise the timer will remain high due to problems that have been solved long time in the past.\r\n\r\n* Increment the wait time less aggressively.\r\n\r\n* Handle the unexpected \"Session was closed\" message more gracefully (don't log stupid messages like `Cannot decode Base64: \"STREAM STATUS...`) and destroy the session right way.",
          "user": {
            "login": "vasild",
            "id": 266751,
            "node_id": "MDQ6VXNlcjI2Njc1MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vasild",
            "html_url": "https://github.com/vasild",
            "followers_url": "https://api.github.com/users/vasild/followers",
            "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
            "organizations_url": "https://api.github.com/users/vasild/orgs",
            "repos_url": "https://api.github.com/users/vasild/repos",
            "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/vasild/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/60",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/60",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/60/labels",
            "id": 9286970,
            "node_id": "MI_kwDOABII584AjbU6",
            "number": 60,
            "state": "closed",
            "title": "26.0",
            "description": "",
            "creator": {
              "login": "fanquake",
              "id": 863730,
              "node_id": "MDQ6VXNlcjg2MzczMA==",
              "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/fanquake",
              "html_url": "https://github.com/fanquake",
              "followers_url": "https://api.github.com/users/fanquake/followers",
              "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
              "organizations_url": "https://api.github.com/users/fanquake/orgs",
              "repos_url": "https://api.github.com/users/fanquake/repos",
              "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/fanquake/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 116,
            "created_at": "2023-04-15T11:36:05Z",
            "updated_at": "2023-12-08T10:41:40Z",
            "closed_at": "2023-12-04T13:27:46Z"
          },
          "locked": false,
          "comments": 21,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28077",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28077",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28077.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28077.patch"
          },
          "closed_at": "2023-10-19T20:08:20Z",
          "created_at": "2023-07-14T15:40:32Z",
          "updated_at": "2023-10-23T12:22:58Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1642386101,
      "node_id": "IC_kwDOABII585h5NK1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1642386101",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-19T16:19:23Z",
      "updated_at": "2023-07-19T16:19:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "> needs rebase if still relevant.\r\n\r\nFor the `previous releases` CI? (I don't find any merge conflicts with current master.)\r\n",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1642386101",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "commented",
      "id": 1642400630,
      "node_id": "IC_kwDOABII585h5Qt2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1642400630",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-19T16:29:21Z",
      "updated_at": "2023-07-19T16:29:21Z",
      "author_association": "MEMBER",
      "body": "> I don't find any merge conflicts with current master.\r\n\r\nAre you sure you ran a full build after the merge?",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1642400630",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "commented",
      "id": 1642405661,
      "node_id": "IC_kwDOABII585h5R8d",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1642405661",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-19T16:33:08Z",
      "updated_at": "2023-07-19T16:33:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "Ah, the second try did it :)\r\n\r\n<details><summary>build log</summary><p>\r\n\r\n```\r\ntest/fuzz/process_message_e2e.cpp:59:1: error: a type specifier is required for all declarations\r\nFUZZ_TARGET_INIT(process_message_e2e, initialize_process_message_e2e)\r\n^\r\ntest/fuzz/process_message_e2e.cpp:59:18: error: use of undeclared identifier 'process_message_e2e'\r\nFUZZ_TARGET_INIT(process_message_e2e, initialize_process_message_e2e)\r\n                 ^\r\ntest/fuzz/process_message_e2e.cpp:59:70: error: expected ';' after top level declarator\r\nFUZZ_TARGET_INIT(process_message_e2e, initialize_process_message_e2e)\r\n                                                                     ^\r\n                                                                     ;\r\n3 errors generated.\r\nmake[2]: *** [test/fuzz/fuzz-process_message_e2e.o] Error 1\r\nmake[2]: *** Waiting for unfinished jobs....\r\ntest/validation_chainstatemanager_tests.cpp:664:9: error: use of undeclared identifier 'ASSERT_DEBUG_LOG'\r\n        ASSERT_DEBUG_LOG(\"failed to validate the -assumeutxo snapshot state\");\r\n        ^\r\n1 error generated.\r\nmake[2]: *** [test/test_bitcoin-validation_chainstatemanager_tests.o] Error 1\r\nwallet/test/walletload_tests.cpp:61:20: error: no matching constructor for initialization of 'DebugLogHelper'\r\n    DebugLogHelper logHelper(\"The descriptor ID calculated by the wallet differs from the one in DB\", [&](const std::string* s) {\r\n                   ^         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n./test/util/logging.h:23:14: note: candidate constructor not viable: no known conversion from '(lambda at wallet/test/walletload_tests.cpp:61:103)' to 'MatchFn' (aka 'function<bool (const basic_string<char> &)>') for 2nd argument\r\n    explicit DebugLogHelper(std::string message, MatchFn match = [](const std::string&){ return true; });\r\n             ^\r\n./test/util/logging.h:18:7: note: candidate constructor (the implicit copy constructor) not viable: requires 1 argument, but 2 were provided\r\nclass DebugLogHelper\r\n      ^\r\n1 error generated.\r\n```\r\n</p></details>\r\n",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1642405661",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9874491306,
      "node_id": "HRFPE_lADOABII585ai4RkzwAAAAJMkMeq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9874491306",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-20T13:21:13Z"
    },
    {
      "event": "commented",
      "id": 1643919170,
      "node_id": "IC_kwDOABII585h_DdC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1643919170",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-20T13:22:43Z",
      "updated_at": "2023-07-20T13:22:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "`612ba17fca...55c84c2d3b`: rebase due to conflicts plus reduce the changes to `DebugLogHelper`: https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1263332063.",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1643919170",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "reviewed",
      "id": 1539561129,
      "node_id": "PRR_kwDOABII585bw9ap",
      "url": null,
      "actor": null,
      "commit_id": "55c84c2d3bff09784ad127aba68a166f3f36f215",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#pullrequestreview-1539561129",
      "submitted_at": "2023-07-20T15:32:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
    },
    {
      "event": "unlabeled",
      "id": 9876985207,
      "node_id": "UNLE_lADOABII585ai4RkzwAAAAJMttV3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9876985207",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-20T16:55:42Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1540077018,
      "node_id": "PRR_kwDOABII585by7Xa",
      "url": null,
      "actor": null,
      "commit_id": "55c84c2d3bff09784ad127aba68a166f3f36f215",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#pullrequestreview-1540077018",
      "submitted_at": "2023-07-20T20:55:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10099539098,
      "node_id": "HRFPE_lADOABII585ai4RkzwAAAAJZ-rya",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10099539098",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-15T17:22:15Z"
    },
    {
      "event": "commented",
      "id": 1679324809,
      "node_id": "IC_kwDOABII585kGHaJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1679324809",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-15T17:22:50Z",
      "updated_at": "2023-08-15T17:22:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "`55c84c2d3b...ca7a9983eb`: add a comment in the source code, as per https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1269953546",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1679324809",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "reviewed",
      "id": 1579061412,
      "node_id": "PRR_kwDOABII585eHpCk",
      "url": null,
      "actor": null,
      "commit_id": "ca7a9983eb2115c1c64f295508e96b0d188b7004",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#pullrequestreview-1579061412",
      "submitted_at": "2023-08-15T17:29:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
    },
    {
      "event": "labeled",
      "id": 10101388959,
      "node_id": "LE_lADOABII585ai4RkzwAAAAJaFvaf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10101388959",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-15T20:54:51Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10107093207,
      "node_id": "HRFPE_lADOABII585ai4RkzwAAAAJabgDX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10107093207",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-16T11:08:31Z"
    },
    {
      "event": "commented",
      "id": 1680410324,
      "node_id": "IC_kwDOABII585kKQbU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1680410324",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-16T11:12:32Z",
      "updated_at": "2023-08-16T11:12:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "`ca7a9983eb...ae75114975`: enter IBD at the start and possibly jump out at some point, like in `src/test/fuzz/process_messages.cpp`.",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1680410324",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10117187472,
      "node_id": "HRFPE_lADOABII585ai4RkzwAAAAJbCAeQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10117187472",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-17T09:40:53Z"
    },
    {
      "event": "commented",
      "id": 1681962937,
      "node_id": "IC_kwDOABII585kQLe5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1681962937",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-17T09:41:24Z",
      "updated_at": "2023-08-17T09:41:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "`ae75114975...d31cb74c44`: rebase for CI",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1681962937",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "unlabeled",
      "id": 10128848154,
      "node_id": "UNLE_lADOABII585ai4RkzwAAAAJbufUa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10128848154",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-18T11:03:05Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "comment_deleted",
      "id": 10129923337,
      "node_id": "CDE_lADOABII585ai4RkzwAAAAJbyl0J",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10129923337",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-18T13:12:38Z"
    },
    {
      "event": "labeled",
      "id": 10225189481,
      "node_id": "LE_lADOABII585ai4RkzwAAAAJheAJp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10225189481",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-29T19:46:28Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1705681657,
      "node_id": "IC_kwDOABII585lqqL5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1705681657",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-04T20:33:35Z",
      "updated_at": "2023-09-04T20:33:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "Needs rebase if still relevant",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1705681657",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10383281604,
      "node_id": "HRFPE_lADOABII585ai4RkzwAAAAJq5E3E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10383281604",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-15T13:04:48Z"
    },
    {
      "event": "commented",
      "id": 1721251144,
      "node_id": "IC_kwDOABII585mmDVI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1721251144",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-15T13:05:01Z",
      "updated_at": "2023-09-15T13:05:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "`d31cb74c44...4bc062fb9c`: rebase due to conflicts",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1721251144",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "unlabeled",
      "id": 10384400637,
      "node_id": "UNLE_lADOABII585ai4RkzwAAAAJq9WD9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10384400637",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-15T14:49:15Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 10539684017,
      "node_id": "LE_lADOABII585ai4RkzwAAAAJ0NtCx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10539684017",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-03T14:58:40Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10572670981,
      "node_id": "HRFPE_lADOABII585ai4RkzwAAAAJ2LigF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10572670981",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-06T09:12:17Z"
    },
    {
      "event": "commented",
      "id": 1750253114,
      "node_id": "IC_kwDOABII585oUr46",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1750253114",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-06T09:12:40Z",
      "updated_at": "2023-10-06T09:12:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "`4bc062fb9c...8f21993a06`: rebase due to conflicts",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1750253114",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-06T12:44:30Z",
      "updated_at": "2023-10-06T12:44:30Z",
      "source": {
        "issue": {
          "id": 1034936603,
          "node_id": "PR_kwDOABII584tnYg9",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23352",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23352/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23352/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23352/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/23352",
          "number": 23352,
          "state": "closed",
          "state_reason": null,
          "title": "test: Extend stale_tip_peer_management test",
          "body": "Add coverage for the case where a peer is protected when it pretends to have a block.\r\n\r\nAlso, add some `ASSERT_DEBUG_LOG` to document the tests for the reader.",
          "user": {
            "login": "maflcko",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maflcko",
            "html_url": "https://github.com/maflcko",
            "followers_url": "https://api.github.com/users/maflcko/followers",
            "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
            "organizations_url": "https://api.github.com/users/maflcko/orgs",
            "repos_url": "https://api.github.com/users/maflcko/repos",
            "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/maflcko/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23352",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/23352",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/23352.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/23352.patch"
          },
          "closed_at": "2024-02-06T10:46:07Z",
          "created_at": "2021-10-25T10:08:05Z",
          "updated_at": "2024-02-06T10:46:11Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "unlabeled",
      "id": 10584773080,
      "node_id": "UNLE_lADOABII585ai4RkzwAAAAJ25tHY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10584773080",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-08T17:27:18Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1765681478,
      "node_id": "IC_kwDOABII585pPilG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1765681478",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-17T05:14:18Z",
      "updated_at": "2023-10-17T05:14:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "Will re-review this soon.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1765681478",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-20T11:56:56Z",
      "updated_at": "2023-10-20T11:56:56Z",
      "source": {
        "issue": {
          "id": 1954053513,
          "node_id": "PR_kwDOABII585dXq6y",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28690",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28690/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28690/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28690/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28690",
          "number": 28690,
          "state": "open",
          "state_reason": null,
          "title": "build: Introduce internal kernel library",
          "body": "This PR introduces a new `libbitcoin_kernel` internal library. It completes the internal library design as laid out in [doc/design/libraries.md](https://github.com/bitcoin/bitcoin/blob/master/doc/design/libraries.md). The external `libbitcoinkernel` library now uses the source lists of the internal library for its compilation.\r\n\r\nShould also address https://github.com/bitcoin/bitcoin/issues/28548.",
          "user": {
            "login": "TheCharlatan",
            "id": 8421793,
            "node_id": "MDQ6VXNlcjg0MjE3OTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TheCharlatan",
            "html_url": "https://github.com/TheCharlatan",
            "followers_url": "https://api.github.com/users/TheCharlatan/followers",
            "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
            "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
            "repos_url": "https://api.github.com/users/TheCharlatan/repos",
            "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 25,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28690",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28690",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28690.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28690.patch"
          },
          "created_at": "2023-10-20T11:01:03Z",
          "updated_at": "2024-03-12T01:06:33Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-29T00:00:49Z",
      "updated_at": "2023-10-29T00:00:49Z",
      "source": {
        "issue": {
          "id": 1937231095,
          "node_id": "I_kwDOABII585zd8z3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28635",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28635/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28635/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28635/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/28635",
          "number": 28635,
          "state": "open",
          "state_reason": null,
          "title": "Test calling addnode more than once (and MAX_ADDNODE_CONNECTIONS)",
          "body": "While reviewing #28331 we noticed a crash that wasn't caught by the test suite, but would very quickly happen on a real node. See https://github.com/bitcoin/bitcoin/pull/28331#discussion_r1342450439\r\n\r\nI was able to reproduce it by calling `addnode` twice and having the test suite wait a little bit. But this also involved hacking `ThreadOpenAddedConnections` to wait 1 second instead of a full minute. See https://github.com/Sjors/bitcoin/commit/bc3995c66300fb3139c5360e8f6ee807b02ea86e\r\n\r\nIf the test suite could mock the delay in `ThreadOpenAddedConnections` we can add a regular test for this.\r\n\r\nIt would also be a good idea to test `MAX_ADDNODE_CONNECTIONS`, which should be a simple matter of spinning up ~10 test nodes.",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 2,
          "created_at": "2023-10-11T08:56:02Z",
          "updated_at": "2023-10-29T00:33:49Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-29T02:50:55Z",
      "updated_at": "2023-10-29T02:50:55Z",
      "source": {
        "issue": {
          "id": 1966773871,
          "node_id": "PR_kwDOABII585eCZ-F",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28749",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28749/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28749/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28749/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28749",
          "number": 28749,
          "state": "closed",
          "state_reason": null,
          "title": "test: add peer connection unit test coverage",
          "body": "This PR is based on #28155 and adds unit test coverage for each change in it (i.e. tests that fail on master), as well as some missing unit test coverage in general for `CConnman::AddNode()`, `ConnectNode()`, `GetAddedNodeInfo()`, `ThreadOpenAddedConnections()`, and RPC `addnode` -- see coverage check at https://corecheck.dev/bitcoin/bitcoin/pulls/28749.  I'm building on these initial unit tests for writing coverage for #28248.\r\n\r\nA version of this branch based on current master instead of #28155 is [here](https://github.com/jonatack/bitcoin/commits/2023-10-net_peer_connection_tests-for-master).\r\n\r\nSuggest the following to reviewers for running the tests locally:\r\n\r\n```\r\n./src/test/test_bitcoin -t net_peer_connection_tests -l all -- -printtoconsole=1 \r\n```\r\nor\r\n```\r\n./src/test/test_bitcoin -t net_peer_connection_tests -l message -- -printtoconsole=1\r\n```\r\n",
          "user": {
            "login": "jonatack",
            "id": 2415484,
            "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonatack",
            "html_url": "https://github.com/jonatack",
            "followers_url": "https://api.github.com/users/jonatack/followers",
            "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
            "organizations_url": "https://api.github.com/users/jonatack/orgs",
            "repos_url": "https://api.github.com/users/jonatack/repos",
            "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jonatack/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28749",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28749",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28749.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28749.patch"
          },
          "closed_at": "2023-10-31T17:43:47Z",
          "created_at": "2023-10-28T23:48:15Z",
          "updated_at": "2023-10-31T17:56:27Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-30T19:33:11Z",
      "updated_at": "2023-10-30T19:33:11Z",
      "source": {
        "issue": {
          "id": 1821123378,
          "node_id": "PR_kwDOABII585WYCBk",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28155",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28155/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28155/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28155/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28155",
          "number": 28155,
          "state": "closed",
          "state_reason": null,
          "title": "net: improves addnode / m_added_nodes logic",
          "body": "## Rationale\r\n\r\nCurrently, `addnode` has a couple of corner cases that allow it to either connect to the same peer more than once, hence wasting outbound connection slots, or add redundant information to `m_added_nodes`, hence making Bitcoin iterate through useless data on a regular basis.\r\n\r\n### Connecting to the same node more than once\r\n\r\nIn general, connecting to the same node more than once is something we should try to prevent. Currently, this is possible via `addnode` in two different ways:\r\n\r\n1. Calling `addnode` more than once in a short time period, using two equivalent but distinct addresses\r\n2. Calling `addnode add` using an IP, and `addnode onetry` after with an address that resolved to the same IP\r\n\r\nFor the former, the issue boils down to `CConnman::ThreadOpenAddedConnections` calling `CConnman::GetAddedNodeInfo` once, and iterating over the result to open connections (`CConman::OpenNetworkConnection`) on the same loop for all addresses.`CConnman::ConnectNode` only checks a single address, at random, when resolving from a hostname, and uses it to check whether we are already connected to it.\r\n\r\nAn example to test this would be calling:\r\n\r\n```\r\nbitcoin-cli addnode \"127.0.0.1:port\" add\r\nbitcoin-cli addnode \"localhost:port\" add\r\n```\r\n\r\nAnd check how it allows us to perform both connections some times, and some times it fails.\r\n\r\nThe latter boils down to the same issue, but takes advantage of `onetry` bypassing the `CConnman::ThreadOpenAddedConnections` logic and calling `CConnman::OpenNetworkConnection` straightaway. A way to test this would be:\r\n\r\n```\r\nbitcoin-cli addnode \"127.0.0.1:port\" add\r\nbitcoin-cli addnode \"localhost:port\" onetry\r\n```\r\n\r\n### Adding the same peer with two different, yet equivalent, addresses\r\n\r\nThe current implementation of `addnode` is pretty naive when checking what data is added to `m_added_nodes`. Given the collection stores strings, the checks at `CConnman::AddNode()` basically check wether the exact provided string is already in the collection. If so, the data is rejected, otherwise, it is accepted. However, ips can be formatted in several ways that would bypass those checks. \r\n\r\nTwo examples would be `127.0.0.1` being equal to `127.1` and `[::1]` being equal to `[0:0:0:0:0:0:0:1]`. Adding any pair of these will be allowed by the rpc command, and both will be reported as connected by `getaddednodeinfo`, given they map to the same `CService`. \r\n\r\nThis is less severe than the previous issue, since even tough both nodes are reported as connected by `getaddednodeinfo`, there is only a single connection to them (as properly reported by `getpeerinfo`). However, this adds redundant data to `m_added_nodes`, which is undesirable.\r\n\r\n\r\n### Parametrize `CConnman::GetAddedNodeInfo`\r\nFinally, this PR also parametrizes `CConnman::GetAddedNodeInfo` so it returns either all added nodes info, or only info about the nodes we are **not** connected to. This method is used both for `rpc`, in `getaddednodeinfo`, in which we are reporting all data to the user, so the former applies, and to check what nodes we are not connected to, in `CConnman::ThreadOpenAddedConnections`, in which we are currently returning more data than needed and then actively filtering using `CService.fConnected()`\r\n",
          "user": {
            "login": "sr-gi",
            "id": 6665628,
            "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sr-gi",
            "html_url": "https://github.com/sr-gi",
            "followers_url": "https://api.github.com/users/sr-gi/followers",
            "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
            "organizations_url": "https://api.github.com/users/sr-gi/orgs",
            "repos_url": "https://api.github.com/users/sr-gi/repos",
            "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sr-gi/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 18,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28155",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28155",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28155.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28155.patch"
          },
          "closed_at": "2023-11-08T11:31:59Z",
          "created_at": "2023-07-25T20:47:02Z",
          "updated_at": "2023-11-15T10:07:51Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 10851544218,
      "node_id": "LE_lADOABII585ai4RkzwAAAAKGzWya",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10851544218",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-03T05:15:51Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1793371211,
      "node_id": "IC_kwDOABII585q5KxL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1793371211",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-04T07:34:00Z",
      "updated_at": "2023-11-04T07:34:00Z",
      "author_association": "MEMBER",
      "body": "```\r\ntest/net_msg_tests.cpp:70:48: error: ‘WithParams’ was not declared in this scope;",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1793371211",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "labeled",
      "id": 10900799953,
      "node_id": "LE_lADOABII585ai4RkzwAAAAKJvQHR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10900799953",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-08T13:23:01Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1805604074,
      "node_id": "IC_kwDOABII585rn1Tq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1805604074",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-10T11:53:04Z",
      "updated_at": "2023-11-10T11:53:04Z",
      "author_association": "MEMBER",
      "body": "Coverage after 1000 CPU hours of fuzzing: https://dergoegge.github.io/bitcoin-coverage/pr26812/fuzz.coverage/index.html\r\n\r\nDoesn't reach much in net_processing, so it's probably not doing much in terms of e2e testing.",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1805604074",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10967820296,
      "node_id": "HRFPE_lADOABII585ai4RkzwAAAAKNu6gI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10967820296",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-15T14:01:13Z"
    },
    {
      "event": "commented",
      "id": 1812597408,
      "node_id": "IC_kwDOABII585sCgqg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1812597408",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-15T14:06:33Z",
      "updated_at": "2023-11-15T14:06:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "`8f21993a06...2386ef0a54`: rebase due to conflicts and drop the newly added fuzz test.\r\n\r\n@dergoegge, thanks for looking into this and testing it. The reason for the low coverage is, I guess, that the fuzzer has a hard time generating a valid or \"interesting\" data to push to the socket. Same as the reason for https://github.com/bitcoin/bitcoin/pull/28692. According to @maflcko's advice https://github.com/bitcoin/bitcoin/pull/21387#discussion_r893637770 a dictionary or a custom mutator could resolve this. I am yet to study how to do that. So, I have removed the last commit (the fuzz test) from this PR.",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1812597408",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "mentioned",
      "id": 10967880224,
      "node_id": "MEE_lADOABII585ai4RkzwAAAAKNvJIg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10967880224",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-15T14:06:33Z"
    },
    {
      "event": "subscribed",
      "id": 10967880246,
      "node_id": "SE_lADOABII585ai4RkzwAAAAKNvJI2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10967880246",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-15T14:06:34Z"
    },
    {
      "event": "mentioned",
      "id": 10967880266,
      "node_id": "MEE_lADOABII585ai4RkzwAAAAKNvJJK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10967880266",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-15T14:06:34Z"
    },
    {
      "event": "subscribed",
      "id": 10967880282,
      "node_id": "SE_lADOABII585ai4RkzwAAAAKNvJJa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10967880282",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-15T14:06:34Z"
    },
    {
      "event": "unlabeled",
      "id": 10969042867,
      "node_id": "UNLE_lADOABII585ai4RkzwAAAAKNzk-z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10969042867",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-15T15:41:49Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10978348026,
      "node_id": "HRFPE_lADOABII585ai4RkzwAAAAKOXEv6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10978348026",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-16T09:53:59Z"
    },
    {
      "event": "commented",
      "id": 1814117821,
      "node_id": "IC_kwDOABII585sIT29",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1814117821",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-16T09:54:18Z",
      "updated_at": "2023-11-16T09:54:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "`2386ef0a54...0858b0c084`: remove duplicate `#include <sync.h>`",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1814117821",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "unlabeled",
      "id": 10992731739,
      "node_id": "UNLE_lADOABII585ai4RkzwAAAAKPN8Zb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10992731739",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-17T11:00:15Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 11100126010,
      "node_id": "LE_lADOABII585ai4RkzwAAAAKVnns6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11100126010",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-29T18:35:14Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1836094254,
      "node_id": "IC_kwDOABII585tcJMu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1836094254",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-01T13:09:27Z",
      "updated_at": "2023-12-01T13:09:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "`0858b0c084...8b10990aa0`: rebase due to conflicts",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1836094254",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11122041414,
      "node_id": "HRFPE_lADOABII585ai4RkzwAAAAKW7OJG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11122041414",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-01T13:09:27Z"
    },
    {
      "event": "unlabeled",
      "id": 11123165922,
      "node_id": "UNLE_lADOABII585ai4RkzwAAAAKW_gri",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11123165922",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-01T14:57:01Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-02T01:13:56Z",
      "updated_at": "2023-12-02T01:13:56Z",
      "source": {
        "issue": {
          "id": 2021683204,
          "node_id": "PR_kwDOABII585g8QwM",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28985",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28985/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28985/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28985/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28985",
          "number": 28985,
          "state": "open",
          "state_reason": null,
          "title": "Avoid changeless input sets when SFFO is active",
          "body": "Fixes a bunch of issues around tests for coinselection, and disables changeless solutions when building transactions with SFFO.\r\n\r\nDepends on #28994",
          "user": {
            "login": "murchandamus",
            "id": 4060799,
            "node_id": "MDQ6VXNlcjQwNjA3OTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/murchandamus",
            "html_url": "https://github.com/murchandamus",
            "followers_url": "https://api.github.com/users/murchandamus/followers",
            "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
            "organizations_url": "https://api.github.com/users/murchandamus/orgs",
            "repos_url": "https://api.github.com/users/murchandamus/repos",
            "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/murchandamus/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28985",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28985",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28985.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28985.patch"
          },
          "created_at": "2023-12-01T22:41:36Z",
          "updated_at": "2024-02-09T22:26:26Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-04T20:10:59Z",
      "updated_at": "2023-12-04T20:10:59Z",
      "source": {
        "issue": {
          "id": 2024120517,
          "node_id": "PR_kwDOABII585hEY9_",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28994",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28994/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28994/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28994/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28994",
          "number": 28994,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: skip BnB when SFFO is enabled",
          "body": "Solves #28918. Coming from https://github.com/bitcoin/bitcoin/issues/28918#issuecomment-1838626406 discussion.\r\n\r\nThe intention is to decouple only the bugfix relevant commits from #28985, allowing them to be included in the 26.x release. This way, we can avoid disabling the coin selection fuzzing test for an entire release.\r\n\r\nNote:\r\nHave introduced few changes to the bug fix commit so that the unit tests pass without the additional burden introduced in #28985.",
          "user": {
            "login": "furszy",
            "id": 5377650,
            "node_id": "MDQ6VXNlcjUzNzc2NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/furszy",
            "html_url": "https://github.com/furszy",
            "followers_url": "https://api.github.com/users/furszy/followers",
            "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
            "organizations_url": "https://api.github.com/users/furszy/orgs",
            "repos_url": "https://api.github.com/users/furszy/repos",
            "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/furszy/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/65",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/65",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/65/labels",
            "id": 10262698,
            "node_id": "MI_kwDOABII584AnJiq",
            "number": 65,
            "state": "closed",
            "title": "26.1",
            "description": "",
            "creator": {
              "login": "DrahtBot",
              "id": 39886733,
              "node_id": "MDQ6VXNlcjM5ODg2NzMz",
              "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/DrahtBot",
              "html_url": "https://github.com/DrahtBot",
              "followers_url": "https://api.github.com/users/DrahtBot/followers",
              "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
              "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
              "repos_url": "https://api.github.com/users/DrahtBot/repos",
              "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 9,
            "created_at": "2023-12-04T10:55:08Z",
            "updated_at": "2024-04-16T08:31:37Z",
            "closed_at": "2024-04-16T08:31:37Z"
          },
          "locked": false,
          "comments": 18,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28994",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28994",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28994.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28994.patch"
          },
          "closed_at": "2023-12-12T15:52:25Z",
          "created_at": "2023-12-04T15:25:21Z",
          "updated_at": "2023-12-13T12:11:35Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-11T21:56:22Z",
      "updated_at": "2023-12-11T21:56:22Z",
      "source": {
        "issue": {
          "id": 2014440188,
          "node_id": "PR_kwDOABII585gjeeE",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28956",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28956/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28956/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28956/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28956",
          "number": 28956,
          "state": "closed",
          "state_reason": null,
          "title": "Nuke adjusted time from validation (attempt 2)",
          "body": "This picks up parts of #25908.\r\n\r\nThe use of adjusted time is removed from validation code while the warning to users if their clock is out of sync with the rest of the network remains.",
          "user": {
            "login": "dergoegge",
            "id": 8077169,
            "node_id": "MDQ6VXNlcjgwNzcxNjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dergoegge",
            "html_url": "https://github.com/dergoegge",
            "followers_url": "https://api.github.com/users/dergoegge/followers",
            "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
            "organizations_url": "https://api.github.com/users/dergoegge/orgs",
            "repos_url": "https://api.github.com/users/dergoegge/repos",
            "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dergoegge/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 21,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28956",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28956",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28956.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28956.patch"
          },
          "closed_at": "2024-01-31T20:58:56Z",
          "created_at": "2023-11-28T13:26:59Z",
          "updated_at": "2024-02-12T00:26:24Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 11478671906,
      "node_id": "LE_lADOABII585ai4RkzwAAAAKsLqIi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11478671906",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-13T19:11:52Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-16T17:20:48Z",
      "updated_at": "2024-02-16T17:20:48Z",
      "source": {
        "issue": {
          "id": 2134155715,
          "node_id": "PR_kwDOABII585m2Xsr",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29432",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29432/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29432/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29432/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29432",
          "number": 29432,
          "state": "open",
          "state_reason": null,
          "title": "Stratum v2 Template Provider (take 3)",
          "body": "Based on on @Fi3's https://github.com/bitcoin/bitcoin/compare/master...Fi3:bitcoin:PatchTemplates which is based on @ccdle12's #27854. I rebased it and re-wrote the commit history. Compared to #28983 it introduces EllSwift in the handshake and fixes various bugs. I used that opportunity to change the branch name, which makes testing against [SRI](https://github.com/stratum-mining/stratum) slightly easier. There's no conceptual discussion on #28983 so it can be ignored by reviewers.\r\n\r\nSee [docs/stratum-v2.md](https://github.com/Sjors/bitcoin/blob/sv2/doc/stratum-v2.md) for a brief description of Stratum v2 and the role of Bitcoin Core in that system..\r\n\r\n## What to test and review?\r\n\r\nI'll make separate pull requests for parts that are ready for detailed review.\r\n\r\n- [ ] #29346\r\n- [ ] #29295 \r\n- [ ] Custom signet mining improvement: #29032\r\n- [ ] Make nested pull-requests easier: #29274\r\n\r\nSee the [testing guide](https://github.com/Sjors/bitcoin/blob/2023/11/sv2-poll/doc/stratum-v2.md#testing-guide) for various ways to test this PR. This branch is actively used by (testnet) pools, so it should be ready for high level review.\r\n\r\n### Related useful PRs\r\n\r\n- [ ] #26812\r\n\r\n## Implementation notes\r\n\r\nThere's roughly three layers:\r\n\r\n1. Noise encryption #29346\r\n2. Messages and transport layer\r\n3. The Template Provider\r\n\r\n* the `ci:` commits (#29274) are there to facilitate PR's against this branch, but they are not blocking for Stratum v2\r\n* the commits that move `transport.h` and some other stuff from `node` to `common` are not blocking. But in the longer run I'd like to see process separation between the node and the template provider.\r\n* I will occasionally add commits to _undo_ bug fixes, in order to stay compatible with the SRI `main` branch. Those will get dropped over time and can be ignored. \r\n\r\n## Contributing\r\n\r\nIf you want to help out with any of the issues below, please open a PR to my fork. I will then squash your commits into my own where needed. \r\n\r\n## Things left todo\r\n\r\n### Spec\r\n\r\n- [ ] modify spec to use `ProvideMissingTransactions`? (followup?)\r\n- [ ] pick a good default for `default_coinbase_tx_additional_output_size` (see `getblocktemplate` RPC)\r\n\r\n### Networking\r\n\r\n- [ ] add `-sv2bind` and `-sv2allowip`\r\n- [ ] optional `-sv2cert`\r\n- [ ] drop `Sv2TemplateProvider::SendBuf`, reuse p2p socket handling if possible\r\n- [ ] limit number of connected clients\r\n- [ ] maybe limit (number of) `coinbase_output_max_additional_size`\r\n- [ ] TMP / TODO comments at the top of `sv2_messages.h`\r\n\r\n### Testing\r\n\r\n- [ ] expand sv2_template_provider_tests\r\n- [ ] add transport fuzzer\r\n- [ ] add template provider fuzzer\r\n\r\n### Template generation and updating\r\n\r\n- [ ] group templates with the same `coinbase_tx_additional_output_size`\r\n- [ ] don't generate templates when no client is connected\r\n\r\n### Misc\r\n\r\n- [ ] move / refactor `GetMerklePathForCoinbase` helper (see Future Work in original PR, and https://github.com/stratum-mining/stratum/issues/567)\r\n- [ ] truncate long trace messages\r\n\r\n## Potential followups\r\n\r\n- [ ] implement Noise protocol and mock client in Python, add functional tests (based on `test/sv2_template_provider_tests.cpp`)\r\n- [ ] use process separation, e.g. a `bitcoin-tp` binary, see [multiprocess.md](https://github.com/bitcoin/bitcoin/blob/master/doc/design/multiprocess.md?plain=1)\r\n- [ ] make template updates push based, on top of Cluster Mempool, see [docs/stratum-v2.md](https://github.com/Sjors/bitcoin/blob/2023/11/sv2-poll/doc/stratum-v2.md) (for new blocks it's already push based)\r\n- [ ] push empty template for the next block (downstream can ignore or use, https://github.com/stratum-mining/stratum/issues/715)\r\n  - send prevhash for this template as soon as any new block arrives\r\n- [ ] push optimistic template for the next block\r\n  - send prevhash if and only if our template won (i.e. we got a `SubmitSolution` message)",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 14,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29432",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29432",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29432.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29432.patch"
          },
          "created_at": "2024-02-14T11:34:49Z",
          "updated_at": "2024-05-02T17:38:08Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1948964294,
      "node_id": "IC_kwDOABII5850KtXG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1948964294",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-16T17:38:47Z",
      "updated_at": "2024-02-16T17:38:47Z",
      "author_association": "MEMBER",
      "body": "Concept ACK. The ability to (better) mock a socket would be very helpful in my Stratum v2 Template Provider work #29432. I found out the hard way that using a real socket makes the test rather brittle.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1948964294",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "reviewed",
      "id": 1888057050,
      "node_id": "PRR_kwDOABII585wiXba",
      "url": null,
      "actor": null,
      "commit_id": "8b10990aa0735ab1827a3fa56ecbb85936ea44d6",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Reviewed the fist commit bee6bdf0a5084b2d5749ff06ad63c0e77816c733. Added a question for the second.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#pullrequestreview-1888057050",
      "submitted_at": "2024-02-19T10:18:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11938671517,
      "node_id": "HRFPE_lADOABII585ai4RkzwAAAALHmaud",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11938671517",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-27T15:43:28Z"
    },
    {
      "event": "commented",
      "id": 1966860691,
      "node_id": "IC_kwDOABII5851O-mT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1966860691",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-27T15:46:51Z",
      "updated_at": "2024-02-27T15:47:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "`8b10990aa0...ad806a0969`: rebase and move the local lambda `WaitForDataOrEof()` as a method of the `Pipe` class so it can be reused in the future, see https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1494319538",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1966860691",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11940068302,
      "node_id": "HRFPE_lADOABII585ai4RkzwAAAALHrvvO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11940068302",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-27T16:55:12Z"
    },
    {
      "event": "unlabeled",
      "id": 11942710346,
      "node_id": "UNLE_lADOABII585ai4RkzwAAAALH10xK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11942710346",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-27T20:19:43Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1998867712,
      "node_id": "IC_kwDOABII5853JE0A",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1998867712",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-15T03:19:12Z",
      "updated_at": "2024-03-15T03:19:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/22041198321</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1998867712",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "labeled",
      "id": 12126180783,
      "node_id": "LE_lADOABII585ai4RkzwAAAALSxtWv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12126180783",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-15T03:19:12Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDBkZWJmYTliNDkyMDBkZGY0ZDBiZTZjMzUxMDk4OTdlMTQxY2ZhN2I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0debfa9b49200ddf4d0be6c35109897e141cfa7b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0debfa9b49200ddf4d0be6c35109897e141cfa7b",
      "tree": {
        "sha": "4f8803a15f06eec2010d56b77520375fcada1349",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f8803a15f06eec2010d56b77520375fcada1349"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 4f8803a15f06eec2010d56b77520375fcada1349\nparent c8e3978114716bb8fb10695b9d187652f3ab4926\nauthor Vasil Dimov <vd@FreeBSD.org> 1670330301 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1711619260 +0100\n\ntest: put the generic parts from StaticContentsSock into a separate class\n\nThis allows reusing them in other mocked implementations.\n\nAlso move the implementation (method definitions) to\n`test/util/net.cpp` to make the header `test/util/net.h` easier to follow.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmYFPL0ACgkQVN8G9ktV\ny79zlB//ea1MLBT4u5NIATZ35SzAdLW1PfxScaRy9kAoIOp5K/sggNzv5svszaBw\nR9VYKtoxz+hClibKx8AcvEZXZOI3mC179BA4DmcEvfCAfLpjeiF7t9ROLLV8J/fq\nNLgfDaTGqtjg1f6TceW5VFmM6F/624c0VLhFBf7ofdFWN8f2qgwK+/i299rD3fgN\nnWz3n97jigW/JlQ8+0+iXBB1bnYjgFPGdTZeuFUeSv42yXyVjA8YxpXe5VIRy2SX\nAH4pYdKF7CmBSsLty44zc3Ynmff/K3hsVnS9PzLWUhNYa06ydcbabcOqCKLCzBNA\ndwDWSxo3Y5OabSRlWk0i4vYhasrarN5naFY7Awu67kj27+pu32sD4IACvRvwo+Vd\nB0+nJ/815/yuE5NJN7fEZUrhoLawT0zhRuSNHAHScsyZ7pZ78cossQnTo90ZcYnK\nmyDVYbu9nRolCOvfC86UIP9I6EvIiIESkrVqMhE+gckfaPm5Gm2eh8qdNC0G4Tm0\nD/Ge+5NeDIQHtzeTXR8WNBmoA0q28MNzsXK0GiANHXWGKyHmWxKHNqSk0/nzzzBD\nXBgU1O2e3uhZZmZOsQ1LkTgJeEoqzUqTRzfmNwmKKonPzUgP0eVypFXgPs8Clbn3\nKYaxcBOtvjBQe6QWqaGW+0cDnOw8Kb2gTT0jXzCiZjsx1Ivpz6md3uCA1wjkum+m\nnAtlMIQNt+VMkcUE+VmgJeCbMAWIZim6c/l+NAOh2UAn/AUX8Cjpp19vEkMRrOGm\nlBremewdI9DSOghQrN4m+k+d+W5wdyA6GdkhSaO2pnUmYdzkM1W//pynEocIfjqp\nErwkZ8W058exL5o4hW4NEpSGxv8uOs6QwYG++H8M3XpFkhJVjrYI0cpAKHCr13Jm\nHbDs8j8Y4y/+1pz1r06KqhV6WyzmqbbLCn4OLLhkZO8CIor2B3hkLw19Y9S95WyZ\nme3F35fneOg9sVi+03skovNau53QvWwVDGnsL7MvpfFNqv3aOVGlp3vYWO9Xm1F1\nvR6zeZSm0OaWyXlI/QitWtmSSX1pTdFQ7+eiOim1M1fA+Nj7gjZE4S114jmIppY+\n8qvYO+CKb/H2016lq+suaKFeonnUfp8awh7URfsBKzbEM/ufgD5ffNjvdPms62i+\nm4KA777mKghSZC04copDw3nfzbZopERufBftrfkwPAxUHkaeRvSiHrH0N1TqfzkB\ngxpnQGlN+tQYeAiRSwJL4X/NPz7ayfId6zUv12LwdHvoantMVfxzbFKFI1bEEyU1\nyn/v6TabUGBmYOV0Q232gwu8vkht5Ixn7wV8YQyCqJlA03JBKigx6QsD2g6ip74A\n1kUJvy/UPG6m+fZM2gfLGXz2WyGndQ==\n=tCnn\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8e3978114716bb8fb10695b9d187652f3ab4926",
          "sha": "c8e3978114716bb8fb10695b9d187652f3ab4926",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c8e3978114716bb8fb10695b9d187652f3ab4926"
        }
      ],
      "message": "test: put the generic parts from StaticContentsSock into a separate class\n\nThis allows reusing them in other mocked implementations.\n\nAlso move the implementation (method definitions) to\n`test/util/net.cpp` to make the header `test/util/net.h` easier to follow.",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-03-28T09:47:40Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2022-12-06T12:38:21Z"
      },
      "sha": "0debfa9b49200ddf4d0be6c35109897e141cfa7b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGJlN2EyYWM2NzUyOTI1MzI1Nzc0ZDZhMDkxMzc1Njg5ODE5OTdmNWM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be7a2ac6752925325774d6a09137568981997f5c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/be7a2ac6752925325774d6a09137568981997f5c",
      "tree": {
        "sha": "6a44e730d68b77658e963aaae95cfc691d8ccb3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6a44e730d68b77658e963aaae95cfc691d8ccb3c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 6a44e730d68b77658e963aaae95cfc691d8ccb3c\nparent 0debfa9b49200ddf4d0be6c35109897e141cfa7b\nauthor Vasil Dimov <vd@FreeBSD.org> 1670330523 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1711619264 +0100\n\ntest: add a mocked Sock that allows inspecting what has been Send() to it\n\nAnd also allows gradually providing the data to be returned by `Recv()`\nand sending and receiving net messages (`CNetMessage`).\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmYFPMAACgkQVN8G9ktV\ny7+LqiAAlU32Ar+G2xNnvf9pK9G9TAoYZqe0vwx3bn+WAW9p841E7clq5/juVs8+\nJ2hLKkPf1SvRGL64CO0lVTIF4SVEyT9F8GMZ5MX3SOoTi8M6J4GZ9Kij25ke5qu0\n+UmFoNuOCPfZrKsg1Obs70TIofDslBrtAgtn7Ssfxbc+a/hA5GdUqY9jwneYt2Ol\nblxaqUrbPzRjc8BfK0e3EkzcjLwkclZ7SiEeZ9AmfMMckmZwI/q6ExjGG82ghg/U\n8jU6ayn7DVedx7G15TzLAfL5KsLz3FiG05lyMG1UP4JMBBz7uZPARtpeiAiP7SeX\nsQob0P3+ek09reV4iiLEfVPq6y9dJ6ZL7fkHu4qnNHB3+nwQcjNW6t5VlwUWX60g\n/ax1GlaxdkLeWlgJAvKllep0mifBb1hABGWPugV0UuEfFI+EDf8rKoJ/ajkIa+Tc\nzkhp4PBQz+XidNimfAe9UQMUuz7CU+u+MNBfj/f11SGhUebo+SE5FI/zc6jjRgXC\nkZi/QoCiA6HMHapkcQpX+1Q6iv7gSMbgdVkb11XmJllrA1JxrZ52JDd/l1NWnaP+\nJez46EsspCKocUWujMIn7ivdtrqnJdhubluDXGIpj5pwpArO6TOmUk7fRuPWo+nx\n0787EwOgZHWJj4H08f+xJahM8Jbu412aa6avz+9PPfwMbWWDlLC47wDstCv3k+Xs\nWvv7SGuqqj2HPg8aKjbu3Cik50PB2OoYz0qxZ+HcHtKcxUWhyAub2crPkUuTHq+u\nGsUGJyryQZk6oknZI/0rMa87SEjXT+uQItov+hEYmTmx04NMQmAx0AxcBHAEHfqN\nXLcNSNGFqgxY1H07KcAOXL6tknJgj+bAMZJIj/lfx0CyS7D5DX9QneMEFIbSGaYe\nFy60Cn8PJI/+ZgiQ+LaI+puJWj20lln2g2/zWCCEGZiMwlo13ZpjVlXpRnBhEBSy\n2cTrX4FAKIJvXPQi9TUdBUG9BQL1g+X4QEZtA2AFH75ggPxjatIVIxlKe3kqvXLj\nG8Oq5ne4WUNDm+yE3WdeRtAlWVsChX5l99vHHpfochwusEIWsk50cxZVWSzX1m0t\nRFdqR/dTEclN8ULG2Xjk+Vub0GHTW2g1a/Mf1HB7n0y7+Be3Cd82lRs4+ymJ4L3s\nKlJb0A385TKR+OcDqTa/mdVihpGG3TiScpaUlznAaVRxX35alS/4bZm+5d8Z8x0K\nHqdf53LwqUOdfizba6UbQyBBNUSYbj2Fovf6MMVwfOC5Aw2GcztCAhX2BVbAVObW\nDp5BeieXL78FGfhP5VNvAXGn8L5arBeZtfRhC6AWaubkMutMP6PblO6b6zqmZ+7e\nsStlkE7qGwNmIiiHAIuqMn02a7azbA==\n=B1Up\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0debfa9b49200ddf4d0be6c35109897e141cfa7b",
          "sha": "0debfa9b49200ddf4d0be6c35109897e141cfa7b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0debfa9b49200ddf4d0be6c35109897e141cfa7b"
        }
      ],
      "message": "test: add a mocked Sock that allows inspecting what has been Send() to it\n\nAnd also allows gradually providing the data to be returned by `Recv()`\nand sending and receiving net messages (`CNetMessage`).",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-03-28T09:47:44Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2022-12-06T12:42:03Z"
      },
      "sha": "be7a2ac6752925325774d6a09137568981997f5c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGY5MjlmZTZmM2NlNWFmNWRkYzllOGYzNzUzYTI4ODY1NmExM2JhODY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f929fe6f3ce5af5ddc9e8f3753a288656a13ba86",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f929fe6f3ce5af5ddc9e8f3753a288656a13ba86",
      "tree": {
        "sha": "8266b0b08f672a425f8bee221a39b89c83fefc3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8266b0b08f672a425f8bee221a39b89c83fefc3e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 8266b0b08f672a425f8bee221a39b89c83fefc3e\nparent be7a2ac6752925325774d6a09137568981997f5c\nauthor Vasil Dimov <vd@FreeBSD.org> 1670408170 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1711620655 +0100\n\ntest: add NetTestingSetup that starts connman with mocked sockets\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmYFQjAACgkQVN8G9ktV\ny7+xSx/+P7unwdzF8APCb5mztl+YkAO5e5xD2TFXYJLDNuumvM3/rpXtD3utPkLx\nqTuT5KHcJq2kzzybqqHzy7ANqQebboLBIdK5UKNhg7nNglPv4AVagU4Y8RGSLt9b\nBS6MUKdg2IbhH6aV9H108jWGR3fwm8wuV0+xz8tkcjmD0V3NP1CDoR3hAuG/DKcW\nwzXPW/NAwwpOnMTPyDlfcTKAaa51iTg7mC/nvqppA+v5dV/l2POrtLlAIEop5sE/\nynXnsFN6pvSXFz3e5ZfKWqX/SrM3uDplf41YOza10HPywPkXZRub7N3Ep+L5iEFy\nPS7uXa58kPXnLtbjolCEVA5evyVIFVsfy+4sLi5oY5CvPwzApN41JLEnNVV66x8E\n2AYX4eCqG3NRxvnx/rye8ERrOHnsGaRSZhrFOJQfGoNQwZQPn4F7gyvUtMe4USJP\nDdz147d0XvzECOOO+bL0h9KiNVyPedweYQ9A/ScwHudBDq86EWLk0kLM7pBt892b\nsgklPFbxFz0SnWcLpmSjXWHdQrznliK4iti03kwwZxIANGzq+qjPiEA5uDghX3Ol\niGszbZVAUHZNmlfdOBwrcvYbsKfEiGFyWoqufKgm81bUCgSyjd6ZV61htYPDv+NB\nxKU1/CplP4XQqsVQ+ZiRZ4kAC8uXJA93MwdQFI6YWTYQ8L7cLcEhzhq3R8dH214r\nLT9pyzxi8NdoxANr2i1D1qm9/HjBH5eSrQHcHhz/DwtTTWV7o10s8FaLBOXkGrRd\n8ii8N5UtOb2YE3zigKX8yHFy0vkL8OdNL4rxCGMtylq66iLFsqxMUNoxeQPAIgYW\nN/hEIMU4aMjnqynqzvVkHJ4zmG9peVSbAXHMcZsAOsiBcSCHpaOGw5N3FBmVLIn5\nGFWnCn12yo6IPAlzuNMr1nMSdv9Lavf7BS+hlIvBpEQ1z9QLBp3EBl+K/MjtzQOH\nuJiH2ikWIp7HhC0/RMAYdEYT53QHISHpd8EJ4L4/U2N/9TKD9h4RwjRSQOpWFK2O\nVI2/ENPIPHNAeDhf4epA7GUSwcwuWBbShSV0DB1H6YnQYz5BcHYyzXYNaBpRpGmF\nUA9f0u5HZKpinRu+T/zpxKsF+EjH3THG4Pk+hrQ+MJrQtujmlnew4dwtzLNUYAYT\nPYIWOJGGSXwCoU8XMmgVl1HC78dVC7Z/BsUt2YnBllWvzlyJtfJt9TZEEnDyRuSX\nEjmeFJC6bdNBKEOdU5KGGDYXOnDdXY2nW+kdRAKP+T5vrc2fJfx/7rsX/u76t613\nEFMVwbx0yBOCLFVcPweIWBHYpJYeHmjJlHmxoikJjcw5fGsBDt1gHR295ZBI06lz\n+fQ3GEYgifV93kMoq+hCE78VKp0EXg==\n=aiNg\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be7a2ac6752925325774d6a09137568981997f5c",
          "sha": "be7a2ac6752925325774d6a09137568981997f5c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/be7a2ac6752925325774d6a09137568981997f5c"
        }
      ],
      "message": "test: add NetTestingSetup that starts connman with mocked sockets",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-03-28T10:10:55Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2022-12-07T10:16:10Z"
      },
      "sha": "f929fe6f3ce5af5ddc9e8f3753a288656a13ba86"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDU2YjFmZmRjN2RlYjVlOTFlNWRkNzVjZmZjMmY1Y2Q0ZjBjZWE4ZGE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/56b1ffdc7deb5e91e5dd75cffc2f5cd4f0cea8da",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/56b1ffdc7deb5e91e5dd75cffc2f5cd4f0cea8da",
      "tree": {
        "sha": "3c1c8ef5b85335b0a991f505b6aeaeeebb71d8db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c1c8ef5b85335b0a991f505b6aeaeeebb71d8db"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 3c1c8ef5b85335b0a991f505b6aeaeeebb71d8db\nparent f929fe6f3ce5af5ddc9e8f3753a288656a13ba86\nauthor Vasil Dimov <vd@FreeBSD.org> 1671786206 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1711620656 +0100\n\ntest: don't throw from the destructor of DebugLogHelper\n\nThrowing an exception from the destructor of a class is a bad practice\nbecause the destructor will be called when an object of that type is\nalive on the stack and another exception is thrown, which will result\nin \"exception during the exception\". This would terminate the program\nwithout any messages.\n\nInstead print the message to the standard error output and call\n`std::abort()`.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmYFQjAACgkQVN8G9ktV\ny7/zNyAAhR7jUrf0l5467rJ93tNeGqD9j1N65Swx+qj/+ob4eJUnXUiQB9gA6dM0\nPYu7IUMDN0x5ZfiNcXhyjz894TvYORHn0LFGIBdq/ZEelMnDhEOBhhWE/26xVwKQ\ntr36kC/We7uqpT61yuTFghrvVfp+coMq066x4+5+ZXUt5V5XvURfhwC7661x8JYR\nyRZeUgBUE/O0KREOp68vDfX7+J9GQADQfFaqNnq/fqqM+kueqiODzJTnmMyIUjQW\nEvMcLUr7vXpaNIBARsBlZiuJzZeLPMg0WThIrNaEsALGWQ4Tneh97rAjDCDziUws\nJbCV+H//PXxv6uKLpScIlG/yHQ0FNkJgJhZTAAruLYWwJuuWjrJRmSMRy/idMxkD\n0KkAJxogJ9INhhKPLgifLjhAmD2rp4kjFrg60rVabk2sphzVDy2+nvK6bbwZJPij\n6qXwvPKFdgy2aTEZ0DmDrHChD2JqcG+VO0r3cERzFkUkiEcdyg+B1IACaRwSIyz0\nh6fNk8g/sfMY/GAnsvUgfvvkoBq+GfWNVrgm7CXYL1UnBrAuVvoyX+pMjRn1Pksp\nPM7Uo3oV5VXyyXHT123FEbDbcgULS2Bjx4ONIJLdNJdUrN3aaWyHuNA4Uebj5+ci\nc+RHvWx9Y9NghpxA1Q78zNj0Xe/YFAFcZ03udksk3gxQkepgPMm4Ag/neYodwKRZ\nb60uvPqHyZqwVIV2Jc/U7RQKqUzbeCALZMj4WxhdUE/dtkxiLYcDpCL5KSxrmMPZ\n6cszOZd6Z1HFJNXTkPN0ONDIvcFfZeU85EY4LcljZn+Zoipa70Es10nTtax1voVU\nJNLdpU9dNt1hi/ZLtdASUEj855UfldLdX5Ef6GYP93dcG4vWvgwxjQrVWa6v9Om2\njgNmBaldcbHBYcq7xJleiTd7KLqpYP0PO/t5b3BDZ9L/SB9wlYrrKETh0Ws3z+nb\nhI85/gxVR86eCO5yakI0ABw2f22piCzYL9aNKfeQpzDVbpvsO0CyUwCuGjL4S5uN\n0bbmM6/uApK0uQRkfmDUwGwYcuOAnE8Mmtidr5n4O7KA8wn7A3qCEOPge3uc0Ce2\n4vIMwAbLDTXnEbcAHfUanSBU/HSmyPuYjZ7+2qzOWOl5x+B21hahK7rPAFzfw7Wy\nPyq1mH7KVO7H+smIajB4QReAJVkUu0pdCkKyxbyaV82mqyEMku22qEDFFMEEuiA+\n2ZOsobZk7UCROemCJjiMVhcB25rvEiCv17Kp4Oene5OhKj1Y8QOtpNJv90lLULc7\nP7M8hX8ZnrG+o2K3a0IKBmvhPYDvNBh6uRnyoqN7YOCZEPQSw4msP3Q5aa8LVhQH\nSW0DdF4UB8ozdhZJUvzDqEAFu7mUUA==\n=CTxE\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f929fe6f3ce5af5ddc9e8f3753a288656a13ba86",
          "sha": "f929fe6f3ce5af5ddc9e8f3753a288656a13ba86",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f929fe6f3ce5af5ddc9e8f3753a288656a13ba86"
        }
      ],
      "message": "test: don't throw from the destructor of DebugLogHelper\n\nThrowing an exception from the destructor of a class is a bad practice\nbecause the destructor will be called when an object of that type is\nalive on the stack and another exception is thrown, which will result\nin \"exception during the exception\". This would terminate the program\nwithout any messages.\n\nInstead print the message to the standard error output and call\n`std::abort()`.",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-03-28T10:10:56Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2022-12-23T09:03:26Z"
      },
      "sha": "56b1ffdc7deb5e91e5dd75cffc2f5cd4f0cea8da"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGU5MGYzY2JkYmVlZjg2MmE1OGJkNThjMTEzZmFjNDEyYjhlMGJiOWI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e90f3cbdbeef862a58bd58c113fac412b8e0bb9b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e90f3cbdbeef862a58bd58c113fac412b8e0bb9b",
      "tree": {
        "sha": "6bdacc6261d057aa0c3f24a829327c5ce6005d5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6bdacc6261d057aa0c3f24a829327c5ce6005d5a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 6bdacc6261d057aa0c3f24a829327c5ce6005d5a\nparent 56b1ffdc7deb5e91e5dd75cffc2f5cd4f0cea8da\nauthor Vasil Dimov <vd@FreeBSD.org> 1671789519 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1711620656 +0100\n\ntest: make it possible for DebugLogHelper to wait for messages\n\nExtend `DebugLogHelper::~DebugLogHelper()` to be able to\noptionally wait for messages, possibly logged from another thread, to\narrive before performing the final check.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmYFQjEACgkQVN8G9ktV\ny7+RBR/8C1yogtAy31fKg/w6X0o8KAZrERByjD9P5IfNKflsqgxHoJJggwdLuGG8\nK0mloCWrst1lZY9MwJ1t0CjvKili57AfA8mzndShjuXqJKqW0UurDWLQmYytFNCJ\n+fr7VSXyOe7CLA8VDallgg962arCWFbymBj2BVqFZNPl/zkHvd3nrXSINfnDtLcm\nrRxnF2TeJff7yeSqKTRrXYBb7jexMJ05gBipw+KB4v4xDGT6zFfprWpjyOuFFBaT\nuFwG1t2PwVhYS9AN4PEgP2/jmBfGOhEQsKQx10ybsHtoRmauB/L3XqcHfKmKiezu\nfFGXHZXJY8bmXkj5CkAhECWVyz4YP6yUltZmm972Jf9whDt/VQghBLMVsOGQ2U6t\nxWQsQe7HF886WdF0o0oYOZqG+u98cve1lmEGaXvFI5KOOzuilyhLji/QHgPCnQEd\nTq2YbqQO4+LeyKNkkzr2Duin712hf+yWFtb6WvlhifjQglqyJgDmcvGHNk2RRjDi\nf2yZZgpgT4HJstkcGRpjpNt7ljXKO4RYCzK5mbeX8KvvICz6u+78JQ9r1OGspnaz\nBcuB0uvmdDIMPojIfwZj0GjQR6MVoXflsQDPhWoEkNZI1/p1d/kwO2QdJWHNExnK\nBo2S5yiRMnJML1avEvEYnznDoTkTLiViuy9QP1x3966m9DklO6ZfF0Kf0BmUJZfK\nGaZTsZWSYpBq3+dnRHXzeRVQWZNvDlwobIBQ73VHbeUjL5YJdGQfTPr4+loSEmDR\nbS3spxJne5IrggjyI4xhNInAO8do0rBV+A0UWMEAn5kyzcny/BZ77GpzA/452+N3\ntULM2VeQoNuZhTR8QXSgH3WsInNm0s8owLxz74Bn9ryYNkY6jfpdwYuNXxVyaWt0\nr49KE1WBEHxNXnhGTL0FrNckoXvby+IuPSVTCRvi2RjgQs1rHx8FyYxm6B9tJDP2\nWDQdZWWOvixg42HUhHXeg3bQHfW7mYRuhF9BaFYuzUleoWFDQU6we06WnOUY7TSo\nV5h0hyFF4SoDtjr8AEG+jW8ecaMgGB8cJ1DHfK83jHTXTu4U+MR50JpvnDuHOKES\nnf5K2CzvLJ4DsK9S14VqX8+tjACagLNaIqbdE5dIXr1PKNu+XlhZ/2iRhg4OXDM4\nfdV0UzYaiL9UTu4I9g93ysFQS0Zn6SvsXYLqXK+6HRf0uAb3Di4KV514y7vNnKvH\nnvF1nvO9Lu3d1P0JJEX08n/bq8eKMDYWwVc3aU3dLVRMhOnBjrwnOAgV0MPX5DXq\nQu872E3DZg2t2YY9lCsymnYHzPln/q59y9n6YbBnh5LJBXlf9lvZiz3TliQEu8al\npIsQTXGvMKOmSkwAj/vQa6cmXsC8ng==\n=xh7b\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/56b1ffdc7deb5e91e5dd75cffc2f5cd4f0cea8da",
          "sha": "56b1ffdc7deb5e91e5dd75cffc2f5cd4f0cea8da",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/56b1ffdc7deb5e91e5dd75cffc2f5cd4f0cea8da"
        }
      ],
      "message": "test: make it possible for DebugLogHelper to wait for messages\n\nExtend `DebugLogHelper::~DebugLogHelper()` to be able to\noptionally wait for messages, possibly logged from another thread, to\narrive before performing the final check.",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-03-28T10:10:56Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2022-12-23T09:58:39Z"
      },
      "sha": "e90f3cbdbeef862a58bd58c113fac412b8e0bb9b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDlhMTU4ZGE0NmNiZGRhNmQ0NjYyMTk2MTIxY2ZjODcyMTA2MmRlNGY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a158da46cbdda6d4662196121cfc8721062de4f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9a158da46cbdda6d4662196121cfc8721062de4f",
      "tree": {
        "sha": "a8ff11148eda145a5d9cb02b3aed4e8293dae570",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a8ff11148eda145a5d9cb02b3aed4e8293dae570"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a8ff11148eda145a5d9cb02b3aed4e8293dae570\nparent e90f3cbdbeef862a58bd58c113fac412b8e0bb9b\nauthor Vasil Dimov <vd@FreeBSD.org> 1670409920 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1711620657 +0100\n\ntest: add unit tests exercising full call chain of CConnman and PeerManager\n\nAdd tests that use a mocked socket to similate network IO and cover the\nfull `CConnman`, `PeerManager` and the interaction between them.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmYFQjEACgkQVN8G9ktV\ny7+Wnh//c/irst3ngnwBXMgZx+FfZw2TErN8xeBzJcSpEWjV4zqROXHm9IvFfipn\nFokee8+8EmwUq68nv7ewG3hD8yCVftefC1p5mljxptdP2B/Uuanr1mdIeZLDhAeF\nNr6vM+Blj8XpcvCPhX3n41RMDjQBzEWzkxSO4W24N+sjLtrEKkMkOc08cLWNTv5U\nt/lqV/YjfiVy/ANtGImrMn+Y5EOLrhWVehvRkNcCL2e4dmNN9YTz6GVfn7SjCKzg\nskgfLS50jlse86W/39pnLjnZDMEsz+U7nB3yhhj7nPhiTtnq9c7AGYNx20NQUFLT\n4smID8n8KsgC+pasC4a91w8yNwfCZEbWWOulCmkM0IbMdImhBklMmvXjCN7kQnKB\nmP+6yb0FdemDPRfIcS2cmfCyZ3LiAoD2LjIb8Pu3ZGtOm7rUEVxAAIWdMFWRcsDp\n657IH5t0+sdrklukSVUFozpMl2WINxf1tohPjL+Nj1GVysE8k+VydF4+FRQ0Kt8t\nXKncqF9CDuB8bjIJxUaUO7QUlIq436O5K0+tTZIcVfNg1Atu17fYMB+WKPrwEbYp\nMohN1K1QWB6IyN8XrLG7/VeCh02oVfwT7mXOVURuSfmy+D/Y/xh8hFuWwrMwp96y\nLvhy6l6gnNnWhXcqsvijFkIoE3dyPHzyJL4H/S3q5xKXFaOPv1vcuQ4tRQ1A1Sy2\n216YTUSjp0PLbfPHm62vFaPVHtsz8Oxv6XlgztbWlbkvkHWKxiPfreCaC+yFfQ33\nIWZx+1Hw3fbzYLjJTpE2QZIqX0xLQqL7HWMOXqvPdZc7d5z8Y/2hNVPCJW98/aXH\nnHFRyseKgcKgMKWkyVriwP34Ecpv5no4IW2/6XpAsJG9bJz1zrfqz0dpNb8Ucsfw\nKxUp3Yg8g54ZfjzKx3K0b3kL6v2M5NeQjD/pj5xCPqa1+B7V/k1vU1K+SmX3JJPJ\nRzl9j82AKs3Uk9Wm+zRnYWFTxnC9C9dzCe3LTnWRmq7Q5H6ZC8lVc4Jqy6oCJVhg\nhMvB84uT7ye1y9bUZq8/8NbxyTWeCDFiJAwsV655q5kFk5/CEjoqh0hkVvJ31tlD\nwD9333Pwdth6eOiyHR306EunGoKpkDBiUhcHLoLVut785RIG2ThMkA+AOuWRwVcu\nwJUUJ70cB051hl6GgHDi/ISJbTUORgXDLSUNtcL04P6o/k7k8BObPjoCfLb4oMOl\nb2fgI6Wy8GafBDjwartiV8IH4grCf1q7VKrxIE+JkzAioVMH2KGHouq0hWLxDm+Y\n2enhjoEe0cZpbf6lc8xtBpfV/ElqGBmWiQ292r9Bpgb4NmU8jJ7b33JToUsQRFTm\nvnIlcOtcStvbQ4lMWSQKZujdW2bSLA==\n=BnTU\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e90f3cbdbeef862a58bd58c113fac412b8e0bb9b",
          "sha": "e90f3cbdbeef862a58bd58c113fac412b8e0bb9b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e90f3cbdbeef862a58bd58c113fac412b8e0bb9b"
        }
      ],
      "message": "test: add unit tests exercising full call chain of CConnman and PeerManager\n\nAdd tests that use a mocked socket to similate network IO and cover the\nfull `CConnman`, `PeerManager` and the interaction between them.",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-03-28T10:10:57Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2022-12-07T10:45:20Z"
      },
      "sha": "9a158da46cbdda6d4662196121cfc8721062de4f"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12279108929,
      "node_id": "HRFPE_lADOABII585ai4RkzwAAAALb5FVB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12279108929",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-28T10:13:23Z"
    },
    {
      "event": "commented",
      "id": 2024840450,
      "node_id": "IC_kwDOABII5854sJ0C",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2024840450",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-28T10:13:36Z",
      "updated_at": "2024-03-28T10:13:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "`c54a458cb9...9a158da46c`: rebase due to conflicts",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-2024840450",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    },
    {
      "event": "unlabeled",
      "id": 12279861092,
      "node_id": "UNLE_lADOABII585ai4RkzwAAAALb789k",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12279861092",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-28T11:16:28Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-02T12:45:02Z",
      "updated_at": "2024-05-02T12:45:02Z",
      "source": {
        "issue": {
          "id": 2271221092,
          "node_id": "PR_kwDOABII585uIYi3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30005",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30005/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30005/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30005/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/30005",
          "number": 30005,
          "state": "open",
          "state_reason": null,
          "title": "[PoC, nomerge] IPv6 PCP pinhole test",
          "body": "The overarching goal here is to increase the number of connectable nodes that are not in the big datacenters.\r\n\r\n**Context:** IPv6 doesn't have NAT. Computers behind a router tend to get a globally routable address. However, by default this address is usually completely firewalled for incoming connections, as a security measure. See issue #17012.\r\n\r\nThis is where \"pinholing\" comes in. By sending a request, a machine on the network can request a port to be opened. This is similar to requesting a port forward for IPv4 but simpler.\r\n\r\nThis PR implements the so-called PCP (Port Control Protocol) from [RFC6887](https://datatracker.ietf.org/doc/html/rfc6887). This is a simple UDP based protocol with fixed-size packets, so is safe to possibly even enable by default. Much simpler than UPnP which also has commands to open a pinhole, but relies on SSDP, HTTP, and XML parsing (and miniupnpc has had serious RCEs in the past). This implementation is self-contained, no external dependency is added.\r\n\r\nBefore integrating it into Bitcoin Core i would first like to investigate whether this implementation is correct and whether routers support it.  So this adds a binary, `ipv6-pinhole-test`, which:\r\n\r\n- Enumerates local publicly routable IPv6 addresses\r\n- Gets the default gateway to get the PCP endpoint\r\n- Requests pinholes for 100 seconds to port 1234 on all addreses, and prints the result.\r\n\r\ni've tested this on two routers myself--Turris Omnia and Fritz!Box, where it worked. Please help testing, by just running it behind the router of your choice!\r\n\r\nFor now, this is for Linux only. Implementing it for other platforms requires implementing a way to get the default route. i'll get to this later.\r\n\r\nBe careful with publicly posting the full output of this program-it will contain your IP address information.\r\n\r\n[skip ci]",
          "user": {
            "login": "laanwj",
            "id": 126646,
            "node_id": "MDQ6VXNlcjEyNjY0Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/laanwj",
            "html_url": "https://github.com/laanwj",
            "followers_url": "https://api.github.com/users/laanwj/followers",
            "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
            "organizations_url": "https://api.github.com/users/laanwj/orgs",
            "repos_url": "https://api.github.com/users/laanwj/repos",
            "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/laanwj/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 234878,
              "node_id": "MDU6TGFiZWwyMzQ4Nzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Linux/Unix",
              "name": "Linux/Unix",
              "color": "770000",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 17,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30005",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/30005",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/30005.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/30005.patch"
          },
          "created_at": "2024-04-30T11:35:27Z",
          "updated_at": "2024-05-02T16:55:03Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 12687133864,
      "node_id": "LE_lADOABII585ai4RkzwAAAAL0Nkyo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12687133864",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-02T17:54:06Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2091170915,
      "node_id": "IC_kwDOABII5858pLxj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2091170915",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-02T17:54:07Z",
      "updated_at": "2024-05-02T17:54:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/23192935231</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-2091170915",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1061551756",
      "pull_request_review_id": 1235986976,
      "id": 1061551756,
      "node_id": "PRRC_kwDOABII584_Rf6M",
      "diff_hunk": "@@ -0,0 +1,183 @@\n+// Copyright (c) 2022-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <net_processing.h>\n+#include <netaddress.h>\n+#include <protocol.h>\n+#include <test/util/logging.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/time.h>\n+#include <version.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chrono>\n+#include <string>\n+#include <unordered_map>\n+\n+BOOST_FIXTURE_TEST_SUITE(netmsg_tests, NetTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(initial_messages_exchange)\n+{\n+    std::unordered_map<std::string, size_t> count_sent_messages;\n+    auto pipes = m_sockets_pipes.PopFront();\n+\n+    // Wait for all messages due to the initial handshake to be Send() to the socket.\n+    // The FEEFILTER is the last one, so quit when we get that.\n+    for (;;) {\n+        auto msg = pipes->send.GetNetMsg();\n+        if (msg.has_value()) {\n+            count_sent_messages[msg->m_type]++;\n+            if (msg->m_type == NetMsgType::FEEFILTER) {\n+                break;\n+            }\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::VERSION], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::WTXIDRELAY], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::SENDADDRV2], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::VERACK], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::GETADDR], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::SENDCMPCT], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::PING], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::GETHEADERS], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::FEEFILTER], 1);\n+}\n+\n+BOOST_AUTO_TEST_CASE(addr)\n+{\n+    auto pipes = m_sockets_pipes.PopFront();\n+    std::vector<CAddress> addresses{5};\n+\n+    DebugLogHelper debug_log{strprintf(\"Received addr: %u addresses\", addresses.size())};\n+    pipes->recv.PushNetMsg(NetMsgType::ADDRV2, addresses);\n+    debug_log.EndAndThrowIfNotFound(30s);\n+}\n+\n+BOOST_AUTO_TEST_CASE(getblocks)\n+{\n+    auto pipes = m_sockets_pipes.PopFront();\n+    std::vector<uint256> hashes{5};\n+    CBlockLocator block_locator{std::move(hashes)};\n+    uint256 hash_stop;\n+\n+    DebugLogHelper debug_log{\"getblocks -1 to end\"};\n+    pipes->recv.PushNetMsg(NetMsgType::GETBLOCKS, block_locator, hash_stop);\n+    debug_log.EndAndThrowIfNotFound(30s);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ping)",
      "path": "src/test/netmsg_tests.cpp",
      "position": null,
      "original_position": 74,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "9b7e9dad271167af913828aaf3b75a9942770a34",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is inspired by https://github.com/bitcoin/bitcoin/pull/25515",
      "created_at": "2023-01-04T14:41:02Z",
      "updated_at": "2023-01-04T14:46:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1061551756",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1061551756"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1061557476",
      "pull_request_review_id": 1235986976,
      "id": 1061557476,
      "node_id": "PRRC_kwDOABII584_RhTk",
      "diff_hunk": "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <chrono>\n+#include <string>\n+#include <thread>\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+} // namespace\n+\n+static size_t& GetNumMsgTypes()\n+{\n+    static size_t g_num_msg_types{0};\n+    return g_num_msg_types;\n+}\n+#define FUZZ_TARGET_MSG(msg_type)                          \\\n+    struct msg_type##CountBeforeMain {                     \\\n+        msg_type##CountBeforeMain()                        \\\n+        {                                                  \\\n+            ++GetNumMsgTypes();                            \\\n+        }                                                  \\\n+    } const static g_##msg_type##count_before_main;        \\\n+    FUZZ_TARGET_INIT(netmsg_##msg_type, initialize_netmsg) \\\n+    {                                                      \\\n+        fuzz_target(buffer, #msg_type);                    \\\n+    }",
      "path": "src/test/fuzz/netmsg.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "9b7e9dad271167af913828aaf3b75a9942770a34",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is duplicated from `src/test/fuzz/process_message.cpp`. It should be deduplicated by putting it in a common header file, but I wonder if the new tests in `fuzz/netmsg.cpp` make the tests from `fuzz/process_message.cpp` and `fuzz/process_messages.cpp` obsolete and whether the latter should be removed. @MarcoFalke, as the author of `process_message[s]`, what do you think?",
      "created_at": "2023-01-04T14:46:19Z",
      "updated_at": "2023-01-04T14:46:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1061557476",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1061557476"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1061884646",
      "pull_request_review_id": 1236481487,
      "id": 1061884646,
      "node_id": "PRRC_kwDOABII584_SxLm",
      "diff_hunk": "@@ -0,0 +1,183 @@\n+// Copyright (c) 2022-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <net_processing.h>\n+#include <netaddress.h>\n+#include <protocol.h>\n+#include <test/util/logging.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/time.h>\n+#include <version.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chrono>\n+#include <string>\n+#include <unordered_map>\n+\n+BOOST_FIXTURE_TEST_SUITE(netmsg_tests, NetTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(initial_messages_exchange)\n+{\n+    std::unordered_map<std::string, size_t> count_sent_messages;\n+    auto pipes = m_sockets_pipes.PopFront();\n+\n+    // Wait for all messages due to the initial handshake to be Send() to the socket.\n+    // The FEEFILTER is the last one, so quit when we get that.\n+    for (;;) {\n+        auto msg = pipes->send.GetNetMsg();\n+        if (msg.has_value()) {\n+            count_sent_messages[msg->m_type]++;\n+            if (msg->m_type == NetMsgType::FEEFILTER) {\n+                break;\n+            }\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::VERSION], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::WTXIDRELAY], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::SENDADDRV2], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::VERACK], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::GETADDR], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::SENDCMPCT], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::PING], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::GETHEADERS], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::FEEFILTER], 1);\n+}\n+\n+BOOST_AUTO_TEST_CASE(addr)\n+{\n+    auto pipes = m_sockets_pipes.PopFront();\n+    std::vector<CAddress> addresses{5};\n+\n+    DebugLogHelper debug_log{strprintf(\"Received addr: %u addresses\", addresses.size())};\n+    pipes->recv.PushNetMsg(NetMsgType::ADDRV2, addresses);\n+    debug_log.EndAndThrowIfNotFound(30s);\n+}\n+\n+BOOST_AUTO_TEST_CASE(getblocks)\n+{\n+    auto pipes = m_sockets_pipes.PopFront();\n+    std::vector<uint256> hashes{5};\n+    CBlockLocator block_locator{std::move(hashes)};\n+    uint256 hash_stop;\n+\n+    DebugLogHelper debug_log{\"getblocks -1 to end\"};\n+    pipes->recv.PushNetMsg(NetMsgType::GETBLOCKS, block_locator, hash_stop);\n+    debug_log.EndAndThrowIfNotFound(30s);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ping)",
      "path": "src/test/netmsg_tests.cpp",
      "position": null,
      "original_position": 74,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "9b7e9dad271167af913828aaf3b75a9942770a34",
      "in_reply_to_id": 1061551756,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Key difference in #25515 is that it is testing net processing in isolation (at least isolated from CConnman), which imo is something we definitely should be doing. We already have e2e tests i.e. the functional tests, so I don't see the benefit to your approach here (besides the c++ tests being faster than the python ones).",
      "created_at": "2023-01-04T21:08:42Z",
      "updated_at": "2023-01-04T22:09:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1061884646",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1061884646"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1061894472",
      "pull_request_review_id": 1236481487,
      "id": 1061894472,
      "node_id": "PRRC_kwDOABII584_SzlI",
      "diff_hunk": "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <chrono>\n+#include <string>\n+#include <thread>\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+} // namespace\n+\n+static size_t& GetNumMsgTypes()\n+{\n+    static size_t g_num_msg_types{0};\n+    return g_num_msg_types;\n+}\n+#define FUZZ_TARGET_MSG(msg_type)                          \\\n+    struct msg_type##CountBeforeMain {                     \\\n+        msg_type##CountBeforeMain()                        \\\n+        {                                                  \\\n+            ++GetNumMsgTypes();                            \\\n+        }                                                  \\\n+    } const static g_##msg_type##count_before_main;        \\\n+    FUZZ_TARGET_INIT(netmsg_##msg_type, initialize_netmsg) \\\n+    {                                                      \\\n+        fuzz_target(buffer, #msg_type);                    \\\n+    }\n+\n+void initialize_netmsg()\n+{\n+    Assert(GetNumMsgTypes() == getAllNetMessageTypes().size()); // If this fails, add or remove the message type below\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+static void fuzz_target(FuzzBufferType buffer, const std::string& limit_to_message_type)",
      "path": "src/test/fuzz/netmsg.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "9b7e9dad271167af913828aaf3b75a9942770a34",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This target is averaging 2 execs/s on my machine. A good target should average a 1000 execs/s (https://github.com/google/fuzzing/blob/master/docs/good-fuzz-target.md#speed).\r\n\r\nI don't quite see the upside of this target over the `process_message(s)` targets. It might be able to find additional bugs if run with ThreadSanitizer but the current performance is gonna stop it from doing so effectively.\r\n\r\nFuzzing is particularly effective when the targets are kept narrow. For example: fuzzing net, net processing, validation or any of their sub components (e.g. TxRequestTracker or AddrMan) in isolation makes sense but all of it together will be inefficient.",
      "created_at": "2023-01-04T21:24:39Z",
      "updated_at": "2023-01-04T22:09:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1061894472",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1061894472"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1061896055",
      "pull_request_review_id": 1236481487,
      "id": 1061896055,
      "node_id": "PRRC_kwDOABII584_Sz93",
      "diff_hunk": "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <chrono>\n+#include <string>\n+#include <thread>\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+} // namespace\n+\n+static size_t& GetNumMsgTypes()\n+{\n+    static size_t g_num_msg_types{0};\n+    return g_num_msg_types;\n+}\n+#define FUZZ_TARGET_MSG(msg_type)                          \\\n+    struct msg_type##CountBeforeMain {                     \\\n+        msg_type##CountBeforeMain()                        \\\n+        {                                                  \\\n+            ++GetNumMsgTypes();                            \\\n+        }                                                  \\\n+    } const static g_##msg_type##count_before_main;        \\\n+    FUZZ_TARGET_INIT(netmsg_##msg_type, initialize_netmsg) \\\n+    {                                                      \\\n+        fuzz_target(buffer, #msg_type);                    \\\n+    }\n+\n+void initialize_netmsg()\n+{\n+    Assert(GetNumMsgTypes() == getAllNetMessageTypes().size()); // If this fails, add or remove the message type below\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+static void fuzz_target(FuzzBufferType buffer, const std::string& limit_to_message_type)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    g_setup->m_node.banman->TestOnlyReset();\n+\n+    // Addrman and CConnman deprioritize addresses tried in the last 10min. Avoid that since\n+    // our addrman has very few addresses.\n+    SetMockTime(GetMockTime() + std::chrono::minutes{\n+                                    fuzzed_data_provider.ConsumeIntegralInRange<uint8_t>(11, 255)});\n+\n+    auto pipes = g_setup->m_sockets_pipes.PopFront();\n+\n+    uint8_t buf[1024];\n+\n+    LIMITED_WHILE(fuzzed_data_provider.remaining_bytes() > 0, 100) {\n+\n+        const std::string message_type =\n+            limit_to_message_type.empty() ?\n+                fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE) :\n+                limit_to_message_type;\n+\n+        CDataStream payload{\n+            ConsumeRandomLengthByteVector(fuzzed_data_provider), SER_NETWORK, PROTOCOL_VERSION};\n+\n+        pipes->recv.PushNetMsg(message_type, payload);\n+\n+        if (pipes->send.GetBytes(buf, sizeof(buf)) == 0) { // EOF, the socket has been closed.\n+            return;\n+        }\n+    }\n+\n+    TestChainState& chainstate = *static_cast<TestChainState*>(&g_setup->m_node.chainman->ActiveChainstate());\n+\n+    // Force a disconnect and wait for it.\n+    for (;;) {\n+        // Push a message that will cause a disconnect and socket closure (EOF on the Send() pipe).\n+        pipes->recv.PushNetMsg(\n+            NetMsgType::GETBLOCKTXN,\n+            BlockTransactionsRequest{.blockhash = chainstate.m_chain.Tip()->GetBlockHash(),\n+                                     .indexes = {1, UINT16_MAX}});\n+        if (pipes->send.GetBytes(buf, sizeof(buf)) == 0) {\n+            break;\n+        }\n+        std::this_thread::sleep_for(50ms);",
      "path": "src/test/fuzz/netmsg.cpp",
      "position": null,
      "original_position": 101,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "9b7e9dad271167af913828aaf3b75a9942770a34",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I suspect this is the main reason for the poor performance, but the additional threading also doesn't help.",
      "created_at": "2023-01-04T21:27:00Z",
      "updated_at": "2023-01-04T22:09:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1061896055",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1061896055"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1061896936",
      "pull_request_review_id": 1236481487,
      "id": 1061896936,
      "node_id": "PRRC_kwDOABII584_S0Lo",
      "diff_hunk": "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <chrono>\n+#include <string>\n+#include <thread>\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+} // namespace\n+\n+static size_t& GetNumMsgTypes()\n+{\n+    static size_t g_num_msg_types{0};\n+    return g_num_msg_types;\n+}\n+#define FUZZ_TARGET_MSG(msg_type)                          \\\n+    struct msg_type##CountBeforeMain {                     \\\n+        msg_type##CountBeforeMain()                        \\\n+        {                                                  \\\n+            ++GetNumMsgTypes();                            \\\n+        }                                                  \\\n+    } const static g_##msg_type##count_before_main;        \\\n+    FUZZ_TARGET_INIT(netmsg_##msg_type, initialize_netmsg) \\\n+    {                                                      \\\n+        fuzz_target(buffer, #msg_type);                    \\\n+    }\n+\n+void initialize_netmsg()\n+{\n+    Assert(GetNumMsgTypes() == getAllNetMessageTypes().size()); // If this fails, add or remove the message type below\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+static void fuzz_target(FuzzBufferType buffer, const std::string& limit_to_message_type)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    g_setup->m_node.banman->TestOnlyReset();\n+\n+    // Addrman and CConnman deprioritize addresses tried in the last 10min. Avoid that since\n+    // our addrman has very few addresses.\n+    SetMockTime(GetMockTime() + std::chrono::minutes{\n+                                    fuzzed_data_provider.ConsumeIntegralInRange<uint8_t>(11, 255)});\n+\n+    auto pipes = g_setup->m_sockets_pipes.PopFront();\n+\n+    uint8_t buf[1024];\n+\n+    LIMITED_WHILE(fuzzed_data_provider.remaining_bytes() > 0, 100) {\n+\n+        const std::string message_type =\n+            limit_to_message_type.empty() ?\n+                fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE) :\n+                limit_to_message_type;\n+\n+        CDataStream payload{\n+            ConsumeRandomLengthByteVector(fuzzed_data_provider), SER_NETWORK, PROTOCOL_VERSION};\n+\n+        pipes->recv.PushNetMsg(message_type, payload);\n+\n+        if (pipes->send.GetBytes(buf, sizeof(buf)) == 0) { // EOF, the socket has been closed.\n+            return;\n+        }\n+    }\n+\n+    TestChainState& chainstate = *static_cast<TestChainState*>(&g_setup->m_node.chainman->ActiveChainstate());\n+\n+    // Force a disconnect and wait for it.\n+    for (;;) {\n+        // Push a message that will cause a disconnect and socket closure (EOF on the Send() pipe).\n+        pipes->recv.PushNetMsg(\n+            NetMsgType::GETBLOCKTXN,\n+            BlockTransactionsRequest{.blockhash = chainstate.m_chain.Tip()->GetBlockHash(),\n+                                     .indexes = {1, UINT16_MAX}});\n+        if (pipes->send.GetBytes(buf, sizeof(buf)) == 0) {\n+            break;\n+        }\n+        std::this_thread::sleep_for(50ms);\n+    }",
      "path": "src/test/fuzz/netmsg.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "9b7e9dad271167af913828aaf3b75a9942770a34",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this is missing a call to `SyncWithValidationInterfaceQueue` here.",
      "created_at": "2023-01-04T21:28:10Z",
      "updated_at": "2023-01-04T22:09:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1061896936",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1061896936"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068176623",
      "pull_request_review_id": 1245688508,
      "id": 1068176623,
      "node_id": "PRRC_kwDOABII584_qxTv",
      "diff_hunk": "@@ -0,0 +1,183 @@\n+// Copyright (c) 2022-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <net_processing.h>\n+#include <netaddress.h>\n+#include <protocol.h>\n+#include <test/util/logging.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/time.h>\n+#include <version.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chrono>\n+#include <string>\n+#include <unordered_map>\n+\n+BOOST_FIXTURE_TEST_SUITE(netmsg_tests, NetTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(initial_messages_exchange)\n+{\n+    std::unordered_map<std::string, size_t> count_sent_messages;\n+    auto pipes = m_sockets_pipes.PopFront();\n+\n+    // Wait for all messages due to the initial handshake to be Send() to the socket.\n+    // The FEEFILTER is the last one, so quit when we get that.\n+    for (;;) {\n+        auto msg = pipes->send.GetNetMsg();\n+        if (msg.has_value()) {\n+            count_sent_messages[msg->m_type]++;\n+            if (msg->m_type == NetMsgType::FEEFILTER) {\n+                break;\n+            }\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::VERSION], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::WTXIDRELAY], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::SENDADDRV2], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::VERACK], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::GETADDR], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::SENDCMPCT], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::PING], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::GETHEADERS], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::FEEFILTER], 1);\n+}\n+\n+BOOST_AUTO_TEST_CASE(addr)\n+{\n+    auto pipes = m_sockets_pipes.PopFront();\n+    std::vector<CAddress> addresses{5};\n+\n+    DebugLogHelper debug_log{strprintf(\"Received addr: %u addresses\", addresses.size())};\n+    pipes->recv.PushNetMsg(NetMsgType::ADDRV2, addresses);\n+    debug_log.EndAndThrowIfNotFound(30s);\n+}\n+\n+BOOST_AUTO_TEST_CASE(getblocks)\n+{\n+    auto pipes = m_sockets_pipes.PopFront();\n+    std::vector<uint256> hashes{5};\n+    CBlockLocator block_locator{std::move(hashes)};\n+    uint256 hash_stop;\n+\n+    DebugLogHelper debug_log{\"getblocks -1 to end\"};\n+    pipes->recv.PushNetMsg(NetMsgType::GETBLOCKS, block_locator, hash_stop);\n+    debug_log.EndAndThrowIfNotFound(30s);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ping)",
      "path": "src/test/netmsg_tests.cpp",
      "position": null,
      "original_position": 74,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "9b7e9dad271167af913828aaf3b75a9942770a34",
      "in_reply_to_id": 1061551756,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, both testing in isolation and e2e is good to have. The difference between the tests included in this PR and the functional tests is that when the test code runs inside the same process:\r\n\r\n* it has greater control and observability - the test can read any global or member variable and can call arbitrary functions \r\n* it can do fuzzing\r\n\r\nI think all those tests are complementary, not mutually exclusive.",
      "created_at": "2023-01-12T14:16:57Z",
      "updated_at": "2023-01-12T14:16:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1068176623",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068176623"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068182302",
      "pull_request_review_id": 1245697308,
      "id": 1068182302,
      "node_id": "PRRC_kwDOABII584_qyse",
      "diff_hunk": "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <chrono>\n+#include <string>\n+#include <thread>\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+} // namespace\n+\n+static size_t& GetNumMsgTypes()\n+{\n+    static size_t g_num_msg_types{0};\n+    return g_num_msg_types;\n+}\n+#define FUZZ_TARGET_MSG(msg_type)                          \\\n+    struct msg_type##CountBeforeMain {                     \\\n+        msg_type##CountBeforeMain()                        \\\n+        {                                                  \\\n+            ++GetNumMsgTypes();                            \\\n+        }                                                  \\\n+    } const static g_##msg_type##count_before_main;        \\\n+    FUZZ_TARGET_INIT(netmsg_##msg_type, initialize_netmsg) \\\n+    {                                                      \\\n+        fuzz_target(buffer, #msg_type);                    \\\n+    }\n+\n+void initialize_netmsg()\n+{\n+    Assert(GetNumMsgTypes() == getAllNetMessageTypes().size()); // If this fails, add or remove the message type below\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+static void fuzz_target(FuzzBufferType buffer, const std::string& limit_to_message_type)",
      "path": "src/test/fuzz/netmsg.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "9b7e9dad271167af913828aaf3b75a9942770a34",
      "in_reply_to_id": 1061894472,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Pushed an improvement that changes it to about 17 exec/s, it tends to increase if the test is left to run for some time.\r\n\r\nIMO e2e fuzzing has some value.",
      "created_at": "2023-01-12T14:21:50Z",
      "updated_at": "2023-01-12T14:21:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1068182302",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068182302"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068182986",
      "pull_request_review_id": 1245698381,
      "id": 1068182986,
      "node_id": "PRRC_kwDOABII584_qy3K",
      "diff_hunk": "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <chrono>\n+#include <string>\n+#include <thread>\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+} // namespace\n+\n+static size_t& GetNumMsgTypes()\n+{\n+    static size_t g_num_msg_types{0};\n+    return g_num_msg_types;\n+}\n+#define FUZZ_TARGET_MSG(msg_type)                          \\\n+    struct msg_type##CountBeforeMain {                     \\\n+        msg_type##CountBeforeMain()                        \\\n+        {                                                  \\\n+            ++GetNumMsgTypes();                            \\\n+        }                                                  \\\n+    } const static g_##msg_type##count_before_main;        \\\n+    FUZZ_TARGET_INIT(netmsg_##msg_type, initialize_netmsg) \\\n+    {                                                      \\\n+        fuzz_target(buffer, #msg_type);                    \\\n+    }\n+\n+void initialize_netmsg()\n+{\n+    Assert(GetNumMsgTypes() == getAllNetMessageTypes().size()); // If this fails, add or remove the message type below\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+static void fuzz_target(FuzzBufferType buffer, const std::string& limit_to_message_type)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    g_setup->m_node.banman->TestOnlyReset();\n+\n+    // Addrman and CConnman deprioritize addresses tried in the last 10min. Avoid that since\n+    // our addrman has very few addresses.\n+    SetMockTime(GetMockTime() + std::chrono::minutes{\n+                                    fuzzed_data_provider.ConsumeIntegralInRange<uint8_t>(11, 255)});\n+\n+    auto pipes = g_setup->m_sockets_pipes.PopFront();\n+\n+    uint8_t buf[1024];\n+\n+    LIMITED_WHILE(fuzzed_data_provider.remaining_bytes() > 0, 100) {\n+\n+        const std::string message_type =\n+            limit_to_message_type.empty() ?\n+                fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE) :\n+                limit_to_message_type;\n+\n+        CDataStream payload{\n+            ConsumeRandomLengthByteVector(fuzzed_data_provider), SER_NETWORK, PROTOCOL_VERSION};\n+\n+        pipes->recv.PushNetMsg(message_type, payload);\n+\n+        if (pipes->send.GetBytes(buf, sizeof(buf)) == 0) { // EOF, the socket has been closed.\n+            return;\n+        }\n+    }\n+\n+    TestChainState& chainstate = *static_cast<TestChainState*>(&g_setup->m_node.chainman->ActiveChainstate());\n+\n+    // Force a disconnect and wait for it.\n+    for (;;) {\n+        // Push a message that will cause a disconnect and socket closure (EOF on the Send() pipe).\n+        pipes->recv.PushNetMsg(\n+            NetMsgType::GETBLOCKTXN,\n+            BlockTransactionsRequest{.blockhash = chainstate.m_chain.Tip()->GetBlockHash(),\n+                                     .indexes = {1, UINT16_MAX}});\n+        if (pipes->send.GetBytes(buf, sizeof(buf)) == 0) {\n+            break;\n+        }\n+        std::this_thread::sleep_for(50ms);",
      "path": "src/test/fuzz/netmsg.cpp",
      "position": null,
      "original_position": 101,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "9b7e9dad271167af913828aaf3b75a9942770a34",
      "in_reply_to_id": 1061896055,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It wasn't but I ditched it anyway in `9b7e9dad27...daee83c1c5`.",
      "created_at": "2023-01-12T14:22:26Z",
      "updated_at": "2023-01-12T14:22:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1068182986",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068182986"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068185233",
      "pull_request_review_id": 1245701729,
      "id": 1068185233,
      "node_id": "PRRC_kwDOABII584_qzaR",
      "diff_hunk": "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <chrono>\n+#include <string>\n+#include <thread>\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+} // namespace\n+\n+static size_t& GetNumMsgTypes()\n+{\n+    static size_t g_num_msg_types{0};\n+    return g_num_msg_types;\n+}\n+#define FUZZ_TARGET_MSG(msg_type)                          \\\n+    struct msg_type##CountBeforeMain {                     \\\n+        msg_type##CountBeforeMain()                        \\\n+        {                                                  \\\n+            ++GetNumMsgTypes();                            \\\n+        }                                                  \\\n+    } const static g_##msg_type##count_before_main;        \\\n+    FUZZ_TARGET_INIT(netmsg_##msg_type, initialize_netmsg) \\\n+    {                                                      \\\n+        fuzz_target(buffer, #msg_type);                    \\\n+    }\n+\n+void initialize_netmsg()\n+{\n+    Assert(GetNumMsgTypes() == getAllNetMessageTypes().size()); // If this fails, add or remove the message type below\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+static void fuzz_target(FuzzBufferType buffer, const std::string& limit_to_message_type)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    g_setup->m_node.banman->TestOnlyReset();\n+\n+    // Addrman and CConnman deprioritize addresses tried in the last 10min. Avoid that since\n+    // our addrman has very few addresses.\n+    SetMockTime(GetMockTime() + std::chrono::minutes{\n+                                    fuzzed_data_provider.ConsumeIntegralInRange<uint8_t>(11, 255)});\n+\n+    auto pipes = g_setup->m_sockets_pipes.PopFront();\n+\n+    uint8_t buf[1024];\n+\n+    LIMITED_WHILE(fuzzed_data_provider.remaining_bytes() > 0, 100) {\n+\n+        const std::string message_type =\n+            limit_to_message_type.empty() ?\n+                fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE) :\n+                limit_to_message_type;\n+\n+        CDataStream payload{\n+            ConsumeRandomLengthByteVector(fuzzed_data_provider), SER_NETWORK, PROTOCOL_VERSION};\n+\n+        pipes->recv.PushNetMsg(message_type, payload);\n+\n+        if (pipes->send.GetBytes(buf, sizeof(buf)) == 0) { // EOF, the socket has been closed.\n+            return;\n+        }\n+    }\n+\n+    TestChainState& chainstate = *static_cast<TestChainState*>(&g_setup->m_node.chainman->ActiveChainstate());\n+\n+    // Force a disconnect and wait for it.\n+    for (;;) {\n+        // Push a message that will cause a disconnect and socket closure (EOF on the Send() pipe).\n+        pipes->recv.PushNetMsg(\n+            NetMsgType::GETBLOCKTXN,\n+            BlockTransactionsRequest{.blockhash = chainstate.m_chain.Tip()->GetBlockHash(),\n+                                     .indexes = {1, UINT16_MAX}});\n+        if (pipes->send.GetBytes(buf, sizeof(buf)) == 0) {\n+            break;\n+        }\n+        std::this_thread::sleep_for(50ms);\n+    }",
      "path": "src/test/fuzz/netmsg.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "9b7e9dad271167af913828aaf3b75a9942770a34",
      "in_reply_to_id": 1061896936,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe. I am probably missing something. Can you elaborate why it is missing a call to `SyncWithValidationInterfaceQueue()`?",
      "created_at": "2023-01-12T14:24:17Z",
      "updated_at": "2023-01-12T14:24:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1068185233",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068185233"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068191630",
      "pull_request_review_id": 1245711657,
      "id": 1068191630,
      "node_id": "PRRC_kwDOABII584_q0-O",
      "diff_hunk": "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <chrono>\n+#include <string>\n+#include <thread>\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+} // namespace\n+\n+static size_t& GetNumMsgTypes()\n+{\n+    static size_t g_num_msg_types{0};\n+    return g_num_msg_types;\n+}\n+#define FUZZ_TARGET_MSG(msg_type)                          \\\n+    struct msg_type##CountBeforeMain {                     \\\n+        msg_type##CountBeforeMain()                        \\\n+        {                                                  \\\n+            ++GetNumMsgTypes();                            \\\n+        }                                                  \\\n+    } const static g_##msg_type##count_before_main;        \\\n+    FUZZ_TARGET_INIT(netmsg_##msg_type, initialize_netmsg) \\\n+    {                                                      \\\n+        fuzz_target(buffer, #msg_type);                    \\\n+    }\n+\n+void initialize_netmsg()\n+{\n+    Assert(GetNumMsgTypes() == getAllNetMessageTypes().size()); // If this fails, add or remove the message type below\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+static void fuzz_target(FuzzBufferType buffer, const std::string& limit_to_message_type)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    g_setup->m_node.banman->TestOnlyReset();\n+\n+    // Addrman and CConnman deprioritize addresses tried in the last 10min. Avoid that since\n+    // our addrman has very few addresses.\n+    SetMockTime(GetMockTime() + std::chrono::minutes{\n+                                    fuzzed_data_provider.ConsumeIntegralInRange<uint8_t>(11, 255)});\n+\n+    auto pipes = g_setup->m_sockets_pipes.PopFront();\n+\n+    uint8_t buf[1024];\n+\n+    LIMITED_WHILE(fuzzed_data_provider.remaining_bytes() > 0, 100) {\n+\n+        const std::string message_type =\n+            limit_to_message_type.empty() ?\n+                fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE) :\n+                limit_to_message_type;\n+\n+        CDataStream payload{\n+            ConsumeRandomLengthByteVector(fuzzed_data_provider), SER_NETWORK, PROTOCOL_VERSION};\n+\n+        pipes->recv.PushNetMsg(message_type, payload);\n+\n+        if (pipes->send.GetBytes(buf, sizeof(buf)) == 0) { // EOF, the socket has been closed.\n+            return;\n+        }\n+    }\n+\n+    TestChainState& chainstate = *static_cast<TestChainState*>(&g_setup->m_node.chainman->ActiveChainstate());\n+\n+    // Force a disconnect and wait for it.\n+    for (;;) {\n+        // Push a message that will cause a disconnect and socket closure (EOF on the Send() pipe).\n+        pipes->recv.PushNetMsg(\n+            NetMsgType::GETBLOCKTXN,\n+            BlockTransactionsRequest{.blockhash = chainstate.m_chain.Tip()->GetBlockHash(),\n+                                     .indexes = {1, UINT16_MAX}});\n+        if (pipes->send.GetBytes(buf, sizeof(buf)) == 0) {\n+            break;\n+        }\n+        std::this_thread::sleep_for(50ms);\n+    }",
      "path": "src/test/fuzz/netmsg.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "9b7e9dad271167af913828aaf3b75a9942770a34",
      "in_reply_to_id": 1061896936,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If (in theory) it is possible to push an event on the queue, it should be handled before starting the next input. (Not sure if applicable here)",
      "created_at": "2023-01-12T14:29:52Z",
      "updated_at": "2023-01-12T14:29:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1068191630",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068191630"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068212938",
      "pull_request_review_id": 1245744856,
      "id": 1068212938,
      "node_id": "PRRC_kwDOABII584_q6LK",
      "diff_hunk": "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <chrono>\n+#include <string>\n+#include <thread>\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+} // namespace\n+\n+static size_t& GetNumMsgTypes()\n+{\n+    static size_t g_num_msg_types{0};\n+    return g_num_msg_types;\n+}\n+#define FUZZ_TARGET_MSG(msg_type)                          \\\n+    struct msg_type##CountBeforeMain {                     \\\n+        msg_type##CountBeforeMain()                        \\\n+        {                                                  \\\n+            ++GetNumMsgTypes();                            \\\n+        }                                                  \\\n+    } const static g_##msg_type##count_before_main;        \\\n+    FUZZ_TARGET_INIT(netmsg_##msg_type, initialize_netmsg) \\\n+    {                                                      \\\n+        fuzz_target(buffer, #msg_type);                    \\\n+    }\n+\n+void initialize_netmsg()\n+{\n+    Assert(GetNumMsgTypes() == getAllNetMessageTypes().size()); // If this fails, add or remove the message type below\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+static void fuzz_target(FuzzBufferType buffer, const std::string& limit_to_message_type)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    g_setup->m_node.banman->TestOnlyReset();\n+\n+    // Addrman and CConnman deprioritize addresses tried in the last 10min. Avoid that since\n+    // our addrman has very few addresses.\n+    SetMockTime(GetMockTime() + std::chrono::minutes{\n+                                    fuzzed_data_provider.ConsumeIntegralInRange<uint8_t>(11, 255)});\n+\n+    auto pipes = g_setup->m_sockets_pipes.PopFront();\n+\n+    uint8_t buf[1024];\n+\n+    LIMITED_WHILE(fuzzed_data_provider.remaining_bytes() > 0, 100) {\n+\n+        const std::string message_type =\n+            limit_to_message_type.empty() ?\n+                fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE) :\n+                limit_to_message_type;\n+\n+        CDataStream payload{\n+            ConsumeRandomLengthByteVector(fuzzed_data_provider), SER_NETWORK, PROTOCOL_VERSION};\n+\n+        pipes->recv.PushNetMsg(message_type, payload);\n+\n+        if (pipes->send.GetBytes(buf, sizeof(buf)) == 0) { // EOF, the socket has been closed.\n+            return;\n+        }\n+    }\n+\n+    TestChainState& chainstate = *static_cast<TestChainState*>(&g_setup->m_node.chainman->ActiveChainstate());\n+\n+    // Force a disconnect and wait for it.\n+    for (;;) {\n+        // Push a message that will cause a disconnect and socket closure (EOF on the Send() pipe).\n+        pipes->recv.PushNetMsg(\n+            NetMsgType::GETBLOCKTXN,\n+            BlockTransactionsRequest{.blockhash = chainstate.m_chain.Tip()->GetBlockHash(),\n+                                     .indexes = {1, UINT16_MAX}});\n+        if (pipes->send.GetBytes(buf, sizeof(buf)) == 0) {\n+            break;\n+        }\n+        std::this_thread::sleep_for(50ms);\n+    }",
      "path": "src/test/fuzz/netmsg.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "9b7e9dad271167af913828aaf3b75a9942770a34",
      "in_reply_to_id": 1061896936,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added.",
      "created_at": "2023-01-12T14:47:14Z",
      "updated_at": "2023-01-12T14:47:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1068212938",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068212938"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068245906",
      "pull_request_review_id": 1245795841,
      "id": 1068245906,
      "node_id": "PRRC_kwDOABII584_rCOS",
      "diff_hunk": "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <chrono>\n+#include <string>\n+#include <thread>\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+} // namespace\n+\n+static size_t& GetNumMsgTypes()\n+{\n+    static size_t g_num_msg_types{0};\n+    return g_num_msg_types;\n+}\n+#define FUZZ_TARGET_MSG(msg_type)                          \\\n+    struct msg_type##CountBeforeMain {                     \\\n+        msg_type##CountBeforeMain()                        \\\n+        {                                                  \\\n+            ++GetNumMsgTypes();                            \\\n+        }                                                  \\\n+    } const static g_##msg_type##count_before_main;        \\\n+    FUZZ_TARGET_INIT(netmsg_##msg_type, initialize_netmsg) \\\n+    {                                                      \\\n+        fuzz_target(buffer, #msg_type);                    \\\n+    }",
      "path": "src/test/fuzz/netmsg.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "9b7e9dad271167af913828aaf3b75a9942770a34",
      "in_reply_to_id": 1061557476,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why not de-duplicate by putting it in the existing `./src/test/fuzz/process_message.cpp` file?",
      "created_at": "2023-01-12T15:12:13Z",
      "updated_at": "2023-01-12T15:12:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1068245906",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068245906"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068310185",
      "pull_request_review_id": 1245900568,
      "id": 1068310185,
      "node_id": "PRRC_kwDOABII584_rR6p",
      "diff_hunk": "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <chrono>\n+#include <string>\n+#include <thread>\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+} // namespace\n+\n+static size_t& GetNumMsgTypes()\n+{\n+    static size_t g_num_msg_types{0};\n+    return g_num_msg_types;\n+}\n+#define FUZZ_TARGET_MSG(msg_type)                          \\\n+    struct msg_type##CountBeforeMain {                     \\\n+        msg_type##CountBeforeMain()                        \\\n+        {                                                  \\\n+            ++GetNumMsgTypes();                            \\\n+        }                                                  \\\n+    } const static g_##msg_type##count_before_main;        \\\n+    FUZZ_TARGET_INIT(netmsg_##msg_type, initialize_netmsg) \\\n+    {                                                      \\\n+        fuzz_target(buffer, #msg_type);                    \\\n+    }",
      "path": "src/test/fuzz/netmsg.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "9b7e9dad271167af913828aaf3b75a9942770a34",
      "in_reply_to_id": 1061557476,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You mean to put the entire contents of the newly introduced `fuzz/netmsg.cpp` inside `fuzz/process_message.cpp`?",
      "created_at": "2023-01-12T16:03:46Z",
      "updated_at": "2023-01-12T16:03:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1068310185",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068310185"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068314583",
      "pull_request_review_id": 1245907668,
      "id": 1068314583,
      "node_id": "PRRC_kwDOABII584_rS_X",
      "diff_hunk": "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <chrono>\n+#include <string>\n+#include <thread>\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+} // namespace\n+\n+static size_t& GetNumMsgTypes()\n+{\n+    static size_t g_num_msg_types{0};\n+    return g_num_msg_types;\n+}\n+#define FUZZ_TARGET_MSG(msg_type)                          \\\n+    struct msg_type##CountBeforeMain {                     \\\n+        msg_type##CountBeforeMain()                        \\\n+        {                                                  \\\n+            ++GetNumMsgTypes();                            \\\n+        }                                                  \\\n+    } const static g_##msg_type##count_before_main;        \\\n+    FUZZ_TARGET_INIT(netmsg_##msg_type, initialize_netmsg) \\\n+    {                                                      \\\n+        fuzz_target(buffer, #msg_type);                    \\\n+    }",
      "path": "src/test/fuzz/netmsg.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "9b7e9dad271167af913828aaf3b75a9942770a34",
      "in_reply_to_id": 1061557476,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yes",
      "created_at": "2023-01-12T16:07:36Z",
      "updated_at": "2023-01-12T16:07:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1068314583",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068314583"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068407369",
      "pull_request_review_id": 1246114670,
      "id": 1068407369,
      "node_id": "PRRC_kwDOABII584_rppJ",
      "diff_hunk": "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <chrono>\n+#include <string>\n+#include <thread>\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+} // namespace\n+\n+static size_t& GetNumMsgTypes()\n+{\n+    static size_t g_num_msg_types{0};\n+    return g_num_msg_types;\n+}\n+#define FUZZ_TARGET_MSG(msg_type)                          \\\n+    struct msg_type##CountBeforeMain {                     \\\n+        msg_type##CountBeforeMain()                        \\\n+        {                                                  \\\n+            ++GetNumMsgTypes();                            \\\n+        }                                                  \\\n+    } const static g_##msg_type##count_before_main;        \\\n+    FUZZ_TARGET_INIT(netmsg_##msg_type, initialize_netmsg) \\\n+    {                                                      \\\n+        fuzz_target(buffer, #msg_type);                    \\\n+    }\n+\n+void initialize_netmsg()\n+{\n+    Assert(GetNumMsgTypes() == getAllNetMessageTypes().size()); // If this fails, add or remove the message type below\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+static void fuzz_target(FuzzBufferType buffer, const std::string& limit_to_message_type)",
      "path": "src/test/fuzz/netmsg.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "9b7e9dad271167af913828aaf3b75a9942770a34",
      "in_reply_to_id": 1061894472,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> IMO e2e fuzzing has some value.\r\n\r\nYes, but I think it should focus on what you are trying to test. If you keep the target to broad the fuzzer is gonna have a hard time finding interesting test cases (especially if the target is slow). One obvious way of focusing is to only fuzz smaller units of code and in the e2e case you probably want to narrow the way you are interpreting the fuzz input so that you are actually testing what you want to test.\r\n\r\nThe approach here currently seems to be very similar to the `process_message(s)` targets (which is why you suggested to replace them iiuc), in that you are interpreting most of the fuzz input as a sequence of arbitrary messages, so the questions that I have are:\r\n* What do you want to test here? Message processing? connman internals? the interactions between connman/peerman?\r\n* What bugs is your target capable of finding that `process_message(s)` (or other targets) are not? In other words which areas/interactions is this fuzzing that are previously not covered?\r\n* Are the message contents (and their mutations) of all message types useful for what you are trying to test here? e.g. does it matter if a tx message contains a transaction with 1 input or 5? because the fuzzer will likely find that difference interesting but it doesn't seem like this would add value to what you are trying to test here, since the goal (correct me if I am wrong) isn't fuzzing validation.\r\n* Could the input interpretation be narrowed to only include the messages that lead to interactions you are trying to test?",
      "created_at": "2023-01-12T17:31:09Z",
      "updated_at": "2023-01-12T17:31:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1068407369",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068407369"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1070262419",
      "pull_request_review_id": 1248763319,
      "id": 1070262419,
      "node_id": "PRRC_kwDOABII584_yuiT",
      "diff_hunk": "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <chrono>\n+#include <string>\n+#include <thread>\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+} // namespace\n+\n+static size_t& GetNumMsgTypes()\n+{\n+    static size_t g_num_msg_types{0};\n+    return g_num_msg_types;\n+}\n+#define FUZZ_TARGET_MSG(msg_type)                          \\\n+    struct msg_type##CountBeforeMain {                     \\\n+        msg_type##CountBeforeMain()                        \\\n+        {                                                  \\\n+            ++GetNumMsgTypes();                            \\\n+        }                                                  \\\n+    } const static g_##msg_type##count_before_main;        \\\n+    FUZZ_TARGET_INIT(netmsg_##msg_type, initialize_netmsg) \\\n+    {                                                      \\\n+        fuzz_target(buffer, #msg_type);                    \\\n+    }",
      "path": "src/test/fuzz/netmsg.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "9b7e9dad271167af913828aaf3b75a9942770a34",
      "in_reply_to_id": 1061557476,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Looks plausible. I will try to do that and see how it will look.",
      "created_at": "2023-01-14T12:58:20Z",
      "updated_at": "2023-01-14T12:58:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1070262419",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1070262419"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1111936979",
      "pull_request_review_id": 1305767542,
      "id": 1111936979,
      "node_id": "PRRC_kwDOABII585CRs_T",
      "diff_hunk": "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <chrono>\n+#include <string>\n+#include <thread>\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+} // namespace\n+\n+static size_t& GetNumMsgTypes()\n+{\n+    static size_t g_num_msg_types{0};\n+    return g_num_msg_types;\n+}\n+#define FUZZ_TARGET_MSG(msg_type)                          \\\n+    struct msg_type##CountBeforeMain {                     \\\n+        msg_type##CountBeforeMain()                        \\\n+        {                                                  \\\n+            ++GetNumMsgTypes();                            \\\n+        }                                                  \\\n+    } const static g_##msg_type##count_before_main;        \\\n+    FUZZ_TARGET_INIT(netmsg_##msg_type, initialize_netmsg) \\\n+    {                                                      \\\n+        fuzz_target(buffer, #msg_type);                    \\\n+    }",
      "path": "src/test/fuzz/netmsg.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "9b7e9dad271167af913828aaf3b75a9942770a34",
      "in_reply_to_id": 1061557476,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done. This also reduced the size of the diff (the last commit). Thanks!",
      "created_at": "2023-02-20T13:05:33Z",
      "updated_at": "2023-02-20T13:05:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1111936979",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1111936979"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1171479645",
      "pull_request_review_id": 1392285351,
      "id": 1171479645,
      "node_id": "PRRC_kwDOABII585F01xd",
      "diff_hunk": "@@ -0,0 +1,183 @@\n+// Copyright (c) 2022-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <net_processing.h>\n+#include <netaddress.h>\n+#include <protocol.h>\n+#include <test/util/logging.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/time.h>\n+#include <version.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chrono>\n+#include <string>\n+#include <unordered_map>\n+\n+BOOST_FIXTURE_TEST_SUITE(netmsg_tests, NetTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(initial_messages_exchange)\n+{\n+    std::unordered_map<std::string, size_t> count_sent_messages;\n+    auto pipes = m_sockets_pipes.PopFront();\n+\n+    // Wait for all messages due to the initial handshake to be Send() to the socket.\n+    // The FEEFILTER is the last one, so quit when we get that.\n+    for (;;) {\n+        auto msg = pipes->send.GetNetMsg();\n+        if (msg.has_value()) {\n+            count_sent_messages[msg->m_type]++;\n+            if (msg->m_type == NetMsgType::FEEFILTER) {\n+                break;\n+            }\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::VERSION], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::WTXIDRELAY], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::SENDADDRV2], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::VERACK], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::GETADDR], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::SENDCMPCT], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::PING], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::GETHEADERS], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::FEEFILTER], 1);\n+}\n+\n+BOOST_AUTO_TEST_CASE(addr)\n+{\n+    auto pipes = m_sockets_pipes.PopFront();\n+    std::vector<CAddress> addresses{5};\n+\n+    DebugLogHelper debug_log{strprintf(\"Received addr: %u addresses\", addresses.size())};\n+    pipes->recv.PushNetMsg(NetMsgType::ADDRV2, addresses);\n+    debug_log.EndAndThrowIfNotFound(30s);\n+}\n+\n+BOOST_AUTO_TEST_CASE(getblocks)\n+{\n+    auto pipes = m_sockets_pipes.PopFront();\n+    std::vector<uint256> hashes{5};\n+    CBlockLocator block_locator{std::move(hashes)};\n+    uint256 hash_stop;\n+\n+    DebugLogHelper debug_log{\"getblocks -1 to end\"};\n+    pipes->recv.PushNetMsg(NetMsgType::GETBLOCKS, block_locator, hash_stop);\n+    debug_log.EndAndThrowIfNotFound(30s);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ping)",
      "path": "src/test/netmsg_tests.cpp",
      "position": null,
      "original_position": 74,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "9b7e9dad271167af913828aaf3b75a9942770a34",
      "in_reply_to_id": 1061551756,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The unit tests are what I run locally over and over, as they run so much more quickly.  IIRC there was a project idea a few years ago to convert the functional tests in Python to C++.  Having better unit test coverage, or shifting coverage from the Python tests to C++ ones, seems beneficial.",
      "created_at": "2023-04-19T15:03:10Z",
      "updated_at": "2023-04-19T15:03:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1171479645",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1171479645"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1219375776",
      "pull_request_review_id": 1464849019,
      "id": 1219375776,
      "node_id": "PRRC_kwDOABII585IrjKg",
      "diff_hunk": "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <chrono>\n+#include <string>\n+#include <thread>\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+} // namespace\n+\n+static size_t& GetNumMsgTypes()\n+{\n+    static size_t g_num_msg_types{0};\n+    return g_num_msg_types;\n+}\n+#define FUZZ_TARGET_MSG(msg_type)                          \\\n+    struct msg_type##CountBeforeMain {                     \\\n+        msg_type##CountBeforeMain()                        \\\n+        {                                                  \\\n+            ++GetNumMsgTypes();                            \\\n+        }                                                  \\\n+    } const static g_##msg_type##count_before_main;        \\\n+    FUZZ_TARGET_INIT(netmsg_##msg_type, initialize_netmsg) \\\n+    {                                                      \\\n+        fuzz_target(buffer, #msg_type);                    \\\n+    }",
      "path": "src/test/fuzz/netmsg.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "9b7e9dad271167af913828aaf3b75a9942770a34",
      "in_reply_to_id": 1061557476,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I put the new e2e tests in a separate new file because this code (which I was trying to avoid duplicating) is gone after https://github.com/bitcoin/bitcoin/pull/27766",
      "created_at": "2023-06-06T10:26:55Z",
      "updated_at": "2023-06-06T10:26:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1219375776",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1219375776"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1219413577",
      "pull_request_review_id": 1464897993,
      "id": 1219413577,
      "node_id": "PRRC_kwDOABII585IrsZJ",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <primitives/transaction.h>\n+#include <protocol.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/net.h>\n+#include <test/util/mining.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/chaintype.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+\n+#include <atomic>\n+#include <cstdlib>\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <string_view>\n+#include <vector>\n+\n+// There are two sets of tests:\n+// - direct: pass the fuzzed message directly to PeerManager::ProcessMessage() (fuzz/process_message.cpp)\n+// - e2e: send the fuzzed message to a mocked socket which is read from Connman\n+//   and processed by PeerManager (like it is happening in the \"real world\") (fuzz/process_message_e2e.cpp)\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+std::string_view LIMIT_TO_MESSAGE_TYPE{};\n+} // namespace\n+\n+void initialize_process_message_e2e()\n+{\n+    if (const auto val{std::getenv(\"LIMIT_TO_MESSAGE_TYPE\")}) {\n+        LIMIT_TO_MESSAGE_TYPE = val;\n+        Assert(std::count(getAllNetMessageTypes().begin(), getAllNetMessageTypes().end(), LIMIT_TO_MESSAGE_TYPE)); // Unknown message type passed\n+    }\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>(\n+            /*chain_type=*/ChainType::REGTEST,\n+            /*extra_args=*/{\"-txreconciliation\"});\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+FUZZ_TARGET_INIT(process_message_e2e, initialize_process_message_e2e)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    SetMockTime(GetMockTime() + std::chrono::minutes{fuzzed_data_provider.ConsumeIntegral<uint8_t>()});\n+\n+    g_setup->m_node.connman->OpenNetworkConnection(\n+        CAddress{}, false, nullptr, \"1.2.3.4:8333\", ConnectionType::OUTBOUND_FULL_RELAY);\n+\n+    auto pipes = g_setup->m_sockets_pipes.PopFront();\n+\n+    uint8_t buf[1024];\n+\n+    LIMITED_WHILE(fuzzed_data_provider.remaining_bytes() > 0, 100) {\n+\n+        const std::string message_type{\n+            LIMIT_TO_MESSAGE_TYPE.empty() ?\n+                fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE) :\n+                LIMIT_TO_MESSAGE_TYPE};",
      "path": "src/test/fuzz/process_message_e2e.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "4c867de996f58655aec3911f45367eb31865fb4d",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changing the fuzz input format with a run-time setting seems fragile and not intuitive when one wants to re-use fuzz inputs or reproduce runs.",
      "created_at": "2023-06-06T10:53:23Z",
      "updated_at": "2023-06-06T10:55:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1219413577",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1219413577"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1219414855",
      "pull_request_review_id": 1464897993,
      "id": 1219414855,
      "node_id": "PRRC_kwDOABII585IrstH",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <primitives/transaction.h>\n+#include <protocol.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/net.h>\n+#include <test/util/mining.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/chaintype.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+\n+#include <atomic>\n+#include <cstdlib>\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <string_view>\n+#include <vector>\n+\n+// There are two sets of tests:\n+// - direct: pass the fuzzed message directly to PeerManager::ProcessMessage() (fuzz/process_message.cpp)\n+// - e2e: send the fuzzed message to a mocked socket which is read from Connman\n+//   and processed by PeerManager (like it is happening in the \"real world\") (fuzz/process_message_e2e.cpp)\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+std::string_view LIMIT_TO_MESSAGE_TYPE{};\n+} // namespace\n+\n+void initialize_process_message_e2e()\n+{\n+    if (const auto val{std::getenv(\"LIMIT_TO_MESSAGE_TYPE\")}) {\n+        LIMIT_TO_MESSAGE_TYPE = val;\n+        Assert(std::count(getAllNetMessageTypes().begin(), getAllNetMessageTypes().end(), LIMIT_TO_MESSAGE_TYPE)); // Unknown message type passed\n+    }\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>(\n+            /*chain_type=*/ChainType::REGTEST,\n+            /*extra_args=*/{\"-txreconciliation\"});\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+FUZZ_TARGET_INIT(process_message_e2e, initialize_process_message_e2e)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    SetMockTime(GetMockTime() + std::chrono::minutes{fuzzed_data_provider.ConsumeIntegral<uint8_t>()});\n+\n+    g_setup->m_node.connman->OpenNetworkConnection(\n+        CAddress{}, false, nullptr, \"1.2.3.4:8333\", ConnectionType::OUTBOUND_FULL_RELAY);\n+\n+    auto pipes = g_setup->m_sockets_pipes.PopFront();\n+\n+    uint8_t buf[1024];\n+\n+    LIMITED_WHILE(fuzzed_data_provider.remaining_bytes() > 0, 100) {\n+\n+        const std::string message_type{\n+            LIMIT_TO_MESSAGE_TYPE.empty() ?\n+                fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE) :\n+                LIMIT_TO_MESSAGE_TYPE};\n+\n+        CDataStream payload{",
      "path": "src/test/fuzz/process_message_e2e.cpp",
      "position": null,
      "original_position": 86,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "4c867de996f58655aec3911f45367eb31865fb4d",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could this use `DataStream`, or drop it completely?",
      "created_at": "2023-06-06T10:54:24Z",
      "updated_at": "2023-06-06T10:55:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1219414855",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1219414855"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1219560287",
      "pull_request_review_id": 1465085877,
      "id": 1219560287,
      "node_id": "PRRC_kwDOABII585IsQNf",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <primitives/transaction.h>\n+#include <protocol.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/net.h>\n+#include <test/util/mining.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/chaintype.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+\n+#include <atomic>\n+#include <cstdlib>\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <string_view>\n+#include <vector>\n+\n+// There are two sets of tests:\n+// - direct: pass the fuzzed message directly to PeerManager::ProcessMessage() (fuzz/process_message.cpp)\n+// - e2e: send the fuzzed message to a mocked socket which is read from Connman\n+//   and processed by PeerManager (like it is happening in the \"real world\") (fuzz/process_message_e2e.cpp)\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+std::string_view LIMIT_TO_MESSAGE_TYPE{};\n+} // namespace\n+\n+void initialize_process_message_e2e()\n+{\n+    if (const auto val{std::getenv(\"LIMIT_TO_MESSAGE_TYPE\")}) {\n+        LIMIT_TO_MESSAGE_TYPE = val;\n+        Assert(std::count(getAllNetMessageTypes().begin(), getAllNetMessageTypes().end(), LIMIT_TO_MESSAGE_TYPE)); // Unknown message type passed\n+    }\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>(\n+            /*chain_type=*/ChainType::REGTEST,\n+            /*extra_args=*/{\"-txreconciliation\"});\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+FUZZ_TARGET_INIT(process_message_e2e, initialize_process_message_e2e)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    SetMockTime(GetMockTime() + std::chrono::minutes{fuzzed_data_provider.ConsumeIntegral<uint8_t>()});\n+\n+    g_setup->m_node.connman->OpenNetworkConnection(\n+        CAddress{}, false, nullptr, \"1.2.3.4:8333\", ConnectionType::OUTBOUND_FULL_RELAY);\n+\n+    auto pipes = g_setup->m_sockets_pipes.PopFront();\n+\n+    uint8_t buf[1024];\n+\n+    LIMITED_WHILE(fuzzed_data_provider.remaining_bytes() > 0, 100) {\n+\n+        const std::string message_type{\n+            LIMIT_TO_MESSAGE_TYPE.empty() ?\n+                fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE) :\n+                LIMIT_TO_MESSAGE_TYPE};",
      "path": "src/test/fuzz/process_message_e2e.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "4c867de996f58655aec3911f45367eb31865fb4d",
      "in_reply_to_id": 1219413577,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Are you suggesting to replace it with this:\r\n\r\n```cpp\r\n        const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE)};\r\n        if (!LIMIT_TO_MESSAGE_TYPE.empty() && random_message_type != LIMIT_TO_MESSAGE_TYPE) { \r\n            continue;\r\n        } \r\n```",
      "created_at": "2023-06-06T12:31:32Z",
      "updated_at": "2023-06-06T12:31:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1219560287",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1219560287"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1219568001",
      "pull_request_review_id": 1465095909,
      "id": 1219568001,
      "node_id": "PRRC_kwDOABII585IsSGB",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <primitives/transaction.h>\n+#include <protocol.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/net.h>\n+#include <test/util/mining.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/chaintype.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+\n+#include <atomic>\n+#include <cstdlib>\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <string_view>\n+#include <vector>\n+\n+// There are two sets of tests:\n+// - direct: pass the fuzzed message directly to PeerManager::ProcessMessage() (fuzz/process_message.cpp)\n+// - e2e: send the fuzzed message to a mocked socket which is read from Connman\n+//   and processed by PeerManager (like it is happening in the \"real world\") (fuzz/process_message_e2e.cpp)\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+std::string_view LIMIT_TO_MESSAGE_TYPE{};\n+} // namespace\n+\n+void initialize_process_message_e2e()\n+{\n+    if (const auto val{std::getenv(\"LIMIT_TO_MESSAGE_TYPE\")}) {\n+        LIMIT_TO_MESSAGE_TYPE = val;\n+        Assert(std::count(getAllNetMessageTypes().begin(), getAllNetMessageTypes().end(), LIMIT_TO_MESSAGE_TYPE)); // Unknown message type passed\n+    }\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>(\n+            /*chain_type=*/ChainType::REGTEST,\n+            /*extra_args=*/{\"-txreconciliation\"});\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+FUZZ_TARGET_INIT(process_message_e2e, initialize_process_message_e2e)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    SetMockTime(GetMockTime() + std::chrono::minutes{fuzzed_data_provider.ConsumeIntegral<uint8_t>()});\n+\n+    g_setup->m_node.connman->OpenNetworkConnection(\n+        CAddress{}, false, nullptr, \"1.2.3.4:8333\", ConnectionType::OUTBOUND_FULL_RELAY);\n+\n+    auto pipes = g_setup->m_sockets_pipes.PopFront();\n+\n+    uint8_t buf[1024];\n+\n+    LIMITED_WHILE(fuzzed_data_provider.remaining_bytes() > 0, 100) {\n+\n+        const std::string message_type{\n+            LIMIT_TO_MESSAGE_TYPE.empty() ?\n+                fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE) :\n+                LIMIT_TO_MESSAGE_TYPE};\n+\n+        CDataStream payload{",
      "path": "src/test/fuzz/process_message_e2e.cpp",
      "position": null,
      "original_position": 86,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "4c867de996f58655aec3911f45367eb31865fb4d",
      "in_reply_to_id": 1219414855,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point, dropped it!",
      "created_at": "2023-06-06T12:36:45Z",
      "updated_at": "2023-06-06T12:36:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1219568001",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1219568001"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1222595950",
      "pull_request_review_id": 1469229466,
      "id": 1222595950,
      "node_id": "PRRC_kwDOABII585I31Vu",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <primitives/transaction.h>\n+#include <protocol.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/net.h>\n+#include <test/util/mining.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/chaintype.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+\n+#include <atomic>\n+#include <cstdlib>\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <string_view>\n+#include <vector>\n+\n+// There are two sets of tests:\n+// - direct: pass the fuzzed message directly to PeerManager::ProcessMessage() (fuzz/process_message.cpp)\n+// - e2e: send the fuzzed message to a mocked socket which is read from Connman\n+//   and processed by PeerManager (like it is happening in the \"real world\") (fuzz/process_message_e2e.cpp)\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+std::string_view LIMIT_TO_MESSAGE_TYPE{};\n+} // namespace\n+\n+void initialize_process_message_e2e()\n+{\n+    if (const auto val{std::getenv(\"LIMIT_TO_MESSAGE_TYPE\")}) {\n+        LIMIT_TO_MESSAGE_TYPE = val;\n+        Assert(std::count(getAllNetMessageTypes().begin(), getAllNetMessageTypes().end(), LIMIT_TO_MESSAGE_TYPE)); // Unknown message type passed\n+    }\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>(\n+            /*chain_type=*/ChainType::REGTEST,\n+            /*extra_args=*/{\"-txreconciliation\"});\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+FUZZ_TARGET_INIT(process_message_e2e, initialize_process_message_e2e)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    SetMockTime(GetMockTime() + std::chrono::minutes{fuzzed_data_provider.ConsumeIntegral<uint8_t>()});\n+\n+    g_setup->m_node.connman->OpenNetworkConnection(\n+        CAddress{}, false, nullptr, \"1.2.3.4:8333\", ConnectionType::OUTBOUND_FULL_RELAY);\n+\n+    auto pipes = g_setup->m_sockets_pipes.PopFront();\n+\n+    uint8_t buf[1024];\n+\n+    LIMITED_WHILE(fuzzed_data_provider.remaining_bytes() > 0, 100) {\n+\n+        const std::string message_type{\n+            LIMIT_TO_MESSAGE_TYPE.empty() ?\n+                fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE) :\n+                LIMIT_TO_MESSAGE_TYPE};",
      "path": "src/test/fuzz/process_message_e2e.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "4c867de996f58655aec3911f45367eb31865fb4d",
      "in_reply_to_id": 1219413577,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I would address your suggestion, but I am not sure I understand it. Is the above what you meant or did I get it wrong?",
      "created_at": "2023-06-08T07:50:39Z",
      "updated_at": "2023-06-08T07:50:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1222595950",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1222595950"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1222639887",
      "pull_request_review_id": 1469300420,
      "id": 1222639887,
      "node_id": "PRRC_kwDOABII585I4AEP",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <primitives/transaction.h>\n+#include <protocol.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/net.h>\n+#include <test/util/mining.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/chaintype.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+\n+#include <atomic>\n+#include <cstdlib>\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <string_view>\n+#include <vector>\n+\n+// There are two sets of tests:\n+// - direct: pass the fuzzed message directly to PeerManager::ProcessMessage() (fuzz/process_message.cpp)\n+// - e2e: send the fuzzed message to a mocked socket which is read from Connman\n+//   and processed by PeerManager (like it is happening in the \"real world\") (fuzz/process_message_e2e.cpp)\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+std::string_view LIMIT_TO_MESSAGE_TYPE{};\n+} // namespace\n+\n+void initialize_process_message_e2e()\n+{\n+    if (const auto val{std::getenv(\"LIMIT_TO_MESSAGE_TYPE\")}) {\n+        LIMIT_TO_MESSAGE_TYPE = val;\n+        Assert(std::count(getAllNetMessageTypes().begin(), getAllNetMessageTypes().end(), LIMIT_TO_MESSAGE_TYPE)); // Unknown message type passed\n+    }\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>(\n+            /*chain_type=*/ChainType::REGTEST,\n+            /*extra_args=*/{\"-txreconciliation\"});\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+FUZZ_TARGET_INIT(process_message_e2e, initialize_process_message_e2e)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    SetMockTime(GetMockTime() + std::chrono::minutes{fuzzed_data_provider.ConsumeIntegral<uint8_t>()});\n+\n+    g_setup->m_node.connman->OpenNetworkConnection(\n+        CAddress{}, false, nullptr, \"1.2.3.4:8333\", ConnectionType::OUTBOUND_FULL_RELAY);\n+\n+    auto pipes = g_setup->m_sockets_pipes.PopFront();\n+\n+    uint8_t buf[1024];\n+\n+    LIMITED_WHILE(fuzzed_data_provider.remaining_bytes() > 0, 100) {\n+\n+        const std::string message_type{\n+            LIMIT_TO_MESSAGE_TYPE.empty() ?\n+                fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE) :\n+                LIMIT_TO_MESSAGE_TYPE};",
      "path": "src/test/fuzz/process_message_e2e.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "4c867de996f58655aec3911f45367eb31865fb4d",
      "in_reply_to_id": 1219413577,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, I think you can just copy paste it from the other test, no?",
      "created_at": "2023-06-08T08:24:53Z",
      "updated_at": "2023-06-08T08:24:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1222639887",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1222639887"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1222705608",
      "pull_request_review_id": 1469401463,
      "id": 1222705608,
      "node_id": "PRRC_kwDOABII585I4QHI",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <primitives/transaction.h>\n+#include <protocol.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/net.h>\n+#include <test/util/mining.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/chaintype.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+\n+#include <atomic>\n+#include <cstdlib>\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <string_view>\n+#include <vector>\n+\n+// There are two sets of tests:\n+// - direct: pass the fuzzed message directly to PeerManager::ProcessMessage() (fuzz/process_message.cpp)\n+// - e2e: send the fuzzed message to a mocked socket which is read from Connman\n+//   and processed by PeerManager (like it is happening in the \"real world\") (fuzz/process_message_e2e.cpp)\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+std::string_view LIMIT_TO_MESSAGE_TYPE{};\n+} // namespace\n+\n+void initialize_process_message_e2e()\n+{\n+    if (const auto val{std::getenv(\"LIMIT_TO_MESSAGE_TYPE\")}) {\n+        LIMIT_TO_MESSAGE_TYPE = val;\n+        Assert(std::count(getAllNetMessageTypes().begin(), getAllNetMessageTypes().end(), LIMIT_TO_MESSAGE_TYPE)); // Unknown message type passed\n+    }\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>(\n+            /*chain_type=*/ChainType::REGTEST,\n+            /*extra_args=*/{\"-txreconciliation\"});\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+FUZZ_TARGET_INIT(process_message_e2e, initialize_process_message_e2e)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    SetMockTime(GetMockTime() + std::chrono::minutes{fuzzed_data_provider.ConsumeIntegral<uint8_t>()});\n+\n+    g_setup->m_node.connman->OpenNetworkConnection(\n+        CAddress{}, false, nullptr, \"1.2.3.4:8333\", ConnectionType::OUTBOUND_FULL_RELAY);\n+\n+    auto pipes = g_setup->m_sockets_pipes.PopFront();\n+\n+    uint8_t buf[1024];\n+\n+    LIMITED_WHILE(fuzzed_data_provider.remaining_bytes() > 0, 100) {\n+\n+        const std::string message_type{\n+            LIMIT_TO_MESSAGE_TYPE.empty() ?\n+                fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE) :\n+                LIMIT_TO_MESSAGE_TYPE};",
      "path": "src/test/fuzz/process_message_e2e.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "4c867de996f58655aec3911f45367eb31865fb4d",
      "in_reply_to_id": 1219413577,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done. Now it is the same as in `process_message.cpp`.\r\n\r\nIt seems inefficient to me - if `LIMIT_TO_MESSAGE_TYPE` is set to e.g. `filterclear` the fuzzer has to brute force all possible strings with length 11 to find it? That is 2<sup>88</sup> possibilities.",
      "created_at": "2023-06-08T09:22:22Z",
      "updated_at": "2023-06-08T09:22:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1222705608",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1222705608"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1222713396",
      "pull_request_review_id": 1469413390,
      "id": 1222713396,
      "node_id": "PRRC_kwDOABII585I4SA0",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <primitives/transaction.h>\n+#include <protocol.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/net.h>\n+#include <test/util/mining.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/chaintype.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+\n+#include <atomic>\n+#include <cstdlib>\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <string_view>\n+#include <vector>\n+\n+// There are two sets of tests:\n+// - direct: pass the fuzzed message directly to PeerManager::ProcessMessage() (fuzz/process_message.cpp)\n+// - e2e: send the fuzzed message to a mocked socket which is read from Connman\n+//   and processed by PeerManager (like it is happening in the \"real world\") (fuzz/process_message_e2e.cpp)\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+std::string_view LIMIT_TO_MESSAGE_TYPE{};\n+} // namespace\n+\n+void initialize_process_message_e2e()\n+{\n+    if (const auto val{std::getenv(\"LIMIT_TO_MESSAGE_TYPE\")}) {\n+        LIMIT_TO_MESSAGE_TYPE = val;\n+        Assert(std::count(getAllNetMessageTypes().begin(), getAllNetMessageTypes().end(), LIMIT_TO_MESSAGE_TYPE)); // Unknown message type passed\n+    }\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>(\n+            /*chain_type=*/ChainType::REGTEST,\n+            /*extra_args=*/{\"-txreconciliation\"});\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+FUZZ_TARGET_INIT(process_message_e2e, initialize_process_message_e2e)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    SetMockTime(GetMockTime() + std::chrono::minutes{fuzzed_data_provider.ConsumeIntegral<uint8_t>()});\n+\n+    g_setup->m_node.connman->OpenNetworkConnection(\n+        CAddress{}, false, nullptr, \"1.2.3.4:8333\", ConnectionType::OUTBOUND_FULL_RELAY);\n+\n+    auto pipes = g_setup->m_sockets_pipes.PopFront();\n+\n+    uint8_t buf[1024];\n+\n+    LIMITED_WHILE(fuzzed_data_provider.remaining_bytes() > 0, 100) {\n+\n+        const std::string message_type{\n+            LIMIT_TO_MESSAGE_TYPE.empty() ?\n+                fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE) :\n+                LIMIT_TO_MESSAGE_TYPE};",
      "path": "src/test/fuzz/process_message_e2e.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "4c867de996f58655aec3911f45367eb31865fb4d",
      "in_reply_to_id": 1219413577,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "A modern fuzz engine will read the `LIMIT_TO_MESSAGE_TYPE` and inject it into the fuzz input, so it shouldn't take more than a few seconds to guess. In any case it shouldn't take 2^88 tries",
      "created_at": "2023-06-08T09:29:23Z",
      "updated_at": "2023-06-08T09:29:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1222713396",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1222713396"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1242396610",
      "pull_request_review_id": 1498853274,
      "id": 1242396610,
      "node_id": "PRRC_kwDOABII585KDXfC",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <primitives/transaction.h>\n+#include <protocol.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/net.h>\n+#include <test/util/mining.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/chaintype.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+\n+#include <atomic>\n+#include <cstdlib>\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <string_view>\n+#include <vector>\n+\n+// There are two sets of tests:\n+// - direct: pass the fuzzed message directly to PeerManager::ProcessMessage() (fuzz/process_message.cpp)\n+// - e2e: send the fuzzed message to a mocked socket which is read from Connman\n+//   and processed by PeerManager (like it is happening in the \"real world\") (fuzz/process_message_e2e.cpp)\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+std::string_view LIMIT_TO_MESSAGE_TYPE{};\n+} // namespace\n+\n+void initialize_process_message_e2e()\n+{\n+    if (const auto val{std::getenv(\"LIMIT_TO_MESSAGE_TYPE\")}) {\n+        LIMIT_TO_MESSAGE_TYPE = val;\n+        Assert(std::count(getAllNetMessageTypes().begin(), getAllNetMessageTypes().end(), LIMIT_TO_MESSAGE_TYPE)); // Unknown message type passed\n+    }\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>(\n+            /*chain_type=*/ChainType::REGTEST,\n+            /*extra_args=*/{\"-txreconciliation\"});\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+FUZZ_TARGET_INIT(process_message_e2e, initialize_process_message_e2e)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    SetMockTime(GetMockTime() + std::chrono::minutes{fuzzed_data_provider.ConsumeIntegral<uint8_t>()});\n+\n+    g_setup->m_node.connman->OpenNetworkConnection(\n+        CAddress{}, false, nullptr, \"1.2.3.4:8333\", ConnectionType::OUTBOUND_FULL_RELAY);\n+\n+    auto pipes = g_setup->m_sockets_pipes.PopFront();\n+\n+    uint8_t buf[1024];\n+\n+    LIMITED_WHILE(fuzzed_data_provider.remaining_bytes() > 0, 100) {\n+\n+        const std::string message_type{\n+            LIMIT_TO_MESSAGE_TYPE.empty() ?\n+                fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE) :\n+                LIMIT_TO_MESSAGE_TYPE};",
      "path": "src/test/fuzz/process_message_e2e.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "4c867de996f58655aec3911f45367eb31865fb4d",
      "in_reply_to_id": 1219413577,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Marking this as resolved, let me know if you think it is not.",
      "created_at": "2023-06-26T15:43:32Z",
      "updated_at": "2023-06-26T15:43:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1242396610",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1242396610"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1244442031",
      "pull_request_review_id": 1501951235,
      "id": 1244442031,
      "node_id": "PRRC_kwDOABII585KLK2v",
      "diff_hunk": "@@ -13,6 +13,7 @@\n #include <pubkey.h>\n #include <random.h>\n #include <stdexcept>\n+#include <test/util/net.h>",
      "path": "src/test/util/setup_common.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "4557cc336fd8eb321b0db024b70213f46017071c",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Rather than including everything, it might be good to have a separate compilation unit for code that needs to be in `util/setup_common`, versus the current `util/net` code that is only needed for a handful of the tests.",
      "created_at": "2023-06-27T22:38:40Z",
      "updated_at": "2023-06-27T22:59:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1244442031",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1244442031"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1244454225",
      "pull_request_review_id": 1501951235,
      "id": 1244454225,
      "node_id": "PRRC_kwDOABII585KLN1R",
      "diff_hunk": "@@ -28,15 +28,15 @@ BOOST_AUTO_TEST_CASE(file)\n             \"] }\",\n         };\n         BOOST_REQUIRE(WriteBinaryFile(banlist_path + \".json\", entries_write));\n-        {\n-            // The invalid entries will be dropped, but the valid one remains\n-            ASSERT_DEBUG_LOG(\"Dropping entry with unparseable address or subnet (aaaaaaaaa) from ban list\");\n-            ASSERT_DEBUG_LOG(\"Dropping entry with unknown version (2) from ban list\");\n-            BanMan banman{banlist_path, /*client_interface=*/nullptr, /*default_ban_time=*/0};\n-            banmap_t entries_read;\n-            banman.GetBanned(entries_read);\n-            BOOST_CHECK_EQUAL(entries_read.size(), 1);\n-        }\n+        // The invalid entries will be dropped, but the valid one remains\n+        DebugLogHelper debug_log1{\"Dropping entry with unparseable address or subnet (aaaaaaaaa) from ban list\"};\n+        DebugLogHelper debug_log2{\"Dropping entry with unknown version (2) from ban list\"};",
      "path": "src/test/banman_tests.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "4557cc336fd8eb321b0db024b70213f46017071c",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "d2f46c7 Verified the behavior improvement in this commit by changing this line to make it fail.\r\n\r\n<details><summary>master</summary><p>\r\n\r\n```bash\r\n$ ./src/test/test_bitcoin -t banman_tests       \r\nRunning 1 test case...\r\nlibc++abi: terminating due to uncaught exception of type std::runtime_error: 'Dropping entry with unknown version (2) rom ban list' not found in debug log\r\n\r\n******** errors disabling the alternate stack:\r\n\t#error:22\r\n\tInvalid argument\r\nunknown location:0: fatal error: in \"banman_tests/file\": signal: SIGABRT (application abort requested)\r\ntest/banman_tests.cpp:38: last checkpoint\r\n\r\n*** 1 failure is detected in the test module \"Bitcoin Core Test Suite\"\r\n```\r\n</p></details>\r\n\r\n<details><summary>this commit</summary><p>\r\n\r\n```bash\r\n$ ./src/test/test_bitcoin -t banman_tests\r\nRunning 1 test case...\r\nunknown location:0: fatal error: in \"banman_tests/file\": std::runtime_error: 'Dropping entry with unknown version (2) rom ban list' not found in debug log\r\n\r\ntest/banman_tests.cpp:37: last checkpoint\r\n\r\n*** 1 failure is detected in the test module \"Bitcoin Core Test Suite\"\r\n```\r\n</p></details>\r\n",
      "created_at": "2023-06-27T22:56:24Z",
      "updated_at": "2023-06-27T23:01:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1244454225",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1244454225"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1244795380",
      "pull_request_review_id": 1502446003,
      "id": 1244795380,
      "node_id": "PRRC_kwDOABII585KMhH0",
      "diff_hunk": "@@ -13,6 +13,7 @@\n #include <pubkey.h>\n #include <random.h>\n #include <stdexcept>\n+#include <test/util/net.h>",
      "path": "src/test/util/setup_common.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "4557cc336fd8eb321b0db024b70213f46017071c",
      "in_reply_to_id": 1244442031,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I tried extracting the mocked sockets out from `test/util/net.h` into a separate `test/util/mocked_sockets.h` and then compared the re-compilation time if that is modified (e.g. something in `DynSock` declaration is changed). In both cases recompilation takes ~28 seconds, so it makes no difference (in practice).\r\n\r\nHere is the change (on top of this PR):\r\n\r\n<details>\r\n<summary>mocked_sockets.h</summary>\r\n\r\n```diff\r\ncommit 398a2d5717b6ef6760e48eac92aa92127157a67a (HEAD -> e2e_tests)\r\nParent: 4557cc336fd8eb321b0db024b70213f46017071c\r\nAuthor:     Vasil Dimov <vd@FreeBSD.org>\r\nAuthorDate: Wed Jun 28 09:10:41 2023 +0200\r\nCommit:     Vasil Dimov <vd@FreeBSD.org>\r\nCommitDate: Wed Jun 28 09:10:41 2023 +0200\r\ngpg: Signature made Wed Jun 28 09:11:03 2023 CEST\r\ngpg:                using RSA key E64D8D45614DB07545D9CCC154DF06F64B55CBBF\r\ngpg: Good signature from \"Vasil Dimov <vd@myforest.net>\" [ultimate]\r\ngpg:                 aka \"Vasil Dimov <vd@FreeBSD.org>\" [ultimate]\r\ngpg:                 aka \"Vasil Dimov <vasild@gmail.com>\" [ultimate]\r\n\r\n\r\n    wip: mocked_sockets.h\r\n\r\ndiff --git a/src/test/util/net.h b/src/test/util/mocked_sockets.h\r\nsimilarity index 67%\r\ncopy from src/test/util/net.h\r\ncopy to src/test/util/mocked_sockets.h\r\nindex b5ab7699f0..cdf6cb5d96 100644\r\n--- a/src/test/util/net.h\r\n+++ b/src/test/util/mocked_sockets.h\r\n@@ -1,111 +1,27 @@\r\n-// Copyright (c) 2020-2022 The Bitcoin Core developers\r\n+// Copyright (c) 2023-2023 The Bitcoin Core developers\r\n // Distributed under the MIT software license, see the accompanying\r\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n \r\n-#ifndef BITCOIN_TEST_UTIL_NET_H\r\n-#define BITCOIN_TEST_UTIL_NET_H\r\n+#ifndef BITCOIN_TEST_UTIL_MOCKED_SOCKETS_H\r\n+#define BITCOIN_TEST_UTIL_MOCKED_SOCKETS_H\r\n \r\n #include <compat/compat.h>\r\n #include <net.h>\r\n-#include <netaddress.h>\r\n #include <netmessagemaker.h>\r\n-#include <node/eviction.h>\r\n-#include <util/sock.h>\r\n #include <sync.h>\r\n+#include <util/sock.h>\r\n+#include <version.h>\r\n \r\n-#include <array>\r\n-#include <cassert>\r\n #include <chrono>\r\n-#include <condition_variable>\r\n-#include <cstring>\r\n+#include <cstdint>\r\n #include <memory>\r\n #include <optional>\r\n #include <string>\r\n #include <vector>\r\n \r\n-struct ConnmanTestMsg : public CConnman {\r\n-    using CConnman::CConnman;\r\n-\r\n-    void SetPeerConnectTimeout(std::chrono::seconds timeout)\r\n-    {\r\n-        m_peer_connect_timeout = timeout;\r\n-    }\r\n-\r\n-    void AddTestNode(CNode& node)\r\n-    {\r\n-        LOCK(m_nodes_mutex);\r\n-        m_nodes.push_back(&node);\r\n-    }\r\n-    void ClearTestNodes()\r\n-    {\r\n-        LOCK(m_nodes_mutex);\r\n-        for (CNode* node : m_nodes) {\r\n-            delete node;\r\n-        }\r\n-        m_nodes.clear();\r\n-    }\r\n-\r\n-    void Handshake(CNode& node,\r\n-                   bool successfully_connected,\r\n-                   ServiceFlags remote_services,\r\n-                   ServiceFlags local_services,\r\n-                   int32_t version,\r\n-                   bool relay_txs)\r\n-        EXCLUSIVE_LOCKS_REQUIRED(NetEventsInterface::g_msgproc_mutex);\r\n-\r\n-    void ProcessMessagesOnce(CNode& node) EXCLUSIVE_LOCKS_REQUIRED(NetEventsInterface::g_msgproc_mutex) { m_msgproc->ProcessMessages(&node, flagInterruptMsgProc); }\r\n-\r\n-    void NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const;\r\n-\r\n-    bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\r\n-};\r\n-\r\n-constexpr ServiceFlags ALL_SERVICE_FLAGS[]{\r\n-    NODE_NONE,\r\n-    NODE_NETWORK,\r\n-    NODE_BLOOM,\r\n-    NODE_WITNESS,\r\n-    NODE_COMPACT_FILTERS,\r\n-    NODE_NETWORK_LIMITED,\r\n-};\r\n-\r\n-constexpr NetPermissionFlags ALL_NET_PERMISSION_FLAGS[]{\r\n-    NetPermissionFlags::None,\r\n-    NetPermissionFlags::BloomFilter,\r\n-    NetPermissionFlags::Relay,\r\n-    NetPermissionFlags::ForceRelay,\r\n-    NetPermissionFlags::NoBan,\r\n-    NetPermissionFlags::Mempool,\r\n-    NetPermissionFlags::Addr,\r\n-    NetPermissionFlags::Download,\r\n-    NetPermissionFlags::Implicit,\r\n-    NetPermissionFlags::All,\r\n-};\r\n-\r\n-constexpr ConnectionType ALL_CONNECTION_TYPES[]{\r\n-    ConnectionType::INBOUND,\r\n-    ConnectionType::OUTBOUND_FULL_RELAY,\r\n-    ConnectionType::MANUAL,\r\n-    ConnectionType::FEELER,\r\n-    ConnectionType::BLOCK_RELAY,\r\n-    ConnectionType::ADDR_FETCH,\r\n-};\r\n-\r\n-constexpr auto ALL_NETWORKS = std::array{\r\n-    Network::NET_UNROUTABLE,\r\n-    Network::NET_IPV4,\r\n-    Network::NET_IPV6,\r\n-    Network::NET_ONION,\r\n-    Network::NET_I2P,\r\n-    Network::NET_CJDNS,\r\n-    Network::NET_INTERNAL,\r\n-};\r\n-\r\n-std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(int n_candidates, FastRandomContext& random_context);\r\n-\r\n /**\r\n  * A mocked Sock alternative that succeeds on all operations.\r\n  * Returns infinite amount of 0x0 bytes on reads.\r\n  */\r\n class ZeroSock : public Sock\r\n {\r\n@@ -257,7 +173,8 @@ void DynSock::Pipe::PushNetMsg(const std::string& type, Args&&... payload)\r\n     LOCK(m_mutex);\r\n     m_data.insert(m_data.end(), header.begin(), header.end());\r\n     m_data.insert(m_data.end(), msg.data.begin(), msg.data.end());\r\n     m_cond.notify_all();\r\n }\r\n \r\n-#endif // BITCOIN_TEST_UTIL_NET_H\r\n+#endif // BITCOIN_TEST_UTIL_MOCKED_SOCKETS_H\r\n+\r\ndiff --git a/src/test/util/net.cpp b/src/test/util/net.cpp\r\nindex ac866d7c89..1acdbf7061 100644\r\n--- a/src/test/util/net.cpp\r\n+++ b/src/test/util/net.cpp\r\n@@ -8,12 +8,13 @@\r\n #include <node/eviction.h>\r\n #include <net.h>\r\n #include <net_processing.h>\r\n #include <netmessagemaker.h>\r\n #include <span.h>\r\n #include <sync.h>\r\n+#include <test/util/mocked_sockets.h>\r\n \r\n #include <chrono>\r\n #include <optional>\r\n #include <vector>\r\n \r\n void ConnmanTestMsg::Handshake(CNode& node,\r\ndiff --git a/src/test/util/net.h b/src/test/util/net.h\r\nindex b5ab7699f0..7bad1ee4af 100644\r\n--- a/src/test/util/net.h\r\n+++ b/src/test/util/net.h\r\n@@ -100,164 +100,7 @@ constexpr auto ALL_NETWORKS = std::array{\r\n     Network::NET_CJDNS,\r\n     Network::NET_INTERNAL,\r\n };\r\n \r\n std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(int n_candidates, FastRandomContext& random_context);\r\n \r\n-/**\r\n- * A mocked Sock alternative that succeeds on all operations.\r\n- * Returns infinite amount of 0x0 bytes on reads.\r\n- */\r\n-class ZeroSock : public Sock\r\n-{\r\n-public:\r\n-    ZeroSock();\r\n-\r\n-    ~ZeroSock() override;\r\n-\r\n-    ssize_t Send(const void*, size_t len, int) const override;\r\n-\r\n-    ssize_t Recv(void* buf, size_t len, int flags) const override;\r\n-\r\n-    int Connect(const sockaddr*, socklen_t) const override;\r\n-\r\n-    int Bind(const sockaddr*, socklen_t) const override;\r\n-\r\n-    int Listen(int) const override;\r\n-\r\n-    std::unique_ptr<Sock> Accept(sockaddr* addr, socklen_t* addr_len) const override;\r\n-\r\n-    int GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const override;\r\n-\r\n-    int SetSockOpt(int, int, const void*, socklen_t) const override;\r\n-\r\n-    int GetSockName(sockaddr* name, socklen_t* name_len) const override;\r\n-\r\n-    bool SetNonBlocking() const override;\r\n-\r\n-    bool IsSelectable() const override;\r\n-\r\n-    bool Wait(std::chrono::milliseconds timeout,\r\n-              Event requested,\r\n-              Event* occurred = nullptr) const override;\r\n-\r\n-    bool WaitMany(std::chrono::milliseconds timeout, EventsPerSock& events_per_sock) const override;\r\n-\r\n-private:\r\n-    ZeroSock& operator=(Sock&& other) override;\r\n-};\r\n-\r\n-/**\r\n- * A mocked Sock alternative that returns a statically contained data upon read and succeeds\r\n- * and ignores all writes. The data to be returned is given to the constructor and when it is\r\n- * exhausted an EOF is returned by further reads.\r\n- */\r\n-class StaticContentsSock : public ZeroSock\r\n-{\r\n-public:\r\n-    explicit StaticContentsSock(const std::string& contents);\r\n-\r\n-    /**\r\n-     * Return parts of the contents that was provided at construction until it is exhausted\r\n-     * and then return 0 (EOF).\r\n-     */\r\n-    ssize_t Recv(void* buf, size_t len, int flags) const override;\r\n-\r\n-private:\r\n-    StaticContentsSock& operator=(Sock&& other) override;\r\n-\r\n-    const std::string m_contents;\r\n-    mutable size_t m_consumed{0};\r\n-};\r\n-\r\n-/**\r\n- * A mocked Sock alternative that allows providing the data to be returned by Recv()\r\n- * and inspecting the data that has been supplied to Send().\r\n- */\r\n-class DynSock : public ZeroSock\r\n-{\r\n-public:\r\n-    /**\r\n-     * Unidirectional bytes or CNetMessage queue (FIFO).\r\n-     */\r\n-    class Pipe\r\n-    {\r\n-    public:\r\n-        /**\r\n-         * Get bytes and remove them from the pipe.\r\n-         * @param[in] buf Destination to write bytes to.\r\n-         * @param[in] len Write up to this number of bytes.\r\n-         * @param[in] flags Same as the flags of `recv(2)`. Just `MSG_PEEK` is honored.\r\n-         * @return The number of bytes written to `buf`. `0` if `Eof()` has been called.\r\n-         * If no bytes are available then `-1` is returned and `errno` is set to `EAGAIN`.\r\n-         */\r\n-        ssize_t GetBytes(void* buf, size_t len, int flags = 0) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\r\n-\r\n-        /**\r\n-         * Deserialize a `CNetMessage` and remove it from the pipe.\r\n-         * If not enough bytes are available then the function will wait. If parsing fails\r\n-         * or EOF is signaled to the pipe, then `std::nullopt` is returned.\r\n-         */\r\n-        std::optional<CNetMessage> GetNetMsg() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\r\n-\r\n-        /**\r\n-         * Push bytes to the pipe.\r\n-         */\r\n-        void PushBytes(const void* buf, size_t len) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\r\n-\r\n-        /**\r\n-         * Construct and push CNetMessage to the pipe.\r\n-         */\r\n-        template <typename... Args>\r\n-        void PushNetMsg(const std::string& type, Args&&... payload) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\r\n-\r\n-        /**\r\n-         * Signal end-of-file on the receiving end (`GetBytes()` or `GetNetMsg()`).\r\n-         */\r\n-        void Eof() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\r\n-\r\n-    private:\r\n-        Mutex m_mutex;\r\n-        std::condition_variable m_cond;\r\n-        std::vector<uint8_t> m_data GUARDED_BY(m_mutex);\r\n-        bool m_eof GUARDED_BY(m_mutex){false};\r\n-    };\r\n-\r\n-    struct Pipes {\r\n-        Pipe recv;\r\n-        Pipe send;\r\n-    };\r\n-\r\n-    explicit DynSock(std::shared_ptr<Pipes> pipes);\r\n-\r\n-    ~DynSock();\r\n-\r\n-    ssize_t Recv(void* buf, size_t len, int flags) const override;\r\n-\r\n-    ssize_t Send(const void* buf, size_t len, int) const override;\r\n-\r\n-    bool Wait(std::chrono::milliseconds timeout,\r\n-              Event requested,\r\n-              Event* occurred = nullptr) const override;\r\n-\r\n-    bool WaitMany(std::chrono::milliseconds timeout, EventsPerSock& events_per_sock) const override;\r\n-\r\n-private:\r\n-    DynSock& operator=(Sock&&) override;\r\n-\r\n-    std::shared_ptr<Pipes> m_pipes;\r\n-};\r\n-\r\n-template <typename... Args>\r\n-void DynSock::Pipe::PushNetMsg(const std::string& type, Args&&... payload)\r\n-{\r\n-    auto msg = CNetMsgMaker(INIT_PROTO_VERSION).Make(type, std::forward<Args>(payload)...);\r\n-    std::vector<unsigned char> header;\r\n-    V1TransportSerializer().prepareForTransport(msg, header);\r\n-\r\n-    LOCK(m_mutex);\r\n-    m_data.insert(m_data.end(), header.begin(), header.end());\r\n-    m_data.insert(m_data.end(), msg.data.begin(), msg.data.end());\r\n-    m_cond.notify_all();\r\n-}\r\n-\r\n #endif // BITCOIN_TEST_UTIL_NET_H\r\ndiff --git a/src/test/util/setup_common.h b/src/test/util/setup_common.h\r\nindex d3137fa69e..1daac4a57c 100644\r\n--- a/src/test/util/setup_common.h\r\n+++ b/src/test/util/setup_common.h\r\n@@ -10,13 +10,13 @@\r\n #include <node/caches.h>\r\n #include <node/context.h> // IWYU pragma: export\r\n #include <primitives/transaction.h>\r\n #include <pubkey.h>\r\n #include <random.h>\r\n #include <stdexcept>\r\n-#include <test/util/net.h>\r\n+#include <test/util/mocked_sockets.h>\r\n #include <util/chaintype.h>\r\n #include <util/check.h>\r\n #include <util/fs.h>\r\n #include <util/string.h>\r\n #include <util/vector.h>\r\n \r\n```\r\n</details>\r\n\r\nOr did you mean something else?",
      "created_at": "2023-06-28T07:21:05Z",
      "updated_at": "2023-06-28T07:21:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1244795380",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1244795380"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1244823822",
      "pull_request_review_id": 1502487720,
      "id": 1244823822,
      "node_id": "PRRC_kwDOABII585KMoEO",
      "diff_hunk": "@@ -13,6 +13,7 @@\n #include <pubkey.h>\n #include <random.h>\n #include <stdexcept>\n+#include <test/util/net.h>",
      "path": "src/test/util/setup_common.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "4557cc336fd8eb321b0db024b70213f46017071c",
      "in_reply_to_id": 1244442031,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(No opinion on the change), just\r\n\r\n> In both cases recompilation takes ~28 seconds\r\n\r\nSeems odd that re-compilation of all tests takes only 28 seconds when `mocked_sockets.h` is modified, which is included in `setup_common.h`, which is included in all test files, no?",
      "created_at": "2023-06-28T07:47:18Z",
      "updated_at": "2023-06-28T07:47:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1244823822",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1244823822"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1244922368",
      "pull_request_review_id": 1502635198,
      "id": 1244922368,
      "node_id": "PRRC_kwDOABII585KNAIA",
      "diff_hunk": "@@ -13,6 +13,7 @@\n #include <pubkey.h>\n #include <random.h>\n #include <stdexcept>\n+#include <test/util/net.h>",
      "path": "src/test/util/setup_common.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "4557cc336fd8eb321b0db024b70213f46017071c",
      "in_reply_to_id": 1244442031,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Compiling everything from scratch (after `git clean -fdx`) takes about 1m 30sec (including autogen and ./configure which are single-threaded). The CPU on the machine is:\r\n\r\n> AMD Ryzen 9 7950X 16-Core Processor             (4491.70-MHz K8-class CPU)",
      "created_at": "2023-06-28T09:07:54Z",
      "updated_at": "2023-06-28T09:07:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1244922368",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1244922368"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1244937645",
      "pull_request_review_id": 1502658238,
      "id": 1244937645,
      "node_id": "PRRC_kwDOABII585KND2t",
      "diff_hunk": "@@ -13,6 +13,7 @@\n #include <pubkey.h>\n #include <random.h>\n #include <stdexcept>\n+#include <test/util/net.h>",
      "path": "src/test/util/setup_common.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "4557cc336fd8eb321b0db024b70213f46017071c",
      "in_reply_to_id": 1244442031,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For a useful benchmark, you'll have to measure the total CPU time, not the CPU time of just the translation unit that takes the longest.",
      "created_at": "2023-06-28T09:20:28Z",
      "updated_at": "2023-06-28T09:20:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1244937645",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1244937645"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1244969873",
      "pull_request_review_id": 1502708984,
      "id": 1244969873,
      "node_id": "PRRC_kwDOABII585KNLuR",
      "diff_hunk": "@@ -13,6 +13,7 @@\n #include <pubkey.h>\n #include <random.h>\n #include <stdexcept>\n+#include <test/util/net.h>",
      "path": "src/test/util/setup_common.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "4557cc336fd8eb321b0db024b70213f46017071c",
      "in_reply_to_id": 1244442031,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```\r\nPR:\r\nreal    0m29.623s\r\nuser    10m58.337s\r\nsys     0m51.187s\r\n\r\nreal    0m29.829s\r\nuser    10m58.359s\r\nsys     0m50.912s\r\n\r\nmocked_sockets.h:\r\nreal    0m29.528s\r\nuser    11m12.208s\r\nsys     1m0.406s\r\n\r\nreal    0m28.831s\r\nuser    10m45.615s\r\nsys     0m49.680s\r\n```\r\n\r\nI guess the \"total CPU time\" is real+sys from above. It all seems within noise. In both cases all tests would be recompiled, maybe I got @jonatack's comment wrong?",
      "created_at": "2023-06-28T09:46:13Z",
      "updated_at": "2023-06-28T09:46:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1244969873",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1244969873"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1244981230",
      "pull_request_review_id": 1502725013,
      "id": 1244981230,
      "node_id": "PRRC_kwDOABII585KNOfu",
      "diff_hunk": "@@ -13,6 +13,7 @@\n #include <pubkey.h>\n #include <random.h>\n #include <stdexcept>\n+#include <test/util/net.h>",
      "path": "src/test/util/setup_common.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "4557cc336fd8eb321b0db024b70213f46017071c",
      "in_reply_to_id": 1244442031,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I guess the \"total CPU time\" is real+sys from above\r\n\r\nuser+sys, but thanks for re-checking.",
      "created_at": "2023-06-28T09:54:48Z",
      "updated_at": "2023-06-28T09:54:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1244981230",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1244981230"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1245423693",
      "pull_request_review_id": 1503434375,
      "id": 1245423693,
      "node_id": "PRRC_kwDOABII585KO6hN",
      "diff_hunk": "@@ -13,6 +13,7 @@\n #include <pubkey.h>\n #include <random.h>\n #include <stdexcept>\n+#include <test/util/net.h>",
      "path": "src/test/util/setup_common.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "4557cc336fd8eb321b0db024b70213f46017071c",
      "in_reply_to_id": 1244442031,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for looking into it. I like the idea of keeping them separate and avoiding including unneeded code, in general and for building with slower, older CPUs. So 👍 for your diff in https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1244795380. Great work so far AFAICT. Will continue reviewing the remaining commits.",
      "created_at": "2023-06-28T15:42:30Z",
      "updated_at": "2023-06-28T15:42:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1245423693",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1245423693"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1245427231",
      "pull_request_review_id": 1503439862,
      "id": 1245427231,
      "node_id": "PRRC_kwDOABII585KO7Yf",
      "diff_hunk": "@@ -13,6 +13,7 @@\n #include <pubkey.h>\n #include <random.h>\n #include <stdexcept>\n+#include <test/util/net.h>",
      "path": "src/test/util/setup_common.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "4557cc336fd8eb321b0db024b70213f46017071c",
      "in_reply_to_id": 1244442031,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> In both cases all tests would be recompiled\r\n\r\nYes, but future changes to `util/net` would not require compiling all the tests.",
      "created_at": "2023-06-28T15:45:15Z",
      "updated_at": "2023-06-28T15:45:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1245427231",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1245427231"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1245592304",
      "pull_request_review_id": 1503702678,
      "id": 1245592304,
      "node_id": "PRRC_kwDOABII585KPjrw",
      "diff_hunk": "@@ -113,6 +113,7 @@ BITCOIN_TESTS =\\\n   test/net_peer_eviction_tests.cpp \\\n   test/net_tests.cpp \\\n   test/netbase_tests.cpp \\\n+  test/netmsg_tests.cpp \\",
      "path": "src/Makefile.test.include",
      "position": null,
      "original_position": 4,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "4557cc336fd8eb321b0db024b70213f46017071c",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "37cd2f5 naming: maybe call the test file `net_msg_tests.cpp` (and move this to line 113)",
      "created_at": "2023-06-28T18:15:03Z",
      "updated_at": "2023-06-28T19:13:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1245592304",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1245592304"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1245596582",
      "pull_request_review_id": 1503702678,
      "id": 1245596582,
      "node_id": "PRRC_kwDOABII585KPkum",
      "diff_hunk": "@@ -0,0 +1,183 @@\n+// Copyright (c) 2022-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <net_processing.h>\n+#include <netaddress.h>\n+#include <protocol.h>\n+#include <test/util/logging.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/time.h>\n+#include <version.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chrono>\n+#include <string>\n+#include <unordered_map>\n+\n+BOOST_FIXTURE_TEST_SUITE(netmsg_tests, NetTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(initial_messages_exchange)\n+{\n+    std::unordered_map<std::string, size_t> count_sent_messages;\n+    auto pipes = m_sockets_pipes.PopFront();\n+\n+    // Wait for all messages due to the initial handshake to be Send() to the socket.\n+    // The FEEFILTER is the last one, so quit when we get that.\n+    for (;;) {\n+        auto msg = pipes->send.GetNetMsg();\n+        if (msg.has_value()) {\n+            count_sent_messages[msg->m_type]++;",
      "path": "src/test/netmsg_tests.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "4557cc336fd8eb321b0db024b70213f46017071c",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "37cd2f5\r\n\r\n<details><summary>non-blocking suggestions: make pipes const, prefix iterator (per our developer notes, even if compilers optimize for it), reduce nesting</summary><p>\r\n\r\n```diff\r\n@@ -22,20 +22,15 @@ BOOST_FIXTURE_TEST_SUITE(netmsg_tests, NetTestingSetup)\r\n BOOST_AUTO_TEST_CASE(initial_messages_exchange)\r\n {\r\n     std::unordered_map<std::string, size_t> count_sent_messages;\r\n-    auto pipes = m_sockets_pipes.PopFront();\r\n+    const auto pipes{m_sockets_pipes.PopFront()};\r\n \r\n     // Wait for all messages due to the initial handshake to be Send() to the socket.\r\n     // The FEEFILTER is the last one, so quit when we get that.\r\n     for (;;) {\r\n         auto msg = pipes->send.GetNetMsg();\r\n-        if (msg.has_value()) {\r\n-            count_sent_messages[msg->m_type]++;\r\n-            if (msg->m_type == NetMsgType::FEEFILTER) {\r\n-                break;\r\n-            }\r\n-        } else {\r\n-            break;\r\n-        }\r\n+        if (!msg.has_value()) break;\r\n+        ++count_sent_messages[msg->m_type];\r\n+        if (msg->m_type == NetMsgType::FEEFILTER) break;\r\n     }\r\n \r\n     BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::VERSION], 1);\r\n@@ -51,7 +46,7 @@ BOOST_AUTO_TEST_CASE(initial_messages_exchange)\r\n \r\n BOOST_AUTO_TEST_CASE(addr)\r\n {\r\n-    auto pipes = m_sockets_pipes.PopFront();\r\n+    const auto pipes{m_sockets_pipes.PopFront()};\r\n     std::vector<CAddress> addresses{5};\r\n \r\n     DebugLogHelper debug_log{strprintf(\"Received addr: %u addresses\", addresses.size())};\r\n@@ -61,7 +56,7 @@ BOOST_AUTO_TEST_CASE(addr)\r\n \r\n BOOST_AUTO_TEST_CASE(getblocks)\r\n {\r\n-    auto pipes = m_sockets_pipes.PopFront();\r\n+    const auto pipes{m_sockets_pipes.PopFront()};\r\n     std::vector<uint256> hashes{5};\r\n     CBlockLocator block_locator{std::move(hashes)};\r\n     uint256 hash_stop;\r\n@@ -73,7 +68,7 @@ BOOST_AUTO_TEST_CASE(getblocks)\r\n \r\n BOOST_AUTO_TEST_CASE(ping)\r\n {\r\n-    auto pipes = m_sockets_pipes.PopFront();\r\n+    const auto pipes{m_sockets_pipes.PopFront()};\r\n \r\n     auto WaitForPingStats = [this](std::chrono::microseconds min,\r\n                                    std::chrono::microseconds last,\r\n@@ -173,7 +168,7 @@ BOOST_AUTO_TEST_CASE(ping)\r\n \r\n BOOST_AUTO_TEST_CASE(redundant_verack)\r\n {\r\n-    auto pipes = m_sockets_pipes.PopFront();\r\n+    const auto pipes{m_sockets_pipes.PopFront()};\r\n```\r\n</p></details>\r\n",
      "created_at": "2023-06-28T18:19:51Z",
      "updated_at": "2023-06-28T19:17:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1245596582",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1245596582"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1245633845",
      "pull_request_review_id": 1503702678,
      "id": 1245633845,
      "node_id": "PRRC_kwDOABII585KPt01",
      "diff_hunk": "@@ -0,0 +1,104 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <primitives/transaction.h>\n+#include <protocol.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/net.h>\n+#include <test/util/mining.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/chaintype.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+\n+#include <atomic>\n+#include <cstdlib>\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <string_view>\n+#include <vector>",
      "path": "src/test/fuzz/process_message_e2e.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "4557cc336fd8eb321b0db024b70213f46017071c",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://github.com/bitcoin/bitcoin/commit/37cd2f5a358f1d21c11efa8783be65570418c648 and 4557cc3 \r\n\r\nHave a look at https://cirrus-ci.com/task/4730456604672000 for IWYU suggestions on the new files.",
      "created_at": "2023-06-28T19:01:10Z",
      "updated_at": "2023-06-28T19:13:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1245633845",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1245633845"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1245634333",
      "pull_request_review_id": 1503702678,
      "id": 1245634333,
      "node_id": "PRRC_kwDOABII585KPt8d",
      "diff_hunk": "@@ -0,0 +1,104 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <primitives/transaction.h>\n+#include <protocol.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/net.h>\n+#include <test/util/mining.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/chaintype.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+\n+#include <atomic>\n+#include <cstdlib>\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <string_view>\n+#include <vector>\n+\n+// There are two sets of tests:\n+// - direct: pass the fuzzed message directly to PeerManager::ProcessMessage() (fuzz/process_message.cpp)\n+// - e2e: send the fuzzed message to a mocked socket which is read from Connman\n+//   and processed by PeerManager (like it is happening in the \"real world\") (fuzz/process_message_e2e.cpp)\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+std::string_view LIMIT_TO_MESSAGE_TYPE{};\n+} // namespace\n+\n+void initialize_process_message_e2e()\n+{\n+    if (const auto val{std::getenv(\"LIMIT_TO_MESSAGE_TYPE\")}) {\n+        LIMIT_TO_MESSAGE_TYPE = val;\n+        Assert(std::count(getAllNetMessageTypes().begin(), getAllNetMessageTypes().end(), LIMIT_TO_MESSAGE_TYPE)); // Unknown message type passed\n+    }\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>(\n+            /*chain_type=*/ChainType::REGTEST,\n+            /*extra_args=*/{\"-txreconciliation\"});\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {",
      "path": "src/test/fuzz/process_message_e2e.cpp",
      "position": null,
      "original_position": 60,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "4557cc336fd8eb321b0db024b70213f46017071c",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://github.com/bitcoin/bitcoin/commit/4557cc336fd8eb321b0db024b70213f46017071c\r\n\r\n<details><summary>non-blocking suggestions</summary><p>\r\n\r\n```diff\r\n@@ -57,7 +57,7 @@ void initialize_process_message_e2e()\r\n             /*chain_type=*/ChainType::REGTEST,\r\n             /*extra_args=*/{\"-txreconciliation\"});\r\n     g_setup = testing_setup.get();\r\n-    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\r\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\r\n         MineBlock(g_setup->m_node, CScript() << OP_TRUE);\r\n     }\r\n     SyncWithValidationInterfaceQueue();\r\n@@ -75,9 +75,9 @@ FUZZ_TARGET_INIT(process_message_e2e, initialize_process_message_e2e)\r\n     SetMockTime(GetMockTime() + std::chrono::minutes{fuzzed_data_provider.ConsumeIntegral<uint8_t>()});\r\n \r\n     g_setup->m_node.connman->OpenNetworkConnection(\r\n-        CAddress{}, false, nullptr, \"1.2.3.4:8333\", ConnectionType::OUTBOUND_FULL_RELAY);\r\n+        CAddress{}, /*fCountFailure=*/false, /*grantOutbound=*/nullptr, \"1.2.3.4:8333\", ConnectionType::OUTBOUND_FULL_RELAY);\r\n \r\n-    auto pipes = g_setup->m_sockets_pipes.PopFront();\r\n+    const auto pipes{g_setup->m_sockets_pipes.PopFront()};\r\n \r\n     uint8_t buf[1024];\r\n```\r\n</p></details>\r\n",
      "created_at": "2023-06-28T19:01:47Z",
      "updated_at": "2023-06-28T19:13:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1245634333",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1245634333"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246596157",
      "pull_request_review_id": 1505257347,
      "id": 1246596157,
      "node_id": "PRRC_kwDOABII585KTYw9",
      "diff_hunk": "@@ -13,6 +13,7 @@\n #include <pubkey.h>\n #include <random.h>\n #include <stdexcept>\n+#include <test/util/net.h>",
      "path": "src/test/util/setup_common.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "4557cc336fd8eb321b0db024b70213f46017071c",
      "in_reply_to_id": 1244442031,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Alright, so I got it the other way around. So the point is to avoid recompiling all tests if e.g. `ALL_NETWORKS` is changed (defined in `test/util/net.h`). That lowers the re-compilation from 28-29 sec to about 10 sec (if `src/test/util/net.h` is modified).\r\n\r\nI will leave it as it is because moving the code around would further increase the size of this PR which suffers from lack of interest from reviewers and I think expanding it may further turn people away.",
      "created_at": "2023-06-29T13:07:30Z",
      "updated_at": "2023-06-29T13:07:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1246596157",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246596157"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246596519",
      "pull_request_review_id": 1505257934,
      "id": 1246596519,
      "node_id": "PRRC_kwDOABII585KTY2n",
      "diff_hunk": "@@ -113,6 +113,7 @@ BITCOIN_TESTS =\\\n   test/net_peer_eviction_tests.cpp \\\n   test/net_tests.cpp \\\n   test/netbase_tests.cpp \\\n+  test/netmsg_tests.cpp \\",
      "path": "src/Makefile.test.include",
      "position": null,
      "original_position": 4,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "4557cc336fd8eb321b0db024b70213f46017071c",
      "in_reply_to_id": 1245592304,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2023-06-29T13:07:51Z",
      "updated_at": "2023-06-29T13:07:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1246596519",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246596519"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246596786",
      "pull_request_review_id": 1505258303,
      "id": 1246596786,
      "node_id": "PRRC_kwDOABII585KTY6y",
      "diff_hunk": "@@ -0,0 +1,183 @@\n+// Copyright (c) 2022-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <net_processing.h>\n+#include <netaddress.h>\n+#include <protocol.h>\n+#include <test/util/logging.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/time.h>\n+#include <version.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chrono>\n+#include <string>\n+#include <unordered_map>\n+\n+BOOST_FIXTURE_TEST_SUITE(netmsg_tests, NetTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(initial_messages_exchange)\n+{\n+    std::unordered_map<std::string, size_t> count_sent_messages;\n+    auto pipes = m_sockets_pipes.PopFront();\n+\n+    // Wait for all messages due to the initial handshake to be Send() to the socket.\n+    // The FEEFILTER is the last one, so quit when we get that.\n+    for (;;) {\n+        auto msg = pipes->send.GetNetMsg();\n+        if (msg.has_value()) {\n+            count_sent_messages[msg->m_type]++;",
      "path": "src/test/netmsg_tests.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "4557cc336fd8eb321b0db024b70213f46017071c",
      "in_reply_to_id": 1245596582,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2023-06-29T13:08:02Z",
      "updated_at": "2023-06-29T13:08:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1246596786",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246596786"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246602200",
      "pull_request_review_id": 1505266828,
      "id": 1246602200,
      "node_id": "PRRC_kwDOABII585KTaPY",
      "diff_hunk": "@@ -0,0 +1,104 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <primitives/transaction.h>\n+#include <protocol.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/net.h>\n+#include <test/util/mining.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/chaintype.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+\n+#include <atomic>\n+#include <cstdlib>\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <string_view>\n+#include <vector>\n+\n+// There are two sets of tests:\n+// - direct: pass the fuzzed message directly to PeerManager::ProcessMessage() (fuzz/process_message.cpp)\n+// - e2e: send the fuzzed message to a mocked socket which is read from Connman\n+//   and processed by PeerManager (like it is happening in the \"real world\") (fuzz/process_message_e2e.cpp)\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+std::string_view LIMIT_TO_MESSAGE_TYPE{};\n+} // namespace\n+\n+void initialize_process_message_e2e()\n+{\n+    if (const auto val{std::getenv(\"LIMIT_TO_MESSAGE_TYPE\")}) {\n+        LIMIT_TO_MESSAGE_TYPE = val;\n+        Assert(std::count(getAllNetMessageTypes().begin(), getAllNetMessageTypes().end(), LIMIT_TO_MESSAGE_TYPE)); // Unknown message type passed\n+    }\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>(\n+            /*chain_type=*/ChainType::REGTEST,\n+            /*extra_args=*/{\"-txreconciliation\"});\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {",
      "path": "src/test/fuzz/process_message_e2e.cpp",
      "position": null,
      "original_position": 60,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "4557cc336fd8eb321b0db024b70213f46017071c",
      "in_reply_to_id": 1245634333,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.\r\n\r\nI changed it to use `{}` as suggested but I don't see a point to use `{}` instead of `=` for initialization when `auto` is used. I find the `{}` variant a little bit less readable but see the merit to use it when `Type1 x{expresson_of_Type2};` is used to detect incompatibilities between `Type1` and `Type2`. But why do that for `auto x{expressoin_of_any_type};`?",
      "created_at": "2023-06-29T13:12:42Z",
      "updated_at": "2023-06-29T13:12:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1246602200",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246602200"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246602826",
      "pull_request_review_id": 1505267868,
      "id": 1246602826,
      "node_id": "PRRC_kwDOABII585KTaZK",
      "diff_hunk": "@@ -0,0 +1,104 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <primitives/transaction.h>\n+#include <protocol.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/net.h>\n+#include <test/util/mining.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/chaintype.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+\n+#include <atomic>\n+#include <cstdlib>\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <string_view>\n+#include <vector>",
      "path": "src/test/fuzz/process_message_e2e.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "4557cc336fd8eb321b0db024b70213f46017071c",
      "in_reply_to_id": 1245633845,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, except this:\r\n\r\n```\r\ntest/net_msg_tests.cpp should add these lines:\r\n#include <boost/preprocessor/arithmetic/limits/dec_256.hpp>\r\n#include <boost/preprocessor/comparison/limits/not_equal_256.hpp>\r\n#include <boost/preprocessor/control/expr_iif.hpp>\r\n#include <boost/preprocessor/control/iif.hpp>\r\n#include <boost/preprocessor/detail/limits/auto_rec_256.hpp>\r\n#include <boost/preprocessor/logical/compl.hpp>\r\n#include <boost/preprocessor/logical/limits/bool_256.hpp>\r\n#include <boost/preprocessor/repetition/detail/limits/for_256.hpp>\r\n#include <boost/preprocessor/repetition/for.hpp>\r\n#include <boost/preprocessor/seq/limits/elem_256.hpp>\r\n#include <boost/preprocessor/seq/limits/size_256.hpp>\r\n#include <boost/preprocessor/tuple/elem.hpp>\r\n#include <boost/preprocessor/variadic/limits/elem_64.hpp>\r\n#include <boost/test/tools/old/interface.hpp>\r\n#include <boost/test/unit_test_log.hpp>\r\n#include <boost/test/unit_test_suite.hpp>\r\n#include <boost/test/utils/basic_cstring/basic_cstring.hpp>\r\n#include <boost/test/utils/lazy_ostream.hpp>\r\n\r\ntest/net_msg_tests.cpp should remove these lines:\r\n- #include <boost/test/unit_test.hpp>  // lines 18-18\r\n```\r\n\r\nwhich seems strange.",
      "created_at": "2023-06-29T13:13:14Z",
      "updated_at": "2023-06-29T13:13:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1246602826",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246602826"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247025846",
      "pull_request_review_id": 1505932424,
      "id": 1247025846,
      "node_id": "PRRC_kwDOABII585KVBq2",
      "diff_hunk": "@@ -0,0 +1,104 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <primitives/transaction.h>\n+#include <protocol.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/net.h>\n+#include <test/util/mining.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/chaintype.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+\n+#include <atomic>\n+#include <cstdlib>\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <string_view>\n+#include <vector>\n+\n+// There are two sets of tests:\n+// - direct: pass the fuzzed message directly to PeerManager::ProcessMessage() (fuzz/process_message.cpp)\n+// - e2e: send the fuzzed message to a mocked socket which is read from Connman\n+//   and processed by PeerManager (like it is happening in the \"real world\") (fuzz/process_message_e2e.cpp)\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+std::string_view LIMIT_TO_MESSAGE_TYPE{};\n+} // namespace\n+\n+void initialize_process_message_e2e()\n+{\n+    if (const auto val{std::getenv(\"LIMIT_TO_MESSAGE_TYPE\")}) {\n+        LIMIT_TO_MESSAGE_TYPE = val;\n+        Assert(std::count(getAllNetMessageTypes().begin(), getAllNetMessageTypes().end(), LIMIT_TO_MESSAGE_TYPE)); // Unknown message type passed\n+    }\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>(\n+            /*chain_type=*/ChainType::REGTEST,\n+            /*extra_args=*/{\"-txreconciliation\"});\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {",
      "path": "src/test/fuzz/process_message_e2e.cpp",
      "position": null,
      "original_position": 60,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "4557cc336fd8eb321b0db024b70213f46017071c",
      "in_reply_to_id": 1245634333,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "With C++11, my understanding was to avoid `auto` with uniform (braced) initialization because in some cases it could have unexpected results.  Since C++17, that was mostly fixed and the CPP Guideline is to [prefer the {}-initializer syntax](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es23-prefer-the--initializer-syntax) as its rules are simpler, more general, less ambiguous, and safer. See also https://ianyepan.github.io/posts/cpp-uniform-initialization/. Though it didn't matter in this case, IIUC, so I didn't mention it explicitly.",
      "created_at": "2023-06-29T19:31:34Z",
      "updated_at": "2023-06-29T19:32:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1247025846",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247025846"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1263332063",
      "pull_request_review_id": 1529671710,
      "id": 1263332063,
      "node_id": "PRRC_kwDOABII585LTOrf",
      "diff_hunk": "@@ -16,16 +16,30 @@ DebugLogHelper::DebugLogHelper(std::string message, MatchFn match)\n     m_print_connection = LogInstance().PushBackCallback(\n         [this](const std::string& s) {\n             if (m_found) return;\n-            m_found = s.find(m_message) != std::string::npos && m_match(&s);\n+            m_found = s.find(m_message) != std::string::npos && m_match(s);\n         });\n     noui_test_redirect();\n+    m_receiving_log = true;\n }\n \n-void DebugLogHelper::check_found()\n+DebugLogHelper::~DebugLogHelper()\n {\n-    noui_reconnect();\n-    LogInstance().DeleteCallback(m_print_connection);\n-    if (!m_found && m_match(nullptr)) {\n+    StopReceivingLog();\n+}\n+\n+void DebugLogHelper::EndAndThrowIfNotFound()\n+{\n+    StopReceivingLog();\n+    if (!m_found) {\n         throw std::runtime_error(strprintf(\"'%s' not found in debug log\\n\", m_message));",
      "path": "src/test/util/logging.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "d2f46c705540c74c2b6f83a66535c3ead1cb95d4",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure about changing this. It just makes it harder to use. If you prefer to not have an exception, this can use an `Assert`? Also, in the commit description, it would be good to refer to documentation why it is \"not allowed\", and/or include an example of what happens.",
      "created_at": "2023-07-14T06:06:36Z",
      "updated_at": "2023-07-14T06:07:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1263332063",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1263332063"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268252521",
      "pull_request_review_id": 1537383252,
      "id": 1268252521,
      "node_id": "PRRC_kwDOABII585Ll_9p",
      "diff_hunk": "@@ -0,0 +1,104 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <primitives/transaction.h>\n+#include <protocol.h>\n+#include <script/script.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/net.h>\n+#include <test/util/mining.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/chaintype.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+\n+#include <atomic>\n+#include <cstdlib>\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <string_view>\n+#include <vector>\n+\n+// There are two sets of tests:\n+// - direct: pass the fuzzed message directly to PeerManager::ProcessMessage() (fuzz/process_message.cpp)\n+// - e2e: send the fuzzed message to a mocked socket which is read from Connman\n+//   and processed by PeerManager (like it is happening in the \"real world\") (fuzz/process_message_e2e.cpp)\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+std::string_view LIMIT_TO_MESSAGE_TYPE{};\n+} // namespace\n+\n+void initialize_process_message_e2e()\n+{\n+    if (const auto val{std::getenv(\"LIMIT_TO_MESSAGE_TYPE\")}) {\n+        LIMIT_TO_MESSAGE_TYPE = val;\n+        Assert(std::count(getAllNetMessageTypes().begin(), getAllNetMessageTypes().end(), LIMIT_TO_MESSAGE_TYPE)); // Unknown message type passed\n+    }\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>(\n+            /*chain_type=*/ChainType::REGTEST,\n+            /*extra_args=*/{\"-txreconciliation\"});\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {",
      "path": "src/test/fuzz/process_message_e2e.cpp",
      "position": null,
      "original_position": 60,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "4557cc336fd8eb321b0db024b70213f46017071c",
      "in_reply_to_id": 1245634333,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I am still not convinced about `auto` and brace-initialization.\r\n\r\nhttps://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es23-prefer-the--initializer-syntax mentions:\r\n> Use = only when you are sure that there can be no narrowing conversions\r\n> For built-in arithmetic types, use = only with auto\r\n\r\nThere will not be narrowing conversions with `auto x = expression;`\r\n\r\nOne of the examples down there uses `auto p = ...`.",
      "created_at": "2023-07-19T15:34:28Z",
      "updated_at": "2023-07-19T15:34:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1268252521",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268252521"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269027565",
      "pull_request_review_id": 1538585345,
      "id": 1269027565,
      "node_id": "PRRC_kwDOABII585Lo9Lt",
      "diff_hunk": "@@ -16,16 +16,30 @@ DebugLogHelper::DebugLogHelper(std::string message, MatchFn match)\n     m_print_connection = LogInstance().PushBackCallback(\n         [this](const std::string& s) {\n             if (m_found) return;\n-            m_found = s.find(m_message) != std::string::npos && m_match(&s);\n+            m_found = s.find(m_message) != std::string::npos && m_match(s);\n         });\n     noui_test_redirect();\n+    m_receiving_log = true;\n }\n \n-void DebugLogHelper::check_found()\n+DebugLogHelper::~DebugLogHelper()\n {\n-    noui_reconnect();\n-    LogInstance().DeleteCallback(m_print_connection);\n-    if (!m_found && m_match(nullptr)) {\n+    StopReceivingLog();\n+}\n+\n+void DebugLogHelper::EndAndThrowIfNotFound()\n+{\n+    StopReceivingLog();\n+    if (!m_found) {\n         throw std::runtime_error(strprintf(\"'%s' not found in debug log\\n\", m_message));",
      "path": "src/test/util/logging.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "d2f46c705540c74c2b6f83a66535c3ead1cb95d4",
      "in_reply_to_id": 1263332063,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I will look into replacing this with `Assert()`.\r\n\r\n\"exception from destructor in c++\" is a topic well covered all over the internet. The compiler produces a warning for that. Here is an example:\r\n\r\n```cpp\r\nclass A \r\n{\r\npublic:\r\n    ~A() { \r\n        std::cout << \"before throw a\\n\";\r\n        // warning: '~A' has a non-throwing exception specification but can still throw [-Wexceptions]\r\n        //171 |         throw std::runtime_error(\"a\");\r\n        //    |         ^\r\n        throw std::runtime_error(\"a\");\r\n    } \r\n};\r\n\r\nint main(int, char**)\r\n{\r\n    try { \r\n        A a;\r\n        std::cout << \"before throw b\\n\";\r\n        throw std::runtime_error(\"b\");\r\n    } catch (const std::exception& e) { \r\n        std::cout << \"catch\\n\"; // never reached\r\n    } \r\n    return 0;\r\n}\r\n```\r\n\r\n```\r\n$ ./t\r\nbefore throw b\r\nbefore throw a\r\nAbort trap (core dumped)\r\n$\r\n```\r\n\r\nI will look into improving the commit message as well.",
      "created_at": "2023-07-20T07:11:04Z",
      "updated_at": "2023-07-20T07:11:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1269027565",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269027565"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269042432",
      "pull_request_review_id": 1538608183,
      "id": 1269042432,
      "node_id": "PRRC_kwDOABII585LpA0A",
      "diff_hunk": "@@ -16,16 +16,30 @@ DebugLogHelper::DebugLogHelper(std::string message, MatchFn match)\n     m_print_connection = LogInstance().PushBackCallback(\n         [this](const std::string& s) {\n             if (m_found) return;\n-            m_found = s.find(m_message) != std::string::npos && m_match(&s);\n+            m_found = s.find(m_message) != std::string::npos && m_match(s);\n         });\n     noui_test_redirect();\n+    m_receiving_log = true;\n }\n \n-void DebugLogHelper::check_found()\n+DebugLogHelper::~DebugLogHelper()\n {\n-    noui_reconnect();\n-    LogInstance().DeleteCallback(m_print_connection);\n-    if (!m_found && m_match(nullptr)) {\n+    StopReceivingLog();\n+}\n+\n+void DebugLogHelper::EndAndThrowIfNotFound()\n+{\n+    StopReceivingLog();\n+    if (!m_found) {\n         throw std::runtime_error(strprintf(\"'%s' not found in debug log\\n\", m_message));",
      "path": "src/test/util/logging.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "d2f46c705540c74c2b6f83a66535c3ead1cb95d4",
      "in_reply_to_id": 1263332063,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, but this being an \"Abort trap\" is well defined, not \"not allowed\". And I think the tests aborting on failure is fine.\r\n\r\n",
      "created_at": "2023-07-20T07:25:42Z",
      "updated_at": "2023-07-20T07:25:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1269042432",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269042432"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269461760",
      "pull_request_review_id": 1539268852,
      "id": 1269461760,
      "node_id": "PRRC_kwDOABII585LqnMA",
      "diff_hunk": "@@ -16,16 +16,30 @@ DebugLogHelper::DebugLogHelper(std::string message, MatchFn match)\n     m_print_connection = LogInstance().PushBackCallback(\n         [this](const std::string& s) {\n             if (m_found) return;\n-            m_found = s.find(m_message) != std::string::npos && m_match(&s);\n+            m_found = s.find(m_message) != std::string::npos && m_match(s);\n         });\n     noui_test_redirect();\n+    m_receiving_log = true;\n }\n \n-void DebugLogHelper::check_found()\n+DebugLogHelper::~DebugLogHelper()\n {\n-    noui_reconnect();\n-    LogInstance().DeleteCallback(m_print_connection);\n-    if (!m_found && m_match(nullptr)) {\n+    StopReceivingLog();\n+}\n+\n+void DebugLogHelper::EndAndThrowIfNotFound()\n+{\n+    StopReceivingLog();\n+    if (!m_found) {\n         throw std::runtime_error(strprintf(\"'%s' not found in debug log\\n\", m_message));",
      "path": "src/test/util/logging.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "d2f46c705540c74c2b6f83a66535c3ead1cb95d4",
      "in_reply_to_id": 1263332063,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed to use `std::abort()` in the destructor. Reverted to the original interface:\r\n\r\n```cpp\r\n{\r\n    ASSERT_DEBUG_LOG(\"expected message\");\r\n    produce log messages;\r\n}\r\n```\r\n\r\nThe change was necessary in order to pass the timeout to the \"final check or abort\" function which was the destructor and there is no way to pass parameters to the destructor. Anyway, now I pass the timeout to the constructor, save it in a member variable and use it in the destructor. With the wait it is now:\r\n\r\n```cpp\r\n{\r\n    ASSERT_DEBUG_LOG_WAIT(\"expected message\", 30s);\r\n    produce log messages;\r\n} // the destructor will wait 30s for the message to be logged before aborting\r\n```",
      "created_at": "2023-07-20T13:28:10Z",
      "updated_at": "2023-07-20T13:28:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1269461760",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269461760"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269641610",
      "pull_request_review_id": 1539561129,
      "id": 1269641610,
      "node_id": "PRRC_kwDOABII585LrTGK",
      "diff_hunk": "@@ -5,37 +5,62 @@\n #ifndef BITCOIN_TEST_UTIL_LOGGING_H\n #define BITCOIN_TEST_UTIL_LOGGING_H\n \n+#include <sync.h>\n #include <util/macros.h>\n \n+#include <chrono>\n+#include <condition_variable>\n #include <functional>\n #include <list>\n+#include <optional>\n #include <string>\n \n class DebugLogHelper\n {\n+public:\n+    using MatchFn = std::function<bool(const std::string* line)>;\n+\n+    static bool MatchFnDefault(const std::string*)\n+    {\n+        return true;\n+    }\n+\n+    explicit DebugLogHelper(\n+        std::string message,\n+        MatchFn match = MatchFnDefault,\n+        std::optional<std::chrono::milliseconds> timeout = std::nullopt);\n+\n+    ~DebugLogHelper();\n+\n+private:\n     const std::string m_message;\n-    bool m_found{false};\n+    const std::optional<std::chrono::milliseconds> m_timeout;\n+    // Mutex + LOCK() is not usable here because LOCK() may print to the log\n+    // itself (see DEBUG_LOCKCONTENTION) causing a deadlock between this mutex\n+    // and BCLog::Logger::m_cs which is acquired when logging a message.\n+    StdMutex m_mutex;\n+    std::condition_variable_any m_cv;\n+    bool m_found GUARDED_BY(m_mutex){false};\n     std::list<std::function<void(const std::string&)>>::iterator m_print_connection;\n \n     //! Custom match checking function.\n     //!\n     //! Invoked with pointers to lines containing matching strings, and with\n-    //! null if check_found() is called without any successful match.\n+    //! nullptr if ~DebugLogHelper() is called without any successful match.\n     //!\n     //! Can return true to enable default DebugLogHelper behavior of:\n     //! (1) ending search after first successful match, and\n-    //! (2) raising an error in check_found if no match was found\n+    //! (2) raising an error in ~DebugLogHelper() if no match was found (will be called with nullptr then)\n     //! Can return false to do the opposite in either case.\n-    using MatchFn = std::function<bool(const std::string* line)>;\n     MatchFn m_match;\n \n-    void check_found();\n-\n-public:\n-    explicit DebugLogHelper(std::string message, MatchFn match = [](const std::string*){ return true; });\n-    ~DebugLogHelper() { check_found(); }\n+    bool m_receiving_log;\n+    void StopReceivingLog();\n };\n \n #define ASSERT_DEBUG_LOG(message) DebugLogHelper UNIQUE_NAME(debugloghelper)(message)\n \n+#define ASSERT_DEBUG_LOG_WAIT(message, timeout) \\",
      "path": "src/test/util/logging.h",
      "position": 68,
      "original_position": 68,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "55c84c2d3bff09784ad127aba68a166f3f36f215",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It is already ugly to have a timeout in the functional tests, and use it to sync them. (At least this one is std::optional)\r\n\r\nHowever, my preference would still be to not have this and instead force the caller to sync.\r\n\r\nOtherwise this will just lead to brittle code down the line and potentially intermittent test issues when running with libc++ sanitizers in valgrind on arm64, etc.",
      "created_at": "2023-07-20T15:32:49Z",
      "updated_at": "2023-07-20T15:32:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1269641610",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269641610"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 63,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269917734",
      "pull_request_review_id": 1540009010,
      "id": 1269917734,
      "node_id": "PRRC_kwDOABII585LsWgm",
      "diff_hunk": "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <chrono>\n+#include <string>\n+#include <thread>\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+} // namespace\n+\n+static size_t& GetNumMsgTypes()\n+{\n+    static size_t g_num_msg_types{0};\n+    return g_num_msg_types;\n+}\n+#define FUZZ_TARGET_MSG(msg_type)                          \\\n+    struct msg_type##CountBeforeMain {                     \\\n+        msg_type##CountBeforeMain()                        \\\n+        {                                                  \\\n+            ++GetNumMsgTypes();                            \\\n+        }                                                  \\\n+    } const static g_##msg_type##count_before_main;        \\\n+    FUZZ_TARGET_INIT(netmsg_##msg_type, initialize_netmsg) \\\n+    {                                                      \\\n+        fuzz_target(buffer, #msg_type);                    \\\n+    }\n+\n+void initialize_netmsg()\n+{\n+    Assert(GetNumMsgTypes() == getAllNetMessageTypes().size()); // If this fails, add or remove the message type below\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+static void fuzz_target(FuzzBufferType buffer, const std::string& limit_to_message_type)",
      "path": "src/test/fuzz/netmsg.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "9b7e9dad271167af913828aaf3b75a9942770a34",
      "in_reply_to_id": 1061894472,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "After running it for some time, the maximum exec/s I got was 21 exec/s which is extremely low. It's not all the targets that reach more than 1000 exec/s here but 21 is too slow.",
      "created_at": "2023-07-20T20:12:06Z",
      "updated_at": "2023-07-20T20:12:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1269917734",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269917734"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269953546",
      "pull_request_review_id": 1540077018,
      "id": 1269953546,
      "node_id": "PRRC_kwDOABII585LsfQK",
      "diff_hunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/connection_types.h>\n+#include <primitives/transaction.h>\n+#include <protocol.h>\n+#include <script/script.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <util/chaintype.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <algorithm>\n+#include <cstdlib>\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+#include <string.h>\n+#include <string>\n+#include <string_view>\n+#include <vector>\n+\n+// There are two sets of tests:\n+// - direct: pass the fuzzed message directly to PeerManager::ProcessMessage() (fuzz/process_message.cpp)\n+// - e2e: send the fuzzed message to a mocked socket which is read from Connman\n+//   and processed by PeerManager (like it is happening in the \"real world\") (fuzz/process_message_e2e.cpp)\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+std::string_view LIMIT_TO_MESSAGE_TYPE{};\n+} // namespace\n+\n+void initialize_process_message_e2e()\n+{\n+    if (const auto val{std::getenv(\"LIMIT_TO_MESSAGE_TYPE\")}) {\n+        LIMIT_TO_MESSAGE_TYPE = val;\n+        Assert(std::count(getAllNetMessageTypes().begin(), getAllNetMessageTypes().end(), LIMIT_TO_MESSAGE_TYPE)); // Unknown message type passed\n+    }\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>(\n+            /*chain_type=*/ChainType::REGTEST,\n+            /*extra_args=*/{\"-txreconciliation\"});\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+FUZZ_TARGET(process_message_e2e, .init = initialize_process_message_e2e)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE).c_str()};\n+    if (!LIMIT_TO_MESSAGE_TYPE.empty() && random_message_type != LIMIT_TO_MESSAGE_TYPE) {\n+        return;\n+    }\n+\n+    SetMockTime(GetMockTime() + std::chrono::minutes{fuzzed_data_provider.ConsumeIntegral<uint8_t>()});",
      "path": "src/test/fuzz/process_message_e2e.cpp",
      "position": null,
      "original_position": 68,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "55c84c2d3bff09784ad127aba68a166f3f36f215",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 55c84c2d3bff09784ad127aba68a166f3f36f215: Is there any specific reason for this approach - Instead of using a fixed value like `process_message` does?",
      "created_at": "2023-07-20T20:55:35Z",
      "updated_at": "2023-07-20T20:55:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1269953546",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269953546"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270296374",
      "pull_request_review_id": 1540565982,
      "id": 1270296374,
      "node_id": "PRRC_kwDOABII585Lty82",
      "diff_hunk": "@@ -5,37 +5,62 @@\n #ifndef BITCOIN_TEST_UTIL_LOGGING_H\n #define BITCOIN_TEST_UTIL_LOGGING_H\n \n+#include <sync.h>\n #include <util/macros.h>\n \n+#include <chrono>\n+#include <condition_variable>\n #include <functional>\n #include <list>\n+#include <optional>\n #include <string>\n \n class DebugLogHelper\n {\n+public:\n+    using MatchFn = std::function<bool(const std::string* line)>;\n+\n+    static bool MatchFnDefault(const std::string*)\n+    {\n+        return true;\n+    }\n+\n+    explicit DebugLogHelper(\n+        std::string message,\n+        MatchFn match = MatchFnDefault,\n+        std::optional<std::chrono::milliseconds> timeout = std::nullopt);\n+\n+    ~DebugLogHelper();\n+\n+private:\n     const std::string m_message;\n-    bool m_found{false};\n+    const std::optional<std::chrono::milliseconds> m_timeout;\n+    // Mutex + LOCK() is not usable here because LOCK() may print to the log\n+    // itself (see DEBUG_LOCKCONTENTION) causing a deadlock between this mutex\n+    // and BCLog::Logger::m_cs which is acquired when logging a message.\n+    StdMutex m_mutex;\n+    std::condition_variable_any m_cv;\n+    bool m_found GUARDED_BY(m_mutex){false};\n     std::list<std::function<void(const std::string&)>>::iterator m_print_connection;\n \n     //! Custom match checking function.\n     //!\n     //! Invoked with pointers to lines containing matching strings, and with\n-    //! null if check_found() is called without any successful match.\n+    //! nullptr if ~DebugLogHelper() is called without any successful match.\n     //!\n     //! Can return true to enable default DebugLogHelper behavior of:\n     //! (1) ending search after first successful match, and\n-    //! (2) raising an error in check_found if no match was found\n+    //! (2) raising an error in ~DebugLogHelper() if no match was found (will be called with nullptr then)\n     //! Can return false to do the opposite in either case.\n-    using MatchFn = std::function<bool(const std::string* line)>;\n     MatchFn m_match;\n \n-    void check_found();\n-\n-public:\n-    explicit DebugLogHelper(std::string message, MatchFn match = [](const std::string*){ return true; });\n-    ~DebugLogHelper() { check_found(); }\n+    bool m_receiving_log;\n+    void StopReceivingLog();\n };\n \n #define ASSERT_DEBUG_LOG(message) DebugLogHelper UNIQUE_NAME(debugloghelper)(message)\n \n+#define ASSERT_DEBUG_LOG_WAIT(message, timeout) \\",
      "path": "src/test/util/logging.h",
      "position": 68,
      "original_position": 68,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "55c84c2d3bff09784ad127aba68a166f3f36f215",
      "in_reply_to_id": 1269641610,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Your concern is that the timeout will turn out not to be enough in some slow environments?\r\n\r\nWhen you say \"force the caller to sync\" do you mean something like this:\r\n```cpp\r\n{\r\n    ASSERT_DEBUG_LOG(\"foo\");\r\n    dostuff\r\n    somehow ensure the code that is supposed to log \"foo\" has executed\r\n}  // fail if \"foo\" is not in the log as soon as this is reached, like in `master`\r\n```\r\n\r\n?",
      "created_at": "2023-07-21T07:00:41Z",
      "updated_at": "2023-07-21T07:00:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1270296374",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270296374"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 63,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270336000",
      "pull_request_review_id": 1540636835,
      "id": 1270336000,
      "node_id": "PRRC_kwDOABII585Lt8oA",
      "diff_hunk": "@@ -5,37 +5,62 @@\n #ifndef BITCOIN_TEST_UTIL_LOGGING_H\n #define BITCOIN_TEST_UTIL_LOGGING_H\n \n+#include <sync.h>\n #include <util/macros.h>\n \n+#include <chrono>\n+#include <condition_variable>\n #include <functional>\n #include <list>\n+#include <optional>\n #include <string>\n \n class DebugLogHelper\n {\n+public:\n+    using MatchFn = std::function<bool(const std::string* line)>;\n+\n+    static bool MatchFnDefault(const std::string*)\n+    {\n+        return true;\n+    }\n+\n+    explicit DebugLogHelper(\n+        std::string message,\n+        MatchFn match = MatchFnDefault,\n+        std::optional<std::chrono::milliseconds> timeout = std::nullopt);\n+\n+    ~DebugLogHelper();\n+\n+private:\n     const std::string m_message;\n-    bool m_found{false};\n+    const std::optional<std::chrono::milliseconds> m_timeout;\n+    // Mutex + LOCK() is not usable here because LOCK() may print to the log\n+    // itself (see DEBUG_LOCKCONTENTION) causing a deadlock between this mutex\n+    // and BCLog::Logger::m_cs which is acquired when logging a message.\n+    StdMutex m_mutex;\n+    std::condition_variable_any m_cv;\n+    bool m_found GUARDED_BY(m_mutex){false};\n     std::list<std::function<void(const std::string&)>>::iterator m_print_connection;\n \n     //! Custom match checking function.\n     //!\n     //! Invoked with pointers to lines containing matching strings, and with\n-    //! null if check_found() is called without any successful match.\n+    //! nullptr if ~DebugLogHelper() is called without any successful match.\n     //!\n     //! Can return true to enable default DebugLogHelper behavior of:\n     //! (1) ending search after first successful match, and\n-    //! (2) raising an error in check_found if no match was found\n+    //! (2) raising an error in ~DebugLogHelper() if no match was found (will be called with nullptr then)\n     //! Can return false to do the opposite in either case.\n-    using MatchFn = std::function<bool(const std::string* line)>;\n     MatchFn m_match;\n \n-    void check_found();\n-\n-public:\n-    explicit DebugLogHelper(std::string message, MatchFn match = [](const std::string*){ return true; });\n-    ~DebugLogHelper() { check_found(); }\n+    bool m_receiving_log;\n+    void StopReceivingLog();\n };\n \n #define ASSERT_DEBUG_LOG(message) DebugLogHelper UNIQUE_NAME(debugloghelper)(message)\n \n+#define ASSERT_DEBUG_LOG_WAIT(message, timeout) \\",
      "path": "src/test/util/logging.h",
      "position": 68,
      "original_position": 68,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "55c84c2d3bff09784ad127aba68a166f3f36f215",
      "in_reply_to_id": 1269641610,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes.\r\n\r\nFor example, if you are waiting for the scheduler to execute and log a validationinterface event, you can call `SyncWithValidationInterfaceQueue()` to sync without a timeout.",
      "created_at": "2023-07-21T07:43:35Z",
      "updated_at": "2023-07-21T07:43:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1270336000",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270336000"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 63,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270350745",
      "pull_request_review_id": 1540656358,
      "id": 1270350745,
      "node_id": "PRRC_kwDOABII585LuAOZ",
      "diff_hunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/connection_types.h>\n+#include <primitives/transaction.h>\n+#include <protocol.h>\n+#include <script/script.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <util/chaintype.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <algorithm>\n+#include <cstdlib>\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+#include <string.h>\n+#include <string>\n+#include <string_view>\n+#include <vector>\n+\n+// There are two sets of tests:\n+// - direct: pass the fuzzed message directly to PeerManager::ProcessMessage() (fuzz/process_message.cpp)\n+// - e2e: send the fuzzed message to a mocked socket which is read from Connman\n+//   and processed by PeerManager (like it is happening in the \"real world\") (fuzz/process_message_e2e.cpp)\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+std::string_view LIMIT_TO_MESSAGE_TYPE{};\n+} // namespace\n+\n+void initialize_process_message_e2e()\n+{\n+    if (const auto val{std::getenv(\"LIMIT_TO_MESSAGE_TYPE\")}) {\n+        LIMIT_TO_MESSAGE_TYPE = val;\n+        Assert(std::count(getAllNetMessageTypes().begin(), getAllNetMessageTypes().end(), LIMIT_TO_MESSAGE_TYPE)); // Unknown message type passed\n+    }\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>(\n+            /*chain_type=*/ChainType::REGTEST,\n+            /*extra_args=*/{\"-txreconciliation\"});\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+FUZZ_TARGET(process_message_e2e, .init = initialize_process_message_e2e)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE).c_str()};\n+    if (!LIMIT_TO_MESSAGE_TYPE.empty() && random_message_type != LIMIT_TO_MESSAGE_TYPE) {\n+        return;\n+    }\n+\n+    SetMockTime(GetMockTime() + std::chrono::minutes{fuzzed_data_provider.ConsumeIntegral<uint8_t>()});",
      "path": "src/test/fuzz/process_message_e2e.cpp",
      "position": null,
      "original_position": 68,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "55c84c2d3bff09784ad127aba68a166f3f36f215",
      "in_reply_to_id": 1269953546,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You mean `SetMockTime(1610000000);`? Connman is already started at this point and I thought that the clock going backwards might be a problem, but replacing this with `SetMockTime(1610000000);` seems to work so I guess either one is fine. Do you think I should change it?",
      "created_at": "2023-07-21T07:54:32Z",
      "updated_at": "2023-07-21T07:54:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1270350745",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270350745"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270388875",
      "pull_request_review_id": 1540707606,
      "id": 1270388875,
      "node_id": "PRRC_kwDOABII585LuJiL",
      "diff_hunk": "@@ -5,37 +5,62 @@\n #ifndef BITCOIN_TEST_UTIL_LOGGING_H\n #define BITCOIN_TEST_UTIL_LOGGING_H\n \n+#include <sync.h>\n #include <util/macros.h>\n \n+#include <chrono>\n+#include <condition_variable>\n #include <functional>\n #include <list>\n+#include <optional>\n #include <string>\n \n class DebugLogHelper\n {\n+public:\n+    using MatchFn = std::function<bool(const std::string* line)>;\n+\n+    static bool MatchFnDefault(const std::string*)\n+    {\n+        return true;\n+    }\n+\n+    explicit DebugLogHelper(\n+        std::string message,\n+        MatchFn match = MatchFnDefault,\n+        std::optional<std::chrono::milliseconds> timeout = std::nullopt);\n+\n+    ~DebugLogHelper();\n+\n+private:\n     const std::string m_message;\n-    bool m_found{false};\n+    const std::optional<std::chrono::milliseconds> m_timeout;\n+    // Mutex + LOCK() is not usable here because LOCK() may print to the log\n+    // itself (see DEBUG_LOCKCONTENTION) causing a deadlock between this mutex\n+    // and BCLog::Logger::m_cs which is acquired when logging a message.\n+    StdMutex m_mutex;\n+    std::condition_variable_any m_cv;\n+    bool m_found GUARDED_BY(m_mutex){false};\n     std::list<std::function<void(const std::string&)>>::iterator m_print_connection;\n \n     //! Custom match checking function.\n     //!\n     //! Invoked with pointers to lines containing matching strings, and with\n-    //! null if check_found() is called without any successful match.\n+    //! nullptr if ~DebugLogHelper() is called without any successful match.\n     //!\n     //! Can return true to enable default DebugLogHelper behavior of:\n     //! (1) ending search after first successful match, and\n-    //! (2) raising an error in check_found if no match was found\n+    //! (2) raising an error in ~DebugLogHelper() if no match was found (will be called with nullptr then)\n     //! Can return false to do the opposite in either case.\n-    using MatchFn = std::function<bool(const std::string* line)>;\n     MatchFn m_match;\n \n-    void check_found();\n-\n-public:\n-    explicit DebugLogHelper(std::string message, MatchFn match = [](const std::string*){ return true; });\n-    ~DebugLogHelper() { check_found(); }\n+    bool m_receiving_log;\n+    void StopReceivingLog();\n };\n \n #define ASSERT_DEBUG_LOG(message) DebugLogHelper UNIQUE_NAME(debugloghelper)(message)\n \n+#define ASSERT_DEBUG_LOG_WAIT(message, timeout) \\",
      "path": "src/test/util/logging.h",
      "position": 68,
      "original_position": 68,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "55c84c2d3bff09784ad127aba68a166f3f36f215",
      "in_reply_to_id": 1269641610,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thinking about this - when one thread triggers an event which another thread is supposed to pick and do something about it and the first thread wants to confirm that was done, then some waiting must be involved in the first thread.\r\n\r\n`SyncWithValidationInterfaceQueue()` uses https://en.cppreference.com/w/cpp/thread/future/wait which is unlimited, without a timeout. In practice I guess that means a 2h (?) timeout until some guard in the CI kills the waiting test.\r\n\r\nSyncing in the test, explicitly, outside of `ASSERT_DEBUG_LOG_WAIT()` would require putting sync points in various places in the high-level code - where a flag is raised that e.g. \"a ping has been send\", or \"we have received GETBLOCKS message\" and then the test waits for a particular flag to be raised. If that is done then `ASSERT_DEBUG_LOG*` is unnecessary. In the current approach the log messages are used as sync points. I think that is better because it does not require littering the high-level code with test-specific sync-points/flags.\r\n\r\nWhat about changing `ASSERT_DEBUG_LOG_WAIT()` to wait infinitely, no timeout? Then it would be similar to `SyncWithValidationInterfaceQueue()` - a test failure due to ~message not logged~ the expected code not executed by the other thread would be designated not by a \"timeout: message not found in log\" after 30s but by infinite wait/hang of the test.",
      "created_at": "2023-07-21T08:24:24Z",
      "updated_at": "2023-07-21T08:26:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1270388875",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270388875"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 63,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270402838",
      "pull_request_review_id": 1540728739,
      "id": 1270402838,
      "node_id": "PRRC_kwDOABII585LuM8W",
      "diff_hunk": "@@ -5,37 +5,62 @@\n #ifndef BITCOIN_TEST_UTIL_LOGGING_H\n #define BITCOIN_TEST_UTIL_LOGGING_H\n \n+#include <sync.h>\n #include <util/macros.h>\n \n+#include <chrono>\n+#include <condition_variable>\n #include <functional>\n #include <list>\n+#include <optional>\n #include <string>\n \n class DebugLogHelper\n {\n+public:\n+    using MatchFn = std::function<bool(const std::string* line)>;\n+\n+    static bool MatchFnDefault(const std::string*)\n+    {\n+        return true;\n+    }\n+\n+    explicit DebugLogHelper(\n+        std::string message,\n+        MatchFn match = MatchFnDefault,\n+        std::optional<std::chrono::milliseconds> timeout = std::nullopt);\n+\n+    ~DebugLogHelper();\n+\n+private:\n     const std::string m_message;\n-    bool m_found{false};\n+    const std::optional<std::chrono::milliseconds> m_timeout;\n+    // Mutex + LOCK() is not usable here because LOCK() may print to the log\n+    // itself (see DEBUG_LOCKCONTENTION) causing a deadlock between this mutex\n+    // and BCLog::Logger::m_cs which is acquired when logging a message.\n+    StdMutex m_mutex;\n+    std::condition_variable_any m_cv;\n+    bool m_found GUARDED_BY(m_mutex){false};\n     std::list<std::function<void(const std::string&)>>::iterator m_print_connection;\n \n     //! Custom match checking function.\n     //!\n     //! Invoked with pointers to lines containing matching strings, and with\n-    //! null if check_found() is called without any successful match.\n+    //! nullptr if ~DebugLogHelper() is called without any successful match.\n     //!\n     //! Can return true to enable default DebugLogHelper behavior of:\n     //! (1) ending search after first successful match, and\n-    //! (2) raising an error in check_found if no match was found\n+    //! (2) raising an error in ~DebugLogHelper() if no match was found (will be called with nullptr then)\n     //! Can return false to do the opposite in either case.\n-    using MatchFn = std::function<bool(const std::string* line)>;\n     MatchFn m_match;\n \n-    void check_found();\n-\n-public:\n-    explicit DebugLogHelper(std::string message, MatchFn match = [](const std::string*){ return true; });\n-    ~DebugLogHelper() { check_found(); }\n+    bool m_receiving_log;\n+    void StopReceivingLog();\n };\n \n #define ASSERT_DEBUG_LOG(message) DebugLogHelper UNIQUE_NAME(debugloghelper)(message)\n \n+#define ASSERT_DEBUG_LOG_WAIT(message, timeout) \\",
      "path": "src/test/util/logging.h",
      "position": 68,
      "original_position": 68,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "55c84c2d3bff09784ad127aba68a166f3f36f215",
      "in_reply_to_id": 1269641610,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure about an infinite timeout for `ASSERT_DEBUG_LOG`. For example, this can easily be hit when the log string is modified by a developer, turning a (doc) change in one place into a hard to debug unit test issue.\r\n\r\nI know that it is possible to hit an infinite runtime in any other place, but that would generally mean a major fault or injected bug elsewhere. For example, if the scheduler thread is stopped and one called `SyncWithValidationInterfaceQueue()`, it would be quite obvious from the diff why the unit test never finishes. Alternatively, `SyncWithValidationInterfaceQueue()` could be extended with an assert to check the thread is running to map an infinitive runtime to an immediate crash to catch this type of bug, if it is expected to happen to at least once.\r\n\r\nIt would be good to explain why you need the debug log to sync and why it is not (easily) possible to just sync in this pull.",
      "created_at": "2023-07-21T08:37:15Z",
      "updated_at": "2023-07-21T08:38:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1270402838",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270402838"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 63,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270441940",
      "pull_request_review_id": 1540789791,
      "id": 1270441940,
      "node_id": "PRRC_kwDOABII585LuWfU",
      "diff_hunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/connection_types.h>\n+#include <primitives/transaction.h>\n+#include <protocol.h>\n+#include <script/script.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <util/chaintype.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <algorithm>\n+#include <cstdlib>\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+#include <string.h>\n+#include <string>\n+#include <string_view>\n+#include <vector>\n+\n+// There are two sets of tests:\n+// - direct: pass the fuzzed message directly to PeerManager::ProcessMessage() (fuzz/process_message.cpp)\n+// - e2e: send the fuzzed message to a mocked socket which is read from Connman\n+//   and processed by PeerManager (like it is happening in the \"real world\") (fuzz/process_message_e2e.cpp)\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+std::string_view LIMIT_TO_MESSAGE_TYPE{};\n+} // namespace\n+\n+void initialize_process_message_e2e()\n+{\n+    if (const auto val{std::getenv(\"LIMIT_TO_MESSAGE_TYPE\")}) {\n+        LIMIT_TO_MESSAGE_TYPE = val;\n+        Assert(std::count(getAllNetMessageTypes().begin(), getAllNetMessageTypes().end(), LIMIT_TO_MESSAGE_TYPE)); // Unknown message type passed\n+    }\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>(\n+            /*chain_type=*/ChainType::REGTEST,\n+            /*extra_args=*/{\"-txreconciliation\"});\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+FUZZ_TARGET(process_message_e2e, .init = initialize_process_message_e2e)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE).c_str()};\n+    if (!LIMIT_TO_MESSAGE_TYPE.empty() && random_message_type != LIMIT_TO_MESSAGE_TYPE) {\n+        return;\n+    }\n+\n+    SetMockTime(GetMockTime() + std::chrono::minutes{fuzzed_data_provider.ConsumeIntegral<uint8_t>()});",
      "path": "src/test/fuzz/process_message_e2e.cpp",
      "position": null,
      "original_position": 68,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "55c84c2d3bff09784ad127aba68a166f3f36f215",
      "in_reply_to_id": 1269953546,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Do you think I should change it?\r\n\r\nIn any case, there should be a comment to explain why it sets the mock time, no?",
      "created_at": "2023-07-21T09:15:32Z",
      "updated_at": "2023-07-21T09:15:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1270441940",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270441940"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270498856",
      "pull_request_review_id": 1540872486,
      "id": 1270498856,
      "node_id": "PRRC_kwDOABII585LukYo",
      "diff_hunk": "@@ -5,37 +5,62 @@\n #ifndef BITCOIN_TEST_UTIL_LOGGING_H\n #define BITCOIN_TEST_UTIL_LOGGING_H\n \n+#include <sync.h>\n #include <util/macros.h>\n \n+#include <chrono>\n+#include <condition_variable>\n #include <functional>\n #include <list>\n+#include <optional>\n #include <string>\n \n class DebugLogHelper\n {\n+public:\n+    using MatchFn = std::function<bool(const std::string* line)>;\n+\n+    static bool MatchFnDefault(const std::string*)\n+    {\n+        return true;\n+    }\n+\n+    explicit DebugLogHelper(\n+        std::string message,\n+        MatchFn match = MatchFnDefault,\n+        std::optional<std::chrono::milliseconds> timeout = std::nullopt);\n+\n+    ~DebugLogHelper();\n+\n+private:\n     const std::string m_message;\n-    bool m_found{false};\n+    const std::optional<std::chrono::milliseconds> m_timeout;\n+    // Mutex + LOCK() is not usable here because LOCK() may print to the log\n+    // itself (see DEBUG_LOCKCONTENTION) causing a deadlock between this mutex\n+    // and BCLog::Logger::m_cs which is acquired when logging a message.\n+    StdMutex m_mutex;\n+    std::condition_variable_any m_cv;\n+    bool m_found GUARDED_BY(m_mutex){false};\n     std::list<std::function<void(const std::string&)>>::iterator m_print_connection;\n \n     //! Custom match checking function.\n     //!\n     //! Invoked with pointers to lines containing matching strings, and with\n-    //! null if check_found() is called without any successful match.\n+    //! nullptr if ~DebugLogHelper() is called without any successful match.\n     //!\n     //! Can return true to enable default DebugLogHelper behavior of:\n     //! (1) ending search after first successful match, and\n-    //! (2) raising an error in check_found if no match was found\n+    //! (2) raising an error in ~DebugLogHelper() if no match was found (will be called with nullptr then)\n     //! Can return false to do the opposite in either case.\n-    using MatchFn = std::function<bool(const std::string* line)>;\n     MatchFn m_match;\n \n-    void check_found();\n-\n-public:\n-    explicit DebugLogHelper(std::string message, MatchFn match = [](const std::string*){ return true; });\n-    ~DebugLogHelper() { check_found(); }\n+    bool m_receiving_log;\n+    void StopReceivingLog();\n };\n \n #define ASSERT_DEBUG_LOG(message) DebugLogHelper UNIQUE_NAME(debugloghelper)(message)\n \n+#define ASSERT_DEBUG_LOG_WAIT(message, timeout) \\",
      "path": "src/test/util/logging.h",
      "position": 68,
      "original_position": 68,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "55c84c2d3bff09784ad127aba68a166f3f36f215",
      "in_reply_to_id": 1269641610,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Not sure about an infinite timeout for `ASSERT_DEBUG_LOG`. For example, this can easily be hit when the log string is modified by a developer, turning a (doc) change in one place into a hard to debug unit test issue.\r\n\r\nI agree. I will stick to a meaningful message after a timeout instead of infinite wait (without a message).\r\n \r\n> I know that it is possible to hit an infinite runtime in any other place, but that would generally mean a major fault or injected bug elsewhere. For example, if the scheduler thread is stopped and one called `SyncWithValidationInterfaceQueue()`...\r\n\r\nI agree with that too. But the parallel with `SyncWithValidationInterfaceQueue()` is not very close to the tests in this PR because `SyncWithValidationInterfaceQueue()` does not provide fine-grained sync points, see below what I mean.\r\n\r\n> It would be good to explain why you need the debug log to sync and why it is not (easily) possible to just sync in this pull.\r\n\r\nIt is possible to not use the debug log. Here is how it would look like:\r\n\r\n<details>\r\n<summary>[patch] use fine-grained sync points in high-level code</summary>\r\n\r\n```diff\r\ndiff --git i/src/net_processing.cpp w/src/net_processing.cpp\r\nindex 1c73ca4eb4..35301a6a2d 100644\r\n--- i/src/net_processing.cpp\r\n+++ w/src/net_processing.cpp\r\n@@ -3529,12 +3529,13 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\r\n     // At this point, the outgoing message serialization version can't change.\r\n     const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\r\n \r\n     if (msg_type == NetMsgType::VERACK) {\r\n         if (pfrom.fSuccessfullyConnected) {\r\n             LogPrint(BCLog::NET, \"ignoring redundant verack message from peer=%d\\n\", pfrom.GetId());\r\n+            g_stage_redundant_verack.post();\r\n             return;\r\n         }\r\n \r\n         if (!pfrom.IsInboundConn()) {\r\n             const auto mapped_as{m_connman.GetMappedAS(pfrom.addr)};\r\n             LogPrintf(\"New outbound peer connected: version: %d, blocks=%d, peer=%d%s%s (%s)\\n\",\r\n@@ -3781,12 +3782,14 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\r\n         }\r\n         peer->m_addr_processed += num_proc;\r\n         peer->m_addr_rate_limited += num_rate_limit;\r\n         LogPrint(BCLog::NET, \"Received addr: %u addresses (%u processed, %u rate-limited) from peer=%d\\n\",\r\n                  vAddr.size(), num_proc, num_rate_limit, pfrom.GetId());\r\n \r\n+        g_stage_received_addr.post();\r\n+\r\n         m_addrman.Add(vAddrOk, pfrom.addr, 2h);\r\n         if (vAddr.size() < 1000) peer->m_getaddr_sent = false;\r\n \r\n         // AddrFetch: Require multiple addresses to avoid disconnecting on self-announcements\r\n         if (pfrom.IsAddrFetchConn() && vAddr.size() > 1) {\r\n             LogPrint(BCLog::NET, \"addrfetch connection completed peer=%d; disconnecting\\n\", pfrom.GetId());\r\n@@ -3948,12 +3951,15 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\r\n \r\n         // Send the rest of the chain\r\n         if (pindex)\r\n             pindex = m_chainman.ActiveChain().Next(pindex);\r\n         int nLimit = 500;\r\n         LogPrint(BCLog::NET, \"getblocks %d to %s limit %d from peer=%d\\n\", (pindex ? pindex->nHeight : -1), hashStop.IsNull() ? \"end\" : hashStop.ToString(), nLimit, pfrom.GetId());\r\n+        if (pindex == nullptr && hashStop.IsNull()) {\r\n+            g_stage_getblocks_all.post();\r\n+        }\r\n         for (; pindex; pindex = m_chainman.ActiveChain().Next(pindex))\r\n         {\r\n             if (pindex->GetBlockHash() == hashStop)\r\n             {\r\n                 LogPrint(BCLog::NET, \"  getblocks stopping at %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\r\n                 break;\r\n@@ -4765,26 +4771,31 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\r\n                     } else {\r\n                         // This should never happen\r\n                         sProblem = \"Timing mishap\";\r\n                     }\r\n                 } else {\r\n                     // Nonce mismatches are normal when pings are overlapping\r\n-                    sProblem = \"Nonce mismatch\";\r\n                     if (nonce == 0) {\r\n                         // This is most likely a bug in another implementation somewhere; cancel this ping\r\n                         bPingFinished = true;\r\n                         sProblem = \"Nonce zero\";\r\n+                        g_stage_ping_nonce_zero.post();\r\n+                    } else {\r\n+                        sProblem = \"Nonce mismatch\";\r\n+                        g_stage_ping_nonce_mismatch.post();\r\n                     }\r\n                 }\r\n             } else {\r\n                 sProblem = \"Unsolicited pong without ping\";\r\n+                g_stage_unsolicited_pong_without_ping.post();\r\n             }\r\n         } else {\r\n             // This is most likely a bug in another implementation somewhere; cancel this ping\r\n             bPingFinished = true;\r\n             sProblem = \"Short payload\";\r\n+            g_stage_ping_short_payload.post();\r\n         }\r\n \r\n         if (!(sProblem.empty())) {\r\n             LogPrint(BCLog::NET, \"pong peer=%d: %s, %x expected, %x received, %u bytes\\n\",\r\n                 pfrom.GetId(),\r\n                 sProblem,\r\n@@ -5259,12 +5270,13 @@ void PeerManagerImpl::MaybeSendPing(CNode& node_to, Peer& peer, std::chrono::mic\r\n             m_connman.PushMessage(&node_to, msgMaker.Make(NetMsgType::PING, nonce));\r\n         } else {\r\n             // Peer is too old to support ping command with nonce, pong will never arrive.\r\n             peer.m_ping_nonce_sent = 0;\r\n             m_connman.PushMessage(&node_to, msgMaker.Make(NetMsgType::PING));\r\n         }\r\n+        g_stage_sending_ping.post();\r\n     }\r\n }\r\n \r\n void PeerManagerImpl::MaybeSendAddr(CNode& node, Peer& peer, std::chrono::microseconds current_time)\r\n {\r\n     // Nothing to do for non-address-relay peers\r\n@@ -5928,6 +5940,15 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\r\n         if (!vGetData.empty())\r\n             m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::GETDATA, vGetData));\r\n     } // release cs_main\r\n     MaybeSendFeefilter(*pto, *peer, current_time);\r\n     return true;\r\n }\r\n+\r\n+CSemaphore g_stage_received_addr{0};\r\n+CSemaphore g_stage_getblocks_all{0};\r\n+CSemaphore g_stage_sending_ping{0};\r\n+CSemaphore g_stage_ping_short_payload{0};\r\n+CSemaphore g_stage_unsolicited_pong_without_ping{0};\r\n+CSemaphore g_stage_ping_nonce_mismatch{0};\r\n+CSemaphore g_stage_ping_nonce_zero{0};\r\n+CSemaphore g_stage_redundant_verack{0};\r\ndiff --git i/src/net_processing.h w/src/net_processing.h\r\nindex 1bd2b1e8ca..de4a12705f 100644\r\n--- i/src/net_processing.h\r\n+++ w/src/net_processing.h\r\n@@ -91,7 +91,16 @@ public:\r\n                                 const std::chrono::microseconds time_received, const std::atomic<bool>& interruptMsgProc) EXCLUSIVE_LOCKS_REQUIRED(g_msgproc_mutex) = 0;\r\n \r\n     /** This function is used for testing the stale tip eviction logic, see denialofservice_tests.cpp */\r\n     virtual void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds) = 0;\r\n };\r\n \r\n+extern CSemaphore g_stage_received_addr;\r\n+extern CSemaphore g_stage_getblocks_all;\r\n+extern CSemaphore g_stage_sending_ping;\r\n+extern CSemaphore g_stage_ping_short_payload;\r\n+extern CSemaphore g_stage_unsolicited_pong_without_ping;\r\n+extern CSemaphore g_stage_ping_nonce_mismatch;\r\n+extern CSemaphore g_stage_ping_nonce_zero;\r\n+extern CSemaphore g_stage_redundant_verack;\r\n+\r\n #endif // BITCOIN_NET_PROCESSING_H\r\ndiff --git i/src/test/net_msg_tests.cpp w/src/test/net_msg_tests.cpp\r\nindex 49c97c1440..17bd74cb3a 100644\r\n--- i/src/test/net_msg_tests.cpp\r\n+++ w/src/test/net_msg_tests.cpp\r\n@@ -63,25 +63,27 @@ BOOST_AUTO_TEST_CASE(initial_messages_exchange)\r\n \r\n BOOST_AUTO_TEST_CASE(addr)\r\n {\r\n     const auto pipes{m_sockets_pipes.PopFront()};\r\n     std::vector<CAddress> addresses{5};\r\n \r\n-    ASSERT_DEBUG_LOG_WAIT(strprintf(\"Received addr: %u addresses\", addresses.size()), 30s);\r\n+    BOOST_REQUIRE(!g_stage_received_addr.try_wait());\r\n     pipes->recv.PushNetMsg(NetMsgType::ADDRV2, addresses);\r\n+    g_stage_received_addr.wait();\r\n }\r\n \r\n BOOST_AUTO_TEST_CASE(getblocks)\r\n {\r\n     const auto pipes{m_sockets_pipes.PopFront()};\r\n     std::vector<uint256> hashes{5};\r\n     CBlockLocator block_locator{std::move(hashes)};\r\n     uint256 hash_stop;\r\n \r\n-    ASSERT_DEBUG_LOG_WAIT(\"getblocks -1 to end\", 30s);\r\n+    BOOST_REQUIRE(!g_stage_getblocks_all.try_wait());\r\n     pipes->recv.PushNetMsg(NetMsgType::GETBLOCKS, block_locator, hash_stop);\r\n+    g_stage_getblocks_all.wait();\r\n }\r\n \r\n BOOST_AUTO_TEST_CASE(ping)\r\n {\r\n     const auto pipes{m_sockets_pipes.PopFront()};\r\n \r\n@@ -132,14 +134,16 @@ BOOST_AUTO_TEST_CASE(ping)\r\n             }\r\n         }\r\n     };\r\n \r\n     auto SendPing = [&]() {\r\n         {\r\n-            ASSERT_DEBUG_LOG_WAIT(\"sending ping\", 30s);\r\n+            while (g_stage_sending_ping.try_wait())\r\n+                ;\r\n             SetMockTime(GetMockTime() + PING_INTERVAL + 1s);\r\n+            g_stage_sending_ping.wait();\r\n         }\r\n         return GetPingNonceSent();\r\n     };\r\n \r\n     BOOST_TEST_MESSAGE(\"Ensure initial messages exchange has completed with the sending of a ping \"\r\n                        \"with nonce != 0 and the ping stats indicate a pending ping.\");\r\n@@ -147,37 +151,41 @@ BOOST_AUTO_TEST_CASE(ping)\r\n     auto time_elapsed = 1s;\r\n     SetMockTime(GetMockTime() + time_elapsed);\r\n     WaitForPingStats(/*min=*/std::chrono::microseconds::max(), /*last=*/0us, /*wait=*/time_elapsed);\r\n \r\n     BOOST_TEST_MESSAGE(\"Check that receiving a PONG without nonce cancels our PING\");\r\n     {\r\n-        ASSERT_DEBUG_LOG_WAIT(\"Short payload\", 30s);\r\n+        BOOST_REQUIRE(!g_stage_ping_short_payload.try_wait());\r\n         pipes->recv.PushNetMsg(NetMsgType::PONG);\r\n+        g_stage_ping_short_payload.wait();\r\n     }\r\n     WaitForPingStats(/*min=*/std::chrono::microseconds::max(), /*last=*/0us, /*wait=*/0us);\r\n \r\n     BOOST_TEST_MESSAGE(\"Check that receiving an unrequested PONG is logged and ignored\");\r\n     {\r\n-        ASSERT_DEBUG_LOG_WAIT(\"Unsolicited pong without ping\", 30s);\r\n+        BOOST_REQUIRE(!g_stage_unsolicited_pong_without_ping.try_wait());\r\n         pipes->recv.PushNetMsg(NetMsgType::PONG, /*nonce=*/uint64_t{0});\r\n+        g_stage_unsolicited_pong_without_ping.wait();\r\n     }\r\n \r\n     BOOST_TEST_MESSAGE(\"Check that receiving a PONG with the wrong nonce does not cancel our PING\");\r\n     uint64_t nonce{SendPing()};\r\n     {\r\n-        ASSERT_DEBUG_LOG_WAIT(\"Nonce mismatch\", 30s);\r\n+        BOOST_REQUIRE(!g_stage_ping_nonce_mismatch.try_wait());\r\n         pipes->recv.PushNetMsg(NetMsgType::PONG, nonce + 1);\r\n+        g_stage_ping_nonce_mismatch.wait();\r\n     }\r\n     time_elapsed = 5s;\r\n     SetMockTime(GetMockTime() + time_elapsed);\r\n     WaitForPingStats(/*min=*/std::chrono::microseconds::max(), /*last=*/0us, /*wait=*/time_elapsed);\r\n \r\n     BOOST_TEST_MESSAGE(\"Check that receiving a PONG with nonce=0 cancels our PING\");\r\n     {\r\n-        ASSERT_DEBUG_LOG_WAIT(\"Nonce zero\", 30s);\r\n+        BOOST_REQUIRE(!g_stage_ping_nonce_zero.try_wait());\r\n         pipes->recv.PushNetMsg(NetMsgType::PONG, /*nonce=*/uint64_t{0});\r\n+        g_stage_ping_nonce_zero.wait();\r\n     }\r\n     WaitForPingStats(/*min=*/std::chrono::microseconds::max(), /*last=*/0us, /*wait=*/0us);\r\n \r\n     BOOST_TEST_MESSAGE(\"Check that receiving a PONG with the correct nonce cancels our PING\");\r\n     nonce = SendPing();\r\n     time_elapsed = 5s;\r\n@@ -187,11 +195,12 @@ BOOST_AUTO_TEST_CASE(ping)\r\n }\r\n \r\n BOOST_AUTO_TEST_CASE(redundant_verack)\r\n {\r\n     const auto pipes{m_sockets_pipes.PopFront()};\r\n \r\n-    ASSERT_DEBUG_LOG_WAIT(\"ignoring redundant verack message\", 30s);\r\n+    BOOST_REQUIRE(!g_stage_redundant_verack.try_wait());\r\n     pipes->recv.PushNetMsg(NetMsgType::VERACK);\r\n+    g_stage_redundant_verack.wait();\r\n }\r\n \r\n BOOST_AUTO_TEST_SUITE_END()\r\n```\r\n</details>\r\n\r\nI could be missing some easier alternative. Let me know if you have something better in mind.",
      "created_at": "2023-07-21T10:03:30Z",
      "updated_at": "2023-07-21T10:03:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1270498856",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270498856"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 63,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270510651",
      "pull_request_review_id": 1540893335,
      "id": 1270510651,
      "node_id": "PRRC_kwDOABII585LunQ7",
      "diff_hunk": "@@ -5,37 +5,62 @@\n #ifndef BITCOIN_TEST_UTIL_LOGGING_H\n #define BITCOIN_TEST_UTIL_LOGGING_H\n \n+#include <sync.h>\n #include <util/macros.h>\n \n+#include <chrono>\n+#include <condition_variable>\n #include <functional>\n #include <list>\n+#include <optional>\n #include <string>\n \n class DebugLogHelper\n {\n+public:\n+    using MatchFn = std::function<bool(const std::string* line)>;\n+\n+    static bool MatchFnDefault(const std::string*)\n+    {\n+        return true;\n+    }\n+\n+    explicit DebugLogHelper(\n+        std::string message,\n+        MatchFn match = MatchFnDefault,\n+        std::optional<std::chrono::milliseconds> timeout = std::nullopt);\n+\n+    ~DebugLogHelper();\n+\n+private:\n     const std::string m_message;\n-    bool m_found{false};\n+    const std::optional<std::chrono::milliseconds> m_timeout;\n+    // Mutex + LOCK() is not usable here because LOCK() may print to the log\n+    // itself (see DEBUG_LOCKCONTENTION) causing a deadlock between this mutex\n+    // and BCLog::Logger::m_cs which is acquired when logging a message.\n+    StdMutex m_mutex;\n+    std::condition_variable_any m_cv;\n+    bool m_found GUARDED_BY(m_mutex){false};\n     std::list<std::function<void(const std::string&)>>::iterator m_print_connection;\n \n     //! Custom match checking function.\n     //!\n     //! Invoked with pointers to lines containing matching strings, and with\n-    //! null if check_found() is called without any successful match.\n+    //! nullptr if ~DebugLogHelper() is called without any successful match.\n     //!\n     //! Can return true to enable default DebugLogHelper behavior of:\n     //! (1) ending search after first successful match, and\n-    //! (2) raising an error in check_found if no match was found\n+    //! (2) raising an error in ~DebugLogHelper() if no match was found (will be called with nullptr then)\n     //! Can return false to do the opposite in either case.\n-    using MatchFn = std::function<bool(const std::string* line)>;\n     MatchFn m_match;\n \n-    void check_found();\n-\n-public:\n-    explicit DebugLogHelper(std::string message, MatchFn match = [](const std::string*){ return true; });\n-    ~DebugLogHelper() { check_found(); }\n+    bool m_receiving_log;\n+    void StopReceivingLog();\n };\n \n #define ASSERT_DEBUG_LOG(message) DebugLogHelper UNIQUE_NAME(debugloghelper)(message)\n \n+#define ASSERT_DEBUG_LOG_WAIT(message, timeout) \\",
      "path": "src/test/util/logging.h",
      "position": 68,
      "original_position": 68,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "55c84c2d3bff09784ad127aba68a166f3f36f215",
      "in_reply_to_id": 1269641610,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> better in mind?\r\n\r\nYeah, any reason you can't just call `ProcessMessagesOnce`. Alternatively, except for the ping/verack case you can just do what the python `def sync_with_ping` does?",
      "created_at": "2023-07-21T10:16:29Z",
      "updated_at": "2023-07-21T10:16:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1270510651",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270510651"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 63,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270627453",
      "pull_request_review_id": 1541077472,
      "id": 1270627453,
      "node_id": "PRRC_kwDOABII585LvDx9",
      "diff_hunk": "@@ -5,37 +5,62 @@\n #ifndef BITCOIN_TEST_UTIL_LOGGING_H\n #define BITCOIN_TEST_UTIL_LOGGING_H\n \n+#include <sync.h>\n #include <util/macros.h>\n \n+#include <chrono>\n+#include <condition_variable>\n #include <functional>\n #include <list>\n+#include <optional>\n #include <string>\n \n class DebugLogHelper\n {\n+public:\n+    using MatchFn = std::function<bool(const std::string* line)>;\n+\n+    static bool MatchFnDefault(const std::string*)\n+    {\n+        return true;\n+    }\n+\n+    explicit DebugLogHelper(\n+        std::string message,\n+        MatchFn match = MatchFnDefault,\n+        std::optional<std::chrono::milliseconds> timeout = std::nullopt);\n+\n+    ~DebugLogHelper();\n+\n+private:\n     const std::string m_message;\n-    bool m_found{false};\n+    const std::optional<std::chrono::milliseconds> m_timeout;\n+    // Mutex + LOCK() is not usable here because LOCK() may print to the log\n+    // itself (see DEBUG_LOCKCONTENTION) causing a deadlock between this mutex\n+    // and BCLog::Logger::m_cs which is acquired when logging a message.\n+    StdMutex m_mutex;\n+    std::condition_variable_any m_cv;\n+    bool m_found GUARDED_BY(m_mutex){false};\n     std::list<std::function<void(const std::string&)>>::iterator m_print_connection;\n \n     //! Custom match checking function.\n     //!\n     //! Invoked with pointers to lines containing matching strings, and with\n-    //! null if check_found() is called without any successful match.\n+    //! nullptr if ~DebugLogHelper() is called without any successful match.\n     //!\n     //! Can return true to enable default DebugLogHelper behavior of:\n     //! (1) ending search after first successful match, and\n-    //! (2) raising an error in check_found if no match was found\n+    //! (2) raising an error in ~DebugLogHelper() if no match was found (will be called with nullptr then)\n     //! Can return false to do the opposite in either case.\n-    using MatchFn = std::function<bool(const std::string* line)>;\n     MatchFn m_match;\n \n-    void check_found();\n-\n-public:\n-    explicit DebugLogHelper(std::string message, MatchFn match = [](const std::string*){ return true; });\n-    ~DebugLogHelper() { check_found(); }\n+    bool m_receiving_log;\n+    void StopReceivingLog();\n };\n \n #define ASSERT_DEBUG_LOG(message) DebugLogHelper UNIQUE_NAME(debugloghelper)(message)\n \n+#define ASSERT_DEBUG_LOG_WAIT(message, timeout) \\",
      "path": "src/test/util/logging.h",
      "position": 68,
      "original_position": 68,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "55c84c2d3bff09784ad127aba68a166f3f36f215",
      "in_reply_to_id": 1269641610,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If `ProcessMessagesOnce()` is called directly, then it will not be an end-to-end test. It will defeat the purpose of this PR.\r\n\r\nSending ping and waiting for pong (`sync_with_ping`) might be an alternative. It is not as flexible and fine-grained though as waiting for a particular log message to be logged and it involves a timeout too (which could expire too soon on slow platforms). What would be the advantage of a `sync_with_ping` approach? I have to think about this.",
      "created_at": "2023-07-21T12:35:34Z",
      "updated_at": "2023-07-21T12:35:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1270627453",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270627453"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 63,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270656464",
      "pull_request_review_id": 1541125356,
      "id": 1270656464,
      "node_id": "PRRC_kwDOABII585LvK3Q",
      "diff_hunk": "@@ -5,37 +5,62 @@\n #ifndef BITCOIN_TEST_UTIL_LOGGING_H\n #define BITCOIN_TEST_UTIL_LOGGING_H\n \n+#include <sync.h>\n #include <util/macros.h>\n \n+#include <chrono>\n+#include <condition_variable>\n #include <functional>\n #include <list>\n+#include <optional>\n #include <string>\n \n class DebugLogHelper\n {\n+public:\n+    using MatchFn = std::function<bool(const std::string* line)>;\n+\n+    static bool MatchFnDefault(const std::string*)\n+    {\n+        return true;\n+    }\n+\n+    explicit DebugLogHelper(\n+        std::string message,\n+        MatchFn match = MatchFnDefault,\n+        std::optional<std::chrono::milliseconds> timeout = std::nullopt);\n+\n+    ~DebugLogHelper();\n+\n+private:\n     const std::string m_message;\n-    bool m_found{false};\n+    const std::optional<std::chrono::milliseconds> m_timeout;\n+    // Mutex + LOCK() is not usable here because LOCK() may print to the log\n+    // itself (see DEBUG_LOCKCONTENTION) causing a deadlock between this mutex\n+    // and BCLog::Logger::m_cs which is acquired when logging a message.\n+    StdMutex m_mutex;\n+    std::condition_variable_any m_cv;\n+    bool m_found GUARDED_BY(m_mutex){false};\n     std::list<std::function<void(const std::string&)>>::iterator m_print_connection;\n \n     //! Custom match checking function.\n     //!\n     //! Invoked with pointers to lines containing matching strings, and with\n-    //! null if check_found() is called without any successful match.\n+    //! nullptr if ~DebugLogHelper() is called without any successful match.\n     //!\n     //! Can return true to enable default DebugLogHelper behavior of:\n     //! (1) ending search after first successful match, and\n-    //! (2) raising an error in check_found if no match was found\n+    //! (2) raising an error in ~DebugLogHelper() if no match was found (will be called with nullptr then)\n     //! Can return false to do the opposite in either case.\n-    using MatchFn = std::function<bool(const std::string* line)>;\n     MatchFn m_match;\n \n-    void check_found();\n-\n-public:\n-    explicit DebugLogHelper(std::string message, MatchFn match = [](const std::string*){ return true; });\n-    ~DebugLogHelper() { check_found(); }\n+    bool m_receiving_log;\n+    void StopReceivingLog();\n };\n \n #define ASSERT_DEBUG_LOG(message) DebugLogHelper UNIQUE_NAME(debugloghelper)(message)\n \n+#define ASSERT_DEBUG_LOG_WAIT(message, timeout) \\",
      "path": "src/test/util/logging.h",
      "position": 68,
      "original_position": 68,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "55c84c2d3bff09784ad127aba68a166f3f36f215",
      "in_reply_to_id": 1269641610,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> If ProcessMessagesOnce() is called directly, then it will not be an end-to-end test. It will defeat the purpose of this PR.\r\n\r\nMakes sense. I guess I misunderstood the goal of this pull. So the goal is to mimic the functional tests that already do the same checks, but do it without spinning up a real socket, but use a mocked socket?",
      "created_at": "2023-07-21T13:06:54Z",
      "updated_at": "2023-07-21T13:06:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1270656464",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270656464"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 63,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270787350",
      "pull_request_review_id": 1541337490,
      "id": 1270787350,
      "node_id": "PRRC_kwDOABII585Lvq0W",
      "diff_hunk": "@@ -5,37 +5,62 @@\n #ifndef BITCOIN_TEST_UTIL_LOGGING_H\n #define BITCOIN_TEST_UTIL_LOGGING_H\n \n+#include <sync.h>\n #include <util/macros.h>\n \n+#include <chrono>\n+#include <condition_variable>\n #include <functional>\n #include <list>\n+#include <optional>\n #include <string>\n \n class DebugLogHelper\n {\n+public:\n+    using MatchFn = std::function<bool(const std::string* line)>;\n+\n+    static bool MatchFnDefault(const std::string*)\n+    {\n+        return true;\n+    }\n+\n+    explicit DebugLogHelper(\n+        std::string message,\n+        MatchFn match = MatchFnDefault,\n+        std::optional<std::chrono::milliseconds> timeout = std::nullopt);\n+\n+    ~DebugLogHelper();\n+\n+private:\n     const std::string m_message;\n-    bool m_found{false};\n+    const std::optional<std::chrono::milliseconds> m_timeout;\n+    // Mutex + LOCK() is not usable here because LOCK() may print to the log\n+    // itself (see DEBUG_LOCKCONTENTION) causing a deadlock between this mutex\n+    // and BCLog::Logger::m_cs which is acquired when logging a message.\n+    StdMutex m_mutex;\n+    std::condition_variable_any m_cv;\n+    bool m_found GUARDED_BY(m_mutex){false};\n     std::list<std::function<void(const std::string&)>>::iterator m_print_connection;\n \n     //! Custom match checking function.\n     //!\n     //! Invoked with pointers to lines containing matching strings, and with\n-    //! null if check_found() is called without any successful match.\n+    //! nullptr if ~DebugLogHelper() is called without any successful match.\n     //!\n     //! Can return true to enable default DebugLogHelper behavior of:\n     //! (1) ending search after first successful match, and\n-    //! (2) raising an error in check_found if no match was found\n+    //! (2) raising an error in ~DebugLogHelper() if no match was found (will be called with nullptr then)\n     //! Can return false to do the opposite in either case.\n-    using MatchFn = std::function<bool(const std::string* line)>;\n     MatchFn m_match;\n \n-    void check_found();\n-\n-public:\n-    explicit DebugLogHelper(std::string message, MatchFn match = [](const std::string*){ return true; });\n-    ~DebugLogHelper() { check_found(); }\n+    bool m_receiving_log;\n+    void StopReceivingLog();\n };\n \n #define ASSERT_DEBUG_LOG(message) DebugLogHelper UNIQUE_NAME(debugloghelper)(message)\n \n+#define ASSERT_DEBUG_LOG_WAIT(message, timeout) \\",
      "path": "src/test/util/logging.h",
      "position": 68,
      "original_position": 68,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "55c84c2d3bff09784ad127aba68a166f3f36f215",
      "in_reply_to_id": 1269641610,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes. My idea is to complement the functional tests, not obsolete them.\r\n\r\nIn general, when the test is run from inside the same process then we have greater control of what happens - we can inspect variables and check state in more detail than a functional test can do from outside of `bitcoind` - it has to use the RPC. Also, from inside the process we can alter the state by modifying variables or calling certain functions that is not possible from outside of the process.",
      "created_at": "2023-07-21T15:06:37Z",
      "updated_at": "2023-07-21T15:06:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1270787350",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270787350"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 63,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294877491",
      "pull_request_review_id": 1579017328,
      "id": 1294877491,
      "node_id": "PRRC_kwDOABII585NLkMz",
      "diff_hunk": "@@ -16,16 +16,30 @@ DebugLogHelper::DebugLogHelper(std::string message, MatchFn match)\n     m_print_connection = LogInstance().PushBackCallback(\n         [this](const std::string& s) {\n             if (m_found) return;\n-            m_found = s.find(m_message) != std::string::npos && m_match(&s);\n+            m_found = s.find(m_message) != std::string::npos && m_match(s);\n         });\n     noui_test_redirect();\n+    m_receiving_log = true;\n }\n \n-void DebugLogHelper::check_found()\n+DebugLogHelper::~DebugLogHelper()\n {\n-    noui_reconnect();\n-    LogInstance().DeleteCallback(m_print_connection);\n-    if (!m_found && m_match(nullptr)) {\n+    StopReceivingLog();\n+}\n+\n+void DebugLogHelper::EndAndThrowIfNotFound()\n+{\n+    StopReceivingLog();\n+    if (!m_found) {\n         throw std::runtime_error(strprintf(\"'%s' not found in debug log\\n\", m_message));",
      "path": "src/test/util/logging.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "d2f46c705540c74c2b6f83a66535c3ead1cb95d4",
      "in_reply_to_id": 1263332063,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Marking this as \"resolved\" because I reverted to the original interface of `ASSERT_DEBUG_LOG()` and changed the exception from the destructor to `std::abort()`.\r\n\r\nLet me know if you still have concerns (aka if I should \"unresolve\" it). Thanks, it looks better now!",
      "created_at": "2023-08-15T16:56:56Z",
      "updated_at": "2023-08-15T16:56:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1294877491",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294877491"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294895356",
      "pull_request_review_id": 1579044615,
      "id": 1294895356,
      "node_id": "PRRC_kwDOABII585NLoj8",
      "diff_hunk": "@@ -5,37 +5,62 @@\n #ifndef BITCOIN_TEST_UTIL_LOGGING_H\n #define BITCOIN_TEST_UTIL_LOGGING_H\n \n+#include <sync.h>\n #include <util/macros.h>\n \n+#include <chrono>\n+#include <condition_variable>\n #include <functional>\n #include <list>\n+#include <optional>\n #include <string>\n \n class DebugLogHelper\n {\n+public:\n+    using MatchFn = std::function<bool(const std::string* line)>;\n+\n+    static bool MatchFnDefault(const std::string*)\n+    {\n+        return true;\n+    }\n+\n+    explicit DebugLogHelper(\n+        std::string message,\n+        MatchFn match = MatchFnDefault,\n+        std::optional<std::chrono::milliseconds> timeout = std::nullopt);\n+\n+    ~DebugLogHelper();\n+\n+private:\n     const std::string m_message;\n-    bool m_found{false};\n+    const std::optional<std::chrono::milliseconds> m_timeout;\n+    // Mutex + LOCK() is not usable here because LOCK() may print to the log\n+    // itself (see DEBUG_LOCKCONTENTION) causing a deadlock between this mutex\n+    // and BCLog::Logger::m_cs which is acquired when logging a message.\n+    StdMutex m_mutex;\n+    std::condition_variable_any m_cv;\n+    bool m_found GUARDED_BY(m_mutex){false};\n     std::list<std::function<void(const std::string&)>>::iterator m_print_connection;\n \n     //! Custom match checking function.\n     //!\n     //! Invoked with pointers to lines containing matching strings, and with\n-    //! null if check_found() is called without any successful match.\n+    //! nullptr if ~DebugLogHelper() is called without any successful match.\n     //!\n     //! Can return true to enable default DebugLogHelper behavior of:\n     //! (1) ending search after first successful match, and\n-    //! (2) raising an error in check_found if no match was found\n+    //! (2) raising an error in ~DebugLogHelper() if no match was found (will be called with nullptr then)\n     //! Can return false to do the opposite in either case.\n-    using MatchFn = std::function<bool(const std::string* line)>;\n     MatchFn m_match;\n \n-    void check_found();\n-\n-public:\n-    explicit DebugLogHelper(std::string message, MatchFn match = [](const std::string*){ return true; });\n-    ~DebugLogHelper() { check_found(); }\n+    bool m_receiving_log;\n+    void StopReceivingLog();\n };\n \n #define ASSERT_DEBUG_LOG(message) DebugLogHelper UNIQUE_NAME(debugloghelper)(message)\n \n+#define ASSERT_DEBUG_LOG_WAIT(message, timeout) \\",
      "path": "src/test/util/logging.h",
      "position": 68,
      "original_position": 68,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "55c84c2d3bff09784ad127aba68a166f3f36f215",
      "in_reply_to_id": 1269641610,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "When one thread waits for another to execute a _particular line of code_, if that line of code is not executed for some time the waiting thread has to assume a timeout failure. I.e. some waiting is unavoidable, I am leaving the code as it is.\r\n\r\nDo you consider this resolved?",
      "created_at": "2023-08-15T17:16:50Z",
      "updated_at": "2023-08-15T17:16:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1294895356",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294895356"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 63,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294901116",
      "pull_request_review_id": 1579053459,
      "id": 1294901116,
      "node_id": "PRRC_kwDOABII585NLp98",
      "diff_hunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/connection_types.h>\n+#include <primitives/transaction.h>\n+#include <protocol.h>\n+#include <script/script.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <util/chaintype.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <algorithm>\n+#include <cstdlib>\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+#include <string.h>\n+#include <string>\n+#include <string_view>\n+#include <vector>\n+\n+// There are two sets of tests:\n+// - direct: pass the fuzzed message directly to PeerManager::ProcessMessage() (fuzz/process_message.cpp)\n+// - e2e: send the fuzzed message to a mocked socket which is read from Connman\n+//   and processed by PeerManager (like it is happening in the \"real world\") (fuzz/process_message_e2e.cpp)\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+std::string_view LIMIT_TO_MESSAGE_TYPE{};\n+} // namespace\n+\n+void initialize_process_message_e2e()\n+{\n+    if (const auto val{std::getenv(\"LIMIT_TO_MESSAGE_TYPE\")}) {\n+        LIMIT_TO_MESSAGE_TYPE = val;\n+        Assert(std::count(getAllNetMessageTypes().begin(), getAllNetMessageTypes().end(), LIMIT_TO_MESSAGE_TYPE)); // Unknown message type passed\n+    }\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>(\n+            /*chain_type=*/ChainType::REGTEST,\n+            /*extra_args=*/{\"-txreconciliation\"});\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+FUZZ_TARGET(process_message_e2e, .init = initialize_process_message_e2e)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE).c_str()};\n+    if (!LIMIT_TO_MESSAGE_TYPE.empty() && random_message_type != LIMIT_TO_MESSAGE_TYPE) {\n+        return;\n+    }\n+\n+    SetMockTime(GetMockTime() + std::chrono::minutes{fuzzed_data_provider.ConsumeIntegral<uint8_t>()});",
      "path": "src/test/fuzz/process_message_e2e.cpp",
      "position": null,
      "original_position": 68,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "55c84c2d3bff09784ad127aba68a166f3f36f215",
      "in_reply_to_id": 1269953546,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a comment.",
      "created_at": "2023-08-15T17:23:14Z",
      "updated_at": "2023-08-15T17:23:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1294901116",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294901116"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294906169",
      "pull_request_review_id": 1579061412,
      "id": 1294906169,
      "node_id": "PRRC_kwDOABII585NLrM5",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/connection_types.h>\n+#include <primitives/transaction.h>\n+#include <protocol.h>\n+#include <script/script.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <util/chaintype.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <algorithm>\n+#include <cstdlib>\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+#include <string.h>\n+#include <string>\n+#include <string_view>\n+#include <vector>\n+\n+// There are two sets of tests:\n+// - direct: pass the fuzzed message directly to PeerManager::ProcessMessage() (fuzz/process_message.cpp)\n+// - e2e: send the fuzzed message to a mocked socket which is read from Connman\n+//   and processed by PeerManager (like it is happening in the \"real world\") (fuzz/process_message_e2e.cpp)\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+std::string_view LIMIT_TO_MESSAGE_TYPE{};\n+} // namespace\n+\n+void initialize_process_message_e2e()\n+{\n+    if (const auto val{std::getenv(\"LIMIT_TO_MESSAGE_TYPE\")}) {\n+        LIMIT_TO_MESSAGE_TYPE = val;\n+        Assert(std::count(getAllNetMessageTypes().begin(), getAllNetMessageTypes().end(), LIMIT_TO_MESSAGE_TYPE)); // Unknown message type passed\n+    }\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>(\n+            /*chain_type=*/ChainType::REGTEST,\n+            /*extra_args=*/{\"-txreconciliation\"});\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+FUZZ_TARGET(process_message_e2e, .init = initialize_process_message_e2e)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE).c_str()};\n+    if (!LIMIT_TO_MESSAGE_TYPE.empty() && random_message_type != LIMIT_TO_MESSAGE_TYPE) {\n+        return;\n+    }\n+\n+    // any time to successfully reset ibd; use a time in the future because Connman is already running\n+    SetMockTime(GetMockTime() + std::chrono::minutes{fuzzed_data_provider.ConsumeIntegral<uint8_t>()});",
      "path": "src/test/fuzz/process_message_e2e.cpp",
      "position": null,
      "original_position": 69,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "ca7a9983eb2115c1c64f295508e96b0d188b7004",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ConsumeIntegral can return 0, so this won't be in the future. Can just drop ConsumeIntegral completely?",
      "created_at": "2023-08-15T17:29:01Z",
      "updated_at": "2023-08-15T17:29:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1294906169",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1294906169"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1295738148",
      "pull_request_review_id": 1580352153,
      "id": 1295738148,
      "node_id": "PRRC_kwDOABII585NO2Uk",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/connection_types.h>\n+#include <primitives/transaction.h>\n+#include <protocol.h>\n+#include <script/script.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <util/chaintype.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <algorithm>\n+#include <cstdlib>\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+#include <string.h>\n+#include <string>\n+#include <string_view>\n+#include <vector>\n+\n+// There are two sets of tests:\n+// - direct: pass the fuzzed message directly to PeerManager::ProcessMessage() (fuzz/process_message.cpp)\n+// - e2e: send the fuzzed message to a mocked socket which is read from Connman\n+//   and processed by PeerManager (like it is happening in the \"real world\") (fuzz/process_message_e2e.cpp)\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+std::string_view LIMIT_TO_MESSAGE_TYPE{};\n+} // namespace\n+\n+void initialize_process_message_e2e()\n+{\n+    if (const auto val{std::getenv(\"LIMIT_TO_MESSAGE_TYPE\")}) {\n+        LIMIT_TO_MESSAGE_TYPE = val;\n+        Assert(std::count(getAllNetMessageTypes().begin(), getAllNetMessageTypes().end(), LIMIT_TO_MESSAGE_TYPE)); // Unknown message type passed\n+    }\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>(\n+            /*chain_type=*/ChainType::REGTEST,\n+            /*extra_args=*/{\"-txreconciliation\"});\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+FUZZ_TARGET(process_message_e2e, .init = initialize_process_message_e2e)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE).c_str()};\n+    if (!LIMIT_TO_MESSAGE_TYPE.empty() && random_message_type != LIMIT_TO_MESSAGE_TYPE) {\n+        return;\n+    }\n+\n+    // any time to successfully reset ibd; use a time in the future because Connman is already running\n+    SetMockTime(GetMockTime() + std::chrono::minutes{fuzzed_data_provider.ConsumeIntegral<uint8_t>()});",
      "path": "src/test/fuzz/process_message_e2e.cpp",
      "position": null,
      "original_position": 69,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "ca7a9983eb2115c1c64f295508e96b0d188b7004",
      "in_reply_to_id": 1294906169,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I stared at this a bit and realized it does not make sense without the `ResetIbd()` call and further, the point is to jump out of IBD at some point later during the test (by changing the mock time so that it is near or before the chain tip). Added that and some comments.",
      "created_at": "2023-08-16T11:11:05Z",
      "updated_at": "2023-08-16T11:11:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1295738148",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1295738148"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1327263989",
      "pull_request_review_id": 1628916898,
      "id": 1327263989,
      "node_id": "PRRC_kwDOABII585PHHD1",
      "diff_hunk": "@@ -5,37 +5,62 @@\n #ifndef BITCOIN_TEST_UTIL_LOGGING_H\n #define BITCOIN_TEST_UTIL_LOGGING_H\n \n+#include <sync.h>\n #include <util/macros.h>\n \n+#include <chrono>\n+#include <condition_variable>\n #include <functional>\n #include <list>\n+#include <optional>\n #include <string>\n \n class DebugLogHelper\n {\n+public:\n+    using MatchFn = std::function<bool(const std::string* line)>;\n+\n+    static bool MatchFnDefault(const std::string*)\n+    {\n+        return true;\n+    }\n+\n+    explicit DebugLogHelper(\n+        std::string message,\n+        MatchFn match = MatchFnDefault,\n+        std::optional<std::chrono::milliseconds> timeout = std::nullopt);\n+\n+    ~DebugLogHelper();\n+\n+private:\n     const std::string m_message;\n-    bool m_found{false};\n+    const std::optional<std::chrono::milliseconds> m_timeout;\n+    // Mutex + LOCK() is not usable here because LOCK() may print to the log\n+    // itself (see DEBUG_LOCKCONTENTION) causing a deadlock between this mutex\n+    // and BCLog::Logger::m_cs which is acquired when logging a message.\n+    StdMutex m_mutex;\n+    std::condition_variable_any m_cv;\n+    bool m_found GUARDED_BY(m_mutex){false};\n     std::list<std::function<void(const std::string&)>>::iterator m_print_connection;\n \n     //! Custom match checking function.\n     //!\n     //! Invoked with pointers to lines containing matching strings, and with\n-    //! null if check_found() is called without any successful match.\n+    //! nullptr if ~DebugLogHelper() is called without any successful match.\n     //!\n     //! Can return true to enable default DebugLogHelper behavior of:\n     //! (1) ending search after first successful match, and\n-    //! (2) raising an error in check_found if no match was found\n+    //! (2) raising an error in ~DebugLogHelper() if no match was found (will be called with nullptr then)\n     //! Can return false to do the opposite in either case.\n-    using MatchFn = std::function<bool(const std::string* line)>;\n     MatchFn m_match;\n \n-    void check_found();\n-\n-public:\n-    explicit DebugLogHelper(std::string message, MatchFn match = [](const std::string*){ return true; });\n-    ~DebugLogHelper() { check_found(); }\n+    bool m_receiving_log;\n+    void StopReceivingLog();\n };\n \n #define ASSERT_DEBUG_LOG(message) DebugLogHelper UNIQUE_NAME(debugloghelper)(message)\n \n+#define ASSERT_DEBUG_LOG_WAIT(message, timeout) \\",
      "path": "src/test/util/logging.h",
      "position": 68,
      "original_position": 68,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "55c84c2d3bff09784ad127aba68a166f3f36f215",
      "in_reply_to_id": 1269641610,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Marking this as resolved. Comment if you think it is not.",
      "created_at": "2023-09-15T13:06:32Z",
      "updated_at": "2023-09-15T13:06:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1327263989",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1327263989"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 63,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1412789203",
      "pull_request_review_id": 1760862647,
      "id": 1412789203,
      "node_id": "PRRC_kwDOABII585UNXPT",
      "diff_hunk": "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <chrono>\n+#include <string>\n+#include <thread>\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+} // namespace\n+\n+static size_t& GetNumMsgTypes()\n+{\n+    static size_t g_num_msg_types{0};\n+    return g_num_msg_types;\n+}\n+#define FUZZ_TARGET_MSG(msg_type)                          \\\n+    struct msg_type##CountBeforeMain {                     \\\n+        msg_type##CountBeforeMain()                        \\\n+        {                                                  \\\n+            ++GetNumMsgTypes();                            \\\n+        }                                                  \\\n+    } const static g_##msg_type##count_before_main;        \\\n+    FUZZ_TARGET_INIT(netmsg_##msg_type, initialize_netmsg) \\\n+    {                                                      \\\n+        fuzz_target(buffer, #msg_type);                    \\\n+    }\n+\n+void initialize_netmsg()\n+{\n+    Assert(GetNumMsgTypes() == getAllNetMessageTypes().size()); // If this fails, add or remove the message type below\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+static void fuzz_target(FuzzBufferType buffer, const std::string& limit_to_message_type)",
      "path": "src/test/fuzz/netmsg.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "9b7e9dad271167af913828aaf3b75a9942770a34",
      "in_reply_to_id": 1061894472,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"resolving\" this thread because I removed the fuzz tests from this PR",
      "created_at": "2023-12-02T11:58:50Z",
      "updated_at": "2023-12-02T11:58:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1412789203",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1412789203"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1494319538",
      "pull_request_review_id": 1888057050,
      "id": 1494319538,
      "node_id": "PRRC_kwDOABII585ZEYGy",
      "diff_hunk": "@@ -198,4 +201,105 @@ class StaticContentsSock : public ZeroSock\n     mutable size_t m_consumed{0};\n };\n \n+/**\n+ * A mocked Sock alternative that allows providing the data to be returned by Recv()\n+ * and inspecting the data that has been supplied to Send().\n+ */\n+class DynSock : public ZeroSock\n+{\n+public:\n+    /**\n+     * Unidirectional bytes or CNetMessage queue (FIFO).\n+     */\n+    class Pipe\n+    {\n+    public:\n+        /**\n+         * Get bytes and remove them from the pipe.\n+         * @param[in] buf Destination to write bytes to.\n+         * @param[in] len Write up to this number of bytes.\n+         * @param[in] flags Same as the flags of `recv(2)`. Just `MSG_PEEK` is honored.\n+         * @return The number of bytes written to `buf`. `0` if `Eof()` has been called.\n+         * If no bytes are available then `-1` is returned and `errno` is set to `EAGAIN`.\n+         */\n+        ssize_t GetBytes(void* buf, size_t len, int flags = 0) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\n+\n+        /**\n+         * Deserialize a `CNetMessage` and remove it from the pipe.\n+         * If not enough bytes are available then the function will wait. If parsing fails\n+         * or EOF is signaled to the pipe, then `std::nullopt` is returned.\n+         */\n+        std::optional<CNetMessage> GetNetMsg() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);",
      "path": "src/test/util/net.h",
      "position": 199,
      "original_position": 52,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "f42e4f3b3b4b3ca1945d1ea298b443f1cecaf2ea",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "f42e4f3b3b4b3ca1945d1ea298b443f1cecaf2ea: this only works with v1 transport. In both v2 transport and the (proposed) Stratum v2 transport (#29432) bytes on the wire need further processing to reconstruct the underlying message.\r\n\r\nFor those it's more useful to have a `GetBytes(size_t n)` helper method that waits until `n` bytes have been received.\r\n\r\n(Specifically for the Stratum v2 I'm also trying to completely avoid a dependency on `CNetMessage`, but the design for that is still in flux)",
      "created_at": "2024-02-19T10:16:34Z",
      "updated_at": "2024-02-19T10:18:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1494319538",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1494319538"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 235,
      "original_line": 235,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504500723",
      "pull_request_review_id": 1903958786,
      "id": 1504500723,
      "node_id": "PRRC_kwDOABII585ZrNvz",
      "diff_hunk": "@@ -198,4 +201,105 @@ class StaticContentsSock : public ZeroSock\n     mutable size_t m_consumed{0};\n };\n \n+/**\n+ * A mocked Sock alternative that allows providing the data to be returned by Recv()\n+ * and inspecting the data that has been supplied to Send().\n+ */\n+class DynSock : public ZeroSock\n+{\n+public:\n+    /**\n+     * Unidirectional bytes or CNetMessage queue (FIFO).\n+     */\n+    class Pipe\n+    {\n+    public:\n+        /**\n+         * Get bytes and remove them from the pipe.\n+         * @param[in] buf Destination to write bytes to.\n+         * @param[in] len Write up to this number of bytes.\n+         * @param[in] flags Same as the flags of `recv(2)`. Just `MSG_PEEK` is honored.\n+         * @return The number of bytes written to `buf`. `0` if `Eof()` has been called.\n+         * If no bytes are available then `-1` is returned and `errno` is set to `EAGAIN`.\n+         */\n+        ssize_t GetBytes(void* buf, size_t len, int flags = 0) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\n+\n+        /**\n+         * Deserialize a `CNetMessage` and remove it from the pipe.\n+         * If not enough bytes are available then the function will wait. If parsing fails\n+         * or EOF is signaled to the pipe, then `std::nullopt` is returned.\n+         */\n+        std::optional<CNetMessage> GetNetMsg() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);",
      "path": "src/test/util/net.h",
      "position": 199,
      "original_position": 52,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "f42e4f3b3b4b3ca1945d1ea298b443f1cecaf2ea",
      "in_reply_to_id": 1494319538,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Like this?\r\n\r\n<details>\r\n<summary>Add GetBytesWait()</summary>\r\n\r\n```diff\r\ncommit 2e8674478813e2e672e5eb7dbb87f28ee11a7268\r\nParent: ad806a0969226806bb33a890356b89e39904c1a8\r\nAuthor:     Vasil Dimov <vd@FreeBSD.org>\r\nAuthorDate: Tue Feb 27 14:59:04 2024 +0100\r\nCommit:     Vasil Dimov <vd@FreeBSD.org>\r\nCommitDate: Tue Feb 27 15:48:18 2024 +0100\r\ngpg: Signature made Tue Feb 27 15:48:19 2024 CET\r\ngpg:                using RSA key E64D8D45614DB07545D9CCC154DF06F64B55CBBF\r\ngpg: Good signature from \"Vasil Dimov <vd@myforest.net>\" [ultimate]\r\ngpg:                 aka \"Vasil Dimov <vd@FreeBSD.org>\" [ultimate]\r\ngpg:                 aka \"Vasil Dimov <vasild@gmail.com>\" [ultimate]\r\n\r\n\r\n    test: add blocking \"get bytes\" method to DynSock\r\n\r\ndiff --git a/src/test/util/net.h b/src/test/util/net.h\r\nindex 368c84d622..d03674cb23 100644\r\n--- a/src/test/util/net.h\r\n+++ b/src/test/util/net.h\r\n@@ -224,12 +224,20 @@ public:\r\n          * @param[in] flags Same as the flags of `recv(2)`. Just `MSG_PEEK` is honored.\r\n          * @return The number of bytes written to `buf`. `0` if `Eof()` has been called.\r\n          * If no bytes are available then `-1` is returned and `errno` is set to `EAGAIN`.\r\n          */\r\n         ssize_t GetBytes(void* buf, size_t len, int flags = 0) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\r\n \r\n+        /**\r\n+         * Wait for `len` bytes and remove them from the pipe.\r\n+         * @param[in] buf Destination to write bytes to.\r\n+         * @param[in] len Write this number of bytes to `buf` or less if EOF is signaled.\r\n+         * @return The number of bytes written to `buf`. Less than `len` means EOF was signaled.\r\n+         */\r\n+        size_t GetBytesWait(void* buf, size_t len) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\r\n+\r\n         /**\r\n          * Deserialize a `CNetMessage` and remove it from the pipe.\r\n          * If not enough bytes are available then the function will wait. If parsing fails\r\n          * or EOF is signaled to the pipe, then `std::nullopt` is returned.\r\n          */\r\n         std::optional<CNetMessage> GetNetMsg() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\r\n@@ -243,13 +251,13 @@ public:\r\n          * Construct and push CNetMessage to the pipe.\r\n          */\r\n         template <typename... Args>\r\n         void PushNetMsg(const std::string& type, Args&&... payload) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\r\n \r\n         /**\r\n-         * Signal end-of-file on the receiving end (`GetBytes()` or `GetNetMsg()`).\r\n+         * Signal end-of-file on the receiving end (`GetBytes()`, `GetBytesWait()` or `GetNetMsg()`).\r\n          */\r\n         void Eof() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\r\n \r\n     private:\r\n         /**\r\n          * Return when there is some data to read or EOF has been signaled.\r\ndiff --git a/src/test/util/net.cpp b/src/test/util/net.cpp\r\nindex 0fee2041f0..2bd4815e89 100644\r\n--- a/src/test/util/net.cpp\r\n+++ b/src/test/util/net.cpp\r\n@@ -256,12 +256,31 @@ ssize_t DynSock::Pipe::GetBytes(void* buf, size_t len, int flags)\r\n         m_data.erase(m_data.begin(), m_data.begin() + read_bytes);\r\n     }\r\n \r\n     return read_bytes;\r\n }\r\n \r\n+size_t DynSock::Pipe::GetBytesWait(void* buf, size_t len)\r\n+{\r\n+    WAIT_LOCK(m_mutex, lock);\r\n+\r\n+    size_t total_read_bytes{0};\r\n+\r\n+    do {\r\n+        WaitForDataOrEof(lock);\r\n+        if (!m_data.empty()) {\r\n+            const size_t read_bytes{std::min(len - total_read_bytes, m_data.size())};\r\n+            std::memcpy(reinterpret_cast<uint8_t*>(buf) + total_read_bytes, m_data.data(), read_bytes);\r\n+            m_data.erase(m_data.begin(), m_data.begin() + read_bytes);\r\n+            total_read_bytes += read_bytes;\r\n+        }\r\n+    } while (total_read_bytes < len && !m_eof);\r\n+\r\n+    return total_read_bytes;\r\n+}\r\n+\r\n std::optional<CNetMessage> DynSock::Pipe::GetNetMsg()\r\n {\r\n     V1Transport transport{NodeId{0}};\r\n \r\n     {\r\n         WAIT_LOCK(m_mutex, lock);\r\n@@ -309,12 +328,22 @@ void DynSock::Pipe::Eof()\r\n {\r\n     LOCK(m_mutex);\r\n     m_eof = true;\r\n     m_cond.notify_all();\r\n }\r\n \r\n+void DynSock::Pipe::WaitForDataOrEof(UniqueLock<Mutex>& lock)\r\n+{\r\n+    Assert(lock.mutex() == &m_mutex);\r\n+\r\n+    m_cond.wait(lock, [&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) {\r\n+        AssertLockHeld(m_mutex);\r\n+        return !m_data.empty() || m_eof;\r\n+    });\r\n+}\r\n+\r\n DynSock::DynSock(std::shared_ptr<Pipes> pipes) : m_pipes{pipes} {}\r\n \r\n DynSock::~DynSock()\r\n {\r\n     m_pipes->send.Eof();\r\n }\r\n```\r\n\r\nI did not add that method in this PR because it would be unused. Can be added any time later as part of a PR that needs it.",
      "created_at": "2024-02-27T15:53:32Z",
      "updated_at": "2024-02-27T15:53:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1504500723",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504500723"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 235,
      "original_line": 235,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504531521",
      "pull_request_review_id": 1904009575,
      "id": 1504531521,
      "node_id": "PRRC_kwDOABII585ZrVRB",
      "diff_hunk": "@@ -198,4 +201,105 @@ class StaticContentsSock : public ZeroSock\n     mutable size_t m_consumed{0};\n };\n \n+/**\n+ * A mocked Sock alternative that allows providing the data to be returned by Recv()\n+ * and inspecting the data that has been supplied to Send().\n+ */\n+class DynSock : public ZeroSock\n+{\n+public:\n+    /**\n+     * Unidirectional bytes or CNetMessage queue (FIFO).\n+     */\n+    class Pipe\n+    {\n+    public:\n+        /**\n+         * Get bytes and remove them from the pipe.\n+         * @param[in] buf Destination to write bytes to.\n+         * @param[in] len Write up to this number of bytes.\n+         * @param[in] flags Same as the flags of `recv(2)`. Just `MSG_PEEK` is honored.\n+         * @return The number of bytes written to `buf`. `0` if `Eof()` has been called.\n+         * If no bytes are available then `-1` is returned and `errno` is set to `EAGAIN`.\n+         */\n+        ssize_t GetBytes(void* buf, size_t len, int flags = 0) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\n+\n+        /**\n+         * Deserialize a `CNetMessage` and remove it from the pipe.\n+         * If not enough bytes are available then the function will wait. If parsing fails\n+         * or EOF is signaled to the pipe, then `std::nullopt` is returned.\n+         */\n+        std::optional<CNetMessage> GetNetMsg() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);",
      "path": "src/test/util/net.h",
      "position": 199,
      "original_position": 52,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "f42e4f3b3b4b3ca1945d1ea298b443f1cecaf2ea",
      "in_reply_to_id": 1494319538,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Something like that yes. Maybe it can be included and used a helper function by `GetNetMsg`? ",
      "created_at": "2024-02-27T16:09:06Z",
      "updated_at": "2024-02-27T16:09:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1504531521",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504531521"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 235,
      "original_line": 235,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504541717",
      "pull_request_review_id": 1904027167,
      "id": 1504541717,
      "node_id": "PRRC_kwDOABII585ZrXwV",
      "diff_hunk": "@@ -198,4 +201,105 @@ class StaticContentsSock : public ZeroSock\n     mutable size_t m_consumed{0};\n };\n \n+/**\n+ * A mocked Sock alternative that allows providing the data to be returned by Recv()\n+ * and inspecting the data that has been supplied to Send().\n+ */\n+class DynSock : public ZeroSock\n+{\n+public:\n+    /**\n+     * Unidirectional bytes or CNetMessage queue (FIFO).\n+     */\n+    class Pipe\n+    {\n+    public:\n+        /**\n+         * Get bytes and remove them from the pipe.\n+         * @param[in] buf Destination to write bytes to.\n+         * @param[in] len Write up to this number of bytes.\n+         * @param[in] flags Same as the flags of `recv(2)`. Just `MSG_PEEK` is honored.\n+         * @return The number of bytes written to `buf`. `0` if `Eof()` has been called.\n+         * If no bytes are available then `-1` is returned and `errno` is set to `EAGAIN`.\n+         */\n+        ssize_t GetBytes(void* buf, size_t len, int flags = 0) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\n+\n+        /**\n+         * Deserialize a `CNetMessage` and remove it from the pipe.\n+         * If not enough bytes are available then the function will wait. If parsing fails\n+         * or EOF is signaled to the pipe, then `std::nullopt` is returned.\n+         */\n+        std::optional<CNetMessage> GetNetMsg() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);",
      "path": "src/test/util/net.h",
      "position": 199,
      "original_position": 52,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "f42e4f3b3b4b3ca1945d1ea298b443f1cecaf2ea",
      "in_reply_to_id": 1494319538,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I do not think so (or maybe I just don't see it). Inside `GetNetMsg()` we don't know how many bytes are needed. We throw something at `transport.ReceivedBytes()` and it tells us how much of that it consumed.",
      "created_at": "2024-02-27T16:15:34Z",
      "updated_at": "2024-02-27T16:15:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1504541717",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504541717"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 235,
      "original_line": 235,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504561565",
      "pull_request_review_id": 1904059239,
      "id": 1504561565,
      "node_id": "PRRC_kwDOABII585Zrcmd",
      "diff_hunk": "@@ -198,4 +201,105 @@ class StaticContentsSock : public ZeroSock\n     mutable size_t m_consumed{0};\n };\n \n+/**\n+ * A mocked Sock alternative that allows providing the data to be returned by Recv()\n+ * and inspecting the data that has been supplied to Send().\n+ */\n+class DynSock : public ZeroSock\n+{\n+public:\n+    /**\n+     * Unidirectional bytes or CNetMessage queue (FIFO).\n+     */\n+    class Pipe\n+    {\n+    public:\n+        /**\n+         * Get bytes and remove them from the pipe.\n+         * @param[in] buf Destination to write bytes to.\n+         * @param[in] len Write up to this number of bytes.\n+         * @param[in] flags Same as the flags of `recv(2)`. Just `MSG_PEEK` is honored.\n+         * @return The number of bytes written to `buf`. `0` if `Eof()` has been called.\n+         * If no bytes are available then `-1` is returned and `errno` is set to `EAGAIN`.\n+         */\n+        ssize_t GetBytes(void* buf, size_t len, int flags = 0) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\n+\n+        /**\n+         * Deserialize a `CNetMessage` and remove it from the pipe.\n+         * If not enough bytes are available then the function will wait. If parsing fails\n+         * or EOF is signaled to the pipe, then `std::nullopt` is returned.\n+         */\n+        std::optional<CNetMessage> GetNetMsg() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);",
      "path": "src/test/util/net.h",
      "position": 199,
      "original_position": 52,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "f42e4f3b3b4b3ca1945d1ea298b443f1cecaf2ea",
      "in_reply_to_id": 1494319538,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`size_t len` could be an optional argument. Not sure if that otherwise creates a mess though.",
      "created_at": "2024-02-27T16:25:40Z",
      "updated_at": "2024-02-27T16:25:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1504561565",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504561565"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 235,
      "original_line": 235,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504633691",
      "pull_request_review_id": 1904189317,
      "id": 1504633691,
      "node_id": "PRRC_kwDOABII585ZruNb",
      "diff_hunk": "@@ -198,4 +201,105 @@ class StaticContentsSock : public ZeroSock\n     mutable size_t m_consumed{0};\n };\n \n+/**\n+ * A mocked Sock alternative that allows providing the data to be returned by Recv()\n+ * and inspecting the data that has been supplied to Send().\n+ */\n+class DynSock : public ZeroSock\n+{\n+public:\n+    /**\n+     * Unidirectional bytes or CNetMessage queue (FIFO).\n+     */\n+    class Pipe\n+    {\n+    public:\n+        /**\n+         * Get bytes and remove them from the pipe.\n+         * @param[in] buf Destination to write bytes to.\n+         * @param[in] len Write up to this number of bytes.\n+         * @param[in] flags Same as the flags of `recv(2)`. Just `MSG_PEEK` is honored.\n+         * @return The number of bytes written to `buf`. `0` if `Eof()` has been called.\n+         * If no bytes are available then `-1` is returned and `errno` is set to `EAGAIN`.\n+         */\n+        ssize_t GetBytes(void* buf, size_t len, int flags = 0) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\n+\n+        /**\n+         * Deserialize a `CNetMessage` and remove it from the pipe.\n+         * If not enough bytes are available then the function will wait. If parsing fails\n+         * or EOF is signaled to the pipe, then `std::nullopt` is returned.\n+         */\n+        std::optional<CNetMessage> GetNetMsg() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);",
      "path": "src/test/util/net.h",
      "position": 199,
      "original_position": 52,
      "commit_id": "9a158da46cbdda6d4662196121cfc8721062de4f",
      "original_commit_id": "f42e4f3b3b4b3ca1945d1ea298b443f1cecaf2ea",
      "in_reply_to_id": 1494319538,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You mean to combine the two methods `GetBytes()` and `GetBytesWait()`? I considered this but ditched the idea. The bodies of the methods are too different and the `len` argument cannot be omitted as it tells the size of the buffer.",
      "created_at": "2024-02-27T17:00:44Z",
      "updated_at": "2024-02-27T17:00:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1504633691",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504633691"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 235,
      "original_line": 235,
      "side": "RIGHT"
    }
  ]
}