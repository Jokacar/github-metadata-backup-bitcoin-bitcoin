{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721",
    "id": 1010047646,
    "node_id": "PR_kwDOABII5848NBqe",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/25721",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/25721.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/25721.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25721",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25721/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/a23cca56c0a7f4a267915b4beba3af3454c51603",
    "number": 25721,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "refactor: Replace BResult with util::Result",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Rename `BResult` class to `util::Result` and update the class interface to be more compatible with `std::optional` and with a full-featured result class implemented in https://github.com/bitcoin/bitcoin/pull/25665. Motivation for this change is to update existing `BResult` usages now so they don't have to change later when more features are added in https://github.com/bitcoin/bitcoin/pull/25665.\r\n\r\nThis change makes the following improvements originally implemented in https://github.com/bitcoin/bitcoin/pull/25665:\r\n\r\n- More explicit API. Drops potentially misleading `BResult` constructor that treats any bilingual string argument as an error. Adds `util::Error` constructor so it is never ambiguous when a result is being assigned an error or non-error value.\r\n\r\n- Better type compatibility. Supports `util::Result<bilingual_str>` return values to hold translated messages which are not errors.\r\n\r\n- More standard and consistent API. `util::Result` supports most of the same operators and methods as `std::optional`. `BResult` had a less familiar interface with `HasRes`/`GetObj`/`ReleaseObj` methods. The Result/Res/Obj naming was also not internally consistent.\r\n\r\n- Better code organization. Puts `src/util/` code in the `util::` namespace so naming reflects code organization and it is obvious where the class is coming from. Drops \"B\" from name because it is undocumented what it stands for (bilingual?)\r\n\r\n- Has unit tests.\r\n",
    "labels": [
      {
        "id": 135961,
        "node_id": "MDU6TGFiZWwxMzU5NjE=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
        "name": "Refactoring",
        "color": "E6F6D6",
        "default": false
      }
    ],
    "milestone": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54",
      "html_url": "https://github.com/bitcoin/bitcoin/milestone/54",
      "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54/labels",
      "id": 7150037,
      "node_id": "MI_kwDOABII584AbRnV",
      "number": 54,
      "state": "closed",
      "title": "24.0",
      "description": "",
      "creator": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 0,
      "closed_issues": 159,
      "created_at": "2021-09-14T08:27:02Z",
      "updated_at": "2022-11-29T15:44:44Z",
      "closed_at": "2022-11-29T15:44:44Z"
    },
    "created_at": "2022-07-27T19:26:41Z",
    "updated_at": "2022-08-09T06:13:07Z",
    "closed_at": "2022-08-05T13:36:19Z",
    "mergeable_state": "unknown",
    "merged_at": "2022-08-05T13:36:19Z",
    "merge_commit_sha": "006740b6f6475ed6ae08803c60dd82027602695b",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "ryanofsky:pr/bresult-del",
      "ref": "pr/bresult-del",
      "sha": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 69901633,
        "node_id": "MDEwOlJlcG9zaXRvcnk2OTkwMTYzMw==",
        "name": "bitcoin",
        "full_name": "ryanofsky/bitcoin",
        "owner": {
          "login": "ryanofsky",
          "id": 7133040,
          "node_id": "MDQ6VXNlcjcxMzMwNDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ryanofsky",
          "html_url": "https://github.com/ryanofsky",
          "followers_url": "https://api.github.com/users/ryanofsky/followers",
          "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
          "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
          "repos_url": "https://api.github.com/users/ryanofsky/repos",
          "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/ryanofsky/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/ryanofsky/bitcoin",
        "archive_url": "https://api.github.com/repos/ryanofsky/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/ryanofsky/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/ryanofsky/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/ryanofsky/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/ryanofsky/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/ryanofsky/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/ryanofsky/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/ryanofsky/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/ryanofsky/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/ryanofsky/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/ryanofsky/bitcoin/events",
        "forks_url": "https://api.github.com/repos/ryanofsky/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/ryanofsky/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/ryanofsky/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/ryanofsky/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/ryanofsky/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/ryanofsky/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/ryanofsky/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/ryanofsky/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/ryanofsky/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/ryanofsky/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:ryanofsky/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/ryanofsky/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/ryanofsky/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/ryanofsky/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/ryanofsky/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/ryanofsky/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/ryanofsky/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/ryanofsky/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/ryanofsky/bitcoin/hooks",
        "svn_url": "https://github.com/ryanofsky/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 8,
        "stargazers_count": 9,
        "watchers_count": 9,
        "size": 231874,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-02T19:06:27Z",
        "created_at": "2016-10-03T19:05:43Z",
        "updated_at": "2023-07-28T06:57:01Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "4a4289e2c98cfbc51b05716f21065838afed80f6",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35476,
        "stargazers_count": 70608,
        "watchers_count": 70608,
        "size": 236222,
        "default_branch": "master",
        "open_issues_count": 673,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-02T23:40:51Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-08-02T18:21:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 247,
    "deletions": 125,
    "changed_files": 24,
    "commits": 1,
    "review_comments": 74,
    "comments": 7
  },
  "events": [
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-27T19:28:37Z",
      "updated_at": "2022-07-27T19:28:37Z",
      "source": {
        "issue": {
          "id": 1313204802,
          "node_id": "PR_kwDOABII58472hm-",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25665",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25665/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25665/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25665/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25665",
          "number": 25665,
          "state": "open",
          "state_reason": null,
          "title": "refactor: Add util::Result failure values, multiple error and warning messages",
          "body": "Add `util::Result` support for returning more error information and make use of it in [LoadChainstate method](https://github.com/bitcoin/bitcoin/pull/25665/commits/584e3fa4ea8ca15b3a8b46e023f218c5e0ed73b0) as an initial application. Followup PR [#25722](https://github.com/bitcoin/bitcoin/pull/25722) uses it more broadly to return errors and warnings from wallet loading functions as well.\r\n\r\nThis change adds two major features to the result class:\r\n\r\n- For better error handling, adds the ability to return a value on failure, not just a value on success. This is a key missing feature that makes the result class not useful for functions like `LoadChainstate()` which produce different errors that need to be handled differently [^1].\r\n\r\n[^1]: Ability to return error values was actually present in the original implementation of [#25218](https://github.com/bitcoin/bitcoin/pull/25218), but unfortunately removed in later iterations.\r\n\r\n- For better error reporting, adds the ability to return warning messages and multiple errors, not just a single error string. This provides a way for functions to report errors and warnings in a standard way, and simplifies interfaces:\r\n\r\n    ```diff\r\n    -virtual std::unique_ptr<Wallet> loadWallet(const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings) = 0;\r\n    +virtual util::Result<std::unique_ptr<Wallet>> loadWallet(const std::string& name) = 0;\r\n    ```\r\n\r\n    ```diff\r\n    -std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error);\r\n    +util::Result<std::unique_ptr<WalletDatabase>, DatabaseError> MakeDatabase(const fs::path& path, const DatabaseOptions& options);\r\n   ```\r\n\r\nThis change also makes some more minor improvements:\r\n\r\n- Smaller type size. `util::Result<int>` is 16 bytes, and `util::Result<void>` is 8 bytes. Previously both were 72 bytes.\r\n\r\n- Broader type compatibility. Supports noncopyable and nonmovable success and error types.\r\n\r\n### Alternatives & design notes\r\n\r\nThe main goal for the `util::Result` class is to provide a standard way for functions to report error and warnings strings. The interface tries to make it easy to provide detailed error feedback to end users, without cluttering code or making it harder to return other result information. There have been multiple iterations of the design using different internal representations and providing different capabilities:\r\n\r\n|   | Representation (approximate)                   | Notes |\r\n|---|------------------------------------------------|-------|\r\n| _(1)_ | `tuple<T,optional<bilingual_str>>`        | Original #25218 implementation in da98fd2efc1a6b9c6e876cf3e227a8c2e9a10827. Good capabilities, but larger type size. Supports error standardized error reporting and customized error handling with failure values. |\r\n| _(2)_ | `variant<T,bilingual_str>`                | Final #25218 implementation in 7a45c33d1f8a758850cf8e7bd6ad508939ba5c0d. No support for returning failure values so not useful in many cases.\r\n| _(3)_ | `variant<monostate,T,F>`                 | Pending #25601 implementation that allows choosing whether to use standardized error reporting or return custom failure values, but doesn't support having both at the same time, like approaches _(1)_, _(4)_, _(5)_, _(6)_ do. |\r\n | _(4)_ | `tuple<variant<T,F>,bilingual_str>`      | Original #25608 implementation in c29d3008de9314dd463ed08e8bff39fe55324498. Basically the same as _(1)_ except it uses separate success and failure types instead of the same type. Using separate success and failure types makes the result class a little less flexible but can help avoid some ambiguity and inconsistent result states. |\r\n| _(5)_ | `tuple<T,optional<bilingual_str>>`        | Final #25608 implementation in dd91f294206ac87b213d23bb76656a0a5f0f4781. Essentially the same as original implementation _(1)_ except has some usability improvements. |\r\n| _(6)_ | `tuple<T,unique_ptr<tuple<F,bilingual_str>>` | Pending #25665 implementation (this PR). Supports returning failure values, uses separate success and failure types to avoid ambiguity, uses `unique_ptr` to reduce result type size, and avoids heap allocation in the happy path. |\r\n\r\n### Prior discussions & history\r\n\r\n- _furszy_ introduced a `BResult` class providing a standard error reporting mechanism in [#25218](https://github.com/bitcoin/bitcoin/pull/25218). It was renamed to `util::Result` in [#25721](https://github.com/bitcoin/bitcoin/pull/25721) but kept the same representation and capabilities.\r\n\r\n- _MarcoFalke_ suggested using `BResult` for the `LoadChainstate` function in [#25308 (comment)](https://github.com/bitcoin/bitcoin/pull/25308#issuecomment-1181674645). Inability to use `BResult` there due to lack of support for failure values led to initial work on [#25608](https://github.com/bitcoin/bitcoin/pull/25608).\r\n\r\n- _w0xlt_ wrote a `StructuredResult` class in [#25308](https://github.com/bitcoin/bitcoin/pull/25601) adding the ability to return failure values but sacrificing standard error reporting, which led to more work on [#25608](https://github.com/bitcoin/bitcoin/pull/25608).\r\n\r\n- _martinus_ suggested a space optimization in [#25608 (comment)](https://github.com/bitcoin/bitcoin/pull/25608#discussion_r921049409) that also made it easier to support distinct failure & success types, leading to [#25665](https://github.com/bitcoin/bitcoin/pull/25665) as a replacement for [#25608](https://github.com/bitcoin/bitcoin/pull/25608).",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 19,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25665",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25665.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25665.patch"
          },
          "created_at": "2022-07-21T12:46:09Z",
          "updated_at": "2023-08-02T23:40:53Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 7076105021,
      "node_id": "LE_lADOABII585OrhvfzwAAAAGlxMs9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7076105021",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-27T19:44:46Z",
      "label": {
        "name": "Refactoring",
        "color": "E6F6D6"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-27T20:53:44Z",
      "updated_at": "2022-07-27T20:53:44Z",
      "source": {
        "issue": {
          "id": 1320033494,
          "node_id": "PR_kwDOABII5848NBt5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25722",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25722/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25722/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25722/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25722",
          "number": 25722,
          "state": "open",
          "state_reason": null,
          "title": "refactor: Use util::Result class for wallet loading",
          "body": "**This is based on #25665.** The non-base commits are:\r\n\r\n- [`1a540b591c74` refactor: Use util::Result class for wallet loading](https://github.com/bitcoin/bitcoin/pull/25722/commits/1a540b591c742594cca285ef9b8b16c6d8507d58)\r\n\r\n---\r\n\r\nWallet loading functions up and down the stack have lots of error and warning parameters, and return error information in different ways. This PR makes them uniformly return `util::Result`, without changing behavior.",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25722",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25722",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25722.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25722.patch"
          },
          "created_at": "2022-07-27T19:26:58Z",
          "updated_at": "2023-08-02T15:08:15Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1197358050,
      "node_id": "IC_kwDOABII585HXjvi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1197358050",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-27T20:55:49Z",
      "updated_at": "2022-08-04T09:43:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#25756](https://github.com/bitcoin/bitcoin/pull/25756) (rest: Remove support for a number of `-deprecatedrest` options by stickies-v)\n* [#25755](https://github.com/bitcoin/bitcoin/pull/25755) (rest: Use from_blockhash and txdetails query parameters by stickies-v)\n* [#25754](https://github.com/bitcoin/bitcoin/pull/25754) (rest: Extend HTTPRequest interface to support querying path (parameters) by stickies-v)\n* [#25753](https://github.com/bitcoin/bitcoin/pull/25753) (rest: Move format string from path-like parameter to query parameter by stickies-v)\n* [#25734](https://github.com/bitcoin/bitcoin/pull/25734) (wallet, refactor: #24584 follow-ups by josibake)\n* [#25722](https://github.com/bitcoin/bitcoin/pull/25722) (refactor: Use util::Result class for wallet loading by ryanofsky)\n* [#25685](https://github.com/bitcoin/bitcoin/pull/25685) (wallet: Faster transaction creation by removing pre-set-inputs fetching responsibility from Coin Selection by furszy)\n* [#25666](https://github.com/bitcoin/bitcoin/pull/25666) (refactor: wallet, do not translate init options names by furszy)\n* [#25665](https://github.com/bitcoin/bitcoin/pull/25665) (refactor: Add util::Result class and use it in LoadChainstate by ryanofsky)\n* [#25656](https://github.com/bitcoin/bitcoin/pull/25656) (refactor: wallet: return BResult from `GetReservedDestination` methods by theStack)\n* [#25616](https://github.com/bitcoin/bitcoin/pull/25616) (refactor: Return `BResult` from WalletLoader methods by w0xlt)\n* [#25297](https://github.com/bitcoin/bitcoin/pull/25297) (wallet: speedup transactions sync, rescan and load by grouping all independent db writes on a single batched db transaction by furszy)\n* [#25273](https://github.com/bitcoin/bitcoin/pull/25273) (wallet: Pass through transaction locktime and preset input sequences and scripts to CreateTransaction by achow101)\n* [#25269](https://github.com/bitcoin/bitcoin/pull/25269) (wallet: re-activate the not triggered  \"AmountWithFeeExceedsBalance\" error by furszy)\n* [#25183](https://github.com/bitcoin/bitcoin/pull/25183) (rpc: Filter inputs by type during CoinSelection by aureleoules)\n* [#24897](https://github.com/bitcoin/bitcoin/pull/24897) ([Draft / POC] Silent Payments by w0xlt)\n* [#19602](https://github.com/bitcoin/bitcoin/pull/19602) (wallet: Migrate legacy wallets to descriptor wallets by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#issuecomment-1197358050",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25721"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7076650597,
      "node_id": "HRFPE_lADOABII585OrhvfzwAAAAGlzR5l",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7076650597",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-27T21:27:19Z"
    },
    {
      "event": "commented",
      "id": 1197389847,
      "node_id": "IC_kwDOABII585HXrgX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1197389847",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-27T21:30:34Z",
      "updated_at": "2022-07-27T21:50:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated 13aeab1cf6de1777db480ee7f568d78daecf49dd -> 2aa408b4ccc57539a7f6b383e6c98acac10e39c0 ([`pr/bresult-del.1`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult-del.1) -> [`pr/bresult-del.2`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult-del.2), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/bresult-del.1..pr/bresult-del.2)) dropping dependency on #25665 as suggested https://github.com/bitcoin/bitcoin/pull/25665#issuecomment-1197289390\r\nUpdated 2aa408b4ccc57539a7f6b383e6c98acac10e39c0 -> e71b858bc0f30784191725d71a77bab4d280a6f9 ([`pr/bresult-del.2`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult-del.2) -> [`pr/bresult-del.3`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult-del.3), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/bresult-del.2..pr/bresult-del.3)) adding missing test file\r\nUpdated e71b858bc0f30784191725d71a77bab4d280a6f9 -> 42f4f7d126f6729c4924b0630f67d171f4d0ac9b ([`pr/bresult-del.3`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult-del.3) -> [`pr/bresult-del.4`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult-del.4), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/bresult-del.3..pr/bresult-del.4)) fixing comment",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#issuecomment-1197389847",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25721"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7076684364,
      "node_id": "HRFPE_lADOABII585OrhvfzwAAAAGlzaJM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7076684364",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-27T21:34:41Z"
    },
    {
      "event": "ready_for_review",
      "id": 7076687811,
      "node_id": "RFRE_lADOABII585OrhvfzwAAAAGlza_D",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7076687811",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-27T21:35:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7076742555,
      "node_id": "HRFPE_lADOABII585OrhvfzwAAAAGlzoWb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7076742555",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-27T21:48:08Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-27T21:58:20Z",
      "updated_at": "2022-07-27T21:58:20Z",
      "source": {
        "issue": {
          "id": 1313570087,
          "node_id": "PR_kwDOABII58473xLO",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25667",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25667/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25667/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25667/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25667",
          "number": 25667,
          "state": "closed",
          "state_reason": null,
          "title": "assumeutxo: snapshot initialization",
          "body": "This is part of the [assumeutxo project](https://github.com/bitcoin/bitcoin/projects/11) (parent PR: https://github.com/bitcoin/bitcoin/pull/15606)\r\n\r\n---\r\n\r\nHalf of the replacement for #24232. The original PR grew larger than expected throughout the review process.\r\n\r\nThis change adds the ability to initialize a snapshot-based chainstate during init if one is detected on disk. This is of course unused as of now (aside from in unittests) given that we haven't yet enabled actually loading snapshots. \r\n\r\nDon't be scared! There are some big move-only commits in here.\r\n\r\nAccompanying changes include: \r\n\r\n- moving the snapshot coinsdb directory from being called `chainstate_[base blockhash]` to `chainstate_snapshot`, since we only support one snapshot in use at a time. This simplifies some logic, but it necessitates writing that base blockhash out to a file within the coinsdb dir. See [discussion here](https://github.com/bitcoin/bitcoin/pull/24232#discussion_r832762880).\r\n- adding a simple fix in `FlushBlockFile()` that avoids a crash when attemping to flush to disk before `LoadBlockIndexDB()` is called, which happens when calling `MaybeRebalanceCaches()` during multiple chainstate init.\r\n- improving the unittest to allow testing with on-disk chainstates - necessary to test a simulated restart and re-initialization.",
          "user": {
            "login": "jamesob",
            "id": 73197,
            "node_id": "MDQ6VXNlcjczMTk3",
            "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jamesob",
            "html_url": "https://github.com/jamesob",
            "followers_url": "https://api.github.com/users/jamesob/followers",
            "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
            "organizations_url": "https://api.github.com/users/jamesob/orgs",
            "repos_url": "https://api.github.com/users/jamesob/repos",
            "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jamesob/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 97470796,
              "node_id": "MDU6TGFiZWw5NzQ3MDc5Ng==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/UTXO%20Db%20and%20Indexes",
              "name": "UTXO Db and Indexes",
              "color": "fbca04",
              "default": false
            },
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 10,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25667",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25667",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25667.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25667.patch"
          },
          "closed_at": "2022-10-13T14:20:57Z",
          "created_at": "2022-07-21T17:18:54Z",
          "updated_at": "2022-12-23T20:50:07Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-27T22:00:24Z",
      "updated_at": "2022-07-27T22:00:24Z",
      "source": {
        "issue": {
          "id": 1313336766,
          "node_id": "PR_kwDOABII58472-iQ",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25666",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25666/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25666/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25666/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25666",
          "number": 25666,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: wallet, do not translate init options names",
          "body": "Simple, and not interesting, refactor that someone has to do sooner or later. We are translating some init arguments names when those shouldn't be translated.",
          "user": {
            "login": "furszy",
            "id": 5377650,
            "node_id": "MDQ6VXNlcjUzNzc2NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/furszy",
            "html_url": "https://github.com/furszy",
            "followers_url": "https://api.github.com/users/furszy/followers",
            "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
            "organizations_url": "https://api.github.com/users/furszy/orgs",
            "repos_url": "https://api.github.com/users/furszy/repos",
            "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/furszy/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25666",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25666",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25666.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25666.patch"
          },
          "closed_at": "2023-03-19T12:24:36Z",
          "created_at": "2022-07-21T14:18:35Z",
          "updated_at": "2023-04-17T14:36:20Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-27T22:14:05Z",
      "updated_at": "2022-07-27T22:14:05Z",
      "source": {
        "issue": {
          "id": 1312021965,
          "node_id": "PR_kwDOABII5847yWXu",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25656",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25656/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25656/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25656/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25656",
          "number": 25656,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: wallet: return util::Result from `GetReservedDestination` methods",
          "body": "This PR is a follow-up to #25218, as suggested in comment https://github.com/bitcoin/bitcoin/pull/25218#discussion_r907710067. The interfaces of the methods `ReserveDestination::GetReservedDestination`, `{Legacy,Descriptor,}ScriptPubKeyMan::GetReservedDestination` are improved by returning `util::Result<CTxDestination>` instead of `bool` in order to get rid of the two `CTxDestination&` and `bilingual_str&` out-parameters.",
          "user": {
            "login": "theStack",
            "id": 91535,
            "node_id": "MDQ6VXNlcjkxNTM1",
            "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/theStack",
            "html_url": "https://github.com/theStack",
            "followers_url": "https://api.github.com/users/theStack/followers",
            "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
            "organizations_url": "https://api.github.com/users/theStack/orgs",
            "repos_url": "https://api.github.com/users/theStack/repos",
            "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/theStack/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25656",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25656",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25656.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25656.patch"
          },
          "closed_at": "2022-08-10T12:20:35Z",
          "created_at": "2022-07-20T22:16:49Z",
          "updated_at": "2022-08-13T17:43:23Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-27T22:22:17Z",
      "updated_at": "2022-07-27T22:22:17Z",
      "source": {
        "issue": {
          "id": 1310606684,
          "node_id": "PR_kwDOABII5847tYCg",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25647",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25647/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25647/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25647/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25647",
          "number": 25647,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: return change from SelectionResult",
          "body": "Benefits:\r\n1. more accurate waste calculation for knapsack. Waste calculation is now consistent with tx building code. Before we always assumed change for knapsack even when the solution is changeless4. \r\n2. simpler tx building code. Only create change output when it's needed\r\n3. makes it easier to correctly account for fees for CPFP inputs (should be done in a follow up) \r\n\r\nIn the first three commits we fix the code to accurately track selection target in `SelectionResult::m_target`\r\nThen we introduce new variable `min_change` that represents the minimum viable change amount\r\nThen we introduce `SelectionResult::GetChange()` which incapsulates dropping change for fee logic and uses correct values of `SelectionResult::m_target`\r\nThen we use `SelectionResult::GetChange()` in both tx building and waste calculation code\r\n\r\nThis PR is a refactoring and shouldn't change the behaviour.\r\nThere is only one known small change (arguably a bug fix). Before we dropped change output if it's smaller than `cost_of_change` after paying change fees. This is incorrect as `cost_of_change` already includes `change_fee`. ",
          "user": {
            "login": "S3RK",
            "id": 1466284,
            "node_id": "MDQ6VXNlcjE0NjYyODQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/S3RK",
            "html_url": "https://github.com/S3RK",
            "followers_url": "https://api.github.com/users/S3RK/followers",
            "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
            "organizations_url": "https://api.github.com/users/S3RK/orgs",
            "repos_url": "https://api.github.com/users/S3RK/repos",
            "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/S3RK/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25647",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25647",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25647.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25647.patch"
          },
          "closed_at": "2022-08-22T16:43:27Z",
          "created_at": "2022-07-20T07:54:57Z",
          "updated_at": "2022-08-22T16:43:27Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-27T22:37:41Z",
      "updated_at": "2022-07-27T22:37:41Z",
      "source": {
        "issue": {
          "id": 1305365086,
          "node_id": "PR_kwDOABII5847b9k5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25616",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25616/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25616/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25616/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25616",
          "number": 25616,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Return `util::Result` from WalletLoader methods",
          "body": "This PR adds a method that implement common logic to WalletLoader methods and change them to return `BResult<std::unique_ptr<Wallet>>`.\r\n\r\nMotivation: #25594 changed `restoreWallet` to return `BResult` but this method shares a common pattern with  `createWallet` and `loadWallet`. This PR keeps the same pattern to all WalletLoader methods.",
          "user": {
            "login": "w0xlt",
            "id": 94266259,
            "node_id": "U_kgDOBZ5jkw",
            "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/w0xlt",
            "html_url": "https://github.com/w0xlt",
            "followers_url": "https://api.github.com/users/w0xlt/followers",
            "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
            "organizations_url": "https://api.github.com/users/w0xlt/orgs",
            "repos_url": "https://api.github.com/users/w0xlt/repos",
            "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/w0xlt/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25616",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25616",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25616.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25616.patch"
          },
          "closed_at": "2022-08-10T17:09:18Z",
          "created_at": "2022-07-14T22:54:47Z",
          "updated_at": "2022-08-15T15:39:03Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-27T22:45:37Z",
      "updated_at": "2022-07-27T22:45:37Z",
      "source": {
        "issue": {
          "id": 1302783338,
          "node_id": "PR_kwDOABII5847TWiW",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25601",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25601/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25601/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25601/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25601",
          "number": 25601,
          "state": "closed",
          "state_reason": null,
          "title": "util: Make `BResult` error a generic type instead of only `bilingual_str`",
          "body": "This PR makes `BResult` error a generic type instead of only `bilingual_str` and changes the class name to `StructuredResult` as `BResut` is not related to the purpose of the class.\r\n\r\nThe motivation is that some methods, like `src/wallet/wallet.h:{RestoreWallet(...),CreateWallet(...),LoadWallet(...)}` have more output parameters than just `bilingual_str& error` such as `DatabaseStatus& status` and `std::vector<bilingual_str>& warnings`.\r\n\r\nWith a generic template for error, it will be possible to create a struct that has `bilingual_str& error` and `DatabaseStatus& status`, for example, and use it in `StructuredResult`.\r\n\r\nBuilt on top of #25594",
          "user": {
            "login": "w0xlt",
            "id": 94266259,
            "node_id": "U_kgDOBZ5jkw",
            "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/w0xlt",
            "html_url": "https://github.com/w0xlt",
            "followers_url": "https://api.github.com/users/w0xlt/followers",
            "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
            "organizations_url": "https://api.github.com/users/w0xlt/orgs",
            "repos_url": "https://api.github.com/users/w0xlt/repos",
            "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/w0xlt/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25601",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25601",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25601.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25601.patch"
          },
          "closed_at": "2022-08-03T04:15:11Z",
          "created_at": "2022-07-13T01:20:46Z",
          "updated_at": "2022-08-03T04:15:12Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-27T23:34:25Z",
      "updated_at": "2022-07-27T23:34:25Z",
      "source": {
        "issue": {
          "id": 1288311593,
          "node_id": "PR_kwDOABII5846i7aW",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25499",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25499/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25499/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25499/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25499",
          "number": 25499,
          "state": "closed",
          "state_reason": null,
          "title": "Use steady clock for all millis bench logging",
          "body": "Currently `GetTimeMillis` is used for bench logging in milliseconds integral precision. Replace it to use a steady clock that is type-safe and steady.\r\n\r\nMicrosecond or float precision can be done in a follow-up.",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 1,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25499",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25499",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25499.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25499.patch"
          },
          "closed_at": "2022-09-16T10:10:35Z",
          "created_at": "2022-06-29T07:48:57Z",
          "updated_at": "2022-09-16T10:43:59Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-28T00:30:51Z",
      "updated_at": "2022-07-28T00:30:51Z",
      "source": {
        "issue": {
          "id": 1263730107,
          "node_id": "PR_kwDOABII5845REBZ",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25297",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25297/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25297/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25297/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25297",
          "number": 25297,
          "state": "open",
          "state_reason": null,
          "title": "wallet: group independent db writes on single batched db transaction",
          "body": "The block connection process, same as many other wallet processes, contains plenty individual db writes.\r\n\r\nThis PR batches all the db transaction that occurs along each wallet workflow. Dumping all the information to disk at once atomically at the end of the process.\r\n\r\nThen, for BDB, fixed places where we are flushing to db directly on individual writes. e.g we do it in the in the chain sync/scan process, when an output that belongs to the wallet is found if the address is not inside the address book. \r\n\r\nPlus, in several places across the wallet flows, we create new `WalletBatch` objects. Which, internally, mean: Increasing the db references number, try to open the db and, for SQLite, setup and bind the statements.\r\nThis PR avoids all this overhead by sharing the same db handler instance through each entire workflow.",
          "user": {
            "login": "furszy",
            "id": 5377650,
            "node_id": "MDQ6VXNlcjUzNzc2NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/furszy",
            "html_url": "https://github.com/furszy",
            "followers_url": "https://api.github.com/users/furszy/followers",
            "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
            "organizations_url": "https://api.github.com/users/furszy/orgs",
            "repos_url": "https://api.github.com/users/furszy/repos",
            "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/furszy/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25297",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25297",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25297.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25297.patch"
          },
          "created_at": "2022-06-07T18:55:49Z",
          "updated_at": "2023-05-15T12:01:42Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-28T00:37:24Z",
      "updated_at": "2022-07-28T00:37:24Z",
      "source": {
        "issue": {
          "id": 1260256447,
          "node_id": "PR_kwDOABII5845Fj6p",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25273",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25273/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25273/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25273/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25273",
          "number": 25273,
          "state": "open",
          "state_reason": null,
          "title": "wallet: Pass through transaction locktime and preset input sequences and scripts to CreateTransaction",
          "body": "Currently `FundTransaction` handles transaction locktime and preset input data by extracting the selected inputs and change output from `CreateTransaction`'s results. This means that `CreateTransaction` is actually unaware of any user desired locktime or sequence numbers. This can have an effect on whether and how anti-fee-sniping works.\r\n\r\nThis PR makes `CreateTransaction` aware of the locktime and preset input data by providing them to `CCoinControl`. `CreateTransasction` will then set the sequences, scriptSigs, scriptWItnesses, and locktime as appropriate if they are specified. This allows `FundTransaction` to actually use `CreateTransaction`'s result directly instead of having to extract the parts of it that it wants.\r\n\r\nAdditionally `FundTransaction` will return a `CreateTransactionResult` as `CreateTransaction` does instead of having several output parameters. Lastly, instead of using `-1` as a magic number for the change output position, the change position is changed to be an optional with no value set indicating no desired change output position (when provided as an input parameter) or no change output present (in the result).",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25273",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25273",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25273.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25273.patch"
          },
          "created_at": "2022-06-03T18:58:15Z",
          "updated_at": "2023-08-01T12:18:05Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-28T00:41:54Z",
      "updated_at": "2022-07-28T00:41:54Z",
      "source": {
        "issue": {
          "id": 1258250629,
          "node_id": "PR_kwDOABII5844-uf3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25269",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25269/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25269/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25269/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25269",
          "number": 25269,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: re-activate the not triggered  \"AmountWithFeeExceedsBalance\" error",
          "body": "Please review #25806 first.\r\n\r\nCame up during a talk with @theStack: the `AmountWithFeeExceedsBalance` error inside `WalletModel:prepareTransaction` is never been thrown.\r\n\r\nThe explanation for it: `createTransaction` does not retrieve the fee if the process fail for insufficient funds (fee return argument is set only at the bottom of the process, when the transaction creation success). So, if the tx creation fails, it's not available inside `WalletModel::prepareTransaction` to be able to throw the `AmountWithFeeExceedsBalance` .\r\n\r\nThis PR re-implements the feature properly, inside `createTransaction` and add test coverage for it.",
          "user": {
            "login": "furszy",
            "id": 5377650,
            "node_id": "MDQ6VXNlcjUzNzc2NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/furszy",
            "html_url": "https://github.com/furszy",
            "followers_url": "https://api.github.com/users/furszy/followers",
            "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
            "organizations_url": "https://api.github.com/users/furszy/orgs",
            "repos_url": "https://api.github.com/users/furszy/repos",
            "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/furszy/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25269",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25269",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25269.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25269.patch"
          },
          "closed_at": "2023-06-22T02:55:30Z",
          "created_at": "2022-06-02T14:17:15Z",
          "updated_at": "2023-06-22T02:55:30Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-28T02:38:32Z",
      "updated_at": "2022-07-28T02:38:32Z",
      "source": {
        "issue": {
          "id": 1206247497,
          "node_id": "PR_kwDOABII5842Uktn",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24897/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24897/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24897/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/24897",
          "number": 24897,
          "state": "closed",
          "state_reason": null,
          "title": "[Draft / POC] Silent Payments",
          "body": "This PR proposes an early version of [Silent Payment](https://gist.github.com/RubenSomsen/c43b79517e7cb701ebf77eec6dbb46b8) (author:@RubenSomsen).\r\nIn this scheme, the recipient generates a public address, but the sender tweaks the address and the recipient detects the payment by verifying all transactions on the blockchain. An example use case would be private donations.\r\n\r\nThe purpose of this PR is not a final version, but to start the discussion and get benchmarks based on a real implementation.\r\n\r\nThis version is built on top of [#994](https://github.com/bitcoin-core/secp256k1/pull/994) (bitcoin-core/secp256k1) for x-only ECDH support and #23480 (bitcoin/bitcoin) for `rawtr()`. Each new silent transaction detected is stored in wallet as a `rawtr()` descriptor. \r\n\r\nIn this implementation, the sender can tweak the recipient address by passing the `silent_payment` option to send RPC. The transaction output will be different from the address entered.\r\n\r\nFor example `./src/bitcoin-cli -regtest -named send outputs=\"[{\\\"bcrt1pwlh5xuyrpgfunwyww8cfu78yfs2yqyevl7yturavahh5kgxwdd2q5hzgfu\\\": 1.1}]\" fee_rate=1 options=\"{ \\\"silent_payment\\\": true}\"`.\r\n\r\nwill generate `vout` with completely unrelated outputs:\r\n\r\n```\r\n\"vout\": [\r\n    {\r\n      \"value\": 1.10000000,\r\n      \"n\": 0,\r\n      \"scriptPubKey\": {\r\n        \"desc\": \"rawtr(65b19890c5ca40edb816d26f5f48cd9f3ed51121613b1c2405adc1a6dbbc824a)#8myx9tcu\",\r\n        \"address\": \"bcrt1pvkce3yx9efqwmwqk6fh47jxdnuld2yfpvya3cfq94hq6dkausf9qrfjkgz\",\r\n\r\n      }\r\n    },\r\n    {\r\n      \"value\": 2.02499835,\r\n      \"n\": 1,\r\n      \"scriptPubKey\": {\r\n        \"desc\": \"rawtr(c45cb3d500bbf8f0c8841e8e011b008781d826c16ee348edb822c0f97419bc4d)#26hcce63\",\r\n        \"address\": \"bcrt1pc3wt84gqh0u0pjyyr68qzxcqs7qasfkpdm353mdcytq0jaqeh3xsuvlykg\",\r\n      }\r\n    }\r\n  ]\r\n```\r\n\r\nAny wallet, as long as it has access to private keys, can send silent payments. Thus, this excludes watch-only wallets or wallets with external signers .\r\n\r\nBut the recipient's wallet needs a new flag called `SILENT_PAYMENT`. This flag allows an additional scan that verifies that the wallet keys match the silent payment scheme. When it detects a silent payment that belongs to the wallet, it is stored in a `rawtr()` descriptor.\r\n\r\n`./src/bitcoin-cli -regtest -named createwallet wallet_name=\"recipient\" silent_payment=true`\r\n\r\nTherefore, scanning each address for each transaction is potentially prohibitive overhead, so the node can be initialized with `keypool=1` or a descriptor with range [0,1] can be imported into a blank wallet. Until there is more benchmark data, it is the safest option. The proposal recommends one static address.\r\n\r\nI've been running some silent payments on signet using wallets with default keypool and default range, I haven't noticed any relevant performance drops on the signet node.\r\nApparently this implementation is working as expected but I can't guarantee that the scheme is implemented correctly or safely, so I'm opening this PR for reviews, modifications and improvements.\r\n\r\nThere is a new functional test (`test/functional/wallet_silentpayment.py`) that can help to better understand the implementation.",
          "user": {
            "login": "w0xlt",
            "id": 94266259,
            "node_id": "U_kgDOBZ5jkw",
            "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/w0xlt",
            "html_url": "https://github.com/w0xlt",
            "followers_url": "https://api.github.com/users/w0xlt/followers",
            "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
            "organizations_url": "https://api.github.com/users/w0xlt/orgs",
            "repos_url": "https://api.github.com/users/w0xlt/repos",
            "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/w0xlt/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 159815356,
              "node_id": "MDU6TGFiZWwxNTk4MTUzNTY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Upstream",
              "name": "Upstream",
              "color": "bfd4f2",
              "default": false
            },
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            },
            {
              "id": 1482182044,
              "node_id": "MDU6TGFiZWwxNDgyMTgyMDQ0",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Descriptors",
              "name": "Descriptors",
              "description": "",
              "color": "e9f76c",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 86,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/24897",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/24897.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/24897.patch"
          },
          "closed_at": "2023-06-05T13:18:14Z",
          "created_at": "2022-04-17T00:37:23Z",
          "updated_at": "2023-06-27T11:03:39Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-28T10:47:42Z",
      "updated_at": "2022-07-28T10:47:42Z",
      "source": {
        "issue": {
          "id": 666560839,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDU3MzgyMzM0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19602",
          "number": 19602,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Migrate legacy wallets to descriptor wallets",
          "body": "This PR adds a new `migratewallet` RPC which migrates a legacy wallet to a descriptor wallet. Migrated wallets will need a new backup. If a wallet has watchonly stuff in it, a new watchonly descriptor wallet will be created containing those watchonly things. The related transactions, labels, and descriptors for those watchonly things will be removed from the original wallet. Migrated wallets will not have any of the legacy things be available for fetching from `getnewaddress` or `getrawchangeaddress`. Wallets that have private keys enabled will have newly generated descriptors. Wallets with private keys disabled will not have any active `ScriptPubKeyMan`s.\r\n\r\nFor the basic HD wallet case of just generated keys, in addition to the standard descriptor wallet descriptors using the master key derived from the pre-existing hd seed, the migration will also create 3 descriptors for each HD chain in: a ranged combo external, a ranged combo internal, and a single key combo for the seed (the seed is a valid key that we can receive coins at!). The migrated wallet will then have newly generated descriptors as the active `ScriptPubKeyMan`s. This is equivalent to creating a new descriptor wallet and importing the 3 descriptors for each HD chain. For wallets containing non-HD keys, each key will have its own combo descriptor.\r\n\r\nThere are also tests.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/54",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54/labels",
            "id": 7150037,
            "node_id": "MI_kwDOABII584AbRnV",
            "number": 54,
            "state": "closed",
            "title": "24.0",
            "description": "",
            "creator": {
              "login": "laanwj",
              "id": 126646,
              "node_id": "MDQ6VXNlcjEyNjY0Ng==",
              "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/laanwj",
              "html_url": "https://github.com/laanwj",
              "followers_url": "https://api.github.com/users/laanwj/followers",
              "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
              "organizations_url": "https://api.github.com/users/laanwj/orgs",
              "repos_url": "https://api.github.com/users/laanwj/repos",
              "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/laanwj/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 159,
            "created_at": "2021-09-14T08:27:02Z",
            "updated_at": "2022-11-29T15:44:44Z",
            "closed_at": "2022-11-29T15:44:44Z"
          },
          "locked": false,
          "comments": 50,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19602",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19602.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19602.patch"
          },
          "closed_at": "2022-09-01T19:44:11Z",
          "created_at": "2020-07-27T20:22:25Z",
          "updated_at": "2023-03-13T22:00:30Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1056186962,
      "node_id": "PRR_kwDOABII584-9CJS",
      "url": null,
      "actor": null,
      "commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK.\r\nBut maybe the changes can be split in two or more commits.",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#pullrequestreview-1056186962",
      "submitted_at": "2022-07-30T03:16:41Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-31T04:57:37Z",
      "updated_at": "2022-07-31T04:57:37Z",
      "source": {
        "issue": {
          "id": 1323282527,
          "node_id": "PR_kwDOABII5848X18U",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25756",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25756/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25756/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25756/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25756",
          "number": 25756,
          "state": "closed",
          "state_reason": null,
          "title": "rest: Remove support for a number of `-deprecatedrest` options",
          "body": "**Draft, for reference only to support #25752 for discussion on concept and approach. Code and tests should be fully functional, but still to be considered rough.** Commits specific to this PR start from [rest: remove support for -deprecatedrest=format](https://github.com/bitcoin/bitcoin/pull/25756/commits/5b2c40acf5c223313598eec61648e6d8d3521dae).\r\n\r\n## Brief summary\r\n#25752 introduced a number of `-deprecatedrest` options to keep old behaviour on most REST endpoints. With this PR, we remove this support to clean up the code.\r\n\r\nThis PR should only be merged when we want to remove backwards compatibility, which I expect will be at least 1 release after merging the last PR in #25752. I've just prepared the code already to show how it can clean up the endpoint logic.",
          "user": {
            "login": "stickies-v",
            "id": 69010457,
            "node_id": "MDQ6VXNlcjY5MDEwNDU3",
            "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stickies-v",
            "html_url": "https://github.com/stickies-v",
            "followers_url": "https://api.github.com/users/stickies-v/followers",
            "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
            "organizations_url": "https://api.github.com/users/stickies-v/orgs",
            "repos_url": "https://api.github.com/users/stickies-v/repos",
            "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/stickies-v/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25756",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25756",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25756.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25756.patch"
          },
          "closed_at": "2023-03-13T11:28:29Z",
          "created_at": "2022-07-30T20:35:49Z",
          "updated_at": "2023-03-13T11:28:30Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-31T04:59:15Z",
      "updated_at": "2022-07-31T04:59:15Z",
      "source": {
        "issue": {
          "id": 1323282274,
          "node_id": "PR_kwDOABII5848X14j",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25755",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25755/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25755/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25755/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25755",
          "number": 25755,
          "state": "closed",
          "state_reason": null,
          "title": "rest: Use from_blockhash and txdetails query parameters",
          "body": "**Draft, for reference only to support #25752 for discussion on concept and approach. Code and tests should be fully functional, but still to be considered rough.** Commits specific to this PR start from [rest: use from_blockhash query parameter](https://github.com/bitcoin/bitcoin/pull/25755/commits/afdaeb65342c9d6d1dddf651a92e07648d3a8dc2).\r\n\r\n## Brief summary\r\n\r\n### from_blockhash\r\n`/rest/headers` and `/rest/blockfilterheaders` are collection endpoints, i.e. they return an array of objects. The [<BLOCK-HASH>](https://github.com/bitcoin/bitcoin/blob/master/doc/REST-interface.md#blockheaders) was used not reference that specific resource, but to return all objects _since_ that block hash. Filtering parameters like this are normally provided via query parameters, for reasons such as being composable (multiple filters can be combined) and supporting default values.\r\n\r\nAs such, this PR removes removes the `<BLOCK-HASH>` from the path and inserts the `from_blockhash` query parameter for `/rest/headers` and `/rest/blockfilterheaders`. Behaviour can be reverted by using `-deprecatedrest=blockhash`.\r\n\r\n### txdetails\r\nIn `/rest/block/notxdetails/`, `notxdetails` is not a resource - it controls how much information we want to have included in the response. As above, this PR converts the `/notxdetails` path parameter into a `?txdetails=<true|false>` query parameter. Behaviour can be reverted by using `-deprecatedrest=txdetails`.",
          "user": {
            "login": "stickies-v",
            "id": 69010457,
            "node_id": "MDQ6VXNlcjY5MDEwNDU3",
            "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stickies-v",
            "html_url": "https://github.com/stickies-v",
            "followers_url": "https://api.github.com/users/stickies-v/followers",
            "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
            "organizations_url": "https://api.github.com/users/stickies-v/orgs",
            "repos_url": "https://api.github.com/users/stickies-v/repos",
            "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/stickies-v/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25755",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25755",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25755.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25755.patch"
          },
          "closed_at": "2023-03-13T11:28:24Z",
          "created_at": "2022-07-30T20:35:30Z",
          "updated_at": "2023-03-13T11:28:25Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-31T05:00:51Z",
      "updated_at": "2022-07-31T05:00:51Z",
      "source": {
        "issue": {
          "id": 1323282093,
          "node_id": "PR_kwDOABII5848X110",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25754",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25754/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25754/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25754/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25754",
          "number": 25754,
          "state": "closed",
          "state_reason": null,
          "title": "rest: Extend HTTPRequest interface to support querying path (parameters)",
          "body": "**Draft, for reference only to support #25752 for discussion on concept and approach. Code and tests should be fully functional, but still to be considered rough.** Commits specific to this PR start from [rest: store endpoint prefix data in HTTPRequest](https://github.com/bitcoin/bitcoin/pull/25754/commits/dd99555d1e82b05674581584c3d8278472710a45).\r\n\r\n## Brief summary\r\n#24098 introduced a simple `HTTPRequest::GetQueryParameter()` function to access query parameters directly from the request, which is passed to every endpoint function. This PR extends this interface by introducing a similarly behaving `HTTPRequest::GetPath()` and `HTTPRequest::GetPathParameter()`. \r\n\r\nPreviously, path data was accessed through the `strURIpart` parameter which was passed to all endpoints. Since this data was already contained in the `HTTPRequest req` and we now have `HTTPRequest::GetPath()` and `HTTPRequest::GetPathParameter()` which are more intuitive to use, the `strURIpart` parameter is removed from the endpoint callback, simplifying the interface.\r\n\r\nFinally, the `?count` query parameter introduced by #24098 is now made required, unless `-deprecatedrest=count` is enabled. This way users understand the endpoint is updating, and we can reasonably remove it in some future update to simplify the code.",
          "user": {
            "login": "stickies-v",
            "id": 69010457,
            "node_id": "MDQ6VXNlcjY5MDEwNDU3",
            "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stickies-v",
            "html_url": "https://github.com/stickies-v",
            "followers_url": "https://api.github.com/users/stickies-v/followers",
            "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
            "organizations_url": "https://api.github.com/users/stickies-v/orgs",
            "repos_url": "https://api.github.com/users/stickies-v/repos",
            "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/stickies-v/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25754",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25754",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25754.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25754.patch"
          },
          "closed_at": "2023-03-13T11:28:18Z",
          "created_at": "2022-07-30T20:35:17Z",
          "updated_at": "2023-03-13T11:28:19Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-31T05:02:32Z",
      "updated_at": "2022-07-31T05:02:32Z",
      "source": {
        "issue": {
          "id": 1323281899,
          "node_id": "PR_kwDOABII5848X1y7",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25753",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25753/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25753/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25753/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25753",
          "number": 25753,
          "state": "closed",
          "state_reason": null,
          "title": "rest: Move format string from path-like parameter to query parameter",
          "body": "**Draft, for reference only to support #25752 for discussion on concept and approach. Code and tests should be fully functional, but still to be considered rough.**\r\n\r\n## Brief summary\r\nAll REST API endpoints require the user to specify the response format by including a format string at the end of the path (e.g. `/rest/chaininfo.json`). This PR removes the path-like parameter and updates all endpoints to use a `?format` query parameter, which defaults to `json` if unspecified.\r\n\r\nPrevious behaviour can be preserved through `-deprecatedrest=format`\r\n\r\nBenefits:\r\n- only use (standard) path and query parameters, no custom dot-separated parameter\r\n- a default `json` response format seems reasonable, and was trivial to implement with a query parameter\r\n- simplify code since we don't need bespoke logic to parse the format, e.g. remove `ParseDataFormat()` function which had too many responsibilities\r\n- Introduce `-deprecatedrest` startup option, similar to `-deprecatedrpc`. With this option, we keep API changes backwards compatible for as long as the `-deprecatedrest` option is available (usually 1 version?).",
          "user": {
            "login": "stickies-v",
            "id": 69010457,
            "node_id": "MDQ6VXNlcjY5MDEwNDU3",
            "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stickies-v",
            "html_url": "https://github.com/stickies-v",
            "followers_url": "https://api.github.com/users/stickies-v/followers",
            "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
            "organizations_url": "https://api.github.com/users/stickies-v/orgs",
            "repos_url": "https://api.github.com/users/stickies-v/repos",
            "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/stickies-v/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25753",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25753",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25753.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25753.patch"
          },
          "closed_at": "2023-03-13T11:28:07Z",
          "created_at": "2022-07-30T20:35:05Z",
          "updated_at": "2023-03-13T11:28:08Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1057375116,
      "node_id": "PRR_kwDOABII584_BkOM",
      "url": null,
      "actor": null,
      "commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "looks good, but doesn't compile in many places",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#pullrequestreview-1057375116",
      "submitted_at": "2022-08-01T15:40:45Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
    },
    {
      "event": "reviewed",
      "id": 1057513910,
      "node_id": "PRR_kwDOABII584_CGG2",
      "url": null,
      "actor": null,
      "commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "(Feel free to ignore the feedback)",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#pullrequestreview-1057513910",
      "submitted_at": "2022-08-01T15:48:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
    },
    {
      "event": "reviewed",
      "id": 1057516802,
      "node_id": "PRR_kwDOABII584_CG0C",
      "url": null,
      "actor": null,
      "commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b  🖌\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\n42f4f7d126f6729c4924b0630f67d171f4d0ac9b  🖌\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUhJAAwAq6deLBiOO2WBQPKh16i4of8/CxKg0btdMYGdzxfdExEG8Dm27whTumz/\r\npDjAMeCpUlVuqYeR/iOrjfmkPXMXsOTWoKMXR2+RGQGTazobq7LQH2aZj5BRDnh0\r\nzQBBpQ2X1BNQioLb45Wik63Rg/RbPX2s9hvNxXOL2OUCBqXJr0Hm1ZgxEd9/vsMe\r\na4ieXXLSJ5+ecc4DpZILj+ulVo4BCTRLnGZz+p7dRvDtzM62OQcxmUWt1u0mwYVf\r\ngqYiqbEnQYcU2uLhKv1VTBdTpzWQYVALWTvZS+2Bbibt8tVpwJ+auDy8erWHZTZh\r\nHKWnPPX5bb2UiHEnkEnJzuef8bGGBZE7WyNhaX6v4l7+LUWxh649xz7iqET8/+Ip\r\nPbXfBoyk1pQ9tQo5MEJPwiFAP4xSSHJCjcvrXFFOUIt6iW5U1ANpUP03yzeRnkBe\r\nE8O97B5lb6Z8b5Cr+xWYVHFntw4HiBk4tvls9imI/9qkGQxNQMAUKOqEYktpVZ5z\r\nZcC2Ugbr\r\n=TSsI\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n\r\n</details>\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#pullrequestreview-1057516802",
      "submitted_at": "2022-08-01T15:48:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7104229512,
      "node_id": "HRFPE_lADOABII585OrhvfzwAAAAGncfCI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7104229512",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-01T19:19:22Z"
    },
    {
      "event": "commented",
      "id": 1201624044,
      "node_id": "IC_kwDOABII585Hn1Ps",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1201624044",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-01T19:30:07Z",
      "updated_at": "2022-08-01T19:30:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for reviews!\r\n\r\nUpdated 42f4f7d126f6729c4924b0630f67d171f4d0ac9b -> e0289b1cdfe80644cb7045f74e6bd63562e092f8 ([`pr/bresult-del.4`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult-del.4) -> [`pr/bresult-del.5`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult-del.5), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/bresult-del.4..pr/bresult-del.5)) with suggestions\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/25721#pullrequestreview-1056186962\r\n\r\n> maybe the changes can be split in two or more commits.\r\n\r\nI'm not so sure there is a way to do this that's a clear improvement. It would be possible to split by adding the new result interface and changing the old result interface to wrap the new interface in one commit, then deleting the old interface and changing usages to call the new interface in a second commit. This would split up the PR but also make it a little more complicated. Wouldn't oppose this, just not sure it would be worth it",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#issuecomment-1201624044",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25721"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7106418975,
      "node_id": "HRFPE_lADOABII585OrhvfzwAAAAGnk1kf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7106418975",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-02T04:00:48Z"
    },
    {
      "event": "commented",
      "id": 1201989143,
      "node_id": "IC_kwDOABII585HpOYX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1201989143",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-02T04:02:38Z",
      "updated_at": "2022-08-02T04:02:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased e0289b1cdfe80644cb7045f74e6bd63562e092f8 -> 3262acf70a9fdd6b4191812f928ed374dfcf32e1 ([`pr/bresult-del.5`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult-del.5) -> [`pr/bresult-del.6`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult-del.6), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/bresult-del.5-rebase..pr/bresult-del.6)) due to silent conflict with #24584",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#issuecomment-1201989143",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25721"
    },
    {
      "event": "reviewed",
      "id": 1058656696,
      "node_id": "PRR_kwDOABII584_GdG4",
      "url": null,
      "actor": null,
      "commit_id": "3262acf70a9fdd6b4191812f928ed374dfcf32e1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 3262acf70a9fdd6b4191812f928ed374dfcf32e1 🍕\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK 3262acf70a9fdd6b4191812f928ed374dfcf32e1 🍕\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUjeSwv/WOfsnvZzsh0ls1W5nwhWVihAvZgqSDvwLDwjhIUroZAbxicGcR4+nMH3\r\n8j/Ni2gs4mSYL3PDMOMYj0UgNalPtD41izoTFV/oEfoM1sT/1ZV0b6GtpzmNH+pR\r\nPyuzQlGEFZSOyjHVKzQDfi6Io+1f9s4NLEPcP6KfzmNr6NaQYUCKQ2w59WVTlk/b\r\nELCJnE7DHAMamOF4zY6uvuiVx9SaUiM3cXjaUAZ6a1G3ccvgccGkFJNZwrXRkwKr\r\nD1H7czDFaF5uyEMl/MJldPqmTztDGjj+vOOmOOYhSIAsMmiCgdoG/PFudKf1ple0\r\ncVQYBS1Z2Z/aDHbk44rFzXw0eITgb69AMTwmU1iSOw5gzl4/Ejv8b0q0FTX/l/b2\r\n3G4SjdP5oq1gmCjfzITeU9JxgqcKhSb83sp/LInsbg6KFAI7zP0KnluoNGK3o+NY\r\nhgjGzcScF6+pULwZjdweCVW+7JtefZMhwAFYle45+gVzaJ2otL6SZrThBRKuJWi3\r\nkndV8T/O\r\n=xb3E\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n\r\n</details>\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#pullrequestreview-1058656696",
      "submitted_at": "2022-08-02T12:50:41Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-02T12:59:12Z",
      "updated_at": "2022-08-02T12:59:12Z",
      "source": {
        "issue": {
          "id": 1248806079,
          "node_id": "PR_kwDOABII5844e2kY",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25218",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25218/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25218/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25218/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25218",
          "number": 25218,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: introduce generic 'Result' class and connect it to CreateTransaction and GetNewDestination",
          "body": "Based on a common function signature pattern that we have all around the sources:\r\n```cpp\r\nbool doSomething(arg1, arg2, arg3, arg4, &result_obj, &error_string) {\r\n    // do something...\r\n    if (error) {\r\n        error_string = \"something bad happened\";\r\n        return false;\r\n    }\r\n\r\n    result = goodResult;\r\n    return true;\r\n}\r\n```\r\n\r\nIntroduced a generic class `BResult` that encapsulate the function boolean result, the result object (in case of having it) and, in case of failure, the string error reason.\r\n\r\nObtaining in this way cleaner function signatures and removing boilerplate code:\r\n\r\n```cpp\r\nBResult<Obj> doSomething(arg1, arg2, arg3, arg4) {\r\n    // do something...\r\n    if (error) return \"something bad happened\";\r\n\r\n    return goodResult;\r\n}\r\n```\r\n\r\nSame cleanup applies equally to the function callers' side as well. There is no longer need to add the error string and the result object declarations before calling the function:\r\n\r\nBefore:\r\n```cpp\r\nObj result_obj;\r\nstd::string error_string;\r\nif (!doSomething(arg1, arg2, arg3, arg4, result_obj, error_string)) {\r\n    LogPrintf(\"Error: %s\", error_string);\r\n}\r\nreturn result_obj;\r\n```\r\n\r\nNow:\r\n```cpp\r\nBResult<Obj> op_res = doSomething(arg1, arg2, arg3, arg4);\r\nif (!op_res) {\r\n    LogPrintf(\"Error: %s\", op_res.GetError());\r\n}\r\nreturn op_res.GetObjResult();\r\n```\r\n\r\n### Initial Implementation:\r\n\r\nHave connected this new concept to two different flows for now:\r\n\r\n1) The `CreateTransaction` flow. --> 7ba2b87c\r\n2) The `GetNewDestination` flow. --> bcee0912\r\n\r\nHappy note: even when introduced a new class into the sources, the amount of lines removed is almost equal to added ones :).\r\n\r\nExtra note: this work is an extended version (and a decoupling) of the work that is inside #24845 (which does not contain the `GetNewDestination` changes nor the inclusion of the `FeeCalculation` field inside `CreatedTransactionResult`).",
          "user": {
            "login": "furszy",
            "id": 5377650,
            "node_id": "MDQ6VXNlcjUzNzc2NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/furszy",
            "html_url": "https://github.com/furszy",
            "followers_url": "https://api.github.com/users/furszy/followers",
            "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
            "organizations_url": "https://api.github.com/users/furszy/orgs",
            "repos_url": "https://api.github.com/users/furszy/repos",
            "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/furszy/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 33,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25218",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25218",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25218.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25218.patch"
          },
          "closed_at": "2022-07-12T11:58:05Z",
          "created_at": "2022-05-25T22:17:56Z",
          "updated_at": "2023-05-27T01:51:02Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7111197406,
      "node_id": "HRFPE_lADOABII585OrhvfzwAAAAGn3ELe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7111197406",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-02T15:47:59Z"
    },
    {
      "event": "reviewed",
      "id": 1058935631,
      "node_id": "PRR_kwDOABII584_HhNP",
      "url": null,
      "actor": null,
      "commit_id": "3262acf70a9fdd6b4191812f928ed374dfcf32e1",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Very helpful review!\r\n\r\nUpdated 3262acf70a9fdd6b4191812f928ed374dfcf32e1 -> 6777df621a8c3deef033fcf815b297ee4bf3ee0f ([`pr/bresult-del.6`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult-del.6) -> [`pr/bresult-del.7`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult-del.7), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/bresult-del.6..pr/bresult-del.7)) with suggested changes\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#pullrequestreview-1058935631",
      "submitted_at": "2022-08-02T15:48:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
    },
    {
      "event": "commented",
      "id": 1202888217,
      "node_id": "IC_kwDOABII585Hsp4Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1202888217",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-02T15:55:11Z",
      "updated_at": "2022-08-02T15:55:11Z",
      "author_association": "MEMBER",
      "body": "ACK 6777df621a8c3deef033fcf815b297ee4bf3ee0f 🏏\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK 6777df621a8c3deef033fcf815b297ee4bf3ee0f 🏏\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUi6Rgv/WA9wbfJG1xh/y8U4qZQRSFhfIOMqcDjrvC8EdxHFYf+F7obHU/UZJ+F5\r\n3HN5IYXLO6ipZ5av9UT5bHmIbuUipeEJTPb2/6kqc+n03Vb8kS/+puVqJUQYLl2q\r\n6U/GBuZ/N+wErXYR9ck+1S2lB+N85+/TVdysIXf8DIs26Y6V+zvWoyM5ahBHnWYw\r\nrEF2FxMJ40ShEWi2Ov41PAh/xn6N3qBPhFoNHYuEY6EehXEwavsUV1DTxSqXuMoQ\r\nl4sFUZvD++KWl5WpZEmr/J7diTr9NRAgERgJ67CskhnZ3j+zykAXeoqU0I8Yhd/f\r\n/KEddaPmPRJgS3MIa6wN7dX2vkKnKyu9pBJnfekyhWmndGu2ZIPDBDZD/ELO8ndF\r\n+avMWRDH0tiCqShDUWMCcpgheogqtMlWZBAcbci7aQUJ9JOFeRfQSqwR5OzAkTWK\r\nJzB4rcQ+HV8V92lcBU0PpNaGWNsqxmb8n8gjsI0fnNrtx4obvdiyOlJfebsToIky\r\nOZiqWv/2\r\n=HEva\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n\r\n</details>\r\n\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#issuecomment-1202888217",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25721"
    },
    {
      "event": "reviewed",
      "id": 1059035194,
      "node_id": "PRR_kwDOABII584_H5g6",
      "url": null,
      "actor": null,
      "commit_id": "6777df621a8c3deef033fcf815b297ee4bf3ee0f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#pullrequestreview-1059035194",
      "submitted_at": "2022-08-02T16:06:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7111783332,
      "node_id": "HRFPE_lADOABII585OrhvfzwAAAAGn5TOk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7111783332",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-02T17:06:35Z"
    },
    {
      "event": "reviewed",
      "id": 1059114969,
      "node_id": "PRR_kwDOABII584_IM_Z",
      "url": null,
      "actor": null,
      "commit_id": "c654ec55f88c980bb085e4096435d69e97a09663",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Updated 6777df621a8c3deef033fcf815b297ee4bf3ee0f -> c654ec55f88c980bb085e4096435d69e97a09663 ([`pr/bresult-del.7`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult-del.7) -> [`pr/bresult-del.8`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult-del.8), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/bresult-del.7..pr/bresult-del.8)) with more complete commit description and suggestions from last review\r\nUpdated c654ec55f88c980bb085e4096435d69e97a09663 -> 7b249b3a163effc08c9faca841647c936d22ee7a ([`pr/bresult-del.8`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult-del.8) -> [`pr/bresult-del.9`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult-del.9), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/bresult-del.8..pr/bresult-del.9)) with a few more cleanups",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#pullrequestreview-1059114969",
      "submitted_at": "2022-08-02T17:08:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7111901558,
      "node_id": "HRFPE_lADOABII585OrhvfzwAAAAGn5wF2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7111901558",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-02T17:24:32Z"
    },
    {
      "event": "reviewed",
      "id": 1059146733,
      "node_id": "PRR_kwDOABII584_IUvt",
      "url": null,
      "actor": null,
      "commit_id": "7b249b3a163effc08c9faca841647c936d22ee7a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Some nits, but please don't take them or I might leave more",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#pullrequestreview-1059146733",
      "submitted_at": "2022-08-02T17:34:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
    },
    {
      "event": "commented",
      "id": 1203033503,
      "node_id": "IC_kwDOABII585HtNWf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1203033503",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-02T17:46:04Z",
      "updated_at": "2022-08-02T17:46:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Some nits, but please don't take them or I might leave more\r\n\r\nOk, will skip noexcept stuff for now unless there is another push. If I rebase #25665 on top of this PR, that would be another chance to make noexcept or constexpr or similar improvements.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#issuecomment-1203033503",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25721"
    },
    {
      "event": "reviewed",
      "id": 1059661095,
      "node_id": "PRR_kwDOABII584_KSUn",
      "url": null,
      "actor": null,
      "commit_id": "7b249b3a163effc08c9faca841647c936d22ee7a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK, pretty cool stuff.\r\nWill review it deeper in the coming days.\r\n\r\nHave to say that would have loved to talk about some of this stuff on the initial PR and/or via DM. Including the thrashing to the current result class name. But well, no hard feelings.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#pullrequestreview-1059661095",
      "submitted_at": "2022-08-03T04:08:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGEyM2NjYTU2YzBhN2Y0YTI2NzkxNWI0YmViYTNhZjM0NTRjNTE2MDM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a23cca56c0a7f4a267915b4beba3af3454c51603",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a23cca56c0a7f4a267915b4beba3af3454c51603",
      "tree": {
        "sha": "5d85193889f5a4552a568cfd2b472670c2c6d513",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d85193889f5a4552a568cfd2b472670c2c6d513"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a4289e2c98cfbc51b05716f21065838afed80f6",
          "sha": "4a4289e2c98cfbc51b05716f21065838afed80f6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4a4289e2c98cfbc51b05716f21065838afed80f6"
        }
      ],
      "message": "refactor: Replace BResult with util::Result\n\nRename `BResult` class to `util::Result` and update the class interface to be\nmore compatible with `std::optional` and with a full-featured result class\nimplemented in https://github.com/bitcoin/bitcoin/pull/25665. Motivation for\nthis change is to update existing `BResult` usages now so they don't have to\nchange later when more features are added in #25665.\n\nThis change makes the following improvements originally implemented in #25665:\n\n- More explicit API. Drops potentially misleading `BResult` constructor that\n  treats any bilingual string argument as an error. Adds `util::Error`\n  constructor so it is never ambiguous when a result is being assigned an error\n  or non-error value.\n\n- Better type compatibility. Supports `util::Result<bilingual_str>` return\n  values to hold translated messages which are not errors.\n\n- More standard and consistent API. `util::Result` supports most of the same\n  operators and methods as `std::optional`. `BResult` had a less familiar\n  interface with `HasRes`/`GetObj`/`ReleaseObj` methods. The Result/Res/Obj\n  naming was also not internally consistent.\n\n- Better code organization. Puts `src/util/` code in the `util::` namespace so\n  naming reflects code organization and it is obvious where the class is coming\n  from. Drops \"B\" from name because it is undocumented what it stands for\n  (bilingual?)\n\n- Has unit tests.",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2022-08-03T11:33:01Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2022-07-21T12:30:39Z"
      },
      "sha": "a23cca56c0a7f4a267915b4beba3af3454c51603"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7119778449,
      "node_id": "HRFPE_lADOABII585OrhvfzwAAAAGoXzKR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7119778449",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-03T15:35:57Z"
    },
    {
      "event": "reviewed",
      "id": 1060329090,
      "node_id": "PRR_kwDOABII584_M1aC",
      "url": null,
      "actor": null,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Rebased 7b249b3a163effc08c9faca841647c936d22ee7a -> a23cca56c0a7f4a267915b4beba3af3454c51603 ([`pr/bresult-del.9`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult-del.9) -> [`pr/bresult-del.10`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult-del.10), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/bresult-del.9-rebase..pr/bresult-del.10)) due to silent conflict with #25272\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/25721#pullrequestreview-1059661095\r\n\r\n> Have to say that would have loved to talk about some of this stuff on the initial PR and/or via DM. Including the thrashing to the current result class name. But well, no hard feelings.\r\n\r\nThanks. I did bring up all of the issues I saw with the result class in the original PR, including the name. But I didn't want to get bogged down, and in general I think it's more productive to iterate on designs across PRs than to have back and forth debates in PR comments. Iterating across PRs puts PR authors in a position to propose unified designs, and avoid problems of design-by-committtee, or intractable disagreements, or compromises that split things down the middle and don't leave anybody happy. Better to give priority to PR authors and just take turns making improvements. Also, iterating on designs with actual PRs instead of PR comments centers code changes over verbal descriptions, which I think leads to better decisions in the end.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#pullrequestreview-1060329090",
      "submitted_at": "2022-08-03T15:44:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-04T09:30:01Z",
      "updated_at": "2022-08-04T09:30:01Z",
      "source": {
        "issue": {
          "id": 1322119635,
          "node_id": "PR_kwDOABII5848T94k",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25734",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25734/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25734/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25734/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25734",
          "number": 25734,
          "state": "closed",
          "state_reason": null,
          "title": "wallet, refactor: #24584 follow-ups",
          "body": "This PR is to address follow-ups for #24584, specifically:\r\n\r\n* Remove redundant, hard-to-read code by adding a new `OutputType` and adding shuffle, erase, and push_back methods for `CoinsResult`\r\n* Add missing `BOOST_ASSERT` to unit test\r\n* Ensure functional test only runs if using descriptor wallets\r\n* Improve readability of `AttemptSelection` by removing triple-nested if statement\r\n\r\nNote for reviewers: commit `refactor: add new helper methods` should throw an \"unused function warning\"; the function is used in the next commit. Also, commit `wallet: switch to new shuffle, erase, push_back` will fail to compile, but this is fixed in the next commit with a scripted-diff. the commits are separate like this (code change then scripted-diff) to improve legibility.\r\n",
          "user": {
            "login": "josibake",
            "id": 7444140,
            "node_id": "MDQ6VXNlcjc0NDQxNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/josibake",
            "html_url": "https://github.com/josibake",
            "followers_url": "https://api.github.com/users/josibake/followers",
            "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
            "organizations_url": "https://api.github.com/users/josibake/orgs",
            "repos_url": "https://api.github.com/users/josibake/repos",
            "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/josibake/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 11,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25734",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25734",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25734.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25734.patch"
          },
          "closed_at": "2022-08-17T00:00:45Z",
          "created_at": "2022-07-29T11:16:21Z",
          "updated_at": "2022-08-18T19:49:30Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-04T10:10:54Z",
      "updated_at": "2022-08-04T10:10:54Z",
      "source": {
        "issue": {
          "id": 1315657410,
          "node_id": "PR_kwDOABII5847-7hZ",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25685",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25685/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25685/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25685/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25685",
          "number": 25685,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Faster transaction creation by removing pre-set-inputs fetching responsibility from Coin Selection",
          "body": "#### # Context (Current Flow on Master)\r\n\r\nIn the transaction creation process, in order to select which coins the new transaction will spend,\r\nwe first obtain all the available coins known by the wallet, which means walking-through the\r\nwallet txes map, gathering the ones that fulfill certain spendability requirements in a vector.\r\n\r\nThis coins vector is then provided to the Coin Selection process, which first checks if the user\r\nhas manually selected any input (which could be internal, aka known by the wallet, or external),\r\nand if it does, it fetches them by searching each of them inside the wallet and/or inside the\r\nCoin Control external tx data.\r\n\r\nThen, after finding the pre-selected-inputs and gathering them in a vector, the Coin Selection\r\nprocess walks-through the entire available coins vector once more just to erase coins that are\r\nin both vectors. So the Coin Selection process doesn’t pick them twice (duplicate inputs inside\r\nthe same transaction).\r\n\r\n#### # Process Workflow Changes\r\n\r\nNow, a new method, `FetchCoins` will be responsible for:\r\n1) Lookup the user pre-selected-inputs (which can be internal or external).\r\n2) And, fetch the available coins in the wallet (excluding the already fetched ones).\r\n\r\nWhich will occur prior to the Coin Selection process. Which allows us to never include the\r\npre-selected-inputs inside the available coins vector in the first place, as well as doing other\r\nnice improvements (written below).\r\n\r\nSo, Coin Selection can perform its main responsibility without mixing it with having to fetch\r\ninternal/external coins nor any slow and unneeded duplicate coins verification.\r\n\r\n#### # Summarizing the Improvements:\r\n\r\n1) If any pre-selected-input lookup fail, the process will return the error right away.\r\n    (before, the wallet was fetching all the wallet available coins, walking through the\r\n    entire txes map, and then failing for an invalid pre-selected-input inside SelectCoins)\r\n\r\n2) The pre-selected-inputs lookup failure causes are properly described on the return error.\r\n    (before, we were returning an \"Insufficient Funds\" error for everything, even if the failure\r\n    was due a not solvable external input)\r\n\r\n3) **Faster Coin Selection**: no longer need to \"remove the pre-set inputs from the available coins\r\n    vector so that Coin Selection doesn't pick them\" (which meant to loop-over the entire\r\n    available coins vector at Coin Selection time, erasing duplicate coins that were pre-selected).\r\n   \r\n    Now, the available coins vector, which is built after the pre-selected-inputs fetching,\r\n    doesn’t include the already selected inputs in the first place.\r\n\r\n4) **Faster transaction creation** for transactions that only use manually selected inputs.\r\n\r\n    We now will return early, as soon as we finish fetching the pre-selected-inputs and\r\n    not perform the resources expensive calculation of walking-through the entire wallet\r\n    txes map to obtain the available coins (coins that we will not use).\r\n\r\n---------------------------\r\n\r\nAdded a new bench (f6d0bb2) measuring the transaction creation process, for a wallet with ~250k UTXO, only using the pre-selected-inputs inside coin control. Setting `m_allow_other_inputs=false` to disallow the wallet to include coins automatically.\r\n\r\n#### Result on this PR (tip f6d0bb2d):\r\n\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|        1,048,675.00 |              953.58 |    0.3% |      0.06 | `WalletCreateTransaction`\r\n\r\nvs\r\n\r\n#### Result on master (tip 4a4289e2):\r\n\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|       96,373,458.20 |               10.38 |    0.2% |      5.30 | `WalletCreateTransaction`\r\n\r\nThe benchmark took to run in master: **96.37 milliseconds**, while in this PR: **1 millisecond**  🚀 .",
          "user": {
            "login": "furszy",
            "id": 5377650,
            "node_id": "MDQ6VXNlcjUzNzc2NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/furszy",
            "html_url": "https://github.com/furszy",
            "followers_url": "https://api.github.com/users/furszy/followers",
            "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
            "organizations_url": "https://api.github.com/users/furszy/orgs",
            "repos_url": "https://api.github.com/users/furszy/repos",
            "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/furszy/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 30,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25685",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25685",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25685.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25685.patch"
          },
          "closed_at": "2022-10-27T21:49:29Z",
          "created_at": "2022-07-23T13:19:19Z",
          "updated_at": "2023-05-27T01:48:36Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-04T16:59:39Z",
      "updated_at": "2022-08-04T16:59:39Z",
      "source": {
        "issue": {
          "id": 1243856335,
          "node_id": "PR_kwDOABII5844Oka6",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25183",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25183/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25183/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25183/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25183",
          "number": 25183,
          "state": "closed",
          "state_reason": null,
          "title": "rpc: Filter inputs by type during CoinSelection ",
          "body": "This PR adds a filter to the CoinControl to select only specific utxos by type. It allows the `fundrawtransaction` and `walletcreatefundedpsbt` rpc calls to filter inputs by type.\r\n\r\nCloses #25181.\r\n\r\n",
          "user": {
            "login": "aureleoules",
            "id": 22493292,
            "node_id": "MDQ6VXNlcjIyNDkzMjky",
            "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aureleoules",
            "html_url": "https://github.com/aureleoules",
            "followers_url": "https://api.github.com/users/aureleoules/followers",
            "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
            "organizations_url": "https://api.github.com/users/aureleoules/orgs",
            "repos_url": "https://api.github.com/users/aureleoules/repos",
            "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/aureleoules/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 16,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25183",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25183",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25183.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25183.patch"
          },
          "closed_at": "2022-12-08T12:22:12Z",
          "created_at": "2022-05-21T03:44:14Z",
          "updated_at": "2022-12-08T12:22:12Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1063251404,
      "node_id": "PRR_kwDOABII584_X-3M",
      "url": null,
      "actor": null,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK a23cca56c0a7f4a267915b4beba3af3454c51603\r\n\r\nIf you retouch, suggest running the clang-format script on these changes for indentation fixups: `git diff -U0 HEAD~1.. | ./contrib/devtools/clang-format-diff.py -p1 -i -v`",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#pullrequestreview-1063251404",
      "submitted_at": "2022-08-05T12:31:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
    },
    {
      "event": "milestoned",
      "id": 7135617893,
      "node_id": "MIE_lADOABII585OrhvfzwAAAAGpUONl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7135617893",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-05T12:41:05Z",
      "milestone": {
        "title": "24.0"
      }
    },
    {
      "event": "commented",
      "id": 1206464847,
      "node_id": "IC_kwDOABII585H6TFP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1206464847",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-05T13:33:12Z",
      "updated_at": "2022-08-05T13:33:12Z",
      "author_association": "MEMBER",
      "body": "ACK a23cca56c0a7f4a267915b4beba3af3454c51603 🏵\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK a23cca56c0a7f4a267915b4beba3af3454c51603 🏵\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUibEwwAtRdeVzFNlJvBUQma8DTkES+vTFqwFFtrgLjyySE7Vhj1zch85AEseH+8\r\nJbezZlkYhBZJmxhCvZxPd7i50Ol9DLQM3yJNSwIMIpxaTJicKxD0YIcFYl3qAA1D\r\nFUnXa5XWt8ZtdX0CNUtUYJaY63kKVQhX8ln5Yukrkh9NtPttpNyqVMSOnCDY7w/A\r\nfLbge5LbQDcQEuxZ38dkh0fx/aUJuB7IknZ8x+KEFaUuoBz5XZQM76gIOjoDYZff\r\nQA1rm6jPZ7HZ1HhmgrDabTisSV3Y9mgqyuKvwr4sPM/TfxerSmX2n5lj30uaXlC4\r\nek829uZyzzOvvKdSbvKIHJ0S87WOi8br0ta6bFfScZmCw9fFP3ts15ROo8X8ERYE\r\nDNzQ2EyZL1XXKC4mAdr6WfTyQ42q4YAILUTkoN++6yBYWJgO90sFdZ5NRSbZyHIz\r\nrDqlFjlWRONL0ieHqlJKzKSJq4TPSC0ewvrKPHiBsmOg3rVum93ZJ/u03+39Ahws\r\nEBA0XoCZ\r\n=UnbR\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n\r\n</details>\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#issuecomment-1206464847",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25721"
    },
    {
      "event": "merged",
      "id": 7135994491,
      "node_id": "ME_lADOABII585OrhvfzwAAAAGpVqJ7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7135994491",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "006740b6f6475ed6ae08803c60dd82027602695b",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/006740b6f6475ed6ae08803c60dd82027602695b",
      "created_at": "2022-08-05T13:36:19Z"
    },
    {
      "event": "closed",
      "id": 7135994541,
      "node_id": "CE_lADOABII585OrhvfzwAAAAGpVqKt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7135994541",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-05T13:36:19Z"
    },
    {
      "event": "referenced",
      "id": 7137474424,
      "node_id": "REFE_lADOABII585OrhvfzwAAAAGpbTd4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7137474424",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1be33625a0ae6ffb3a4a3b7aeed9b72de2b18154",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/1be33625a0ae6ffb3a4a3b7aeed9b72de2b18154",
      "created_at": "2022-08-05T17:27:00Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-09T22:45:52Z",
      "updated_at": "2022-08-09T22:45:52Z",
      "source": {
        "issue": {
          "id": 1320863837,
          "node_id": "PR_kwDOABII5848PxGI",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25729",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25729/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25729/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25729/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25729",
          "number": 25729,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Check max transaction weight in CoinSelection",
          "body": "This PR is an attempt to fix #5782.\r\n\r\nI have added 4 test scenarios, 3 of them provided here https://github.com/bitcoin/bitcoin/issues/5782#issuecomment-73819058 (slightly modified to use a segwit wallet).\r\n\r\nHere are my benchmarks : \r\n## PR\r\n|               ns/op |                op/s |    err% |          ins/op |          cyc/op |    IPC |         bra/op |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|        1,466,341.00 |              681.97 |    0.6% |   11,176,762.00 |    3,358,752.00 |  3.328 |   1,897,839.00 |    0.3% |      0.02 | `CoinSelection`\r\n\r\n## Master\r\n\r\n|               ns/op |                op/s |    err% |          ins/op |          cyc/op |    IPC |         bra/op |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|        1,526,029.00 |              655.30 |    0.5% |   11,142,188.00 |    3,499,200.00 |  3.184 |   1,994,156.00 |    0.2% |      0.02 | `CoinSelection`",
          "user": {
            "login": "aureleoules",
            "id": 22493292,
            "node_id": "MDQ6VXNlcjIyNDkzMjky",
            "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aureleoules",
            "html_url": "https://github.com/aureleoules",
            "followers_url": "https://api.github.com/users/aureleoules/followers",
            "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
            "organizations_url": "https://api.github.com/users/aureleoules/orgs",
            "repos_url": "https://api.github.com/users/aureleoules/repos",
            "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/aureleoules/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 28,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25729",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25729",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25729.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25729.patch"
          },
          "closed_at": "2022-12-06T17:09:51Z",
          "created_at": "2022-07-28T12:33:06Z",
          "updated_at": "2023-01-12T11:51:43Z"
        },
        "type": "issue"
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934581369",
      "pull_request_review_id": 1057375116,
      "id": 934581369,
      "node_id": "PRRC_kwDOABII5843tJR5",
      "diff_hunk": "@@ -9,41 +9,60 @@\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n+namespace util {\n+\n+struct Error { bilingual_str message; };\n+\n+//! The util::Result class provides a standard way for functions to return error\n+//! messages in addition to optional result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n template<class T>\n-class BResult {\n+class Result {\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n+    template <typename FT>\n+    friend class Result;\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n+\n public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n-\n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n-\n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n-    }\n-    T ReleaseObj()\n-    {\n-        assert(HasRes());\n-        return std::move(std::get<T>(m_variant));\n-    }\n-\n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n-    }\n-\n-    explicit operator bool() const { return HasRes(); }\n+    Result(T obj) : m_variant{std::move(obj)} {}\n+    Result(Error error) : m_variant{std::move(error.message)} {}\n+    template <typename OT>\n+    Result(Error error, Result<OT>&& other) : m_variant{std::move(std::get<0>(other.m_variant))} {}\n+\n+    //! std::optional methods, so functions returning optional<T> can change to\n+    //! return Result<T> with minimal changes to existing code, and vice versa.\n+    bool has_value() const { return m_variant.index() == 1; }\n+    const T& value() const { assert(*this); return std::get<1>(m_variant); }\n+    T& value() { assert(*this); return std::get<1>(m_variant); }\n+    template <typename U>\n+    T value_or(const U& default_value) const { return has_value() ? value() : default_value; }\n+    operator bool() const { return has_value(); }\n+    const T* operator->() const { return &value(); }\n+    const T& operator*() const { return value(); }\n+    T* operator->() { return &value(); }\n+    T& operator*() { return value(); }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 80,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For reference, this addresses my feedback from https://github.com/bitcoin/bitcoin/pull/25218#discussion_r906769777",
      "created_at": "2022-08-01T14:14:12Z",
      "updated_at": "2022-08-01T15:40:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934581369",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934581369"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934585908",
      "pull_request_review_id": 1057375116,
      "id": 934585908,
      "node_id": "PRRC_kwDOABII5843tKY0",
      "diff_hunk": "@@ -9,41 +9,60 @@\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n+namespace util {\n+\n+struct Error { bilingual_str message; };\n+\n+//! The util::Result class provides a standard way for functions to return error\n+//! messages in addition to optional result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n template<class T>\n-class BResult {\n+class Result {\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n+    template <typename FT>\n+    friend class Result;\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n+\n public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n-\n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n-\n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n-    }\n-    T ReleaseObj()\n-    {\n-        assert(HasRes());\n-        return std::move(std::get<T>(m_variant));\n-    }\n-\n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n-    }\n-\n-    explicit operator bool() const { return HasRes(); }\n+    Result(T obj) : m_variant{std::move(obj)} {}\n+    Result(Error error) : m_variant{std::move(error.message)} {}\n+    template <typename OT>\n+    Result(Error error, Result<OT>&& other) : m_variant{std::move(std::get<0>(other.m_variant))} {}\n+\n+    //! std::optional methods, so functions returning optional<T> can change to\n+    //! return Result<T> with minimal changes to existing code, and vice versa.\n+    bool has_value() const { return m_variant.index() == 1; }\n+    const T& value() const { assert(*this); return std::get<1>(m_variant); }\n+    T& value() { assert(*this); return std::get<1>(m_variant); }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 73,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Missing LIFETIMEBOUND for any method that returns `&` or `*`?",
      "created_at": "2022-08-01T14:18:41Z",
      "updated_at": "2022-08-01T15:40:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934585908",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934585908"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934590472",
      "pull_request_review_id": 1057375116,
      "id": 934590472,
      "node_id": "PRRC_kwDOABII5843tLgI",
      "diff_hunk": "@@ -947,36 +947,36 @@ static BResult<CreatedTransactionResult> CreateTransactionInternal(\n     return CreatedTransactionResult(tx, nFeeRet, nChangePosInOut, feeCalc);\n }\n \n-BResult<CreatedTransactionResult> CreateTransaction(\n+util::Result<CreatedTransactionResult> CreateTransaction(\n         CWallet& wallet,\n         const std::vector<CRecipient>& vecSend,\n         int change_pos,\n         const CCoinControl& coin_control,\n         bool sign)\n {\n     if (vecSend.empty()) {\n-        return _(\"Transaction must have at least one recipient\");\n+        return {util::Error{_(\"Transaction must have at least one recipient\")}};\n     }\n \n     if (std::any_of(vecSend.cbegin(), vecSend.cend(), [](const auto& recipient){ return recipient.nAmount < 0; })) {\n-        return _(\"Transaction amounts must not be negative\");\n+        return {util::Error{_(\"Transaction amounts must not be negative\")}};\n     }\n \n     LOCK(wallet.cs_wallet);\n \n     auto res = CreateTransactionInternal(wallet, vecSend, change_pos, coin_control, sign);\n-    TRACE4(coin_selection, normal_create_tx_internal, wallet.GetName().c_str(), res.HasRes(),\n-           res ? res.GetObj().fee : 0, res ? res.GetObj().change_pos : 0);\n+    TRACE4(coin_selection, normal_create_tx_internal, wallet.GetName().c_str(), bool(res),\n+           res ? res->fee : 0, res ? res->change_pos : 0);\n     if (!res) return res;\n-    const auto& txr_ungrouped = res.GetObj();\n+    const auto& txr_ungrouped = *res;\n     // try with avoidpartialspends unless it's enabled already\n     if (txr_ungrouped.fee > 0 /* 0 means non-functional fee rate estimation */ && wallet.m_max_aps_fee > -1 && !coin_control.m_avoid_partial_spends) {\n         TRACE1(coin_selection, attempting_aps_create_tx, wallet.GetName().c_str());\n         CCoinControl tmp_cc = coin_control;\n         tmp_cc.m_avoid_partial_spends = true;\n         auto res_tx_grouped = CreateTransactionInternal(wallet, vecSend, change_pos, tmp_cc, sign);\n         // Helper optional class for now\n-        std::optional<CreatedTransactionResult> txr_grouped{res_tx_grouped.HasRes() ? std::make_optional(res_tx_grouped.GetObj()) : std::nullopt};\n+        std::optional<CreatedTransactionResult> txr_grouped{res_tx_grouped ? std::make_optional(*res_tx_grouped) : std::nullopt};",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 146,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If the goal of this pull is to make the interface equal to std::optional, what is the point of keeping this line? If there is one, why not use `std::move`? See https://github.com/bitcoin/bitcoin/pull/25218#discussion_r918863838\r\n\r\n```suggestion\r\n        std::optional<CreatedTransactionResult> txr_grouped{res_tx_grouped ? std::make_optional(std::move(*res_tx_grouped)) : std::nullopt};\r\n```",
      "created_at": "2022-08-01T14:23:07Z",
      "updated_at": "2022-08-01T15:40:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934590472",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934590472"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 979,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934602539",
      "pull_request_review_id": 1057375116,
      "id": 934602539,
      "node_id": "PRRC_kwDOABII5843tOcr",
      "diff_hunk": "@@ -46,10 +46,10 @@ static void BenchUnloadWallet(std::shared_ptr<CWallet>&& wallet)\n static void AddTx(CWallet& wallet)\n {\n     const auto& dest = wallet.GetNewDestination(OutputType::BECH32, \"\");",
      "path": "src/bench/wallet_loading.cpp",
      "position": null,
      "original_position": 3,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    const auto& dest = *Assert(wallet.GetNewDestination(OutputType::BECH32, \"\"));\r\n```\r\n\r\nnit: Could remove the assert and `*` below, and add them to this line? (Though, it then might need a `std::move` to avoid a use-after-free?)",
      "created_at": "2022-08-01T14:34:32Z",
      "updated_at": "2022-08-01T15:40:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934602539",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934602539"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934605504",
      "pull_request_review_id": 1057375116,
      "id": 934605504,
      "node_id": "PRRC_kwDOABII5843tPLA",
      "diff_hunk": "@@ -393,8 +393,8 @@ void RestoreWalletActivity::restore(const fs::path& backup_file, const std::stri\n     QTimer::singleShot(0, worker(), [this, backup_file, wallet_name] {\n         auto wallet{node().walletLoader().restoreWallet(backup_file, wallet_name, m_warning_message)};\n \n-        m_error_message = wallet ? bilingual_str{} : wallet.GetError();\n-        if (wallet) m_wallet_model = m_wallet_controller->getOrCreateWallet(wallet.ReleaseObj());\n+        m_error_message = wallet ? bilingual_str{} : util::ErrorString(wallet);",
      "path": "src/qt/walletcontroller.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        m_error_message = util::ErrorString(wallet);\r\n```\r\n\r\nnit?",
      "created_at": "2022-08-01T14:37:21Z",
      "updated_at": "2022-08-01T15:40:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934605504",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934605504"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 396,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934609154",
      "pull_request_review_id": 1057375116,
      "id": 934609154,
      "node_id": "PRRC_kwDOABII5843tQEC",
      "diff_hunk": "@@ -9,41 +9,60 @@\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n+namespace util {\n+\n+struct Error { bilingual_str message; };\n+\n+//! The util::Result class provides a standard way for functions to return error\n+//! messages in addition to optional result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n template<class T>\n-class BResult {\n+class Result {\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n+    template <typename FT>\n+    friend class Result;\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n+\n public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n-\n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n-\n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n-    }\n-    T ReleaseObj()\n-    {\n-        assert(HasRes());\n-        return std::move(std::get<T>(m_variant));\n-    }\n-\n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n-    }\n-\n-    explicit operator bool() const { return HasRes(); }\n+    Result(T obj) : m_variant{std::move(obj)} {}\n+    Result(Error error) : m_variant{std::move(error.message)} {}\n+    template <typename OT>\n+    Result(Error error, Result<OT>&& other) : m_variant{std::move(std::get<0>(other.m_variant))} {}\n+\n+    //! std::optional methods, so functions returning optional<T> can change to\n+    //! return Result<T> with minimal changes to existing code, and vice versa.\n+    bool has_value() const { return m_variant.index() == 1; }\n+    const T& value() const { assert(*this); return std::get<1>(m_variant); }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 72,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Any reason to change this to have several `;` on one line, when clang-format doesn't like that? Also if you kept this as `return std::get<T>(m_variant);`, the diff would be smaller by one line.",
      "created_at": "2022-08-01T14:40:51Z",
      "updated_at": "2022-08-01T15:40:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934609154",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934609154"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934615230",
      "pull_request_review_id": 1057375116,
      "id": 934615230,
      "node_id": "PRRC_kwDOABII5843tRi-",
      "diff_hunk": "@@ -21,9 +21,9 @@ std::string getnewaddress(CWallet& w)\n {\n     constexpr auto output_type = OutputType::BECH32;\n     auto op_dest = w.GetNewDestination(output_type, \"\");",
      "path": "src/test/util/wallet.cpp",
      "position": null,
      "original_position": 3,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same: Use `Assert`?",
      "created_at": "2022-08-01T14:46:26Z",
      "updated_at": "2022-08-01T15:40:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934615230",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934615230"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934619680",
      "pull_request_review_id": 1057375116,
      "id": 934619680,
      "node_id": "PRRC_kwDOABII5843tSog",
      "diff_hunk": "@@ -9,41 +9,60 @@\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n+namespace util {\n+\n+struct Error { bilingual_str message; };\n+\n+//! The util::Result class provides a standard way for functions to return error\n+//! messages in addition to optional result values.",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 13,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n//! messages either or result values.\r\n```\r\n\r\nThis reads like \"and\", but should be \"xor\", no?",
      "created_at": "2022-08-01T14:50:22Z",
      "updated_at": "2022-08-01T15:40:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934619680",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934619680"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934642192",
      "pull_request_review_id": 1057375116,
      "id": 934642192,
      "node_id": "PRRC_kwDOABII5843tYIQ",
      "diff_hunk": "@@ -9,41 +9,60 @@\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n+namespace util {\n+\n+struct Error { bilingual_str message; };\n+\n+//! The util::Result class provides a standard way for functions to return error\n+//! messages in addition to optional result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n template<class T>\n-class BResult {\n+class Result {\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n+    template <typename FT>",
      "path": "src/util/result.h",
      "position": 46,
      "original_position": 33,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    template <typename OT>\r\n```\r\n\r\nnit: Shouldn't this be named `OT`, as it is used in the move-constructor copying the error from `Result<OT>`?",
      "created_at": "2022-08-01T15:12:29Z",
      "updated_at": "2022-08-01T15:40:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934642192",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934642192"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 40,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934656466",
      "pull_request_review_id": 1057375116,
      "id": 934656466,
      "node_id": "PRRC_kwDOABII5843tbnS",
      "diff_hunk": "@@ -9,41 +9,60 @@\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n+namespace util {\n+\n+struct Error { bilingual_str message; };\n+\n+//! The util::Result class provides a standard way for functions to return error\n+//! messages in addition to optional result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n template<class T>\n-class BResult {\n+class Result {\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n+    template <typename FT>\n+    friend class Result;\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n+\n public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n-\n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n-\n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n-    }\n-    T ReleaseObj()\n-    {\n-        assert(HasRes());\n-        return std::move(std::get<T>(m_variant));\n-    }\n-\n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n-    }\n-\n-    explicit operator bool() const { return HasRes(); }\n+    Result(T obj) : m_variant{std::move(obj)} {}\n+    Result(Error error) : m_variant{std::move(error.message)} {}\n+    template <typename OT>\n+    Result(Error error, Result<OT>&& other) : m_variant{std::move(std::get<0>(other.m_variant))} {}",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 67,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Looks like this drops `error.message`, but I guess that's fine?",
      "created_at": "2022-08-01T15:27:11Z",
      "updated_at": "2022-08-01T15:40:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934656466",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934656466"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934657900",
      "pull_request_review_id": 1057375116,
      "id": 934657900,
      "node_id": "PRRC_kwDOABII5843tb9s",
      "diff_hunk": "@@ -9,41 +9,60 @@\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n+namespace util {\n+\n+struct Error { bilingual_str message; };\n+\n+//! The util::Result class provides a standard way for functions to return error\n+//! messages in addition to optional result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n template<class T>\n-class BResult {\n+class Result {\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n+    template <typename FT>\n+    friend class Result;\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n+\n public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n-\n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n-\n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n-    }\n-    T ReleaseObj()\n-    {\n-        assert(HasRes());\n-        return std::move(std::get<T>(m_variant));\n-    }\n-\n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n-    }\n-\n-    explicit operator bool() const { return HasRes(); }\n+    Result(T obj) : m_variant{std::move(obj)} {}\n+    Result(Error error) : m_variant{std::move(error.message)} {}\n+    template <typename OT>\n+    Result(Error error, Result<OT>&& other) : m_variant{std::move(std::get<0>(other.m_variant))} {}\n+\n+    //! std::optional methods, so functions returning optional<T> can change to\n+    //! return Result<T> with minimal changes to existing code, and vice versa.\n+    bool has_value() const { return m_variant.index() == 1; }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 71,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Any reason to not leave this as-is? `std::holds_alternative<T>(m_variant);`",
      "created_at": "2022-08-01T15:28:33Z",
      "updated_at": "2022-08-01T15:40:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934657900",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934657900"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934662743",
      "pull_request_review_id": 1057375116,
      "id": 934662743,
      "node_id": "PRRC_kwDOABII5843tdJX",
      "diff_hunk": "@@ -9,41 +9,60 @@\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n+namespace util {\n+\n+struct Error { bilingual_str message; };\n+\n+//! The util::Result class provides a standard way for functions to return error\n+//! messages in addition to optional result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n template<class T>\n-class BResult {\n+class Result {\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n+    template <typename FT>\n+    friend class Result;\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n+\n public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n-\n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n-\n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n-    }\n-    T ReleaseObj()\n-    {\n-        assert(HasRes());\n-        return std::move(std::get<T>(m_variant));\n-    }\n-\n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n-    }\n-\n-    explicit operator bool() const { return HasRes(); }\n+    Result(T obj) : m_variant{std::move(obj)} {}\n+    Result(Error error) : m_variant{std::move(error.message)} {}\n+    template <typename OT>\n+    Result(Error error, Result<OT>&& other) : m_variant{std::move(std::get<0>(other.m_variant))} {}\n+\n+    //! std::optional methods, so functions returning optional<T> can change to\n+    //! return Result<T> with minimal changes to existing code, and vice versa.\n+    bool has_value() const { return m_variant.index() == 1; }\n+    const T& value() const { assert(*this); return std::get<1>(m_variant); }\n+    T& value() { assert(*this); return std::get<1>(m_variant); }\n+    template <typename U>\n+    T value_or(const U& default_value) const { return has_value() ? value() : default_value; }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 75,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This doesn't compile, so my recommendation would be to remove dead code and only add it when it is needed.\r\n\r\n\r\n```\r\n./util/result.h:53:69: error: call to implicitly-deleted copy constructor of 'const result_tests::NoCopy'\r\n    T value_or(const U& default_value) const { return has_value() ? value() : default_value; }\r\n                                                                    ^~~~~~~\r\ntest/result_tests.cpp:74:27: note: in instantiation of function template specialization 'util::Result<result_tests::NoCopy>::value_or<int>' requested here\r\n    BOOST_CHECK_EQUAL(obj.value_or(1), 5);\r\n                          ^\r\ntest/result_tests.cpp:14:26: note: copy constructor of 'NoCopy' is implicitly deleted because field 'm_n' has a deleted copy constructor\r\n    std::unique_ptr<int> m_n;\r\n                         ^\r\n```\r\n\r\n```diff\r\ndiff --git a/src/test/result_tests.cpp b/src/test/result_tests.cpp\r\nindex 5118571e23..bfd5672045 100644\r\n--- a/src/test/result_tests.cpp\r\n+++ b/src/test/result_tests.cpp\r\n@@ -68,4 +68,11 @@ BOOST_AUTO_TEST_CASE(check_returned)\r\n     ExpectFail(NoCopyFn(5, false), Untranslated(\"nocopy 5 error.\"));\r\n }\r\n \r\n+BOOST_AUTO_TEST_CASE(check_value_or)\r\n+{\r\n+    auto obj{NoCopyFn(5, true)};\r\n+    BOOST_CHECK_EQUAL(obj.value_or(1), 5);\r\n+    obj=NoCopyFn(5, false);\r\n+    BOOST_CHECK_EQUAL(obj.value_or(1), 1);\r\n+}\r\n BOOST_AUTO_TEST_SUITE_END()\r\ndiff --git a/src/util/result.h b/src/util/result.h\r\nindex b9e490025b..71aec57237 100644\r\n--- a/src/util/result.h\r\n+++ b/src/util/result.h\r\n@@ -49,8 +49,6 @@ public:\r\n     bool has_value() const { return m_variant.index() == 1; }\r\n     const T& value() const { assert(*this); return std::get<1>(m_variant); }\r\n     T& value() { assert(*this); return std::get<1>(m_variant); }\r\n-    template <typename U>\r\n-    T value_or(const U& default_value) const { return has_value() ? value() : default_value; }\r\n     operator bool() const { return has_value(); }\r\n     const T* operator->() const { return &value(); }\r\n     const T& operator*() const { return value(); }\r\n",
      "created_at": "2022-08-01T15:33:21Z",
      "updated_at": "2022-08-01T15:40:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934662743",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934662743"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934666224",
      "pull_request_review_id": 1057375116,
      "id": 934666224,
      "node_id": "PRRC_kwDOABII5843td_w",
      "diff_hunk": "@@ -9,41 +9,60 @@\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n+namespace util {\n+\n+struct Error { bilingual_str message; };\n+\n+//! The util::Result class provides a standard way for functions to return error\n+//! messages in addition to optional result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n template<class T>\n-class BResult {\n+class Result {\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n+    template <typename FT>\n+    friend class Result;\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n+\n public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n-\n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n-\n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n-    }\n-    T ReleaseObj()\n-    {\n-        assert(HasRes());\n-        return std::move(std::get<T>(m_variant));\n-    }\n-\n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n-    }\n-\n-    explicit operator bool() const { return HasRes(); }\n+    Result(T obj) : m_variant{std::move(obj)} {}\n+    Result(Error error) : m_variant{std::move(error.message)} {}\n+    template <typename OT>\n+    Result(Error error, Result<OT>&& other) : m_variant{std::move(std::get<0>(other.m_variant))} {}\n+\n+    //! std::optional methods, so functions returning optional<T> can change to\n+    //! return Result<T> with minimal changes to existing code, and vice versa.\n+    bool has_value() const { return m_variant.index() == 1; }\n+    const T& value() const { assert(*this); return std::get<1>(m_variant); }\n+    T& value() { assert(*this); return std::get<1>(m_variant); }\n+    template <typename U>\n+    T value_or(const U& default_value) const { return has_value() ? value() : default_value; }\n+    operator bool() const { return has_value(); }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 76,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "why remove `explicit`?",
      "created_at": "2022-08-01T15:37:07Z",
      "updated_at": "2022-08-01T15:40:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934666224",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934666224"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934670040",
      "pull_request_review_id": 1057506592,
      "id": 934670040,
      "node_id": "PRRC_kwDOABII5843te7Y",
      "diff_hunk": "@@ -9,41 +9,60 @@\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n+namespace util {\n+\n+struct Error { bilingual_str message; };\n+\n+//! The util::Result class provides a standard way for functions to return error\n+//! messages in addition to optional result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n template<class T>\n-class BResult {\n+class Result {\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n+    template <typename FT>\n+    friend class Result;\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n+\n public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n-\n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n-\n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n-    }\n-    T ReleaseObj()\n-    {\n-        assert(HasRes());\n-        return std::move(std::get<T>(m_variant));\n-    }\n-\n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n-    }\n-\n-    explicit operator bool() const { return HasRes(); }\n+    Result(T obj) : m_variant{std::move(obj)} {}\n+    Result(Error error) : m_variant{std::move(error.message)} {}\n+    template <typename OT>\n+    Result(Error error, Result<OT>&& other) : m_variant{std::move(std::get<0>(other.m_variant))} {}",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 67,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": 934656466,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe assert(error.message.empty()) for now?",
      "created_at": "2022-08-01T15:41:12Z",
      "updated_at": "2022-08-01T15:41:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934670040",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934670040"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934675169",
      "pull_request_review_id": 1057513910,
      "id": 934675169,
      "node_id": "PRRC_kwDOABII5843tgLh",
      "diff_hunk": "@@ -75,8 +75,8 @@ static void add_coin(std::vector<COutput>& coins, CWallet& wallet, const CAmount\n     tx.vout[nInput].nValue = nValue;\n     if (spendable) {\n         auto op_dest = wallet.GetNewDestination(OutputType::BECH32, \"\");\n-        assert(op_dest.HasRes());\n-        tx.vout[nInput].scriptPubKey = GetScriptForDestination(op_dest.GetObj());\n+        assert(op_dest);",
      "path": "src/wallet/test/coinselector_tests.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could move the Assert and `*` into the previous line? (Might need a `std::move`)",
      "created_at": "2022-08-01T15:46:46Z",
      "updated_at": "2022-08-01T15:48:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934675169",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934675169"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934676040",
      "pull_request_review_id": 1057513910,
      "id": 934676040,
      "node_id": "PRRC_kwDOABII5843tgZI",
      "diff_hunk": "@@ -69,14 +69,14 @@ struct FuzzedWallet {\n     CScript GetScriptPubKey(FuzzedDataProvider& fuzzed_data_provider)\n     {\n         auto type{fuzzed_data_provider.PickValueInArray(OUTPUT_TYPES)};\n-        BResult<CTxDestination> op_dest;\n+        util::Result<CTxDestination> op_dest{util::Error{}};\n         if (fuzzed_data_provider.ConsumeBool()) {\n             op_dest = wallet->GetNewDestination(type, \"\");\n         } else {\n             op_dest = wallet->GetNewChangeDestination(type);\n         }\n-        assert(op_dest.HasRes());\n-        return GetScriptForDestination(op_dest.GetObj());\n+        assert(op_dest);",
      "path": "src/wallet/test/fuzz/notifications.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could move the Assert down by one line?",
      "created_at": "2022-08-01T15:47:43Z",
      "updated_at": "2022-08-01T15:48:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934676040",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934676040"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934737031",
      "pull_request_review_id": 1057601416,
      "id": 934737031,
      "node_id": "PRRC_kwDOABII5843tvSH",
      "diff_hunk": "@@ -46,10 +46,10 @@ static void BenchUnloadWallet(std::shared_ptr<CWallet>&& wallet)\n static void AddTx(CWallet& wallet)\n {\n     const auto& dest = wallet.GetNewDestination(OutputType::BECH32, \"\");",
      "path": "src/bench/wallet_loading.cpp",
      "position": null,
      "original_position": 3,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": 934602539,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934602539\r\n\r\n> nit: Could remove the assert and `*` below, and add them to this line? (Though, it then might need a `std::move` to avoid a use-after-free?)\r\n\r\nSure, this does seem like a good additional simplification. Added `*Assert` and dropped `&` to avoid use-after-free this would cause (std::move is just a type-cast and wouldn't extend the return value lifetime after the Assert)",
      "created_at": "2022-08-01T16:59:15Z",
      "updated_at": "2022-08-01T19:04:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934737031",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934737031"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934737427",
      "pull_request_review_id": 1057601416,
      "id": 934737427,
      "node_id": "PRRC_kwDOABII5843tvYT",
      "diff_hunk": "@@ -9,41 +9,60 @@\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n+namespace util {\n+\n+struct Error { bilingual_str message; };\n+\n+//! The util::Result class provides a standard way for functions to return error\n+//! messages in addition to optional result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n template<class T>\n-class BResult {\n+class Result {\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n+    template <typename FT>\n+    friend class Result;\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n+\n public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n-\n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n-\n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n-    }\n-    T ReleaseObj()\n-    {\n-        assert(HasRes());\n-        return std::move(std::get<T>(m_variant));\n-    }\n-\n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n-    }\n-\n-    explicit operator bool() const { return HasRes(); }\n+    Result(T obj) : m_variant{std::move(obj)} {}\n+    Result(Error error) : m_variant{std::move(error.message)} {}\n+    template <typename OT>\n+    Result(Error error, Result<OT>&& other) : m_variant{std::move(std::get<0>(other.m_variant))} {}\n+\n+    //! std::optional methods, so functions returning optional<T> can change to\n+    //! return Result<T> with minimal changes to existing code, and vice versa.\n+    bool has_value() const { return m_variant.index() == 1; }\n+    const T& value() const { assert(*this); return std::get<1>(m_variant); }\n+    T& value() { assert(*this); return std::get<1>(m_variant); }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 73,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": 934585908,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934585908\r\n\r\n> Missing LIFETIMEBOUND for any method that returns `&` or `*`?\r\n\r\nThanks, added\r\n",
      "created_at": "2022-08-01T16:59:42Z",
      "updated_at": "2022-08-01T19:04:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934737427",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934737427"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934737835",
      "pull_request_review_id": 1057601416,
      "id": 934737835,
      "node_id": "PRRC_kwDOABII5843tver",
      "diff_hunk": "@@ -947,36 +947,36 @@ static BResult<CreatedTransactionResult> CreateTransactionInternal(\n     return CreatedTransactionResult(tx, nFeeRet, nChangePosInOut, feeCalc);\n }\n \n-BResult<CreatedTransactionResult> CreateTransaction(\n+util::Result<CreatedTransactionResult> CreateTransaction(\n         CWallet& wallet,\n         const std::vector<CRecipient>& vecSend,\n         int change_pos,\n         const CCoinControl& coin_control,\n         bool sign)\n {\n     if (vecSend.empty()) {\n-        return _(\"Transaction must have at least one recipient\");\n+        return {util::Error{_(\"Transaction must have at least one recipient\")}};\n     }\n \n     if (std::any_of(vecSend.cbegin(), vecSend.cend(), [](const auto& recipient){ return recipient.nAmount < 0; })) {\n-        return _(\"Transaction amounts must not be negative\");\n+        return {util::Error{_(\"Transaction amounts must not be negative\")}};\n     }\n \n     LOCK(wallet.cs_wallet);\n \n     auto res = CreateTransactionInternal(wallet, vecSend, change_pos, coin_control, sign);\n-    TRACE4(coin_selection, normal_create_tx_internal, wallet.GetName().c_str(), res.HasRes(),\n-           res ? res.GetObj().fee : 0, res ? res.GetObj().change_pos : 0);\n+    TRACE4(coin_selection, normal_create_tx_internal, wallet.GetName().c_str(), bool(res),\n+           res ? res->fee : 0, res ? res->change_pos : 0);\n     if (!res) return res;\n-    const auto& txr_ungrouped = res.GetObj();\n+    const auto& txr_ungrouped = *res;\n     // try with avoidpartialspends unless it's enabled already\n     if (txr_ungrouped.fee > 0 /* 0 means non-functional fee rate estimation */ && wallet.m_max_aps_fee > -1 && !coin_control.m_avoid_partial_spends) {\n         TRACE1(coin_selection, attempting_aps_create_tx, wallet.GetName().c_str());\n         CCoinControl tmp_cc = coin_control;\n         tmp_cc.m_avoid_partial_spends = true;\n         auto res_tx_grouped = CreateTransactionInternal(wallet, vecSend, change_pos, tmp_cc, sign);\n         // Helper optional class for now\n-        std::optional<CreatedTransactionResult> txr_grouped{res_tx_grouped.HasRes() ? std::make_optional(res_tx_grouped.GetObj()) : std::nullopt};\n+        std::optional<CreatedTransactionResult> txr_grouped{res_tx_grouped ? std::make_optional(*res_tx_grouped) : std::nullopt};",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 146,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": 934590472,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934590472\r\n\r\n> If the goal of this pull is to make the interface equal to std::optional, what is the point of keeping this line? If there is one, why not use `std::move`? See [#25218 (comment)](https://github.com/bitcoin/bitcoin/pull/25218#discussion_r918863838)\r\n\r\nThanks! Dropped the line. I just didn't notice this chance to simplify.\r\n",
      "created_at": "2022-08-01T17:00:13Z",
      "updated_at": "2022-08-01T19:04:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934737835",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934737835"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 979,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934739670",
      "pull_request_review_id": 1057601416,
      "id": 934739670,
      "node_id": "PRRC_kwDOABII5843tv7W",
      "diff_hunk": "@@ -393,8 +393,8 @@ void RestoreWalletActivity::restore(const fs::path& backup_file, const std::stri\n     QTimer::singleShot(0, worker(), [this, backup_file, wallet_name] {\n         auto wallet{node().walletLoader().restoreWallet(backup_file, wallet_name, m_warning_message)};\n \n-        m_error_message = wallet ? bilingual_str{} : wallet.GetError();\n-        if (wallet) m_wallet_model = m_wallet_controller->getOrCreateWallet(wallet.ReleaseObj());\n+        m_error_message = wallet ? bilingual_str{} : util::ErrorString(wallet);",
      "path": "src/qt/walletcontroller.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": 934605504,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934605504\r\n\r\n> nit?\r\n\r\nThanks, added simplification",
      "created_at": "2022-08-01T17:02:34Z",
      "updated_at": "2022-08-01T19:04:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934739670",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934739670"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 396,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934739867",
      "pull_request_review_id": 1057601416,
      "id": 934739867,
      "node_id": "PRRC_kwDOABII5843tv-b",
      "diff_hunk": "@@ -9,41 +9,60 @@\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n+namespace util {\n+\n+struct Error { bilingual_str message; };\n+\n+//! The util::Result class provides a standard way for functions to return error\n+//! messages in addition to optional result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n template<class T>\n-class BResult {\n+class Result {\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n+    template <typename FT>\n+    friend class Result;\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n+\n public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n-\n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n-\n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n-    }\n-    T ReleaseObj()\n-    {\n-        assert(HasRes());\n-        return std::move(std::get<T>(m_variant));\n-    }\n-\n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n-    }\n-\n-    explicit operator bool() const { return HasRes(); }\n+    Result(T obj) : m_variant{std::move(obj)} {}\n+    Result(Error error) : m_variant{std::move(error.message)} {}\n+    template <typename OT>\n+    Result(Error error, Result<OT>&& other) : m_variant{std::move(std::get<0>(other.m_variant))} {}\n+\n+    //! std::optional methods, so functions returning optional<T> can change to\n+    //! return Result<T> with minimal changes to existing code, and vice versa.\n+    bool has_value() const { return m_variant.index() == 1; }\n+    const T& value() const { assert(*this); return std::get<1>(m_variant); }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 72,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": 934609154,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934609154\r\n\r\n> Any reason to change this to have several `;` on one line, when clang-format doesn't like that? \r\n\r\nIt's easier to see what the methods supports if you can look down the left column and see the method names and  arguments and return values. The actual method bodies are trivial and probably not helpful to someone trying to use the class, so this convention puts the useful information all in one place instead of alternating useful and useless information and making declarations difficult to skim.\r\n\r\nI actually started using this convention because I saw clang-format unwrap lines similarly in other places. We do have `AllowShortFunctionsOnASingleLine: All` enabled, so I'm not sure why it would not be kicking in here, but I didn't look into it.\r\n\r\n> Also if you kept this as `return std::get<T>(m_variant);`, the diff would be smaller by one line.\r\n\r\nMotivation for changing `get<T>` to `get<1>` is to resolve ambiguity here if `T` is a `bilingual_str`, in which case `get<T>` would not compile. Also it seems more direct and possibly more efficient at compile time to retrieve the variant by index and not rely on template type comparisons.\r\n",
      "created_at": "2022-08-01T17:02:51Z",
      "updated_at": "2022-08-01T19:08:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934739867",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934739867"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934740016",
      "pull_request_review_id": 1057601416,
      "id": 934740016,
      "node_id": "PRRC_kwDOABII5843twAw",
      "diff_hunk": "@@ -21,9 +21,9 @@ std::string getnewaddress(CWallet& w)\n {\n     constexpr auto output_type = OutputType::BECH32;\n     auto op_dest = w.GetNewDestination(output_type, \"\");",
      "path": "src/test/util/wallet.cpp",
      "position": null,
      "original_position": 3,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": 934615230,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934615230\r\n\r\n> Same: Use `Assert`?\r\n\r\nThanks, added this simplification\r\n",
      "created_at": "2022-08-01T17:03:02Z",
      "updated_at": "2022-08-01T19:08:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934740016",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934740016"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934740142",
      "pull_request_review_id": 1057601416,
      "id": 934740142,
      "node_id": "PRRC_kwDOABII5843twCu",
      "diff_hunk": "@@ -9,41 +9,60 @@\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n+namespace util {\n+\n+struct Error { bilingual_str message; };\n+\n+//! The util::Result class provides a standard way for functions to return error\n+//! messages in addition to optional result values.",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 13,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": 934619680,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934619680\r\n\r\n> This reads like \"and\", but should be \"xor\", no?\r\n\r\nI kind of did mean \"and\" because it does let functions return both, just not both simultaneously. But I agree \"either or\" works and could be clearer, so updated.\r\n",
      "created_at": "2022-08-01T17:03:13Z",
      "updated_at": "2022-08-01T19:04:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934740142",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934740142"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934740335",
      "pull_request_review_id": 1057601416,
      "id": 934740335,
      "node_id": "PRRC_kwDOABII5843twFv",
      "diff_hunk": "@@ -9,41 +9,60 @@\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n+namespace util {\n+\n+struct Error { bilingual_str message; };\n+\n+//! The util::Result class provides a standard way for functions to return error\n+//! messages in addition to optional result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n template<class T>\n-class BResult {\n+class Result {\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n+    template <typename FT>",
      "path": "src/util/result.h",
      "position": 46,
      "original_position": 33,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": 934642192,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934642192\r\n\r\n> nit: Shouldn't this be named `OT`, as it is used in the move-constructor copying the error from `Result<OT>`?\r\n\r\nHmm, the friend declaration is saying any `Result<FT>` is a friend of the `Result<T>`. This is regardless of whether the `Result<FT>` is ever moved from. The friend declaration is needed by the move-constructor but it doesn't have any direct relationship to the move constructor and could be used by any method. I could change `OT` to `FT` on just this line because the word \"other\" kind of makes sense for this parameter even if it isn't referencing the \"other\" move constructor argument. But that would make this friend declaration inconsistent with the friend declaration for ErrorString below where there is no \"other\". `FT` for friend type just seems like the straightforward naming.\r\n\r\n",
      "created_at": "2022-08-01T17:03:29Z",
      "updated_at": "2022-08-01T19:04:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934740335",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934740335"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 40,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934740485",
      "pull_request_review_id": 1057601416,
      "id": 934740485,
      "node_id": "PRRC_kwDOABII5843twIF",
      "diff_hunk": "@@ -9,41 +9,60 @@\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n+namespace util {\n+\n+struct Error { bilingual_str message; };\n+\n+//! The util::Result class provides a standard way for functions to return error\n+//! messages in addition to optional result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n template<class T>\n-class BResult {\n+class Result {\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n+    template <typename FT>\n+    friend class Result;\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n+\n public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n-\n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n-\n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n-    }\n-    T ReleaseObj()\n-    {\n-        assert(HasRes());\n-        return std::move(std::get<T>(m_variant));\n-    }\n-\n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n-    }\n-\n-    explicit operator bool() const { return HasRes(); }\n+    Result(T obj) : m_variant{std::move(obj)} {}\n+    Result(Error error) : m_variant{std::move(error.message)} {}\n+    template <typename OT>\n+    Result(Error error, Result<OT>&& other) : m_variant{std::move(std::get<0>(other.m_variant))} {}",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 67,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": 934656466,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934656466\r\n\r\n> Looks like this drops `error.message`, but I guess that's fine?\r\n\r\nIt is ok because `error.message` is always empty right now and #25665 is supposed to allow combining error messages so it can be non-empty. But since this constructor is only used one place right now, it seems easier and less confusing to drop it, so latest push does that.",
      "created_at": "2022-08-01T17:03:41Z",
      "updated_at": "2022-08-01T19:04:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934740485",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934740485"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934740635",
      "pull_request_review_id": 1057601416,
      "id": 934740635,
      "node_id": "PRRC_kwDOABII5843twKb",
      "diff_hunk": "@@ -9,41 +9,60 @@\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n+namespace util {\n+\n+struct Error { bilingual_str message; };\n+\n+//! The util::Result class provides a standard way for functions to return error\n+//! messages in addition to optional result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n template<class T>\n-class BResult {\n+class Result {\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n+    template <typename FT>\n+    friend class Result;\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n+\n public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n-\n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n-\n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n-    }\n-    T ReleaseObj()\n-    {\n-        assert(HasRes());\n-        return std::move(std::get<T>(m_variant));\n-    }\n-\n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n-    }\n-\n-    explicit operator bool() const { return HasRes(); }\n+    Result(T obj) : m_variant{std::move(obj)} {}\n+    Result(Error error) : m_variant{std::move(error.message)} {}\n+    template <typename OT>\n+    Result(Error error, Result<OT>&& other) : m_variant{std::move(std::get<0>(other.m_variant))} {}\n+\n+    //! std::optional methods, so functions returning optional<T> can change to\n+    //! return Result<T> with minimal changes to existing code, and vice versa.\n+    bool has_value() const { return m_variant.index() == 1; }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 71,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": 934657900,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934657900\r\n\r\n> Any reason to not leave this as-is? `std::holds_alternative<T>(m_variant);`\r\n\r\nIt's just less direct and ambiguous if `T` is a `bilingual_str`.",
      "created_at": "2022-08-01T17:03:52Z",
      "updated_at": "2022-08-01T19:04:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934740635",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934740635"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934740929",
      "pull_request_review_id": 1057601416,
      "id": 934740929,
      "node_id": "PRRC_kwDOABII5843twPB",
      "diff_hunk": "@@ -9,41 +9,60 @@\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n+namespace util {\n+\n+struct Error { bilingual_str message; };\n+\n+//! The util::Result class provides a standard way for functions to return error\n+//! messages in addition to optional result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n template<class T>\n-class BResult {\n+class Result {\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n+    template <typename FT>\n+    friend class Result;\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n+\n public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n-\n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n-\n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n-    }\n-    T ReleaseObj()\n-    {\n-        assert(HasRes());\n-        return std::move(std::get<T>(m_variant));\n-    }\n-\n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n-    }\n-\n-    explicit operator bool() const { return HasRes(); }\n+    Result(T obj) : m_variant{std::move(obj)} {}\n+    Result(Error error) : m_variant{std::move(error.message)} {}\n+    template <typename OT>\n+    Result(Error error, Result<OT>&& other) : m_variant{std::move(std::get<0>(other.m_variant))} {}\n+\n+    //! std::optional methods, so functions returning optional<T> can change to\n+    //! return Result<T> with minimal changes to existing code, and vice versa.\n+    bool has_value() const { return m_variant.index() == 1; }\n+    const T& value() const { assert(*this); return std::get<1>(m_variant); }\n+    T& value() { assert(*this); return std::get<1>(m_variant); }\n+    template <typename U>\n+    T value_or(const U& default_value) const { return has_value() ? value() : default_value; }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 75,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": 934662743,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934662743\r\n\r\n> This doesn't compile, so my recommendation would be to remove dead code and only add it when it is needed.\r\n\r\nAdded unit test to cover the `value_or` method instead of removing the method. There was a problem with move-only types which is also fixed",
      "created_at": "2022-08-01T17:04:16Z",
      "updated_at": "2022-08-01T19:06:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934740929",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934740929"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934741258",
      "pull_request_review_id": 1057601416,
      "id": 934741258,
      "node_id": "PRRC_kwDOABII5843twUK",
      "diff_hunk": "@@ -75,8 +75,8 @@ static void add_coin(std::vector<COutput>& coins, CWallet& wallet, const CAmount\n     tx.vout[nInput].nValue = nValue;\n     if (spendable) {\n         auto op_dest = wallet.GetNewDestination(OutputType::BECH32, \"\");\n-        assert(op_dest.HasRes());\n-        tx.vout[nInput].scriptPubKey = GetScriptForDestination(op_dest.GetObj());\n+        assert(op_dest);",
      "path": "src/wallet/test/coinselector_tests.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": 934675169,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934675169\r\n\r\n> Could move the Assert and `*` into the previous line? (Might need a `std::move`)\r\n\r\nSure, switched to Assert",
      "created_at": "2022-08-01T17:04:42Z",
      "updated_at": "2022-08-01T19:13:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934741258",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934741258"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934741416",
      "pull_request_review_id": 1057601416,
      "id": 934741416,
      "node_id": "PRRC_kwDOABII5843twWo",
      "diff_hunk": "@@ -69,14 +69,14 @@ struct FuzzedWallet {\n     CScript GetScriptPubKey(FuzzedDataProvider& fuzzed_data_provider)\n     {\n         auto type{fuzzed_data_provider.PickValueInArray(OUTPUT_TYPES)};\n-        BResult<CTxDestination> op_dest;\n+        util::Result<CTxDestination> op_dest{util::Error{}};\n         if (fuzzed_data_provider.ConsumeBool()) {\n             op_dest = wallet->GetNewDestination(type, \"\");\n         } else {\n             op_dest = wallet->GetNewChangeDestination(type);\n         }\n-        assert(op_dest.HasRes());\n-        return GetScriptForDestination(op_dest.GetObj());\n+        assert(op_dest);",
      "path": "src/wallet/test/fuzz/notifications.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": 934676040,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934676040\r\n\r\n> Could move the Assert down by one line?\r\n\r\nThanks, switched to Assert",
      "created_at": "2022-08-01T17:04:52Z",
      "updated_at": "2022-08-01T19:13:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934741416",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934741416"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934829512",
      "pull_request_review_id": 1057601416,
      "id": 934829512,
      "node_id": "PRRC_kwDOABII5843uF3I",
      "diff_hunk": "@@ -9,41 +9,60 @@\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n+namespace util {\n+\n+struct Error { bilingual_str message; };\n+\n+//! The util::Result class provides a standard way for functions to return error\n+//! messages in addition to optional result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n template<class T>\n-class BResult {\n+class Result {\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n+    template <typename FT>\n+    friend class Result;\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n+\n public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n-\n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n-\n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n-    }\n-    T ReleaseObj()\n-    {\n-        assert(HasRes());\n-        return std::move(std::get<T>(m_variant));\n-    }\n-\n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n-    }\n-\n-    explicit operator bool() const { return HasRes(); }\n+    Result(T obj) : m_variant{std::move(obj)} {}\n+    Result(Error error) : m_variant{std::move(error.message)} {}\n+    template <typename OT>\n+    Result(Error error, Result<OT>&& other) : m_variant{std::move(std::get<0>(other.m_variant))} {}\n+\n+    //! std::optional methods, so functions returning optional<T> can change to\n+    //! return Result<T> with minimal changes to existing code, and vice versa.\n+    bool has_value() const { return m_variant.index() == 1; }\n+    const T& value() const { assert(*this); return std::get<1>(m_variant); }\n+    T& value() { assert(*this); return std::get<1>(m_variant); }\n+    template <typename U>\n+    T value_or(const U& default_value) const { return has_value() ? value() : default_value; }\n+    operator bool() const { return has_value(); }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 76,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": 934666224,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934666224\r\n\r\n> why remove `explicit`?\r\n\r\nAdded back, wasn't intentional",
      "created_at": "2022-08-01T19:04:34Z",
      "updated_at": "2022-08-01T19:04:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r934829512",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934829512"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935461458",
      "pull_request_review_id": 1058610144,
      "id": 935461458,
      "node_id": "PRRC_kwDOABII5843wgJS",
      "diff_hunk": "@@ -46,10 +46,10 @@ static void BenchUnloadWallet(std::shared_ptr<CWallet>&& wallet)\n static void AddTx(CWallet& wallet)\n {\n     const auto& dest = wallet.GetNewDestination(OutputType::BECH32, \"\");",
      "path": "src/bench/wallet_loading.cpp",
      "position": null,
      "original_position": 3,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": 934602539,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sure, but now this creates a copy without the `std::move`, right?",
      "created_at": "2022-08-02T11:36:13Z",
      "updated_at": "2022-08-02T11:36:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935461458",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935461458"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935502938",
      "pull_request_review_id": 1058653836,
      "id": 935502938,
      "node_id": "PRRC_kwDOABII5843wqRa",
      "diff_hunk": "@@ -9,41 +9,60 @@\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n+namespace util {\n+\n+struct Error { bilingual_str message; };\n+\n+//! The util::Result class provides a standard way for functions to return error\n+//! messages in addition to optional result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n template<class T>\n-class BResult {\n+class Result {\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n+    template <typename FT>",
      "path": "src/util/result.h",
      "position": 46,
      "original_position": 33,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": 934642192,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I didn't read your reply, but now it is unused and can be removed:\r\n\r\n\r\n```diff\r\ndiff --git a/src/util/result.h b/src/util/result.h\r\nindex d038ffe133..cddc8a0819 100644\r\n--- a/src/util/result.h\r\n+++ b/src/util/result.h\r\n@@ -34,8 +34,6 @@ class Result {\r\n private:\r\n     std::variant<bilingual_str, T> m_variant;\r\n \r\n-    template <typename FT>\r\n-    friend class Result;\r\n     template <typename FT>\r\n     friend bilingual_str ErrorString(const Result<FT>& result);\r\n \r\n",
      "created_at": "2022-08-02T12:11:31Z",
      "updated_at": "2022-08-02T12:11:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935502938",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935502938"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 40,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935505612",
      "pull_request_review_id": 1058656696,
      "id": 935505612,
      "node_id": "PRRC_kwDOABII5843wq7M",
      "diff_hunk": "@@ -1053,44 +1053,43 @@ static BResult<CreatedTransactionResult> CreateTransactionInternal(\n     return CreatedTransactionResult(tx, nFeeRet, nChangePosInOut, feeCalc);\n }\n \n-BResult<CreatedTransactionResult> CreateTransaction(\n+util::Result<CreatedTransactionResult> CreateTransaction(\n         CWallet& wallet,\n         const std::vector<CRecipient>& vecSend,\n         int change_pos,\n         const CCoinControl& coin_control,\n         bool sign)\n {\n     if (vecSend.empty()) {\n-        return _(\"Transaction must have at least one recipient\");\n+        return {util::Error{_(\"Transaction must have at least one recipient\")}};\n     }\n \n     if (std::any_of(vecSend.cbegin(), vecSend.cend(), [](const auto& recipient){ return recipient.nAmount < 0; })) {\n-        return _(\"Transaction amounts must not be negative\");\n+        return {util::Error{_(\"Transaction amounts must not be negative\")}};\n     }\n \n     LOCK(wallet.cs_wallet);\n \n     auto res = CreateTransactionInternal(wallet, vecSend, change_pos, coin_control, sign);\n-    TRACE4(coin_selection, normal_create_tx_internal, wallet.GetName().c_str(), res.HasRes(),\n-           res ? res.GetObj().fee : 0, res ? res.GetObj().change_pos : 0);\n+    TRACE4(coin_selection, normal_create_tx_internal, wallet.GetName().c_str(), bool(res),\n+           res ? res->fee : 0, res ? res->change_pos : 0);\n     if (!res) return res;\n-    const auto& txr_ungrouped = res.GetObj();\n+    const auto& txr_ungrouped = *res;\n     // try with avoidpartialspends unless it's enabled already\n     if (txr_ungrouped.fee > 0 /* 0 means non-functional fee rate estimation */ && wallet.m_max_aps_fee > -1 && !coin_control.m_avoid_partial_spends) {\n         TRACE1(coin_selection, attempting_aps_create_tx, wallet.GetName().c_str());\n         CCoinControl tmp_cc = coin_control;\n         tmp_cc.m_avoid_partial_spends = true;\n-        auto res_tx_grouped = CreateTransactionInternal(wallet, vecSend, change_pos, tmp_cc, sign);\n+        auto txr_grouped = CreateTransactionInternal(wallet, vecSend, change_pos, tmp_cc, sign);\n         // Helper optional class for now",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 145,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "3262acf70a9fdd6b4191812f928ed374dfcf32e1",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "remove this line?",
      "created_at": "2022-08-02T12:13:43Z",
      "updated_at": "2022-08-02T12:50:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935505612",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935505612"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1084,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935510002",
      "pull_request_review_id": 1058656696,
      "id": 935510002,
      "node_id": "PRRC_kwDOABII5843wr_y",
      "diff_hunk": "@@ -74,9 +74,8 @@ static void add_coin(CoinsResult& available_coins, CWallet& wallet, const CAmoun\n     tx.vout.resize(nInput + 1);\n     tx.vout[nInput].nValue = nValue;\n     if (spendable) {\n-        auto op_dest = wallet.GetNewDestination(OutputType::BECH32, \"\");\n-        assert(op_dest.HasRes());\n-        tx.vout[nInput].scriptPubKey = GetScriptForDestination(op_dest.GetObj());\n+        auto op_dest = *(Assert(wallet.GetNewDestination(OutputType::BECH32, \"\")));",
      "path": "src/wallet/test/coinselector_tests.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "3262acf70a9fdd6b4191812f928ed374dfcf32e1",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same: this also creates a copy without a `std::move`?\r\n\r\nIf yes, maybe use the same you used in the fuzz test:\r\n\r\n\r\n`GetScriptForDestination(*Assert(op_dest))`?",
      "created_at": "2022-08-02T12:17:30Z",
      "updated_at": "2022-08-02T12:50:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935510002",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935510002"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935518026",
      "pull_request_review_id": 1058656696,
      "id": 935518026,
      "node_id": "PRRC_kwDOABII5843wt9K",
      "diff_hunk": "@@ -0,0 +1,96 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/result.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+bool operator==(const bilingual_str& a, const bilingual_str& b)\n+{\n+    return a.original == b.original && a.translated == b.translated;\n+}\n+\n+std::ostream& operator<<(std::ostream& os, const bilingual_str& s)\n+{\n+    return os << \"bilingual_str('\" << s.original << \"' , '\" << s.translated << \"')\";\n+}\n+\n+BOOST_AUTO_TEST_SUITE(result_tests)\n+\n+struct NoCopy\n+{\n+    NoCopy(int n) : m_n{std::make_unique<int>(n)} {}\n+    std::unique_ptr<int> m_n;\n+};\n+\n+bool operator==(const NoCopy& a, const NoCopy& b)\n+{\n+    return *a.m_n == *b.m_n;\n+}\n+\n+std::ostream& operator<<(std::ostream& os, const NoCopy& o)\n+{\n+    if (o.m_n) os << \"NoCopy(\" << *o.m_n << \")\"; else os << \"NoCopy(nullptr)\";\n+    return os;\n+}\n+\n+util::Result<int> IntFn(int i, bool success)\n+{\n+    if (success) return i;\n+    return {util::Error{Untranslated(strprintf(\"int %i error.\", i))}};\n+}\n+\n+util::Result<bilingual_str> StrFn(bilingual_str s, bool success)\n+{\n+    if (success) return s;\n+    return {util::Error{strprintf(Untranslated(\"str %s error.\"), s.original)}};\n+}\n+\n+util::Result<NoCopy> NoCopyFn(int i, bool success)\n+{\n+    if (success) return {i};\n+    return {util::Error{Untranslated(strprintf(\"nocopy %i error.\", i))}};\n+}\n+\n+template<typename T>\n+void ExpectResult(const util::Result<T>& result, bool success, const bilingual_str& str)\n+{\n+    BOOST_CHECK_EQUAL(bool(result), success);\n+    BOOST_CHECK_EQUAL(ErrorString(result), str);",
      "path": "src/test/result_tests.cpp",
      "position": null,
      "original_position": 60,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "3262acf70a9fdd6b4191812f928ed374dfcf32e1",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "could avoid adl?",
      "created_at": "2022-08-02T12:24:05Z",
      "updated_at": "2022-08-02T12:50:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935518026",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935518026"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935541678",
      "pull_request_review_id": 1058656696,
      "id": 935541678,
      "node_id": "PRRC_kwDOABII5843wzuu",
      "diff_hunk": "@@ -5,45 +5,65 @@\n #ifndef BITCOIN_UTIL_RESULT_H\n #define BITCOIN_UTIL_RESULT_H\n \n+#include <attributes.h>\n #include <util/translation.h>\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n+namespace util {\n+\n+struct Error { bilingual_str message; };\n+\n+//! The util::Result class provides a standard way for functions to return\n+//! either error messages or result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n template<class T>\n-class BResult {\n+class Result {\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n+    template <typename FT>\n+    friend class Result;\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n+\n public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n-\n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n-\n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n-    }\n-    T ReleaseObj()\n-    {\n-        assert(HasRes());\n-        return std::move(std::get<T>(m_variant));\n-    }\n-\n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n-    }\n-\n-    explicit operator bool() const { return HasRes(); }\n+    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n+    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+\n+    //! std::optional methods, so functions returning optional<T> can change to\n+    //! return Result<T> with minimal changes to existing code, and vice versa.\n+    bool has_value() const { return m_variant.index() == 1; }\n+    const T& value() const LIFETIMEBOUND { assert(*this); return std::get<1>(m_variant); }\n+    T& value() LIFETIMEBOUND { assert(*this); return std::get<1>(m_variant); }\n+    explicit operator bool() const { return has_value(); }\n+    const T* operator->() const { return &value(); }\n+    const T& operator*() const LIFETIMEBOUND { return value(); }\n+    T* operator->() { return &value(); }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 80,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "3262acf70a9fdd6b4191812f928ed374dfcf32e1",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Was about to ask to add LIFETIMEBOUND, but for some reason it doesn't do anything for `->` :man_shrugging: \r\n\r\n\r\n```diff\r\ndiff --git a/src/test/result_tests.cpp b/src/test/result_tests.cpp\r\nindex 5737434b12..25de1eb6bc 100644\r\n--- a/src/test/result_tests.cpp\r\n+++ b/src/test/result_tests.cpp\r\n@@ -89,7 +89,10 @@ BOOST_AUTO_TEST_CASE(check_value_or)\r\n {\r\n     BOOST_CHECK_EQUAL(IntFn(10, true).value_or(20), 10);\r\n     BOOST_CHECK_EQUAL(IntFn(10, false).value_or(20), 20);\r\n-    BOOST_CHECK_EQUAL(NoCopyFn(10, true).value_or(20), 10);\r\n+    const auto& a{NoCopyFn(10, true)->m_n};\r\n+    BOOST_CHECK_EQUAL(*a, 10);\r\n+    const auto& b{NoCopyFn(10, true).value().m_n};\r\n+    BOOST_CHECK_EQUAL(*b, 10);\r\n     BOOST_CHECK_EQUAL(NoCopyFn(10, false).value_or(20), 20);\r\n }\r\n \r\ndiff --git a/src/util/result.h b/src/util/result.h\r\nindex d038ffe133..cc1947e860 100644\r\n--- a/src/util/result.h\r\n+++ b/src/util/result.h\r\n@@ -49,9 +47,9 @@ public:\r\n     const T& value() const LIFETIMEBOUND { assert(*this); return std::get<1>(m_variant); }\r\n     T& value() LIFETIMEBOUND { assert(*this); return std::get<1>(m_variant); }\r\n     explicit operator bool() const { return has_value(); }\r\n-    const T* operator->() const { return &value(); }\r\n+    const T* operator->() const LIFETIMEBOUND { return &value(); }\r\n     const T& operator*() const LIFETIMEBOUND { return value(); }\r\n-    T* operator->() { return &value(); }\r\n+    T* operator->() LIFETIMEBOUND { return &value(); }\r\n     T& operator*() LIFETIMEBOUND { return value(); }\r\n     template <class U>\r\n     constexpr T value_or(U&& default_value) const& { return has_value() ? value() : std::forward<U>(default_value); }\r\n",
      "created_at": "2022-08-02T12:46:12Z",
      "updated_at": "2022-08-02T12:50:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935541678",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935541678"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935544957",
      "pull_request_review_id": 1058656696,
      "id": 935544957,
      "node_id": "PRRC_kwDOABII5843w0h9",
      "diff_hunk": "@@ -5,45 +5,65 @@\n #ifndef BITCOIN_UTIL_RESULT_H\n #define BITCOIN_UTIL_RESULT_H\n \n+#include <attributes.h>\n #include <util/translation.h>\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n+namespace util {\n+\n+struct Error { bilingual_str message; };\n+\n+//! The util::Result class provides a standard way for functions to return\n+//! either error messages or result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n template<class T>\n-class BResult {\n+class Result {\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n+    template <typename FT>\n+    friend class Result;\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n+\n public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n-\n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n-\n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n-    }\n-    T ReleaseObj()\n-    {\n-        assert(HasRes());\n-        return std::move(std::get<T>(m_variant));\n-    }\n-\n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n-    }\n-\n-    explicit operator bool() const { return HasRes(); }\n+    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n+    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+\n+    //! std::optional methods, so functions returning optional<T> can change to\n+    //! return Result<T> with minimal changes to existing code, and vice versa.\n+    bool has_value() const { return m_variant.index() == 1; }\n+    const T& value() const LIFETIMEBOUND { assert(*this); return std::get<1>(m_variant); }\n+    T& value() LIFETIMEBOUND { assert(*this); return std::get<1>(m_variant); }\n+    explicit operator bool() const { return has_value(); }\n+    const T* operator->() const { return &value(); }\n+    const T& operator*() const LIFETIMEBOUND { return value(); }\n+    T* operator->() { return &value(); }\n+    T& operator*() LIFETIMEBOUND { return value(); }\n+    template <class U>\n+    constexpr T value_or(U&& default_value) const& { return has_value() ? value() : std::forward<U>(default_value); }\n+    template <class U>\n+    constexpr T value_or(U&& default_value) && { return has_value() ? std::move(**this) : std::forward<U>(default_value); }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 85,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "3262acf70a9fdd6b4191812f928ed374dfcf32e1",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    constexpr T value_or(U&& default_value) && { return has_value() ? std::move(value()) : std::forward<U>(default_value); }\r\n```\r\n\r\nfor symmetry with the previous line and to avoid one more function call",
      "created_at": "2022-08-02T12:49:32Z",
      "updated_at": "2022-08-02T12:50:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935544957",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935544957"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935555218",
      "pull_request_review_id": 1058724754,
      "id": 935555218,
      "node_id": "PRRC_kwDOABII5843w3CS",
      "diff_hunk": "@@ -46,10 +46,10 @@ static void BenchUnloadWallet(std::shared_ptr<CWallet>&& wallet)\n static void AddTx(CWallet& wallet)\n {\n     const auto& dest = wallet.GetNewDestination(OutputType::BECH32, \"\");",
      "path": "src/bench/wallet_loading.cpp",
      "position": null,
      "original_position": 3,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": 934602539,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If yes, maybe use the same you used in the fuzz test:\r\n\r\nGetScriptForDestination(*Assert(op_dest))?",
      "created_at": "2022-08-02T12:58:28Z",
      "updated_at": "2022-08-02T12:58:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935555218",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935555218"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935708710",
      "pull_request_review_id": 1058935631,
      "id": 935708710,
      "node_id": "PRRC_kwDOABII5843xcgm",
      "diff_hunk": "@@ -0,0 +1,96 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/result.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+bool operator==(const bilingual_str& a, const bilingual_str& b)\n+{\n+    return a.original == b.original && a.translated == b.translated;\n+}\n+\n+std::ostream& operator<<(std::ostream& os, const bilingual_str& s)\n+{\n+    return os << \"bilingual_str('\" << s.original << \"' , '\" << s.translated << \"')\";\n+}\n+\n+BOOST_AUTO_TEST_SUITE(result_tests)\n+\n+struct NoCopy\n+{\n+    NoCopy(int n) : m_n{std::make_unique<int>(n)} {}\n+    std::unique_ptr<int> m_n;\n+};\n+\n+bool operator==(const NoCopy& a, const NoCopy& b)\n+{\n+    return *a.m_n == *b.m_n;\n+}\n+\n+std::ostream& operator<<(std::ostream& os, const NoCopy& o)\n+{\n+    if (o.m_n) os << \"NoCopy(\" << *o.m_n << \")\"; else os << \"NoCopy(nullptr)\";\n+    return os;\n+}\n+\n+util::Result<int> IntFn(int i, bool success)\n+{\n+    if (success) return i;\n+    return {util::Error{Untranslated(strprintf(\"int %i error.\", i))}};\n+}\n+\n+util::Result<bilingual_str> StrFn(bilingual_str s, bool success)\n+{\n+    if (success) return s;\n+    return {util::Error{strprintf(Untranslated(\"str %s error.\"), s.original)}};\n+}\n+\n+util::Result<NoCopy> NoCopyFn(int i, bool success)\n+{\n+    if (success) return {i};\n+    return {util::Error{Untranslated(strprintf(\"nocopy %i error.\", i))}};\n+}\n+\n+template<typename T>\n+void ExpectResult(const util::Result<T>& result, bool success, const bilingual_str& str)\n+{\n+    BOOST_CHECK_EQUAL(bool(result), success);\n+    BOOST_CHECK_EQUAL(ErrorString(result), str);",
      "path": "src/test/result_tests.cpp",
      "position": null,
      "original_position": 60,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "3262acf70a9fdd6b4191812f928ed374dfcf32e1",
      "in_reply_to_id": 935518026,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935518026\r\n\r\n> could avoid adl?\r\n\r\nFixed",
      "created_at": "2022-08-02T15:02:17Z",
      "updated_at": "2022-08-02T15:48:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935708710",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935708710"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935709112",
      "pull_request_review_id": 1058935631,
      "id": 935709112,
      "node_id": "PRRC_kwDOABII5843xcm4",
      "diff_hunk": "@@ -1053,44 +1053,43 @@ static BResult<CreatedTransactionResult> CreateTransactionInternal(\n     return CreatedTransactionResult(tx, nFeeRet, nChangePosInOut, feeCalc);\n }\n \n-BResult<CreatedTransactionResult> CreateTransaction(\n+util::Result<CreatedTransactionResult> CreateTransaction(\n         CWallet& wallet,\n         const std::vector<CRecipient>& vecSend,\n         int change_pos,\n         const CCoinControl& coin_control,\n         bool sign)\n {\n     if (vecSend.empty()) {\n-        return _(\"Transaction must have at least one recipient\");\n+        return {util::Error{_(\"Transaction must have at least one recipient\")}};\n     }\n \n     if (std::any_of(vecSend.cbegin(), vecSend.cend(), [](const auto& recipient){ return recipient.nAmount < 0; })) {\n-        return _(\"Transaction amounts must not be negative\");\n+        return {util::Error{_(\"Transaction amounts must not be negative\")}};\n     }\n \n     LOCK(wallet.cs_wallet);\n \n     auto res = CreateTransactionInternal(wallet, vecSend, change_pos, coin_control, sign);\n-    TRACE4(coin_selection, normal_create_tx_internal, wallet.GetName().c_str(), res.HasRes(),\n-           res ? res.GetObj().fee : 0, res ? res.GetObj().change_pos : 0);\n+    TRACE4(coin_selection, normal_create_tx_internal, wallet.GetName().c_str(), bool(res),\n+           res ? res->fee : 0, res ? res->change_pos : 0);\n     if (!res) return res;\n-    const auto& txr_ungrouped = res.GetObj();\n+    const auto& txr_ungrouped = *res;\n     // try with avoidpartialspends unless it's enabled already\n     if (txr_ungrouped.fee > 0 /* 0 means non-functional fee rate estimation */ && wallet.m_max_aps_fee > -1 && !coin_control.m_avoid_partial_spends) {\n         TRACE1(coin_selection, attempting_aps_create_tx, wallet.GetName().c_str());\n         CCoinControl tmp_cc = coin_control;\n         tmp_cc.m_avoid_partial_spends = true;\n-        auto res_tx_grouped = CreateTransactionInternal(wallet, vecSend, change_pos, tmp_cc, sign);\n+        auto txr_grouped = CreateTransactionInternal(wallet, vecSend, change_pos, tmp_cc, sign);\n         // Helper optional class for now",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 145,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "3262acf70a9fdd6b4191812f928ed374dfcf32e1",
      "in_reply_to_id": 935505612,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935505612\r\n\r\n> remove this line?\r\n\r\nGood catch, removed",
      "created_at": "2022-08-02T15:02:38Z",
      "updated_at": "2022-08-02T15:48:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935709112",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935709112"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1084,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935710271",
      "pull_request_review_id": 1058935631,
      "id": 935710271,
      "node_id": "PRRC_kwDOABII5843xc4_",
      "diff_hunk": "@@ -74,9 +74,8 @@ static void add_coin(CoinsResult& available_coins, CWallet& wallet, const CAmoun\n     tx.vout.resize(nInput + 1);\n     tx.vout[nInput].nValue = nValue;\n     if (spendable) {\n-        auto op_dest = wallet.GetNewDestination(OutputType::BECH32, \"\");\n-        assert(op_dest.HasRes());\n-        tx.vout[nInput].scriptPubKey = GetScriptForDestination(op_dest.GetObj());\n+        auto op_dest = *(Assert(wallet.GetNewDestination(OutputType::BECH32, \"\")));",
      "path": "src/wallet/test/coinselector_tests.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "3262acf70a9fdd6b4191812f928ed374dfcf32e1",
      "in_reply_to_id": 935510002,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935510002\r\n\r\n> Same: this also creates a copy without a `std::move`?\r\n\r\nThanks inlined to avoid copy.",
      "created_at": "2022-08-02T15:03:38Z",
      "updated_at": "2022-08-02T15:48:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935710271",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935710271"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935710947",
      "pull_request_review_id": 1058935631,
      "id": 935710947,
      "node_id": "PRRC_kwDOABII5843xdDj",
      "diff_hunk": "@@ -5,45 +5,65 @@\n #ifndef BITCOIN_UTIL_RESULT_H\n #define BITCOIN_UTIL_RESULT_H\n \n+#include <attributes.h>\n #include <util/translation.h>\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n+namespace util {\n+\n+struct Error { bilingual_str message; };\n+\n+//! The util::Result class provides a standard way for functions to return\n+//! either error messages or result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n template<class T>\n-class BResult {\n+class Result {\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n+    template <typename FT>\n+    friend class Result;\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n+\n public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n-\n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n-\n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n-    }\n-    T ReleaseObj()\n-    {\n-        assert(HasRes());\n-        return std::move(std::get<T>(m_variant));\n-    }\n-\n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n-    }\n-\n-    explicit operator bool() const { return HasRes(); }\n+    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n+    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+\n+    //! std::optional methods, so functions returning optional<T> can change to\n+    //! return Result<T> with minimal changes to existing code, and vice versa.\n+    bool has_value() const { return m_variant.index() == 1; }\n+    const T& value() const LIFETIMEBOUND { assert(*this); return std::get<1>(m_variant); }\n+    T& value() LIFETIMEBOUND { assert(*this); return std::get<1>(m_variant); }\n+    explicit operator bool() const { return has_value(); }\n+    const T* operator->() const { return &value(); }\n+    const T& operator*() const LIFETIMEBOUND { return value(); }\n+    T* operator->() { return &value(); }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 80,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "3262acf70a9fdd6b4191812f928ed374dfcf32e1",
      "in_reply_to_id": 935541678,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935541678\r\n\r\n> Was about to ask to add LIFETIMEBOUND, but for some reason it doesn't do anything for `->` man_shrugging\r\n\r\nOh, I just omitted it because I didn't know LIFETIMEBOUND worked for pointers. Seems correct to add even if it doesn't produce any diagnostics for now though, so I added it.",
      "created_at": "2022-08-02T15:04:14Z",
      "updated_at": "2022-08-02T15:48:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935710947",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935710947"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935711153",
      "pull_request_review_id": 1058935631,
      "id": 935711153,
      "node_id": "PRRC_kwDOABII5843xdGx",
      "diff_hunk": "@@ -5,45 +5,65 @@\n #ifndef BITCOIN_UTIL_RESULT_H\n #define BITCOIN_UTIL_RESULT_H\n \n+#include <attributes.h>\n #include <util/translation.h>\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n+namespace util {\n+\n+struct Error { bilingual_str message; };\n+\n+//! The util::Result class provides a standard way for functions to return\n+//! either error messages or result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n template<class T>\n-class BResult {\n+class Result {\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n+    template <typename FT>\n+    friend class Result;\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n+\n public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n-\n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n-\n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n-    }\n-    T ReleaseObj()\n-    {\n-        assert(HasRes());\n-        return std::move(std::get<T>(m_variant));\n-    }\n-\n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n-    }\n-\n-    explicit operator bool() const { return HasRes(); }\n+    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n+    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+\n+    //! std::optional methods, so functions returning optional<T> can change to\n+    //! return Result<T> with minimal changes to existing code, and vice versa.\n+    bool has_value() const { return m_variant.index() == 1; }\n+    const T& value() const LIFETIMEBOUND { assert(*this); return std::get<1>(m_variant); }\n+    T& value() LIFETIMEBOUND { assert(*this); return std::get<1>(m_variant); }\n+    explicit operator bool() const { return has_value(); }\n+    const T* operator->() const { return &value(); }\n+    const T& operator*() const LIFETIMEBOUND { return value(); }\n+    T* operator->() { return &value(); }\n+    T& operator*() LIFETIMEBOUND { return value(); }\n+    template <class U>\n+    constexpr T value_or(U&& default_value) const& { return has_value() ? value() : std::forward<U>(default_value); }\n+    template <class U>\n+    constexpr T value_or(U&& default_value) && { return has_value() ? std::move(**this) : std::forward<U>(default_value); }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 85,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "3262acf70a9fdd6b4191812f928ed374dfcf32e1",
      "in_reply_to_id": 935544957,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935544957\r\n\r\n> for symmetry with the previous line and to avoid one more function call\r\n\r\nNice, thanks. I copied this code from https://en.cppreference.com/w/cpp/utility/optional/value_or and was a little careless with fixups\r\n",
      "created_at": "2022-08-02T15:04:26Z",
      "updated_at": "2022-08-02T15:48:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935711153",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935711153"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935741692",
      "pull_request_review_id": 1058935631,
      "id": 935741692,
      "node_id": "PRRC_kwDOABII5843xkj8",
      "diff_hunk": "@@ -46,10 +46,10 @@ static void BenchUnloadWallet(std::shared_ptr<CWallet>&& wallet)\n static void AddTx(CWallet& wallet)\n {\n     const auto& dest = wallet.GetNewDestination(OutputType::BECH32, \"\");",
      "path": "src/bench/wallet_loading.cpp",
      "position": null,
      "original_position": 3,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": 934602539,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935461458\r\n\r\n> Sure, but now this creates a copy without the `std::move`, right?\r\n>\r\n> If yes, maybe use the same you used in the fuzz test:\r\n\r\nYes it does, inlined now",
      "created_at": "2022-08-02T15:32:00Z",
      "updated_at": "2022-08-02T15:48:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935741692",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935741692"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935747685",
      "pull_request_review_id": 1058935631,
      "id": 935747685,
      "node_id": "PRRC_kwDOABII5843xmBl",
      "diff_hunk": "@@ -9,41 +9,60 @@\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n+namespace util {\n+\n+struct Error { bilingual_str message; };\n+\n+//! The util::Result class provides a standard way for functions to return error\n+//! messages in addition to optional result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n template<class T>\n-class BResult {\n+class Result {\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n+    template <typename FT>",
      "path": "src/util/result.h",
      "position": 46,
      "original_position": 33,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "42f4f7d126f6729c4924b0630f67d171f4d0ac9b",
      "in_reply_to_id": 934642192,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935502938\r\n\r\n> I didn't read your reply, but now it is unused and can be removed:\r\n\r\nNice catch. It's gone",
      "created_at": "2022-08-02T15:37:44Z",
      "updated_at": "2022-08-02T15:48:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935747685",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935747685"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 40,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935777262",
      "pull_request_review_id": 1059035194,
      "id": 935777262,
      "node_id": "PRRC_kwDOABII5843xtPu",
      "diff_hunk": "@@ -0,0 +1,96 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/result.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+inline bool operator==(const bilingual_str& a, const bilingual_str& b)\n+{\n+    return a.original == b.original && a.translated == b.translated;\n+}\n+\n+inline std::ostream& operator<<(std::ostream& os, const bilingual_str& s)\n+{\n+    return os << \"bilingual_str('\" << s.original << \"' , '\" << s.translated << \"')\";\n+}\n+\n+BOOST_AUTO_TEST_SUITE(result_tests)\n+\n+struct NoCopy\n+{\n+    NoCopy(int n) : m_n{std::make_unique<int>(n)} {}\n+    std::unique_ptr<int> m_n;\n+};\n+\n+bool operator==(const NoCopy& a, const NoCopy& b)\n+{\n+    return *a.m_n == *b.m_n;\n+}\n+\n+std::ostream& operator<<(std::ostream& os, const NoCopy& o)\n+{\n+    if (o.m_n) os << \"NoCopy(\" << *o.m_n << \")\"; else os << \"NoCopy(nullptr)\";",
      "path": "src/test/result_tests.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "6777df621a8c3deef033fcf815b297ee4bf3ee0f",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: nullptr is dead code, otherwise the above operator== would be UB. So if you retouch:\r\n\r\n\r\n```cpp\r\nos << \"NoCopy(\" << *o.m_n << \")\";\r\n```\r\n\r\nAlso: clang-format for me:\r\n\r\n\r\n```diff\r\ndiff --git a/src/test/result_tests.cpp b/src/test/result_tests.cpp\r\nindex 847f68121d..6d688f7b74 100644\r\n--- a/src/test/result_tests.cpp\r\n+++ b/src/test/result_tests.cpp\r\n@@ -18,8 +18,7 @@ inline std::ostream& operator<<(std::ostream& os, const bilingual_str& s)\r\n \r\n BOOST_AUTO_TEST_SUITE(result_tests)\r\n \r\n-struct NoCopy\r\n-{\r\n+struct NoCopy {\r\n     NoCopy(int n) : m_n{std::make_unique<int>(n)} {}\r\n     std::unique_ptr<int> m_n;\r\n };\r\n@@ -31,7 +30,10 @@ bool operator==(const NoCopy& a, const NoCopy& b)\r\n \r\n std::ostream& operator<<(std::ostream& os, const NoCopy& o)\r\n {\r\n-    if (o.m_n) os << \"NoCopy(\" << *o.m_n << \")\"; else os << \"NoCopy(nullptr)\";\r\n+    if (o.m_n)\r\n+        os << \"NoCopy(\" << *o.m_n << \")\";\r\n+    else\r\n+        os << \"NoCopy(nullptr)\";\r\n     return os;\r\n }\r\n \r\n@@ -53,14 +55,14 @@ util::Result<NoCopy> NoCopyFn(int i, bool success)\r\n     return {util::Error{Untranslated(strprintf(\"nocopy %i error.\", i))}};\r\n }\r\n \r\n-template<typename T>\r\n+template <typename T>\r\n void ExpectResult(const util::Result<T>& result, bool success, const bilingual_str& str)\r\n {\r\n     BOOST_CHECK_EQUAL(bool(result), success);\r\n     BOOST_CHECK_EQUAL(util::ErrorString(result), str);\r\n }\r\n \r\n-template<typename T, typename... Args>\r\n+template <typename T, typename... Args>\r\n void ExpectSuccess(const util::Result<T>& result, const bilingual_str& str, Args&&... args)\r\n {\r\n     ExpectResult(result, true, str);\r\n@@ -69,7 +71,7 @@ void ExpectSuccess(const util::Result<T>& result, const bilingual_str& str, Args\r\n     BOOST_CHECK_EQUAL(&result.value(), &*result);\r\n }\r\n \r\n-template<typename T, typename... Args>\r\n+template <typename T, typename... Args>\r\n void ExpectFail(const util::Result<T>& result, const bilingual_str& str)\r\n {\r\n     ExpectResult(result, false, str);\r\ndiff --git a/src/util/result.h b/src/util/result.h\r\nindex 8f100b7933..a87627a589 100644\r\n--- a/src/util/result.h\r\n+++ b/src/util/result.h\r\n@@ -12,7 +12,9 @@\r\n \r\n namespace util {\r\n \r\n-struct Error { bilingual_str message; };\r\n+struct Error {\r\n+    bilingual_str message;\r\n+};\r\n \r\n //! The util::Result class provides a standard way for functions to return\r\n //! either error messages or result values.\r\n@@ -29,8 +31,9 @@ struct Error { bilingual_str message; };\r\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\r\n //! error strings usually just replacing `return std::nullopt;` with `return\r\n //! util::Error{error_string};`.\r\n-template<class T>\r\n-class Result {\r\n+template <class T>\r\n+class Result\r\n+{\r\n private:\r\n     std::variant<bilingual_str, T> m_variant;\r\n \r\n@@ -44,17 +47,31 @@ public:\r\n     //! std::optional methods, so functions returning optional<T> can change to\r\n     //! return Result<T> with minimal changes to existing code, and vice versa.\r\n     bool has_value() const { return m_variant.index() == 1; }\r\n-    const T& value() const LIFETIMEBOUND { assert(*this); return std::get<1>(m_variant); }\r\n-    T& value() LIFETIMEBOUND { assert(*this); return std::get<1>(m_variant); }\r\n+    const T& value() const LIFETIMEBOUND\r\n+    {\r\n+        assert(*this);\r\n+        return std::get<1>(m_variant);\r\n+    }\r\n+    T& value() LIFETIMEBOUND\r\n+    {\r\n+        assert(*this);\r\n+        return std::get<1>(m_variant);\r\n+    }\r\n     explicit operator bool() const { return has_value(); }\r\n     const T* operator->() const LIFETIMEBOUND { return &value(); }\r\n     const T& operator*() const LIFETIMEBOUND { return value(); }\r\n     T* operator->() LIFETIMEBOUND { return &value(); }\r\n     T& operator*() LIFETIMEBOUND { return value(); }\r\n     template <class U>\r\n-    T value_or(U&& default_value) const& { return has_value() ? value() : std::forward<U>(default_value); }\r\n+    T value_or(U&& default_value) const&\r\n+    {\r\n+        return has_value() ? value() : std::forward<U>(default_value);\r\n+    }\r\n     template <class U>\r\n-    T value_or(U&& default_value) && { return has_value() ? std::move(value()) : std::forward<U>(default_value); }\r\n+    T value_or(U&& default_value) &&\r\n+    {\r\n+        return has_value() ? std::move(value()) : std::forward<U>(default_value);\r\n+    }\r\n };\r\n \r\n template <typename T>\r\n",
      "created_at": "2022-08-02T16:06:53Z",
      "updated_at": "2022-08-02T16:06:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935777262",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935777262"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935833853",
      "pull_request_review_id": 1059114969,
      "id": 935833853,
      "node_id": "PRRC_kwDOABII5843x7D9",
      "diff_hunk": "@@ -0,0 +1,96 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/result.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+inline bool operator==(const bilingual_str& a, const bilingual_str& b)\n+{\n+    return a.original == b.original && a.translated == b.translated;\n+}\n+\n+inline std::ostream& operator<<(std::ostream& os, const bilingual_str& s)\n+{\n+    return os << \"bilingual_str('\" << s.original << \"' , '\" << s.translated << \"')\";\n+}\n+\n+BOOST_AUTO_TEST_SUITE(result_tests)\n+\n+struct NoCopy\n+{\n+    NoCopy(int n) : m_n{std::make_unique<int>(n)} {}\n+    std::unique_ptr<int> m_n;\n+};\n+\n+bool operator==(const NoCopy& a, const NoCopy& b)\n+{\n+    return *a.m_n == *b.m_n;\n+}\n+\n+std::ostream& operator<<(std::ostream& os, const NoCopy& o)\n+{\n+    if (o.m_n) os << \"NoCopy(\" << *o.m_n << \")\"; else os << \"NoCopy(nullptr)\";",
      "path": "src/test/result_tests.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "6777df621a8c3deef033fcf815b297ee4bf3ee0f",
      "in_reply_to_id": 935777262,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935777262\r\n\r\n> nit: nullptr is dead code, otherwise the above operator== would be UB. So if you retouch:\r\n\r\nThanks, applied all suggestions",
      "created_at": "2022-08-02T17:07:40Z",
      "updated_at": "2022-08-02T17:08:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935833853",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935833853"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935854842",
      "pull_request_review_id": 1059146733,
      "id": 935854842,
      "node_id": "PRRC_kwDOABII5843yAL6",
      "diff_hunk": "@@ -5,45 +5,80 @@\n #ifndef BITCOIN_UTIL_RESULT_H\n #define BITCOIN_UTIL_RESULT_H\n \n+#include <attributes.h>\n #include <util/translation.h>\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n-template<class T>\n-class BResult {\n+namespace util {\n+\n+struct Error {\n+    bilingual_str message;\n+};\n+\n+//! The util::Result class provides a standard way for functions to return\n+//! either error messages or result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n+template <class T>\n+class Result\n+{\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n-public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n \n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n+public:\n+    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n+    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n \n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n+    //! std::optional methods, so functions returning optional<T> can change to\n+    //! return Result<T> with minimal changes to existing code, and vice versa.\n+    bool has_value() const { return m_variant.index() == 1; }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 61,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "7b249b3a163effc08c9faca841647c936d22ee7a",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`noexcept`, per https://en.cppreference.com/w/cpp/utility/optional/operator_bool",
      "created_at": "2022-08-02T17:32:13Z",
      "updated_at": "2022-08-02T17:34:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935854842",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935854842"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935854933",
      "pull_request_review_id": 1059146733,
      "id": 935854933,
      "node_id": "PRRC_kwDOABII5843yANV",
      "diff_hunk": "@@ -5,45 +5,80 @@\n #ifndef BITCOIN_UTIL_RESULT_H\n #define BITCOIN_UTIL_RESULT_H\n \n+#include <attributes.h>\n #include <util/translation.h>\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n-template<class T>\n-class BResult {\n+namespace util {\n+\n+struct Error {\n+    bilingual_str message;\n+};\n+\n+//! The util::Result class provides a standard way for functions to return\n+//! either error messages or result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n+template <class T>\n+class Result\n+{\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n-public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n \n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n+public:\n+    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n+    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n \n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n+    //! std::optional methods, so functions returning optional<T> can change to\n+    //! return Result<T> with minimal changes to existing code, and vice versa.\n+    bool has_value() const { return m_variant.index() == 1; }\n+    const T& value() const LIFETIMEBOUND",
      "path": "src/util/result.h",
      "position": 62,
      "original_position": 62,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "7b249b3a163effc08c9faca841647c936d22ee7a",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "same?",
      "created_at": "2022-08-02T17:32:19Z",
      "updated_at": "2022-08-02T17:34:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935854933",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935854933"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935855035",
      "pull_request_review_id": 1059146733,
      "id": 935855035,
      "node_id": "PRRC_kwDOABII5843yAO7",
      "diff_hunk": "@@ -5,45 +5,80 @@\n #ifndef BITCOIN_UTIL_RESULT_H\n #define BITCOIN_UTIL_RESULT_H\n \n+#include <attributes.h>\n #include <util/translation.h>\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n-template<class T>\n-class BResult {\n+namespace util {\n+\n+struct Error {\n+    bilingual_str message;\n+};\n+\n+//! The util::Result class provides a standard way for functions to return\n+//! either error messages or result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n+template <class T>\n+class Result\n+{\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n-public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n \n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n+public:\n+    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n+    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n \n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n+    //! std::optional methods, so functions returning optional<T> can change to\n+    //! return Result<T> with minimal changes to existing code, and vice versa.\n+    bool has_value() const { return m_variant.index() == 1; }\n+    const T& value() const LIFETIMEBOUND\n+    {\n+        assert(has_value());\n+        return std::get<1>(m_variant);\n     }\n-    T ReleaseObj()\n+    T& value() LIFETIMEBOUND",
      "path": "src/util/result.h",
      "position": 68,
      "original_position": 68,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "7b249b3a163effc08c9faca841647c936d22ee7a",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "same?",
      "created_at": "2022-08-02T17:32:26Z",
      "updated_at": "2022-08-02T17:34:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935855035",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935855035"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 55,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935855245",
      "pull_request_review_id": 1059146733,
      "id": 935855245,
      "node_id": "PRRC_kwDOABII5843yASN",
      "diff_hunk": "@@ -5,45 +5,80 @@\n #ifndef BITCOIN_UTIL_RESULT_H\n #define BITCOIN_UTIL_RESULT_H\n \n+#include <attributes.h>\n #include <util/translation.h>\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n-template<class T>\n-class BResult {\n+namespace util {\n+\n+struct Error {\n+    bilingual_str message;\n+};\n+\n+//! The util::Result class provides a standard way for functions to return\n+//! either error messages or result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n+template <class T>\n+class Result\n+{\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n-public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n \n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n+public:\n+    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n+    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n \n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n+    //! std::optional methods, so functions returning optional<T> can change to\n+    //! return Result<T> with minimal changes to existing code, and vice versa.\n+    bool has_value() const { return m_variant.index() == 1; }\n+    const T& value() const LIFETIMEBOUND\n+    {\n+        assert(has_value());\n+        return std::get<1>(m_variant);\n     }\n-    T ReleaseObj()\n+    T& value() LIFETIMEBOUND\n     {\n-        assert(HasRes());\n-        return std::move(std::get<T>(m_variant));\n+        assert(has_value());\n+        return std::get<1>(m_variant);\n     }\n-\n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n+    template <class U>\n+    T value_or(U&& default_value) const&\n+    {\n+        return has_value() ? value() : std::forward<U>(default_value);\n     }\n-\n-    explicit operator bool() const { return HasRes(); }\n+    template <class U>\n+    T value_or(U&& default_value) &&\n+    {\n+        return has_value() ? std::move(value()) : std::forward<U>(default_value);\n+    }\n+    explicit operator bool() const { return has_value(); }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 92,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "7b249b3a163effc08c9faca841647c936d22ee7a",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same?",
      "created_at": "2022-08-02T17:32:42Z",
      "updated_at": "2022-08-02T17:34:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935855245",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935855245"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935855649",
      "pull_request_review_id": 1059146733,
      "id": 935855649,
      "node_id": "PRRC_kwDOABII5843yAYh",
      "diff_hunk": "@@ -5,45 +5,80 @@\n #ifndef BITCOIN_UTIL_RESULT_H\n #define BITCOIN_UTIL_RESULT_H\n \n+#include <attributes.h>\n #include <util/translation.h>\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n-template<class T>\n-class BResult {\n+namespace util {\n+\n+struct Error {\n+    bilingual_str message;\n+};\n+\n+//! The util::Result class provides a standard way for functions to return\n+//! either error messages or result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n+template <class T>\n+class Result\n+{\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n-public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n \n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n+public:\n+    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n+    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n \n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n+    //! std::optional methods, so functions returning optional<T> can change to\n+    //! return Result<T> with minimal changes to existing code, and vice versa.\n+    bool has_value() const { return m_variant.index() == 1; }\n+    const T& value() const LIFETIMEBOUND\n+    {\n+        assert(has_value());\n+        return std::get<1>(m_variant);\n     }\n-    T ReleaseObj()\n+    T& value() LIFETIMEBOUND\n     {\n-        assert(HasRes());\n-        return std::move(std::get<T>(m_variant));\n+        assert(has_value());\n+        return std::get<1>(m_variant);\n     }\n-\n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n+    template <class U>\n+    T value_or(U&& default_value) const&\n+    {\n+        return has_value() ? value() : std::forward<U>(default_value);\n     }\n-\n-    explicit operator bool() const { return HasRes(); }\n+    template <class U>\n+    T value_or(U&& default_value) &&\n+    {\n+        return has_value() ? std::move(value()) : std::forward<U>(default_value);\n+    }\n+    explicit operator bool() const { return has_value(); }\n+    const T* operator->() const LIFETIMEBOUND { return &value(); }",
      "path": "src/util/result.h",
      "position": 93,
      "original_position": 93,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "7b249b3a163effc08c9faca841647c936d22ee7a",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same, per https://en.cppreference.com/w/cpp/utility/optional/operator*",
      "created_at": "2022-08-02T17:33:12Z",
      "updated_at": "2022-08-02T17:34:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935855649",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935855649"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936208104",
      "pull_request_review_id": 1059661095,
      "id": 936208104,
      "node_id": "PRRC_kwDOABII5843zWbo",
      "diff_hunk": "@@ -844,11 +844,11 @@ static BResult<CreatedTransactionResult> CreateTransactionInternal(\n     // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n     // provided one\n     if (coin_control.m_feerate && coin_selection_params.m_effective_feerate > *coin_control.m_feerate) {\n-        return strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.m_effective_feerate.ToString(FeeEstimateMode::SAT_VB));\n+        return {util::Error{strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.m_effective_feerate.ToString(FeeEstimateMode::SAT_VB))}};",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "7b249b3a163effc08c9faca841647c936d22ee7a",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What is the reason behind the extra brackets?\r\n\r\nCould just return `util::Error{_(\"something bad\")};`\r\n\r\n(same for the others in this file)\r\n\r\n",
      "created_at": "2022-08-03T03:44:59Z",
      "updated_at": "2022-08-03T04:08:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r936208104",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936208104"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 847,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936216252",
      "pull_request_review_id": 1059661095,
      "id": 936216252,
      "node_id": "PRRC_kwDOABII5843zYa8",
      "diff_hunk": "@@ -5,45 +5,80 @@\n #ifndef BITCOIN_UTIL_RESULT_H\n #define BITCOIN_UTIL_RESULT_H\n \n+#include <attributes.h>\n #include <util/translation.h>\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n-template<class T>\n-class BResult {\n+namespace util {\n+\n+struct Error {\n+    bilingual_str message;\n+};\n+\n+//! The util::Result class provides a standard way for functions to return\n+//! either error messages or result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n+template <class T>\n+class Result\n+{\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n-public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n \n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n+public:\n+    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}",
      "path": "src/util/result.h",
      "position": 52,
      "original_position": 52,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "7b249b3a163effc08c9faca841647c936d22ee7a",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "styling nit: what about creating an enum for the indexes?\r\n```c++\r\nenum { ERR=0, VAL=1 };\r\n// then\r\nstd::in_place_index_t<VAL>{} \r\n```",
      "created_at": "2022-08-03T04:07:33Z",
      "updated_at": "2022-08-03T04:08:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r936216252",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936216252"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 44,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936679580",
      "pull_request_review_id": 1060329090,
      "id": 936679580,
      "node_id": "PRRC_kwDOABII58431Jic",
      "diff_hunk": "@@ -844,11 +844,11 @@ static BResult<CreatedTransactionResult> CreateTransactionInternal(\n     // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n     // provided one\n     if (coin_control.m_feerate && coin_selection_params.m_effective_feerate > *coin_control.m_feerate) {\n-        return strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.m_effective_feerate.ToString(FeeEstimateMode::SAT_VB));\n+        return {util::Error{strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.m_effective_feerate.ToString(FeeEstimateMode::SAT_VB))}};",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "7b249b3a163effc08c9faca841647c936d22ee7a",
      "in_reply_to_id": 936208104,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25721#discussion_r936208104\r\n\r\n> What is the reason behind the extra brackets?\r\n\r\nGood catch. Brackets aren't necessary here so I removed them. In general, brackets are useful after #25665 to call multi-argument constructors. They are used to construct failure values:\r\n\r\n```c++\r\nreturn {util::Error{_(\"Incorrect or no genesis block found. Wrong datadir for network?\")},\r\n        ChainstateLoadError::FAILURE_INCOMPATIBLE_DB};\r\n```\r\n\r\nAnd to chain multiple errors and warnings:\r\n\r\n```c++\r\nreturn {util::Error{\"Error 1.\"}, util::Error{\"Error 2.\"}, util::Warning{\"Warning.\"}, std::move(chained_result)};\r\n```\r\n\r\nAnd to call value constructors with more than 1 argument (since values are constructed in-place and there is no longer any requirement for them to be copyable or movable).",
      "created_at": "2022-08-03T13:42:10Z",
      "updated_at": "2022-08-03T15:44:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r936679580",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936679580"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 847,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936679726",
      "pull_request_review_id": 1060329090,
      "id": 936679726,
      "node_id": "PRRC_kwDOABII58431Jku",
      "diff_hunk": "@@ -5,45 +5,80 @@\n #ifndef BITCOIN_UTIL_RESULT_H\n #define BITCOIN_UTIL_RESULT_H\n \n+#include <attributes.h>\n #include <util/translation.h>\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n-template<class T>\n-class BResult {\n+namespace util {\n+\n+struct Error {\n+    bilingual_str message;\n+};\n+\n+//! The util::Result class provides a standard way for functions to return\n+//! either error messages or result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n+template <class T>\n+class Result\n+{\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n-public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n \n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n+public:\n+    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}",
      "path": "src/util/result.h",
      "position": 52,
      "original_position": 52,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "7b249b3a163effc08c9faca841647c936d22ee7a",
      "in_reply_to_id": 936216252,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25721#discussion_r936216252\r\n\r\n> ```c++\r\n> enum { ERR=0, VAL=1 };\r\n> // then\r\n> std::in_place_index_t<VAL>{} \r\n> ```\r\n\r\n#25665 should drop the std::variant entirely making this moot, but using enum for this seems more indirect and fragile since nothing keeps enum and variant declarations lined up. I'm not against adding this, but would prefer not to unless there is more demand",
      "created_at": "2022-08-03T13:42:16Z",
      "updated_at": "2022-08-03T15:44:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r936679726",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936679726"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 44,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936768700",
      "pull_request_review_id": 1060329090,
      "id": 936768700,
      "node_id": "PRRC_kwDOABII58431fS8",
      "diff_hunk": "@@ -5,45 +5,80 @@\n #ifndef BITCOIN_UTIL_RESULT_H\n #define BITCOIN_UTIL_RESULT_H\n \n+#include <attributes.h>\n #include <util/translation.h>\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n-template<class T>\n-class BResult {\n+namespace util {\n+\n+struct Error {\n+    bilingual_str message;\n+};\n+\n+//! The util::Result class provides a standard way for functions to return\n+//! either error messages or result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n+template <class T>\n+class Result\n+{\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n-public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n \n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n+public:\n+    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n+    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n \n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n+    //! std::optional methods, so functions returning optional<T> can change to\n+    //! return Result<T> with minimal changes to existing code, and vice versa.\n+    bool has_value() const { return m_variant.index() == 1; }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 61,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "7b249b3a163effc08c9faca841647c936d22ee7a",
      "in_reply_to_id": 935854842,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935854842\r\n\r\n> `noexcept`, per https://en.cppreference.com/w/cpp/utility/optional/operator_bool\r\n\r\nAdded",
      "created_at": "2022-08-03T14:55:37Z",
      "updated_at": "2022-08-03T15:44:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r936768700",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936768700"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936771023",
      "pull_request_review_id": 1060329090,
      "id": 936771023,
      "node_id": "PRRC_kwDOABII58431f3P",
      "diff_hunk": "@@ -5,45 +5,80 @@\n #ifndef BITCOIN_UTIL_RESULT_H\n #define BITCOIN_UTIL_RESULT_H\n \n+#include <attributes.h>\n #include <util/translation.h>\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n-template<class T>\n-class BResult {\n+namespace util {\n+\n+struct Error {\n+    bilingual_str message;\n+};\n+\n+//! The util::Result class provides a standard way for functions to return\n+//! either error messages or result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n+template <class T>\n+class Result\n+{\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n-public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n \n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n+public:\n+    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n+    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n \n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n+    //! std::optional methods, so functions returning optional<T> can change to\n+    //! return Result<T> with minimal changes to existing code, and vice versa.\n+    bool has_value() const { return m_variant.index() == 1; }\n+    const T& value() const LIFETIMEBOUND",
      "path": "src/util/result.h",
      "position": 62,
      "original_position": 62,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "7b249b3a163effc08c9faca841647c936d22ee7a",
      "in_reply_to_id": 935854933,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935854933\r\n\r\n> same?\r\n\r\nCan throw bad_variant_access according to https://en.cppreference.com/w/cpp/utility/variant/get. The equivalent std::optional method can also throw https://en.cppreference.com/w/cpp/utility/optional/value",
      "created_at": "2022-08-03T14:57:35Z",
      "updated_at": "2022-08-03T15:44:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r936771023",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936771023"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936772895",
      "pull_request_review_id": 1060329090,
      "id": 936772895,
      "node_id": "PRRC_kwDOABII58431gUf",
      "diff_hunk": "@@ -5,45 +5,80 @@\n #ifndef BITCOIN_UTIL_RESULT_H\n #define BITCOIN_UTIL_RESULT_H\n \n+#include <attributes.h>\n #include <util/translation.h>\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n-template<class T>\n-class BResult {\n+namespace util {\n+\n+struct Error {\n+    bilingual_str message;\n+};\n+\n+//! The util::Result class provides a standard way for functions to return\n+//! either error messages or result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n+template <class T>\n+class Result\n+{\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n-public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n \n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n+public:\n+    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n+    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n \n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n+    //! std::optional methods, so functions returning optional<T> can change to\n+    //! return Result<T> with minimal changes to existing code, and vice versa.\n+    bool has_value() const { return m_variant.index() == 1; }\n+    const T& value() const LIFETIMEBOUND\n+    {\n+        assert(has_value());\n+        return std::get<1>(m_variant);\n     }\n-    T ReleaseObj()\n+    T& value() LIFETIMEBOUND",
      "path": "src/util/result.h",
      "position": 68,
      "original_position": 68,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "7b249b3a163effc08c9faca841647c936d22ee7a",
      "in_reply_to_id": 935855035,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935855035\r\n\r\n> same?\r\n\r\nSame as above, variant get can throw",
      "created_at": "2022-08-03T14:59:10Z",
      "updated_at": "2022-08-03T15:44:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r936772895",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936772895"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 55,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936773407",
      "pull_request_review_id": 1060329090,
      "id": 936773407,
      "node_id": "PRRC_kwDOABII58431gcf",
      "diff_hunk": "@@ -5,45 +5,80 @@\n #ifndef BITCOIN_UTIL_RESULT_H\n #define BITCOIN_UTIL_RESULT_H\n \n+#include <attributes.h>\n #include <util/translation.h>\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n-template<class T>\n-class BResult {\n+namespace util {\n+\n+struct Error {\n+    bilingual_str message;\n+};\n+\n+//! The util::Result class provides a standard way for functions to return\n+//! either error messages or result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n+template <class T>\n+class Result\n+{\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n-public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n \n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n+public:\n+    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n+    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n \n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n+    //! std::optional methods, so functions returning optional<T> can change to\n+    //! return Result<T> with minimal changes to existing code, and vice versa.\n+    bool has_value() const { return m_variant.index() == 1; }\n+    const T& value() const LIFETIMEBOUND\n+    {\n+        assert(has_value());\n+        return std::get<1>(m_variant);\n     }\n-    T ReleaseObj()\n+    T& value() LIFETIMEBOUND\n     {\n-        assert(HasRes());\n-        return std::move(std::get<T>(m_variant));\n+        assert(has_value());\n+        return std::get<1>(m_variant);\n     }\n-\n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n+    template <class U>\n+    T value_or(U&& default_value) const&\n+    {\n+        return has_value() ? value() : std::forward<U>(default_value);\n     }\n-\n-    explicit operator bool() const { return HasRes(); }\n+    template <class U>\n+    T value_or(U&& default_value) &&\n+    {\n+        return has_value() ? std::move(value()) : std::forward<U>(default_value);\n+    }\n+    explicit operator bool() const { return has_value(); }",
      "path": "src/util/result.h",
      "position": null,
      "original_position": 92,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "7b249b3a163effc08c9faca841647c936d22ee7a",
      "in_reply_to_id": 935855245,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935855245\r\n\r\n> Same?\r\n\r\nThanks added noexcept",
      "created_at": "2022-08-03T14:59:34Z",
      "updated_at": "2022-08-03T15:44:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r936773407",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936773407"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936778280",
      "pull_request_review_id": 1060329090,
      "id": 936778280,
      "node_id": "PRRC_kwDOABII58431hoo",
      "diff_hunk": "@@ -5,45 +5,80 @@\n #ifndef BITCOIN_UTIL_RESULT_H\n #define BITCOIN_UTIL_RESULT_H\n \n+#include <attributes.h>\n #include <util/translation.h>\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n-template<class T>\n-class BResult {\n+namespace util {\n+\n+struct Error {\n+    bilingual_str message;\n+};\n+\n+//! The util::Result class provides a standard way for functions to return\n+//! either error messages or result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n+template <class T>\n+class Result\n+{\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n-public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n \n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n+public:\n+    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n+    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n \n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n+    //! std::optional methods, so functions returning optional<T> can change to\n+    //! return Result<T> with minimal changes to existing code, and vice versa.\n+    bool has_value() const { return m_variant.index() == 1; }\n+    const T& value() const LIFETIMEBOUND\n+    {\n+        assert(has_value());\n+        return std::get<1>(m_variant);\n     }\n-    T ReleaseObj()\n+    T& value() LIFETIMEBOUND\n     {\n-        assert(HasRes());\n-        return std::move(std::get<T>(m_variant));\n+        assert(has_value());\n+        return std::get<1>(m_variant);\n     }\n-\n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n+    template <class U>\n+    T value_or(U&& default_value) const&\n+    {\n+        return has_value() ? value() : std::forward<U>(default_value);\n     }\n-\n-    explicit operator bool() const { return HasRes(); }\n+    template <class U>\n+    T value_or(U&& default_value) &&\n+    {\n+        return has_value() ? std::move(value()) : std::forward<U>(default_value);\n+    }\n+    explicit operator bool() const { return has_value(); }\n+    const T* operator->() const LIFETIMEBOUND { return &value(); }",
      "path": "src/util/result.h",
      "position": 93,
      "original_position": 93,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "7b249b3a163effc08c9faca841647c936d22ee7a",
      "in_reply_to_id": 935855649,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/25721#discussion_r935855649\r\n\r\n> Same, per https://en.cppreference.com/w/cpp/utility/optional/operator*\r\n\r\nI guess this is a difference between std::optional and std::variant. It doesn't seem like there is a way to get the address of an object inside a variant that is noexcept. it would be possible to make this noexcept in followup #25665 which removes the std::variant.",
      "created_at": "2022-08-03T15:04:00Z",
      "updated_at": "2022-08-03T15:44:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r936778280",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936778280"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936842826",
      "pull_request_review_id": 1060574137,
      "id": 936842826,
      "node_id": "PRRC_kwDOABII58431xZK",
      "diff_hunk": "@@ -5,45 +5,80 @@\n #ifndef BITCOIN_UTIL_RESULT_H\n #define BITCOIN_UTIL_RESULT_H\n \n+#include <attributes.h>\n #include <util/translation.h>\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n-template<class T>\n-class BResult {\n+namespace util {\n+\n+struct Error {\n+    bilingual_str message;\n+};\n+\n+//! The util::Result class provides a standard way for functions to return\n+//! either error messages or result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n+template <class T>\n+class Result\n+{\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n-public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n \n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n+public:\n+    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n+    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n \n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n+    //! std::optional methods, so functions returning optional<T> can change to\n+    //! return Result<T> with minimal changes to existing code, and vice versa.\n+    bool has_value() const { return m_variant.index() == 1; }\n+    const T& value() const LIFETIMEBOUND",
      "path": "src/util/result.h",
      "position": 62,
      "original_position": 62,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "7b249b3a163effc08c9faca841647c936d22ee7a",
      "in_reply_to_id": 935854933,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think it can throw after our assert, can it?",
      "created_at": "2022-08-03T16:00:25Z",
      "updated_at": "2022-08-03T16:00:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r936842826",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936842826"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936843785",
      "pull_request_review_id": 1060575269,
      "id": 936843785,
      "node_id": "PRRC_kwDOABII58431xoJ",
      "diff_hunk": "@@ -5,45 +5,80 @@\n #ifndef BITCOIN_UTIL_RESULT_H\n #define BITCOIN_UTIL_RESULT_H\n \n+#include <attributes.h>\n #include <util/translation.h>\n \n #include <variant>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n-template<class T>\n-class BResult {\n+namespace util {\n+\n+struct Error {\n+    bilingual_str message;\n+};\n+\n+//! The util::Result class provides a standard way for functions to return\n+//! either error messages or result values.\n+//!\n+//! It is intended for high-level functions that need to report error strings to\n+//! end users. Lower-level functions that don't need this error-reporting and\n+//! only need error-handling should avoid util::Result and instead use standard\n+//! classes like std::optional, std::variant, and std::tuple, or custom structs\n+//! and enum types to return function results.\n+//!\n+//! Usage examples can be found in \\example ../test/result_tests.cpp, but in\n+//! general code returning `util::Result<T>` values is very similar to code\n+//! returning `std::optional<T>` values. Existing functions returning\n+//! `std::optional<T>` can be updated to return `util::Result<T>` and return\n+//! error strings usually just replacing `return std::nullopt;` with `return\n+//! util::Error{error_string};`.\n+template <class T>\n+class Result\n+{\n private:\n     std::variant<bilingual_str, T> m_variant;\n \n-public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n+    template <typename FT>\n+    friend bilingual_str ErrorString(const Result<FT>& result);\n \n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n+public:\n+    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n+    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n \n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n+    //! std::optional methods, so functions returning optional<T> can change to\n+    //! return Result<T> with minimal changes to existing code, and vice versa.\n+    bool has_value() const { return m_variant.index() == 1; }\n+    const T& value() const LIFETIMEBOUND\n+    {\n+        assert(has_value());\n+        return std::get<1>(m_variant);\n     }\n-    T ReleaseObj()\n+    T& value() LIFETIMEBOUND\n     {\n-        assert(HasRes());\n-        return std::move(std::get<T>(m_variant));\n+        assert(has_value());\n+        return std::get<1>(m_variant);\n     }\n-\n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n+    template <class U>\n+    T value_or(U&& default_value) const&\n+    {\n+        return has_value() ? value() : std::forward<U>(default_value);\n     }\n-\n-    explicit operator bool() const { return HasRes(); }\n+    template <class U>\n+    T value_or(U&& default_value) &&\n+    {\n+        return has_value() ? std::move(value()) : std::forward<U>(default_value);\n+    }\n+    explicit operator bool() const { return has_value(); }\n+    const T* operator->() const LIFETIMEBOUND { return &value(); }",
      "path": "src/util/result.h",
      "position": 93,
      "original_position": 93,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "7b249b3a163effc08c9faca841647c936d22ee7a",
      "in_reply_to_id": 935855649,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It should be possible, given our `assert`, no?",
      "created_at": "2022-08-03T16:01:12Z",
      "updated_at": "2022-08-03T16:01:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r936843785",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936843785"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/938738498",
      "pull_request_review_id": 1063251404,
      "id": 938738498,
      "node_id": "PRRC_kwDOABII58439ANC",
      "diff_hunk": "@@ -0,0 +1,96 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/result.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+inline bool operator==(const bilingual_str& a, const bilingual_str& b)\n+{\n+    return a.original == b.original && a.translated == b.translated;\n+}\n+\n+inline std::ostream& operator<<(std::ostream& os, const bilingual_str& s)\n+{\n+    return os << \"bilingual_str('\" << s.original << \"' , '\" << s.translated << \"')\";\n+}\n+\n+BOOST_AUTO_TEST_SUITE(result_tests)\n+\n+struct NoCopy {\n+    NoCopy(int n) : m_n{std::make_unique<int>(n)} {}\n+    std::unique_ptr<int> m_n;\n+};\n+\n+bool operator==(const NoCopy& a, const NoCopy& b)\n+{\n+    return *a.m_n == *b.m_n;\n+}\n+\n+std::ostream& operator<<(std::ostream& os, const NoCopy& o)\n+{\n+    return os << \"NoCopy(\" << *o.m_n << \")\";\n+}\n+\n+util::Result<int> IntFn(int i, bool success)\n+{\n+    if (success) return i;\n+    return util::Error{Untranslated(strprintf(\"int %i error.\", i))};\n+}\n+\n+util::Result<bilingual_str> StrFn(bilingual_str s, bool success)\n+{\n+    if (success) return s;\n+    return util::Error{strprintf(Untranslated(\"str %s error.\"), s.original)};\n+}\n+\n+util::Result<NoCopy> NoCopyFn(int i, bool success)\n+{\n+    if (success) return {i};\n+    return util::Error{Untranslated(strprintf(\"nocopy %i error.\", i))};\n+}\n+\n+template <typename T>\n+void ExpectResult(const util::Result<T>& result, bool success, const bilingual_str& str)\n+{\n+    BOOST_CHECK_EQUAL(bool(result), success);\n+    BOOST_CHECK_EQUAL(util::ErrorString(result), str);\n+}\n+\n+template <typename T, typename... Args>\n+void ExpectSuccess(const util::Result<T>& result, const bilingual_str& str, Args&&... args)\n+{\n+    ExpectResult(result, true, str);\n+    BOOST_CHECK_EQUAL(result.has_value(), true);\n+    BOOST_CHECK_EQUAL(result.value(), T{std::forward<Args>(args)...});\n+    BOOST_CHECK_EQUAL(&result.value(), &*result);\n+}\n+\n+template <typename T, typename... Args>\n+void ExpectFail(const util::Result<T>& result, const bilingual_str& str)",
      "path": "src/test/result_tests.cpp",
      "position": 71,
      "original_position": 71,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Add `static` for the non-template functions in this test file?",
      "created_at": "2022-08-05T11:53:43Z",
      "updated_at": "2022-08-05T12:31:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r938738498",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/938738498"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/938740402",
      "pull_request_review_id": 1063251404,
      "id": 938740402,
      "node_id": "PRRC_kwDOABII58439Aqy",
      "diff_hunk": "@@ -45,11 +45,8 @@ static void BenchUnloadWallet(std::shared_ptr<CWallet>&& wallet)\n \n static void AddTx(CWallet& wallet)\n {\n-    const auto& dest = wallet.GetNewDestination(OutputType::BECH32, \"\");\n-    assert(dest.HasRes());\n-\n     CMutableTransaction mtx;\n-    mtx.vout.push_back({COIN, GetScriptForDestination(dest.GetObj())});\n+    mtx.vout.push_back({COIN, GetScriptForDestination(*Assert(wallet.GetNewDestination(OutputType::BECH32, \"\")))});",
      "path": "src/bench/wallet_loading.cpp",
      "position": 9,
      "original_position": 9,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Add `util/check.h` include header for `Assert`",
      "created_at": "2022-08-05T11:56:33Z",
      "updated_at": "2022-08-05T12:31:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r938740402",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/938740402"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 49,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/938747475",
      "pull_request_review_id": 1063251404,
      "id": 938747475,
      "node_id": "PRRC_kwDOABII58439CZT",
      "diff_hunk": "@@ -88,7 +88,7 @@ class Wallet\n     virtual std::string getWalletName() = 0;\n \n     // Get a new address.\n-    virtual BResult<CTxDestination> getNewDestination(const OutputType type, const std::string label) = 0;\n+    virtual util::Result<CTxDestination> getNewDestination(const OutputType type, const std::string label) = 0;",
      "path": "src/interfaces/wallet.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "While touching this line here and in the override function in `src/wallet/interfaces.cpp`\r\n```suggestion\r\n    virtual util::Result<CTxDestination> getNewDestination(const OutputType type, const std::string& label) = 0;\r\n```",
      "created_at": "2022-08-05T12:06:47Z",
      "updated_at": "2022-08-05T12:31:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r938747475",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/938747475"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 91,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/938758842",
      "pull_request_review_id": 1063251404,
      "id": 938758842,
      "node_id": "PRRC_kwDOABII58439FK6",
      "diff_hunk": "@@ -74,9 +74,7 @@ static void add_coin(CoinsResult& available_coins, CWallet& wallet, const CAmoun\n     tx.vout.resize(nInput + 1);\n     tx.vout[nInput].nValue = nValue;\n     if (spendable) {\n-        auto op_dest = wallet.GetNewDestination(OutputType::BECH32, \"\");\n-        assert(op_dest.HasRes());\n-        tx.vout[nInput].scriptPubKey = GetScriptForDestination(op_dest.GetObj());\n+        tx.vout[nInput].scriptPubKey = GetScriptForDestination(*Assert(wallet.GetNewDestination(OutputType::BECH32, \"\")));",
      "path": "src/wallet/test/coinselector_tests.cpp",
      "position": 7,
      "original_position": 7,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Add `util/check.h` include header for `Assert`",
      "created_at": "2022-08-05T12:22:48Z",
      "updated_at": "2022-08-05T12:31:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r938758842",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/938758842"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 77,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/938759439",
      "pull_request_review_id": 1063251404,
      "id": 938759439,
      "node_id": "PRRC_kwDOABII58439FUP",
      "diff_hunk": "@@ -69,14 +69,13 @@ struct FuzzedWallet {\n     CScript GetScriptPubKey(FuzzedDataProvider& fuzzed_data_provider)\n     {\n         auto type{fuzzed_data_provider.PickValueInArray(OUTPUT_TYPES)};\n-        BResult<CTxDestination> op_dest;\n+        util::Result<CTxDestination> op_dest{util::Error{}};\n         if (fuzzed_data_provider.ConsumeBool()) {\n             op_dest = wallet->GetNewDestination(type, \"\");\n         } else {\n             op_dest = wallet->GetNewChangeDestination(type);\n         }\n-        assert(op_dest.HasRes());\n-        return GetScriptForDestination(op_dest.GetObj());\n+        return GetScriptForDestination(*Assert(op_dest));",
      "path": "src/wallet/test/fuzz/notifications.cpp",
      "position": 13,
      "original_position": 13,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Add `util/check.h` include header for `Assert`\r\n\r\nCan drop the temporary here, if desired\r\n```diff \r\n     // Add tx to wallet\r\n     const auto& op_dest = wallet.GetNewDestination(OutputType::BECH32M, \"\");\r\n     BOOST_ASSERT(op_dest);\r\n-    const CTxDestination& dest = *op_dest;\r\n \r\n     CMutableTransaction mtx;\r\n-    mtx.vout.push_back({COIN, GetScriptForDestination(dest)});\r\n+    mtx.vout.push_back({COIN, GetScriptForDestination(*op_dest)});\r\n```\r\n",
      "created_at": "2022-08-05T12:23:37Z",
      "updated_at": "2022-08-05T12:31:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r938759439",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/938759439"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 78,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/938763403",
      "pull_request_review_id": 1063251404,
      "id": 938763403,
      "node_id": "PRRC_kwDOABII58439GSL",
      "diff_hunk": "@@ -1766,11 +1766,11 @@ bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bo\n     auto op_dest = GetNewDestination(type);\n     index = m_wallet_descriptor.next_index - 1;\n     if (op_dest) {\n-        address = op_dest.GetObj();\n+        address = *op_dest;\n     } else {\n-        error = op_dest.GetError();\n+        error = util::ErrorString(op_dest);\n     }\n-    return op_dest.HasRes();\n+    return bool(op_dest);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 61,
      "original_position": 61,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "pico-nit\r\n```suggestion\r\n    return bool{op_dest};\r\n```",
      "created_at": "2022-08-05T12:28:55Z",
      "updated_at": "2022-08-05T12:31:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r938763403",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/938763403"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1773,
      "original_line": 1773,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/938822671",
      "pull_request_review_id": 1063372808,
      "id": 938822671,
      "node_id": "PRRC_kwDOABII58439UwP",
      "diff_hunk": "@@ -0,0 +1,96 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/result.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+inline bool operator==(const bilingual_str& a, const bilingual_str& b)\n+{\n+    return a.original == b.original && a.translated == b.translated;\n+}\n+\n+inline std::ostream& operator<<(std::ostream& os, const bilingual_str& s)\n+{\n+    return os << \"bilingual_str('\" << s.original << \"' , '\" << s.translated << \"')\";\n+}\n+\n+BOOST_AUTO_TEST_SUITE(result_tests)\n+\n+struct NoCopy {\n+    NoCopy(int n) : m_n{std::make_unique<int>(n)} {}\n+    std::unique_ptr<int> m_n;\n+};\n+\n+bool operator==(const NoCopy& a, const NoCopy& b)\n+{\n+    return *a.m_n == *b.m_n;\n+}\n+\n+std::ostream& operator<<(std::ostream& os, const NoCopy& o)\n+{\n+    return os << \"NoCopy(\" << *o.m_n << \")\";\n+}\n+\n+util::Result<int> IntFn(int i, bool success)\n+{\n+    if (success) return i;\n+    return util::Error{Untranslated(strprintf(\"int %i error.\", i))};\n+}\n+\n+util::Result<bilingual_str> StrFn(bilingual_str s, bool success)\n+{\n+    if (success) return s;\n+    return util::Error{strprintf(Untranslated(\"str %s error.\"), s.original)};\n+}\n+\n+util::Result<NoCopy> NoCopyFn(int i, bool success)\n+{\n+    if (success) return {i};\n+    return util::Error{Untranslated(strprintf(\"nocopy %i error.\", i))};\n+}\n+\n+template <typename T>\n+void ExpectResult(const util::Result<T>& result, bool success, const bilingual_str& str)\n+{\n+    BOOST_CHECK_EQUAL(bool(result), success);\n+    BOOST_CHECK_EQUAL(util::ErrorString(result), str);\n+}\n+\n+template <typename T, typename... Args>\n+void ExpectSuccess(const util::Result<T>& result, const bilingual_str& str, Args&&... args)\n+{\n+    ExpectResult(result, true, str);\n+    BOOST_CHECK_EQUAL(result.has_value(), true);\n+    BOOST_CHECK_EQUAL(result.value(), T{std::forward<Args>(args)...});\n+    BOOST_CHECK_EQUAL(&result.value(), &*result);\n+}\n+\n+template <typename T, typename... Args>\n+void ExpectFail(const util::Result<T>& result, const bilingual_str& str)",
      "path": "src/test/result_tests.cpp",
      "position": 71,
      "original_position": 71,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "in_reply_to_id": 938738498,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`template` should imply `inline`, which again implies that this can't be used in another translation unit, but correct me if I am wrong.",
      "created_at": "2022-08-05T13:36:01Z",
      "updated_at": "2022-08-05T13:36:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r938822671",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/938822671"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/938825139",
      "pull_request_review_id": 1063376292,
      "id": 938825139,
      "node_id": "PRRC_kwDOABII58439VWz",
      "diff_hunk": "@@ -1766,11 +1766,11 @@ bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bo\n     auto op_dest = GetNewDestination(type);\n     index = m_wallet_descriptor.next_index - 1;\n     if (op_dest) {\n-        address = op_dest.GetObj();\n+        address = *op_dest;\n     } else {\n-        error = op_dest.GetError();\n+        error = util::ErrorString(op_dest);\n     }\n-    return op_dest.HasRes();\n+    return bool(op_dest);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 61,
      "original_position": 61,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "in_reply_to_id": 938763403,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "or just has_value (from HasRes)?",
      "created_at": "2022-08-05T13:38:37Z",
      "updated_at": "2022-08-05T13:38:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r938825139",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/938825139"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1773,
      "original_line": 1773,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/940935080",
      "pull_request_review_id": 1066153903,
      "id": 940935080,
      "node_id": "PRRC_kwDOABII5844FYeo",
      "diff_hunk": "@@ -1766,11 +1766,11 @@ bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bo\n     auto op_dest = GetNewDestination(type);\n     index = m_wallet_descriptor.next_index - 1;\n     if (op_dest) {\n-        address = op_dest.GetObj();\n+        address = *op_dest;\n     } else {\n-        error = op_dest.GetError();\n+        error = util::ErrorString(op_dest);\n     }\n-    return op_dest.HasRes();\n+    return bool(op_dest);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 61,
      "original_position": 61,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "in_reply_to_id": 938763403,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Picked up in #25616.",
      "created_at": "2022-08-09T06:12:02Z",
      "updated_at": "2022-08-09T06:12:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r940935080",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/940935080"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1773,
      "original_line": 1773,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/940935255",
      "pull_request_review_id": 1066154169,
      "id": 940935255,
      "node_id": "PRRC_kwDOABII5844FYhX",
      "diff_hunk": "@@ -69,14 +69,13 @@ struct FuzzedWallet {\n     CScript GetScriptPubKey(FuzzedDataProvider& fuzzed_data_provider)\n     {\n         auto type{fuzzed_data_provider.PickValueInArray(OUTPUT_TYPES)};\n-        BResult<CTxDestination> op_dest;\n+        util::Result<CTxDestination> op_dest{util::Error{}};\n         if (fuzzed_data_provider.ConsumeBool()) {\n             op_dest = wallet->GetNewDestination(type, \"\");\n         } else {\n             op_dest = wallet->GetNewChangeDestination(type);\n         }\n-        assert(op_dest.HasRes());\n-        return GetScriptForDestination(op_dest.GetObj());\n+        return GetScriptForDestination(*Assert(op_dest));",
      "path": "src/wallet/test/fuzz/notifications.cpp",
      "position": 13,
      "original_position": 13,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "in_reply_to_id": 938759439,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Picked up in #25616.",
      "created_at": "2022-08-09T06:12:23Z",
      "updated_at": "2022-08-09T06:12:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r940935255",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/940935255"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 78,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/940935655",
      "pull_request_review_id": 1066154740,
      "id": 940935655,
      "node_id": "PRRC_kwDOABII5844FYnn",
      "diff_hunk": "@@ -88,7 +88,7 @@ class Wallet\n     virtual std::string getWalletName() = 0;\n \n     // Get a new address.\n-    virtual BResult<CTxDestination> getNewDestination(const OutputType type, const std::string label) = 0;\n+    virtual util::Result<CTxDestination> getNewDestination(const OutputType type, const std::string label) = 0;",
      "path": "src/interfaces/wallet.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "original_commit_id": "a23cca56c0a7f4a267915b4beba3af3454c51603",
      "in_reply_to_id": 938747475,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Picked up in #25616.",
      "created_at": "2022-08-09T06:13:07Z",
      "updated_at": "2022-08-09T06:13:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25721#discussion_r940935655",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/940935655"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25721"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 91,
      "original_line": 91,
      "side": "RIGHT"
    }
  ]
}