{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231",
    "id": 1268741313,
    "node_id": "PR_kwDOABII585Ln3TB",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/27231",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/27231.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/27231.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27231",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27231/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/93b387fe70174d174b840016da8531ef65ec313e",
    "number": 27231,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Fix logging RPC and -debugexclude with 0/none values, add test coverage, improve docs",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The logging RPC does not work as intended and as documented in its help when `0` or `none` are passed.\r\n\r\nPer the RPC logging help:\r\n```\r\n$ ./src/bitcoin-cli help logging\r\n\r\nIn addition, the following are available as category names with special meanings:\r\n  - \"all\",  \"1\" : represent all logging categories.\r\n  - \"none\", \"0\" : even if other logging categories are specified, ignore all of them.\r\n```\r\n    \r\nThe behavior and documentation were added in #11191, but over time and extended refactoring, the behavior no longer works in master and versions 22/23/24 (the last supported versions currently) -- passing `0`/`none` has no effect.  As there was no test coverage, the regressions went uncaught.  In v24, `none` became unrecognized:\r\n\r\n```\r\n$ ./src/bitcoin-cli logging '[\"none\"]'\r\nerror code: -8\r\nerror message:\r\nunknown logging category none\r\n```\r\n    \r\nDuring the same time period, passing `1` and `all` has been operational and documented. \r\n\r\nSolution: detect `none`/`0` values and add test coverage in any case, and either:\r\n    \r\n- leave the functionality out, raise with an error message if the values are passed, and update the RPC help documentation, or\r\n\r\n- fix the behavior by returning early.\r\n\r\nBoth solutions involve essentially the same code size and complexity.  Given that `all`/`1` has been operational, and that `none`/`0` has been documented and appears per the code of the original PR to have been operational, it seems preferable for consistency to support `none`/`0` in symmetry with `all`/`1` and as ACKed, intended, and documented in #11191.\r\n\r\nDone by this pull:    \r\n- add missing RPC logging logic and test coverage\r\n- update the `-debug` and `-debugexclude` config options to use the same code for consistency in behavior between them, and for consistency with the logging RPC that provides the same behavior for both `-include` and `-exclude`\r\n- improve the user-facing documentation and examples; can be tested with `./src/bitcoind -h | grep -A12 \"\\-debug=<\\|debugexclude\" && ./src/bitcoin-cli help logging`\r\n\r\nIf it is decided to backport a fix, commit `Fix RPC logging behavior when \"0\" and \"none\" values are passed` could probably suffice.",
    "labels": [
      {
        "id": 98279177,
        "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
        "name": "RPC/REST/ZMQ",
        "color": "0052cc",
        "default": false
      }
    ],
    "created_at": "2023-03-09T01:40:52Z",
    "updated_at": "2023-07-26T19:21:26Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "676954558165e8d9da8210f24e872f4c08067112",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "jonatack:2023-03-logging-fixes-and-test-coverage",
      "ref": "2023-03-logging-fixes-and-test-coverage",
      "sha": "93b387fe70174d174b840016da8531ef65ec313e",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 173103842,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNzMxMDM4NDI=",
        "name": "bitcoin",
        "full_name": "jonatack/bitcoin",
        "owner": {
          "login": "jonatack",
          "id": 2415484,
          "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jonatack",
          "html_url": "https://github.com/jonatack",
          "followers_url": "https://api.github.com/users/jonatack/followers",
          "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
          "organizations_url": "https://api.github.com/users/jonatack/orgs",
          "repos_url": "https://api.github.com/users/jonatack/repos",
          "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/jonatack/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/jonatack/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/jonatack/bitcoin",
        "archive_url": "https://api.github.com/repos/jonatack/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/jonatack/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/jonatack/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/jonatack/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/jonatack/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/jonatack/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/jonatack/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/jonatack/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/jonatack/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/jonatack/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/jonatack/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/jonatack/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/jonatack/bitcoin/events",
        "forks_url": "https://api.github.com/repos/jonatack/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/jonatack/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/jonatack/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/jonatack/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/jonatack/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/jonatack/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/jonatack/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/jonatack/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/jonatack/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/jonatack/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/jonatack/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/jonatack/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/jonatack/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/jonatack/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/jonatack/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/jonatack/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:jonatack/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/jonatack/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/jonatack/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/jonatack/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/jonatack/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/jonatack/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/jonatack/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/jonatack/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/jonatack/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/jonatack/bitcoin/hooks",
        "svn_url": "https://github.com/jonatack/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 219514,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-07-25T22:38:05Z",
        "created_at": "2019-02-28T11:57:18Z",
        "updated_at": "2023-01-03T22:00:49Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "61d59fed74108f31eb4e9a2faa3f36422a37000e",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35442,
        "stargazers_count": 70539,
        "watchers_count": 70539,
        "size": 235920,
        "default_branch": "master",
        "open_issues_count": 666,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-07-26T19:17:37Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-07-26T19:54:38Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 148,
    "deletions": 65,
    "changed_files": 8,
    "commits": 9,
    "review_comments": 43,
    "comments": 9
  },
  "events": [
    {
      "event": "commented",
      "id": 1461139731,
      "node_id": "IC_kwDOABII585XFzkT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1461139731",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-09T01:40:54Z",
      "updated_at": "2023-07-26T19:21:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [pinheadmz](https://github.com/bitcoin/bitcoin/pull/27231#pullrequestreview-1539612095) |\n| Stale ACK | [ajtowns](https://github.com/bitcoin/bitcoin/pull/27231#pullrequestreview-1495213933) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#27101](https://github.com/bitcoin/bitcoin/pull/27101) (Support JSON-RPC 2.0 when requested by client by pinheadmz)\n* [#26697](https://github.com/bitcoin/bitcoin/pull/26697) (logging: use bitset for categories by LarryRuane)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#issuecomment-1461139731",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27231"
    },
    {
      "event": "labeled",
      "id": 8702371723,
      "node_id": "LE_lADOABII585gVg4_zwAAAAIGs6eL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8702371723",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-09T01:40:56Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "ready_for_review",
      "id": 8702687497,
      "node_id": "RFRE_lADOABII585gVg4_zwAAAAIGuHkJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8702687497",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-09T02:54:16Z"
    },
    {
      "event": "reviewed",
      "id": 1332329362,
      "node_id": "PRR_kwDOABII585PabuS",
      "url": null,
      "actor": null,
      "commit_id": "a5f8a7abd980933d4c72c3297ef713b8c5bf3d64",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#pullrequestreview-1332329362",
      "submitted_at": "2023-03-09T09:23:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
    },
    {
      "event": "commented",
      "id": 1461655213,
      "node_id": "IC_kwDOABII585XHxat",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1461655213",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-09T09:31:46Z",
      "updated_at": "2023-03-09T09:31:46Z",
      "author_association": "MEMBER",
      "body": ">  or none are passed, including not recognizing none:\r\n\r\nAny idea when/how this was broken?",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#issuecomment-1461655213",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27231"
    },
    {
      "event": "commented",
      "id": 1461666350,
      "node_id": "IC_kwDOABII585XH0Iu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1461666350",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-09T09:38:24Z",
      "updated_at": "2023-03-09T09:38:24Z",
      "author_association": "MEMBER",
      "body": "Probably in f1379aeca9d3a8c4d3528de4d0af8298cb42fee4 from #25614:\r\n> replace the unused BCLog::Level:None string \"none\" with an empty string\r\n  as the case will never be hit\r\n\r\nSo only broken for 24.x.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#issuecomment-1461666350",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27231"
    },
    {
      "event": "commented",
      "id": 1462594692,
      "node_id": "IC_kwDOABII585XLWyE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1462594692",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-09T18:51:12Z",
      "updated_at": "2023-03-09T18:51:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "The behavior was intended to be added in https://github.com/bitcoin/bitcoin/pull/11191.\r\n\r\nI downloaded and tested v23.1 and the behavior wasn't functional: passing `0` or `none` had no effect. \r\n\r\nIn v24, f1379aeca9d3a8c4d3528de4d0af8298cb42fee4 made `none` not be recognized, but the logic for the intended behavior remained absent anyway.\r\n\r\nI've added this information to the PR description.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#issuecomment-1462594692",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27231"
    },
    {
      "event": "reviewed",
      "id": 1334558916,
      "node_id": "PRR_kwDOABII585Pi8DE",
      "url": null,
      "actor": null,
      "commit_id": "a5f8a7abd980933d4c72c3297ef713b8c5bf3d64",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#pullrequestreview-1334558916",
      "submitted_at": "2023-03-10T10:38:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
    },
    {
      "event": "commented",
      "id": 1463949565,
      "node_id": "IC_kwDOABII585XQhj9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1463949565",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-10T15:15:04Z",
      "updated_at": "2023-03-10T15:15:04Z",
      "author_association": "MEMBER",
      "body": "> The behavior was intended to be added in https://github.com/bitcoin/bitcoin/pull/11191.\r\n\r\nIt's still not clear if this was broken from the time it was merged, or at some other later point. This also does not work with 22.x, and any earlier versions are EOL.\r\n\r\nIf it's been broken forever (or at least is in all currently maintained releases), and no ones even noticed, we could take advantage of that, to remove some of the complexity here; do we definitely need multiple different ways of achieving the same logging toggling?",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#issuecomment-1463949565",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27231"
    },
    {
      "event": "renamed",
      "id": 8720919419,
      "node_id": "RTE_lADOABII585gVg4_zwAAAAIHzqt7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8720919419",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-10T18:32:41Z",
      "rename": {
        "from": "rpc: fix logging RPC when \"none\" values are passed, add test coverage, improve docs",
        "to": "Fix logging RPC and -debugexclude with 0/none values, add test coverage, improve docs"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8721140919,
      "node_id": "HRFPE_lADOABII585gVg4_zwAAAAIH0gy3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8721140919",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-10T18:54:40Z"
    },
    {
      "event": "mentioned",
      "id": 8721251183,
      "node_id": "MEE_lADOABII585gVg4_zwAAAAIH07tv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8721251183",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-10T19:07:46Z"
    },
    {
      "event": "subscribed",
      "id": 8721251204,
      "node_id": "SE_lADOABII585gVg4_zwAAAAIH07uE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8721251204",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-10T19:07:46Z"
    },
    {
      "event": "convert_to_draft",
      "id": 8721579095,
      "node_id": "CTDE_lADOABII585gVg4_zwAAAAIH2LxX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8721579095",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-10T19:56:33Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8761138265,
      "node_id": "HRFPE_lADOABII585gVg4_zwAAAAIKNFxZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8761138265",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-15T23:28:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8772353635,
      "node_id": "HRFPE_lADOABII585gVg4_zwAAAAIK335j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8772353635",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-16T21:45:05Z"
    },
    {
      "event": "labeled",
      "id": 8832668124,
      "node_id": "LE_lADOABII585gVg4_zwAAAAIOd9Hc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8832668124",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-23T21:30:12Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8897868203,
      "node_id": "HRFPE_lADOABII585gVg4_zwAAAAISWrGr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8897868203",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-31T13:05:19Z"
    },
    {
      "event": "commented",
      "id": 1492195680,
      "node_id": "IC_kwDOABII585Y8Rlg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1492195680",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-31T16:04:04Z",
      "updated_at": "2023-03-31T16:04:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased.\r\n\r\n> could take advantage of that, to remove some of the complexity here; do we definitely need multiple different ways of achieving the same logging toggling?\r\n\r\nExploring this, it doesn't look like there would be much code simplification gained by dropping `none` for `0` only, which would no longer be in symmetry with `all/1` that have been operational for a long time.  A couple lines could be saved by removing the `-debugexclude` config option, but that option is practical to have, as seen by its use in our own unit/fuzz and functional test frameworks.\r\n\r\nIt seems the way forward from here is to detect `none/0` values, add test coverage and then either:\r\n    \r\n- leave the functionality out, raise with an error message if `none/0` values are passed, and update the RPC help documentation, or\r\n\r\n- simply fix the original behavior by returning early.\r\n\r\nBoth involve similar code size/complexity and the second option seems preferable.  The updated code here is about the same length as before, modulo missing test coverage and improved documentation.\r\n\r\nIn the last pushes I've updated the PR description and first commit message with this info and improved the code and tests.  This should be ready for further review!",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#issuecomment-1492195680",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27231"
    },
    {
      "event": "ready_for_review",
      "id": 8899707719,
      "node_id": "RFRE_lADOABII585gVg4_zwAAAAISdsNH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8899707719",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-31T16:04:09Z"
    },
    {
      "event": "unlabeled",
      "id": 8906014110,
      "node_id": "UNLE_lADOABII585gVg4_zwAAAAIS1v2e",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8906014110",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-02T08:30:56Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 8913291448,
      "node_id": "LE_lADOABII585gVg4_zwAAAAITRgi4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8913291448",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-03T13:53:53Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8926518509,
      "node_id": "HRFPE_lADOABII585gVg4_zwAAAAIUD9zt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8926518509",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-04T16:27:59Z"
    },
    {
      "event": "unlabeled",
      "id": 8926910941,
      "node_id": "UNLE_lADOABII585gVg4_zwAAAAIUFdnd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8926910941",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-04T17:12:49Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1373532023,
      "node_id": "PRR_kwDOABII585R3m93",
      "url": null,
      "actor": null,
      "commit_id": "22e77cc5f70360408a508f1b43f37c75b2eff9e1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "concept ACK\r\ngithub code review, will fine-tooth comb review later this week.\r\nPlayed with build locally and tried out examples from new help message. A few questions...",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#pullrequestreview-1373532023",
      "submitted_at": "2023-04-05T19:30:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
    },
    {
      "event": "milestoned",
      "id": 8975461747,
      "node_id": "MIE_lADOABII585gVg4_zwAAAAIW-q1z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8975461747",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-11T15:34:52Z",
      "milestone": {
        "title": "25.0"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8978371169,
      "node_id": "HRFPE_lADOABII585gVg4_zwAAAAIXJxJh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8978371169",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-11T21:35:23Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8987929332,
      "node_id": "HRFPE_lADOABII585gVg4_zwAAAAIXuOr0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8987929332",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-12T17:01:28Z"
    },
    {
      "event": "reviewed",
      "id": 1381837068,
      "node_id": "PRR_kwDOABII585SXSkM",
      "url": null,
      "actor": null,
      "commit_id": "e9f6fd0e028e6a5669926926792c70c31a26c403",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK e9f6fd0e028e6a5669926926792c70c31a26c403\r\n\r\nreviewed code, built and ran tests locally. played with feature in regtest, tried to break it, couldn't break it.\r\n\r\njust one non-busting question below\r\n\r\n<details><summary>Show Signature</summary>\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA256\r\n\r\nACK e9f6fd0e028e6a5669926926792c70c31a26c403\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQIzBAEBCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmQ29zkACgkQ5+KYS2KJ\r\nyTqh4hAAwBBMTmfeyYhdSTLpO2hma6GolZdUdvzOYdMhADsucUvihZIic8o70MZU\r\nhzoqnYsGdTvw31MxoBDWre10y9jBvXfK0vtrkC8A7nzMNBHVaVTqFfsVayUQ4TMm\r\n6PPrKJm1TbdAUc5/aiv6B3FEiCdUx2hlugWyFnzxLt3sPS8pnPMQ8GMdyxo7+0Mh\r\nOYsRLxCvwnMFHMGh/mA3do7Znj28f3QM4xKGYV7OA/GeghqNl75Oo3+7pGB/Rq5D\r\nJXfqjLN4/pAvZ78dr5k6O8Xgz/tlsCtPs5gJo+aaVwPv0my5fpCO3GbegD76ybuK\r\n3teZPSCufYe7XBNOQVnkXB4EtnhwrXPEXz/xAAOssBKhQrfk7TV4sovi4pRrNxec\r\nrAVO3Fc9H0weHywxi1DO56/0F9oLNVBWJMLmV1t9/FF/lrIHvWDTwvywKg1N/mpQ\r\nMY4NKmBLVD0kLdczmEhdpPua2400WwYWm/ypPXjOJhGuS7pmJW2WNOXv06NNXaxm\r\nh/4byxYhgB6AkffZ5IQM5+6gEXixWbFDmV/eEciydB0VnNv1+nJctZ1QxyVUnaZ9\r\nZfBRm9e99Q9JHtOkvF8UF3X5bLP9bCqOhCThqjWsxy6shzpkkkhBE0O+HDkJEHsz\r\ncyKvlcNo4a2OX0EkITmX195G3MYqFK0RATitcM5e3SZEA7wkdVg=\r\n=DtQx\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\npinheadmz's public key is [on keybase](https://keybase.io/pinheadmz/pgp_keys.asc?fingerprint=e61773cd6e01040e2f1bd78ce7e2984b6289c93a)\r\n</details>\r\n",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#pullrequestreview-1381837068",
      "submitted_at": "2023-04-12T18:25:16Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8990242984,
      "node_id": "HRFPE_lADOABII585gVg4_zwAAAAIX3Dio",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8990242984",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-12T21:37:11Z"
    },
    {
      "event": "reviewed",
      "id": 1383617680,
      "node_id": "PRR_kwDOABII585SeFSQ",
      "url": null,
      "actor": null,
      "commit_id": "5991eddb98ce59b883ae695752d4e90f32d43960",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 5991eddb98ce59b883ae695752d4e90f32d43960\r\n<details><summary>Show Signature</summary>\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA256\r\n\r\nACK 5991eddb98ce59b883ae695752d4e90f32d43960\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQIzBAEBCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmQ4FuQACgkQ5+KYS2KJ\r\nyTqVKQ//TIOVSamur/OBGsHB1lgx9C3wyqQFSg+RzImVrDvquEhTDdwfjWI56DzL\r\nsYWxaSDjHLP+4jYK7x3O4QoZJW1iJDlz56PhakxtDSzWMIr0WIfHGpTV6oH1p4Uh\r\nKaz57R6Y71G4ADMqeR48MqLK/B7vMuEKhzUUmGk14O/8bPUHk7HJE70b5F3zOTb9\r\nEBu/NtFd3D5rdRCSTMbmkvkuZ8ezAzoROTT+X08ge1Rf2RwVHeMklY74apx12+qT\r\nn4xklbM1YZ/6HN40uCxGXnhgYtqhwAk8I94Zz5J8lJTh7UbXDrYcWiyGd3x6Ph7Y\r\n6ZmSP7cgCXTAHx92Hb6QHysInJZVcd/SP11PhdWkgSAvLpKHcXiZiPOMUKz6p4Ih\r\nO3i/BvsaGR0HkPxCQ0x9XDoABHFGNT3YT64dYiCxbwBb9yPiNzZYTOexH8iZOIQp\r\niftnh/d+iZSIiPZP1uVctfrUsr9U+ECIV0hFOheC7yDygxYI3QIyzFYj2kzxfm0c\r\nYwBAgCSnl0uxGHryFtya3fr5Y0zFk+wlhhm04nLM5VVbxq3kQmfg8+CKPJ8MayCh\r\nLRc89eL53ijefy5pmCXEZvMLJIX9bcdLVTRJPe4JS5lRh+fmSP2rEyPffymnXL1P\r\n51es/2so7kOxu4chEr178/+GY4uZjIPxd1MOMxl11QE7ug8COXQ=\r\n=sU3Z\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\npinheadmz's public key is [on keybase](https://keybase.io/pinheadmz/pgp_keys.asc?fingerprint=e61773cd6e01040e2f1bd78ce7e2984b6289c93a)\r\n</details>\r\n",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#pullrequestreview-1383617680",
      "submitted_at": "2023-04-13T14:51:46Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
    },
    {
      "event": "demilestoned",
      "id": 9006010665,
      "node_id": "DEME_lADOABII585gVg4_zwAAAAIYzNEp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9006010665",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-14T09:44:42Z",
      "milestone": {
        "title": "25.0"
      }
    },
    {
      "event": "labeled",
      "id": 9583508334,
      "node_id": "LE_lADOABII585gVg4_zwAAAAI7OLtu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9583508334",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-20T19:30:23Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "unsubscribed",
      "id": 9583834259,
      "node_id": "UE_lADOABII585gVg4_zwAAAAI7PbST",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9583834259",
      "actor": {
        "login": "joostjager",
        "id": 4638168,
        "node_id": "MDQ6VXNlcjQ2MzgxNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4638168?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joostjager",
        "html_url": "https://github.com/joostjager",
        "followers_url": "https://api.github.com/users/joostjager/followers",
        "following_url": "https://api.github.com/users/joostjager/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/joostjager/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/joostjager/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/joostjager/subscriptions",
        "organizations_url": "https://api.github.com/users/joostjager/orgs",
        "repos_url": "https://api.github.com/users/joostjager/repos",
        "events_url": "https://api.github.com/users/joostjager/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/joostjager/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-20T20:08:38Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDAzNzRjOGI4YTNlNGMyNzRhMWRhYWE1MjgwN2RmNDI5YjU0MzM1MTE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0374c8b8a3e4c274a1daaa52807df429b5433511",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0374c8b8a3e4c274a1daaa52807df429b5433511",
      "tree": {
        "sha": "80d941d340003b383e26238f877fe6e5ba241e72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/80d941d340003b383e26238f877fe6e5ba241e72"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee22ca59a2b29d767ffec0d45483177669b0deea",
          "sha": "ee22ca59a2b29d767ffec0d45483177669b0deea",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ee22ca59a2b29d767ffec0d45483177669b0deea"
        }
      ],
      "message": "Unit tests for LogPrintfCategory and LogPrintLevel with BCLog::ALL/NONE\n\nto specify expected current behavior and check future changes for regressions.",
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2023-06-20T20:40:45Z"
      },
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2023-04-11T20:22:10Z"
      },
      "sha": "0374c8b8a3e4c274a1daaa52807df429b5433511"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDNkNGFhZDhmZjZmN2E3MjlhOWY3ZTg5N2M5NzlmOTY1YzRmMjExZTM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d4aad8ff6f7a729a9f7e897c979f965c4f211e3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3d4aad8ff6f7a729a9f7e897c979f965c4f211e3",
      "tree": {
        "sha": "42cbaa3255fb2320028acc0e788e7fce0f4b44af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/42cbaa3255fb2320028acc0e788e7fce0f4b44af"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0374c8b8a3e4c274a1daaa52807df429b5433511",
          "sha": "0374c8b8a3e4c274a1daaa52807df429b5433511",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0374c8b8a3e4c274a1daaa52807df429b5433511"
        }
      ],
      "message": "Functional test that RPC logging does not return all/none categories",
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2023-06-20T20:40:45Z"
      },
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2023-04-11T18:55:58Z"
      },
      "sha": "3d4aad8ff6f7a729a9f7e897c979f965c4f211e3"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9585236902,
      "node_id": "HRFPE_lADOABII585gVg4_zwAAAAI7Uxum",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9585236902",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-20T22:34:37Z"
    },
    {
      "event": "commented",
      "id": 1599735630,
      "node_id": "IC_kwDOABII585fWgdO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1599735630",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-20T23:37:52Z",
      "updated_at": "2023-06-20T23:37:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased following merge of #27632; only change is to commit 4351f26203c6daab321d478a3992e1723cc60814 per `git range-diff ee22ca5 5991edd 630b38e`.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#issuecomment-1599735630",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27231"
    },
    {
      "event": "unlabeled",
      "id": 9585653328,
      "node_id": "UNLE_lADOABII585gVg4_zwAAAAI7WXZQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9585653328",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-20T23:54:27Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1493504697,
      "node_id": "PRR_kwDOABII585ZBRK5",
      "url": null,
      "actor": null,
      "commit_id": "630b38e92b4e40d49d69970b6c5bc02aa39ba210",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#pullrequestreview-1493504697",
      "submitted_at": "2023-06-22T15:40:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
    },
    {
      "event": "reviewed",
      "id": 1493925355,
      "node_id": "PRR_kwDOABII585ZC33r",
      "url": null,
      "actor": null,
      "commit_id": "630b38e92b4e40d49d69970b6c5bc02aa39ba210",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "re-ACK 630b38e92b4e40d49d69970b6c5bc02aa39ba210\r\n\r\nConfirmed refactor since last ACK, making use of `util:Result`\r\n\r\n<details><summary>Show Signature</summary>\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA256\r\n\r\nACK 630b38e92b4e40d49d69970b6c5bc02aa39ba210\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQIzBAEBCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmSUqggACgkQ5+KYS2KJ\r\nyTqixA/+NOb+9zG4txOdmcIJWSVwPIu7nU59E9EfRvutPPMOw12R0tqm5+B1TvYQ\r\nLxZCFVTck5fe+dAjy0v0wEimrfyY7fJzfxp+HC+ksNWkh88xrgfVFPIzSLwmHx4Z\r\nAke54SuSEICD7FUJ8G43Q5uNkgG+/rzQ73iLdiY9fdmex6y2kW5yXoPlwhczjRJo\r\nlGV7JXVC0yZjwuey9LhQdCHpyr0rc9rUZ3MD3Wfc4fH+NH/20VkOQimA1ux1KSe4\r\nwY0ezbMW0AyeH3WAnnk+c3G8+Y+k88s4f6J/uxfKuyFz52Cz1vfyK/vudabqTvxL\r\nAyZ/P++n1gqBZkyOmzHhKYxv0jtFBHb5OtIj25tZoP33/AlL3iy8ZjD6aUN3tYfU\r\n8dzRiUD7vTYauKnd6QKyGJEGKir8D24UVE34PUM7o1l2GtwK386s3Lr4CfRdVYyP\r\nP0BkL638CgkMzyF5HhQVLoxr/jdpOQdvzd3KY6yzenMdBH8aD5TydwBswvGb4EGd\r\nhvn7txdklo+ZkJLc4A4b7zNjB32NWx2JWUqTr8qV/oKgUPrpo9q2SPB3kqOB9zhV\r\nL1b7VJxVE9xreteU+zOgVVQ9PRtgzXSRJUnC+nCgCZrJm/MMy9iqN54aLFdMmDCf\r\nXy3kkky33ElyubH7r6NHYARqXoDoxfmMJm3J5EQ72SSDI+j8KX8=\r\n=cmua\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\npinheadmz's public key is [on keybase](https://keybase.io/pinheadmz/pgp_keys.asc?fingerprint=e61773cd6e01040e2f1bd78ce7e2984b6289c93a)\r\n</details>\r\n",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#pullrequestreview-1493925355",
      "submitted_at": "2023-06-22T20:11:44Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
    },
    {
      "event": "reviewed",
      "id": 1495213933,
      "node_id": "PRR_kwDOABII585ZHydt",
      "url": null,
      "actor": null,
      "commit_id": "630b38e92b4e40d49d69970b6c5bc02aa39ba210",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "utACK 630b38e92b4e40d49d69970b6c5bc02aa39ba210",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#pullrequestreview-1495213933",
      "submitted_at": "2023-06-23T14:07:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9620494351,
      "node_id": "HRFPE_lADOABII585gVg4_zwAAAAI9bRgP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9620494351",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-23T18:04:36Z"
    },
    {
      "event": "commented",
      "id": 1604660838,
      "node_id": "IC_kwDOABII585fpS5m",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1604660838",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-23T18:09:35Z",
      "updated_at": "2023-06-23T18:10:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thank you @pinheadmz and @ajtowns for the review; updated commit 0c6c39056851d13c0ca3cea227fac72a4338bed0 per https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1239861077.\r\n\r\n<details><summary><code>git diff 630b38e 08a367c</code></summary><p>\r\n\r\n```diff\r\n--- a/src/init/common.cpp\r\n+++ b/src/init/common.cpp\r\n@@ -11,7 +11,6 @@\r\n #include <logging.h>\r\n #include <node/interface_ui.h>\r\n #include <tinyformat.h>\r\n-#include <util/check.h>\r\n #include <util/fs.h>\r\n #include <util/fs_helpers.h>\r\n #include <util/result.h>\r\n@@ -79,34 +78,29 @@ util::Result<void> SetLoggingLevel(const ArgsManager& args)\r\n     return {};\r\n }\r\n \r\n-[[nodiscard]] static bool EnableOrDisable(const std::string& opt, const std::string& category)\r\n-{\r\n-    if (opt == \"-debug\") return LogInstance().EnableCategory(category);\r\n-    if (opt == \"-debugexclude\") return LogInstance().DisableCategory(category);\r\n-    NONFATAL_UNREACHABLE();\r\n-}\r\n-\r\n // Maintain similar logic in both of the EnableOrDisableLogCategories() functions in the codebase.\r\n-[[nodiscard]] static util::Result<void> EnableOrDisableLogCategories(const ArgsManager& args, const std::string& opt)\r\n+static void EnableOrDisableLogCategories(util::Result<void>& result, const ArgsManager& args, const std::string& opt, bool enable)\r\n {\r\n+    if (!result || !args.IsArgSet(opt)) return;\r\n     const std::vector<std::string>& categories{args.GetArgs(opt)};\r\n-    if (std::any_of(categories.cbegin(), categories.cend(), [](const auto& c) { return LogInstance().IsNoneCategory(c); })) return {};\r\n+    if (std::any_of(categories.cbegin(), categories.cend(), [](const auto& c) { return LogInstance().IsNoneCategory(c); })) return;\r\n     for (const auto& c : categories) {\r\n-        if (!EnableOrDisable(opt, c)) return util::Error{strprintf(_(\"Unsupported logging category %s=%s.\"), opt, c)};\r\n+        const bool success{enable ? LogInstance().EnableCategory(c) : LogInstance().DisableCategory(c)};\r\n+        if (!success) {\r\n+            result = util::Error{strprintf(_(\"Unsupported logging category %s=%s.\"), opt, c)};\r\n+            return;\r\n+        }\r\n     }\r\n-    return {};\r\n+    return;\r\n }\r\n \r\n util::Result<void> SetLoggingCategories(const ArgsManager& args)\r\n {\r\n+    util::Result<void> result;\r\n     // debugexclude settings take priority over debug ones, so run debugexclude last\r\n-    for (const std::string& opt : {\"-debug\", \"-debugexclude\"}) {\r\n-        if (args.IsArgSet(opt)) {\r\n-            auto result = EnableOrDisableLogCategories(args, opt);\r\n-            if (!result) return util::Error{util::ErrorString(result)};\r\n-        }\r\n-    }\r\n-    return {};\r\n+    EnableOrDisableLogCategories(result, args, \"-debug\", /*enable=*/true);\r\n+    EnableOrDisableLogCategories(result, args, \"-debugexclude\", /*enable=*/false);\r\n+    return result;\r\n }\r\n```\r\n</p></details>\r\n",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#issuecomment-1604660838",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27231"
    },
    {
      "event": "mentioned",
      "id": 9620555979,
      "node_id": "MEE_lADOABII585gVg4_zwAAAAI9bgjL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9620555979",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-23T18:09:35Z"
    },
    {
      "event": "subscribed",
      "id": 9620555990,
      "node_id": "SE_lADOABII585gVg4_zwAAAAI9bgjW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9620555990",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-23T18:09:35Z"
    },
    {
      "event": "mentioned",
      "id": 9620556003,
      "node_id": "MEE_lADOABII585gVg4_zwAAAAI9bgjj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9620556003",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-23T18:09:35Z"
    },
    {
      "event": "subscribed",
      "id": 9620556017,
      "node_id": "SE_lADOABII585gVg4_zwAAAAI9bgjx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9620556017",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-23T18:09:35Z"
    },
    {
      "event": "reviewed",
      "id": 1506340867,
      "node_id": "PRR_kwDOABII585ZyPAD",
      "url": null,
      "actor": null,
      "commit_id": "08a367c929e55e779d3b06ca75f94d42b5d67e1f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#pullrequestreview-1506340867",
      "submitted_at": "2023-06-30T02:05:31Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRiNjY0ZGZlOWM1YjRkMjZiNjg3YjQ3ODZiYzQ4MWFmN2VjZGNhMzY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b664dfe9c5b4d26b687b4786bc481af7ecdca36",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4b664dfe9c5b4d26b687b4786bc481af7ecdca36",
      "tree": {
        "sha": "ac8850380b569f2d2ec7c7f400e94dfd0c65a562",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac8850380b569f2d2ec7c7f400e94dfd0c65a562"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d4aad8ff6f7a729a9f7e897c979f965c4f211e3",
          "sha": "3d4aad8ff6f7a729a9f7e897c979f965c4f211e3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3d4aad8ff6f7a729a9f7e897c979f965c4f211e3"
        }
      ],
      "message": "Fix RPC logging behavior when \"0\" and \"none\" values are passed\n\nPer the RPC logging help:\n\n```\nIn addition, the following are available as category names with special meanings:\n  - \"all\",  \"1\" : represent all logging categories.\n  - \"none\", \"0\" : even if other logging categories are specified, ignore all of them.\n```\n\nThe behavior and documentation were added in #11191, but over time and extended\nrefactoring, the behavior is not longer working in Bitcoin Core versions\n22/23/24 (the last supported versions currently) -- passing `0` or `none` has no\neffect.  As there was no test coverage, the regressions went uncaught.  In v24,\n`none` became unrecognized.\n\nDuring the same time period, passing `1` and `all` has been operational and documented.\n\nWe therefore need to detect none/0 values and add test coverage in any case, and either:\n\n- leave the functionality out, raise with an error message if none/0 are passed,\n  and update the RPC help documentation, or\n\n- fix the behavior by returning early.\n\nBoth solutions involve essentially the same code size and complexity.  Given\nthat all/1 has been operational, and that none/0 has been documented and appears\nto have been operational previously, it seems preferable for consistency to\nsupport none/0 in symmetry with all/1, and as ACKed, intended, and documented\nsince #11191.\n\n---\n\nThis commit therefore adds:\n\n- the missing logic to make the functionality work\n\n- a missing logging.h include header\n\n- the relevant info in the logging RPC help doc",
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2023-06-30T20:35:49Z"
      },
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2023-03-09T17:59:07Z"
      },
      "sha": "4b664dfe9c5b4d26b687b4786bc481af7ecdca36"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDlkNWUyNDk0ZDc4OTZlM2M1MjJjZjNjZDQzNmQ2ZTFmM2Y4YmZiYzQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d5e2494d7896e3c522cf3cd436d6e1f3f8bfbc4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9d5e2494d7896e3c522cf3cd436d6e1f3f8bfbc4",
      "tree": {
        "sha": "1ba17755a2a5c1acea8f3ca4c87f1afdff98945d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1ba17755a2a5c1acea8f3ca4c87f1afdff98945d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b664dfe9c5b4d26b687b4786bc481af7ecdca36",
          "sha": "4b664dfe9c5b4d26b687b4786bc481af7ecdca36",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4b664dfe9c5b4d26b687b4786bc481af7ecdca36"
        }
      ],
      "message": "Use same code/behavior for -debug and -debugexclude config options\n\nfor consistency between them and for consistency with the logging RPC that uses\nthe same logic for both -include and -exclude.\n\nCo-authored-by: Anthony Towns <aj@erisian.com.au>\nCo-authored-by: Matthew Zipkin <pinheadmz@gmail.com>",
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2023-06-30T20:35:51Z"
      },
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2023-03-09T21:51:33Z"
      },
      "sha": "9d5e2494d7896e3c522cf3cd436d6e1f3f8bfbc4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDE5ZTg3OTg5M2RjNzY3NzU3NGVhYjczNjU5MGRkNDNmNDVmMDMyYmE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19e879893dc7677574eab736590dd43f45f032ba",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/19e879893dc7677574eab736590dd43f45f032ba",
      "tree": {
        "sha": "a7a0c2e572fc89c2481124d622dfe9dd28885582",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7a0c2e572fc89c2481124d622dfe9dd28885582"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d5e2494d7896e3c522cf3cd436d6e1f3f8bfbc4",
          "sha": "9d5e2494d7896e3c522cf3cd436d6e1f3f8bfbc4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9d5e2494d7896e3c522cf3cd436d6e1f3f8bfbc4"
        }
      ],
      "message": "Update -debug and -debugexclude help documentation\n\nCan be tested with:\n\n./src/bitcoind -h | grep -A12 \"\\-debug=<\\|debugexclude\"",
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2023-06-30T20:35:51Z"
      },
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2023-03-10T18:12:53Z"
      },
      "sha": "19e879893dc7677574eab736590dd43f45f032ba"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGU5Y2RlZjU3ZWQ4ODMzNzIwNTQ5ZjRkOTRkYmU0ZTdiMWFiMmJmZDQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9cdef57ed8833720549f4d94dbe4e7b1ab2bfd4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e9cdef57ed8833720549f4d94dbe4e7b1ab2bfd4",
      "tree": {
        "sha": "1dd0d518c1a9032456b6501f472323c2cf52bc79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1dd0d518c1a9032456b6501f472323c2cf52bc79"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19e879893dc7677574eab736590dd43f45f032ba",
          "sha": "19e879893dc7677574eab736590dd43f45f032ba",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/19e879893dc7677574eab736590dd43f45f032ba"
        }
      ],
      "message": "Functional test coverage for RPC logging include/exclude with all/none",
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2023-06-30T20:35:51Z"
      },
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2023-03-07T20:50:51Z"
      },
      "sha": "e9cdef57ed8833720549f4d94dbe4e7b1ab2bfd4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGJjM2RhNWFlNGRiMmY1OGRjYjllMDIxNDZjZDBhMzM5ZTE2ODg3NmE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc3da5ae4db2f58dcb9e02146cd0a339e168876a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bc3da5ae4db2f58dcb9e02146cd0a339e168876a",
      "tree": {
        "sha": "c30e7ad985c17116f9e45331f41443b3aa474534",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c30e7ad985c17116f9e45331f41443b3aa474534"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9cdef57ed8833720549f4d94dbe4e7b1ab2bfd4",
          "sha": "e9cdef57ed8833720549f4d94dbe4e7b1ab2bfd4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e9cdef57ed8833720549f4d94dbe4e7b1ab2bfd4"
        }
      ],
      "message": "Functional test coverage for -debug/-debugexclude config options\n\nand convert some comments to logging.",
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2023-06-30T20:49:48Z"
      },
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2023-03-09T22:46:42Z"
      },
      "sha": "bc3da5ae4db2f58dcb9e02146cd0a339e168876a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDM4MjkyZGZmNTM3N2JmZGZkMWNjNjU3OGEyNThlYjVjNWE3MTJmNDA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38292dff5377bfdfd1cc6578a258eb5c5a712f40",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/38292dff5377bfdfd1cc6578a258eb5c5a712f40",
      "tree": {
        "sha": "9fe30060bcd6c12af41cad54fb5708deb2e0d048",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9fe30060bcd6c12af41cad54fb5708deb2e0d048"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc3da5ae4db2f58dcb9e02146cd0a339e168876a",
          "sha": "bc3da5ae4db2f58dcb9e02146cd0a339e168876a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/bc3da5ae4db2f58dcb9e02146cd0a339e168876a"
        }
      ],
      "message": "log: remove unused BCLog::NONE enums\n\nThese enum entries are never hit and are not needed.",
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2023-06-30T20:49:51Z"
      },
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2023-03-15T17:50:27Z"
      },
      "sha": "38292dff5377bfdfd1cc6578a258eb5c5a712f40"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDkzYjM4N2ZlNzAxNzRkMTc0Yjg0MDAxNmRhODUzMWVmNjVlYzMxM2U",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93b387fe70174d174b840016da8531ef65ec313e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/93b387fe70174d174b840016da8531ef65ec313e",
      "tree": {
        "sha": "cbe643eb4b15c53567e4a945a39d9266af986a32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cbe643eb4b15c53567e4a945a39d9266af986a32"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38292dff5377bfdfd1cc6578a258eb5c5a712f40",
          "sha": "38292dff5377bfdfd1cc6578a258eb5c5a712f40",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/38292dff5377bfdfd1cc6578a258eb5c5a712f40"
        }
      ],
      "message": "Improve RPC logging documentation and examples\n\nand make the logging example in the developer notes zsh-compatible\n(for instance, zsh is currently the default shell in macOS).\n\nThe RPC logging help can be tested with:\n\n./src/bitcoin-cli help logging",
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2023-06-30T20:49:51Z"
      },
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2023-03-08T21:28:59Z"
      },
      "sha": "93b387fe70174d174b840016da8531ef65ec313e"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9691848475,
      "node_id": "HRFPE_lADOABII585gVg4_zwAAAAJBrd8b",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9691848475",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-30T20:53:27Z"
    },
    {
      "event": "commented",
      "id": 1615192850,
      "node_id": "IC_kwDOABII585gReMS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1615192850",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-30T21:02:00Z",
      "updated_at": "2023-06-30T21:02:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated the tests with @luke-jr's review feedback (thanks!)\r\n\r\n<details><summary>git diff 08a367c 93b387f</summary><p>\r\n\r\n```diff\r\n--- a/src/test/logging_tests.cpp\r\n+++ b/src/test/logging_tests.cpp\r\n@@ -262,11 +262,11 @@ BOOST_FIXTURE_TEST_CASE(logging_Conf, LogSetup)\r\n \r\n BOOST_FIXTURE_TEST_CASE(logging_IsNoneCategory, LogSetup)\r\n {\r\n-    for (const std::string& s : {\"none\", \"0\"}) {\r\n-        BOOST_CHECK(LogInstance().IsNoneCategory(s));\r\n+    for (const char* const& c : {\"none\", \"0\"}) {\r\n+        BOOST_CHECK(LogInstance().IsNoneCategory(c));\r\n     }\r\n-    for (const std::string& s : {\"\", \"NONE\", \"net\", \"all\", \"1\"}) {\r\n-        BOOST_CHECK(!LogInstance().IsNoneCategory(s));\r\n+    for (const char* const& c : {\"\", \"NONE\", \"net\", \"all\", \"1\"}) {\r\n+        BOOST_CHECK(!LogInstance().IsNoneCategory(c));\r\n     }\r\n }\r\n \r\ndiff --git a/test/functional/feature_logging.py b/test/functional/feature_logging.py\r\nindex 7958a743853..8448eff4a43 100755\r\n--- a/test/functional/feature_logging.py\r\n+++ b/test/functional/feature_logging.py\r\n@@ -34,8 +34,9 @@ class LoggingTest(BitcoinTestFramework):\r\n         ])\r\n         assert os.path.isfile(self.relative_log_path(\"foo.log\"))\r\n         # In addition to net and tor, leveldb/libevent/rand are excluded by the test framework.\r\n+        result = node.logging()\r\n         for category in [\"leveldb\", \"libevent\", \"net\", \"rand\", \"tor\"]:\r\n-            assert not node.logging()[category]\r\n+            assert not result[category]\r\n \r\n         self.log.info(\"Test alternative log file name outside datadir and -debugexclude={none,qt}\")\r\n         tempname = os.path.join(self.options.tmpdir, \"foo.log\")\r\n@@ -45,7 +46,10 @@ class LoggingTest(BitcoinTestFramework):\r\n             \"-debugexclude=qt\",\r\n         ])\r\n         assert os.path.isfile(tempname)\r\n-        assert all(v == True for v in node.logging().values())  # -debugexclude=[none,qt] does not exclude qt\r\n+        # Expect the \"none\" value passed in -debugexclude=[none,qt] to mean that\r\n+        # none of the categories passed with -debugexclude are excluded: neither\r\n+        # qt passed here nor leveldb/libevent/rand passed by the test framework.\r\n+        assert all(v == True for v in node.logging().values())\r\n \r\n         self.log.info(\"Test -debugexclude=1/all excludes all categories\")\r\n```\r\n</p></details>\r\n",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#issuecomment-1615192850",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27231"
    },
    {
      "event": "mentioned",
      "id": 9691900460,
      "node_id": "MEE_lADOABII585gVg4_zwAAAAJBrqos",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9691900460",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-30T21:02:00Z"
    },
    {
      "event": "subscribed",
      "id": 9691900468,
      "node_id": "SE_lADOABII585gVg4_zwAAAAJBrqo0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9691900468",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-30T21:02:00Z"
    },
    {
      "event": "review_requested",
      "id": 9802113952,
      "node_id": "RRE_lADOABII585gVg4_zwAAAAJIQGOg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9802113952",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-12T17:18:06Z",
      "requested_reviewer": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 9802114063,
      "node_id": "RRE_lADOABII585gVg4_zwAAAAJIQGQP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9802114063",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-12T17:18:07Z",
      "requested_reviewer": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 9802114393,
      "node_id": "RRE_lADOABII585gVg4_zwAAAAJIQGVZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9802114393",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-12T17:18:09Z",
      "requested_reviewer": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 9802114680,
      "node_id": "RRE_lADOABII585gVg4_zwAAAAJIQGZ4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9802114680",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-12T17:18:11Z",
      "requested_reviewer": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "reviewed",
      "id": 1539612095,
      "node_id": "PRR_kwDOABII585bxJ2_",
      "url": null,
      "actor": null,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "re-ACK 93b387fe70174d174b840016da8531ef65ec313e\r\n\r\nConfirmed changes were compiler warning fix, better test comment, and very nice clean-up in common.cpp. Built branch and ran tests locally.\r\n\r\n<details><summary>Show Signature</summary>\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA256\r\n\r\nACK 93b387fe70174d174b840016da8531ef65ec313e\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQIzBAEBCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmS5WPgACgkQ5+KYS2KJ\r\nyTp7mxAAwSLI2Fqz8+sRsHF7c/wzERlqZm7Ma8tg9ob0yyvD7Q0t89rCtcDSKL9c\r\ndO2l5DcHotexApg26sp3gfRlQCB7Pv24aCyHeCYl336AcXL57YHbbDu9f/Ct3PRE\r\n+3QoK9b4BiJ2D3db77gJGgmq9QhrnCmCk41bRA5VIyAi3scy4y9lzisRjRswIDji\r\nPnbSJR2qZVO9iDux5Ia7KSHsLxjjC7KhhbhQdDq0LzyK0tQvnyC6+2S8yZVDhxv4\r\n+XyUgsU+YBv49eYPrHid6MVjH58QBBjwBfLGccnqI/ZPb5nogmfFjokj4W8/QRiy\r\nW5nMrCPZYXwRspSn+XbX3Ivzez9mw51Zj3CvQ0tABgMFOTx1ZUESEYwk1SgxjTyV\r\np2jFMinQVBYeH77IygL2AWeHoha1FCr4zlaLRDBd08MYVccMK+xEL4XGbsNOYWen\r\nmQlBbpPB49YcB2Vs+ZAlHVX4Bp5TKpfVSPEttAyJrn2nXXGPde2gbB3gOIabLK8U\r\n1fAEeG8JZW5Qs4Hl46B51SdpdCe64WkY2lKTWwNZjpmL5YM0ufbPfPscfnpd3Myg\r\nbJfj+6P1N9UhizVYN+Bzm/zDKS/S6zv4DvV8FF13HhGVtlQ+BhGmRa1qr6xSilu8\r\nhxJTLm6bs+2a2/dFQVuhgMMz3Uwt/6tZsIkyX5AgmouDGSkGbTQ=\r\n=kvhB\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\npinheadmz's public key is [on keybase](https://keybase.io/pinheadmz/pgp_keys.asc?fingerprint=e61773cd6e01040e2f1bd78ce7e2984b6289c93a)\r\n</details>\r\n",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#pullrequestreview-1539612095",
      "submitted_at": "2023-07-20T15:58:03Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1130705346",
      "pull_request_review_id": 1332329362,
      "id": 1130705346,
      "node_id": "PRRC_kwDOABII585DZTHC",
      "diff_hunk": "@@ -208,30 +208,25 @@ static RPCHelpMan getmemoryinfo()\n     };\n }\n \n-static void EnableOrDisableLogCategories(UniValue cats, bool enable) {\n-    cats = cats.get_array();\n-    for (unsigned int i = 0; i < cats.size(); ++i) {\n-        std::string cat = cats[i].get_str();\n-\n-        bool success;\n-        if (enable) {\n-            success = LogInstance().EnableCategory(cat);\n-        } else {\n-            success = LogInstance().DisableCategory(cat);\n-        }\n-\n-        if (!success) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"unknown logging category \" + cat);\n-        }\n+static void EnableOrDisableLogCategories(UniValue categories, bool enable) {\n+    categories = categories.get_array();\n+    for (size_t i = 0; i < categories.size(); ++i) {\n+        const std::string c{categories[i].get_str()};",
      "path": "src/rpc/node.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "a5f8a7abd980933d4c72c3297ef713b8c5bf3d64",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    for (const auto& c:categories.get_array().getValues()) {\r\n        const std::string& c{c.get_str()};\r\n```\r\n\r\nno need to create three copies of the same thing",
      "created_at": "2023-03-09T09:23:27Z",
      "updated_at": "2023-03-09T09:23:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1130705346",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1130705346"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": 212,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1131465027",
      "pull_request_review_id": 1333541937,
      "id": 1131465027,
      "node_id": "PRRC_kwDOABII585DcMlD",
      "diff_hunk": "@@ -208,30 +208,25 @@ static RPCHelpMan getmemoryinfo()\n     };\n }\n \n-static void EnableOrDisableLogCategories(UniValue cats, bool enable) {\n-    cats = cats.get_array();\n-    for (unsigned int i = 0; i < cats.size(); ++i) {\n-        std::string cat = cats[i].get_str();\n-\n-        bool success;\n-        if (enable) {\n-            success = LogInstance().EnableCategory(cat);\n-        } else {\n-            success = LogInstance().DisableCategory(cat);\n-        }\n-\n-        if (!success) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"unknown logging category \" + cat);\n-        }\n+static void EnableOrDisableLogCategories(UniValue categories, bool enable) {\n+    categories = categories.get_array();\n+    for (size_t i = 0; i < categories.size(); ++i) {\n+        const std::string c{categories[i].get_str()};",
      "path": "src/rpc/node.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "a5f8a7abd980933d4c72c3297ef713b8c5bf3d64",
      "in_reply_to_id": 1130705346,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks @MarcoFalke, done as follows.\r\n\r\n```cpp\r\nstatic void EnableOrDisableLogCategories(const UniValue& categories, bool enable)\r\n{\r\n    const std::vector<UniValue>& category_values{categories.get_array().getValues()};\r\n    for (const auto& category : category_values) {\r\n        const std::string& c{category.get_str()};\r\n        if (c == \"0\" || c == \"none\") return; // no-op if one of these logging categories is passed\r\n    }\r\n    for (const auto& category : category_values) {\r\n        const std::string& c{category.get_str()};\r\n        const bool success{enable ? LogInstance().EnableCategory(c) : LogInstance().DisableCategory(c)};\r\n        if (!success) throw JSONRPCError(RPC_INVALID_PARAMETER, \"Unknown logging category: \" + c);\r\n     }\r\n }\r\n```\r\n\r\nThe following also works, if reviewers prefer that (seems a little more complex, not sure it's worth it).\r\n\r\n```cpp\r\nstatic void EnableOrDisableLogCategories(const UniValue& categories, bool enable)\r\n{\r\n    std::vector<std::string> cats;\r\n    cats.reserve(categories.size());\r\n    for (const auto& c : categories.get_array().getValues()) {\r\n        cats.emplace_back(c.get_str());\r\n    }\r\n    if (std::any_of(cats.cbegin(), cats.cend(), [](const auto& c) { return c == \"0\" || c == \"none\"; })) return;\r\n    for (const auto& c : cats) {\r\n        const bool success{enable ? LogInstance().EnableCategory(c) : LogInstance().DisableCategory(c)};\r\n        if (!success) throw JSONRPCError(RPC_INVALID_PARAMETER, \"Unknown logging category: \" + c);\r\n     }\r\n }\r\n```\r\n",
      "created_at": "2023-03-09T18:57:04Z",
      "updated_at": "2023-03-09T18:57:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1131465027",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1131465027"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": 212,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1131469401",
      "pull_request_review_id": 1333552338,
      "id": 1131469401,
      "node_id": "PRRC_kwDOABII585DcNpZ",
      "diff_hunk": "@@ -208,30 +208,25 @@ static RPCHelpMan getmemoryinfo()\n     };\n }\n \n-static void EnableOrDisableLogCategories(UniValue cats, bool enable) {\n-    cats = cats.get_array();\n-    for (unsigned int i = 0; i < cats.size(); ++i) {\n-        std::string cat = cats[i].get_str();\n-\n-        bool success;\n-        if (enable) {\n-            success = LogInstance().EnableCategory(cat);\n-        } else {\n-            success = LogInstance().DisableCategory(cat);\n-        }\n-\n-        if (!success) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"unknown logging category \" + cat);\n-        }\n+static void EnableOrDisableLogCategories(UniValue categories, bool enable) {\n+    categories = categories.get_array();\n+    for (size_t i = 0; i < categories.size(); ++i) {\n+        const std::string c{categories[i].get_str()};",
      "path": "src/rpc/node.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "a5f8a7abd980933d4c72c3297ef713b8c5bf3d64",
      "in_reply_to_id": 1130705346,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(Noting that this logic is similar to that in `SetLoggingCategories()` in `src/init/common.cpp`).",
      "created_at": "2023-03-09T19:01:01Z",
      "updated_at": "2023-03-09T19:01:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1131469401",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1131469401"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": 212,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1132214754",
      "pull_request_review_id": 1334558916,
      "id": 1132214754,
      "node_id": "PRRC_kwDOABII585DfDni",
      "diff_hunk": "@@ -208,30 +208,25 @@ static RPCHelpMan getmemoryinfo()\n     };\n }\n \n-static void EnableOrDisableLogCategories(UniValue cats, bool enable) {\n-    cats = cats.get_array();\n-    for (unsigned int i = 0; i < cats.size(); ++i) {\n-        std::string cat = cats[i].get_str();\n-\n-        bool success;\n-        if (enable) {\n-            success = LogInstance().EnableCategory(cat);\n-        } else {\n-            success = LogInstance().DisableCategory(cat);\n-        }\n-\n-        if (!success) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"unknown logging category \" + cat);\n-        }\n+static void EnableOrDisableLogCategories(UniValue categories, bool enable) {",
      "path": "src/rpc/node.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "a5f8a7abd980933d4c72c3297ef713b8c5bf3d64",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nstatic void EnableOrDisableLogCategories(const UniValue& categories, bool enable)\r\n{\r\n```\r\n\r\nnit: While touching this, can avoid the forth copy of the same thing here as well :)",
      "created_at": "2023-03-10T10:38:45Z",
      "updated_at": "2023-03-10T10:38:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1132214754",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1132214754"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1132759246",
      "pull_request_review_id": 1335440051,
      "id": 1132759246,
      "node_id": "PRRC_kwDOABII585DhIjO",
      "diff_hunk": "@@ -208,30 +208,25 @@ static RPCHelpMan getmemoryinfo()\n     };\n }\n \n-static void EnableOrDisableLogCategories(UniValue cats, bool enable) {\n-    cats = cats.get_array();\n-    for (unsigned int i = 0; i < cats.size(); ++i) {\n-        std::string cat = cats[i].get_str();\n-\n-        bool success;\n-        if (enable) {\n-            success = LogInstance().EnableCategory(cat);\n-        } else {\n-            success = LogInstance().DisableCategory(cat);\n-        }\n-\n-        if (!success) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"unknown logging category \" + cat);\n-        }\n+static void EnableOrDisableLogCategories(UniValue categories, bool enable) {",
      "path": "src/rpc/node.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "a5f8a7abd980933d4c72c3297ef713b8c5bf3d64",
      "in_reply_to_id": 1132214754,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yep :) done as in https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1131465027",
      "created_at": "2023-03-10T18:49:21Z",
      "updated_at": "2023-03-10T18:49:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1132759246",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1132759246"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1158916354",
      "pull_request_review_id": 1373532023,
      "id": 1158916354,
      "node_id": "PRRC_kwDOABII585FE6kC",
      "diff_hunk": "@@ -78,27 +79,24 @@ void SetLoggingLevel(const ArgsManager& args)\n     }\n }\n \n-void SetLoggingCategories(const ArgsManager& args)\n+static constexpr std::array DEBUG_LOG_OPTS{\"-debug\", \"-debugexclude\"};\n+\n+static void EnableOrDisableLogCategories(const ArgsManager& args, const std::string& opt)\n {\n-    if (args.IsArgSet(\"-debug\")) {\n-        // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n-        const std::vector<std::string> categories = args.GetArgs(\"-debug\");\n-\n-        if (std::none_of(categories.begin(), categories.end(),\n-            [](std::string cat){return cat == \"0\" || cat == \"none\";})) {\n-            for (const auto& cat : categories) {\n-                if (!LogInstance().EnableCategory(cat)) {\n-                    InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debug\", cat));\n-                }\n-            }\n-        }\n+    Assume(std::any_of(DEBUG_LOG_OPTS.cbegin(), DEBUG_LOG_OPTS.cend(), [&](const auto& d) { return opt == d; }));\n+    if (!args.IsArgSet(opt)) return;\n+    const std::vector<std::string>& categories{args.GetArgs(opt)};\n+    if (std::any_of(categories.cbegin(), categories.cend(), [](const auto& c) { return LogInstance().IsNoneCategory(c); })) return;\n+    for (const auto& c : categories) {\n+        const bool success{opt == DEBUG_LOG_OPTS[0] ? LogInstance().EnableCategory(c) : LogInstance().DisableCategory(c)};",
      "path": "src/init/common.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "f868de5293e99b8619225d2e3b93417e080888aa",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`DEBUG_LOG_OPTS[0] `\r\n\r\nFeels like this is undoing whatever convenience/readability you set up by defining `DEBUG_LOG_OPTS` in the first place. Do you think more debug args will be added in the future? Or can we just use\r\n\r\n`args.IsArgSet(\"-debug\") || args.IsArgSet(\"-debugexclude\")` ... etc",
      "created_at": "2023-04-05T19:13:30Z",
      "updated_at": "2023-04-05T19:30:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1158916354",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1158916354"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1158920648",
      "pull_request_review_id": 1373532023,
      "id": 1158920648,
      "node_id": "PRRC_kwDOABII585FE7nI",
      "diff_hunk": "@@ -26,10 +26,10 @@ namespace init {\n void AddLoggingArgs(ArgsManager& argsman)\n {\n     argsman.AddArg(\"-debuglogfile=<file>\", strprintf(\"Specify location of debug log file (default: %s). Relative paths will be prefixed by a net-specific datadir location. Pass -nodebuglogfile to disable writing the log to a file.\", DEFAULT_DEBUGLOGFILE), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-debug=<category>\", \"Output debug and trace logging (default: -nodebug, supplying <category> is optional). \"\n-        \"If <category> is not supplied or if <category> = 1, output all debug and trace logging. <category> can be: \" + LogInstance().LogCategoriesString() + \". This option can be specified multiple times to output multiple categories.\",\n+    argsman.AddArg(\"-debug=<category>\", \"Output debug and trace logging (default: 0). \"\n+        \"If <category> is omitted, or is 1 or all, output all debug and trace logging. If <category> is 0 or none, any other categories passed are ignored. Other valid values for <category> are: \" + LogInstance().LogCategoriesString() + \". This option can be specified multiple times to output multiple categories. See also the -debugexclude configuration option that takes priority over -debug.\",\n         ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n-    argsman.AddArg(\"-debugexclude=<category>\", \"Exclude debug and trace logging for a category. Can be used in conjunction with -debug=1 to output debug and trace logging for all categories except the specified category. This option can be specified multiple times to exclude multiple categories.\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-debugexclude=<category>\", \"Exclude debug and trace logging for a category (default: 1). Takes priority over -debug and can be used in conjunction with -debug=1 to output debug and trace logging for all categories except the specified category. If <category> is 1 or all, exclude all debug and trace logging. If <category> is 0 or none, any other categories passed are ignored. Other valid values for <category> are: \" + LogInstance().LogCategoriesString() + \". This option can be specified multiple times to exclude multiple categories.\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);",
      "path": "src/init/common.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "fba713a172ff574563b03e9765894c59db807093",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Recommend putting \"all\" and \"none\" in quotes to be super-duper explicit",
      "created_at": "2023-04-05T19:18:35Z",
      "updated_at": "2023-04-05T19:30:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1158920648",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1158920648"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": 30,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1158922586",
      "pull_request_review_id": 1373532023,
      "id": 1158922586,
      "node_id": "PRRC_kwDOABII585FE8Fa",
      "diff_hunk": "@@ -225,7 +224,7 @@ std::string LogCategoryToStr(BCLog::LogFlags category)\n     // Each log category string representation should sync with LogCategories\n     switch (category) {\n     case BCLog::LogFlags::NONE:\n-        return \"\";\n+        return \"0\";",
      "path": "src/logging.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "a1abce1650ec4ab53a070f5f05d675b64197b28a",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why `0` and not `\"none\"`? \r\n\r\nLike this one:\r\n\r\n```cpp\r\n\r\n    case BCLog::LogFlags::ALL:\r\n        return \"all\";\r\n```",
      "created_at": "2023-04-05T19:20:58Z",
      "updated_at": "2023-04-05T19:30:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1158922586",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1158922586"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1158922726",
      "pull_request_review_id": 1373532023,
      "id": 1158922726,
      "node_id": "PRRC_kwDOABII585FE8Hm",
      "diff_hunk": "@@ -150,7 +150,6 @@ struct CLogCategoryDesc {\n const CLogCategoryDesc LogCategories[] =\n {\n     {BCLog::NONE, \"0\"},\n-    {BCLog::NONE, \"\"},",
      "path": "src/logging.cpp",
      "position": 5,
      "original_position": 4,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "a1abce1650ec4ab53a070f5f05d675b64197b28a",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "not going to add `\"none\"` here?",
      "created_at": "2023-04-05T19:21:09Z",
      "updated_at": "2023-04-05T19:30:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1158922726",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1158922726"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 153,
      "original_line": 153,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1158925769",
      "pull_request_review_id": 1373532023,
      "id": 1158925769,
      "node_id": "PRRC_kwDOABII585FE83J",
      "diff_hunk": "@@ -238,22 +238,31 @@ static RPCHelpMan logging()\n                 {\n                     {\"include\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The categories to add to debug logging\",\n                         {\n-                            {\"include_category\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"the valid logging category\"},\n+                            {\"include_category\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"a valid logging category\"},\n                         }},\n                     {\"exclude\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The categories to remove from debug logging\",\n                         {\n-                            {\"exclude_category\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"the valid logging category\"},\n+                            {\"exclude_category\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"a valid logging category\"},\n                         }},\n                 },\n                 RPCResult{\n-                    RPCResult::Type::OBJ_DYN, \"\", \"keys are the logging categories, and values indicates its status\",\n+                    RPCResult::Type::OBJ_DYN, \"\", \"keys are the logging categories and values indicate their status\",\n                     {\n-                        {RPCResult::Type::BOOL, \"category\", \"if being debug logged or not. false:inactive, true:active\"},\n+                        {RPCResult::Type::BOOL, \"category\", \"whether debug logging is active for the category\"},\n                     }\n                 },\n                 RPCExamples{\n-                    HelpExampleCli(\"logging\", \"\\\"[\\\\\\\"all\\\\\\\"]\\\" \\\"[\\\\\\\"http\\\\\\\"]\\\"\")\n-            + HelpExampleRpc(\"logging\", \"[\\\"all\\\"], [\\\"libevent\\\"]\")\n+                   \"\\nTurn on tor and i2p logging categories\\n\"\n+                   + HelpExampleCli(\"logging\", \"'[\\\"tor\\\", \\\"i2p\\\"]'\")\n+                   + HelpExampleCli(\"-named logging\", \"include='[\\\"tor\\\", \\\"i2p\\\"]'\")\n+                   + \"\\nTurn on all logging categories, except http\\n\"\n+                   + HelpExampleCli(\"logging\", \"'[\\\"all\\\"]' '[\\\"http\\\"]'\")\n+                   + HelpExampleCli(\"-named logging\", \"include='[\\\"all\\\"]' exclude='[\\\"http\\\"]'\")\n+                   + \"\\nTurn off all logging categories\\n\"\n+                   + HelpExampleCli(\"logging\", \"'[]' '[\\\"all\\\"]'\")\n+                   + HelpExampleCli(\"-named logging\", \"exclude='[\\\"all\\\"]'\")\n+                   + \"\\nTurn on all logging categories, except libevent\\n\"\n+                   + HelpExampleRpc(\"logging\", \"[\\\"all\\\"], [\\\"libevent\\\"]\")",
      "path": "src/rpc/node.cpp",
      "position": 89,
      "original_position": 47,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "22e77cc5f70360408a508f1b43f37c75b2eff9e1",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "GREAT",
      "created_at": "2023-04-05T19:24:14Z",
      "updated_at": "2023-04-05T19:30:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1158925769",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1158925769"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": 254,
      "original_start_line": 255,
      "start_side": "RIGHT",
      "line": 264,
      "original_line": 264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1163319014",
      "pull_request_review_id": 1380069869,
      "id": 1163319014,
      "node_id": "PRRC_kwDOABII585FVtbm",
      "diff_hunk": "@@ -150,7 +150,6 @@ struct CLogCategoryDesc {\n const CLogCategoryDesc LogCategories[] =\n {\n     {BCLog::NONE, \"0\"},\n-    {BCLog::NONE, \"\"},",
      "path": "src/logging.cpp",
      "position": 5,
      "original_position": 4,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "a1abce1650ec4ab53a070f5f05d675b64197b28a",
      "in_reply_to_id": 1158922726,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Looking again (thanks!), both of these `NONE` entries can be dropped.  Updated to add prior test coverage to spec affected behavior, then removed them.",
      "created_at": "2023-04-11T20:52:14Z",
      "updated_at": "2023-04-11T20:52:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1163319014",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1163319014"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 153,
      "original_line": 153,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1163319182",
      "pull_request_review_id": 1380070034,
      "id": 1163319182,
      "node_id": "PRRC_kwDOABII585FVteO",
      "diff_hunk": "@@ -225,7 +224,7 @@ std::string LogCategoryToStr(BCLog::LogFlags category)\n     // Each log category string representation should sync with LogCategories\n     switch (category) {\n     case BCLog::LogFlags::NONE:\n-        return \"\";\n+        return \"0\";",
      "path": "src/logging.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "a1abce1650ec4ab53a070f5f05d675b64197b28a",
      "in_reply_to_id": 1158922586,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for making me re-verify.  This case will never be hit and is only present to appease the compiler (`error: enumeration value 'NONE' not handled in switch`), so leaving it as an empty string, added a comment, and moved it to the last case in the switch.",
      "created_at": "2023-04-11T20:52:22Z",
      "updated_at": "2023-04-11T20:52:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1163319182",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1163319182"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1163319415",
      "pull_request_review_id": 1380070229,
      "id": 1163319415,
      "node_id": "PRRC_kwDOABII585FVth3",
      "diff_hunk": "@@ -78,27 +79,24 @@ void SetLoggingLevel(const ArgsManager& args)\n     }\n }\n \n-void SetLoggingCategories(const ArgsManager& args)\n+static constexpr std::array DEBUG_LOG_OPTS{\"-debug\", \"-debugexclude\"};\n+\n+static void EnableOrDisableLogCategories(const ArgsManager& args, const std::string& opt)\n {\n-    if (args.IsArgSet(\"-debug\")) {\n-        // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n-        const std::vector<std::string> categories = args.GetArgs(\"-debug\");\n-\n-        if (std::none_of(categories.begin(), categories.end(),\n-            [](std::string cat){return cat == \"0\" || cat == \"none\";})) {\n-            for (const auto& cat : categories) {\n-                if (!LogInstance().EnableCategory(cat)) {\n-                    InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debug\", cat));\n-                }\n-            }\n-        }\n+    Assume(std::any_of(DEBUG_LOG_OPTS.cbegin(), DEBUG_LOG_OPTS.cend(), [&](const auto& d) { return opt == d; }));\n+    if (!args.IsArgSet(opt)) return;\n+    const std::vector<std::string>& categories{args.GetArgs(opt)};\n+    if (std::any_of(categories.cbegin(), categories.cend(), [](const auto& c) { return LogInstance().IsNoneCategory(c); })) return;\n+    for (const auto& c : categories) {\n+        const bool success{opt == DEBUG_LOG_OPTS[0] ? LogInstance().EnableCategory(c) : LogInstance().DisableCategory(c)};",
      "path": "src/init/common.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "f868de5293e99b8619225d2e3b93417e080888aa",
      "in_reply_to_id": 1158916354,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This commit is to have the same behavior (and code) for the -debug and -debugexclude config options. I'm not sure what your suggestion is, but I'm happy to look at a working example.",
      "created_at": "2023-04-11T20:52:32Z",
      "updated_at": "2023-04-11T20:52:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1163319415",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1163319415"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1163319528",
      "pull_request_review_id": 1380070326,
      "id": 1163319528,
      "node_id": "PRRC_kwDOABII585FVtjo",
      "diff_hunk": "@@ -26,10 +26,10 @@ namespace init {\n void AddLoggingArgs(ArgsManager& argsman)\n {\n     argsman.AddArg(\"-debuglogfile=<file>\", strprintf(\"Specify location of debug log file (default: %s). Relative paths will be prefixed by a net-specific datadir location. Pass -nodebuglogfile to disable writing the log to a file.\", DEFAULT_DEBUGLOGFILE), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-debug=<category>\", \"Output debug and trace logging (default: -nodebug, supplying <category> is optional). \"\n-        \"If <category> is not supplied or if <category> = 1, output all debug and trace logging. <category> can be: \" + LogInstance().LogCategoriesString() + \". This option can be specified multiple times to output multiple categories.\",\n+    argsman.AddArg(\"-debug=<category>\", \"Output debug and trace logging (default: 0). \"\n+        \"If <category> is omitted, or is 1 or all, output all debug and trace logging. If <category> is 0 or none, any other categories passed are ignored. Other valid values for <category> are: \" + LogInstance().LogCategoriesString() + \". This option can be specified multiple times to output multiple categories. See also the -debugexclude configuration option that takes priority over -debug.\",\n         ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n-    argsman.AddArg(\"-debugexclude=<category>\", \"Exclude debug and trace logging for a category. Can be used in conjunction with -debug=1 to output debug and trace logging for all categories except the specified category. This option can be specified multiple times to exclude multiple categories.\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-debugexclude=<category>\", \"Exclude debug and trace logging for a category (default: 1). Takes priority over -debug and can be used in conjunction with -debug=1 to output debug and trace logging for all categories except the specified category. If <category> is 1 or all, exclude all debug and trace logging. If <category> is 0 or none, any other categories passed are ignored. Other valid values for <category> are: \" + LogInstance().LogCategoriesString() + \". This option can be specified multiple times to exclude multiple categories.\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);",
      "path": "src/init/common.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "fba713a172ff574563b03e9765894c59db807093",
      "in_reply_to_id": 1158920648,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I left them without quotes as none of the other category values in the -debug and -debugexclude helps are in quotes. But you may be right that it's nevertheless clearer to add them here. Done.",
      "created_at": "2023-04-11T20:52:37Z",
      "updated_at": "2023-04-11T20:52:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1163319528",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1163319528"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": 30,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1164350707",
      "pull_request_review_id": 1381651815,
      "id": 1164350707,
      "node_id": "PRRC_kwDOABII585FZpTz",
      "diff_hunk": "@@ -78,27 +79,24 @@ void SetLoggingLevel(const ArgsManager& args)\n     }\n }\n \n-void SetLoggingCategories(const ArgsManager& args)\n+static constexpr std::array DEBUG_LOG_OPTS{\"-debug\", \"-debugexclude\"};\n+\n+static void EnableOrDisableLogCategories(const ArgsManager& args, const std::string& opt)\n {\n-    if (args.IsArgSet(\"-debug\")) {\n-        // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n-        const std::vector<std::string> categories = args.GetArgs(\"-debug\");\n-\n-        if (std::none_of(categories.begin(), categories.end(),\n-            [](std::string cat){return cat == \"0\" || cat == \"none\";})) {\n-            for (const auto& cat : categories) {\n-                if (!LogInstance().EnableCategory(cat)) {\n-                    InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debug\", cat));\n-                }\n-            }\n-        }\n+    Assume(std::any_of(DEBUG_LOG_OPTS.cbegin(), DEBUG_LOG_OPTS.cend(), [&](const auto& d) { return opt == d; }));\n+    if (!args.IsArgSet(opt)) return;\n+    const std::vector<std::string>& categories{args.GetArgs(opt)};\n+    if (std::any_of(categories.cbegin(), categories.cend(), [](const auto& c) { return LogInstance().IsNoneCategory(c); })) return;\n+    for (const auto& c : categories) {\n+        const bool success{opt == DEBUG_LOG_OPTS[0] ? LogInstance().EnableCategory(c) : LogInstance().DisableCategory(c)};",
      "path": "src/init/common.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "f868de5293e99b8619225d2e3b93417e080888aa",
      "in_reply_to_id": 1158916354,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Well I meant something like a switch statement with `\"-debug\"` and `\"-debugexclude\"` literal strings as cases. I think that would make it more readable and if anything is ever added to `DEBUG_LOG_OPTS[]` it won't necessarily break. But that might just be too long or out of style",
      "created_at": "2023-04-12T16:07:27Z",
      "updated_at": "2023-04-12T16:07:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1164350707",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1164350707"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1164360080",
      "pull_request_review_id": 1381665894,
      "id": 1164360080,
      "node_id": "PRRC_kwDOABII585FZrmQ",
      "diff_hunk": "@@ -225,7 +224,7 @@ std::string LogCategoryToStr(BCLog::LogFlags category)\n     // Each log category string representation should sync with LogCategories\n     switch (category) {\n     case BCLog::LogFlags::NONE:\n-        return \"\";\n+        return \"0\";",
      "path": "src/logging.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "a1abce1650ec4ab53a070f5f05d675b64197b28a",
      "in_reply_to_id": 1158922586,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah I see, these cases are essentially handled by `IsNoneCategory()` 👍 ",
      "created_at": "2023-04-12T16:15:57Z",
      "updated_at": "2023-04-12T16:15:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1164360080",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1164360080"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1164470470",
      "pull_request_review_id": 1381837068,
      "id": 1164470470,
      "node_id": "PRRC_kwDOABII585FaGjG",
      "diff_hunk": "@@ -78,27 +77,26 @@ void SetLoggingLevel(const ArgsManager& args)\n     }\n }\n \n-void SetLoggingCategories(const ArgsManager& args)\n+// We run each of these configuration options through SetLoggingCategories. The order matters;\n+// -debugexclude settings take priority over -debug ones, so -debugexclude is run after -debug.\n+static constexpr std::array DEBUG_LOG_OPTS{\"-debug\", \"-debugexclude\"};\n+\n+static void EnableOrDisableLogCategories(const ArgsManager& args, const std::string& opt)\n {\n-    if (args.IsArgSet(\"-debug\")) {\n-        // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n-        const std::vector<std::string> categories = args.GetArgs(\"-debug\");\n-\n-        if (std::none_of(categories.begin(), categories.end(),\n-            [](std::string cat){return cat == \"0\" || cat == \"none\";})) {\n-            for (const auto& cat : categories) {\n-                if (!LogInstance().EnableCategory(cat)) {\n-                    InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debug\", cat));\n-                }\n-            }\n-        }\n+    if (!args.IsArgSet(opt)) return;\n+    Assume(std::any_of(DEBUG_LOG_OPTS.cbegin(), DEBUG_LOG_OPTS.cend(), [&](const auto& d) { return opt == d; }));\n+    const std::vector<std::string>& categories{args.GetArgs(opt)};\n+    if (std::any_of(categories.cbegin(), categories.cend(), [](const auto& c) { return LogInstance().IsNoneCategory(c); })) return;\n+    for (const auto& c : categories) {\n+        const bool success{opt == DEBUG_LOG_OPTS[0] ? LogInstance().EnableCategory(c) : LogInstance().DisableCategory(c)};\n+        if (!success) InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), opt, c));\n     }\n+}\n \n-    // Now remove the logging categories which were explicitly excluded\n-    for (const std::string& cat : args.GetArgs(\"-debugexclude\")) {\n-        if (!LogInstance().DisableCategory(cat)) {\n-            InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debugexclude\", cat));\n-        }\n+void SetLoggingCategories(const ArgsManager& args)\n+{\n+    for (const std::string& opt : DEBUG_LOG_OPTS) {\n+        EnableOrDisableLogCategories(args, opt);",
      "path": "src/init/common.cpp",
      "position": null,
      "original_position": 62,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "e9f6fd0e028e6a5669926926792c70c31a26c403",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could you combine this into one function? You have another method called `EnableOrDisableLogCategories()` in `node.cpp` which might be confusing. And unlike in `node.cpp`, I don't think the `common.cpp` method is called anywhere else besides `SetLoggingCategories()`",
      "created_at": "2023-04-12T17:58:53Z",
      "updated_at": "2023-04-12T18:25:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1164470470",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1164470470"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": 96,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1164530898",
      "pull_request_review_id": 1381931446,
      "id": 1164530898,
      "node_id": "PRRC_kwDOABII585FaVTS",
      "diff_hunk": "@@ -78,27 +77,26 @@ void SetLoggingLevel(const ArgsManager& args)\n     }\n }\n \n-void SetLoggingCategories(const ArgsManager& args)\n+// We run each of these configuration options through SetLoggingCategories. The order matters;\n+// -debugexclude settings take priority over -debug ones, so -debugexclude is run after -debug.\n+static constexpr std::array DEBUG_LOG_OPTS{\"-debug\", \"-debugexclude\"};\n+\n+static void EnableOrDisableLogCategories(const ArgsManager& args, const std::string& opt)\n {\n-    if (args.IsArgSet(\"-debug\")) {\n-        // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n-        const std::vector<std::string> categories = args.GetArgs(\"-debug\");\n-\n-        if (std::none_of(categories.begin(), categories.end(),\n-            [](std::string cat){return cat == \"0\" || cat == \"none\";})) {\n-            for (const auto& cat : categories) {\n-                if (!LogInstance().EnableCategory(cat)) {\n-                    InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debug\", cat));\n-                }\n-            }\n-        }\n+    if (!args.IsArgSet(opt)) return;\n+    Assume(std::any_of(DEBUG_LOG_OPTS.cbegin(), DEBUG_LOG_OPTS.cend(), [&](const auto& d) { return opt == d; }));\n+    const std::vector<std::string>& categories{args.GetArgs(opt)};\n+    if (std::any_of(categories.cbegin(), categories.cend(), [](const auto& c) { return LogInstance().IsNoneCategory(c); })) return;\n+    for (const auto& c : categories) {\n+        const bool success{opt == DEBUG_LOG_OPTS[0] ? LogInstance().EnableCategory(c) : LogInstance().DisableCategory(c)};\n+        if (!success) InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), opt, c));\n     }\n+}\n \n-    // Now remove the logging categories which were explicitly excluded\n-    for (const std::string& cat : args.GetArgs(\"-debugexclude\")) {\n-        if (!LogInstance().DisableCategory(cat)) {\n-            InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debugexclude\", cat));\n-        }\n+void SetLoggingCategories(const ArgsManager& args)\n+{\n+    for (const std::string& opt : DEBUG_LOG_OPTS) {\n+        EnableOrDisableLogCategories(args, opt);",
      "path": "src/init/common.cpp",
      "position": null,
      "original_position": 62,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "e9f6fd0e028e6a5669926926792c70c31a26c403",
      "in_reply_to_id": 1164470470,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good question. Both of the `EnableOrDisableLogCategories()` functions are created in this PR. They are doing pretty much the same thing, but are not trivially combinable into one function. If one is changed, it's likely that both should be (maybe a comment to that effect should be added to them -- *Edit: done*).  I therefore wanted both to be standalone functions with the same name in order that searching/git grepping returns both. *(Edit: updated this sentence to clarify.)*\r\n\r\nThat, along with how extracting that function simplifies `SetLoggingCategories` to highlight that both options are being plugged into the same code, were the motivations.\r\n",
      "created_at": "2023-04-12T19:01:00Z",
      "updated_at": "2023-04-13T18:14:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1164530898",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1164530898"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": 96,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1164533054",
      "pull_request_review_id": 1381934777,
      "id": 1164533054,
      "node_id": "PRRC_kwDOABII585FaV0-",
      "diff_hunk": "@@ -78,27 +77,26 @@ void SetLoggingLevel(const ArgsManager& args)\n     }\n }\n \n-void SetLoggingCategories(const ArgsManager& args)\n+// We run each of these configuration options through SetLoggingCategories. The order matters;\n+// -debugexclude settings take priority over -debug ones, so -debugexclude is run after -debug.\n+static constexpr std::array DEBUG_LOG_OPTS{\"-debug\", \"-debugexclude\"};\n+\n+static void EnableOrDisableLogCategories(const ArgsManager& args, const std::string& opt)\n {\n-    if (args.IsArgSet(\"-debug\")) {\n-        // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n-        const std::vector<std::string> categories = args.GetArgs(\"-debug\");\n-\n-        if (std::none_of(categories.begin(), categories.end(),\n-            [](std::string cat){return cat == \"0\" || cat == \"none\";})) {\n-            for (const auto& cat : categories) {\n-                if (!LogInstance().EnableCategory(cat)) {\n-                    InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debug\", cat));\n-                }\n-            }\n-        }\n+    if (!args.IsArgSet(opt)) return;\n+    Assume(std::any_of(DEBUG_LOG_OPTS.cbegin(), DEBUG_LOG_OPTS.cend(), [&](const auto& d) { return opt == d; }));\n+    const std::vector<std::string>& categories{args.GetArgs(opt)};\n+    if (std::any_of(categories.cbegin(), categories.cend(), [](const auto& c) { return LogInstance().IsNoneCategory(c); })) return;\n+    for (const auto& c : categories) {\n+        const bool success{opt == DEBUG_LOG_OPTS[0] ? LogInstance().EnableCategory(c) : LogInstance().DisableCategory(c)};\n+        if (!success) InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), opt, c));\n     }\n+}\n \n-    // Now remove the logging categories which were explicitly excluded\n-    for (const std::string& cat : args.GetArgs(\"-debugexclude\")) {\n-        if (!LogInstance().DisableCategory(cat)) {\n-            InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debugexclude\", cat));\n-        }\n+void SetLoggingCategories(const ArgsManager& args)\n+{\n+    for (const std::string& opt : DEBUG_LOG_OPTS) {\n+        EnableOrDisableLogCategories(args, opt);",
      "path": "src/init/common.cpp",
      "position": null,
      "original_position": 62,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "e9f6fd0e028e6a5669926926792c70c31a26c403",
      "in_reply_to_id": 1164470470,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Cool, just to be clear I meant combining this `EnableOrDisableLogCategories()` into ` SetLoggingCategories()`  and then you only have one named `EnableOrDisableLogCategories()` in the code over in node.cpp\r\n\r\n> That, along with how extracting that function simplifies SetLoggingCategories to highlight that both options are being plugged into the same code, were the motivations.\r\n\r\nokie doke 👍 ",
      "created_at": "2023-04-12T19:03:20Z",
      "updated_at": "2023-04-12T19:03:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1164533054",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1164533054"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": 96,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1164585860",
      "pull_request_review_id": 1382031652,
      "id": 1164585860,
      "node_id": "PRRC_kwDOABII585FaiuE",
      "diff_hunk": "@@ -78,27 +79,24 @@ void SetLoggingLevel(const ArgsManager& args)\n     }\n }\n \n-void SetLoggingCategories(const ArgsManager& args)\n+static constexpr std::array DEBUG_LOG_OPTS{\"-debug\", \"-debugexclude\"};\n+\n+static void EnableOrDisableLogCategories(const ArgsManager& args, const std::string& opt)\n {\n-    if (args.IsArgSet(\"-debug\")) {\n-        // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n-        const std::vector<std::string> categories = args.GetArgs(\"-debug\");\n-\n-        if (std::none_of(categories.begin(), categories.end(),\n-            [](std::string cat){return cat == \"0\" || cat == \"none\";})) {\n-            for (const auto& cat : categories) {\n-                if (!LogInstance().EnableCategory(cat)) {\n-                    InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debug\", cat));\n-                }\n-            }\n-        }\n+    Assume(std::any_of(DEBUG_LOG_OPTS.cbegin(), DEBUG_LOG_OPTS.cend(), [&](const auto& d) { return opt == d; }));\n+    if (!args.IsArgSet(opt)) return;\n+    const std::vector<std::string>& categories{args.GetArgs(opt)};\n+    if (std::any_of(categories.cbegin(), categories.cend(), [](const auto& c) { return LogInstance().IsNoneCategory(c); })) return;\n+    for (const auto& c : categories) {\n+        const bool success{opt == DEBUG_LOG_OPTS[0] ? LogInstance().EnableCategory(c) : LogInstance().DisableCategory(c)};",
      "path": "src/init/common.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "f868de5293e99b8619225d2e3b93417e080888aa",
      "in_reply_to_id": 1158916354,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Well I meant something like a switch statement with `\"-debug\"` and `\"-debugexclude\"` literal strings as cases.\r\n\r\nThe condition in a [switch](https://en.cppreference.com/w/cpp/language/switch) statement must be of integer or enum type, or of a class type implicitly convertible to one.\r\n\r\nBut we can still use conditionals. Do you like this better?\r\n\r\n```diff\r\n static constexpr std::array DEBUG_LOG_OPTS{\"-debug\", \"-debugexclude\"};\r\n \r\n+static bool EnableOrDisable(const std::string& opt, const std::string& category)\r\n+{\r\n+    if (opt == \"-debug\") return LogInstance().EnableCategory(category);\r\n+    if (opt == \"-debugexclude\") return LogInstance().DisableCategory(category);\r\n+    NONFATAL_UNREACHABLE();\r\n+}\r\n+\r\n static void EnableOrDisableLogCategories(const ArgsManager& args, const std::string& opt)\r\n@@ -90,8 +97,7 @@ static void EnableOrDisableLogCategories(const ArgsManager& args, const std::str\r\n     const std::vector<std::string>& categories{args.GetArgs(opt)};\r\n     if (std::any_of(categories.cbegin(), categories.cend(), [](const auto& c) { return LogInstance().IsNoneCategory(c); })) return;\r\n     for (const auto& c : categories) {\r\n-        const bool success{opt == DEBUG_LOG_OPTS[0] ? LogInstance().EnableCategory(c) : LogInstance().DisableCategory(c)};\r\n-        if (!success) InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), opt, c));\r\n+        if (!EnableOrDisable(opt, c)) InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), opt, c));\r\n     }\r\n }\r\n```\r\n",
      "created_at": "2023-04-12T20:01:56Z",
      "updated_at": "2023-04-12T20:43:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1164585860",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1164585860"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1164601290",
      "pull_request_review_id": 1382049186,
      "id": 1164601290,
      "node_id": "PRRC_kwDOABII585FamfK",
      "diff_hunk": "@@ -78,27 +79,24 @@ void SetLoggingLevel(const ArgsManager& args)\n     }\n }\n \n-void SetLoggingCategories(const ArgsManager& args)\n+static constexpr std::array DEBUG_LOG_OPTS{\"-debug\", \"-debugexclude\"};\n+\n+static void EnableOrDisableLogCategories(const ArgsManager& args, const std::string& opt)\n {\n-    if (args.IsArgSet(\"-debug\")) {\n-        // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n-        const std::vector<std::string> categories = args.GetArgs(\"-debug\");\n-\n-        if (std::none_of(categories.begin(), categories.end(),\n-            [](std::string cat){return cat == \"0\" || cat == \"none\";})) {\n-            for (const auto& cat : categories) {\n-                if (!LogInstance().EnableCategory(cat)) {\n-                    InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debug\", cat));\n-                }\n-            }\n-        }\n+    Assume(std::any_of(DEBUG_LOG_OPTS.cbegin(), DEBUG_LOG_OPTS.cend(), [&](const auto& d) { return opt == d; }));\n+    if (!args.IsArgSet(opt)) return;\n+    const std::vector<std::string>& categories{args.GetArgs(opt)};\n+    if (std::any_of(categories.cbegin(), categories.cend(), [](const auto& c) { return LogInstance().IsNoneCategory(c); })) return;\n+    for (const auto& c : categories) {\n+        const bool success{opt == DEBUG_LOG_OPTS[0] ? LogInstance().EnableCategory(c) : LogInstance().DisableCategory(c)};",
      "path": "src/init/common.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "f868de5293e99b8619225d2e3b93417e080888aa",
      "in_reply_to_id": 1158916354,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah 😬 waddaya think?",
      "created_at": "2023-04-12T20:13:02Z",
      "updated_at": "2023-04-12T20:13:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1164601290",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1164601290"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1164606990",
      "pull_request_review_id": 1382055523,
      "id": 1164606990,
      "node_id": "PRRC_kwDOABII585Fan4O",
      "diff_hunk": "@@ -78,27 +79,24 @@ void SetLoggingLevel(const ArgsManager& args)\n     }\n }\n \n-void SetLoggingCategories(const ArgsManager& args)\n+static constexpr std::array DEBUG_LOG_OPTS{\"-debug\", \"-debugexclude\"};\n+\n+static void EnableOrDisableLogCategories(const ArgsManager& args, const std::string& opt)\n {\n-    if (args.IsArgSet(\"-debug\")) {\n-        // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n-        const std::vector<std::string> categories = args.GetArgs(\"-debug\");\n-\n-        if (std::none_of(categories.begin(), categories.end(),\n-            [](std::string cat){return cat == \"0\" || cat == \"none\";})) {\n-            for (const auto& cat : categories) {\n-                if (!LogInstance().EnableCategory(cat)) {\n-                    InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debug\", cat));\n-                }\n-            }\n-        }\n+    Assume(std::any_of(DEBUG_LOG_OPTS.cbegin(), DEBUG_LOG_OPTS.cend(), [&](const auto& d) { return opt == d; }));\n+    if (!args.IsArgSet(opt)) return;\n+    const std::vector<std::string>& categories{args.GetArgs(opt)};\n+    if (std::any_of(categories.cbegin(), categories.cend(), [](const auto& c) { return LogInstance().IsNoneCategory(c); })) return;\n+    for (const auto& c : categories) {\n+        const bool success{opt == DEBUG_LOG_OPTS[0] ? LogInstance().EnableCategory(c) : LogInstance().DisableCategory(c)};",
      "path": "src/init/common.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "f868de5293e99b8619225d2e3b93417e080888aa",
      "in_reply_to_id": 1158916354,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sure, will update. And add the comments mentioned in https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1164530898.",
      "created_at": "2023-04-12T20:17:51Z",
      "updated_at": "2023-04-12T20:17:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1164606990",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1164606990"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1164674497",
      "pull_request_review_id": 1382150078,
      "id": 1164674497,
      "node_id": "PRRC_kwDOABII585Fa4XB",
      "diff_hunk": "@@ -78,27 +79,24 @@ void SetLoggingLevel(const ArgsManager& args)\n     }\n }\n \n-void SetLoggingCategories(const ArgsManager& args)\n+static constexpr std::array DEBUG_LOG_OPTS{\"-debug\", \"-debugexclude\"};\n+\n+static void EnableOrDisableLogCategories(const ArgsManager& args, const std::string& opt)\n {\n-    if (args.IsArgSet(\"-debug\")) {\n-        // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n-        const std::vector<std::string> categories = args.GetArgs(\"-debug\");\n-\n-        if (std::none_of(categories.begin(), categories.end(),\n-            [](std::string cat){return cat == \"0\" || cat == \"none\";})) {\n-            for (const auto& cat : categories) {\n-                if (!LogInstance().EnableCategory(cat)) {\n-                    InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debug\", cat));\n-                }\n-            }\n-        }\n+    Assume(std::any_of(DEBUG_LOG_OPTS.cbegin(), DEBUG_LOG_OPTS.cend(), [&](const auto& d) { return opt == d; }));\n+    if (!args.IsArgSet(opt)) return;\n+    const std::vector<std::string>& categories{args.GetArgs(opt)};\n+    if (std::any_of(categories.cbegin(), categories.cend(), [](const auto& c) { return LogInstance().IsNoneCategory(c); })) return;\n+    for (const auto& c : categories) {\n+        const bool success{opt == DEBUG_LOG_OPTS[0] ? LogInstance().EnableCategory(c) : LogInstance().DisableCategory(c)};",
      "path": "src/init/common.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "f868de5293e99b8619225d2e3b93417e080888aa",
      "in_reply_to_id": 1158916354,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, and also dropped `DEBUG_LOG_OPTS` and the no-longer useful `Assume` check (the `NONFATAL_UNREACHABLE` check does it better), and made the two `EnableOrDisableLogCategories` functions simpler and more similar. Very helpful feedback (thanks!)\r\n\r\n<details><summary><code>git diff e9f6fd0 5991edd</code></summary><p>\r\n\r\n```diff\r\ndiff --git a/src/init/common.cpp b/src/init/common.cpp\r\nindex a5b07420d94..c99a512459b 100644\r\n--- a/src/init/common.cpp\r\n+++ b/src/init/common.cpp\r\n@@ -77,26 +77,28 @@ void SetLoggingLevel(const ArgsManager& args)\r\n     }\r\n }\r\n \r\n-// We run each of these configuration options through SetLoggingCategories. The order matters;\r\n-// -debugexclude settings take priority over -debug ones, so -debugexclude is run after -debug.\r\n-static constexpr std::array DEBUG_LOG_OPTS{\"-debug\", \"-debugexclude\"};\r\n+static bool EnableOrDisable(const std::string& opt, const std::string& category)\r\n+{\r\n+    if (opt == \"-debug\") return LogInstance().EnableCategory(category);\r\n+    if (opt == \"-debugexclude\") return LogInstance().DisableCategory(category);\r\n+    NONFATAL_UNREACHABLE();\r\n+}\r\n \r\n+// Maintain the same logic in both of the EnableOrDisableLogCategories functions in the codebase.\r\n static void EnableOrDisableLogCategories(const ArgsManager& args, const std::string& opt)\r\n {\r\n-    if (!args.IsArgSet(opt)) return;\r\n-    Assume(std::any_of(DEBUG_LOG_OPTS.cbegin(), DEBUG_LOG_OPTS.cend(), [&](const auto& d) { return opt == d; }));\r\n     const std::vector<std::string>& categories{args.GetArgs(opt)};\r\n     if (std::any_of(categories.cbegin(), categories.cend(), [](const auto& c) { return LogInstance().IsNoneCategory(c); })) return;\r\n     for (const auto& c : categories) {\r\n-        const bool success{opt == DEBUG_LOG_OPTS[0] ? LogInstance().EnableCategory(c) : LogInstance().DisableCategory(c)};\r\n-        if (!success) InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), opt, c));\r\n+        if (!EnableOrDisable(opt, c)) InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), opt, c));\r\n     }\r\n }\r\n \r\n void SetLoggingCategories(const ArgsManager& args)\r\n {\r\n-    for (const std::string& opt : DEBUG_LOG_OPTS) {\r\n-        EnableOrDisableLogCategories(args, opt);\r\n+    // debugexclude settings take priority over debug ones, so run debugexclude last\r\n+    for (const std::string& opt : {\"-debug\", \"-debugexclude\"}) {\r\n+        if (args.IsArgSet(opt)) EnableOrDisableLogCategories(args, opt);\r\n     }\r\n }\r\n \r\ndiff --git a/src/rpc/node.cpp b/src/rpc/node.cpp\r\nindex 3bae7bef722..9c32839231f 100644\r\n--- a/src/rpc/node.cpp\r\n+++ b/src/rpc/node.cpp\r\n@@ -209,14 +209,13 @@ static RPCHelpMan getmemoryinfo()\r\n     };\r\n }\r\n \r\n+// Maintain the same logic in both of the EnableOrDisableLogCategories functions in the codebase.\r\n static void EnableOrDisableLogCategories(const UniValue& categories, bool enable)\r\n {\r\n-    const std::vector<UniValue>& category_values{categories.get_array().getValues()};\r\n-    for (const auto& category : category_values) {\r\n-        if (LogInstance().IsNoneCategory(category.get_str())) return;\r\n-    }\r\n-    for (const auto& category : category_values) {\r\n-        const std::string& c{category.get_str()};\r\n+    const std::vector<UniValue>& cats{categories.get_array().getValues()};\r\n+    if (std::any_of(cats.cbegin(), cats.cend(), [](const auto& c) { return LogInstance().IsNoneCategory(c.get_str()); })) return;\r\n+    for (const auto& cat : cats) {\r\n+        const std::string& c{cat.get_str()};\r\n         const bool success{enable ? LogInstance().EnableCategory(c) : LogInstance().DisableCategory(c)};\r\n         if (!success) throw JSONRPCError(RPC_INVALID_PARAMETER, \"Unsupported logging category: \" + c);\r\n     }\r\n```\r\n</p></details>\r\n",
      "created_at": "2023-04-12T21:33:19Z",
      "updated_at": "2023-04-12T21:43:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1164674497",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1164674497"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238714196",
      "pull_request_review_id": 1493504697,
      "id": 1238714196,
      "node_id": "PRRC_kwDOABII585J1UdU",
      "diff_hunk": "@@ -80,26 +79,31 @@ util::Result<void> SetLoggingLevel(const ArgsManager& args)\n     return {};\n }\n \n-util::Result<void> SetLoggingCategories(const ArgsManager& args)\n+[[nodiscard]] static bool EnableOrDisable(const std::string& opt, const std::string& category)\n {\n-    if (args.IsArgSet(\"-debug\")) {\n-        // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n-        const std::vector<std::string> categories = args.GetArgs(\"-debug\");\n-\n-        if (std::none_of(categories.begin(), categories.end(),\n-            [](std::string cat){return cat == \"0\" || cat == \"none\";})) {\n-            for (const auto& cat : categories) {\n-                if (!LogInstance().EnableCategory(cat)) {\n-                    return util::Error{strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debug\", cat)};\n-                }\n-            }\n-        }\n+    if (opt == \"-debug\") return LogInstance().EnableCategory(category);\n+    if (opt == \"-debugexclude\") return LogInstance().DisableCategory(category);\n+    NONFATAL_UNREACHABLE();\n+}\n+\n+// Maintain similar logic in both of the EnableOrDisableLogCategories() functions in the codebase.",
      "path": "src/init/common.cpp",
      "position": 18,
      "original_position": 45,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "630b38e92b4e40d49d69970b6c5bc02aa39ba210",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I still don't totally understand why you need to split this up into three functions, one of which is a kinda-duplicate The comment makes sense but I'm not familiar enough with the general style of the project to determine if having two functions with the same name doing basically the same thing is acceptable.",
      "created_at": "2023-06-22T15:40:32Z",
      "updated_at": "2023-06-22T15:40:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1238714196",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238714196"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 81,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238977872",
      "pull_request_review_id": 1493916244,
      "id": 1238977872,
      "node_id": "PRRC_kwDOABII585J2U1Q",
      "diff_hunk": "@@ -80,26 +79,31 @@ util::Result<void> SetLoggingLevel(const ArgsManager& args)\n     return {};\n }\n \n-util::Result<void> SetLoggingCategories(const ArgsManager& args)\n+[[nodiscard]] static bool EnableOrDisable(const std::string& opt, const std::string& category)\n {\n-    if (args.IsArgSet(\"-debug\")) {\n-        // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n-        const std::vector<std::string> categories = args.GetArgs(\"-debug\");\n-\n-        if (std::none_of(categories.begin(), categories.end(),\n-            [](std::string cat){return cat == \"0\" || cat == \"none\";})) {\n-            for (const auto& cat : categories) {\n-                if (!LogInstance().EnableCategory(cat)) {\n-                    return util::Error{strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debug\", cat)};\n-                }\n-            }\n-        }\n+    if (opt == \"-debug\") return LogInstance().EnableCategory(category);\n+    if (opt == \"-debugexclude\") return LogInstance().DisableCategory(category);\n+    NONFATAL_UNREACHABLE();\n+}\n+\n+// Maintain similar logic in both of the EnableOrDisableLogCategories() functions in the codebase.",
      "path": "src/init/common.cpp",
      "position": 18,
      "original_position": 45,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "630b38e92b4e40d49d69970b6c5bc02aa39ba210",
      "in_reply_to_id": 1238714196,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Doing so\r\n- makes clear that -debug and -debugexclude use the same logic\r\n- avoids duplicate code for -debug and -debugexclude\r\n- separates the logic to be kept the same, into a method that has the same name and logic as `EnableOrDisableLogCategories()` in the RPC code (for the logging RPC \"include\" and \"exclude\" options), which was added back in 2017-2018 and updated since then. Combining the two into a single method seems non-trivial (maybe for a later pull) but this comment and the shared function name grep-ability makes more clear what logic needs to be the same.\r\n\r\n(Thanks for coming back to this PR!)",
      "created_at": "2023-06-22T20:05:26Z",
      "updated_at": "2023-06-22T20:08:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1238977872",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238977872"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 81,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238979407",
      "pull_request_review_id": 1493918918,
      "id": 1238979407,
      "node_id": "PRRC_kwDOABII585J2VNP",
      "diff_hunk": "@@ -80,26 +79,31 @@ util::Result<void> SetLoggingLevel(const ArgsManager& args)\n     return {};\n }\n \n-util::Result<void> SetLoggingCategories(const ArgsManager& args)\n+[[nodiscard]] static bool EnableOrDisable(const std::string& opt, const std::string& category)\n {\n-    if (args.IsArgSet(\"-debug\")) {\n-        // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n-        const std::vector<std::string> categories = args.GetArgs(\"-debug\");\n-\n-        if (std::none_of(categories.begin(), categories.end(),\n-            [](std::string cat){return cat == \"0\" || cat == \"none\";})) {\n-            for (const auto& cat : categories) {\n-                if (!LogInstance().EnableCategory(cat)) {\n-                    return util::Error{strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debug\", cat)};\n-                }\n-            }\n-        }\n+    if (opt == \"-debug\") return LogInstance().EnableCategory(category);\n+    if (opt == \"-debugexclude\") return LogInstance().DisableCategory(category);\n+    NONFATAL_UNREACHABLE();\n+}\n+\n+// Maintain similar logic in both of the EnableOrDisableLogCategories() functions in the codebase.",
      "path": "src/init/common.cpp",
      "position": 18,
      "original_position": 45,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "630b38e92b4e40d49d69970b6c5bc02aa39ba210",
      "in_reply_to_id": 1238714196,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "OK cool thanks for explaining",
      "created_at": "2023-06-22T20:07:25Z",
      "updated_at": "2023-06-22T20:07:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1238979407",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238979407"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 81,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239861077",
      "pull_request_review_id": 1495213933,
      "id": 1239861077,
      "node_id": "PRRC_kwDOABII585J5sdV",
      "diff_hunk": "@@ -80,26 +79,31 @@ util::Result<void> SetLoggingLevel(const ArgsManager& args)\n     return {};\n }\n \n-util::Result<void> SetLoggingCategories(const ArgsManager& args)\n+[[nodiscard]] static bool EnableOrDisable(const std::string& opt, const std::string& category)\n {\n-    if (args.IsArgSet(\"-debug\")) {\n-        // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n-        const std::vector<std::string> categories = args.GetArgs(\"-debug\");\n-\n-        if (std::none_of(categories.begin(), categories.end(),\n-            [](std::string cat){return cat == \"0\" || cat == \"none\";})) {\n-            for (const auto& cat : categories) {\n-                if (!LogInstance().EnableCategory(cat)) {\n-                    return util::Error{strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debug\", cat)};\n-                }\n-            }\n-        }\n+    if (opt == \"-debug\") return LogInstance().EnableCategory(category);\n+    if (opt == \"-debugexclude\") return LogInstance().DisableCategory(category);\n+    NONFATAL_UNREACHABLE();\n+}\n+\n+// Maintain similar logic in both of the EnableOrDisableLogCategories() functions in the codebase.\n+[[nodiscard]] static util::Result<void> EnableOrDisableLogCategories(const ArgsManager& args, const std::string& opt)\n+{\n+    const std::vector<std::string>& categories{args.GetArgs(opt)};\n+    if (std::any_of(categories.cbegin(), categories.cend(), [](const auto& c) { return LogInstance().IsNoneCategory(c); })) return {};\n+    for (const auto& c : categories) {\n+        if (!EnableOrDisable(opt, c)) return util::Error{strprintf(_(\"Unsupported logging category %s=%s.\"), opt, c)};\n     }\n+    return {};\n+}\n \n-    // Now remove the logging categories which were explicitly excluded\n-    for (const std::string& cat : args.GetArgs(\"-debugexclude\")) {\n-        if (!LogInstance().DisableCategory(cat)) {\n-            return util::Error{strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debugexclude\", cat)};\n+util::Result<void> SetLoggingCategories(const ArgsManager& args)\n+{\n+    // debugexclude settings take priority over debug ones, so run debugexclude last\n+    for (const std::string& opt : {\"-debug\", \"-debugexclude\"}) {",
      "path": "src/init/common.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "630b38e92b4e40d49d69970b6c5bc02aa39ba210",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This seems a bit clunky, how about:\r\n\r\n```c++\r\n// Maintain similar logic in both of the EnableOrDisableLogCategories() functions in the codebase.\r\nstatic void EnableOrDisableLogCategories(util::Result<void>& result, const ArgsManager& args, const std::string& opt, bool enable)\r\n{\r\n    if (!result) return;\r\n    if (!args.IsArgSet(opt)) return;\r\n    const std::vector<std::string>& categories{args.GetArgs(opt)};\r\n    if (std::any_of(categories.cbegin(), categories.cend(), [](const auto& c) { return LogInstance().IsNoneCategory(c); })) return;\r\n    for (const auto& category : categories) {\r\n        bool success = (enable ? LogInstance().EnableCategory(category) : LogInstance().DisableCategory(category));\r\n        if (!success) {\r\n            result = util::Error{strprintf(_(\"Unsupported logging category %s=%s.\"), opt, category)};\r\n            return;\r\n        }\r\n    }\r\n    return;\r\n}\r\n\r\nutil::Result<void> SetLoggingCategories(const ArgsManager& args)\r\n{\r\n    util::Result<void> result;\r\n\r\n    // debugexclude settings take priority over debug ones, so run debugexclude last\r\n    EnableOrDisableLogCategories(result, args, \"-debug\", /*enable=*/true);\r\n    EnableOrDisableLogCategories(result, args, \"-debugexclude\", /*enable=*/false);\r\n    if (!result) return util::Error{util::ErrorString(result)};\r\n    return {};\r\n}\r\n```\r\n\r\n(or just `return result;` at the end -- not sure what the point of `return Error(ErrorString(result))` is?)",
      "created_at": "2023-06-23T14:02:58Z",
      "updated_at": "2023-06-23T14:07:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1239861077",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239861077"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1240112630",
      "pull_request_review_id": 1495608757,
      "id": 1240112630,
      "node_id": "PRRC_kwDOABII585J6p32",
      "diff_hunk": "@@ -80,26 +79,31 @@ util::Result<void> SetLoggingLevel(const ArgsManager& args)\n     return {};\n }\n \n-util::Result<void> SetLoggingCategories(const ArgsManager& args)\n+[[nodiscard]] static bool EnableOrDisable(const std::string& opt, const std::string& category)\n {\n-    if (args.IsArgSet(\"-debug\")) {\n-        // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n-        const std::vector<std::string> categories = args.GetArgs(\"-debug\");\n-\n-        if (std::none_of(categories.begin(), categories.end(),\n-            [](std::string cat){return cat == \"0\" || cat == \"none\";})) {\n-            for (const auto& cat : categories) {\n-                if (!LogInstance().EnableCategory(cat)) {\n-                    return util::Error{strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debug\", cat)};\n-                }\n-            }\n-        }\n+    if (opt == \"-debug\") return LogInstance().EnableCategory(category);\n+    if (opt == \"-debugexclude\") return LogInstance().DisableCategory(category);\n+    NONFATAL_UNREACHABLE();\n+}\n+\n+// Maintain similar logic in both of the EnableOrDisableLogCategories() functions in the codebase.\n+[[nodiscard]] static util::Result<void> EnableOrDisableLogCategories(const ArgsManager& args, const std::string& opt)\n+{\n+    const std::vector<std::string>& categories{args.GetArgs(opt)};\n+    if (std::any_of(categories.cbegin(), categories.cend(), [](const auto& c) { return LogInstance().IsNoneCategory(c); })) return {};\n+    for (const auto& c : categories) {\n+        if (!EnableOrDisable(opt, c)) return util::Error{strprintf(_(\"Unsupported logging category %s=%s.\"), opt, c)};\n     }\n+    return {};\n+}\n \n-    // Now remove the logging categories which were explicitly excluded\n-    for (const std::string& cat : args.GetArgs(\"-debugexclude\")) {\n-        if (!LogInstance().DisableCategory(cat)) {\n-            return util::Error{strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debugexclude\", cat)};\n+util::Result<void> SetLoggingCategories(const ArgsManager& args)\n+{\n+    // debugexclude settings take priority over debug ones, so run debugexclude last\n+    for (const std::string& opt : {\"-debug\", \"-debugexclude\"}) {",
      "path": "src/init/common.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "630b38e92b4e40d49d69970b6c5bc02aa39ba210",
      "in_reply_to_id": 1239861077,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "LGTM (and with just `return result;`) and this allows dropping the `#include <util/check.h>` from that file.\r\n",
      "created_at": "2023-06-23T17:49:16Z",
      "updated_at": "2023-06-23T17:49:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1240112630",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1240112630"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247319876",
      "pull_request_review_id": 1506340867,
      "id": 1247319876,
      "node_id": "PRRC_kwDOABII585KWJdE",
      "diff_hunk": "@@ -251,4 +260,14 @@ BOOST_FIXTURE_TEST_CASE(logging_Conf, LogSetup)\n     }\n }\n \n+BOOST_FIXTURE_TEST_CASE(logging_IsNoneCategory, LogSetup)\n+{\n+    for (const std::string& s : {\"none\", \"0\"}) {",
      "path": "src/test/logging_tests.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "08a367c929e55e779d3b06ca75f94d42b5d67e1f",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```\r\nsrc/test/logging_tests.cpp:262:29: warning: loop variable 's' of type 'const std::string&' {aka 'const std::__cxx11::basic_string<char>&'} binds to a temporary constructed from type 'const char* const' [-Wrange-loop-construct]\r\n  262 |     for (const std::string& s : {\"\", \"NONE\", \"net\", \"all\", \"1\"}) {\r\n      |                             ^\r\nsrc/test/logging_tests.cpp:262:29: note: use non-reference type 'const std::string' {aka 'const std::__cxx11::basic_string<char>'} to make the copy explicit or 'const char* const&' to prevent copying\r\n```",
      "created_at": "2023-06-30T01:44:18Z",
      "updated_at": "2023-06-30T02:05:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1247319876",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247319876"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 265,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247331119",
      "pull_request_review_id": 1506340867,
      "id": 1247331119,
      "node_id": "PRRC_kwDOABII585KWMMv",
      "diff_hunk": "@@ -14,52 +14,76 @@ class LoggingTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-debug=0\"]]\n \n     def relative_log_path(self, name):\n         return os.path.join(self.nodes[0].datadir, self.chain, name)\n \n     def run_test(self):\n-        # test default log file name\n+        node = self.nodes[0]\n+        self.log.info(\"Test default log file name and -debug=0\")\n         default_log_path = self.relative_log_path(\"debug.log\")\n         assert os.path.isfile(default_log_path)\n-\n-        # test alternative log file name in datadir\n-        self.restart_node(0, [\"-debuglogfile=foo.log\"])\n+        assert all(v == False for v in node.logging().values())\n+\n+        self.log.info(\"Test alternative log file name in datadir and -debugexclude={net,tor}\")\n+        self.restart_node(0, extra_args=[\n+            \"-debuglogfile=foo.log\",\n+            \"-debugexclude=net\",\n+            \"-debugexclude=tor\",\n+        ])\n         assert os.path.isfile(self.relative_log_path(\"foo.log\"))\n+        # In addition to net and tor, leveldb/libevent/rand are excluded by the test framework.\n+        for category in [\"leveldb\", \"libevent\", \"net\", \"rand\", \"tor\"]:\n+            assert not node.logging()[category]",
      "path": "test/functional/feature_logging.py",
      "position": null,
      "original_position": 29,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "08a367c929e55e779d3b06ca75f94d42b5d67e1f",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Kinda ugly to call `node.logging()` repeatedly",
      "created_at": "2023-06-30T02:04:13Z",
      "updated_at": "2023-06-30T02:05:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1247331119",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247331119"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247331674",
      "pull_request_review_id": 1506340867,
      "id": 1247331674,
      "node_id": "PRRC_kwDOABII585KWMVa",
      "diff_hunk": "@@ -14,52 +14,76 @@ class LoggingTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-debug=0\"]]\n \n     def relative_log_path(self, name):\n         return os.path.join(self.nodes[0].datadir, self.chain, name)\n \n     def run_test(self):\n-        # test default log file name\n+        node = self.nodes[0]\n+        self.log.info(\"Test default log file name and -debug=0\")\n         default_log_path = self.relative_log_path(\"debug.log\")\n         assert os.path.isfile(default_log_path)\n-\n-        # test alternative log file name in datadir\n-        self.restart_node(0, [\"-debuglogfile=foo.log\"])\n+        assert all(v == False for v in node.logging().values())\n+\n+        self.log.info(\"Test alternative log file name in datadir and -debugexclude={net,tor}\")\n+        self.restart_node(0, extra_args=[\n+            \"-debuglogfile=foo.log\",\n+            \"-debugexclude=net\",\n+            \"-debugexclude=tor\",\n+        ])\n         assert os.path.isfile(self.relative_log_path(\"foo.log\"))\n+        # In addition to net and tor, leveldb/libevent/rand are excluded by the test framework.\n+        for category in [\"leveldb\", \"libevent\", \"net\", \"rand\", \"tor\"]:\n+            assert not node.logging()[category]\n \n-        # test alternative log file name outside datadir\n+        self.log.info(\"Test alternative log file name outside datadir and -debugexclude={none,qt}\")\n         tempname = os.path.join(self.options.tmpdir, \"foo.log\")\n-        self.restart_node(0, [f\"-debuglogfile={tempname}\"])\n+        self.restart_node(0, extra_args=[\n+            f\"-debuglogfile={tempname}\",\n+            \"-debugexclude=none\",\n+            \"-debugexclude=qt\",\n+        ])\n         assert os.path.isfile(tempname)\n+        assert all(v == True for v in node.logging().values())  # -debugexclude=[none,qt] does not exclude qt",
      "path": "test/functional/feature_logging.py",
      "position": null,
      "original_position": 41,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "08a367c929e55e779d3b06ca75f94d42b5d67e1f",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why aren't libevent/leveldb being excluded here?",
      "created_at": "2023-06-30T02:05:16Z",
      "updated_at": "2023-06-30T02:05:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1247331674",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247331674"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247340446",
      "pull_request_review_id": 1506371015,
      "id": 1247340446,
      "node_id": "PRRC_kwDOABII585KWOee",
      "diff_hunk": "@@ -14,52 +14,76 @@ class LoggingTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-debug=0\"]]\n \n     def relative_log_path(self, name):\n         return os.path.join(self.nodes[0].datadir, self.chain, name)\n \n     def run_test(self):\n-        # test default log file name\n+        node = self.nodes[0]\n+        self.log.info(\"Test default log file name and -debug=0\")\n         default_log_path = self.relative_log_path(\"debug.log\")\n         assert os.path.isfile(default_log_path)\n-\n-        # test alternative log file name in datadir\n-        self.restart_node(0, [\"-debuglogfile=foo.log\"])\n+        assert all(v == False for v in node.logging().values())\n+\n+        self.log.info(\"Test alternative log file name in datadir and -debugexclude={net,tor}\")\n+        self.restart_node(0, extra_args=[\n+            \"-debuglogfile=foo.log\",\n+            \"-debugexclude=net\",\n+            \"-debugexclude=tor\",\n+        ])\n         assert os.path.isfile(self.relative_log_path(\"foo.log\"))\n+        # In addition to net and tor, leveldb/libevent/rand are excluded by the test framework.\n+        for category in [\"leveldb\", \"libevent\", \"net\", \"rand\", \"tor\"]:\n+            assert not node.logging()[category]",
      "path": "test/functional/feature_logging.py",
      "position": null,
      "original_position": 29,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "08a367c929e55e779d3b06ca75f94d42b5d67e1f",
      "in_reply_to_id": 1247331119,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point, updated.\r\n\r\n```diff\r\n         # In addition to net and tor, leveldb/libevent/rand are excluded by the test framework.\r\n+        result = node.logging()\r\n         for category in [\"leveldb\", \"libevent\", \"net\", \"rand\", \"tor\"]:\r\n-            assert not node.logging()[category]\r\n+            assert not result[category]\r\n```\r\n",
      "created_at": "2023-06-30T02:22:12Z",
      "updated_at": "2023-06-30T02:22:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1247340446",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247340446"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247342599",
      "pull_request_review_id": 1506374446,
      "id": 1247342599,
      "node_id": "PRRC_kwDOABII585KWPAH",
      "diff_hunk": "@@ -251,4 +260,14 @@ BOOST_FIXTURE_TEST_CASE(logging_Conf, LogSetup)\n     }\n }\n \n+BOOST_FIXTURE_TEST_CASE(logging_IsNoneCategory, LogSetup)\n+{\n+    for (const std::string& s : {\"none\", \"0\"}) {",
      "path": "src/test/logging_tests.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "08a367c929e55e779d3b06ca75f94d42b5d67e1f",
      "in_reply_to_id": 1247319876,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thank you, Luke, updated. Is that with GCC? I don't see the warning with Clang 16.0.6.\r\n\r\n```diff\r\n BOOST_FIXTURE_TEST_CASE(logging_IsNoneCategory, LogSetup)\r\n {\r\n-    for (const std::string& s : {\"none\", \"0\"}) {\r\n+    for (const char* const& s : {\"none\", \"0\"}) {\r\n         BOOST_CHECK(LogInstance().IsNoneCategory(s));\r\n     }\r\n-    for (const std::string& s : {\"\", \"NONE\", \"net\", \"all\", \"1\"}) {\r\n+    for (const char* const& s : {\"\", \"NONE\", \"net\", \"all\", \"1\"}) {\r\n         BOOST_CHECK(!LogInstance().IsNoneCategory(s));\r\n     }\r\n }\r\n```\r\n",
      "created_at": "2023-06-30T02:25:11Z",
      "updated_at": "2023-06-30T02:25:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1247342599",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247342599"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 265,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247357530",
      "pull_request_review_id": 1506395238,
      "id": 1247357530,
      "node_id": "PRRC_kwDOABII585KWSpa",
      "diff_hunk": "@@ -14,52 +14,76 @@ class LoggingTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-debug=0\"]]\n \n     def relative_log_path(self, name):\n         return os.path.join(self.nodes[0].datadir, self.chain, name)\n \n     def run_test(self):\n-        # test default log file name\n+        node = self.nodes[0]\n+        self.log.info(\"Test default log file name and -debug=0\")\n         default_log_path = self.relative_log_path(\"debug.log\")\n         assert os.path.isfile(default_log_path)\n-\n-        # test alternative log file name in datadir\n-        self.restart_node(0, [\"-debuglogfile=foo.log\"])\n+        assert all(v == False for v in node.logging().values())\n+\n+        self.log.info(\"Test alternative log file name in datadir and -debugexclude={net,tor}\")\n+        self.restart_node(0, extra_args=[\n+            \"-debuglogfile=foo.log\",\n+            \"-debugexclude=net\",\n+            \"-debugexclude=tor\",\n+        ])\n         assert os.path.isfile(self.relative_log_path(\"foo.log\"))\n+        # In addition to net and tor, leveldb/libevent/rand are excluded by the test framework.\n+        for category in [\"leveldb\", \"libevent\", \"net\", \"rand\", \"tor\"]:\n+            assert not node.logging()[category]\n \n-        # test alternative log file name outside datadir\n+        self.log.info(\"Test alternative log file name outside datadir and -debugexclude={none,qt}\")\n         tempname = os.path.join(self.options.tmpdir, \"foo.log\")\n-        self.restart_node(0, [f\"-debuglogfile={tempname}\"])\n+        self.restart_node(0, extra_args=[\n+            f\"-debuglogfile={tempname}\",\n+            \"-debugexclude=none\",\n+            \"-debugexclude=qt\",\n+        ])\n         assert os.path.isfile(tempname)\n+        assert all(v == True for v in node.logging().values())  # -debugexclude=[none,qt] does not exclude qt",
      "path": "test/functional/feature_logging.py",
      "position": null,
      "original_position": 41,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "08a367c929e55e779d3b06ca75f94d42b5d67e1f",
      "in_reply_to_id": 1247331674,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Because `-debugexclude=none\"` is passed. It looks like the passed extra args are concatenated to `self.args` before starting the process, i.e. `self.process = subprocess.Popen(self.args + extra_args...` in `test_framework/test_node.py#L219`, so the \"none\" value cancels the -debugexclude={libevent,leveldb,rand} args in the same file.",
      "created_at": "2023-06-30T02:54:31Z",
      "updated_at": "2023-06-30T02:54:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1247357530",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247357530"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247357713",
      "pull_request_review_id": 1506395455,
      "id": 1247357713,
      "node_id": "PRRC_kwDOABII585KWSsR",
      "diff_hunk": "@@ -14,52 +14,76 @@ class LoggingTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-debug=0\"]]\n \n     def relative_log_path(self, name):\n         return os.path.join(self.nodes[0].datadir, self.chain, name)\n \n     def run_test(self):\n-        # test default log file name\n+        node = self.nodes[0]\n+        self.log.info(\"Test default log file name and -debug=0\")\n         default_log_path = self.relative_log_path(\"debug.log\")\n         assert os.path.isfile(default_log_path)\n-\n-        # test alternative log file name in datadir\n-        self.restart_node(0, [\"-debuglogfile=foo.log\"])\n+        assert all(v == False for v in node.logging().values())\n+\n+        self.log.info(\"Test alternative log file name in datadir and -debugexclude={net,tor}\")\n+        self.restart_node(0, extra_args=[\n+            \"-debuglogfile=foo.log\",\n+            \"-debugexclude=net\",\n+            \"-debugexclude=tor\",\n+        ])\n         assert os.path.isfile(self.relative_log_path(\"foo.log\"))\n+        # In addition to net and tor, leveldb/libevent/rand are excluded by the test framework.\n+        for category in [\"leveldb\", \"libevent\", \"net\", \"rand\", \"tor\"]:\n+            assert not node.logging()[category]\n \n-        # test alternative log file name outside datadir\n+        self.log.info(\"Test alternative log file name outside datadir and -debugexclude={none,qt}\")\n         tempname = os.path.join(self.options.tmpdir, \"foo.log\")\n-        self.restart_node(0, [f\"-debuglogfile={tempname}\"])\n+        self.restart_node(0, extra_args=[\n+            f\"-debuglogfile={tempname}\",\n+            \"-debugexclude=none\",\n+            \"-debugexclude=qt\",\n+        ])\n         assert os.path.isfile(tempname)\n+        assert all(v == True for v in node.logging().values())  # -debugexclude=[none,qt] does not exclude qt",
      "path": "test/functional/feature_logging.py",
      "position": null,
      "original_position": 41,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "08a367c929e55e779d3b06ca75f94d42b5d67e1f",
      "in_reply_to_id": 1247331674,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good question, though. I'll add a comment.",
      "created_at": "2023-06-30T02:54:52Z",
      "updated_at": "2023-06-30T02:54:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1247357713",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247357713"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248280153",
      "pull_request_review_id": 1507887642,
      "id": 1248280153,
      "node_id": "PRRC_kwDOABII585KZz5Z",
      "diff_hunk": "@@ -14,52 +14,76 @@ class LoggingTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-debug=0\"]]\n \n     def relative_log_path(self, name):\n         return os.path.join(self.nodes[0].datadir, self.chain, name)\n \n     def run_test(self):\n-        # test default log file name\n+        node = self.nodes[0]\n+        self.log.info(\"Test default log file name and -debug=0\")\n         default_log_path = self.relative_log_path(\"debug.log\")\n         assert os.path.isfile(default_log_path)\n-\n-        # test alternative log file name in datadir\n-        self.restart_node(0, [\"-debuglogfile=foo.log\"])\n+        assert all(v == False for v in node.logging().values())\n+\n+        self.log.info(\"Test alternative log file name in datadir and -debugexclude={net,tor}\")\n+        self.restart_node(0, extra_args=[\n+            \"-debuglogfile=foo.log\",\n+            \"-debugexclude=net\",\n+            \"-debugexclude=tor\",\n+        ])\n         assert os.path.isfile(self.relative_log_path(\"foo.log\"))\n+        # In addition to net and tor, leveldb/libevent/rand are excluded by the test framework.\n+        for category in [\"leveldb\", \"libevent\", \"net\", \"rand\", \"tor\"]:\n+            assert not node.logging()[category]\n \n-        # test alternative log file name outside datadir\n+        self.log.info(\"Test alternative log file name outside datadir and -debugexclude={none,qt}\")\n         tempname = os.path.join(self.options.tmpdir, \"foo.log\")\n-        self.restart_node(0, [f\"-debuglogfile={tempname}\"])\n+        self.restart_node(0, extra_args=[\n+            f\"-debuglogfile={tempname}\",\n+            \"-debugexclude=none\",\n+            \"-debugexclude=qt\",\n+        ])\n         assert os.path.isfile(tempname)\n+        assert all(v == True for v in node.logging().values())  # -debugexclude=[none,qt] does not exclude qt",
      "path": "test/functional/feature_logging.py",
      "position": null,
      "original_position": 41,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "08a367c929e55e779d3b06ca75f94d42b5d67e1f",
      "in_reply_to_id": 1247331674,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Improved the test comment.\r\n\r\n```diff\r\n-        assert all(v == True for v in node.logging().values())  # -debugexclude=[none,qt] does not exclude qt\r\n+        # Expect the \"none\" value passed in -debugexclude=[none,qt] to mean that\r\n+        # none of the categories passed with -debugexclude are excluded: neither\r\n+        # qt passed here nor leveldb/libevent/rand passed by the test framework.\r\n+        assert all(v == True for v in node.logging().values())\r\n```\r\n",
      "created_at": "2023-06-30T20:56:36Z",
      "updated_at": "2023-06-30T20:56:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1248280153",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248280153"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269666789",
      "pull_request_review_id": 1539604568,
      "id": 1269666789,
      "node_id": "PRRC_kwDOABII585LrZPl",
      "diff_hunk": "@@ -80,26 +79,31 @@ util::Result<void> SetLoggingLevel(const ArgsManager& args)\n     return {};\n }\n \n-util::Result<void> SetLoggingCategories(const ArgsManager& args)\n+[[nodiscard]] static bool EnableOrDisable(const std::string& opt, const std::string& category)\n {\n-    if (args.IsArgSet(\"-debug\")) {\n-        // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n-        const std::vector<std::string> categories = args.GetArgs(\"-debug\");\n-\n-        if (std::none_of(categories.begin(), categories.end(),\n-            [](std::string cat){return cat == \"0\" || cat == \"none\";})) {\n-            for (const auto& cat : categories) {\n-                if (!LogInstance().EnableCategory(cat)) {\n-                    return util::Error{strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debug\", cat)};\n-                }\n-            }\n-        }\n+    if (opt == \"-debug\") return LogInstance().EnableCategory(category);\n+    if (opt == \"-debugexclude\") return LogInstance().DisableCategory(category);\n+    NONFATAL_UNREACHABLE();\n+}\n+\n+// Maintain similar logic in both of the EnableOrDisableLogCategories() functions in the codebase.\n+[[nodiscard]] static util::Result<void> EnableOrDisableLogCategories(const ArgsManager& args, const std::string& opt)\n+{\n+    const std::vector<std::string>& categories{args.GetArgs(opt)};\n+    if (std::any_of(categories.cbegin(), categories.cend(), [](const auto& c) { return LogInstance().IsNoneCategory(c); })) return {};\n+    for (const auto& c : categories) {\n+        if (!EnableOrDisable(opt, c)) return util::Error{strprintf(_(\"Unsupported logging category %s=%s.\"), opt, c)};\n     }\n+    return {};\n+}\n \n-    // Now remove the logging categories which were explicitly excluded\n-    for (const std::string& cat : args.GetArgs(\"-debugexclude\")) {\n-        if (!LogInstance().DisableCategory(cat)) {\n-            return util::Error{strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debugexclude\", cat)};\n+util::Result<void> SetLoggingCategories(const ArgsManager& args)\n+{\n+    // debugexclude settings take priority over debug ones, so run debugexclude last\n+    for (const std::string& opt : {\"-debug\", \"-debugexclude\"}) {",
      "path": "src/init/common.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "93b387fe70174d174b840016da8531ef65ec313e",
      "original_commit_id": "630b38e92b4e40d49d69970b6c5bc02aa39ba210",
      "in_reply_to_id": 1239861077,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Great suggestion AJ this are looks a lot better now",
      "created_at": "2023-07-20T15:53:49Z",
      "updated_at": "2023-07-20T15:53:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27231#discussion_r1269666789",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269666789"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27231"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    }
  ]
}