{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877",
    "id": 1391386612,
    "node_id": "PR_kwDOABII585S7t_0",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/27877",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/27877.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/27877.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27877",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27877/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
    "number": 27877,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "wallet: Add CoinGrinder coin selection algorithm",
    "user": {
      "login": "murchandamus",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murchandamus",
      "html_url": "https://github.com/murchandamus",
      "followers_url": "https://api.github.com/users/murchandamus/followers",
      "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
      "organizations_url": "https://api.github.com/users/murchandamus/orgs",
      "repos_url": "https://api.github.com/users/murchandamus/repos",
      "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/murchandamus/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "***Please refer to the [topic on Delving Bitcoin](https://delvingbitcoin.org/t/gutterguard-and-coingrinder-simulation-results/279) discussing Gutter Guard/Coingrinder simulation results.***\r\n\r\nAdds a coin selection algorithm that minimizes the weight of the input set while creating change.\r\n\r\nMotivations\r\n---\r\n\r\n- At high feerates, using unnecessary inputs can significantly increase the fees\r\n- Users are upset when fees are relatively large compared to the amount sent\r\n- Some users struggle to maintain a sufficient count of UTXOs in their wallet\r\n\r\nApproach\r\n---\r\n\r\nSo far, Bitcoin Core has used a balanced approach to coin selection, where it will generate multiple input set candidates using various coin selection algorithms and pick the least wasteful among their results, but not explicitly minimize the input set weight. Under some circumstances, we _do_ want to minimize the weight of the input set. Sometimes changeless solutions require many or heavy inputs, and there is not always a changeless solution for Branch and Bound to find in the first place. This can cause expensive transactions unnecessarily. Given a wallet with sufficient funds, `CoinGrinder` will pick the minimal-waste input set for a transaction with a change output. The current implementation only runs `CoinGrinder` at feerates over 3×long-term-feerate-estimate (by default 30 ṩ/vB), which may be a decent compromise between our goal to reduce costs for the users, but still permit transactions at lower feerates to naturally reduce the wallet’s UTXO pool to curb bloat.\r\n\r\nTrade-offs\r\n---\r\n\r\nSimulations for my thesis on coin selection ([see Section 6.3.2.1 [PDF]](https://murch.one/erhardt2016coinselection.pdf)) suggest that minimizing the input set for all transactions tends to grind a wallet’s UTXO pool to dust (pun intended): an approach selecting inputs per coin-age-priority (in effect similar to “largest first selection”) on average produced a UTXO pool with 15× the UTXO count as Bitcoin Core’s Knapsack-based Coin Selection then (in 2016). Therefore, I do not recommend running `CoinGrinder` under all circumstances, but only at extreme feerates or when we have another good reason to minimize the input set for other reasons. In the long-term, we should introduce additional metrics to score different input set candidates, e.g. on basis of their privacy and wallet health impact, to pick from all our coin selection results, but until then, we may want to limit use of `CoinGrinder` in other ways.",
    "labels": [
      {
        "id": 149424,
        "node_id": "MDU6TGFiZWwxNDk0MjQ=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
        "name": "Wallet",
        "color": "08a781",
        "default": false
      }
    ],
    "created_at": "2023-06-13T22:32:16Z",
    "updated_at": "2024-02-04T21:51:18Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "785cc4b065095c7642c54ac34874d8630de2985e",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "murchandamus:2023-05-coingrinder",
      "ref": "2023-05-coingrinder",
      "sha": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 23979970,
        "node_id": "MDEwOlJlcG9zaXRvcnkyMzk3OTk3MA==",
        "name": "bitcoin",
        "full_name": "murchandamus/bitcoin",
        "owner": {
          "login": "murchandamus",
          "id": 4060799,
          "node_id": "MDQ6VXNlcjQwNjA3OTk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/murchandamus",
          "html_url": "https://github.com/murchandamus",
          "followers_url": "https://api.github.com/users/murchandamus/followers",
          "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
          "organizations_url": "https://api.github.com/users/murchandamus/orgs",
          "repos_url": "https://api.github.com/users/murchandamus/repos",
          "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/murchandamus/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/murchandamus/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/murchandamus/bitcoin",
        "archive_url": "https://api.github.com/repos/murchandamus/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/murchandamus/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/murchandamus/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/murchandamus/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/murchandamus/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/murchandamus/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/murchandamus/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/murchandamus/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/murchandamus/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/murchandamus/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/murchandamus/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/murchandamus/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/murchandamus/bitcoin/events",
        "forks_url": "https://api.github.com/repos/murchandamus/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/murchandamus/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/murchandamus/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/murchandamus/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/murchandamus/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/murchandamus/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/murchandamus/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/murchandamus/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/murchandamus/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/murchandamus/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/murchandamus/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/murchandamus/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/murchandamus/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/murchandamus/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/murchandamus/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/murchandamus/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:murchandamus/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/murchandamus/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/murchandamus/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/murchandamus/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/murchandamus/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/murchandamus/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/murchandamus/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/murchandamus/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/murchandamus/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/murchandamus/bitcoin/hooks",
        "svn_url": "https://github.com/murchandamus/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 213429,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-02-04T21:00:54Z",
        "created_at": "2014-09-12T23:11:53Z",
        "updated_at": "2023-05-11T06:24:44Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "a11585692e72cac468fb1496ea2c30e4c07f73e5",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36692,
        "stargazers_count": 73711,
        "watchers_count": 73711,
        "size": 248147,
        "default_branch": "master",
        "open_issues_count": 688,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-02-04T21:00:57Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-02-04T20:53:59Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 728,
    "deletions": 4,
    "changed_files": 5,
    "commits": 16,
    "review_comments": 115,
    "comments": 29
  },
  "events": [
    {
      "event": "commented",
      "id": 1590140722,
      "node_id": "IC_kwDOABII585ex58y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1590140722",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-13T22:32:19Z",
      "updated_at": "2024-02-01T21:23:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/27877).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [jonatack](https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1834473406), [S3RK](https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1837467046), [kashifs](https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1859275939), [ishaanam](https://github.com/bitcoin/bitcoin/pull/27877#pullrequestreview-1816719303), [sipa](https://github.com/bitcoin/bitcoin/pull/27877#pullrequestreview-1853774778), [sr-gi](https://github.com/bitcoin/bitcoin/pull/27877#pullrequestreview-1857573521) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#28985](https://github.com/bitcoin/bitcoin/pull/28985) (Avoid changeless input sets when SFFO is active by murchandamus)\n* [#28977](https://github.com/bitcoin/bitcoin/pull/28977) (Add Gutter Guard Selector by murchandamus)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1590140722",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27877"
    },
    {
      "event": "labeled",
      "id": 9521863593,
      "node_id": "LE_lADOABII585opn0ezwAAAAI3jBup",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9521863593",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-13T23:33:09Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-14T04:31:35Z",
      "updated_at": "2023-06-14T04:31:35Z",
      "source": {
        "issue": {
          "id": 1750310357,
          "node_id": "PR_kwDOABII585SpVuo",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27846",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27846/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27846/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27846/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27846",
          "number": 27846,
          "state": "closed",
          "state_reason": null,
          "title": "[coinselection] Increase SRD target by change_fee",
          "body": "I discovered via fuzzing of another coin selection approach that at extremely high feerates SRD may find input sets that lead to transactions without change outputs. This is an unintended outcome since SRD is meant to always produce a transaction with a change output—we use other algorithms to specifically search for changeless solutions.\r\n\r\nThe issue occurs when the flat allowance of 50,000 ṩ for change is insufficient to pay for the creation of a change output with a non-dust amount, at and above 1,613 ṩ/vB. Increasing the change budget by `change_fee` makes SRD behave as expected at any feerates.\r\n\r\nNote: The intermittent failures of `test/functional/interface_usdt_mempool.py` are a known issue: https://github.com/bitcoin/bitcoin/issues/27380",
          "user": {
            "login": "murchandamus",
            "id": 4060799,
            "node_id": "MDQ6VXNlcjQwNjA3OTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/murchandamus",
            "html_url": "https://github.com/murchandamus",
            "followers_url": "https://api.github.com/users/murchandamus/followers",
            "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
            "organizations_url": "https://api.github.com/users/murchandamus/orgs",
            "repos_url": "https://api.github.com/users/murchandamus/repos",
            "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/murchandamus/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27846",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27846",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27846.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27846.patch"
          },
          "closed_at": "2023-06-23T20:57:28Z",
          "created_at": "2023-06-09T18:14:27Z",
          "updated_at": "2023-08-25T18:15:50Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-14T06:17:05Z",
      "updated_at": "2023-06-14T06:17:05Z",
      "source": {
        "issue": {
          "id": 1697981640,
          "node_id": "PR_kwDOABII585P4fdY",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27585",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27585/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27585/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27585/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27585",
          "number": 27585,
          "state": "closed",
          "state_reason": null,
          "title": "fuzz: improve `coinselection`",
          "body": "This PR:\r\n\r\n- Moves coin creation to its own function called `CreateCoins`.\r\n- Add coverage for `EligibleForSpending`\r\n- Add coverage for `AddInputs`: get result of each algorithm (srd, knapsack and bnb), call `CreateCoins` and add into them.\r\n- Add coverage for `GetShuffledInputVector` and `GetInputSet` using the result of each algorithm (srd, knapsack and bnb).\r\n- Add coverage for `Merge`: Call SRD with the new utxos and, if successful, try to merge with the previous SRD result.",
          "user": {
            "login": "brunoerg",
            "id": 19480819,
            "node_id": "MDQ6VXNlcjE5NDgwODE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunoerg",
            "html_url": "https://github.com/brunoerg",
            "followers_url": "https://api.github.com/users/brunoerg/followers",
            "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
            "organizations_url": "https://api.github.com/users/brunoerg/orgs",
            "repos_url": "https://api.github.com/users/brunoerg/repos",
            "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/brunoerg/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64585,
              "node_id": "MDU6TGFiZWw2NDU4NQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Bug",
              "name": "Bug",
              "color": "FBBAAB",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 24,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27585",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27585",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27585.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27585.patch"
          },
          "closed_at": "2023-08-24T20:11:47Z",
          "created_at": "2023-05-05T17:54:13Z",
          "updated_at": "2023-09-02T23:40:03Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "renamed",
      "id": 9524587683,
      "node_id": "RTE_lADOABII585opn0ezwAAAAI3tayj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9524587683",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-14T07:19:36Z",
      "rename": {
        "from": "Add CoinGrinder coin selection algorithm",
        "to": "wallet: Add CoinGrinder coin selection algorithm"
      }
    },
    {
      "event": "commented",
      "id": 1591266110,
      "node_id": "IC_kwDOABII585e2Ms-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1591266110",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-14T13:58:17Z",
      "updated_at": "2023-06-14T17:56:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "At this point, I’m mostly looking for Concept reviews.\r\n\r\nSome ideas floating around in the context that I’d love comments on:\r\n\r\n- Also run CoinGrinder when the fees surpass some relative portion of the recipient output amounts\r\n- Only run CoinGrinder if no changeless solution was proposed",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1591266110",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27877"
    },
    {
      "event": "commented",
      "id": 1592803865,
      "node_id": "IC_kwDOABII585e8EIZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1592803865",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-15T10:44:37Z",
      "updated_at": "2023-06-15T10:44:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for exploring this, I think this is an interesting idea! I'll comment based on my specific usage of the wallet for lightning service providers, please bear in mind that this is a very specific use case that is quite different from regular users (see #24795 for early details about this).\r\n\r\nMy understanding of the current goals of coin selection are that it tries to find a good balance between minimizing fees and consolidating utxos. The latter actually helps the former: consolidating utxos is usually good for performance, and if you do it when fees are low, you will avoid paying more fees in the future when fees are higher because you'll be able to use less inputs in your future transactions.\r\n\r\nIn the case of a lightning service provider, we'd rather avoid consolidating utxos, and are ready to pay more fees to keep a large enough utxo set to satisfy our users' needs. The main reasons for that are that:\r\n\r\n- we are using 0-conf (in a setup where the user is trusting us to not double-spend)\r\n- we are using low fees for those transactions (it's ok to keep transactions unconfirmed until the mempool clears, this is how we can keep the cost low for users)\r\n- the change outputs from most of those transactions are _unsafe_ because they may be double-spent by a commitment transaction (and thus generally unusable until the the transaction confirms, except when used for that same user)\r\n\r\nThat last point is a consequence of [splicing](https://github.com/lightning/bolts/pull/863), let me know if you want me to explain that point in more details.\r\n\r\nIf we run out of _safe_ utxos, we cannot onboard new users, which may require us to transfer funds from a cold wallet while making sure we're creating many utxos, at a time where the on-chain fees may be high. Our ideal wallet would maintain a large pool of utxos of various sizes, to ensure we're always ready to onboard new users or sell liquidity to existing users.\r\n\r\nI understand that this is the opposite of what most end users want and can't be achieved by the same algorithm: that's why I would find it very useful to have various coin selection algorithms in bitcoin core, that are tuned to different profiles/scenarios. I like that this algorithm feels like something we could use (at all feerates) to keep a wallet state that makes more sense for us.",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1592803865",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27877"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9544446803,
      "node_id": "HRFPE_lADOABII585opn0ezwAAAAI45LNT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9544446803",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-15T20:01:36Z"
    },
    {
      "event": "commented",
      "id": 1593666325,
      "node_id": "IC_kwDOABII585e_WsV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1593666325",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-15T20:11:04Z",
      "updated_at": "2023-06-15T20:12:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "Changes in last force-push: https://github.com/bitcoin/bitcoin/compare/10621c6c4499ba32ff3b7f0bd11b0351f36982b4..0446986f8dd87db29153618d380d159ec0016c1a\r\n\r\nThanks for your thoughts, @t-bast. Your comment inspired a small optimization. \r\nCoinGrinder has been simplified by keeping only track of the input weight (instead of weight and waste), and minimizing input weight throughout. This reduced the number of parameters necessary to call CoinGrinder, simplified the input set traversal, and allows CoinGrinder to be used at all feerates instead of just high feerates. It is however still only called for feerates above 100 ṩ/vB from [`spend.cpp`](https://github.com/bitcoin/bitcoin/pull/27877/files#diff-6e06b309cd494ef5da4e78aa0929a980767edd12342137f268b9219167064d13R586) at this time.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1593666325",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27877"
    },
    {
      "event": "mentioned",
      "id": 9544544983,
      "node_id": "MEE_lADOABII585opn0ezwAAAAI45jLX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9544544983",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-15T20:12:42Z"
    },
    {
      "event": "subscribed",
      "id": 9544544994,
      "node_id": "SE_lADOABII585opn0ezwAAAAI45jLi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9544544994",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-15T20:12:43Z"
    },
    {
      "event": "commented",
      "id": 1598451117,
      "node_id": "IC_kwDOABII585fRm2t",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1598451117",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-20T09:40:40Z",
      "updated_at": "2023-06-20T09:40:40Z",
      "author_association": "MEMBER",
      "body": "Ran the fuzzer for a bit:\r\n\r\n```\r\nfuzz: wallet/test/fuzz/coinselection.cpp:102: void wallet::coin_grinder_fuzz_target(FuzzBufferType): Assertion `result_knapsack->GetWeight() >= result_cg->GetWeight()' failed.\r\n```\r\n\r\nInput to reproduce:\r\n```sh\r\n$ echo \"d3d3/wF383d3d3d3d3d3d3d3d3d5d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3fzd3d3d3d3d7BE\r\nWnd3d3d3d3V3d3d3d3d3d3l6d3d3d3d3d3f///8Fd3d3d3d3d3d3d3d3d1d3d3d3d3d3d3d3d3d3\r\nd3d3d3d3d3d3d3d3d3d3d3d3Mnd3d3d3d3d5d3d3d3d3YS5hYWFhYWFhYWFhYWFhYWFhYWFhYUBh\r\nYWEuAAAACmFhWWFhYWFhd3d3d3d3d3d3d3d3dzp3d3d3d3d3d3d3d3d3d3d3d/N3d3d3d3d3d3d3\r\nd3d3eXd3d3d3d3d3d3d1d3d3d3d3d3d3dzJ3d3d3d3d3eXd3d3d3d3d3d3d1d3d3d3d3d3d3dzJ3\r\nd3d3d3d3d3d3d3d3d3d3dyh3d3d3d3d3dxcC+xc=\" | base64 -d > coingrinder_crash\r\n```",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1598451117",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27877"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-20T12:36:00Z",
      "updated_at": "2023-06-20T12:36:00Z",
      "source": {
        "issue": {
          "id": 1499862406,
          "node_id": "I_kwDOIQ-abM5ZZhWG",
          "url": "https://api.github.com/repos/maflcko/DrahtBot/issues/25",
          "repository_url": "https://api.github.com/repos/maflcko/DrahtBot",
          "labels_url": "https://api.github.com/repos/maflcko/DrahtBot/issues/25/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/maflcko/DrahtBot/issues/25/comments",
          "events_url": "https://api.github.com/repos/maflcko/DrahtBot/issues/25/events",
          "html_url": "https://github.com/maflcko/DrahtBot/issues/25",
          "number": 25,
          "state": "closed",
          "state_reason": "completed",
          "title": "Provide test coverage for pull requests in summary comment",
          "body": "I think it would be useful to have a test coverage report for pull requests.\r\nIt could be a `bitcoin/bitcoin` cirrus job that generates the report and sends it back to DrahtBot with a webhook to display it in the summary comment.\r\n",
          "user": {
            "login": "aureleoules",
            "id": 22493292,
            "node_id": "MDQ6VXNlcjIyNDkzMjky",
            "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aureleoules",
            "html_url": "https://github.com/aureleoules",
            "followers_url": "https://api.github.com/users/aureleoules/followers",
            "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
            "organizations_url": "https://api.github.com/users/aureleoules/orgs",
            "repos_url": "https://api.github.com/users/aureleoules/repos",
            "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/aureleoules/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 15,
          "closed_at": "2023-10-05T16:23:20Z",
          "created_at": "2022-12-16T09:20:04Z",
          "updated_at": "2023-10-05T16:23:20Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1600498713,
      "node_id": "IC_kwDOABII585fZawZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1600498713",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T09:24:24Z",
      "updated_at": "2023-06-21T09:24:24Z",
      "author_association": "MEMBER",
      "body": "I would like to see if the CI catches the [crash](https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1598451117), now that #27919 has been merged. @Xekyo would you mind rebasing?",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1600498713",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27877"
    },
    {
      "event": "mentioned",
      "id": 9590903547,
      "node_id": "MEE_lADOABII585opn0ezwAAAAI7qZL7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9590903547",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T09:24:24Z"
    },
    {
      "event": "subscribed",
      "id": 9590903564,
      "node_id": "SE_lADOABII585opn0ezwAAAAI7qZMM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9590903564",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T09:24:24Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9595682476,
      "node_id": "HRFPE_lADOABII585opn0ezwAAAAI78n6s",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9595682476",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T15:55:50Z"
    },
    {
      "event": "commented",
      "id": 1601246132,
      "node_id": "IC_kwDOABII585fcRO0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1601246132",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T17:07:28Z",
      "updated_at": "2023-06-21T17:24:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "@dergoegge: Thanks, I discovered the issue myself over the weekend and was exploring yesterday whether I could come up with another optimization. In the end, I fixed the fuzz test by only comparing the weight with SRD and Knapsack when CoinGrinder actually concluded searching the combination space exhaustively. Since finding the lowest weight input set is an NP-hard problem, it’s clearly expected that we can generate UTXO pools for which CoinGrinder will not be able to finish the search in 100k attempts, it was naïve to expect that the fuzz test wouldn’t eventually find such a case.\r\n\r\nYour crash seed passes now.\r\n\r\nI’m sorry I’m only seeing your comment after pushing the fix.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1601246132",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27877"
    },
    {
      "event": "mentioned",
      "id": 9596525854,
      "node_id": "MEE_lADOABII585opn0ezwAAAAI7_10e",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9596525854",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T17:07:29Z"
    },
    {
      "event": "subscribed",
      "id": 9596525871,
      "node_id": "SE_lADOABII585opn0ezwAAAAI7_10v",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9596525871",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T17:07:29Z"
    },
    {
      "event": "commented",
      "id": 1601255030,
      "node_id": "IC_kwDOABII585fcTZ2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1601255030",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T17:10:28Z",
      "updated_at": "2023-06-21T17:10:28Z",
      "author_association": "MEMBER",
      "body": "I think you can still rebase to unblock the CI in any case?",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1601255030",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27877"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9596579409,
      "node_id": "HRFPE_lADOABII585opn0ezwAAAAI8AC5R",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9596579409",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T17:11:27Z"
    },
    {
      "event": "commented",
      "id": 1601273279,
      "node_id": "IC_kwDOABII585fcX2_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1601273279",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T17:16:36Z",
      "updated_at": "2023-06-21T17:16:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased on Master.\r\n\r\nChanges since last rebase: SelectionResult now has a record if BnB or CoinGrinder run out of tries and thus have not found the optimal solution.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1601273279",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27877"
    },
    {
      "event": "unlabeled",
      "id": 9597363787,
      "node_id": "UNLE_lADOABII585opn0ezwAAAAI8DCZL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9597363787",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T18:35:18Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 9597364241,
      "node_id": "LE_lADOABII585opn0ezwAAAAI8DCgR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9597364241",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T18:35:21Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "labeled",
      "id": 9623059854,
      "node_id": "LE_lADOABII585opn0ezwAAAAI9lD2O",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9623059854",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-23T22:01:20Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9639213027,
      "node_id": "HRFPE_lADOABII585opn0ezwAAAAI-irfj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9639213027",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-26T13:47:40Z"
    },
    {
      "event": "unlabeled",
      "id": 9640007501,
      "node_id": "UNLE_lADOABII585opn0ezwAAAAI-ltdN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9640007501",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-26T14:41:28Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "benthecarman",
        "id": 15256660,
        "node_id": "MDQ6VXNlcjE1MjU2NjYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benthecarman",
        "html_url": "https://github.com/benthecarman",
        "followers_url": "https://api.github.com/users/benthecarman/followers",
        "following_url": "https://api.github.com/users/benthecarman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benthecarman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benthecarman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
        "organizations_url": "https://api.github.com/users/benthecarman/orgs",
        "repos_url": "https://api.github.com/users/benthecarman/repos",
        "events_url": "https://api.github.com/users/benthecarman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benthecarman/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-08T16:33:07Z",
      "updated_at": "2023-08-08T16:33:07Z",
      "source": {
        "issue": {
          "id": 1827802190,
          "node_id": "I_kwDOExOzMs5s8gxO",
          "url": "https://api.github.com/repos/austinbitdevs/austinbitdevs.com/issues/24",
          "repository_url": "https://api.github.com/repos/austinbitdevs/austinbitdevs.com",
          "labels_url": "https://api.github.com/repos/austinbitdevs/austinbitdevs.com/issues/24/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/austinbitdevs/austinbitdevs.com/issues/24/comments",
          "events_url": "https://api.github.com/repos/austinbitdevs/austinbitdevs.com/issues/24/events",
          "html_url": "https://github.com/austinbitdevs/austinbitdevs.com/issues/24",
          "number": 24,
          "state": "closed",
          "state_reason": "completed",
          "title": "August ‘23 Topics",
          "body": null,
          "user": {
            "login": "bucko13",
            "id": 4344978,
            "node_id": "MDQ6VXNlcjQzNDQ5Nzg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4344978?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bucko13",
            "html_url": "https://github.com/bucko13",
            "followers_url": "https://api.github.com/users/bucko13/followers",
            "following_url": "https://api.github.com/users/bucko13/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/bucko13/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/bucko13/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/bucko13/subscriptions",
            "organizations_url": "https://api.github.com/users/bucko13/orgs",
            "repos_url": "https://api.github.com/users/bucko13/repos",
            "events_url": "https://api.github.com/users/bucko13/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/bucko13/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "COLLABORATOR",
          "locked": false,
          "comments": 9,
          "closed_at": "2023-08-19T21:51:51Z",
          "created_at": "2023-07-30T04:41:43Z",
          "updated_at": "2023-08-19T21:51:51Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "notmandatory",
        "id": 4724730,
        "node_id": "MDQ6VXNlcjQ3MjQ3MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4724730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/notmandatory",
        "html_url": "https://github.com/notmandatory",
        "followers_url": "https://api.github.com/users/notmandatory/followers",
        "following_url": "https://api.github.com/users/notmandatory/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/notmandatory/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/notmandatory/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/notmandatory/subscriptions",
        "organizations_url": "https://api.github.com/users/notmandatory/orgs",
        "repos_url": "https://api.github.com/users/notmandatory/repos",
        "events_url": "https://api.github.com/users/notmandatory/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/notmandatory/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-10T00:33:57Z",
      "updated_at": "2023-08-10T00:33:57Z",
      "source": {
        "issue": {
          "id": 1795526897,
          "node_id": "I_kwDOIDIXu85rBZDx",
          "url": "https://api.github.com/repos/NashBitDevs/nashbitdevs.org/issues/11",
          "repository_url": "https://api.github.com/repos/NashBitDevs/nashbitdevs.org",
          "labels_url": "https://api.github.com/repos/NashBitDevs/nashbitdevs.org/issues/11/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/NashBitDevs/nashbitdevs.org/issues/11/comments",
          "events_url": "https://api.github.com/repos/NashBitDevs/nashbitdevs.org/issues/11/events",
          "html_url": "https://github.com/NashBitDevs/nashbitdevs.org/issues/11",
          "number": 11,
          "state": "closed",
          "state_reason": "completed",
          "title": "Socratic Seminar #10 Topics",
          "body": "August 15, 2023 @ 5:00p\r\n\r\nAdd comments below to add or comment on topics for [Socratic Seminar 10](https://nashbitdevs.org/socratic-seminar-10/). See also [\"Where to Find Topics for Future Seminars\"](https://nashbitdevs.org/about/find-topics/).\r\n\r\nCategories:\r\n\r\n* Events\r\n* News\r\n* New Work/Research\r\n* Bitcoin Projects\r\n* Lightning Projects",
          "user": {
            "login": "notmandatory",
            "id": 4724730,
            "node_id": "MDQ6VXNlcjQ3MjQ3MzA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4724730?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/notmandatory",
            "html_url": "https://github.com/notmandatory",
            "followers_url": "https://api.github.com/users/notmandatory/followers",
            "following_url": "https://api.github.com/users/notmandatory/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/notmandatory/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/notmandatory/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/notmandatory/subscriptions",
            "organizations_url": "https://api.github.com/users/notmandatory/orgs",
            "repos_url": "https://api.github.com/users/notmandatory/repos",
            "events_url": "https://api.github.com/users/notmandatory/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/notmandatory/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignee": {
            "login": "notmandatory",
            "id": 4724730,
            "node_id": "MDQ6VXNlcjQ3MjQ3MzA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4724730?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/notmandatory",
            "html_url": "https://github.com/notmandatory",
            "followers_url": "https://api.github.com/users/notmandatory/followers",
            "following_url": "https://api.github.com/users/notmandatory/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/notmandatory/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/notmandatory/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/notmandatory/subscriptions",
            "organizations_url": "https://api.github.com/users/notmandatory/orgs",
            "repos_url": "https://api.github.com/users/notmandatory/repos",
            "events_url": "https://api.github.com/users/notmandatory/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/notmandatory/received_events",
            "type": "User",
            "site_admin": false
          },
          "assignees": [
            {
              "login": "notmandatory",
              "id": 4724730,
              "node_id": "MDQ6VXNlcjQ3MjQ3MzA=",
              "avatar_url": "https://avatars.githubusercontent.com/u/4724730?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/notmandatory",
              "html_url": "https://github.com/notmandatory",
              "followers_url": "https://api.github.com/users/notmandatory/followers",
              "following_url": "https://api.github.com/users/notmandatory/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/notmandatory/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/notmandatory/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/notmandatory/subscriptions",
              "organizations_url": "https://api.github.com/users/notmandatory/orgs",
              "repos_url": "https://api.github.com/users/notmandatory/repos",
              "events_url": "https://api.github.com/users/notmandatory/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/notmandatory/received_events",
              "type": "User",
              "site_admin": false
            },
            {
              "login": "reez",
              "id": 6657488,
              "node_id": "MDQ6VXNlcjY2NTc0ODg=",
              "avatar_url": "https://avatars.githubusercontent.com/u/6657488?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/reez",
              "html_url": "https://github.com/reez",
              "followers_url": "https://api.github.com/users/reez/followers",
              "following_url": "https://api.github.com/users/reez/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/reez/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/reez/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/reez/subscriptions",
              "organizations_url": "https://api.github.com/users/reez/orgs",
              "repos_url": "https://api.github.com/users/reez/repos",
              "events_url": "https://api.github.com/users/reez/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/reez/received_events",
              "type": "User",
              "site_admin": false
            },
            {
              "login": "phjlljp",
              "id": 76761332,
              "node_id": "MDQ6VXNlcjc2NzYxMzMy",
              "avatar_url": "https://avatars.githubusercontent.com/u/76761332?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/phjlljp",
              "html_url": "https://github.com/phjlljp",
              "followers_url": "https://api.github.com/users/phjlljp/followers",
              "following_url": "https://api.github.com/users/phjlljp/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/phjlljp/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/phjlljp/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/phjlljp/subscriptions",
              "organizations_url": "https://api.github.com/users/phjlljp/orgs",
              "repos_url": "https://api.github.com/users/phjlljp/repos",
              "events_url": "https://api.github.com/users/phjlljp/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/phjlljp/received_events",
              "type": "User",
              "site_admin": false
            }
          ],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 8,
          "closed_at": "2023-08-30T01:17:47Z",
          "created_at": "2023-07-09T19:15:04Z",
          "updated_at": "2023-08-30T01:17:47Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "lucasdcf",
        "id": 68931156,
        "node_id": "MDQ6VXNlcjY4OTMxMTU2",
        "avatar_url": "https://avatars.githubusercontent.com/u/68931156?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lucasdcf",
        "html_url": "https://github.com/lucasdcf",
        "followers_url": "https://api.github.com/users/lucasdcf/followers",
        "following_url": "https://api.github.com/users/lucasdcf/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lucasdcf/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lucasdcf/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lucasdcf/subscriptions",
        "organizations_url": "https://api.github.com/users/lucasdcf/orgs",
        "repos_url": "https://api.github.com/users/lucasdcf/repos",
        "events_url": "https://api.github.com/users/lucasdcf/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lucasdcf/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-29T02:27:47Z",
      "updated_at": "2023-08-29T02:27:47Z",
      "source": {
        "issue": {
          "id": 1834617363,
          "node_id": "I_kwDOHi0ngs5tWgoT",
          "url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org/issues/9",
          "repository_url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org",
          "labels_url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org/issues/9/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org/issues/9/comments",
          "events_url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org/issues/9/events",
          "html_url": "https://github.com/saopaulobitdevs/saopaulobitdevs.org/issues/9",
          "number": 9,
          "state": "closed",
          "state_reason": "completed",
          "title": "Tópicos Agosto/2023",
          "body": "Issue reservada para proposta de tópicos para o encontro de agosto de 2023",
          "user": {
            "login": "lorenzolfm",
            "id": 38786333,
            "node_id": "MDQ6VXNlcjM4Nzg2MzMz",
            "avatar_url": "https://avatars.githubusercontent.com/u/38786333?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lorenzolfm",
            "html_url": "https://github.com/lorenzolfm",
            "followers_url": "https://api.github.com/users/lorenzolfm/followers",
            "following_url": "https://api.github.com/users/lorenzolfm/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/lorenzolfm/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/lorenzolfm/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/lorenzolfm/subscriptions",
            "organizations_url": "https://api.github.com/users/lorenzolfm/orgs",
            "repos_url": "https://api.github.com/users/lorenzolfm/repos",
            "events_url": "https://api.github.com/users/lorenzolfm/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/lorenzolfm/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 5694222796,
              "node_id": "LA_kwDOHi0ngs8AAAABU2bxzA",
              "url": "https://api.github.com/repos/saopaulobitdevs/saopaulobitdevs.org/labels/discussion",
              "name": "discussion",
              "description": "",
              "color": "E9652D",
              "default": false
            }
          ],
          "assignee": {
            "login": "jaonoctus",
            "id": 7918067,
            "node_id": "MDQ6VXNlcjc5MTgwNjc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7918067?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jaonoctus",
            "html_url": "https://github.com/jaonoctus",
            "followers_url": "https://api.github.com/users/jaonoctus/followers",
            "following_url": "https://api.github.com/users/jaonoctus/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jaonoctus/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jaonoctus/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jaonoctus/subscriptions",
            "organizations_url": "https://api.github.com/users/jaonoctus/orgs",
            "repos_url": "https://api.github.com/users/jaonoctus/repos",
            "events_url": "https://api.github.com/users/jaonoctus/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jaonoctus/received_events",
            "type": "User",
            "site_admin": false
          },
          "assignees": [
            {
              "login": "jaonoctus",
              "id": 7918067,
              "node_id": "MDQ6VXNlcjc5MTgwNjc=",
              "avatar_url": "https://avatars.githubusercontent.com/u/7918067?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/jaonoctus",
              "html_url": "https://github.com/jaonoctus",
              "followers_url": "https://api.github.com/users/jaonoctus/followers",
              "following_url": "https://api.github.com/users/jaonoctus/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/jaonoctus/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/jaonoctus/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/jaonoctus/subscriptions",
              "organizations_url": "https://api.github.com/users/jaonoctus/orgs",
              "repos_url": "https://api.github.com/users/jaonoctus/repos",
              "events_url": "https://api.github.com/users/jaonoctus/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/jaonoctus/received_events",
              "type": "User",
              "site_admin": false
            },
            {
              "login": "brunoerg",
              "id": 19480819,
              "node_id": "MDQ6VXNlcjE5NDgwODE5",
              "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/brunoerg",
              "html_url": "https://github.com/brunoerg",
              "followers_url": "https://api.github.com/users/brunoerg/followers",
              "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
              "organizations_url": "https://api.github.com/users/brunoerg/orgs",
              "repos_url": "https://api.github.com/users/brunoerg/repos",
              "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/brunoerg/received_events",
              "type": "User",
              "site_admin": false
            },
            {
              "login": "lorenzolfm",
              "id": 38786333,
              "node_id": "MDQ6VXNlcjM4Nzg2MzMz",
              "avatar_url": "https://avatars.githubusercontent.com/u/38786333?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/lorenzolfm",
              "html_url": "https://github.com/lorenzolfm",
              "followers_url": "https://api.github.com/users/lorenzolfm/followers",
              "following_url": "https://api.github.com/users/lorenzolfm/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/lorenzolfm/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/lorenzolfm/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/lorenzolfm/subscriptions",
              "organizations_url": "https://api.github.com/users/lorenzolfm/orgs",
              "repos_url": "https://api.github.com/users/lorenzolfm/repos",
              "events_url": "https://api.github.com/users/lorenzolfm/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/lorenzolfm/received_events",
              "type": "User",
              "site_admin": false
            },
            {
              "login": "lucasdcf",
              "id": 68931156,
              "node_id": "MDQ6VXNlcjY4OTMxMTU2",
              "avatar_url": "https://avatars.githubusercontent.com/u/68931156?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/lucasdcf",
              "html_url": "https://github.com/lucasdcf",
              "followers_url": "https://api.github.com/users/lucasdcf/followers",
              "following_url": "https://api.github.com/users/lucasdcf/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/lucasdcf/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/lucasdcf/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/lucasdcf/subscriptions",
              "organizations_url": "https://api.github.com/users/lucasdcf/orgs",
              "repos_url": "https://api.github.com/users/lucasdcf/repos",
              "events_url": "https://api.github.com/users/lucasdcf/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/lucasdcf/received_events",
              "type": "User",
              "site_admin": false
            }
          ],
          "author_association": "COLLABORATOR",
          "locked": false,
          "comments": 29,
          "closed_at": "2023-08-31T17:27:29Z",
          "created_at": "2023-08-03T09:08:17Z",
          "updated_at": "2023-08-31T17:27:29Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "notmandatory",
        "id": 4724730,
        "node_id": "MDQ6VXNlcjQ3MjQ3MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4724730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/notmandatory",
        "html_url": "https://github.com/notmandatory",
        "followers_url": "https://api.github.com/users/notmandatory/followers",
        "following_url": "https://api.github.com/users/notmandatory/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/notmandatory/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/notmandatory/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/notmandatory/subscriptions",
        "organizations_url": "https://api.github.com/users/notmandatory/orgs",
        "repos_url": "https://api.github.com/users/notmandatory/repos",
        "events_url": "https://api.github.com/users/notmandatory/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/notmandatory/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-30T01:18:33Z",
      "updated_at": "2023-08-30T01:18:33Z",
      "source": {
        "issue": {
          "id": 1854024535,
          "node_id": "I_kwDOIDIXu85ugitX",
          "url": "https://api.github.com/repos/NashBitDevs/nashbitdevs.org/issues/12",
          "repository_url": "https://api.github.com/repos/NashBitDevs/nashbitdevs.org",
          "labels_url": "https://api.github.com/repos/NashBitDevs/nashbitdevs.org/issues/12/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/NashBitDevs/nashbitdevs.org/issues/12/comments",
          "events_url": "https://api.github.com/repos/NashBitDevs/nashbitdevs.org/issues/12/events",
          "html_url": "https://github.com/NashBitDevs/nashbitdevs.org/issues/12",
          "number": 12,
          "state": "closed",
          "state_reason": "completed",
          "title": "Socratic Seminar #11 Topics",
          "body": "September 12, 2023 @ 5:00p\r\n\r\nAdd comments below to add or comment on topics for [Socratic Seminar 11](https://nashbitdevs.org/socratic-seminar-11/). See also [\"Where to Find Topics for Future Seminars\"](https://nashbitdevs.org/about/find-topics/).\r\n\r\nCategories:\r\n\r\n* Events\r\n* News\r\n* New Work/Research\r\n* Bitcoin Projects\r\n* Lightning Projects",
          "user": {
            "login": "notmandatory",
            "id": 4724730,
            "node_id": "MDQ6VXNlcjQ3MjQ3MzA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4724730?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/notmandatory",
            "html_url": "https://github.com/notmandatory",
            "followers_url": "https://api.github.com/users/notmandatory/followers",
            "following_url": "https://api.github.com/users/notmandatory/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/notmandatory/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/notmandatory/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/notmandatory/subscriptions",
            "organizations_url": "https://api.github.com/users/notmandatory/orgs",
            "repos_url": "https://api.github.com/users/notmandatory/repos",
            "events_url": "https://api.github.com/users/notmandatory/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/notmandatory/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignee": {
            "login": "notmandatory",
            "id": 4724730,
            "node_id": "MDQ6VXNlcjQ3MjQ3MzA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4724730?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/notmandatory",
            "html_url": "https://github.com/notmandatory",
            "followers_url": "https://api.github.com/users/notmandatory/followers",
            "following_url": "https://api.github.com/users/notmandatory/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/notmandatory/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/notmandatory/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/notmandatory/subscriptions",
            "organizations_url": "https://api.github.com/users/notmandatory/orgs",
            "repos_url": "https://api.github.com/users/notmandatory/repos",
            "events_url": "https://api.github.com/users/notmandatory/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/notmandatory/received_events",
            "type": "User",
            "site_admin": false
          },
          "assignees": [
            {
              "login": "notmandatory",
              "id": 4724730,
              "node_id": "MDQ6VXNlcjQ3MjQ3MzA=",
              "avatar_url": "https://avatars.githubusercontent.com/u/4724730?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/notmandatory",
              "html_url": "https://github.com/notmandatory",
              "followers_url": "https://api.github.com/users/notmandatory/followers",
              "following_url": "https://api.github.com/users/notmandatory/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/notmandatory/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/notmandatory/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/notmandatory/subscriptions",
              "organizations_url": "https://api.github.com/users/notmandatory/orgs",
              "repos_url": "https://api.github.com/users/notmandatory/repos",
              "events_url": "https://api.github.com/users/notmandatory/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/notmandatory/received_events",
              "type": "User",
              "site_admin": false
            },
            {
              "login": "reez",
              "id": 6657488,
              "node_id": "MDQ6VXNlcjY2NTc0ODg=",
              "avatar_url": "https://avatars.githubusercontent.com/u/6657488?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/reez",
              "html_url": "https://github.com/reez",
              "followers_url": "https://api.github.com/users/reez/followers",
              "following_url": "https://api.github.com/users/reez/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/reez/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/reez/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/reez/subscriptions",
              "organizations_url": "https://api.github.com/users/reez/orgs",
              "repos_url": "https://api.github.com/users/reez/repos",
              "events_url": "https://api.github.com/users/reez/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/reez/received_events",
              "type": "User",
              "site_admin": false
            },
            {
              "login": "phjlljp",
              "id": 76761332,
              "node_id": "MDQ6VXNlcjc2NzYxMzMy",
              "avatar_url": "https://avatars.githubusercontent.com/u/76761332?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/phjlljp",
              "html_url": "https://github.com/phjlljp",
              "followers_url": "https://api.github.com/users/phjlljp/followers",
              "following_url": "https://api.github.com/users/phjlljp/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/phjlljp/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/phjlljp/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/phjlljp/subscriptions",
              "organizations_url": "https://api.github.com/users/phjlljp/orgs",
              "repos_url": "https://api.github.com/users/phjlljp/repos",
              "events_url": "https://api.github.com/users/phjlljp/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/phjlljp/received_events",
              "type": "User",
              "site_admin": false
            }
          ],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 8,
          "closed_at": "2023-10-02T15:14:42Z",
          "created_at": "2023-08-16T23:26:53Z",
          "updated_at": "2023-10-02T15:14:42Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "vnprc",
        "id": 9425366,
        "node_id": "MDQ6VXNlcjk0MjUzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9425366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vnprc",
        "html_url": "https://github.com/vnprc",
        "followers_url": "https://api.github.com/users/vnprc/followers",
        "following_url": "https://api.github.com/users/vnprc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vnprc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vnprc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vnprc/subscriptions",
        "organizations_url": "https://api.github.com/users/vnprc/orgs",
        "repos_url": "https://api.github.com/users/vnprc/repos",
        "events_url": "https://api.github.com/users/vnprc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vnprc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-06T18:03:54Z",
      "updated_at": "2023-09-06T18:03:54Z",
      "source": {
        "issue": {
          "id": 1844188934,
          "node_id": "I_kwDOGW9Qmc5t7BcG",
          "url": "https://api.github.com/repos/TriangleBitDevs/TriangleBitDevs.github.io/issues/11",
          "repository_url": "https://api.github.com/repos/TriangleBitDevs/TriangleBitDevs.github.io",
          "labels_url": "https://api.github.com/repos/TriangleBitDevs/TriangleBitDevs.github.io/issues/11/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/TriangleBitDevs/TriangleBitDevs.github.io/issues/11/comments",
          "events_url": "https://api.github.com/repos/TriangleBitDevs/TriangleBitDevs.github.io/issues/11/events",
          "html_url": "https://github.com/TriangleBitDevs/TriangleBitDevs.github.io/issues/11",
          "number": 11,
          "state": "closed",
          "state_reason": "completed",
          "title": "Socratic Seminar 21",
          "body": "# Welcome\r\n\r\nHello Bitcoiners! This is where we'll organize the topics of discussion for our upcoming Socratic Seminar.\r\n\r\nPlease use this issue to suggest topics that you'd like to see discussed at the seminar. To suggest a topic, simply add a new comment to this issue with the topic title as the comment's title.\r\n\r\nAs we work through organizing the topics, feel free to edit and update your comments as needed. This will help us keep everything organized and easy to follow.\r\n\r\nTo help get us started, here are some main topics of discussion that we could consider:\r\n\r\n- Bitcoin Core\r\n- Lightning Network\r\n- Scaling\r\n- Privacy\r\n- Media\r\n- Miscellaneous\r\n-\r\nRemember, this is **Bitcoin only**, do not post about your favorite clown-coin.<br>\r\nThank you for your contributions and we look forward to a great seminar!\r\n",
          "user": {
            "login": "vnprc",
            "id": 9425366,
            "node_id": "MDQ6VXNlcjk0MjUzNjY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9425366?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vnprc",
            "html_url": "https://github.com/vnprc",
            "followers_url": "https://api.github.com/users/vnprc/followers",
            "following_url": "https://api.github.com/users/vnprc/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/vnprc/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/vnprc/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/vnprc/subscriptions",
            "organizations_url": "https://api.github.com/users/vnprc/orgs",
            "repos_url": "https://api.github.com/users/vnprc/repos",
            "events_url": "https://api.github.com/users/vnprc/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/vnprc/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "COLLABORATOR",
          "locked": false,
          "comments": 5,
          "closed_at": "2023-10-30T02:16:37Z",
          "created_at": "2023-08-09T23:45:05Z",
          "updated_at": "2023-10-30T02:16:37Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1615733605,
      "node_id": "PRR_kwDOABII585gTiNl",
      "url": null,
      "actor": null,
      "commit_id": "49ec2d4ada6d9abb43c2a5f35dd6f2e5666157f9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#pullrequestreview-1615733605",
      "submitted_at": "2023-09-07T15:37:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
    },
    {
      "event": "reviewed",
      "id": 1616104896,
      "node_id": "PRR_kwDOABII585gU83A",
      "url": null,
      "actor": null,
      "commit_id": "cf14a72859a2eaf42a24a2ea3125bdadde5f6611",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#pullrequestreview-1616104896",
      "submitted_at": "2023-09-07T19:23:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10387611619,
      "node_id": "HRFPE_lADOABII585opn0ezwAAAAJrJl_j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10387611619",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-15T21:31:11Z"
    },
    {
      "event": "reviewed",
      "id": 1629756750,
      "node_id": "PRR_kwDOABII585hJB1O",
      "url": null,
      "actor": null,
      "commit_id": "4bfcfa4d124192a0f711f65faf77c4d81b47081e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Rebased. Fixed up a couple comments and improved a commit message",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#pullrequestreview-1629756750",
      "submitted_at": "2023-09-15T21:35:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10480109663,
      "node_id": "HRFPE_lADOABII585opn0ezwAAAAJwqchf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10480109663",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-26T21:09:23Z"
    },
    {
      "event": "labeled",
      "id": 10480780469,
      "node_id": "LE_lADOABII585opn0ezwAAAAJwtAS1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10480780469",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-26T23:03:17Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 10483625802,
      "node_id": "UNLE_lADOABII585opn0ezwAAAAJw329K",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10483625802",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-27T07:27:39Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1834473406,
      "node_id": "IC_kwDOABII585tV9e-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1834473406",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-30T20:10:42Z",
      "updated_at": "2023-11-30T22:17:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK here or https://github.com/bitcoin/bitcoin/pull/28977 based on today's IRC discussion https://bitcoin-irc.chaincode.com/bitcoin-core-dev/2023-11-30#986727.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1834473406",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27877"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-30T21:26:01Z",
      "updated_at": "2023-11-30T21:26:01Z",
      "source": {
        "issue": {
          "id": 2019534641,
          "node_id": "PR_kwDOABII585g08U6",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28977",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28977/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28977/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28977/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28977",
          "number": 28977,
          "state": "open",
          "state_reason": null,
          "title": "Add Gutter Guard Selector",
          "body": "***Please refer to the [topic on Delving Bitcoin](https://delvingbitcoin.org/t/gutterguard-and-coingrinder-simulation-results/279) discussing Gutter Guard/Coingrinder simulation results.***\r\n\r\nGutter Guard Selector bounds the worst case on coin selection outcomes by ensuring that there is at least one candidate input set that exceeds the minimal necessary input count by at most three.\r\n\r\nDoes a random selection limited to three more output groups than largest-first selection would select to fund the transaction. If the limit is exceeded during selection, the output group with the lowest effective value is discarded.\r\n\r\nMotivations\r\n---\r\n\r\n- At high feerates, using unnecessary inputs can [significantly increase the fees](https://bitcoin.stackexchange.com/q/120408/5406)\r\n- Users are upset when fees are relatively large compared to the amount sent\r\n- [Minimizing the input set](https://github.com/bitcoin/bitcoin/pull/27877) is an NP-hard problem\r\n- Always minimizing the weight of the input set can lead to fragmentation of the wallet’s UTXO pool\r\n\r\nApproach\r\n---\r\n\r\nBitcoin Core uses multiple coin selection algorithms to generate candidate input sets. It then picks the least wasteful input set per the weight metric, but none of the deployed algorithms explicitly look for low-weight input sets. Gutter Guard Selector determines a likely minimum count `c` of output groups that are necessary to fund the transaction via largest-first selection. It then randomly selects output groups into a lowest-effective-value heap. If the heap exceeds `c + 3` output groups, the output group with the lowest-effective value is discarded. It then checks whether the selection can fund the transaction. This approach will always succeed given the effective value available exceeds the selection target.\r\n\r\nTrade-offs\r\n---\r\n\r\nLargest-first selection (LF) (and to a lesser degree an approach that minimizes the weight of an input set) might grind a wallet’s UTXO pool to dust if overused. Incoming payments grow the wallet’s UTXO pool, while transactions with a single input and a change output result in the same UTXO count as before.  LF will additionally decrease range of amounts in the wallet by reducing the amount of the supreme element.\r\n\r\nBranch and Bound looks for a changeless input set. If there are multiple solutions, it prefers the one with the lowest waste, but there might not be a solution, or even the least wasteful one could be composed of many inputs. Knapsack minimizes the distance between target amount and selected amount which is independent from the input set’s weight. Single Random Draw just does a single random drawing from the UTXO pool—if there are a ton of UTXOs in the wallet, this will likely result in a large input set. While we pick the least wasteful among the presented input set candidates, there is no guarantee that any of the three deployed algorithms will produce a thrifty input set.\r\n\r\nIn contrast, Gutter Guard Selector is expected to reduce the UTXO pool of a fragmented wallet by at least three UTXOs. When many UTXOs exist that are larger than the target, a solution with fewer inputs and less weight may be found. When transactions with low feerates are being built, the waste metric prefers heavier input sets which may be proposed by other coin selection algorithms anyway. At high feerates, Gutter Guard Selector ensures that there is an input set candidate that isn’t [absurdly wasteful](https://bitcoin.stackexchange.com/q/100437/5406) and therefore delimits the worst case.",
          "user": {
            "login": "murchandamus",
            "id": 4060799,
            "node_id": "MDQ6VXNlcjQwNjA3OTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/murchandamus",
            "html_url": "https://github.com/murchandamus",
            "followers_url": "https://api.github.com/users/murchandamus/followers",
            "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
            "organizations_url": "https://api.github.com/users/murchandamus/orgs",
            "repos_url": "https://api.github.com/users/murchandamus/repos",
            "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/murchandamus/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28977",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28977",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28977.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28977.patch"
          },
          "created_at": "2023-11-30T21:26:01Z",
          "updated_at": "2024-01-16T09:20:16Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1837467046,
      "node_id": "IC_kwDOABII585thYWm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1837467046",
      "actor": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-03T12:32:32Z",
      "updated_at": "2023-12-03T12:32:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK.\r\n\r\nThe PR description should say that we don't use hardcoded fee rate value, but rather multiple of long-term-fee-rate. LTFR is an existing user configurable parameter. It's also a good fit for the purpose of determining when to be more \"aggressive\" with coin selection, because it captures forward looking fee market expectations. ",
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1837467046",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27877"
    },
    {
      "event": "commented",
      "id": 1839309807,
      "node_id": "IC_kwDOABII585toaPv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1839309807",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-04T19:19:23Z",
      "updated_at": "2023-12-04T19:19:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "> The PR description should say that we don't use hardcoded fee rate value, but rather multiple of long-term-fee-rate. LTFR is an existing user configurable parameter. It's also a good fit for the purpose of determining when to be more \"aggressive\" with coin selection, because it captures forward looking fee market expectations.\r\n\r\nThanks, I’ve amended the description.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1839309807",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27877"
    },
    {
      "event": "reviewed",
      "id": 1763330890,
      "node_id": "PRR_kwDOABII585pGktK",
      "url": null,
      "actor": null,
      "commit_id": "dc6fe3a2b30763d44fc011f1a212d7d06cbb7c3a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#pullrequestreview-1763330890",
      "submitted_at": "2023-12-04T21:25:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-08T19:00:37Z",
      "updated_at": "2023-12-08T19:00:37Z",
      "source": {
        "issue": {
          "id": 2033164336,
          "node_id": "PR_kwDOABII585hjRKd",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29037",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29037/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29037/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29037/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29037",
          "number": 29037,
          "state": "closed",
          "state_reason": null,
          "title": "Add multiplication operator to CFeeRate",
          "body": "Allows us to use \r\n`coin_selection_params.m_long_term_feerate * 3`\r\nor\r\n`3 * coin_selection_params.m_long_term_feerate`\r\ninstead of  \r\n`CFeeRate{coin_selection_params.m_long_term_feerate.GetFee(3000)}`\r\n\r\ninspired by https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1414455724",
          "user": {
            "login": "murchandamus",
            "id": 4060799,
            "node_id": "MDQ6VXNlcjQwNjA3OTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/murchandamus",
            "html_url": "https://github.com/murchandamus",
            "followers_url": "https://api.github.com/users/murchandamus/followers",
            "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
            "organizations_url": "https://api.github.com/users/murchandamus/orgs",
            "repos_url": "https://api.github.com/users/murchandamus/repos",
            "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/murchandamus/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29037",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29037",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29037.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29037.patch"
          },
          "closed_at": "2023-12-20T00:36:32Z",
          "created_at": "2023-12-08T18:57:26Z",
          "updated_at": "2023-12-20T00:36:32Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11197318165,
      "node_id": "HRFPE_lADOABII585opn0ezwAAAAKbaYQV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11197318165",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-08T20:04:39Z"
    },
    {
      "event": "reviewed",
      "id": 1773042003,
      "node_id": "PRR_kwDOABII585prnlT",
      "url": null,
      "actor": null,
      "commit_id": "7aa9d18320a384e99cec523371945055ba224ad0",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Rebased on #29037, addressed comments by @achow101 and @brunoerg",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#pullrequestreview-1773042003",
      "submitted_at": "2023-12-08T20:05:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
    },
    {
      "event": "commented",
      "id": 1848150890,
      "node_id": "IC_kwDOABII585uKItq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1848150890",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-09T03:03:51Z",
      "updated_at": "2023-12-21T22:15:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "Edit: Moved simulation result discussion to [Delving Bitcoin](https://delvingbitcoin.org/t/gutterguard-and-coingrinder-simulation-results/279)",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1848150890",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27877"
    },
    {
      "event": "commented",
      "id": 1848191242,
      "node_id": "IC_kwDOABII585uKSkK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1848191242",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-09T03:08:38Z",
      "updated_at": "2023-12-21T22:15:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "Edit: Moved simulation result discussion to [Delving Bitcoin](https://delvingbitcoin.org/t/gutterguard-and-coingrinder-simulation-results/279)",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1848191242",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27877"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11202035813,
      "node_id": "HRFPE_lADOABII585opn0ezwAAAAKbsYBl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11202035813",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-10T03:42:05Z"
    },
    {
      "event": "reviewed",
      "id": 1774060383,
      "node_id": "PRR_kwDOABII585pvgNf",
      "url": null,
      "actor": null,
      "commit_id": "232d3d94fc9692d2c7c00dd797e71ed01c808e03",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "kashifs",
        "id": 1489460,
        "node_id": "MDQ6VXNlcjE0ODk0NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1489460?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kashifs",
        "html_url": "https://github.com/kashifs",
        "followers_url": "https://api.github.com/users/kashifs/followers",
        "following_url": "https://api.github.com/users/kashifs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kashifs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kashifs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kashifs/subscriptions",
        "organizations_url": "https://api.github.com/users/kashifs/orgs",
        "repos_url": "https://api.github.com/users/kashifs/repos",
        "events_url": "https://api.github.com/users/kashifs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kashifs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#pullrequestreview-1774060383",
      "submitted_at": "2023-12-10T16:14:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
    },
    {
      "event": "reviewed",
      "id": 1774071212,
      "node_id": "PRR_kwDOABII585pvi2s",
      "url": null,
      "actor": null,
      "commit_id": "232d3d94fc9692d2c7c00dd797e71ed01c808e03",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "kashifs",
        "id": 1489460,
        "node_id": "MDQ6VXNlcjE0ODk0NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1489460?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kashifs",
        "html_url": "https://github.com/kashifs",
        "followers_url": "https://api.github.com/users/kashifs/followers",
        "following_url": "https://api.github.com/users/kashifs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kashifs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kashifs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kashifs/subscriptions",
        "organizations_url": "https://api.github.com/users/kashifs/orgs",
        "repos_url": "https://api.github.com/users/kashifs/repos",
        "events_url": "https://api.github.com/users/kashifs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kashifs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#pullrequestreview-1774071212",
      "submitted_at": "2023-12-10T17:40:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
    },
    {
      "event": "reviewed",
      "id": 1774072057,
      "node_id": "PRR_kwDOABII585pvjD5",
      "url": null,
      "actor": null,
      "commit_id": "232d3d94fc9692d2c7c00dd797e71ed01c808e03",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "kashifs",
        "id": 1489460,
        "node_id": "MDQ6VXNlcjE0ODk0NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1489460?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kashifs",
        "html_url": "https://github.com/kashifs",
        "followers_url": "https://api.github.com/users/kashifs/followers",
        "following_url": "https://api.github.com/users/kashifs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kashifs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kashifs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kashifs/subscriptions",
        "organizations_url": "https://api.github.com/users/kashifs/orgs",
        "repos_url": "https://api.github.com/users/kashifs/repos",
        "events_url": "https://api.github.com/users/kashifs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kashifs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#pullrequestreview-1774072057",
      "submitted_at": "2023-12-10T17:47:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
    },
    {
      "event": "commented",
      "id": 1859275939,
      "node_id": "IC_kwDOABII585u0kyj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1859275939",
      "actor": {
        "login": "kashifs",
        "id": 1489460,
        "node_id": "MDQ6VXNlcjE0ODk0NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1489460?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kashifs",
        "html_url": "https://github.com/kashifs",
        "followers_url": "https://api.github.com/users/kashifs/followers",
        "following_url": "https://api.github.com/users/kashifs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kashifs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kashifs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kashifs/subscriptions",
        "organizations_url": "https://api.github.com/users/kashifs/orgs",
        "repos_url": "https://api.github.com/users/kashifs/repos",
        "events_url": "https://api.github.com/users/kashifs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kashifs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-17T20:31:55Z",
      "updated_at": "2023-12-17T20:32:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK [ef8ed8](https://github.com/bitcoin/bitcoin/commit/ef8ed8c973b2a48ccff54e4443a88e876d210bcf)",
      "user": {
        "login": "kashifs",
        "id": 1489460,
        "node_id": "MDQ6VXNlcjE0ODk0NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1489460?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kashifs",
        "html_url": "https://github.com/kashifs",
        "followers_url": "https://api.github.com/users/kashifs/followers",
        "following_url": "https://api.github.com/users/kashifs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kashifs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kashifs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kashifs/subscriptions",
        "organizations_url": "https://api.github.com/users/kashifs/orgs",
        "repos_url": "https://api.github.com/users/kashifs/repos",
        "events_url": "https://api.github.com/users/kashifs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kashifs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1859275939",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27877"
    },
    {
      "event": "review_requested",
      "id": 11269276930,
      "node_id": "RRE_lADOABII585opn0ezwAAAAKfs4UC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11269276930",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-17T20:31:59Z",
      "requested_reviewer": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 11269276942,
      "node_id": "RRE_lADOABII585opn0ezwAAAAKfs4UO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11269276942",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-17T20:32:00Z",
      "requested_reviewer": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "referenced",
      "id": 11296059886,
      "node_id": "REFE_lADOABII585opn0ezwAAAAKhTDHu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11296059886",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e3847f7ac4b74893d266770c456d57ed20b9bb8b",
      "commit_url": "https://api.github.com/repos/bitcoin-core/gui/commits/e3847f7ac4b74893d266770c456d57ed20b9bb8b",
      "created_at": "2023-12-20T00:36:31Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11328180483,
      "node_id": "HRFPE_lADOABII585opn0ezwAAAAKjNlED",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11328180483",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-22T16:54:11Z"
    },
    {
      "event": "reviewed",
      "id": 1794686545,
      "node_id": "PRR_kwDOABII585q-L5R",
      "url": null,
      "actor": null,
      "commit_id": "a7e3ad5efe6be7d662803779429a254d825da9dd",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Rebased and addressed comments by @kashifs. Thanks for the thorough read, @kashifs.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#pullrequestreview-1794686545",
      "submitted_at": "2023-12-22T16:54:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
    },
    {
      "event": "labeled",
      "id": 11328482659,
      "node_id": "LE_lADOABII585opn0ezwAAAAKjOu1j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11328482659",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-22T17:48:06Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 11328706449,
      "node_id": "UNLE_lADOABII585opn0ezwAAAAKjPleR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11328706449",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-22T18:31:17Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1872346963,
      "node_id": "IC_kwDOABII585vmb9T",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1872346963",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-29T21:30:17Z",
      "updated_at": "2023-12-29T21:58:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "In a [simulation](https://delvingbitcoin.org/t/gutterguard-and-coingrinder-simulation-results/279) comparing the `master` branch with the `CoinGrinder` branch playing through a scenario that performs 5 005 payments with feerates sampled from 2023, CoinGrinder reduces the total transaction fees by 9.5%.\r\n\r\nExcerpts from the result table:\r\n\r\n| Branch | Mean UTXO count | Total Fees paid | Change outputs created | Solutions found by |\r\n| ---- | --- | --- | --- | --- |\r\n| `master` | 165.36 | 0.44500219 | 3020 | knapsack: 610 ; srd: 2414 ; bnb: 1981 |\r\n| `CoinGrinder` | 230.68 | 0.40248296 | 3110 | knapsack: 520 ; bnb: 1894 ; cg: 1382 ; srd: 1209 |\r\n\r\nAs can be seen, in this scenario in which the vast majority of transactions are created above the _long-term feerate estimate_, CoinGrinder significantly reduces the overall fee expenditures at the cost of creating change outputs slightly more often, and maintaining a larger UTXO pool. We do see the wallet’s UTXO pool quickly contract whenever the feerates are reduced to lower levels: \r\n![image](https://github.com/bitcoin/bitcoin/assets/4060799/87223918-eb26-44da-ab23-a96fd72ab23a)\r\n\r\n\r\nWe can see in a second simulation that uses the same payment scenario but a series of much lower feerates (\"Peak and tail\") that the UTXO pool size is only slightly elevated when a larger portion of the transactions is performed at feerates below the _long-term feerate estimate_. We see that the addition of CoinGrinder reduces the total fees by about 4% due to better performance in the infrequent high feerate payments.\r\n\r\n| Branch | Mean UTXO count | Total Fees paid | Change outputs created | Solutions found by |\r\n| ---- | --- | --- | --- | --- |\r\n| `master` | 32.70 |0.10775743 | 4556 | knapsack: 3636 ; srd: 920 ; bnb: 449 |\r\n| `CoinGrinder` | 34.31 | 0.10326806 | 4538 | knapsack: 3593 ; srd: 554 ; bnb: 467; cg: 391 |\r\n\r\nPlease see this [Delving Bitcoin](https://delvingbitcoin.org/t/gutterguard-and-coingrinder-simulation-results/279) thread for the complete description of the simulation and results.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1872346963",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27877"
    },
    {
      "event": "reviewed",
      "id": 1799219103,
      "node_id": "PRR_kwDOABII585rPeef",
      "url": null,
      "actor": null,
      "commit_id": "a7e3ad5efe6be7d662803779429a254d825da9dd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#pullrequestreview-1799219103",
      "submitted_at": "2023-12-29T22:24:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
    },
    {
      "event": "reviewed",
      "id": 1799249817,
      "node_id": "PRR_kwDOABII585rPl-Z",
      "url": null,
      "actor": null,
      "commit_id": "a7e3ad5efe6be7d662803779429a254d825da9dd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#pullrequestreview-1799249817",
      "submitted_at": "2023-12-29T22:54:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
    },
    {
      "event": "commented",
      "id": 1877253041,
      "node_id": "IC_kwDOABII585v5Jux",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1877253041",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-04T15:10:08Z",
      "updated_at": "2024-01-04T15:10:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "After discussing Pieter’s review comments further with him, I decided to restructure the algorithm proposed in this PR. I’m returning the PR to draft for a few days while I rewrite the commits.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1877253041",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27877"
    },
    {
      "event": "convert_to_draft",
      "id": 11391102307,
      "node_id": "CTDE_lADOABII585opn0ezwAAAAKm9m1j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11391102307",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-04T15:10:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11422588472,
      "node_id": "HRFPE_lADOABII585opn0ezwAAAAKo1t44",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11422588472",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-08T21:12:28Z"
    },
    {
      "event": "reviewed",
      "id": 1800970305,
      "node_id": "PRR_kwDOABII585rWKBB",
      "url": null,
      "actor": null,
      "commit_id": "47f3b559796ba7693b51590de482bbfd4afe8e34",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Addressed @sipa’s comments, and completely restructured the PR. Added two more tests, and counting of the number of attempts used in CoinGrinder to measure the optimizations.\r\n\r\nReady for review",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#pullrequestreview-1800970305",
      "submitted_at": "2024-01-08T21:14:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
    },
    {
      "event": "ready_for_review",
      "id": 11422604958,
      "node_id": "RFRE_lADOABII585opn0ezwAAAAKo1x6e",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11422604958",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-08T21:14:11Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11422786176,
      "node_id": "HRFPE_lADOABII585opn0ezwAAAAKo2eKA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11422786176",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-08T21:35:23Z"
    },
    {
      "event": "labeled",
      "id": 11422786854,
      "node_id": "LE_lADOABII585opn0ezwAAAAKo2eUm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11422786854",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-08T21:35:28Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11423387888,
      "node_id": "HRFPE_lADOABII585opn0ezwAAAAKo4xDw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11423387888",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-08T22:55:18Z"
    },
    {
      "event": "commented",
      "id": 1881954408,
      "node_id": "IC_kwDOABII585wLFho",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1881954408",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-08T22:59:26Z",
      "updated_at": "2024-01-08T22:59:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "Mea culpa. Fixed the linter issue.\r\n\r\nReady for review",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1881954408",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27877"
    },
    {
      "event": "unlabeled",
      "id": 11423619339,
      "node_id": "UNLE_lADOABII585opn0ezwAAAAKo5pkL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11423619339",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-08T23:36:37Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11423890742,
      "node_id": "HRFPE_lADOABII585opn0ezwAAAAKo6r02",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11423890742",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-09T00:31:09Z"
    },
    {
      "event": "commented",
      "id": 1882055933,
      "node_id": "IC_kwDOABII585wLeT9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1882055933",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-09T00:31:52Z",
      "updated_at": "2024-01-09T00:31:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "Added missing test title in overview of CoinGrinder tests",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1882055933",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27877"
    },
    {
      "event": "reviewed",
      "id": 1810381270,
      "node_id": "PRR_kwDOABII585r6DnW",
      "url": null,
      "actor": null,
      "commit_id": "840beb3f8fa61ca1f8ce791738eab71a4924f8de",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#pullrequestreview-1810381270",
      "submitted_at": "2024-01-09T04:50:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
    },
    {
      "event": "reviewed",
      "id": 1811161257,
      "node_id": "PRR_kwDOABII585r9CCp",
      "url": null,
      "actor": null,
      "commit_id": "840beb3f8fa61ca1f8ce791738eab71a4924f8de",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Addressed @sipa’s comments",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#pullrequestreview-1811161257",
      "submitted_at": "2024-01-09T19:18:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11434531023,
      "node_id": "HRFPE_lADOABII585opn0ezwAAAAKpjRjP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11434531023",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-09T19:19:06Z"
    },
    {
      "event": "labeled",
      "id": 11435894978,
      "node_id": "LE_lADOABII585opn0ezwAAAAKpoejC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11435894978",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-09T21:33:09Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1883832925,
      "node_id": "IC_kwDOABII585wSQJd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1883832925",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-09T21:33:10Z",
      "updated_at": "2024-01-09T21:33:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/20315937460</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1883832925",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27877"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11436639244,
      "node_id": "HRFPE_lADOABII585opn0ezwAAAAKprUQM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11436639244",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-09T23:02:44Z"
    },
    {
      "event": "unlabeled",
      "id": 11437393453,
      "node_id": "UNLE_lADOABII585opn0ezwAAAAKpuMYt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11437393453",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-10T01:06:26Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1814544499,
      "node_id": "PRR_kwDOABII585sJ8Bz",
      "url": null,
      "actor": null,
      "commit_id": "b595172016461ef83e7759b05b40fc7b2138a8f6",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#pullrequestreview-1814544499",
      "submitted_at": "2024-01-11T02:39:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "remyers",
        "id": 8568892,
        "node_id": "MDQ6VXNlcjg1Njg4OTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8568892?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/remyers",
        "html_url": "https://github.com/remyers",
        "followers_url": "https://api.github.com/users/remyers/followers",
        "following_url": "https://api.github.com/users/remyers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/remyers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/remyers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/remyers/subscriptions",
        "organizations_url": "https://api.github.com/users/remyers/orgs",
        "repos_url": "https://api.github.com/users/remyers/repos",
        "events_url": "https://api.github.com/users/remyers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/remyers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-11T09:04:53Z",
      "updated_at": "2024-01-11T09:04:53Z",
      "source": {
        "issue": {
          "id": 2067661940,
          "node_id": "I_kwDOHBYoSM57PgR0",
          "url": "https://api.github.com/repos/achow101/coin-selection-simulation/issues/16",
          "repository_url": "https://api.github.com/repos/achow101/coin-selection-simulation",
          "labels_url": "https://api.github.com/repos/achow101/coin-selection-simulation/issues/16/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/achow101/coin-selection-simulation/issues/16/comments",
          "events_url": "https://api.github.com/repos/achow101/coin-selection-simulation/issues/16/events",
          "html_url": "https://github.com/achow101/coin-selection-simulation/issues/16",
          "number": 16,
          "state": "open",
          "state_reason": null,
          "title": "change position not null, but tx has only one output",
          "body": "Bitcoin version: master (c80f57ba5)\r\ncoin-selection-simulation: main (c604fad)\r\n\r\nI'm getting an assert because the change position is not null, but the tx has only one output. I'm not sure how to debug this further.  Any suggestions?\r\n\r\n```\r\n~/github/coin-selection-simulation$ sudo scripts/simulation.py --scenario scenarios/bustabit-2019-2020.csv ~/github/bitcoin/test/config.ini results/\r\n2024-01-05T15:52:09.037000Z TestFramework (INFO): Initializing test directory /tmp/bitcoin_coin_sel_sim_qoh2dde6\r\n2024-01-05T15:52:09.300000Z TestFramework (INFO): Based on branch master(c80f57ba575af96890f185765a53a62ef58ef2c8)\r\n2024-01-05T15:52:09.300000Z TestFramework (INFO): This simulation's Unique ID: 9a9224c4d27f42b1891b27328c20a3f6\r\n2024-01-05T15:52:09.331000Z TestFramework (INFO): Mining blocks for node0 to be able to send enough coins\r\n2024-01-05T15:52:10.236000Z TestFramework (INFO): Simulating using scenario: bustabit-2019-2020\r\n2024-01-05T15:52:10.236000Z TestFramework (INFO): 0 operations performed so far\r\nTraceback (most recent call last):\r\n  File \"/home/remyers/github/coin-selection-simulation/scripts/simulation.py\", line 582, in <module>\r\n    CoinSelectionSimulation().main()\r\n  File \"/home/remyers/github/coin-selection-simulation/scripts/framework.py\", line 195, in main\r\n    self.run()\r\n  File \"/home/remyers/github/coin-selection-simulation/scripts/simulation.py\", line 540, in run\r\n    assert len(dec[\"tx\"][\"vout\"]) == 2\r\nAssertionError\r\n[node 0] Cleaning up leftover process\r\n```\r\n\r\nI added some debugging lines and it looks like before the assert the state is:\r\n\r\nevent 2\r\nsuccess= 1\r\nfee= 600\r\nchange_pos= 0\r\n\r\nevent 4\r\nchange_aps= 1\r\nsuccess= 1\r\nfee= 600\r\nchange_pos= 0\r\n\r\nlen(dec[\"tx\"][\"vout\"])= 1\r\nchange_pos= 0\r\n\r\ndec[\"tx\"]={'txid': '6ab21c3263e3c39d9b4abf1e34d40503f8e171ea5f089962ad81e7d0070c67c5', 'hash': '6ab21c3263e3c39d9b4abf1e34d40503f8e171ea5f089962ad81e7d0070c67c5', 'version': 2, 'size': 82, 'vsize': 82, 'weight': 328, 'locktime': 0, 'vin': [{'txid': '453c271c91d8f159d79c73f314069c9a8cd5aa769c591e9b42c66f8e1ff59934', 'vout': 0, 'scriptSig': {'asm': '', 'hex': ''}, 'sequence': 4294967293}], 'vout': [{'value': Decimal('0.00329000'), 'n': 0, 'scriptPubKey': {'asm': '0 727e19b73e721b43568abe335af127e957432da0', 'desc': 'addr(bcrt1qwflpnde7wgd5x452hce44uf8a9t5xtdqh2mkp9)#utql76pz', 'hex': '0014727e19b73e721b43568abe335af127e957432da0', 'address': 'bcrt1qwflpnde7wgd5x452hce44uf8a9t5xtdqh2mkp9', 'type': 'witness_v0_keyhash'}}]}\r\n",
          "user": {
            "login": "remyers",
            "id": 8568892,
            "node_id": "MDQ6VXNlcjg1Njg4OTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8568892?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/remyers",
            "html_url": "https://github.com/remyers",
            "followers_url": "https://api.github.com/users/remyers/followers",
            "following_url": "https://api.github.com/users/remyers/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/remyers/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/remyers/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/remyers/subscriptions",
            "organizations_url": "https://api.github.com/users/remyers/orgs",
            "repos_url": "https://api.github.com/users/remyers/repos",
            "events_url": "https://api.github.com/users/remyers/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/remyers/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "NONE",
          "locked": false,
          "comments": 5,
          "created_at": "2024-01-05T16:32:45Z",
          "updated_at": "2024-01-16T18:00:43Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-11T19:40:59Z",
      "updated_at": "2024-01-11T19:40:59Z",
      "source": {
        "issue": {
          "id": 2021683204,
          "node_id": "PR_kwDOABII585g8QwM",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28985",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28985/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28985/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28985/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28985",
          "number": 28985,
          "state": "open",
          "state_reason": null,
          "title": "Avoid changeless input sets when SFFO is active",
          "body": "Fixes a bunch of issues around tests for coinselection, and disables changeless solutions when building transactions with SFFO.\r\n\r\nDepends on #28994",
          "user": {
            "login": "murchandamus",
            "id": 4060799,
            "node_id": "MDQ6VXNlcjQwNjA3OTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/murchandamus",
            "html_url": "https://github.com/murchandamus",
            "followers_url": "https://api.github.com/users/murchandamus/followers",
            "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
            "organizations_url": "https://api.github.com/users/murchandamus/orgs",
            "repos_url": "https://api.github.com/users/murchandamus/repos",
            "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/murchandamus/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28985",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28985",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28985.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28985.patch"
          },
          "created_at": "2023-12-01T22:41:36Z",
          "updated_at": "2024-01-24T11:59:30Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1816719303,
      "node_id": "PRR_kwDOABII585sSO_H",
      "url": null,
      "actor": null,
      "commit_id": "b595172016461ef83e7759b05b40fc7b2138a8f6",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nI'm still reviewing this PR, but I have left some initial review comments. ",
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#pullrequestreview-1816719303",
      "submitted_at": "2024-01-11T22:28:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11470769510,
      "node_id": "HRFPE_lADOABII585opn0ezwAAAAKrtg1m",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11470769510",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T15:40:53Z"
    },
    {
      "event": "reviewed",
      "id": 1817293438,
      "node_id": "PRR_kwDOABII585sUbJ-",
      "url": null,
      "actor": null,
      "commit_id": "e1d5f4346ca9dbeaf8489e5ef4fede8f1a461709",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Addressed Ishaana’s review\r\n\r\nAdded a test with a pattern of mixed weight inputs to highlight the improvements from optimizations.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#pullrequestreview-1817293438",
      "submitted_at": "2024-01-12T15:42:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
    },
    {
      "event": "labeled",
      "id": 11471425599,
      "node_id": "LE_lADOABII585opn0ezwAAAAKrwBA_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11471425599",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T16:38:41Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1889619610,
      "node_id": "IC_kwDOABII585woU6a",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1889619610",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T16:38:42Z",
      "updated_at": "2024-01-12T16:38:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/20430984764</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1889619610",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27877"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11473309541,
      "node_id": "HRFPE_lADOABII585opn0ezwAAAAKr3M9l",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11473309541",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T19:57:53Z"
    },
    {
      "event": "commented",
      "id": 1889878218,
      "node_id": "IC_kwDOABII585wpUDK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1889878218",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T19:59:10Z",
      "updated_at": "2024-01-12T19:59:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "I’ve added another fuzz target that validates the output of CoinGrinder against a bruteforce search for the smallest weight input set.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1889878218",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27877"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11474288697,
      "node_id": "HRFPE_lADOABII585opn0ezwAAAAKr68A5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11474288697",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T21:54:25Z"
    },
    {
      "event": "commented",
      "id": 1890013810,
      "node_id": "IC_kwDOABII585wp1Jy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1890013810",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T21:58:00Z",
      "updated_at": "2024-01-17T19:53:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "SFFO is such a pain in the neck.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1890013810",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27877"
    },
    {
      "event": "unlabeled",
      "id": 11474727488,
      "node_id": "UNLE_lADOABII585opn0ezwAAAAKr8nJA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11474727488",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T22:57:46Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11474880721,
      "node_id": "HRFPE_lADOABII585opn0ezwAAAAKr9MjR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11474880721",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T23:09:51Z"
    },
    {
      "event": "commented",
      "id": 1890125580,
      "node_id": "IC_kwDOABII585wqQcM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1890125580",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T23:12:05Z",
      "updated_at": "2024-01-12T23:12:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "Fixed bug discovered with the optimality fuzz test: [opt: Skip over barren combinations of tiny UTXOs](https://github.com/bitcoin/bitcoin/pull/27877/commits/80bcee5c09fb68366645d6be62fdeab4bb3ec6f3), incorrectly was set to cut, but this could be premature in case that the last selected UTXO was heavier than later UTXOs in the pool.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1890125580",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27877"
    },
    {
      "event": "commented",
      "id": 1890248185,
      "node_id": "IC_kwDOABII585wquX5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1890248185",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-13T01:56:53Z",
      "updated_at": "2024-01-13T01:56:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "CI failure is unrelated, see https://github.com/bitcoin/bitcoin/pull/29243",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1890248185",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27877"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFhZWU2NTgyM2M2ZTYyMGJlZjVjYzk2ZDgwMjY1NjdlNjRkODIyZmU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aaee65823c6e620bef5cc96d8026567e64d822fe",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/aaee65823c6e620bef5cc96d8026567e64d822fe",
      "tree": {
        "sha": "a3c74464d9719f81f969ea26b1d63cd36abed06e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3c74464d9719f81f969ea26b1d63cd36abed06e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17e33fb57842e4080e6768c074654bd1fd7f8696",
          "sha": "17e33fb57842e4080e6768c074654bd1fd7f8696",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/17e33fb57842e4080e6768c074654bd1fd7f8696"
        }
      ],
      "message": "doc: Document max_weight on BnB",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2024-01-15T14:08:01Z"
      },
      "author": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2023-06-13T20:49:14Z"
      },
      "sha": "aaee65823c6e620bef5cc96d8026567e64d822fe"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg5ZDA5NTY2NDMxZjU3MDM0ZDlhN2RmMzI1NDdjZWIxM2Q3OWM2MmM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89d09566431f57034d9a7df32547ceb13d79c62c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/89d09566431f57034d9a7df32547ceb13d79c62c",
      "tree": {
        "sha": "bb1c6b35ba9652f1f1005a93311254beda30dc03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb1c6b35ba9652f1f1005a93311254beda30dc03"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aaee65823c6e620bef5cc96d8026567e64d822fe",
          "sha": "aaee65823c6e620bef5cc96d8026567e64d822fe",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/aaee65823c6e620bef5cc96d8026567e64d822fe"
        }
      ],
      "message": "opt: Tie-break UTXO sort by waste for BnB\n\nSince we are searching for the minimal waste, we sort UTXOs with equal\neffective value by ascending waste to be able to cut barren branches\nearlier.",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2024-01-15T14:08:01Z"
      },
      "author": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2023-06-13T19:56:18Z"
      },
      "sha": "89d09566431f57034d9a7df32547ceb13d79c62c"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11488725278,
      "node_id": "HRFPE_lADOABII585opn0ezwAAAAKsyAke",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11488725278",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-15T14:08:19Z"
    },
    {
      "event": "commented",
      "id": 1892249295,
      "node_id": "IC_kwDOABII585wyW7P",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1892249295",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-15T14:11:27Z",
      "updated_at": "2024-01-15T14:11:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased on fix for CI issue",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1892249295",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27877"
    },
    {
      "event": "labeled",
      "id": 11520467943,
      "node_id": "LE_lADOABII585opn0ezwAAAAKurGPn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11520467943",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-18T05:24:53Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 11570010729,
      "node_id": "UNLE_lADOABII585opn0ezwAAAAKxoFpp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11570010729",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-23T13:00:34Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1847107471,
      "node_id": "PRR_kwDOABII585uGJ-P",
      "url": null,
      "actor": null,
      "commit_id": "a764328c1e895d0f3f9b1a105225a4b0084fb150",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#pullrequestreview-1847107471",
      "submitted_at": "2024-01-27T19:36:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
    },
    {
      "event": "reviewed",
      "id": 1847632560,
      "node_id": "PRR_kwDOABII585uIKKw",
      "url": null,
      "actor": null,
      "commit_id": "a764328c1e895d0f3f9b1a105225a4b0084fb150",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Addressed most of @sipa’s feedback except for two things I’m still mulling over",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#pullrequestreview-1847632560",
      "submitted_at": "2024-01-29T00:07:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11621290388,
      "node_id": "HRFPE_lADOABII585opn0ezwAAAAK0rtGU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11621290388",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-29T00:10:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11632454195,
      "node_id": "HRFPE_lADOABII585opn0ezwAAAAK1WSoz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11632454195",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-29T19:42:52Z"
    },
    {
      "event": "commented",
      "id": 1915438014,
      "node_id": "IC_kwDOABII585yK0O-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1915438014",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-29T19:44:35Z",
      "updated_at": "2024-01-29T19:44:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "All review feedback is addressed, ready for review.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1915438014",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27877"
    },
    {
      "event": "labeled",
      "id": 11634124904,
      "node_id": "LE_lADOABII585opn0ezwAAAAK1cqho",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11634124904",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-29T22:44:28Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-30T19:11:11Z",
      "updated_at": "2024-01-30T19:11:11Z",
      "source": {
        "issue": {
          "id": 2099671090,
          "node_id": "PR_kwDOKzUP9s5lBvIA",
          "url": "https://api.github.com/repos/bitcoindevkit/coin-select/issues/21",
          "repository_url": "https://api.github.com/repos/bitcoindevkit/coin-select",
          "labels_url": "https://api.github.com/repos/bitcoindevkit/coin-select/issues/21/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoindevkit/coin-select/issues/21/comments",
          "events_url": "https://api.github.com/repos/bitcoindevkit/coin-select/issues/21/events",
          "html_url": "https://github.com/bitcoindevkit/coin-select/pull/21",
          "number": 21,
          "state": "open",
          "state_reason": null,
          "title": "No more base weight",
          "body": "Fixes #1\r\n\r\nOn top of #19 \r\n\r\n- CoinSelector no longer tracks anything but input weight\r\n- Previously the value of the target outputs was in `Target` but the\r\n  weights were accounted for in CoinSelector. Now they're in all in\r\n  target.\r\n- This allows us to actually figure out how many outputs there are and\r\n  therefore the actual weight of the transaction accounting for the varint for the number of outputs.\r\n\r\nThis wasn't what the issue had in mind but it was easier to take the `base_weight` out of `CoinSelector` and put it in `Target` rather than put `Target` in `CoinSelector`. Getting rid of `base_weight` is a more crucial change than expected because rust bitcoin changed what `Transaction::weight` returns for empty output transactions recently so using it to determine `base_weight` will get different answers between versions (this breaks our weight tests but this PR will fix it I think if we uprade dev deps). We only need to know the total weight of the outputs and how many there are now to get the right answers for weight.\r\n",
          "user": {
            "login": "LLFourn",
            "id": 3734083,
            "node_id": "MDQ6VXNlcjM3MzQwODM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3734083?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LLFourn",
            "html_url": "https://github.com/LLFourn",
            "followers_url": "https://api.github.com/users/LLFourn/followers",
            "following_url": "https://api.github.com/users/LLFourn/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/LLFourn/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/LLFourn/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/LLFourn/subscriptions",
            "organizations_url": "https://api.github.com/users/LLFourn/orgs",
            "repos_url": "https://api.github.com/users/LLFourn/repos",
            "events_url": "https://api.github.com/users/LLFourn/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/LLFourn/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "COLLABORATOR",
          "locked": false,
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoindevkit/coin-select/pulls/21",
            "html_url": "https://github.com/bitcoindevkit/coin-select/pull/21",
            "diff_url": "https://github.com/bitcoindevkit/coin-select/pull/21.diff",
            "patch_url": "https://github.com/bitcoindevkit/coin-select/pull/21.patch"
          },
          "created_at": "2024-01-25T06:36:39Z",
          "updated_at": "2024-01-30T19:11:11Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1917887536,
      "node_id": "IC_kwDOABII585yUKQw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1917887536",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-30T21:02:09Z",
      "updated_at": "2024-01-30T21:02:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "The `p2p_v2_earlykeyresponse.py` test is unrelated.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1917887536",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27877"
    },
    {
      "event": "reviewed",
      "id": 1853774778,
      "node_id": "PRR_kwDOABII585uflu6",
      "url": null,
      "actor": null,
      "commit_id": "ab7eaaa98bc29bafb96cda2d391e9a7ab16ccac7",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#pullrequestreview-1853774778",
      "submitted_at": "2024-01-31T15:25:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
    },
    {
      "event": "reviewed",
      "id": 1854679982,
      "node_id": "PRR_kwDOABII585ujCuu",
      "url": null,
      "actor": null,
      "commit_id": "ab7eaaa98bc29bafb96cda2d391e9a7ab16ccac7",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Thanks @sipa, good improvements, will amend when the other review in flight comes back.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#pullrequestreview-1854679982",
      "submitted_at": "2024-01-31T19:56:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
    },
    {
      "event": "reviewed",
      "id": 1857490482,
      "node_id": "PRR_kwDOABII585utw4y",
      "url": null,
      "actor": null,
      "commit_id": "ab7eaaa98bc29bafb96cda2d391e9a7ab16ccac7",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#pullrequestreview-1857490482",
      "submitted_at": "2024-02-01T19:55:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
    },
    {
      "event": "reviewed",
      "id": 1857573521,
      "node_id": "PRR_kwDOABII585uuFKR",
      "url": null,
      "actor": null,
      "commit_id": "ab7eaaa98bc29bafb96cda2d391e9a7ab16ccac7",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK.\r\n\r\nFirst pass, I need to dig a bit deeper, but it makes sense to me",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#pullrequestreview-1857573521",
      "submitted_at": "2024-02-01T21:22:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
    },
    {
      "event": "reviewed",
      "id": 1857527717,
      "node_id": "PRR_kwDOABII585ut5-l",
      "url": null,
      "actor": null,
      "commit_id": "ab7eaaa98bc29bafb96cda2d391e9a7ab16ccac7",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Addressed feedback by @sipa and @sr-gi.\r\n\r\nI also improved the clone skipping by skipping any UTXOs with same effective value and heavier weight that follow an unselected UTXO.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#pullrequestreview-1857527717",
      "submitted_at": "2024-02-01T22:02:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11676383067,
      "node_id": "HRFPE_lADOABII585opn0ezwAAAAK393db",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11676383067",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-01T22:03:07Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11684480782,
      "node_id": "HRFPE_lADOABII585opn0ezwAAAAK4cwcO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11684480782",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-02T13:56:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11684642252,
      "node_id": "HRFPE_lADOABII585opn0ezwAAAAK4dX3M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11684642252",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-02T14:07:51Z"
    },
    {
      "event": "unlabeled",
      "id": 11685362315,
      "node_id": "UNLE_lADOABII585opn0ezwAAAAK4gHqL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11685362315",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-02T15:06:56Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ0NWRhNTk2YWNjNjU0ODhjNTZlODM4MGEwOGU5ZTFmZTFmN2Q5NTY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d45da596acc65488c56e8380a08e9e1fe1f7d956",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d45da596acc65488c56e8380a08e9e1fe1f7d956",
      "tree": {
        "sha": "a9e471f7a308a642309ac9f2d8c3e103c521d564",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9e471f7a308a642309ac9f2d8c3e103c521d564"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89d09566431f57034d9a7df32547ceb13d79c62c",
          "sha": "89d09566431f57034d9a7df32547ceb13d79c62c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/89d09566431f57034d9a7df32547ceb13d79c62c"
        }
      ],
      "message": "coinselection: Add CoinGrinder algorithm\n\nCoinGrinder is a DFS-based coin selection algorithm that\ndeterministically finds the input set with the lowest weight creating a\nchange output.",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2024-02-04T20:59:50Z"
      },
      "author": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2023-05-23T23:36:04Z"
      },
      "sha": "d45da596acc65488c56e8380a08e9e1fe1f7d956"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDkxZWFlOGRiYWIzZTAzYTMwNGNiMTdhOTJhZTZjYmFjYWNhNGZkYzA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91eae8dbab3e03a304cb17a92ae6cbacaca4fdc0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/91eae8dbab3e03a304cb17a92ae6cbacaca4fdc0",
      "tree": {
        "sha": "942f7a9e5f9b90b9e3ce65500468934ee23b4dbc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/942f7a9e5f9b90b9e3ce65500468934ee23b4dbc"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d45da596acc65488c56e8380a08e9e1fe1f7d956",
          "sha": "d45da596acc65488c56e8380a08e9e1fe1f7d956",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d45da596acc65488c56e8380a08e9e1fe1f7d956"
        }
      ],
      "message": "test: Add coin_grinder_tests",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2024-02-04T20:59:50Z"
      },
      "author": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2024-01-08T20:41:02Z"
      },
      "sha": "91eae8dbab3e03a304cb17a92ae6cbacaca4fdc0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNjMTM0YjZiMDAxYWE5MTYzODcyZjE5NTE4ZWVhYjFiZGJiNjZmZWE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc134b6b001aa9163872f19518eeab1bdbb66fea",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cc134b6b001aa9163872f19518eeab1bdbb66fea",
      "tree": {
        "sha": "61c213c692a5b277c515c0f3195140f33213da36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61c213c692a5b277c515c0f3195140f33213da36"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91eae8dbab3e03a304cb17a92ae6cbacaca4fdc0",
          "sha": "91eae8dbab3e03a304cb17a92ae6cbacaca4fdc0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/91eae8dbab3e03a304cb17a92ae6cbacaca4fdc0"
        }
      ],
      "message": "coinselection: Track whether CG completed\n\nCoinGrinder may not be able to exhaustively search all potentially\ninteresting combinations for large UTXO pools, so we keep track of\nwhether the search was terminated by the iteration limit.",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2024-02-04T20:59:50Z"
      },
      "author": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2024-01-08T20:35:05Z"
      },
      "sha": "cc134b6b001aa9163872f19518eeab1bdbb66fea"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQwNDJjYmZlYzBiNWUzZmNkYjIzMmQ5M2VjZDlhMWQ2OTgxYWI1OGU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d042cbfec0b5e3fcdb232d93ecd9a1d6981ab58e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d042cbfec0b5e3fcdb232d93ecd9a1d6981ab58e",
      "tree": {
        "sha": "082760008165826abc17dff00b7ca878f250fa21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/082760008165826abc17dff00b7ca878f250fa21"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc134b6b001aa9163872f19518eeab1bdbb66fea",
          "sha": "cc134b6b001aa9163872f19518eeab1bdbb66fea",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cc134b6b001aa9163872f19518eeab1bdbb66fea"
        }
      ],
      "message": "fuzz: Add CoinGrinder fuzz target",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2024-02-04T20:59:50Z"
      },
      "author": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2024-01-08T20:30:40Z"
      },
      "sha": "d042cbfec0b5e3fcdb232d93ecd9a1d6981ab58e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGE5NmIyZGI4ZmJlZWM4ZDYxMDQ5MjgxYzIwM2RiMWYxYTAwNTAxZmU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a96b2db8fbeec8d61049281c203db1f1a00501fe",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a96b2db8fbeec8d61049281c203db1f1a00501fe",
      "tree": {
        "sha": "16d56d28acb1946cf3b22233c125cfbf477c6fa8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16d56d28acb1946cf3b22233c125cfbf477c6fa8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d042cbfec0b5e3fcdb232d93ecd9a1d6981ab58e",
          "sha": "d042cbfec0b5e3fcdb232d93ecd9a1d6981ab58e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d042cbfec0b5e3fcdb232d93ecd9a1d6981ab58e"
        }
      ],
      "message": "fuzz: Test optimality of CoinGrinder\n\nCo-authored-by: Pieter Wuille <pieter@wuille.net>",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2024-02-04T20:59:50Z"
      },
      "author": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2024-01-12T16:09:52Z"
      },
      "sha": "a96b2db8fbeec8d61049281c203db1f1a00501fe"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDNlZDU0MWExYWY1ZmE0ODZkNjY4YzhmNzIzYTc5ZTYzYjE1ODJkNDY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ed541a1af5fa486d668c8f723a79e63b1582d46",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3ed541a1af5fa486d668c8f723a79e63b1582d46",
      "tree": {
        "sha": "cffcd147a97ab752c0f0ff7dc3c1f95ad815f3ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cffcd147a97ab752c0f0ff7dc3c1f95ad815f3ac"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a96b2db8fbeec8d61049281c203db1f1a00501fe",
          "sha": "a96b2db8fbeec8d61049281c203db1f1a00501fe",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a96b2db8fbeec8d61049281c203db1f1a00501fe"
        }
      ],
      "message": "opt: Skip branches with worse weight\n\nOnce we exceed the weight of the current best selection, we can always\nshift as adding more inputs can never yield a better solution.",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2024-02-04T20:59:50Z"
      },
      "author": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2024-01-08T20:26:21Z"
      },
      "sha": "3ed541a1af5fa486d668c8f723a79e63b1582d46"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ0NWYwYmFjMjkzM2JhNTNmMDk0YmRhZTQyYWVlZDY5Mzg5ZjUwMDk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d45f0bac2933ba53f094bdae42aeed69389f5009",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d45f0bac2933ba53f094bdae42aeed69389f5009",
      "tree": {
        "sha": "f7b6c6cb61899de6ef7c0df6d86ed786efce683d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7b6c6cb61899de6ef7c0df6d86ed786efce683d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ed541a1af5fa486d668c8f723a79e63b1582d46",
          "sha": "3ed541a1af5fa486d668c8f723a79e63b1582d46",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3ed541a1af5fa486d668c8f723a79e63b1582d46"
        }
      ],
      "message": "opt: Track remaining effective_value in lookahead\n\nIntroduces a dedicated data structure to track the total\neffective_value available in the remaining UTXOs at each index of the\nUTXO pool. In contrast to the approach in BnB, this allows us to\nimmediately jump to a lower index instead of visiting every UTXO to add\nback their eff_value to the lookahead.",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2024-02-04T20:59:50Z"
      },
      "author": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2024-01-08T20:17:36Z"
      },
      "sha": "d45f0bac2933ba53f094bdae42aeed69389f5009"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDM5NzcwNDNhNGM3NTY5OGE0YWFiNzk5OTNlMmE0ZjBhNjY3NTIxNDk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3977043a4c75698a4aab79993e2a4f0a66752149",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3977043a4c75698a4aab79993e2a4f0a66752149",
      "tree": {
        "sha": "ad276bd39250067f449b944584719429b745a94b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad276bd39250067f449b944584719429b745a94b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d45f0bac2933ba53f094bdae42aeed69389f5009",
          "sha": "d45f0bac2933ba53f094bdae42aeed69389f5009",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d45f0bac2933ba53f094bdae42aeed69389f5009"
        }
      ],
      "message": "opt: Skip evaluation of equivalent input sets\n\nWhen two successive UTXOs match in effective value and weight, we can\nskip the second if the prior is not selected: adding it would create an\nequivalent input set to a previously evaluated.\n\nE.g. if we have three UTXOs with effective values {5, 3, 3} of the same\nweight each, we want to evaluate\n{5, _, _}, {5, 3, _}, {5, 3, 3}, {_, 3, _}, {_, 3, 3},\nbut skip {5, _, 3}, and {_, _, 3}, because the first 3 is not selected,\nand we therefore do not need to evaluate the second 3 at the same\nposition in the input set.\n\nIf we reach the end of the branch, we must SHIFT the previously selected\nUTXO group instead.",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2024-02-04T20:59:50Z"
      },
      "author": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2024-01-08T20:08:57Z"
      },
      "sha": "3977043a4c75698a4aab79993e2a4f0a66752149"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDk0YTY2OTNiNjE2MTI5ZGZiZWMxZDgxNTJiY2FiN2ZhODg3MTNjNDA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94a6693b616129dfbec1d8152bcab7fa88713c40",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/94a6693b616129dfbec1d8152bcab7fa88713c40",
      "tree": {
        "sha": "b63949044020587277b41c398f47717ff5b1818e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b63949044020587277b41c398f47717ff5b1818e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3977043a4c75698a4aab79993e2a4f0a66752149",
          "sha": "3977043a4c75698a4aab79993e2a4f0a66752149",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3977043a4c75698a4aab79993e2a4f0a66752149"
        }
      ],
      "message": "opt: Tiebreak UTXOs by weight for CoinGrinder",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2024-02-04T20:59:50Z"
      },
      "author": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2024-01-08T19:47:54Z"
      },
      "sha": "94a6693b616129dfbec1d8152bcab7fa88713c40"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDk3NTQ2ZGZlNWM4YjVkZmMwOWRjOTQ4N2JiMjQ0YmVkYzZhYTg4ODE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97546dfe5c8b5dfc09dc9487bb244bedc6aa8881",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/97546dfe5c8b5dfc09dc9487bb244bedc6aa8881",
      "tree": {
        "sha": "47d0ccd8138f02ca2ad309714a43c68a23441788",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/47d0ccd8138f02ca2ad309714a43c68a23441788"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94a6693b616129dfbec1d8152bcab7fa88713c40",
          "sha": "94a6693b616129dfbec1d8152bcab7fa88713c40",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/94a6693b616129dfbec1d8152bcab7fa88713c40"
        }
      ],
      "message": "opt: Skip heavier UTXOs with same effective value\n\nWhen two successive UTXOs differ in weight but match in effective value,\nwe can skip the second if the first is not selected, because all input\nsets we can generate by swapping out a lighter UTXOs with a heavier UTXO\nof matching effective value would be strictly worse.",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2024-02-04T20:59:50Z"
      },
      "author": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2024-02-01T21:25:45Z"
      },
      "sha": "97546dfe5c8b5dfc09dc9487bb244bedc6aa8881"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGY0ZWVkZTY2YmJmMzYzYWFkZTYxOGY0MzZmM2Y2NWQ2Y2Y5MzNjYzE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f4eede66bbf363aade618f436f3f65d6cf933cc1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f4eede66bbf363aade618f436f3f65d6cf933cc1",
      "tree": {
        "sha": "be2adebd6c6c3eec2330cc894d2ff9caa345406d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be2adebd6c6c3eec2330cc894d2ff9caa345406d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97546dfe5c8b5dfc09dc9487bb244bedc6aa8881",
          "sha": "97546dfe5c8b5dfc09dc9487bb244bedc6aa8881",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/97546dfe5c8b5dfc09dc9487bb244bedc6aa8881"
        }
      ],
      "message": "opt: Cut if last addition was minimal weight\n\nIn situations where we have UTXO groups of various weight, we can CUT\nrather than SHIFT when we exceeded the max_weight or the best\nselection’s weight while the last step was equal to the minimum weight\nin the lookahead.",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2024-02-04T20:59:50Z"
      },
      "author": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2024-01-08T19:42:08Z"
      },
      "sha": "f4eede66bbf363aade618f436f3f65d6cf933cc1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFmNGJmNTM4MjgwOTdhMTM3YTczMWQyODJmMTliYmE1YWEwMGE0YTc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f4bf53828097a137a731d282f19bba5aa00a4a7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1f4bf53828097a137a731d282f19bba5aa00a4a7",
      "tree": {
        "sha": "8f22369f98767b7f74c0ea9d51f01844beaaffe6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f22369f98767b7f74c0ea9d51f01844beaaffe6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f4eede66bbf363aade618f436f3f65d6cf933cc1",
          "sha": "f4eede66bbf363aade618f436f3f65d6cf933cc1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f4eede66bbf363aade618f436f3f65d6cf933cc1"
        }
      ],
      "message": "opt: Skip checking max_weight separately\n\nInitialize `best_selection_weight` as `max_weight` allows us to skip the\nseparate `max_weight` check on every loop.",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2024-02-04T20:59:50Z"
      },
      "author": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2024-01-08T19:30:40Z"
      },
      "sha": "1f4bf53828097a137a731d282f19bba5aa00a4a7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDUwNTVkM2QyMGI1ZjJjZDJjYzkyZjA1YjBlNjE4YWFmNzEzYWQ4NzU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5055d3d20b5f2cd2cc92f05b0e618aaf713ad875",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5055d3d20b5f2cd2cc92f05b0e618aaf713ad875",
      "tree": {
        "sha": "77c13967fecf80536db184749a87876fddf9cabd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77c13967fecf80536db184749a87876fddf9cabd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f4bf53828097a137a731d282f19bba5aa00a4a7",
          "sha": "1f4bf53828097a137a731d282f19bba5aa00a4a7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1f4bf53828097a137a731d282f19bba5aa00a4a7"
        }
      ],
      "message": "test: Exhaust search attempts with tiny UTXOs",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2024-02-04T20:59:50Z"
      },
      "author": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2024-01-08T18:33:01Z"
      },
      "sha": "5055d3d20b5f2cd2cc92f05b0e618aaf713ad875"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGVlNmZmNTdiZWM5NTlhMDg4NzIwMmI1ZmE0NGJkMzM5YmVjM2JiYWY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "tree": {
        "sha": "321de205eb590a3ccc9c0b6b479bcc0ae3efb917",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/321de205eb590a3ccc9c0b6b479bcc0ae3efb917"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5055d3d20b5f2cd2cc92f05b0e618aaf713ad875",
          "sha": "5055d3d20b5f2cd2cc92f05b0e618aaf713ad875",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5055d3d20b5f2cd2cc92f05b0e618aaf713ad875"
        }
      ],
      "message": "opt: Skip over barren combinations of tiny UTXOs\n\nGiven a lot of small amount UTXOs it is possible that the lookahead\nindicates sufficient funds, but any combination of them would push us\nbeyond the current best_weight.\nWe can estimate a lower bound for the minimal necessary weight to reach\ntarget from the maximal amount and minimal weight in the tail of the\nUTXO pool: if adding a number of hypothetical UTXOs of this maximum\namount and minimum weight would not be able to beat `best_weight`, we\ncan SHIFT to the omission branch, and CUT if the last selected UTXO is\nnot heavier than the minimum weight of the remainder.",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2024-02-04T20:59:50Z"
      },
      "author": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2024-01-08T18:04:29Z"
      },
      "sha": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11696519130,
      "node_id": "HRFPE_lADOABII585opn0ezwAAAAK5Krfa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11696519130",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-04T21:00:56Z"
    },
    {
      "event": "commented",
      "id": 1925913171,
      "node_id": "IC_kwDOABII585yyxpT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1925913171",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-04T21:02:42Z",
      "updated_at": "2024-02-04T21:02:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "Added a longer textual explanation on how the algorithm can be thought in terms of the search graph it walks.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#issuecomment-1925913171",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27877"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318794256",
      "pull_request_review_id": 1615733605,
      "id": 1318794256,
      "node_id": "PRRC_kwDOABII585OmzQQ",
      "diff_hunk": "@@ -191,6 +191,161 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * • ADD: select the UTXO group at the current index into the input set\n+ * • SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * • CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * • ADD:   010100 ⇒ 010110\n+ *          the UTXO at the index (here 5th) is additionally selected\n+ * • SHIFT: 010100 ⇒ 010010\n+ *          the 4th is deselected and the 5th is selected instead\n+ * • CUT:   010100 ⇒ 001000\n+ *          the third is deselected, the first is deselected and the second is selected\n+ *\n+ * @param const std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.\n+ *        These UTXO groups will be sorted in descending order by effective\n+ *        value, with lower weight preferred as a tie-breaker.\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without\n+ *        considering change.\n+ * @param CAmount& change_target The minimum budget for creating a change output that we add to the selection_target.\n+ * @param int max_weight The maximum weight available for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+\n+    std::vector<size_t> best_selection; // best selection UTXO indices\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = INT_MAX;\n+\n+    std::vector<size_t> curr_selection; // selected UTXO indices\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert that this utxo is not negative. It should never be negative,\n+        // effective value calculation should have removed it\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    size_t utxo_pool_index = 0;\n+    enum operations { add, shift, cut, done };\n+    operations next_op = operations::add;\n+\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool.at(curr_selection.back());\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    auto add_utxo_at_index = [&]() {\n+        OutputGroup& utxo = utxo_pool.at(utxo_pool_index);\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(utxo_pool_index);\n+        next_op = operations::add;\n+    };\n+\n+    for (size_t curr_try = 0;;) {\n+        if (curr_try >= TOTAL_TRIES || next_op == operations::done) {",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "49ec2d4ada6d9abb43c2a5f35dd6f2e5666157f9",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 49ec2d4ada6d9abb43c2a5f35dd6f2e5666157f9: Is there any case that `curr_try` may be greater than `TOTAL_TRIES`? ",
      "created_at": "2023-09-07T15:37:38Z",
      "updated_at": "2023-09-07T15:37:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1318794256",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318794256"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318948005",
      "pull_request_review_id": 1615976225,
      "id": 1318948005,
      "node_id": "PRRC_kwDOABII585OnYyl",
      "diff_hunk": "@@ -191,6 +191,161 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * • ADD: select the UTXO group at the current index into the input set\n+ * • SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * • CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * • ADD:   010100 ⇒ 010110\n+ *          the UTXO at the index (here 5th) is additionally selected\n+ * • SHIFT: 010100 ⇒ 010010\n+ *          the 4th is deselected and the 5th is selected instead\n+ * • CUT:   010100 ⇒ 001000\n+ *          the third is deselected, the first is deselected and the second is selected\n+ *\n+ * @param const std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.\n+ *        These UTXO groups will be sorted in descending order by effective\n+ *        value, with lower weight preferred as a tie-breaker.\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without\n+ *        considering change.\n+ * @param CAmount& change_target The minimum budget for creating a change output that we add to the selection_target.\n+ * @param int max_weight The maximum weight available for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+\n+    std::vector<size_t> best_selection; // best selection UTXO indices\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = INT_MAX;\n+\n+    std::vector<size_t> curr_selection; // selected UTXO indices\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert that this utxo is not negative. It should never be negative,\n+        // effective value calculation should have removed it\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    size_t utxo_pool_index = 0;\n+    enum operations { add, shift, cut, done };\n+    operations next_op = operations::add;\n+\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool.at(curr_selection.back());\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    auto add_utxo_at_index = [&]() {\n+        OutputGroup& utxo = utxo_pool.at(utxo_pool_index);\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(utxo_pool_index);\n+        next_op = operations::add;\n+    };\n+\n+    for (size_t curr_try = 0;;) {\n+        if (curr_try >= TOTAL_TRIES || next_op == operations::done) {",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "49ec2d4ada6d9abb43c2a5f35dd6f2e5666157f9",
      "in_reply_to_id": 1318794256,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, I don’t think so, an equality check here should be functionally equivalent.",
      "created_at": "2023-09-07T17:56:03Z",
      "updated_at": "2023-09-07T17:56:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1318948005",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318948005"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1319031269",
      "pull_request_review_id": 1616104896,
      "id": 1319031269,
      "node_id": "PRRC_kwDOABII585OntHl",
      "diff_hunk": "@@ -174,6 +174,10 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n                 curr_selection_weight += utxo.m_weight;\n             }\n         }\n+        if (curr_try >= TOTAL_TRIES - 1) {\n+            // On last attempt and didn’t break due to full traversal: solution is non-optimal\n+            result.SetAlgoCompleted(false);",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "cf14a72859a2eaf42a24a2ea3125bdadde5f6611",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In cf14a72859a2eaf42a24a2ea3125bdadde5f6611: Here we're setting it for BnB but seems we're not using `GetAlgoCompleted` for it?",
      "created_at": "2023-09-07T19:23:20Z",
      "updated_at": "2023-09-07T19:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1319031269",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1319031269"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 191,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1320274591",
      "pull_request_review_id": 1618156668,
      "id": 1320274591,
      "node_id": "PRRC_kwDOABII585Oscqf",
      "diff_hunk": "@@ -174,6 +174,10 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n                 curr_selection_weight += utxo.m_weight;\n             }\n         }\n+        if (curr_try >= TOTAL_TRIES - 1) {\n+            // On last attempt and didn’t break due to full traversal: solution is non-optimal\n+            result.SetAlgoCompleted(false);",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "cf14a72859a2eaf42a24a2ea3125bdadde5f6611",
      "in_reply_to_id": 1319031269,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You are right, I’ll have follow up on this",
      "created_at": "2023-09-08T19:41:44Z",
      "updated_at": "2023-09-08T19:41:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1320274591",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1320274591"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 191,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414446693",
      "pull_request_review_id": 1763330890,
      "id": 1414446693,
      "node_id": "PRRC_kwDOABII585UTr5l",
      "diff_hunk": "@@ -28,6 +28,14 @@ static util::Result<SelectionResult> ErrorMaxWeightExceeded()\n struct {\n     bool operator()(const OutputGroup& a, const OutputGroup& b) const\n     {\n+        if (a.GetSelectionAmount() == b.GetSelectionAmount()) {\n+            // Sort lower waste to front on tied effective_value\n+            if (a.long_term_fee < a.fee) {\n+                return a.m_weight < b.m_weight;\n+            } else {\n+                return a.m_weight > b.m_weight;\n+            }",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "313d4df88360edf1bad1f3415166a96f0ee93f0a",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 313d4df88360edf1bad1f3415166a96f0ee93f0a \"opt: Tie-break UTXO sort by waste for BnB\"\r\n\r\nThis comparison is a little hard to follow as it requires reminding yourself of the effects of the waste score. It wasn't immediately obvious why the weight matters for this comparison. It seems like it would be simpler to just actually calculate the wastes and compare them.\r\n\r\n```suggestion\r\n            return (a.fee - a.long_term_fee) > (b.fee - b.long_term_fee);\r\n```",
      "created_at": "2023-12-04T20:25:00Z",
      "updated_at": "2023-12-04T21:25:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1414446693",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414446693"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": 33,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414455724",
      "pull_request_review_id": 1763330890,
      "id": 1414455724,
      "node_id": "PRRC_kwDOABII585UTuGs",
      "diff_hunk": "@@ -585,6 +585,13 @@ util::Result<SelectionResult> ChooseSelectionResult(const CAmount& nTargetValue,\n         results.push_back(*knapsack_result);\n     } else append_error(knapsack_result);\n \n+    if (coin_selection_params.m_effective_feerate > CFeeRate{coin_selection_params.m_long_term_feerate.GetFee(3000)}) { // Minimize input set for feerates of at least 3×LTFRE (default: 30 ṩ/vB+)",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "ec308d7873f7eb4d597c00708091ede55e9ff5a5",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In ec308d7873f7eb4d597c00708091ede55e9ff5a5 \"coinselection: Add CoinGrinder algorithm\"\r\n\r\nI wish there was a better way to write feerate*3. This is kinda hard to read.",
      "created_at": "2023-12-04T20:31:20Z",
      "updated_at": "2023-12-04T21:25:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1414455724",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414455724"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 588,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414479523",
      "pull_request_review_id": 1763330890,
      "id": 1414479523,
      "node_id": "PRRC_kwDOABII585UTz6j",
      "diff_hunk": "@@ -191,6 +191,160 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * • ADD: select the UTXO group at the current index into the input set\n+ * • SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * • CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * • ADD:   010100 ⇒ 010110\n+ *          the UTXO at the index (here 5th) is additionally selected\n+ * • SHIFT: 010100 ⇒ 010010\n+ *          the 4th is deselected and the 5th is selected instead\n+ * • CUT:   010100 ⇒ 001000\n+ *          the third is deselected, the first is deselected and the second is selected\n+ *\n+ * @param const std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.\n+ *        These UTXO groups will be sorted in descending order by effective\n+ *        value, with lower weight preferred as a tie-breaker.\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without\n+ *        considering change.\n+ * @param CAmount& change_target The minimum budget for creating a change output that we add to the selection_target.\n+ * @param int max_weight The maximum weight available for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+\n+    std::vector<size_t> best_selection; // best selection UTXO indices\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = INT_MAX;\n+\n+    std::vector<size_t> curr_selection; // selected UTXO indices\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert that this utxo is not negative. It should never be negative,\n+        // effective value calculation should have removed it\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    size_t utxo_pool_index = 0; // Points at the UTXO to select next\n+    enum operations { add, shift, cut, done };\n+    operations next_op = operations::add;\n+\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool.at(curr_selection.back());\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    auto add_utxo_at_index = [&]() {\n+        OutputGroup& utxo = utxo_pool.at(utxo_pool_index);\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(utxo_pool_index);\n+        next_op = operations::add;\n+    };",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "ec308d7873f7eb4d597c00708091ede55e9ff5a5",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In ec308d7873f7eb4d597c00708091ede55e9ff5a5 \"coinselection: Add CoinGrinder algorithm\"\r\n\r\nSince this lambda is used in only one spot, I think it would be a bit easier to read to just have it inline.",
      "created_at": "2023-12-04T20:50:35Z",
      "updated_at": "2023-12-04T21:25:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1414479523",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414479523"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": 268,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 274,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414513187",
      "pull_request_review_id": 1763330890,
      "id": 1414513187,
      "node_id": "PRRC_kwDOABII585UT8Ij",
      "diff_hunk": "@@ -257,17 +257,21 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n     // Sort the utxo_pool\n     std::sort(utxo_pool.begin(), utxo_pool.end(), descending_effval_weight);\n     std::vector<CAmount> lookahead(utxo_pool.size());\n+    std::vector<int> min_tail_weight(utxo_pool.size());\n \n     // Calculate lookahead and check that there are sufficient funds\n     CAmount total_available = 0;\n+    int min_group_weight = 2*max_weight;",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "6ba9c1cd1032c75e618d8ca7b7aee6ebed16d22d",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 6ba9c1cd1032c75e618d8ca7b7aee6ebed16d22d \"opt: Cut if last addition was minimal weight\"\r\n\r\nWhy 2x `max_weight` instead of just `max_weight`?",
      "created_at": "2023-12-04T21:20:06Z",
      "updated_at": "2023-12-04T21:25:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1414513187",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414513187"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1420936262",
      "pull_request_review_id": 1773042003,
      "id": 1420936262,
      "node_id": "PRRC_kwDOABII585UscRG",
      "diff_hunk": "@@ -28,6 +28,14 @@ static util::Result<SelectionResult> ErrorMaxWeightExceeded()\n struct {\n     bool operator()(const OutputGroup& a, const OutputGroup& b) const\n     {\n+        if (a.GetSelectionAmount() == b.GetSelectionAmount()) {\n+            // Sort lower waste to front on tied effective_value\n+            if (a.long_term_fee < a.fee) {\n+                return a.m_weight < b.m_weight;\n+            } else {\n+                return a.m_weight > b.m_weight;\n+            }",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "313d4df88360edf1bad1f3415166a96f0ee93f0a",
      "in_reply_to_id": 1414446693,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, great suggestion. Adopted, but with turned around comparison, it needs to be less-than (I checked with a test).",
      "created_at": "2023-12-08T19:33:07Z",
      "updated_at": "2023-12-08T20:05:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1420936262",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1420936262"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": 33,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1420947210",
      "pull_request_review_id": 1773042003,
      "id": 1420947210,
      "node_id": "PRRC_kwDOABII585Use8K",
      "diff_hunk": "@@ -585,6 +585,13 @@ util::Result<SelectionResult> ChooseSelectionResult(const CAmount& nTargetValue,\n         results.push_back(*knapsack_result);\n     } else append_error(knapsack_result);\n \n+    if (coin_selection_params.m_effective_feerate > CFeeRate{coin_selection_params.m_long_term_feerate.GetFee(3000)}) { // Minimize input set for feerates of at least 3×LTFRE (default: 30 ṩ/vB+)",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "ec308d7873f7eb4d597c00708091ede55e9ff5a5",
      "in_reply_to_id": 1414455724,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added multiplication operator in https://github.com/bitcoin/bitcoin/pull/29037, and amended here",
      "created_at": "2023-12-08T19:38:21Z",
      "updated_at": "2023-12-08T20:05:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1420947210",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1420947210"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 588,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1420959370",
      "pull_request_review_id": 1773042003,
      "id": 1420959370,
      "node_id": "PRRC_kwDOABII585Ush6K",
      "diff_hunk": "@@ -191,6 +191,160 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * • ADD: select the UTXO group at the current index into the input set\n+ * • SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * • CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * • ADD:   010100 ⇒ 010110\n+ *          the UTXO at the index (here 5th) is additionally selected\n+ * • SHIFT: 010100 ⇒ 010010\n+ *          the 4th is deselected and the 5th is selected instead\n+ * • CUT:   010100 ⇒ 001000\n+ *          the third is deselected, the first is deselected and the second is selected\n+ *\n+ * @param const std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.\n+ *        These UTXO groups will be sorted in descending order by effective\n+ *        value, with lower weight preferred as a tie-breaker.\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without\n+ *        considering change.\n+ * @param CAmount& change_target The minimum budget for creating a change output that we add to the selection_target.\n+ * @param int max_weight The maximum weight available for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+\n+    std::vector<size_t> best_selection; // best selection UTXO indices\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = INT_MAX;\n+\n+    std::vector<size_t> curr_selection; // selected UTXO indices\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert that this utxo is not negative. It should never be negative,\n+        // effective value calculation should have removed it\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    size_t utxo_pool_index = 0; // Points at the UTXO to select next\n+    enum operations { add, shift, cut, done };\n+    operations next_op = operations::add;\n+\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool.at(curr_selection.back());\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    auto add_utxo_at_index = [&]() {\n+        OutputGroup& utxo = utxo_pool.at(utxo_pool_index);\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(utxo_pool_index);\n+        next_op = operations::add;\n+    };",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "ec308d7873f7eb4d597c00708091ede55e9ff5a5",
      "in_reply_to_id": 1414479523,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Inlined the `add_utxo_at_index` function",
      "created_at": "2023-12-08T19:41:31Z",
      "updated_at": "2023-12-08T20:05:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1420959370",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1420959370"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": 268,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 274,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1420968134",
      "pull_request_review_id": 1773042003,
      "id": 1420968134,
      "node_id": "PRRC_kwDOABII585UskDG",
      "diff_hunk": "@@ -257,17 +257,21 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n     // Sort the utxo_pool\n     std::sort(utxo_pool.begin(), utxo_pool.end(), descending_effval_weight);\n     std::vector<CAmount> lookahead(utxo_pool.size());\n+    std::vector<int> min_tail_weight(utxo_pool.size());\n \n     // Calculate lookahead and check that there are sufficient funds\n     CAmount total_available = 0;\n+    int min_group_weight = 2*max_weight;",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "6ba9c1cd1032c75e618d8ca7b7aee6ebed16d22d",
      "in_reply_to_id": 1414513187,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I just need this to be as big as the largest or bigger than any of the actual groups’ input weights. Changed to `std::numeric_limits<int>::max()`",
      "created_at": "2023-12-08T19:47:52Z",
      "updated_at": "2023-12-08T20:05:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1420968134",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1420968134"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1420971102",
      "pull_request_review_id": 1773042003,
      "id": 1420971102,
      "node_id": "PRRC_kwDOABII585Uskxe",
      "diff_hunk": "@@ -174,6 +174,10 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n                 curr_selection_weight += utxo.m_weight;\n             }\n         }\n+        if (curr_try >= TOTAL_TRIES - 1) {\n+            // On last attempt and didn’t break due to full traversal: solution is non-optimal\n+            result.SetAlgoCompleted(false);",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "cf14a72859a2eaf42a24a2ea3125bdadde5f6611",
      "in_reply_to_id": 1319031269,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I dropped tracking whether the algorithm was able to exhaustively search the UTXO pool from BnB for now",
      "created_at": "2023-12-08T19:51:51Z",
      "updated_at": "2023-12-08T20:05:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1420971102",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1420971102"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 191,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421777389",
      "pull_request_review_id": 1774060383,
      "id": 1421777389,
      "node_id": "PRRC_kwDOABII585Uvpnt",
      "diff_hunk": "@@ -188,6 +188,156 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * • ADD: select the UTXO group at the current index into the input set\n+ * • SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * • CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * • ADD:   010100 ⇒ 010110\n+ *          the UTXO at the index (here 5th) is additionally selected\n+ * • SHIFT: 010100 ⇒ 010010\n+ *          the 4th is deselected and the 5th is selected instead\n+ * • CUT:   010100 ⇒ 001000\n+ *          the third is deselected, the first is deselected and the second is selected",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "232d3d94fc9692d2c7c00dd797e71ed01c808e03",
      "in_reply_to_id": null,
      "user": {
        "login": "kashifs",
        "id": 1489460,
        "node_id": "MDQ6VXNlcjE0ODk0NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1489460?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kashifs",
        "html_url": "https://github.com/kashifs",
        "followers_url": "https://api.github.com/users/kashifs/followers",
        "following_url": "https://api.github.com/users/kashifs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kashifs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kashifs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kashifs/subscriptions",
        "organizations_url": "https://api.github.com/users/kashifs/orgs",
        "repos_url": "https://api.github.com/users/kashifs/repos",
        "events_url": "https://api.github.com/users/kashifs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kashifs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For consistency, I think this should read:\r\n\r\n`the 4th is deselected, the 2nd is deselected and the 3rd is selected`",
      "created_at": "2023-12-10T16:14:35Z",
      "updated_at": "2023-12-10T16:14:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1421777389",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421777389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 212,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421789507",
      "pull_request_review_id": 1774071212,
      "id": 1421789507,
      "node_id": "PRRC_kwDOABII585UvslD",
      "diff_hunk": "@@ -188,6 +188,156 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * • ADD: select the UTXO group at the current index into the input set\n+ * • SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * • CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * • ADD:   010100 ⇒ 010110\n+ *          the UTXO at the index (here 5th) is additionally selected\n+ * • SHIFT: 010100 ⇒ 010010\n+ *          the 4th is deselected and the 5th is selected instead\n+ * • CUT:   010100 ⇒ 001000\n+ *          the third is deselected, the first is deselected and the second is selected\n+ *\n+ * @param const std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "232d3d94fc9692d2c7c00dd797e71ed01c808e03",
      "in_reply_to_id": null,
      "user": {
        "login": "kashifs",
        "id": 1489460,
        "node_id": "MDQ6VXNlcjE0ODk0NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1489460?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kashifs",
        "html_url": "https://github.com/kashifs",
        "followers_url": "https://api.github.com/users/kashifs/followers",
        "following_url": "https://api.github.com/users/kashifs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kashifs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kashifs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kashifs/subscriptions",
        "organizations_url": "https://api.github.com/users/kashifs/orgs",
        "repos_url": "https://api.github.com/users/kashifs/repos",
        "events_url": "https://api.github.com/users/kashifs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kashifs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This should read:\r\n\r\n`@param std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.`",
      "created_at": "2023-12-10T17:40:26Z",
      "updated_at": "2023-12-10T17:40:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1421789507",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421789507"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421790528",
      "pull_request_review_id": 1774072057,
      "id": 1421790528,
      "node_id": "PRRC_kwDOABII585Uvs1A",
      "diff_hunk": "@@ -188,6 +188,156 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * • ADD: select the UTXO group at the current index into the input set\n+ * • SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * • CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * • ADD:   010100 ⇒ 010110\n+ *          the UTXO at the index (here 5th) is additionally selected\n+ * • SHIFT: 010100 ⇒ 010010\n+ *          the 4th is deselected and the 5th is selected instead\n+ * • CUT:   010100 ⇒ 001000\n+ *          the third is deselected, the first is deselected and the second is selected\n+ *\n+ * @param const std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.\n+ *        These UTXO groups will be sorted in descending order by effective\n+ *        value, with lower weight preferred as a tie-breaker.\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without\n+ *        considering change.\n+ * @param CAmount& change_target The minimum budget for creating a change output that we add to the selection_target.",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "232d3d94fc9692d2c7c00dd797e71ed01c808e03",
      "in_reply_to_id": null,
      "user": {
        "login": "kashifs",
        "id": 1489460,
        "node_id": "MDQ6VXNlcjE0ODk0NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1489460?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kashifs",
        "html_url": "https://github.com/kashifs",
        "followers_url": "https://api.github.com/users/kashifs/followers",
        "following_url": "https://api.github.com/users/kashifs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kashifs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kashifs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kashifs/subscriptions",
        "organizations_url": "https://api.github.com/users/kashifs/orgs",
        "repos_url": "https://api.github.com/users/kashifs/repos",
        "events_url": "https://api.github.com/users/kashifs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kashifs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this should read:\r\n\r\n`@param CAmount change_target The minimum budget for creating a change output that we add to the selection_target.`",
      "created_at": "2023-12-10T17:47:49Z",
      "updated_at": "2023-12-10T17:47:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1421790528",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421790528"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423095044",
      "pull_request_review_id": 1776118641,
      "id": 1423095044,
      "node_id": "PRRC_kwDOABII585U0rUE",
      "diff_hunk": "@@ -188,6 +188,156 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * • ADD: select the UTXO group at the current index into the input set\n+ * • SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * • CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * • ADD:   010100 ⇒ 010110\n+ *          the UTXO at the index (here 5th) is additionally selected\n+ * • SHIFT: 010100 ⇒ 010010\n+ *          the 4th is deselected and the 5th is selected instead\n+ * • CUT:   010100 ⇒ 001000\n+ *          the third is deselected, the first is deselected and the second is selected\n+ *\n+ * @param const std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.\n+ *        These UTXO groups will be sorted in descending order by effective\n+ *        value, with lower weight preferred as a tie-breaker.\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without\n+ *        considering change.\n+ * @param CAmount& change_target The minimum budget for creating a change output that we add to the selection_target.",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "232d3d94fc9692d2c7c00dd797e71ed01c808e03",
      "in_reply_to_id": 1421790528,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "perhaps `change_target` could be `const CAmount&`?",
      "created_at": "2023-12-11T20:33:53Z",
      "updated_at": "2023-12-11T20:33:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1423095044",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423095044"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425998172",
      "pull_request_review_id": 1780665941,
      "id": 1425998172,
      "node_id": "PRRC_kwDOABII585U_wFc",
      "diff_hunk": "@@ -188,6 +188,156 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * • ADD: select the UTXO group at the current index into the input set\n+ * • SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * • CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * • ADD:   010100 ⇒ 010110\n+ *          the UTXO at the index (here 5th) is additionally selected\n+ * • SHIFT: 010100 ⇒ 010010\n+ *          the 4th is deselected and the 5th is selected instead\n+ * • CUT:   010100 ⇒ 001000\n+ *          the third is deselected, the first is deselected and the second is selected\n+ *\n+ * @param const std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.\n+ *        These UTXO groups will be sorted in descending order by effective\n+ *        value, with lower weight preferred as a tie-breaker.\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without\n+ *        considering change.\n+ * @param CAmount& change_target The minimum budget for creating a change output that we add to the selection_target.",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "232d3d94fc9692d2c7c00dd797e71ed01c808e03",
      "in_reply_to_id": 1421790528,
      "user": {
        "login": "kashifs",
        "id": 1489460,
        "node_id": "MDQ6VXNlcjE0ODk0NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1489460?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kashifs",
        "html_url": "https://github.com/kashifs",
        "followers_url": "https://api.github.com/users/kashifs/followers",
        "following_url": "https://api.github.com/users/kashifs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kashifs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kashifs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kashifs/subscriptions",
        "organizations_url": "https://api.github.com/users/kashifs/orgs",
        "repos_url": "https://api.github.com/users/kashifs/repos",
        "events_url": "https://api.github.com/users/kashifs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kashifs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps. That would make it consistent with const CAmount& selection_target. It's my understanding that the documentation should exactly match the function definition. Is there another way to look at this?",
      "created_at": "2023-12-13T23:45:10Z",
      "updated_at": "2023-12-13T23:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1425998172",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425998172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435191286",
      "pull_request_review_id": 1794686545,
      "id": 1435191286,
      "node_id": "PRRC_kwDOABII585Vi0f2",
      "diff_hunk": "@@ -188,6 +188,156 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * • ADD: select the UTXO group at the current index into the input set\n+ * • SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * • CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * • ADD:   010100 ⇒ 010110\n+ *          the UTXO at the index (here 5th) is additionally selected\n+ * • SHIFT: 010100 ⇒ 010010\n+ *          the 4th is deselected and the 5th is selected instead\n+ * • CUT:   010100 ⇒ 001000\n+ *          the third is deselected, the first is deselected and the second is selected",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "232d3d94fc9692d2c7c00dd797e71ed01c808e03",
      "in_reply_to_id": 1421777389,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, I’ll fix that",
      "created_at": "2023-12-22T16:10:52Z",
      "updated_at": "2023-12-22T16:54:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1435191286",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435191286"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 212,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435191774",
      "pull_request_review_id": 1794686545,
      "id": 1435191774,
      "node_id": "PRRC_kwDOABII585Vi0ne",
      "diff_hunk": "@@ -188,6 +188,156 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * • ADD: select the UTXO group at the current index into the input set\n+ * • SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * • CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * • ADD:   010100 ⇒ 010110\n+ *          the UTXO at the index (here 5th) is additionally selected\n+ * • SHIFT: 010100 ⇒ 010010\n+ *          the 4th is deselected and the 5th is selected instead\n+ * • CUT:   010100 ⇒ 001000\n+ *          the third is deselected, the first is deselected and the second is selected\n+ *\n+ * @param const std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "232d3d94fc9692d2c7c00dd797e71ed01c808e03",
      "in_reply_to_id": 1421789507,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed, thanks",
      "created_at": "2023-12-22T16:11:39Z",
      "updated_at": "2023-12-22T16:54:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1435191774",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435191774"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435192987",
      "pull_request_review_id": 1794686545,
      "id": 1435192987,
      "node_id": "PRRC_kwDOABII585Vi06b",
      "diff_hunk": "@@ -188,6 +188,156 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * • ADD: select the UTXO group at the current index into the input set\n+ * • SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * • CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * • ADD:   010100 ⇒ 010110\n+ *          the UTXO at the index (here 5th) is additionally selected\n+ * • SHIFT: 010100 ⇒ 010010\n+ *          the 4th is deselected and the 5th is selected instead\n+ * • CUT:   010100 ⇒ 001000\n+ *          the third is deselected, the first is deselected and the second is selected\n+ *\n+ * @param const std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.\n+ *        These UTXO groups will be sorted in descending order by effective\n+ *        value, with lower weight preferred as a tie-breaker.\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without\n+ *        considering change.\n+ * @param CAmount& change_target The minimum budget for creating a change output that we add to the selection_target.",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "232d3d94fc9692d2c7c00dd797e71ed01c808e03",
      "in_reply_to_id": 1421790528,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, I’ve amended the documentation",
      "created_at": "2023-12-22T16:13:37Z",
      "updated_at": "2023-12-22T16:54:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1435192987",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1435192987"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1438411775",
      "pull_request_review_id": 1799219103,
      "id": 1438411775,
      "node_id": "PRRC_kwDOABII585VvGv_",
      "diff_hunk": "@@ -188,6 +188,156 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "73b87bacf6d633e89d78f8621b8311c5853ea641",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps this explanation of the algorithm belongs more inside the body of the function than at the top, as it's explaining the implementation and not the interface?",
      "created_at": "2023-12-29T21:11:38Z",
      "updated_at": "2023-12-29T22:24:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1438411775",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1438411775"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 198,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1438411976",
      "pull_request_review_id": 1799219103,
      "id": 1438411976,
      "node_id": "PRRC_kwDOABII585VvGzI",
      "diff_hunk": "@@ -188,6 +188,156 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * • ADD: select the UTXO group at the current index into the input set",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "73b87bacf6d633e89d78f8621b8311c5853ea641",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It took me a while to figure out what the intent of each operation is. It may be worthwhile to document that here too. My belief is:\r\n* ADD: explore the current prefix further (by selecting the first undecided transaction, ignoring equal-value transactions if the last one was unselected).\r\n* SHIFT: skip the current prefix (just the selection branch).\r\n* CUT: skip the current prefix (both selection and non-selection branches).\r\n\r\nIt may also be helpful to explain for each of the operations how the \"current index\" is affected by them.",
      "created_at": "2023-12-29T21:12:21Z",
      "updated_at": "2023-12-29T22:59:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1438411976",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1438411976"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 201,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1438428556",
      "pull_request_review_id": 1799219103,
      "id": 1438428556,
      "node_id": "PRRC_kwDOABII585VvK2M",
      "diff_hunk": "@@ -183,6 +200,189 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * • ADD: select the UTXO group at the current index into the input set\n+ * • SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * • CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * • ADD:   010100 ⇒ 010110\n+ *          the UTXO at the index (here the 5th UTXO) is additionally selected\n+ * • SHIFT: 010100 ⇒ 010010\n+ *          the 4th UTXO is deselected and the 5th is selected instead\n+ * • CUT:   010100 ⇒ 001000\n+ *          the fourth UTXO is deselected, the second is deselected and the third is selected\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.\n+ *        These UTXO groups will be sorted in descending order by effective\n+ *        value, with lower weight preferred as a tie-breaker.\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without\n+ *        considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output that we add to the selection_target.\n+ * @param int max_weight The maximum weight available for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+\n+    std::vector<size_t> best_selection; // best selection UTXO indices\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = max_weight; // Tie is fine, because we prefer lower selection amount\n+\n+    std::vector<size_t> curr_selection; // selected UTXO indices\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending_effval_weight);\n+    std::vector<CAmount> lookahead(utxo_pool.size());\n+    std::vector<int> min_tail_weight(utxo_pool.size());\n+\n+    // Calculate lookahead and check that there are sufficient funds\n+    CAmount total_available = 0;\n+    int min_group_weight = std::numeric_limits<int>::max();\n+    size_t i = utxo_pool.size();\n+    while (i > 0) {\n+        --i;\n+        lookahead.at(i) = total_available;\n+        min_tail_weight.at(i) = min_group_weight;\n+        // Assert that this utxo is not negative. It should never be negative,\n+        // effective value calculation should have removed it\n+        assert(utxo_pool.at(i).GetSelectionAmount() > 0);\n+        total_available += utxo_pool.at(i).GetSelectionAmount();\n+        min_group_weight = std::min(min_group_weight, utxo_pool.at(i).m_weight);\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    size_t utxo_pool_index = 0; // Points at the UTXO to select next\n+    enum operations { add, shift, cut, done };\n+    operations next_op = operations::add;\n+\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool.at(curr_selection.back());\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    for (size_t curr_try = 0;;) {\n+        if (curr_try >= TOTAL_TRIES || next_op == operations::done) {\n+            result.SetAlgoCompleted(next_op == operations::done); // True if done, false if curr_try hit TOTAL_TRIES\n+            // Exhausted search space or reached limit\n+            break;\n+        }\n+        switch (next_op)\n+        {\n+        case cut:\n+        {\n+            // Deselect last selected, then shift last selected by one\n+            if (curr_selection.empty()) {\n+                next_op = operations::done;\n+                break; // Search finished\n+            }\n+            deselect_last();\n+            [[fallthrough]];\n+        }\n+        case shift:\n+        {\n+            // Deselect last selected, select UTXO group at next index instead\n+            if (curr_selection.empty()) {\n+                next_op = operations::done;\n+                break; // Search finished\n+            }\n+            utxo_pool_index = curr_selection.back() + 1;\n+            deselect_last();\n+            [[fallthrough]];\n+        }\n+        case add:\n+        {\n+            if (utxo_pool_index > 0\n+                    && (curr_selection.empty() || curr_selection.back() != utxo_pool_index - 1)\n+                    && utxo_pool.at(utxo_pool_index - 1).GetSelectionAmount() == utxo_pool.at(utxo_pool_index).GetSelectionAmount()\n+                    && utxo_pool.at(utxo_pool_index - 1).fee == utxo_pool.at(utxo_pool_index).fee) {\n+                if (utxo_pool_index < utxo_pool.size() - 1) {\n+                    // Skip if previous UTXO is equivalent and unselected\n+                    next_op = operations::add;\n+                    ++utxo_pool_index;\n+                    break;\n+                } else {\n+                    // \"Skipping\" end of branch: SHIFT instead\n+                    next_op = operations::shift;\n+                    break;\n+                }\n+            }\n+            // Select next UTXO\n+            OutputGroup& utxo = utxo_pool.at(utxo_pool_index);\n+            curr_amount += utxo.GetSelectionAmount();\n+            curr_weight += utxo.m_weight;\n+            curr_selection.push_back(utxo_pool_index);\n+            next_op = operations::add;\n+\n+            // Depending on evaluation of current selection, ADD next, SHIFT latest, or CUT latest and shift prior",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 179,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "a7e3ad5efe6be7d662803779429a254d825da9dd",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Given that any of the {add, shift, cut} states ends with executing an add, and the end of the add operation (the block of code on this line and below) determines what the next iteration will be, I think it would be more natural to move this block to the beginning of the while loop, before the switch case. So then it becomes a processing loop that in every iteration decides what it will be doing (cut, shift, or add), without state carried between iterations? This doesn't work for \"done\", but that could be a boolean instead.",
      "created_at": "2023-12-29T22:08:27Z",
      "updated_at": "2023-12-29T22:24:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1438428556",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1438428556"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 338,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1438429769",
      "pull_request_review_id": 1799219103,
      "id": 1438429769,
      "node_id": "PRRC_kwDOABII585VvLJJ",
      "diff_hunk": "@@ -183,6 +200,189 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * • ADD: select the UTXO group at the current index into the input set\n+ * • SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * • CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * • ADD:   010100 ⇒ 010110\n+ *          the UTXO at the index (here the 5th UTXO) is additionally selected\n+ * • SHIFT: 010100 ⇒ 010010\n+ *          the 4th UTXO is deselected and the 5th is selected instead\n+ * • CUT:   010100 ⇒ 001000\n+ *          the fourth UTXO is deselected, the second is deselected and the third is selected\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.\n+ *        These UTXO groups will be sorted in descending order by effective\n+ *        value, with lower weight preferred as a tie-breaker.\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without\n+ *        considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output that we add to the selection_target.\n+ * @param int max_weight The maximum weight available for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+\n+    std::vector<size_t> best_selection; // best selection UTXO indices\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = max_weight; // Tie is fine, because we prefer lower selection amount\n+\n+    std::vector<size_t> curr_selection; // selected UTXO indices\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending_effval_weight);\n+    std::vector<CAmount> lookahead(utxo_pool.size());\n+    std::vector<int> min_tail_weight(utxo_pool.size());\n+\n+    // Calculate lookahead and check that there are sufficient funds\n+    CAmount total_available = 0;\n+    int min_group_weight = std::numeric_limits<int>::max();\n+    size_t i = utxo_pool.size();\n+    while (i > 0) {\n+        --i;\n+        lookahead.at(i) = total_available;",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "a7e3ad5efe6be7d662803779429a254d825da9dd",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'd avoid the `std::vector::at` everywhere and use `std::vector::operator[]` instead, as `at` involves conditional branches to detect out-of-bounds access (well-predicted ones, but for a tight loop like this I do expect it to still be impactful). It's generally better to crash than to have UB due to out-of-bounds access, but inside performance-critical algorithms I think it's worth the extra review effort to make sure there are no out-of-bounds accesses.",
      "created_at": "2023-12-29T22:15:02Z",
      "updated_at": "2023-12-29T22:24:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1438429769",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1438429769"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1438435912",
      "pull_request_review_id": 1799249817,
      "id": 1438435912,
      "node_id": "PRRC_kwDOABII585VvMpI",
      "diff_hunk": "@@ -183,6 +200,189 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * • ADD: select the UTXO group at the current index into the input set\n+ * • SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * • CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * • ADD:   010100 ⇒ 010110\n+ *          the UTXO at the index (here the 5th UTXO) is additionally selected\n+ * • SHIFT: 010100 ⇒ 010010\n+ *          the 4th UTXO is deselected and the 5th is selected instead\n+ * • CUT:   010100 ⇒ 001000\n+ *          the fourth UTXO is deselected, the second is deselected and the third is selected\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.\n+ *        These UTXO groups will be sorted in descending order by effective\n+ *        value, with lower weight preferred as a tie-breaker.\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without\n+ *        considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output that we add to the selection_target.\n+ * @param int max_weight The maximum weight available for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+\n+    std::vector<size_t> best_selection; // best selection UTXO indices\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = max_weight; // Tie is fine, because we prefer lower selection amount\n+\n+    std::vector<size_t> curr_selection; // selected UTXO indices\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending_effval_weight);\n+    std::vector<CAmount> lookahead(utxo_pool.size());\n+    std::vector<int> min_tail_weight(utxo_pool.size());\n+\n+    // Calculate lookahead and check that there are sufficient funds\n+    CAmount total_available = 0;\n+    int min_group_weight = std::numeric_limits<int>::max();\n+    size_t i = utxo_pool.size();\n+    while (i > 0) {\n+        --i;\n+        lookahead.at(i) = total_available;\n+        min_tail_weight.at(i) = min_group_weight;\n+        // Assert that this utxo is not negative. It should never be negative,\n+        // effective value calculation should have removed it\n+        assert(utxo_pool.at(i).GetSelectionAmount() > 0);\n+        total_available += utxo_pool.at(i).GetSelectionAmount();\n+        min_group_weight = std::min(min_group_weight, utxo_pool.at(i).m_weight);\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    size_t utxo_pool_index = 0; // Points at the UTXO to select next\n+    enum operations { add, shift, cut, done };\n+    operations next_op = operations::add;\n+\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool.at(curr_selection.back());\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    for (size_t curr_try = 0;;) {\n+        if (curr_try >= TOTAL_TRIES || next_op == operations::done) {\n+            result.SetAlgoCompleted(next_op == operations::done); // True if done, false if curr_try hit TOTAL_TRIES\n+            // Exhausted search space or reached limit\n+            break;\n+        }\n+        switch (next_op)\n+        {\n+        case cut:\n+        {\n+            // Deselect last selected, then shift last selected by one\n+            if (curr_selection.empty()) {\n+                next_op = operations::done;\n+                break; // Search finished\n+            }\n+            deselect_last();\n+            [[fallthrough]];\n+        }\n+        case shift:\n+        {\n+            // Deselect last selected, select UTXO group at next index instead\n+            if (curr_selection.empty()) {\n+                next_op = operations::done;\n+                break; // Search finished\n+            }\n+            utxo_pool_index = curr_selection.back() + 1;\n+            deselect_last();\n+            [[fallthrough]];\n+        }\n+        case add:\n+        {\n+            if (utxo_pool_index > 0\n+                    && (curr_selection.empty() || curr_selection.back() != utxo_pool_index - 1)\n+                    && utxo_pool.at(utxo_pool_index - 1).GetSelectionAmount() == utxo_pool.at(utxo_pool_index).GetSelectionAmount()\n+                    && utxo_pool.at(utxo_pool_index - 1).fee == utxo_pool.at(utxo_pool_index).fee) {\n+                if (utxo_pool_index < utxo_pool.size() - 1) {\n+                    // Skip if previous UTXO is equivalent and unselected",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 162,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "a7e3ad5efe6be7d662803779429a254d825da9dd",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "One complication with the \"move decision for add/shift/cut to beginning of loop\" approach is that this skipping doesn't work anymore as-is. I'd suggest turning it into a while loop that increments `utxo_pool_index` until the skip condition is no longer satisfied.",
      "created_at": "2023-12-29T22:54:11Z",
      "updated_at": "2023-12-29T22:54:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1438435912",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1438435912"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1439793432",
      "pull_request_review_id": 1800970305,
      "id": 1439793432,
      "node_id": "PRRC_kwDOABII585V0YEY",
      "diff_hunk": "@@ -188,6 +188,156 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "73b87bacf6d633e89d78f8621b8311c5853ea641",
      "in_reply_to_id": 1438411775,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I have reduced the description here to the interface and will add the remaining explanations to the corresponding spots of the function.",
      "created_at": "2024-01-02T20:28:43Z",
      "updated_at": "2024-01-08T21:14:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1439793432",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1439793432"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 198,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1439882229",
      "pull_request_review_id": 1800970305,
      "id": 1439882229,
      "node_id": "PRRC_kwDOABII585V0tv1",
      "diff_hunk": "@@ -188,6 +188,156 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * • ADD: select the UTXO group at the current index into the input set",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "73b87bacf6d633e89d78f8621b8311c5853ea641",
      "in_reply_to_id": 1438411976,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I have completely rewritten my description. I hope it’s clearer now.",
      "created_at": "2024-01-02T21:29:14Z",
      "updated_at": "2024-01-08T21:14:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1439882229",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1439882229"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 201,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445276896",
      "pull_request_review_id": 1800970305,
      "id": 1445276896,
      "node_id": "PRRC_kwDOABII585WJSzg",
      "diff_hunk": "@@ -183,6 +200,189 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * • ADD: select the UTXO group at the current index into the input set\n+ * • SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * • CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * • ADD:   010100 ⇒ 010110\n+ *          the UTXO at the index (here the 5th UTXO) is additionally selected\n+ * • SHIFT: 010100 ⇒ 010010\n+ *          the 4th UTXO is deselected and the 5th is selected instead\n+ * • CUT:   010100 ⇒ 001000\n+ *          the fourth UTXO is deselected, the second is deselected and the third is selected\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.\n+ *        These UTXO groups will be sorted in descending order by effective\n+ *        value, with lower weight preferred as a tie-breaker.\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without\n+ *        considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output that we add to the selection_target.\n+ * @param int max_weight The maximum weight available for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+\n+    std::vector<size_t> best_selection; // best selection UTXO indices\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = max_weight; // Tie is fine, because we prefer lower selection amount\n+\n+    std::vector<size_t> curr_selection; // selected UTXO indices\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending_effval_weight);\n+    std::vector<CAmount> lookahead(utxo_pool.size());\n+    std::vector<int> min_tail_weight(utxo_pool.size());\n+\n+    // Calculate lookahead and check that there are sufficient funds\n+    CAmount total_available = 0;\n+    int min_group_weight = std::numeric_limits<int>::max();\n+    size_t i = utxo_pool.size();\n+    while (i > 0) {\n+        --i;\n+        lookahead.at(i) = total_available;",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "a7e3ad5efe6be7d662803779429a254d825da9dd",
      "in_reply_to_id": 1438429769,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, I replaced all the `std::vector::at` with `std::vector::operator[]`.",
      "created_at": "2024-01-08T20:11:45Z",
      "updated_at": "2024-01-08T21:14:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1445276896",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445276896"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445277299",
      "pull_request_review_id": 1800970305,
      "id": 1445277299,
      "node_id": "PRRC_kwDOABII585WJS5z",
      "diff_hunk": "@@ -183,6 +200,189 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * The Coin Grinder algorithm is a DFS-based algorithm that deterministically\n+ * searches for the minimum-weight input set producing a change output. The\n+ * algorithm is closely related to the Branch and Bound algorithm, but will\n+ * produce a transaction with a change output instead of aiming to create a\n+ * changeless transaction.\n+ *\n+ * This implementation produces a new input set in every loop iteration. It\n+ * uses three operations to transition between input set candidates:\n+ *\n+ * • ADD: select the UTXO group at the current index into the input set\n+ * • SHIFT: deselect the last selected UTXO group, then ADD the next UTXO group\n+ * • CUT: deselect the last selected UTXO group, then SHIFT\n+ *\n+ * E.g. on a UTXO pool consisting of six UTXOs in which the 2nd and 4th are selected, expressing the current selection as a bitmap, the operations would look as follows:\n+ *\n+ * • ADD:   010100 ⇒ 010110\n+ *          the UTXO at the index (here the 5th UTXO) is additionally selected\n+ * • SHIFT: 010100 ⇒ 010010\n+ *          the 4th UTXO is deselected and the 5th is selected instead\n+ * • CUT:   010100 ⇒ 001000\n+ *          the fourth UTXO is deselected, the second is deselected and the third is selected\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXO groups that we are choosing from.\n+ *        These UTXO groups will be sorted in descending order by effective\n+ *        value, with lower weight preferred as a tie-breaker.\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without\n+ *        considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output that we add to the selection_target.\n+ * @param int max_weight The maximum weight available for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+\n+    std::vector<size_t> best_selection; // best selection UTXO indices\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = max_weight; // Tie is fine, because we prefer lower selection amount\n+\n+    std::vector<size_t> curr_selection; // selected UTXO indices\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending_effval_weight);\n+    std::vector<CAmount> lookahead(utxo_pool.size());\n+    std::vector<int> min_tail_weight(utxo_pool.size());\n+\n+    // Calculate lookahead and check that there are sufficient funds\n+    CAmount total_available = 0;\n+    int min_group_weight = std::numeric_limits<int>::max();\n+    size_t i = utxo_pool.size();\n+    while (i > 0) {\n+        --i;\n+        lookahead.at(i) = total_available;\n+        min_tail_weight.at(i) = min_group_weight;\n+        // Assert that this utxo is not negative. It should never be negative,\n+        // effective value calculation should have removed it\n+        assert(utxo_pool.at(i).GetSelectionAmount() > 0);\n+        total_available += utxo_pool.at(i).GetSelectionAmount();\n+        min_group_weight = std::min(min_group_weight, utxo_pool.at(i).m_weight);\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    size_t utxo_pool_index = 0; // Points at the UTXO to select next\n+    enum operations { add, shift, cut, done };\n+    operations next_op = operations::add;\n+\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool.at(curr_selection.back());\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    for (size_t curr_try = 0;;) {\n+        if (curr_try >= TOTAL_TRIES || next_op == operations::done) {\n+            result.SetAlgoCompleted(next_op == operations::done); // True if done, false if curr_try hit TOTAL_TRIES\n+            // Exhausted search space or reached limit\n+            break;\n+        }\n+        switch (next_op)\n+        {\n+        case cut:\n+        {\n+            // Deselect last selected, then shift last selected by one\n+            if (curr_selection.empty()) {\n+                next_op = operations::done;\n+                break; // Search finished\n+            }\n+            deselect_last();\n+            [[fallthrough]];\n+        }\n+        case shift:\n+        {\n+            // Deselect last selected, select UTXO group at next index instead\n+            if (curr_selection.empty()) {\n+                next_op = operations::done;\n+                break; // Search finished\n+            }\n+            utxo_pool_index = curr_selection.back() + 1;\n+            deselect_last();\n+            [[fallthrough]];\n+        }\n+        case add:\n+        {\n+            if (utxo_pool_index > 0\n+                    && (curr_selection.empty() || curr_selection.back() != utxo_pool_index - 1)\n+                    && utxo_pool.at(utxo_pool_index - 1).GetSelectionAmount() == utxo_pool.at(utxo_pool_index).GetSelectionAmount()\n+                    && utxo_pool.at(utxo_pool_index - 1).fee == utxo_pool.at(utxo_pool_index).fee) {\n+                if (utxo_pool_index < utxo_pool.size() - 1) {\n+                    // Skip if previous UTXO is equivalent and unselected\n+                    next_op = operations::add;\n+                    ++utxo_pool_index;\n+                    break;\n+                } else {\n+                    // \"Skipping\" end of branch: SHIFT instead\n+                    next_op = operations::shift;\n+                    break;\n+                }\n+            }\n+            // Select next UTXO\n+            OutputGroup& utxo = utxo_pool.at(utxo_pool_index);\n+            curr_amount += utxo.GetSelectionAmount();\n+            curr_weight += utxo.m_weight;\n+            curr_selection.push_back(utxo_pool_index);\n+            next_op = operations::add;\n+\n+            // Depending on evaluation of current selection, ADD next, SHIFT latest, or CUT latest and shift prior",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 179,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "a7e3ad5efe6be7d662803779429a254d825da9dd",
      "in_reply_to_id": 1438428556,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I’ve completely rewritten CoinGrinder to implement this suggestion.",
      "created_at": "2024-01-08T20:12:09Z",
      "updated_at": "2024-01-08T21:14:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1445277299",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445277299"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 338,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445611288",
      "pull_request_review_id": 1810381270,
      "id": 1445611288,
      "node_id": "PRRC_kwDOABII585WKkcY",
      "diff_hunk": "@@ -338,17 +339,37 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n             should_shift  = true;\n         }\n \n-        if (should_shift) {\n-            // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n-            if (curr_selection.empty()) {\n-                // Exhausted search space before running into attempt limit\n-                result.SetSelectionsEvaluated(curr_try);\n-                result.SetAlgoCompleted(true);\n-                break;\n+        while (!is_done && should_shift) {\n+            if (should_shift) {",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "8858f4988002d62cd8cc56db91909b4fdc733a22",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I believe this condition is always true (since it's inside a `while (... && should_shift)`).",
      "created_at": "2024-01-09T04:23:36Z",
      "updated_at": "2024-01-09T04:50:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1445611288",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445611288"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 343,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445616402",
      "pull_request_review_id": 1810381270,
      "id": 1445616402,
      "node_id": "PRRC_kwDOABII585WKlsS",
      "diff_hunk": "@@ -336,6 +337,9 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n                 best_selection_weight = curr_weight;\n                 best_selection_amount = curr_amount;\n             }\n+        } else if (!best_selection.empty() && curr_weight + min_tail_weight[curr_selection.back()] * std::ceil((selection_target + change_target - curr_amount) / utxo_pool[curr_selection.back()].GetSelectionAmount()) > best_selection_weight) {",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "840beb3f8fa61ca1f8ce791738eab71a4924f8de",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think this `std::ceil` is doing anything. The `/` operator is an integer division here, which rounds down. Applying `std::ceil` to that just converts it to a floating point number. I don't think this is incorrect, as rounding down is just more conservative, but it's probably not what you intend.\r\n\r\nTo compute $\\lceil \\frac{a}{b} \\rceil$, you can use `(a+b-1)/b`. \r\n\r\n~~Also: I don't think `best_selection.empty()` is possible at this point; a UTXO was just added.~~ EDIT: I was confusing `best_selection` with `curr_selection`.",
      "created_at": "2024-01-09T04:35:23Z",
      "updated_at": "2024-01-09T14:27:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1445616402",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445616402"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 340,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445618541",
      "pull_request_review_id": 1810381270,
      "id": 1445618541,
      "node_id": "PRRC_kwDOABII585WKmNt",
      "diff_hunk": "@@ -292,7 +297,10 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n         ++curr_try;\n \n         // EVALUATE current selection, default to EXPLORING the inclusion branch further, else do exactly one SHIFT or CUT.\n-        if (curr_weight > max_weight) {\n+        if (curr_amount + lookahead[curr_selection.back()] < selection_target + change_target) {",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "191a6e4d10accdb7390283f46cd23525e928aec3",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You're using `curr_selection.back()` several times in the evaluation logic here; would it make sense to have a `auto added_utxo = next_utxo++;` variable in the select logic, and then use `added_utxo` everywhere instead of `curr_selection.back()`? That makes it also clearer that you don't need to test for `curr_selection.empty()`.",
      "created_at": "2024-01-09T04:40:19Z",
      "updated_at": "2024-01-09T04:50:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1445618541",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445618541"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445619181",
      "pull_request_review_id": 1810381270,
      "id": 1445619181,
      "node_id": "PRRC_kwDOABII585WKmXt",
      "diff_hunk": "@@ -292,7 +297,10 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n         ++curr_try;\n \n         // EVALUATE current selection, default to EXPLORING the inclusion branch further, else do exactly one SHIFT or CUT.",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "191a6e4d10accdb7390283f46cd23525e928aec3",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since the exploring will always happen (after SHIFT/CUT, possible), perhaps formulate it as \"EVALUATE current selection to see whether we can SHIFT or CUT the current selection before EXPLORING further\"?",
      "created_at": "2024-01-09T04:41:41Z",
      "updated_at": "2024-01-09T04:50:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1445619181",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445619181"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 299,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445622061",
      "pull_request_review_id": 1810381270,
      "id": 1445622061,
      "node_id": "PRRC_kwDOABII585WKnEt",
      "diff_hunk": "@@ -338,17 +339,37 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n             should_shift  = true;\n         }\n \n-        if (should_shift) {\n-            // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n-            if (curr_selection.empty()) {\n-                // Exhausted search space before running into attempt limit\n-                result.SetSelectionsEvaluated(curr_try);\n-                result.SetAlgoCompleted(true);\n-                break;\n+        while (!is_done && should_shift) {\n+            if (should_shift) {\n+                // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n+                if (curr_selection.empty()) {\n+                    // Exhausted search space before running into attempt limit\n+                    is_done = true;\n+                    result.SetSelectionsEvaluated(curr_try);\n+                    result.SetAlgoCompleted(true);\n+                    break;\n+                }\n+                next_utxo = curr_selection.back() + 1;\n+                deselect_last();\n+                should_shift  = false;\n+            }\n+\n+            // After SHIFTing to an omission branch, the `next_utxo` might have the same value and same weight as the\n+            // UTXO we just omitted (i.e. it is a \"clone\"). If so, selecting `next_utxo` would produce an equivalent\n+            // selection as one we previously evaluated. In that case, increment `next_utxo` until we find a UTXO with a\n+            // differing amount or weight.\n+            while (!should_shift && next_utxo > 0",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "8858f4988002d62cd8cc56db91909b4fdc733a22",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it's impossible that `next_utxo = 0` here (it was set to `curr_selection.back() + 1` above, and the loop only increments it).\r\n\r\n---\r\n\r\nVery nit: when this loop starts, `should_shift` will always be false, and it can only become true by reaching the `else` branch below. I think it can be simplified to:\r\n\r\n```c++\r\nwhile (...\r\n        && utxo_pool[next_utxo - 1].fee == utxo_pool[next_utxo],fee) {\r\n    if (next_utxo >= utxo_pool.size() - 1) {\r\n        // Reached end of UTXO pool skipping clones: SHIFT instead\r\n        should_shift = true;\r\n        break;\r\n    }\r\n    // Skip clone: previous UTXO is equivalent and unselected\r\n    ++next_utxo;\r\n}\r\n```\r\n\r\n",
      "created_at": "2024-01-09T04:47:49Z",
      "updated_at": "2024-01-09T04:56:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1445622061",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445622061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446094975",
      "pull_request_review_id": 1811161257,
      "id": 1446094975,
      "node_id": "PRRC_kwDOABII585WMah_",
      "diff_hunk": "@@ -292,7 +297,10 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n         ++curr_try;\n \n         // EVALUATE current selection, default to EXPLORING the inclusion branch further, else do exactly one SHIFT or CUT.",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "191a6e4d10accdb7390283f46cd23525e928aec3",
      "in_reply_to_id": 1445619181,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, I went with\r\n\r\n```// EVALUATE current selection: check for solutions and determine whether we can CUT or SHIFT before EXPLORING further```",
      "created_at": "2024-01-09T13:33:48Z",
      "updated_at": "2024-01-09T19:18:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1446094975",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446094975"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 299,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446141597",
      "pull_request_review_id": 1811161257,
      "id": 1446141597,
      "node_id": "PRRC_kwDOABII585WMl6d",
      "diff_hunk": "@@ -292,7 +297,10 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n         ++curr_try;\n \n         // EVALUATE current selection, default to EXPLORING the inclusion branch further, else do exactly one SHIFT or CUT.\n-        if (curr_weight > max_weight) {\n+        if (curr_amount + lookahead[curr_selection.back()] < selection_target + change_target) {",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "191a6e4d10accdb7390283f46cd23525e928aec3",
      "in_reply_to_id": 1445618541,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good idea.\r\n\r\nI’ve added ```auto curr_tail = curr_selection.back();``` to reference that instead throughout the evaluation block. ",
      "created_at": "2024-01-09T14:15:00Z",
      "updated_at": "2024-01-09T19:18:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1446141597",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446141597"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446151655",
      "pull_request_review_id": 1811161257,
      "id": 1446151655,
      "node_id": "PRRC_kwDOABII585WMoXn",
      "diff_hunk": "@@ -338,17 +339,37 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n             should_shift  = true;\n         }\n \n-        if (should_shift) {\n-            // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n-            if (curr_selection.empty()) {\n-                // Exhausted search space before running into attempt limit\n-                result.SetSelectionsEvaluated(curr_try);\n-                result.SetAlgoCompleted(true);\n-                break;\n+        while (!is_done && should_shift) {\n+            if (should_shift) {",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "8858f4988002d62cd8cc56db91909b4fdc733a22",
      "in_reply_to_id": 1445611288,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah, oops. Yes of course.",
      "created_at": "2024-01-09T14:22:59Z",
      "updated_at": "2024-01-09T19:18:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1446151655",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446151655"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 343,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446186725",
      "pull_request_review_id": 1811161257,
      "id": 1446186725,
      "node_id": "PRRC_kwDOABII585WMw7l",
      "diff_hunk": "@@ -338,17 +339,37 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n             should_shift  = true;\n         }\n \n-        if (should_shift) {\n-            // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n-            if (curr_selection.empty()) {\n-                // Exhausted search space before running into attempt limit\n-                result.SetSelectionsEvaluated(curr_try);\n-                result.SetAlgoCompleted(true);\n-                break;\n+        while (!is_done && should_shift) {\n+            if (should_shift) {\n+                // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n+                if (curr_selection.empty()) {\n+                    // Exhausted search space before running into attempt limit\n+                    is_done = true;\n+                    result.SetSelectionsEvaluated(curr_try);\n+                    result.SetAlgoCompleted(true);\n+                    break;\n+                }\n+                next_utxo = curr_selection.back() + 1;\n+                deselect_last();\n+                should_shift  = false;\n+            }\n+\n+            // After SHIFTing to an omission branch, the `next_utxo` might have the same value and same weight as the\n+            // UTXO we just omitted (i.e. it is a \"clone\"). If so, selecting `next_utxo` would produce an equivalent\n+            // selection as one we previously evaluated. In that case, increment `next_utxo` until we find a UTXO with a\n+            // differing amount or weight.\n+            while (!should_shift && next_utxo > 0",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "8858f4988002d62cd8cc56db91909b4fdc733a22",
      "in_reply_to_id": 1445622061,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, I did some hard staring at this while-loop. I restructured it to use a `break` as you suggested, and was able to reduce the loop’s condition to:\r\n\r\n```diff\r\n-            while (!should_shift && next_utxo > 0\r\n-                    && (curr_selection.empty() || curr_selection.back() != next_utxo - 1)\r\n-                    && utxo_pool[next_utxo - 1].GetSelectionAmount() == utxo_pool[next_utxo].GetSelectionAmount()\r\n+            while (utxo_pool[next_utxo - 1].GetSelectionAmount() == utxo_pool[next_utxo].GetSelectionAmount()\r\n                     && utxo_pool[next_utxo - 1].fee == utxo_pool[next_utxo].fee) {\r\n-                if (next_utxo < utxo_pool.size() - 1) {\r\n-                    // Skip clone: previous UTXO is equivalent and unselected\r\n-                    ++next_utxo;\r\n-                } else {\r\n+                if (next_utxo >= utxo_pool.size() - 1) {\r\n                     // Reached end of UTXO pool skipping clones: SHIFT instead\r\n                     should_shift = true;\r\n+                    break;\r\n                 }\r\n+                // Skip clone: previous UTXO is equivalent and unselected\r\n+                ++next_utxo;\r\n             }\r\n         }\r\n```\r\nOriginally, when I introduced clone skipping, I missed that it could only occur after a SHIFT, so there were some unnecessary checks here. Clearly `next_utxo` has to be greater than 0, since it was just incremented in the SHIFT. We also don’t have to check whether the `current_selection.back()` is the last element of the UTXO pool, we would have cut if that were the case. So, we only have to check for clones.\r\n\r\nI’m actually just realizing that I might also be able to drop the `fee` comparison. We already break ties between UTXOs of the same selection amount in favor of less weight, so the preceding UTXO must always have the same fee or a lower fee. While a UTXO with a greater fee (i.e. greater weight) and the same selection amount would not strictly be a clone, it can only lead to a worse input set than the predecessor that we have already evaluated. Gonna ponder and test, will perhaps fix up later today.",
      "created_at": "2024-01-09T14:48:33Z",
      "updated_at": "2024-01-09T19:18:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1446186725",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446186725"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446479218",
      "pull_request_review_id": 1811161257,
      "id": 1446479218,
      "node_id": "PRRC_kwDOABII585WN4Vy",
      "diff_hunk": "@@ -336,6 +337,9 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n                 best_selection_weight = curr_weight;\n                 best_selection_amount = curr_amount;\n             }\n+        } else if (!best_selection.empty() && curr_weight + min_tail_weight[curr_selection.back()] * std::ceil((selection_target + change_target - curr_amount) / utxo_pool[curr_selection.back()].GetSelectionAmount()) > best_selection_weight) {",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "840beb3f8fa61ca1f8ce791738eab71a4924f8de",
      "in_reply_to_id": 1445616402,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, ~~I’ve adopted your proposed change.~~\r\nAfter more discussion, I realized why this is not correct and dropped the `std::ceil(…)` from my prior version.\r\n\r\nFor context on the `!best_selection.empty())`: we need to check whether we have found any solution so far, as we would otherwise no longer trigger the \"max weight exceeded\" failure message.",
      "created_at": "2024-01-09T18:51:30Z",
      "updated_at": "2024-01-09T19:29:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1446479218",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446479218"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 340,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1448210370",
      "pull_request_review_id": 1814544499,
      "id": 1448210370,
      "node_id": "PRRC_kwDOABII585WUe_C",
      "diff_hunk": "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs\n+    std::vector<size_t> best_selection;\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+    bool max_tx_weight_exceeded = false;\n+\n+    std::vector<size_t> curr_selection;\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+    size_t next_utxo = 0; // Index of the next UTXO to consider\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transactions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds yet and the lookahead promises sufficient funds to\n+     *                             reach the target. We continue with the direct successor as our `next_utxo` for the",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 66,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "e38c150f6dff886c470ba993c1725112c1ee5093",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n     *                             reach the target. We continue with the direct successor of our `next_utxo` for the\r\n```",
      "created_at": "2024-01-11T02:26:53Z",
      "updated_at": "2024-01-11T02:39:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1448210370",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1448210370"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1448211928",
      "pull_request_review_id": 1814544499,
      "id": 1448211928,
      "node_id": "PRRC_kwDOABII585WUfXY",
      "diff_hunk": "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs\n+    std::vector<size_t> best_selection;\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+    bool max_tx_weight_exceeded = false;\n+\n+    std::vector<size_t> curr_selection;\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+    size_t next_utxo = 0; // Index of the next UTXO to consider\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transactions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds yet and the lookahead promises sufficient funds to\n+     *                             reach the target. We continue with the direct successor as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the best weight is exceeded or the current selection has\n+     *                             already surpassed the target.\n+     *                             We designate our `next_utxo` the one after our last selected, then deselected the\n+     *                             last selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, or current selection and lookahead do not add up to\n+     *                             target, so neither further EXPLORING nor SHIFTING can find any solutions.\n+     *                             We designate our `next_utxo` the one after our penultimate selected, then deselect\n+     *                             both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= selection_target + change_target) {\n+            // Potential solution, adding more weight cannot be better: SHIFT",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 122,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "e38c150f6dff886c470ba993c1725112c1ee5093",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n            // Success, adding more weight cannot be better: SHIFT\r\n```",
      "created_at": "2024-01-11T02:30:02Z",
      "updated_at": "2024-01-11T02:39:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1448211928",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1448211928"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449406274",
      "pull_request_review_id": 1816719303,
      "id": 1449406274,
      "node_id": "PRRC_kwDOABII585WZC9C",
      "diff_hunk": "@@ -25,7 +25,7 @@ static util::Result<SelectionResult> ErrorMaxWeightExceeded()\n                          \"Please try sending a smaller amount or manually consolidating your wallet's UTXOs\")};\n }\n \n-// Descending order comparator\n+// Sort by descending (effective) value prefer lower waste on tie",
      "path": "src/wallet/coinselection.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "e38c150f6dff886c470ba993c1725112c1ee5093",
      "in_reply_to_id": null,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In e38c150f6dff886c470ba993c1725112c1ee5093 \"coinselection: Add CoinGrinder algorithm \":\r\n\r\nShouldn't the comment be updated in the previous commit? ",
      "created_at": "2024-01-11T21:19:10Z",
      "updated_at": "2024-01-11T22:28:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1449406274",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449406274"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": 28,
      "original_start_line": 28,
      "start_side": "LEFT",
      "line": 28,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449421239",
      "pull_request_review_id": 1816719303,
      "id": 1449421239,
      "node_id": "PRRC_kwDOABII585WZGm3",
      "diff_hunk": "@@ -709,6 +709,13 @@ util::Result<SelectionResult> ChooseSelectionResult(interfaces::Chain& chain, co\n         results.push_back(*knapsack_result);\n     } else append_error(knapsack_result);\n \n+    if (coin_selection_params.m_effective_feerate > CFeeRate{3 * coin_selection_params.m_long_term_feerate}) { // Minimize input set for feerates of at least 3×LTFRE (default: 30 ṩ/vB+)\n+        if (auto cg_result{CoinGrinder(groups.positive_group, nTargetValue, coin_selection_params.m_min_change_target, max_inputs_weight)}) {",
      "path": "src/wallet/spend.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "e38c150f6dff886c470ba993c1725112c1ee5093",
      "in_reply_to_id": null,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In e38c150f6dff886c470ba993c1725112c1ee5093 \"coinselection: Add CoinGrinder algorithm\":\r\n\r\nThe comment describing `m_min_change_target` in `CoinSelectionParams` should be updated, because currently it describes this variable as being used in Knapsack solver. ",
      "created_at": "2024-01-11T21:31:39Z",
      "updated_at": "2024-01-11T22:28:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1449421239",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449421239"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 713,
      "original_line": 713,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449443744",
      "pull_request_review_id": 1816719303,
      "id": 1449443744,
      "node_id": "PRRC_kwDOABII585WZMGg",
      "diff_hunk": "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs\n+    std::vector<size_t> best_selection;\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+    bool max_tx_weight_exceeded = false;\n+\n+    std::vector<size_t> curr_selection;\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+    size_t next_utxo = 0; // Index of the next UTXO to consider\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transactions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds yet and the lookahead promises sufficient funds to\n+     *                             reach the target. We continue with the direct successor as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the best weight is exceeded or the current selection has\n+     *                             already surpassed the target.\n+     *                             We designate our `next_utxo` the one after our last selected, then deselected the\n+     *                             last selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, or current selection and lookahead do not add up to\n+     *                             target, so neither further EXPLORING nor SHIFTING can find any solutions.\n+     *                             We designate our `next_utxo` the one after our penultimate selected, then deselect\n+     *                             both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= selection_target + change_target) {\n+            // Potential solution, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || curr_amount < best_selection_amount) {\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 128,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "e38c150f6dff886c470ba993c1725112c1ee5093",
      "in_reply_to_id": null,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In e38c150f6dff886c470ba993c1725112c1ee5093 \"coinselection: Add CoinGrinder algorithm\":\r\n\r\nWhy do the current and selection amounts matter if they would both result in change? Shouldn't the best selection only be updated if the current selection's waste is less than the best selection's waste?",
      "created_at": "2024-01-11T21:57:09Z",
      "updated_at": "2024-01-11T22:28:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1449443744",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449443744"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": 302,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 450,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449749043",
      "pull_request_review_id": 1817293438,
      "id": 1449749043,
      "node_id": "PRRC_kwDOABII585WaWoz",
      "diff_hunk": "@@ -25,7 +25,7 @@ static util::Result<SelectionResult> ErrorMaxWeightExceeded()\n                          \"Please try sending a smaller amount or manually consolidating your wallet's UTXOs\")};\n }\n \n-// Descending order comparator\n+// Sort by descending (effective) value prefer lower waste on tie",
      "path": "src/wallet/coinselection.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "e38c150f6dff886c470ba993c1725112c1ee5093",
      "in_reply_to_id": 1449406274,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good catch, thanks. Fixed.",
      "created_at": "2024-01-12T03:08:18Z",
      "updated_at": "2024-01-12T15:42:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1449749043",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449749043"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": 28,
      "original_start_line": 28,
      "start_side": "LEFT",
      "line": 28,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449754512",
      "pull_request_review_id": 1817293438,
      "id": 1449754512,
      "node_id": "PRRC_kwDOABII585WaX-Q",
      "diff_hunk": "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs\n+    std::vector<size_t> best_selection;\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+    bool max_tx_weight_exceeded = false;\n+\n+    std::vector<size_t> curr_selection;\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+    size_t next_utxo = 0; // Index of the next UTXO to consider\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transactions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds yet and the lookahead promises sufficient funds to\n+     *                             reach the target. We continue with the direct successor as our `next_utxo` for the",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 66,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "e38c150f6dff886c470ba993c1725112c1ee5093",
      "in_reply_to_id": 1448210370,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Rephrased, especially given that there is no lookahead yet",
      "created_at": "2024-01-12T03:16:26Z",
      "updated_at": "2024-01-12T15:42:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1449754512",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449754512"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449756790",
      "pull_request_review_id": 1817293438,
      "id": 1449756790,
      "node_id": "PRRC_kwDOABII585WaYh2",
      "diff_hunk": "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs\n+    std::vector<size_t> best_selection;\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+    bool max_tx_weight_exceeded = false;\n+\n+    std::vector<size_t> curr_selection;\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+    size_t next_utxo = 0; // Index of the next UTXO to consider\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transactions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds yet and the lookahead promises sufficient funds to\n+     *                             reach the target. We continue with the direct successor as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the best weight is exceeded or the current selection has\n+     *                             already surpassed the target.\n+     *                             We designate our `next_utxo` the one after our last selected, then deselected the\n+     *                             last selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, or current selection and lookahead do not add up to\n+     *                             target, so neither further EXPLORING nor SHIFTING can find any solutions.\n+     *                             We designate our `next_utxo` the one after our penultimate selected, then deselect\n+     *                             both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= selection_target + change_target) {\n+            // Potential solution, adding more weight cannot be better: SHIFT",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 122,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "e38c150f6dff886c470ba993c1725112c1ee5093",
      "in_reply_to_id": 1448211928,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2024-01-12T03:19:51Z",
      "updated_at": "2024-01-12T15:42:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1449756790",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449756790"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449760026",
      "pull_request_review_id": 1817293438,
      "id": 1449760026,
      "node_id": "PRRC_kwDOABII585WaZUa",
      "diff_hunk": "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs\n+    std::vector<size_t> best_selection;\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+    bool max_tx_weight_exceeded = false;\n+\n+    std::vector<size_t> curr_selection;\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+    size_t next_utxo = 0; // Index of the next UTXO to consider\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transactions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds yet and the lookahead promises sufficient funds to\n+     *                             reach the target. We continue with the direct successor as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the best weight is exceeded or the current selection has\n+     *                             already surpassed the target.\n+     *                             We designate our `next_utxo` the one after our last selected, then deselected the\n+     *                             last selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, or current selection and lookahead do not add up to\n+     *                             target, so neither further EXPLORING nor SHIFTING can find any solutions.\n+     *                             We designate our `next_utxo` the one after our penultimate selected, then deselect\n+     *                             both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= selection_target + change_target) {\n+            // Potential solution, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || curr_amount < best_selection_amount) {\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 128,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "e38c150f6dff886c470ba993c1725112c1ee5093",
      "in_reply_to_id": 1449443744,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, starting a few commits later we will SHIFT when `curr_weight` exceeds the `best_selection_weight`, so the second part of this condition can only trigger on same weight. Since we do not have the SHIFT criteria here yet, this is a bug. Fixed by explicitly checking that weight is tied.\r\n\r\nMy argument for preferring an input set with less funds is that the wallet’s confirmed balance is reduced less and therefore the wallet has more confirmed liquidity (that is not constrained by e.g. needing to bump a lower feerate parent transaction) in case this transaction doesn’t get confirmed immediately.",
      "created_at": "2024-01-12T03:24:33Z",
      "updated_at": "2024-01-12T15:43:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1449760026",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449760026"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": 302,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 450,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449762046",
      "pull_request_review_id": 1817293438,
      "id": 1449762046,
      "node_id": "PRRC_kwDOABII585WaZz-",
      "diff_hunk": "@@ -709,6 +709,13 @@ util::Result<SelectionResult> ChooseSelectionResult(interfaces::Chain& chain, co\n         results.push_back(*knapsack_result);\n     } else append_error(knapsack_result);\n \n+    if (coin_selection_params.m_effective_feerate > CFeeRate{3 * coin_selection_params.m_long_term_feerate}) { // Minimize input set for feerates of at least 3×LTFRE (default: 30 ṩ/vB+)\n+        if (auto cg_result{CoinGrinder(groups.positive_group, nTargetValue, coin_selection_params.m_min_change_target, max_inputs_weight)}) {",
      "path": "src/wallet/spend.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "e38c150f6dff886c470ba993c1725112c1ee5093",
      "in_reply_to_id": 1449421239,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point, thanks for pointing that out.",
      "created_at": "2024-01-12T03:27:32Z",
      "updated_at": "2024-01-12T15:42:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1449762046",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449762046"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 713,
      "original_line": 713,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468513141",
      "pull_request_review_id": 1847107471,
      "id": 1468513141,
      "node_id": "PRRC_kwDOABII585Xh7t1",
      "diff_hunk": "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"coinselection: Add CoinGrinder algorithm\"\r\n\r\nNit: non-positive effective value (0 is not allowed either, apparently)",
      "created_at": "2024-01-27T15:54:04Z",
      "updated_at": "2024-01-27T19:36:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468513141",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468513141"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468513733",
      "pull_request_review_id": 1847107471,
      "id": 1468513733,
      "node_id": "PRRC_kwDOABII585Xh73F",
      "diff_hunk": "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"coinselection: Add CoinGrinder algorithm\"\r\n\r\nNot as much in this commit yet, but in the PR overall, almost everywhere the sum `selection_target + change_target` is used. Maybe it makes sense to have a `const auto total_target = selection_target + change_target`, and use `total_target` everywhere?",
      "created_at": "2024-01-27T15:57:37Z",
      "updated_at": "2024-01-27T19:36:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468513733",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468513733"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 215,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468517854",
      "pull_request_review_id": 1847107471,
      "id": 1468517854,
      "node_id": "PRRC_kwDOABII585Xh83e",
      "diff_hunk": "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs\n+    std::vector<size_t> best_selection;\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+    bool max_tx_weight_exceeded = false;\n+\n+    std::vector<size_t> curr_selection;\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+    size_t next_utxo = 0; // Index of the next UTXO to consider\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transactions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the max weight is exceeded or the current selection has\n+     *                             exceeded reached the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselected the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= selection_target + change_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {\n+            // Solution is not guaranteed to be optimal if `curr_try` hit TOTAL_TRIES\n+            result.SetSelectionsEvaluated(curr_try);\n+            break;\n+        }\n+\n+        if (next_utxo == utxo_pool.size()) {\n+            // Last added UTXO was end of UTXO pool, nothing left to add on inclusion or omission branch: CUT\n+            should_cut = true;\n+        }\n+\n+        if (should_cut) {\n+            // Neither adding to the current selection nor exploring the omission branch of the last selected UTXO can\n+            // find any solutions. Redirect to exploring Omission branch of the penultimate selected UTXO (i.e. deselect\n+            // last selected UTXO, then SHIFT)\n+            should_cut = false;\n+            deselect_last();\n+            should_shift  = true;\n+        }\n+\n+        if (should_shift) {\n+            // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n+            if (curr_selection.empty()) {\n+                // Exhausted search space before running into attempt limit\n+                result.SetSelectionsEvaluated(curr_try);\n+                break;\n+            }\n+            next_utxo = curr_selection.back() + 1;\n+            deselect_last();\n+            should_shift  = false;\n+        }\n+    }\n+\n+    if (best_selection.empty()) {\n+        return max_tx_weight_exceeded ? ErrorMaxWeightExceeded() : util::Error();",
      "path": "src/wallet/coinselection.cpp",
      "position": 353,
      "original_position": 156,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"coinselection: Add CoinGrinder algorithm\"\r\n\r\nI don't believe it's actually possible to not have a solution at this point, unless the maximum weight is exceeded because the two ways of achieving that are:\r\n* Not enough funds (but that is checked early in the function)\r\n* A solution exists, but wasn't found due to computation limits. However, with a UTXO set of $n$ elements/groups, *a* solution should always be found within $n$ iterations (and I think the number of iterations should be set at least as high as the number of UTXOs anyway).\r\n\r\nIf that is correct, then we can:\r\n* Drop `max_tx_weight_exceeded`.\r\n* Drop this conditional, and make it `if (best_selection.empty()) return ErrorMaxWeightExceeded();`\r\n* Drop `best_selection_weight`, and instead reuse `max_weight` for that.\r\n\r\nPatch:\r\n\r\n```diff\r\ndiff --git a/src/wallet/coinselection.cpp b/src/wallet/coinselection.cpp\r\nindex 63ba39cd0a0..7c48fc4e0f0 100644\r\n--- a/src/wallet/coinselection.cpp\r\n+++ b/src/wallet/coinselection.cpp\r\n@@ -242,8 +242,6 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\r\n     // CoinGrinder tracks selection via the indices of the currently selected UTXOs\r\n     std::vector<size_t> best_selection;\r\n     CAmount best_selection_amount = MAX_MONEY;\r\n-    int best_selection_weight = max_weight; // Tie is fine, because we prefer lower selection amount\r\n-    bool max_tx_weight_exceeded = false;\r\n \r\n     std::vector<size_t> curr_selection;\r\n     CAmount curr_amount = 0;\r\n@@ -318,9 +316,7 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\r\n         if (curr_amount + lookahead[curr_tail] < selection_target + change_target) {\r\n             // Insufficient funds with lookahead: CUT\r\n             should_cut = true;\r\n-        } else if (curr_weight > best_selection_weight) {\r\n-            // best_selection_weight is initialized to max_weight\r\n-            if (curr_weight > max_weight) max_tx_weight_exceeded = true;\r\n+        } else if (curr_weight > max_weight) {\r\n             // Worse weight than best solution. More UTXOs only increase weight:\r\n             // CUT if last selected group had minimal weight, else SHIFT\r\n             if (utxo_pool[curr_tail].m_weight <= min_tail_weight[curr_tail]) {\r\n@@ -331,13 +327,13 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\r\n         } else if (curr_amount >= selection_target + change_target) {\r\n             // Success, adding more weight cannot be better: SHIFT\r\n             should_shift  = true;\r\n-            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\r\n+            if (curr_weight < max_weight || (curr_weight == max_weight && curr_amount < best_selection_amount)) {\r\n                 // New lowest weight, or same weight with fewer funds tied up\r\n                 best_selection = curr_selection;\r\n-                best_selection_weight = curr_weight;\r\n+                max_weight = curr_weight;\r\n                 best_selection_amount = curr_amount;\r\n             }\r\n-        } else if (!best_selection.empty() && curr_weight + min_tail_weight[curr_tail] * ((selection_target + change_target - curr_amount) / utxo_pool[curr_tail].GetSelectionAmount()) > best_selection_weight) {\r\n+        } else if (!best_selection.empty() && curr_weight + min_tail_weight[curr_tail] * ((selection_target + change_target - curr_amount) / utxo_pool[curr_tail].GetSelectionAmount()) > max_weight) {\r\n             // Compare minimal tail weight and last selected amount with the amount missing to gauge whether a better weight is still possible.\r\n             if (utxo_pool[curr_tail].m_weight <= min_tail_weight[curr_tail]) {\r\n                 should_cut = true;\r\n@@ -397,9 +393,7 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\r\n         }\r\n     }\r\n \r\n-    if (best_selection.empty()) {\r\n-        return max_tx_weight_exceeded ? ErrorMaxWeightExceeded() : util::Error();\r\n-    }\r\n+    if (best_selection.empty()) ErrorMaxWeightExceeded();\r\n \r\n     for (const size_t& i : best_selection) {\r\n         result.AddInput(utxo_pool[i]);\r\n```\r\n",
      "created_at": "2024-01-27T16:19:52Z",
      "updated_at": "2024-01-27T19:36:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468517854",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468517854"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 512,
      "original_line": 512,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468539058",
      "pull_request_review_id": 1847107471,
      "id": 1468539058,
      "node_id": "PRRC_kwDOABII585XiCCy",
      "diff_hunk": "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"coinselection: Add CoinGrinder algorithm\"\r\n\r\nPerhaps add a one-line comment for each of the 8 variables here.",
      "created_at": "2024-01-27T17:33:25Z",
      "updated_at": "2024-01-27T19:36:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468539058",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468539058"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 220,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468539208",
      "pull_request_review_id": 1847107471,
      "id": 1468539208,
      "node_id": "PRRC_kwDOABII585XiCFI",
      "diff_hunk": "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs\n+    std::vector<size_t> best_selection;\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+    bool max_tx_weight_exceeded = false;\n+\n+    std::vector<size_t> curr_selection;\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+    size_t next_utxo = 0; // Index of the next UTXO to consider\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transactions to progress from the current selection to the next promising selection:",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 54,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"coinselection: Add CoinGrinder algorithm\"\r\n\r\n\"state transactions\" -> \"state transitions\"?",
      "created_at": "2024-01-27T17:34:23Z",
      "updated_at": "2024-01-27T19:36:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468539208",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468539208"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 241,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468539271",
      "pull_request_review_id": 1847107471,
      "id": 1468539271,
      "node_id": "PRRC_kwDOABII585XiCGH",
      "diff_hunk": "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs\n+    std::vector<size_t> best_selection;\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+    bool max_tx_weight_exceeded = false;\n+\n+    std::vector<size_t> curr_selection;\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+    size_t next_utxo = 0; // Index of the next UTXO to consider\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transactions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the max weight is exceeded or the current selection has\n+     *                             exceeded reached the target.",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 67,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"coinselection: Add CoinGrinder algorithm\"\r\n\r\nexceeded **or** reached?",
      "created_at": "2024-01-27T17:35:07Z",
      "updated_at": "2024-01-27T19:36:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468539271",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468539271"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 254,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468539354",
      "pull_request_review_id": 1847107471,
      "id": 1468539354,
      "node_id": "PRRC_kwDOABII585XiCHa",
      "diff_hunk": "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs\n+    std::vector<size_t> best_selection;\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+    bool max_tx_weight_exceeded = false;\n+\n+    std::vector<size_t> curr_selection;\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+    size_t next_utxo = 0; // Index of the next UTXO to consider\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transactions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the max weight is exceeded or the current selection has\n+     *                             exceeded reached the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselected the tail of our current selection.",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 69,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"coinselection: Add CoinGrinder algorithm\"\r\n\r\ndeselected -> deselect?",
      "created_at": "2024-01-27T17:35:30Z",
      "updated_at": "2024-01-27T19:36:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468539354",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468539354"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 256,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468544154",
      "pull_request_review_id": 1847107471,
      "id": 1468544154,
      "node_id": "PRRC_kwDOABII585XiDSa",
      "diff_hunk": "@@ -77,6 +77,62 @@ static SelectionResult ManualSelection(std::vector<COutput>& utxos, const CAmoun\n // Returns true if the result contains an error and the message is not empty\n static bool HasErrorMsg(const util::Result<SelectionResult>& res) { return !util::ErrorString(res).empty(); }\n \n+FUZZ_TARGET(coin_grinder)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<COutput> utxo_pool;\n+\n+    const CAmount target{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};",
      "path": "src/wallet/test/fuzz/coinselection.cpp",
      "position": 20,
      "original_position": 12,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "168957a164fa5687aa698bedba5997e6ccdf35bd",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"fuzz: Add CoinGrinder fuzz target\"\r\n\r\n`coin_params.m_min_change_target` is left at 0 here. Perhaps leave a comment about why that is ok?",
      "created_at": "2024-01-27T18:07:38Z",
      "updated_at": "2024-01-27T19:36:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468544154",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468544154"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 89,
      "original_line": 89,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468584127",
      "pull_request_review_id": 1847107471,
      "id": 1468584127,
      "node_id": "PRRC_kwDOABII585XiNC_",
      "diff_hunk": "@@ -133,6 +133,82 @@ FUZZ_TARGET(coin_grinder)\n     }\n }\n \n+FUZZ_TARGET(coin_grinder_is_optimal)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<COutput> utxo_pool;\n+\n+    const CAmount target{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = fuzzed_data_provider.ConsumeBool();\n+    coin_params.m_long_term_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.change_output_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.change_spend_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.m_cost_of_change= coin_params.m_effective_feerate.GetFee(coin_params.change_output_size) + coin_params.m_long_term_feerate.GetFee(coin_params.change_spend_size);\n+    coin_params.m_change_fee = coin_params.m_effective_feerate.GetFee(coin_params.change_output_size);\n+\n+    // Create some coins\n+    CAmount total_balance{0};\n+    CAmount max_spendable{0};\n+    int next_locktime{0};\n+    unsigned max_utxos = 16;\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), max_utxos)\n+    {\n+        const CAmount amount{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(41, 10000)};\n+        if (total_balance + amount >= MAX_MONEY) {\n+            break;\n+        }\n+        AddCoin(amount, /*n_input=*/0, n_input_bytes, ++next_locktime, utxo_pool, coin_params.m_effective_feerate);\n+        total_balance += amount;\n+        CAmount eff_value = amount - coin_params.m_effective_feerate.GetFee(n_input_bytes);\n+        max_spendable += eff_value;\n+    }\n+    size_t num_utxos = utxo_pool.size();\n+    assert(num_utxos <= max_utxos);\n+\n+    std::vector<OutputGroup> group_pos;\n+    GroupCoins(fuzzed_data_provider, utxo_pool, coin_params, /*positive_only=*/true, group_pos);",
      "path": "src/wallet/test/fuzz/coinselection.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "4b488b6d08fcff28349c3415e61be79bf6d7d6b9",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet: Add CoinGrinder coin selection algorithm\":\r\n\r\nWould it make sense to construct the `group_pos` variable directly from the fuzzer? I think you only need to populate its `m_weight` and `m_effective_value`. As you don't use anything but `group_pos`, `target`, and `change_target` in the actual test, all fuzz information you use to construct other things is effectively wasted.",
      "created_at": "2024-01-27T19:15:40Z",
      "updated_at": "2024-01-27T19:36:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468584127",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468584127"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468584354",
      "pull_request_review_id": 1847107471,
      "id": 1468584354,
      "node_id": "PRRC_kwDOABII585XiNGi",
      "diff_hunk": "@@ -133,6 +133,82 @@ FUZZ_TARGET(coin_grinder)\n     }\n }\n \n+FUZZ_TARGET(coin_grinder_is_optimal)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<COutput> utxo_pool;\n+\n+    const CAmount target{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = fuzzed_data_provider.ConsumeBool();\n+    coin_params.m_long_term_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.change_output_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.change_spend_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.m_cost_of_change= coin_params.m_effective_feerate.GetFee(coin_params.change_output_size) + coin_params.m_long_term_feerate.GetFee(coin_params.change_spend_size);\n+    coin_params.m_change_fee = coin_params.m_effective_feerate.GetFee(coin_params.change_output_size);\n+\n+    // Create some coins\n+    CAmount total_balance{0};\n+    CAmount max_spendable{0};\n+    int next_locktime{0};\n+    unsigned max_utxos = 16;\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), max_utxos)\n+    {\n+        const CAmount amount{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(41, 10000)};\n+        if (total_balance + amount >= MAX_MONEY) {\n+            break;\n+        }\n+        AddCoin(amount, /*n_input=*/0, n_input_bytes, ++next_locktime, utxo_pool, coin_params.m_effective_feerate);\n+        total_balance += amount;\n+        CAmount eff_value = amount - coin_params.m_effective_feerate.GetFee(n_input_bytes);\n+        max_spendable += eff_value;\n+    }\n+    size_t num_utxos = utxo_pool.size();\n+    assert(num_utxos <= max_utxos);\n+\n+    std::vector<OutputGroup> group_pos;\n+    GroupCoins(fuzzed_data_provider, utxo_pool, coin_params, /*positive_only=*/true, group_pos);\n+    size_t num_groups = group_pos.size();\n+    assert(num_groups <= num_utxos);\n+\n+    // Run coinselection algorithms",
      "path": "src/wallet/test/fuzz/coinselection.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "4b488b6d08fcff28349c3415e61be79bf6d7d6b9",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet: Add CoinGrinder coin selection algorithm\":\r\n\r\nOnly one coin selection algorithm is run here (unless you count the brute forcing).",
      "created_at": "2024-01-27T19:17:17Z",
      "updated_at": "2024-01-27T19:36:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468584354",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468584354"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 178,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468584560",
      "pull_request_review_id": 1847107471,
      "id": 1468584560,
      "node_id": "PRRC_kwDOABII585XiNJw",
      "diff_hunk": "@@ -133,6 +133,82 @@ FUZZ_TARGET(coin_grinder)\n     }\n }\n \n+FUZZ_TARGET(coin_grinder_is_optimal)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<COutput> utxo_pool;\n+\n+    const CAmount target{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = fuzzed_data_provider.ConsumeBool();\n+    coin_params.m_long_term_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.change_output_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.change_spend_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.m_cost_of_change= coin_params.m_effective_feerate.GetFee(coin_params.change_output_size) + coin_params.m_long_term_feerate.GetFee(coin_params.change_spend_size);\n+    coin_params.m_change_fee = coin_params.m_effective_feerate.GetFee(coin_params.change_output_size);\n+\n+    // Create some coins\n+    CAmount total_balance{0};\n+    CAmount max_spendable{0};\n+    int next_locktime{0};\n+    unsigned max_utxos = 16;\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), max_utxos)\n+    {\n+        const CAmount amount{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(41, 10000)};\n+        if (total_balance + amount >= MAX_MONEY) {\n+            break;\n+        }\n+        AddCoin(amount, /*n_input=*/0, n_input_bytes, ++next_locktime, utxo_pool, coin_params.m_effective_feerate);\n+        total_balance += amount;\n+        CAmount eff_value = amount - coin_params.m_effective_feerate.GetFee(n_input_bytes);\n+        max_spendable += eff_value;\n+    }\n+    size_t num_utxos = utxo_pool.size();\n+    assert(num_utxos <= max_utxos);\n+\n+    std::vector<OutputGroup> group_pos;\n+    GroupCoins(fuzzed_data_provider, utxo_pool, coin_params, /*positive_only=*/true, group_pos);\n+    size_t num_groups = group_pos.size();\n+    assert(num_groups <= num_utxos);\n+\n+    // Run coinselection algorithms\n+    CAmount change_target{CHANGE_LOWER + coin_params.m_change_fee}; // In order to ensure that it’s comparable to SRD, we must use the same change_target",
      "path": "src/wallet/test/fuzz/coinselection.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "4b488b6d08fcff28349c3415e61be79bf6d7d6b9",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet: Add CoinGrinder coin selection algorithm\":\r\n\r\nSRD is not used in this test, so I think you can construct `change_target` from fuzz data directly.",
      "created_at": "2024-01-27T19:17:55Z",
      "updated_at": "2024-01-27T19:36:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468584560",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468584560"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 179,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468584961",
      "pull_request_review_id": 1847107471,
      "id": 1468584961,
      "node_id": "PRRC_kwDOABII585XiNQB",
      "diff_hunk": "@@ -133,6 +133,82 @@ FUZZ_TARGET(coin_grinder)\n     }\n }\n \n+FUZZ_TARGET(coin_grinder_is_optimal)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<COutput> utxo_pool;\n+\n+    const CAmount target{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = fuzzed_data_provider.ConsumeBool();\n+    coin_params.m_long_term_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.change_output_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.change_spend_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.m_cost_of_change= coin_params.m_effective_feerate.GetFee(coin_params.change_output_size) + coin_params.m_long_term_feerate.GetFee(coin_params.change_spend_size);\n+    coin_params.m_change_fee = coin_params.m_effective_feerate.GetFee(coin_params.change_output_size);\n+\n+    // Create some coins\n+    CAmount total_balance{0};\n+    CAmount max_spendable{0};\n+    int next_locktime{0};\n+    unsigned max_utxos = 16;\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), max_utxos)\n+    {\n+        const CAmount amount{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(41, 10000)};\n+        if (total_balance + amount >= MAX_MONEY) {\n+            break;\n+        }\n+        AddCoin(amount, /*n_input=*/0, n_input_bytes, ++next_locktime, utxo_pool, coin_params.m_effective_feerate);\n+        total_balance += amount;\n+        CAmount eff_value = amount - coin_params.m_effective_feerate.GetFee(n_input_bytes);\n+        max_spendable += eff_value;\n+    }\n+    size_t num_utxos = utxo_pool.size();\n+    assert(num_utxos <= max_utxos);\n+\n+    std::vector<OutputGroup> group_pos;\n+    GroupCoins(fuzzed_data_provider, utxo_pool, coin_params, /*positive_only=*/true, group_pos);\n+    size_t num_groups = group_pos.size();\n+    assert(num_groups <= num_utxos);\n+\n+    // Run coinselection algorithms\n+    CAmount change_target{CHANGE_LOWER + coin_params.m_change_fee}; // In order to ensure that it’s comparable to SRD, we must use the same change_target\n+    auto result_cg = CoinGrinder(group_pos, target, change_target, MAX_STANDARD_TX_WEIGHT);",
      "path": "src/wallet/test/fuzz/coinselection.cpp",
      "position": null,
      "original_position": 48,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "4b488b6d08fcff28349c3415e61be79bf6d7d6b9",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet: Add CoinGrinder coin selection algorithm\":\r\n\r\nI think it would be better if you'd also construct `max_weight` from the fuzz data (and then take it into account in the brute force loop below).\r\n\r\nAs an alternative, run the brute force loop first (without any weight maximum restriction), and then run CG twice, once with a (fuzz-constructed) `max_weight` >= the brute force best solution (and check that CG finds it) and once with a (fuzz-constructed) `max_weight` < the brute force best solution (and check that CG does not find it).",
      "created_at": "2024-01-27T19:20:47Z",
      "updated_at": "2024-01-27T19:36:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468584961",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468584961"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468585854",
      "pull_request_review_id": 1847107471,
      "id": 1468585854,
      "node_id": "PRRC_kwDOABII585XiNd-",
      "diff_hunk": "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"coinselection: Add CoinGrinder algorithm\"\r\n\r\nNegative amounts won't cause a crash or other UB, I believe (the result will just be suboptimal), so it's probably better to use `Assume` here instead of `assert`.",
      "created_at": "2024-01-27T19:23:57Z",
      "updated_at": "2024-01-27T19:36:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468585854",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468585854"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 212,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468586333",
      "pull_request_review_id": 1847107471,
      "id": 1468586333,
      "node_id": "PRRC_kwDOABII585XiNld",
      "diff_hunk": "@@ -338,17 +339,33 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n             should_shift  = true;\n         }\n \n-        if (should_shift) {\n+        while (!is_done && should_shift) {",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "27359ef47043da8cf641ffa65d69d79c7b0cba71",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit opt: \"Skip evaluation of equivalent input sets\"\r\n\r\nThis `!is_done &&` here seems unnecessary, because a `break;` is invoked whenever `is_done` is set to `true`.",
      "created_at": "2024-01-27T19:26:55Z",
      "updated_at": "2024-01-27T19:36:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468586333",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468586333"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 342,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468939784",
      "pull_request_review_id": 1847632560,
      "id": 1468939784,
      "node_id": "PRRC_kwDOABII585Xjj4I",
      "diff_hunk": "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "in_reply_to_id": 1468585854,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Adopted. Yeah, OutputGroups with a single negative effective value would simply sort last and be skipped per the lookahead, while OutputGroups with an overall positive effective value but containing some negative effective value UTXOs would just cause some additional iterations up to making the result suboptimal.",
      "created_at": "2024-01-28T21:21:13Z",
      "updated_at": "2024-01-29T00:07:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468939784",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468939784"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 212,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468939798",
      "pull_request_review_id": 1847632560,
      "id": 1468939798,
      "node_id": "PRRC_kwDOABII585Xjj4W",
      "diff_hunk": "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "in_reply_to_id": 1468513141,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good catch, fixed.",
      "created_at": "2024-01-28T21:21:20Z",
      "updated_at": "2024-01-29T00:07:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468939798",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468939798"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468939922",
      "pull_request_review_id": 1847632560,
      "id": 1468939922,
      "node_id": "PRRC_kwDOABII585Xjj6S",
      "diff_hunk": "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "in_reply_to_id": 1468513733,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sure, makes sense.",
      "created_at": "2024-01-28T21:22:41Z",
      "updated_at": "2024-01-29T00:07:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468939922",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468939922"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 215,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468941377",
      "pull_request_review_id": 1847632560,
      "id": 1468941377,
      "node_id": "PRRC_kwDOABII585XjkRB",
      "diff_hunk": "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "in_reply_to_id": 1468539058,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added descriptions\r\n\r\n```cpp\r\n// The current selection and the best input set found so far, stored as the utxo_pool indices of the UTXOs forming them\r\nstd::vector<size_t> curr_selection;\r\nstd::vector<size_t> best_selection;\r\n\r\n// The currently selected effective amount, and the effective amount of the best selection so far\r\nCAmount curr_amount = 0;\r\nCAmount best_selection_amount = MAX_MONEY;\r\n\r\n// The weight of the currently selected input set, and the weight of the best selection\r\nint curr_weight = 0;\r\nint best_selection_weight = std::numeric_limits<int>::max();\r\n\r\n// Whether the input sets generated during this search have exceeded the maximum transaction weight at any point\r\nbool max_tx_weight_exceeded = false;\r\n\r\n// Index of the next UTXO to consider in utxo_pool\r\nsize_t next_utxo = 0;\r\n```",
      "created_at": "2024-01-28T21:33:02Z",
      "updated_at": "2024-01-29T00:07:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468941377",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468941377"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 220,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468941448",
      "pull_request_review_id": 1847632560,
      "id": 1468941448,
      "node_id": "PRRC_kwDOABII585XjkSI",
      "diff_hunk": "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs\n+    std::vector<size_t> best_selection;\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+    bool max_tx_weight_exceeded = false;\n+\n+    std::vector<size_t> curr_selection;\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+    size_t next_utxo = 0; // Index of the next UTXO to consider\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transactions to progress from the current selection to the next promising selection:",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 54,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "in_reply_to_id": 1468539208,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hah, thanks, fixed.",
      "created_at": "2024-01-28T21:33:26Z",
      "updated_at": "2024-01-29T00:07:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468941448",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468941448"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 241,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468941852",
      "pull_request_review_id": 1847632560,
      "id": 1468941852,
      "node_id": "PRRC_kwDOABII585XjkYc",
      "diff_hunk": "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs\n+    std::vector<size_t> best_selection;\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+    bool max_tx_weight_exceeded = false;\n+\n+    std::vector<size_t> curr_selection;\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+    size_t next_utxo = 0; // Index of the next UTXO to consider\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transactions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the max weight is exceeded or the current selection has\n+     *                             exceeded reached the target.",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 67,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "in_reply_to_id": 1468539271,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, fixed up the sentence.",
      "created_at": "2024-01-28T21:37:13Z",
      "updated_at": "2024-01-29T00:07:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468941852",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468941852"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 254,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468947001",
      "pull_request_review_id": 1847632560,
      "id": 1468947001,
      "node_id": "PRRC_kwDOABII585Xjlo5",
      "diff_hunk": "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs\n+    std::vector<size_t> best_selection;\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+    bool max_tx_weight_exceeded = false;\n+\n+    std::vector<size_t> curr_selection;\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+    size_t next_utxo = 0; // Index of the next UTXO to consider\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transactions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the max weight is exceeded or the current selection has\n+     *                             exceeded reached the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselected the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= selection_target + change_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {\n+            // Solution is not guaranteed to be optimal if `curr_try` hit TOTAL_TRIES\n+            result.SetSelectionsEvaluated(curr_try);\n+            break;\n+        }\n+\n+        if (next_utxo == utxo_pool.size()) {\n+            // Last added UTXO was end of UTXO pool, nothing left to add on inclusion or omission branch: CUT\n+            should_cut = true;\n+        }\n+\n+        if (should_cut) {\n+            // Neither adding to the current selection nor exploring the omission branch of the last selected UTXO can\n+            // find any solutions. Redirect to exploring Omission branch of the penultimate selected UTXO (i.e. deselect\n+            // last selected UTXO, then SHIFT)\n+            should_cut = false;\n+            deselect_last();\n+            should_shift  = true;\n+        }\n+\n+        if (should_shift) {\n+            // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n+            if (curr_selection.empty()) {\n+                // Exhausted search space before running into attempt limit\n+                result.SetSelectionsEvaluated(curr_try);\n+                break;\n+            }\n+            next_utxo = curr_selection.back() + 1;\n+            deselect_last();\n+            should_shift  = false;\n+        }\n+    }\n+\n+    if (best_selection.empty()) {\n+        return max_tx_weight_exceeded ? ErrorMaxWeightExceeded() : util::Error();",
      "path": "src/wallet/coinselection.cpp",
      "position": 353,
      "original_position": 156,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "in_reply_to_id": 1468517854,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This seems correct to me, and I’ve fuzzed it for five hours without failure for good measure. This changes a number of commits, in different ways, still pondering whether it’s best to put into the first implementation or to amend the commit that optimizes handling of max_weight. Will revisit.",
      "created_at": "2024-01-28T22:05:29Z",
      "updated_at": "2024-01-29T00:07:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468947001",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468947001"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 512,
      "original_line": 512,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468949219",
      "pull_request_review_id": 1847632560,
      "id": 1468949219,
      "node_id": "PRRC_kwDOABII585XjmLj",
      "diff_hunk": "@@ -77,6 +77,62 @@ static SelectionResult ManualSelection(std::vector<COutput>& utxos, const CAmoun\n // Returns true if the result contains an error and the message is not empty\n static bool HasErrorMsg(const util::Result<SelectionResult>& res) { return !util::ErrorString(res).empty(); }\n \n+FUZZ_TARGET(coin_grinder)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<COutput> utxo_pool;\n+\n+    const CAmount target{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};",
      "path": "src/wallet/test/fuzz/coinselection.cpp",
      "position": 20,
      "original_position": 12,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "168957a164fa5687aa698bedba5997e6ccdf35bd",
      "in_reply_to_id": 1468544154,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I dropped `change_target` below and instead assigned `coin_params.m_min_change_target`, with a descriptive comment, and passed that below to the other algorithms.",
      "created_at": "2024-01-28T22:21:00Z",
      "updated_at": "2024-01-29T00:07:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468949219",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468949219"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 89,
      "original_line": 89,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468950943",
      "pull_request_review_id": 1847632560,
      "id": 1468950943,
      "node_id": "PRRC_kwDOABII585Xjmmf",
      "diff_hunk": "@@ -133,6 +133,82 @@ FUZZ_TARGET(coin_grinder)\n     }\n }\n \n+FUZZ_TARGET(coin_grinder_is_optimal)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<COutput> utxo_pool;\n+\n+    const CAmount target{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = fuzzed_data_provider.ConsumeBool();\n+    coin_params.m_long_term_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.change_output_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.change_spend_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.m_cost_of_change= coin_params.m_effective_feerate.GetFee(coin_params.change_output_size) + coin_params.m_long_term_feerate.GetFee(coin_params.change_spend_size);\n+    coin_params.m_change_fee = coin_params.m_effective_feerate.GetFee(coin_params.change_output_size);\n+\n+    // Create some coins\n+    CAmount total_balance{0};\n+    CAmount max_spendable{0};\n+    int next_locktime{0};\n+    unsigned max_utxos = 16;\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), max_utxos)\n+    {\n+        const CAmount amount{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(41, 10000)};\n+        if (total_balance + amount >= MAX_MONEY) {\n+            break;\n+        }\n+        AddCoin(amount, /*n_input=*/0, n_input_bytes, ++next_locktime, utxo_pool, coin_params.m_effective_feerate);\n+        total_balance += amount;\n+        CAmount eff_value = amount - coin_params.m_effective_feerate.GetFee(n_input_bytes);\n+        max_spendable += eff_value;\n+    }\n+    size_t num_utxos = utxo_pool.size();\n+    assert(num_utxos <= max_utxos);\n+\n+    std::vector<OutputGroup> group_pos;\n+    GroupCoins(fuzzed_data_provider, utxo_pool, coin_params, /*positive_only=*/true, group_pos);\n+    size_t num_groups = group_pos.size();\n+    assert(num_groups <= num_utxos);\n+\n+    // Run coinselection algorithms\n+    CAmount change_target{CHANGE_LOWER + coin_params.m_change_fee}; // In order to ensure that it’s comparable to SRD, we must use the same change_target",
      "path": "src/wallet/test/fuzz/coinselection.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "4b488b6d08fcff28349c3415e61be79bf6d7d6b9",
      "in_reply_to_id": 1468584560,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Okay, replaced with \r\n```cpp\r\ncoin_params.m_min_change_target = coin_params.m_change_fee + fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(CHANGE_LOWER, CHANGE_UPPER);\r\n```",
      "created_at": "2024-01-28T22:31:56Z",
      "updated_at": "2024-01-29T00:07:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468950943",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468950943"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 179,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468960224",
      "pull_request_review_id": 1847632560,
      "id": 1468960224,
      "node_id": "PRRC_kwDOABII585Xjo3g",
      "diff_hunk": "@@ -133,6 +133,82 @@ FUZZ_TARGET(coin_grinder)\n     }\n }\n \n+FUZZ_TARGET(coin_grinder_is_optimal)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<COutput> utxo_pool;\n+\n+    const CAmount target{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = fuzzed_data_provider.ConsumeBool();\n+    coin_params.m_long_term_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.change_output_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.change_spend_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.m_cost_of_change= coin_params.m_effective_feerate.GetFee(coin_params.change_output_size) + coin_params.m_long_term_feerate.GetFee(coin_params.change_spend_size);\n+    coin_params.m_change_fee = coin_params.m_effective_feerate.GetFee(coin_params.change_output_size);\n+\n+    // Create some coins\n+    CAmount total_balance{0};\n+    CAmount max_spendable{0};\n+    int next_locktime{0};\n+    unsigned max_utxos = 16;\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), max_utxos)\n+    {\n+        const CAmount amount{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(41, 10000)};\n+        if (total_balance + amount >= MAX_MONEY) {\n+            break;\n+        }\n+        AddCoin(amount, /*n_input=*/0, n_input_bytes, ++next_locktime, utxo_pool, coin_params.m_effective_feerate);\n+        total_balance += amount;\n+        CAmount eff_value = amount - coin_params.m_effective_feerate.GetFee(n_input_bytes);\n+        max_spendable += eff_value;\n+    }\n+    size_t num_utxos = utxo_pool.size();\n+    assert(num_utxos <= max_utxos);\n+\n+    std::vector<OutputGroup> group_pos;\n+    GroupCoins(fuzzed_data_provider, utxo_pool, coin_params, /*positive_only=*/true, group_pos);\n+    size_t num_groups = group_pos.size();\n+    assert(num_groups <= num_utxos);\n+\n+    // Run coinselection algorithms\n+    CAmount change_target{CHANGE_LOWER + coin_params.m_change_fee}; // In order to ensure that it’s comparable to SRD, we must use the same change_target\n+    auto result_cg = CoinGrinder(group_pos, target, change_target, MAX_STANDARD_TX_WEIGHT);",
      "path": "src/wallet/test/fuzz/coinselection.cpp",
      "position": null,
      "original_position": 48,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "4b488b6d08fcff28349c3415e61be79bf6d7d6b9",
      "in_reply_to_id": 1468584961,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Great idea. I’ve amended the fuzz test to exit early if there are insufficient funds, otherwise brute force the solution, and then run CG twice.",
      "created_at": "2024-01-28T23:22:13Z",
      "updated_at": "2024-01-29T00:07:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468960224",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468960224"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468960861",
      "pull_request_review_id": 1847632560,
      "id": 1468960861,
      "node_id": "PRRC_kwDOABII585XjpBd",
      "diff_hunk": "@@ -133,6 +133,82 @@ FUZZ_TARGET(coin_grinder)\n     }\n }\n \n+FUZZ_TARGET(coin_grinder_is_optimal)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<COutput> utxo_pool;\n+\n+    const CAmount target{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = fuzzed_data_provider.ConsumeBool();\n+    coin_params.m_long_term_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.change_output_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.change_spend_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.m_cost_of_change= coin_params.m_effective_feerate.GetFee(coin_params.change_output_size) + coin_params.m_long_term_feerate.GetFee(coin_params.change_spend_size);\n+    coin_params.m_change_fee = coin_params.m_effective_feerate.GetFee(coin_params.change_output_size);\n+\n+    // Create some coins\n+    CAmount total_balance{0};\n+    CAmount max_spendable{0};\n+    int next_locktime{0};\n+    unsigned max_utxos = 16;\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), max_utxos)\n+    {\n+        const CAmount amount{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(41, 10000)};\n+        if (total_balance + amount >= MAX_MONEY) {\n+            break;\n+        }\n+        AddCoin(amount, /*n_input=*/0, n_input_bytes, ++next_locktime, utxo_pool, coin_params.m_effective_feerate);\n+        total_balance += amount;\n+        CAmount eff_value = amount - coin_params.m_effective_feerate.GetFee(n_input_bytes);\n+        max_spendable += eff_value;\n+    }\n+    size_t num_utxos = utxo_pool.size();\n+    assert(num_utxos <= max_utxos);\n+\n+    std::vector<OutputGroup> group_pos;\n+    GroupCoins(fuzzed_data_provider, utxo_pool, coin_params, /*positive_only=*/true, group_pos);",
      "path": "src/wallet/test/fuzz/coinselection.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "4b488b6d08fcff28349c3415e61be79bf6d7d6b9",
      "in_reply_to_id": 1468584127,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That would be good, but that would take more time than I have right now. Will leave this open for the moment.",
      "created_at": "2024-01-28T23:25:41Z",
      "updated_at": "2024-01-29T00:07:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468960861",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468960861"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468966253",
      "pull_request_review_id": 1847632560,
      "id": 1468966253,
      "node_id": "PRRC_kwDOABII585XjqVt",
      "diff_hunk": "@@ -338,17 +339,33 @@ util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, c\n             should_shift  = true;\n         }\n \n-        if (should_shift) {\n+        while (!is_done && should_shift) {",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "27359ef47043da8cf641ffa65d69d79c7b0cba71",
      "in_reply_to_id": 1468586333,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good catch, thanks.",
      "created_at": "2024-01-28T23:55:47Z",
      "updated_at": "2024-01-29T00:07:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1468966253",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1468966253"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 342,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1470113559",
      "pull_request_review_id": 1849621597,
      "id": 1470113559,
      "node_id": "PRRC_kwDOABII585XoCcX",
      "diff_hunk": "@@ -133,6 +133,82 @@ FUZZ_TARGET(coin_grinder)\n     }\n }\n \n+FUZZ_TARGET(coin_grinder_is_optimal)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<COutput> utxo_pool;\n+\n+    const CAmount target{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = fuzzed_data_provider.ConsumeBool();\n+    coin_params.m_long_term_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    coin_params.change_output_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.change_spend_size = fuzzed_data_provider.ConsumeIntegralInRange<int>(10, 1000);\n+    coin_params.m_cost_of_change= coin_params.m_effective_feerate.GetFee(coin_params.change_output_size) + coin_params.m_long_term_feerate.GetFee(coin_params.change_spend_size);\n+    coin_params.m_change_fee = coin_params.m_effective_feerate.GetFee(coin_params.change_output_size);\n+\n+    // Create some coins\n+    CAmount total_balance{0};\n+    CAmount max_spendable{0};\n+    int next_locktime{0};\n+    unsigned max_utxos = 16;\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), max_utxos)\n+    {\n+        const CAmount amount{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(41, 10000)};\n+        if (total_balance + amount >= MAX_MONEY) {\n+            break;\n+        }\n+        AddCoin(amount, /*n_input=*/0, n_input_bytes, ++next_locktime, utxo_pool, coin_params.m_effective_feerate);\n+        total_balance += amount;\n+        CAmount eff_value = amount - coin_params.m_effective_feerate.GetFee(n_input_bytes);\n+        max_spendable += eff_value;\n+    }\n+    size_t num_utxos = utxo_pool.size();\n+    assert(num_utxos <= max_utxos);\n+\n+    std::vector<OutputGroup> group_pos;\n+    GroupCoins(fuzzed_data_provider, utxo_pool, coin_params, /*positive_only=*/true, group_pos);",
      "path": "src/wallet/test/fuzz/coinselection.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "4b488b6d08fcff28349c3415e61be79bf6d7d6b9",
      "in_reply_to_id": 1468584127,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I cleaned up the Optimality fuzz test a bit:\r\n\r\n- I have removed multiple CoinSelectionParams from being fuzzed that are not relevant to testing CoinGrinder’s optimality (SFFO, LTFRE, all change cost related quantities except `min_change_target`)\r\n- I now fuzz `min_change_target`\r\n- I just create up to 16 UTXOs that are each a separate OutputGroup\r\n- I now first run the brute force solution, then set a fuzzed max_weight greater than the best_weight and check that CoinGrinder finds the optimal solution, then set a lower max_weight and check that CoinGrinder provides no solution\r\n- I generate `target` to be below `max_spendable` instead of returning early",
      "created_at": "2024-01-29T19:42:14Z",
      "updated_at": "2024-01-29T19:42:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1470113559",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1470113559"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1470115876",
      "pull_request_review_id": 1849624628,
      "id": 1470115876,
      "node_id": "PRRC_kwDOABII585XoDAk",
      "diff_hunk": "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs\n+    std::vector<size_t> best_selection;\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+    bool max_tx_weight_exceeded = false;\n+\n+    std::vector<size_t> curr_selection;\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+    size_t next_utxo = 0; // Index of the next UTXO to consider\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transactions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the max weight is exceeded or the current selection has\n+     *                             exceeded reached the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselected the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= selection_target + change_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {\n+            // Solution is not guaranteed to be optimal if `curr_try` hit TOTAL_TRIES\n+            result.SetSelectionsEvaluated(curr_try);\n+            break;\n+        }\n+\n+        if (next_utxo == utxo_pool.size()) {\n+            // Last added UTXO was end of UTXO pool, nothing left to add on inclusion or omission branch: CUT\n+            should_cut = true;\n+        }\n+\n+        if (should_cut) {\n+            // Neither adding to the current selection nor exploring the omission branch of the last selected UTXO can\n+            // find any solutions. Redirect to exploring Omission branch of the penultimate selected UTXO (i.e. deselect\n+            // last selected UTXO, then SHIFT)\n+            should_cut = false;\n+            deselect_last();\n+            should_shift  = true;\n+        }\n+\n+        if (should_shift) {\n+            // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n+            if (curr_selection.empty()) {\n+                // Exhausted search space before running into attempt limit\n+                result.SetSelectionsEvaluated(curr_try);\n+                break;\n+            }\n+            next_utxo = curr_selection.back() + 1;\n+            deselect_last();\n+            should_shift  = false;\n+        }\n+    }\n+\n+    if (best_selection.empty()) {\n+        return max_tx_weight_exceeded ? ErrorMaxWeightExceeded() : util::Error();",
      "path": "src/wallet/coinselection.cpp",
      "position": 353,
      "original_position": 156,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "in_reply_to_id": 1468517854,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I have decided to defer this for the moment, since I do appreciate the clarity of distinguishing between the `best_selection_weight` and `max_weight`, and I anticipate that I will have to revisit this in the context of https://github.com/bitcoin/bitcoin/pull/29264 soon anyway.",
      "created_at": "2024-01-29T19:44:13Z",
      "updated_at": "2024-01-29T19:44:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1470115876",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1470115876"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 512,
      "original_line": 512,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472836168",
      "pull_request_review_id": 1853755724,
      "id": 1472836168,
      "node_id": "PRRC_kwDOABII585XybJI",
      "diff_hunk": "@@ -188,6 +188,168 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with negative effective value have been filtered\n+        assert(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+    if (total_available < selection_target + change_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // CoinGrinder tracks selection via the indices of the currently selected UTXOs\n+    std::vector<size_t> best_selection;\n+    CAmount best_selection_amount = MAX_MONEY;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+    bool max_tx_weight_exceeded = false;\n+\n+    std::vector<size_t> curr_selection;\n+    CAmount curr_amount = 0;\n+    int curr_weight = 0;\n+    size_t next_utxo = 0; // Index of the next UTXO to consider\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transactions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the max weight is exceeded or the current selection has\n+     *                             exceeded reached the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselected the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= selection_target + change_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {\n+            // Solution is not guaranteed to be optimal if `curr_try` hit TOTAL_TRIES\n+            result.SetSelectionsEvaluated(curr_try);\n+            break;\n+        }\n+\n+        if (next_utxo == utxo_pool.size()) {\n+            // Last added UTXO was end of UTXO pool, nothing left to add on inclusion or omission branch: CUT\n+            should_cut = true;\n+        }\n+\n+        if (should_cut) {\n+            // Neither adding to the current selection nor exploring the omission branch of the last selected UTXO can\n+            // find any solutions. Redirect to exploring Omission branch of the penultimate selected UTXO (i.e. deselect\n+            // last selected UTXO, then SHIFT)\n+            should_cut = false;\n+            deselect_last();\n+            should_shift  = true;\n+        }\n+\n+        if (should_shift) {\n+            // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n+            if (curr_selection.empty()) {\n+                // Exhausted search space before running into attempt limit\n+                result.SetSelectionsEvaluated(curr_try);\n+                break;\n+            }\n+            next_utxo = curr_selection.back() + 1;\n+            deselect_last();\n+            should_shift  = false;\n+        }\n+    }\n+\n+    if (best_selection.empty()) {\n+        return max_tx_weight_exceeded ? ErrorMaxWeightExceeded() : util::Error();",
      "path": "src/wallet/coinselection.cpp",
      "position": 353,
      "original_position": 156,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "180676ed7b20ccc7d51e6af6e63b8daac0c8495f",
      "in_reply_to_id": 1468517854,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sounds good.",
      "created_at": "2024-01-31T13:39:08Z",
      "updated_at": "2024-01-31T13:39:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1472836168",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472836168"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 512,
      "original_line": 512,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472848173",
      "pull_request_review_id": 1853774778,
      "id": 1472848173,
      "node_id": "PRRC_kwDOABII585XyeEt",
      "diff_hunk": "@@ -188,6 +188,177 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with non-positive effective value have been filtered\n+        Assume(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+\n+    const CAmount total_target = selection_target + change_target;\n+    if (total_available < total_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // The current selection and the best input set found so far, stored as the utxo_pool indices of the UTXOs forming them\n+    std::vector<size_t> curr_selection;\n+    std::vector<size_t> best_selection;\n+\n+    // The currently selected effective amount, and the effective amount of the best selection so far\n+    CAmount curr_amount = 0;\n+    CAmount best_selection_amount = MAX_MONEY;\n+\n+    // The weight of the currently selected input set, and the weight of the best selection\n+    int curr_weight = 0;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+\n+    // Whether the input sets generated during this search have exceeded the maximum transaction weight at any point\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Index of the next UTXO to consider in utxo_pool\n+    size_t next_utxo = 0;\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transitions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the current selection weight exceeds the max weight or\n+     *                             the current selection amount is equal to or greater than the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselect the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= total_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {",
      "path": "src/wallet/coinselection.cpp",
      "position": 301,
      "original_position": 131,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "9ccbef5d481f7e6d42887f4230a2443e44405094",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think you should set the number of tries to be at least some multiple of the utxo_pool size, because (a) without it, you can't guarantee even considering every UTXO, and (b) the runtime of coin selection overall already contains a component proportional to the size of utxo_pool (simply the cost of constructing the pool in the first place) anyway. So I would suggest something like `const auto total_tries = max(TOTAL_TRIES_CG, 10 * utxo_pool.size());` or so.\r\n\r\nIt may be worth doing this as a follow-up, as other algorithms may benefit from a similar treatment. Still, I'd suggest using a separate constant `TOTAL_TRIES_CG`, even if you also set it to 100000 for now, because there is no inherent reason why BNB and CG should have the same iteration count limit (their time per iteration, and certainly their \"solving power\" per iteration, is possibly quite different).",
      "created_at": "2024-01-31T13:48:14Z",
      "updated_at": "2024-01-31T15:25:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1472848173",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472848173"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 460,
      "original_line": 460,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472849582",
      "pull_request_review_id": 1853774778,
      "id": 1472849582,
      "node_id": "PRRC_kwDOABII585Xyeau",
      "diff_hunk": "@@ -188,6 +188,177 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with non-positive effective value have been filtered\n+        Assume(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+\n+    const CAmount total_target = selection_target + change_target;\n+    if (total_available < total_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // The current selection and the best input set found so far, stored as the utxo_pool indices of the UTXOs forming them\n+    std::vector<size_t> curr_selection;\n+    std::vector<size_t> best_selection;\n+\n+    // The currently selected effective amount, and the effective amount of the best selection so far\n+    CAmount curr_amount = 0;\n+    CAmount best_selection_amount = MAX_MONEY;\n+\n+    // The weight of the currently selected input set, and the weight of the best selection\n+    int curr_weight = 0;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+\n+    // Whether the input sets generated during this search have exceeded the maximum transaction weight at any point\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Index of the next UTXO to consider in utxo_pool\n+    size_t next_utxo = 0;\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transitions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the current selection weight exceeds the max weight or\n+     *                             the current selection amount is equal to or greater than the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselect the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= total_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {\n+            // Solution is not guaranteed to be optimal if `curr_try` hit TOTAL_TRIES\n+            result.SetSelectionsEvaluated(curr_try);\n+            break;\n+        }\n+\n+        if (next_utxo == utxo_pool.size()) {\n+            // Last added UTXO was end of UTXO pool, nothing left to add on inclusion or omission branch: CUT\n+            should_cut = true;\n+        }\n+\n+        if (should_cut) {\n+            // Neither adding to the current selection nor exploring the omission branch of the last selected UTXO can\n+            // find any solutions. Redirect to exploring Omission branch of the penultimate selected UTXO (i.e. deselect\n+            // last selected UTXO, then SHIFT)",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 145,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "9ccbef5d481f7e6d42887f4230a2443e44405094",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Did you mean \"then EXPLORE\" here?",
      "created_at": "2024-01-31T13:49:11Z",
      "updated_at": "2024-01-31T15:25:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1472849582",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472849582"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 332,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472864023",
      "pull_request_review_id": 1853774778,
      "id": 1472864023,
      "node_id": "PRRC_kwDOABII585Xyh8X",
      "diff_hunk": "@@ -188,6 +188,177 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with non-positive effective value have been filtered\n+        Assume(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+\n+    const CAmount total_target = selection_target + change_target;\n+    if (total_available < total_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // The current selection and the best input set found so far, stored as the utxo_pool indices of the UTXOs forming them\n+    std::vector<size_t> curr_selection;\n+    std::vector<size_t> best_selection;\n+\n+    // The currently selected effective amount, and the effective amount of the best selection so far\n+    CAmount curr_amount = 0;\n+    CAmount best_selection_amount = MAX_MONEY;\n+\n+    // The weight of the currently selected input set, and the weight of the best selection\n+    int curr_weight = 0;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+\n+    // Whether the input sets generated during this search have exceeded the maximum transaction weight at any point\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Index of the next UTXO to consider in utxo_pool\n+    size_t next_utxo = 0;\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transitions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the current selection weight exceeds the max weight or\n+     *                             the current selection amount is equal to or greater than the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselect the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= total_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {\n+            // Solution is not guaranteed to be optimal if `curr_try` hit TOTAL_TRIES\n+            result.SetSelectionsEvaluated(curr_try);\n+            break;\n+        }\n+\n+        if (next_utxo == utxo_pool.size()) {\n+            // Last added UTXO was end of UTXO pool, nothing left to add on inclusion or omission branch: CUT\n+            should_cut = true;\n+        }\n+\n+        if (should_cut) {\n+            // Neither adding to the current selection nor exploring the omission branch of the last selected UTXO can\n+            // find any solutions. Redirect to exploring Omission branch of the penultimate selected UTXO (i.e. deselect\n+            // last selected UTXO, then SHIFT)\n+            should_cut = false;\n+            deselect_last();\n+            should_shift  = true;\n+        }\n+\n+        if (should_shift) {\n+            // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n+            if (curr_selection.empty()) {\n+                // Exhausted search space before running into attempt limit\n+                result.SetSelectionsEvaluated(curr_try);",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 155,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "9ccbef5d481f7e6d42887f4230a2443e44405094",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This `result.SetSelectionsEvaluated(curr_try); break;` is repeated in both exit conditions. The `result.SetSelectionsEvaluated(curr_try);` can be moved outside of the loop I believe.",
      "created_at": "2024-01-31T13:59:52Z",
      "updated_at": "2024-01-31T15:25:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1472864023",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472864023"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 342,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472865513",
      "pull_request_review_id": 1853774778,
      "id": 1472865513,
      "node_id": "PRRC_kwDOABII585XyiTp",
      "diff_hunk": "@@ -709,6 +709,13 @@ util::Result<SelectionResult> ChooseSelectionResult(interfaces::Chain& chain, co\n         results.push_back(*knapsack_result);\n     } else append_error(knapsack_result);\n \n+    if (coin_selection_params.m_effective_feerate > CFeeRate{3 * coin_selection_params.m_long_term_feerate}) { // Minimize input set for feerates of at least 3×LTFRE (default: 30 ṩ/vB+)\n+        if (auto cg_result{CoinGrinder(groups.positive_group, nTargetValue, coin_selection_params.m_min_change_target, max_inputs_weight)}) {\n+            cg_result->ComputeAndSetWaste(coin_selection_params.min_viable_change, coin_selection_params.m_cost_of_change, coin_selection_params.m_change_fee);\n+            results.push_back(*cg_result);\n+        } else append_error(cg_result);",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "9ccbef5d481f7e6d42887f4230a2443e44405094",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Coding style nit:\r\n\r\n```c++\r\n} else {\r\n    append_error(cg_result);\r\n}\r\n```\r\n\r\n(conditional without braces/indent only allowed if it's of the `if (condition) statement;` form)",
      "created_at": "2024-01-31T14:01:01Z",
      "updated_at": "2024-01-31T21:00:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1472865513",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472865513"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 716,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472986777",
      "pull_request_review_id": 1853774778,
      "id": 1472986777,
      "node_id": "PRRC_kwDOABII585Xy_6Z",
      "diff_hunk": "@@ -134,6 +135,86 @@ FUZZ_TARGET(coin_grinder)\n     }\n }\n \n+FUZZ_TARGET(coin_grinder_is_optimal)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = false;\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};",
      "path": "src/wallet/test/fuzz/coinselection.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "e8115ac3402a1722f89f2a4e1907a7fe151622dc",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've experimented a bit with how far the range of inputs can be extended to cover extreme values (not because those extreme values are ones we care about in practice, but because they're more likely to expose bugs that do affect practical inputs):\r\n\r\n```diff\r\n--- a/src/wallet/test/fuzz/coinselection.cpp\r\n+++ b/src/wallet/test/fuzz/coinselection.cpp\r\n@@ -142,29 +142,25 @@ FUZZ_TARGET(coin_grinder_is_optimal)\r\n     FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\r\n     CoinSelectionParams coin_params{fast_random_context};\r\n     coin_params.m_subtract_fee_outputs = false;\r\n-    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\r\n-    coin_params.m_min_change_target = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(0, MAX_MONEY);\r\n+    // Set effective feerate up to MAX_MONEY sats per 1000000 vB (21000 BTC per kvB).\r\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, MAX_MONEY)};\r\n+    coin_params.m_min_change_target = ConsumeMoney(fuzzed_data_provider);\r\n \r\n     // Create some coins\r\n-    CAmount total_balance{0};\r\n     CAmount max_spendable{0};\r\n     int next_locktime{0};\r\n     unsigned max_output_groups = 16;\r\n     std::vector<OutputGroup> group_pos;\r\n     LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), max_output_groups)\r\n     {\r\n-        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(41, 10000)};\r\n+        // With maximum m_effective_feerate and n_input_bytes = 1000000, input_fee <= MAX_MONEY.\r\n+        const int n_input_bytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(1, 1000000)};\r\n         // Only make UTXOs with positive effective value\r\n         const CAmount input_fee = coin_params.m_effective_feerate.GetFee(n_input_bytes);\r\n-        const CAmount amount{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(input_fee + 1, MAX_MONEY)};\r\n-        if (total_balance + amount >= MAX_MONEY) {\r\n-            break;\r\n-        }\r\n-\r\n+        const CAmount eff_value{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(0, MAX_MONEY - max_spendable)};\r\n+        const CAmount amount{eff_value + input_fee};\r\n         std::vector<COutput> temp_utxo_pool;\r\n         AddCoin(amount, /*n_input=*/0, n_input_bytes, ++next_locktime, temp_utxo_pool, coin_params.m_effective_feerate);\r\n-        total_balance += amount;\r\n-        CAmount eff_value = amount - input_fee;\r\n         max_spendable += eff_value;\r\n \r\n         auto output_group = OutputGroup(coin_params);\r\n@@ -195,9 +191,9 @@ FUZZ_TARGET(coin_grinder_is_optimal)\r\n         }\r\n     }\r\n \r\n-    if (best_weight <= MAX_STANDARD_TX_WEIGHT) {\r\n+    if (best_weight < std::numeric_limits<int>::max()) {\r\n         // Sufficient funds and acceptable weight: CoinGrinder should find at least one solution\r\n-        int high_max_weight = fuzzed_data_provider.ConsumeIntegralInRange<int>(best_weight, MAX_STANDARD_TX_WEIGHT);\r\n+        int high_max_weight = fuzzed_data_provider.ConsumeIntegralInRange<int>(best_weight, std::numeric_limits<int>::max());\r\n \r\n         auto result_cg = CoinGrinder(group_pos, target, coin_params.m_min_change_target, high_max_weight);\r\n         assert(result_cg);\r\n@@ -209,7 +205,7 @@ FUZZ_TARGET(coin_grinder_is_optimal)\r\n     }\r\n \r\n     // CoinGrinder cannot ever find a better solution than the brute-forced best, or there is none in the first place\r\n-    int low_max_weight = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, std::min(best_weight - 1, MAX_STANDARD_TX_WEIGHT));\r\n+    int low_max_weight = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, best_weight - 1);\r\n     auto result_cg = CoinGrinder(group_pos, target, coin_params.m_min_change_target, low_max_weight);\r\n     // Max_weight should have been exceeded, or there were insufficient funds\r\n     assert(!result_cg);\r\n```",
      "created_at": "2024-01-31T15:18:26Z",
      "updated_at": "2024-01-31T15:25:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1472986777",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1472986777"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1473374021",
      "pull_request_review_id": 1854679982,
      "id": 1473374021,
      "node_id": "PRRC_kwDOABII585X0edF",
      "diff_hunk": "@@ -188,6 +188,177 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with non-positive effective value have been filtered\n+        Assume(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+\n+    const CAmount total_target = selection_target + change_target;\n+    if (total_available < total_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // The current selection and the best input set found so far, stored as the utxo_pool indices of the UTXOs forming them\n+    std::vector<size_t> curr_selection;\n+    std::vector<size_t> best_selection;\n+\n+    // The currently selected effective amount, and the effective amount of the best selection so far\n+    CAmount curr_amount = 0;\n+    CAmount best_selection_amount = MAX_MONEY;\n+\n+    // The weight of the currently selected input set, and the weight of the best selection\n+    int curr_weight = 0;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+\n+    // Whether the input sets generated during this search have exceeded the maximum transaction weight at any point\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Index of the next UTXO to consider in utxo_pool\n+    size_t next_utxo = 0;\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transitions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the current selection weight exceeds the max weight or\n+     *                             the current selection amount is equal to or greater than the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselect the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= total_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {",
      "path": "src/wallet/coinselection.cpp",
      "position": 301,
      "original_position": 131,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "9ccbef5d481f7e6d42887f4230a2443e44405094",
      "in_reply_to_id": 1472848173,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "While I agree that CoinGrinder already does work that scales with the size of the UTXO pool, I would argue that CoinGrinder should never need more than 100'000 tries to find _a_ solution. We can only use up to ~1740 inputs in a standard transaction, so if a wallet can’t scrounge up enough funds after traversing 100'000 candidate input sets, I’d say it has other issues.\r\n\r\nHappy to change both of these in a follow-up, but wouldn’t consider it necessary for this PR to land.",
      "created_at": "2024-01-31T19:38:05Z",
      "updated_at": "2024-01-31T19:56:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1473374021",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1473374021"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 460,
      "original_line": 460,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1473374818",
      "pull_request_review_id": 1854679982,
      "id": 1473374818,
      "node_id": "PRRC_kwDOABII585X0epi",
      "diff_hunk": "@@ -188,6 +188,177 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with non-positive effective value have been filtered\n+        Assume(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+\n+    const CAmount total_target = selection_target + change_target;\n+    if (total_available < total_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // The current selection and the best input set found so far, stored as the utxo_pool indices of the UTXOs forming them\n+    std::vector<size_t> curr_selection;\n+    std::vector<size_t> best_selection;\n+\n+    // The currently selected effective amount, and the effective amount of the best selection so far\n+    CAmount curr_amount = 0;\n+    CAmount best_selection_amount = MAX_MONEY;\n+\n+    // The weight of the currently selected input set, and the weight of the best selection\n+    int curr_weight = 0;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+\n+    // Whether the input sets generated during this search have exceeded the maximum transaction weight at any point\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Index of the next UTXO to consider in utxo_pool\n+    size_t next_utxo = 0;\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transitions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the current selection weight exceeds the max weight or\n+     *                             the current selection amount is equal to or greater than the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselect the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= total_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {\n+            // Solution is not guaranteed to be optimal if `curr_try` hit TOTAL_TRIES\n+            result.SetSelectionsEvaluated(curr_try);\n+            break;\n+        }\n+\n+        if (next_utxo == utxo_pool.size()) {\n+            // Last added UTXO was end of UTXO pool, nothing left to add on inclusion or omission branch: CUT\n+            should_cut = true;\n+        }\n+\n+        if (should_cut) {\n+            // Neither adding to the current selection nor exploring the omission branch of the last selected UTXO can\n+            // find any solutions. Redirect to exploring Omission branch of the penultimate selected UTXO (i.e. deselect\n+            // last selected UTXO, then SHIFT)",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 145,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "9ccbef5d481f7e6d42887f4230a2443e44405094",
      "in_reply_to_id": 1472849582,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, SHIFT is _deselect + explore_ and CUT is _deselect + deselect + explore_, so CUT is _deselect + SHIFT_.",
      "created_at": "2024-01-31T19:38:52Z",
      "updated_at": "2024-01-31T19:56:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1473374818",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1473374818"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 332,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1473376740",
      "pull_request_review_id": 1854679982,
      "id": 1473376740,
      "node_id": "PRRC_kwDOABII585X0fHk",
      "diff_hunk": "@@ -188,6 +188,177 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with non-positive effective value have been filtered\n+        Assume(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+\n+    const CAmount total_target = selection_target + change_target;\n+    if (total_available < total_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // The current selection and the best input set found so far, stored as the utxo_pool indices of the UTXOs forming them\n+    std::vector<size_t> curr_selection;\n+    std::vector<size_t> best_selection;\n+\n+    // The currently selected effective amount, and the effective amount of the best selection so far\n+    CAmount curr_amount = 0;\n+    CAmount best_selection_amount = MAX_MONEY;\n+\n+    // The weight of the currently selected input set, and the weight of the best selection\n+    int curr_weight = 0;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+\n+    // Whether the input sets generated during this search have exceeded the maximum transaction weight at any point\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Index of the next UTXO to consider in utxo_pool\n+    size_t next_utxo = 0;\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transitions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the current selection weight exceeds the max weight or\n+     *                             the current selection amount is equal to or greater than the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselect the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= total_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {\n+            // Solution is not guaranteed to be optimal if `curr_try` hit TOTAL_TRIES\n+            result.SetSelectionsEvaluated(curr_try);\n+            break;\n+        }\n+\n+        if (next_utxo == utxo_pool.size()) {\n+            // Last added UTXO was end of UTXO pool, nothing left to add on inclusion or omission branch: CUT\n+            should_cut = true;\n+        }\n+\n+        if (should_cut) {\n+            // Neither adding to the current selection nor exploring the omission branch of the last selected UTXO can\n+            // find any solutions. Redirect to exploring Omission branch of the penultimate selected UTXO (i.e. deselect\n+            // last selected UTXO, then SHIFT)\n+            should_cut = false;\n+            deselect_last();\n+            should_shift  = true;\n+        }\n+\n+        if (should_shift) {\n+            // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n+            if (curr_selection.empty()) {\n+                // Exhausted search space before running into attempt limit\n+                result.SetSelectionsEvaluated(curr_try);",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 155,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "9ccbef5d481f7e6d42887f4230a2443e44405094",
      "in_reply_to_id": 1472864023,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, looks correct. I will move `result.SetSelectionsEvaluated(curr_try)` out of the loop next time I’ll push. I know there are some other reviews in flight right now.",
      "created_at": "2024-01-31T19:40:35Z",
      "updated_at": "2024-01-31T19:56:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1473376740",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1473376740"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 342,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1473377599",
      "pull_request_review_id": 1854679982,
      "id": 1473377599,
      "node_id": "PRRC_kwDOABII585X0fU_",
      "diff_hunk": "@@ -709,6 +709,13 @@ util::Result<SelectionResult> ChooseSelectionResult(interfaces::Chain& chain, co\n         results.push_back(*knapsack_result);\n     } else append_error(knapsack_result);\n \n+    if (coin_selection_params.m_effective_feerate > CFeeRate{3 * coin_selection_params.m_long_term_feerate}) { // Minimize input set for feerates of at least 3×LTFRE (default: 30 ṩ/vB+)\n+        if (auto cg_result{CoinGrinder(groups.positive_group, nTargetValue, coin_selection_params.m_min_change_target, max_inputs_weight)}) {\n+            cg_result->ComputeAndSetWaste(coin_selection_params.min_viable_change, coin_selection_params.m_cost_of_change, coin_selection_params.m_change_fee);\n+            results.push_back(*cg_result);\n+        } else append_error(cg_result);",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "9ccbef5d481f7e6d42887f4230a2443e44405094",
      "in_reply_to_id": 1472865513,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Okay, will fix when I push next time.",
      "created_at": "2024-01-31T19:41:25Z",
      "updated_at": "2024-01-31T19:56:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1473377599",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1473377599"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 716,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1473380373",
      "pull_request_review_id": 1854679982,
      "id": 1473380373,
      "node_id": "PRRC_kwDOABII585X0gAV",
      "diff_hunk": "@@ -134,6 +135,86 @@ FUZZ_TARGET(coin_grinder)\n     }\n }\n \n+FUZZ_TARGET(coin_grinder_is_optimal)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = false;\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};",
      "path": "src/wallet/test/fuzz/coinselection.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "e8115ac3402a1722f89f2a4e1907a7fe151622dc",
      "in_reply_to_id": 1472986777,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Okay cool, sound great. Will adopt with the next push.",
      "created_at": "2024-01-31T19:44:24Z",
      "updated_at": "2024-01-31T19:56:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1473380373",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1473380373"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1474434487",
      "pull_request_review_id": 1856442648,
      "id": 1474434487,
      "node_id": "PRRC_kwDOABII585X4hW3",
      "diff_hunk": "@@ -188,6 +188,177 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with non-positive effective value have been filtered\n+        Assume(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+\n+    const CAmount total_target = selection_target + change_target;\n+    if (total_available < total_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // The current selection and the best input set found so far, stored as the utxo_pool indices of the UTXOs forming them\n+    std::vector<size_t> curr_selection;\n+    std::vector<size_t> best_selection;\n+\n+    // The currently selected effective amount, and the effective amount of the best selection so far\n+    CAmount curr_amount = 0;\n+    CAmount best_selection_amount = MAX_MONEY;\n+\n+    // The weight of the currently selected input set, and the weight of the best selection\n+    int curr_weight = 0;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+\n+    // Whether the input sets generated during this search have exceeded the maximum transaction weight at any point\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Index of the next UTXO to consider in utxo_pool\n+    size_t next_utxo = 0;\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transitions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the current selection weight exceeds the max weight or\n+     *                             the current selection amount is equal to or greater than the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselect the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= total_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {\n+            // Solution is not guaranteed to be optimal if `curr_try` hit TOTAL_TRIES\n+            result.SetSelectionsEvaluated(curr_try);\n+            break;\n+        }\n+\n+        if (next_utxo == utxo_pool.size()) {\n+            // Last added UTXO was end of UTXO pool, nothing left to add on inclusion or omission branch: CUT\n+            should_cut = true;\n+        }\n+\n+        if (should_cut) {\n+            // Neither adding to the current selection nor exploring the omission branch of the last selected UTXO can\n+            // find any solutions. Redirect to exploring Omission branch of the penultimate selected UTXO (i.e. deselect\n+            // last selected UTXO, then SHIFT)",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 145,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "9ccbef5d481f7e6d42887f4230a2443e44405094",
      "in_reply_to_id": 1472849582,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That said, your comment indicates that this could be phrased better, since it appears to be difficult to follow. Will improve.",
      "created_at": "2024-02-01T13:04:26Z",
      "updated_at": "2024-02-01T13:04:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1474434487",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1474434487"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 332,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475072896",
      "pull_request_review_id": 1857490482,
      "id": 1475072896,
      "node_id": "PRRC_kwDOABII585X69OA",
      "diff_hunk": "@@ -183,6 +200,223 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower weight preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending_effval_weight);\n+    // The sum of UTXO amounts after this UTXO index, e.g. lookahead[5] = Σ(UTXO[6+].amount)\n+    std::vector<CAmount> lookahead(utxo_pool.size());\n+    // The minimum UTXO weight among the remaining UTXOs after this UTXO index, e.g. min_tail_weight[5] = min(UTXO[6+].weight)\n+    std::vector<int> min_tail_weight(utxo_pool.size());\n+\n+    // Calculate lookahead values, min_tail_weights, and check that there are sufficient funds\n+    CAmount total_available = 0;\n+    int min_group_weight = std::numeric_limits<int>::max();\n+    size_t i = utxo_pool.size();\n+    while (i > 0) {\n+        --i;\n+        lookahead[i] = total_available;\n+        min_tail_weight[i] = min_group_weight;\n+        // UTXOs with non-positive effective value must have been filtered\n+        Assume(utxo_pool[i].GetSelectionAmount() > 0);\n+        total_available += utxo_pool[i].GetSelectionAmount();\n+        min_group_weight = std::min(min_group_weight, utxo_pool[i].m_weight);\n+    }\n+\n+    const CAmount total_target = selection_target + change_target;\n+    if (total_available < total_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // The current selection and the best input set found so far, stored as the utxo_pool indices of the UTXOs forming them\n+    std::vector<size_t> curr_selection;\n+    std::vector<size_t> best_selection;\n+\n+    // The currently selected effective amount, and the effective amount of the best selection so far\n+    CAmount curr_amount = 0;\n+    CAmount best_selection_amount = MAX_MONEY;\n+\n+    // The weight of the currently selected input set, and the weight of the best selection\n+    int curr_weight = 0;\n+    int best_selection_weight = max_weight; // Tie is fine, because we prefer lower selection amount\n+\n+    // Whether the input sets generated during this search have exceeded the maximum transaction weight at any point\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Index of the next UTXO to consider in utxo_pool\n+    size_t next_utxo = 0;\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transitions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the current selection weight exceeds the max weight or\n+     *                             the current selection amount is equal to or greater than the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselect the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    bool is_done = false;\n+    size_t curr_try = 0;\n+    while (!is_done) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        auto curr_tail = curr_selection.back();\n+        if (curr_amount + lookahead[curr_tail] < total_target) {\n+            // Insufficient funds with lookahead: CUT\n+            should_cut = true;\n+        } else if (curr_weight > best_selection_weight) {\n+            // best_selection_weight is initialized to max_weight\n+            if (curr_weight > max_weight) max_tx_weight_exceeded = true;\n+            // Worse weight than best solution. More UTXOs only increase weight:\n+            // CUT if last selected group had minimal weight, else SHIFT\n+            if (utxo_pool[curr_tail].m_weight <= min_tail_weight[curr_tail]) {\n+                should_cut = true;\n+            } else {\n+                should_shift  = true;\n+            }\n+        } else if (curr_amount >= total_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        } else if (!best_selection.empty() && curr_weight + min_tail_weight[curr_tail] * ((total_target - curr_amount) / utxo_pool[curr_tail].GetSelectionAmount()) > best_selection_weight) {\n+            // Compare minimal tail weight and last selected amount with the amount missing to gauge whether a better weight is still possible.\n+            if (utxo_pool[curr_tail].m_weight <= min_tail_weight[curr_tail]) {\n+                should_cut = true;\n+            } else {\n+                should_shift = true;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {\n+            // Solution is not guaranteed to be optimal if `curr_try` hit TOTAL_TRIES\n+            result.SetSelectionsEvaluated(curr_try);\n+            result.SetAlgoCompleted(false);\n+            break;\n+        }\n+\n+        if (next_utxo == utxo_pool.size()) {\n+            // Last added UTXO was end of UTXO pool, nothing left to add on inclusion or omission branch: CUT\n+            should_cut = true;\n+        }\n+\n+        if (should_cut) {\n+            // Neither adding to the current selection nor exploring the omission branch of the last selected UTXO can\n+            // find any solutions. Redirect to exploring Omission branch of the penultimate selected UTXO (i.e. deselect\n+            // last selected UTXO, then SHIFT)\n+            should_cut = false;\n+            deselect_last();\n+            should_shift  = true;\n+        }\n+\n+        while (should_shift) {\n+            // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n+            if (curr_selection.empty()) {\n+                // Exhausted search space before running into attempt limit\n+                is_done = true;\n+                result.SetSelectionsEvaluated(curr_try);\n+                result.SetAlgoCompleted(true);\n+                break;\n+            }\n+            next_utxo = curr_selection.back() + 1;\n+            deselect_last();\n+            should_shift  = false;\n+\n+            // After SHIFTing to an omission branch, the `next_utxo` might have the same value and same weight as the",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 233,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "ab7eaaa98bc29bafb96cda2d391e9a7ab16ccac7",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(From IRL discussion)\r\n\r\nThe actually implemented optimization here is actually more powerful than what is described by the comment, because the weight isn't compared. Due to the fact that that among equal-value utxo groups, the lower weight ones sort first, higher weight ones are even worse, and can also be skipped.",
      "created_at": "2024-02-01T19:55:45Z",
      "updated_at": "2024-02-01T19:55:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475072896",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475072896"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 392,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475073648",
      "pull_request_review_id": 1857491704,
      "id": 1475073648,
      "node_id": "PRRC_kwDOABII585X69Zw",
      "diff_hunk": "@@ -183,6 +200,223 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower weight preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending_effval_weight);\n+    // The sum of UTXO amounts after this UTXO index, e.g. lookahead[5] = Σ(UTXO[6+].amount)\n+    std::vector<CAmount> lookahead(utxo_pool.size());\n+    // The minimum UTXO weight among the remaining UTXOs after this UTXO index, e.g. min_tail_weight[5] = min(UTXO[6+].weight)\n+    std::vector<int> min_tail_weight(utxo_pool.size());\n+\n+    // Calculate lookahead values, min_tail_weights, and check that there are sufficient funds\n+    CAmount total_available = 0;\n+    int min_group_weight = std::numeric_limits<int>::max();\n+    size_t i = utxo_pool.size();\n+    while (i > 0) {\n+        --i;\n+        lookahead[i] = total_available;\n+        min_tail_weight[i] = min_group_weight;\n+        // UTXOs with non-positive effective value must have been filtered\n+        Assume(utxo_pool[i].GetSelectionAmount() > 0);\n+        total_available += utxo_pool[i].GetSelectionAmount();\n+        min_group_weight = std::min(min_group_weight, utxo_pool[i].m_weight);\n+    }\n+\n+    const CAmount total_target = selection_target + change_target;\n+    if (total_available < total_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // The current selection and the best input set found so far, stored as the utxo_pool indices of the UTXOs forming them\n+    std::vector<size_t> curr_selection;\n+    std::vector<size_t> best_selection;\n+\n+    // The currently selected effective amount, and the effective amount of the best selection so far\n+    CAmount curr_amount = 0;\n+    CAmount best_selection_amount = MAX_MONEY;\n+\n+    // The weight of the currently selected input set, and the weight of the best selection\n+    int curr_weight = 0;\n+    int best_selection_weight = max_weight; // Tie is fine, because we prefer lower selection amount\n+\n+    // Whether the input sets generated during this search have exceeded the maximum transaction weight at any point\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Index of the next UTXO to consider in utxo_pool\n+    size_t next_utxo = 0;\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transitions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the current selection weight exceeds the max weight or\n+     *                             the current selection amount is equal to or greater than the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselect the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    bool is_done = false;\n+    size_t curr_try = 0;\n+    while (!is_done) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        auto curr_tail = curr_selection.back();\n+        if (curr_amount + lookahead[curr_tail] < total_target) {\n+            // Insufficient funds with lookahead: CUT\n+            should_cut = true;\n+        } else if (curr_weight > best_selection_weight) {\n+            // best_selection_weight is initialized to max_weight\n+            if (curr_weight > max_weight) max_tx_weight_exceeded = true;\n+            // Worse weight than best solution. More UTXOs only increase weight:\n+            // CUT if last selected group had minimal weight, else SHIFT\n+            if (utxo_pool[curr_tail].m_weight <= min_tail_weight[curr_tail]) {\n+                should_cut = true;\n+            } else {\n+                should_shift  = true;\n+            }\n+        } else if (curr_amount >= total_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        } else if (!best_selection.empty() && curr_weight + min_tail_weight[curr_tail] * ((total_target - curr_amount) / utxo_pool[curr_tail].GetSelectionAmount()) > best_selection_weight) {\n+            // Compare minimal tail weight and last selected amount with the amount missing to gauge whether a better weight is still possible.\n+            if (utxo_pool[curr_tail].m_weight <= min_tail_weight[curr_tail]) {\n+                should_cut = true;\n+            } else {\n+                should_shift = true;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {\n+            // Solution is not guaranteed to be optimal if `curr_try` hit TOTAL_TRIES\n+            result.SetSelectionsEvaluated(curr_try);\n+            result.SetAlgoCompleted(false);\n+            break;\n+        }\n+\n+        if (next_utxo == utxo_pool.size()) {\n+            // Last added UTXO was end of UTXO pool, nothing left to add on inclusion or omission branch: CUT\n+            should_cut = true;\n+        }\n+\n+        if (should_cut) {\n+            // Neither adding to the current selection nor exploring the omission branch of the last selected UTXO can\n+            // find any solutions. Redirect to exploring Omission branch of the penultimate selected UTXO (i.e. deselect\n+            // last selected UTXO, then SHIFT)\n+            should_cut = false;\n+            deselect_last();\n+            should_shift  = true;\n+        }\n+\n+        while (should_shift) {\n+            // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n+            if (curr_selection.empty()) {\n+                // Exhausted search space before running into attempt limit\n+                is_done = true;\n+                result.SetSelectionsEvaluated(curr_try);\n+                result.SetAlgoCompleted(true);\n+                break;\n+            }\n+            next_utxo = curr_selection.back() + 1;\n+            deselect_last();\n+            should_shift  = false;\n+\n+            // After SHIFTing to an omission branch, the `next_utxo` might have the same value and same weight as the",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 233,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "ab7eaaa98bc29bafb96cda2d391e9a7ab16ccac7",
      "in_reply_to_id": 1475072896,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yep, will update.",
      "created_at": "2024-02-01T19:56:32Z",
      "updated_at": "2024-02-01T19:56:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475073648",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475073648"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 392,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475094275",
      "pull_request_review_id": 1857527717,
      "id": 1475094275,
      "node_id": "PRRC_kwDOABII585X7CcD",
      "diff_hunk": "@@ -188,6 +188,177 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with non-positive effective value have been filtered\n+        Assume(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+\n+    const CAmount total_target = selection_target + change_target;\n+    if (total_available < total_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // The current selection and the best input set found so far, stored as the utxo_pool indices of the UTXOs forming them\n+    std::vector<size_t> curr_selection;\n+    std::vector<size_t> best_selection;\n+\n+    // The currently selected effective amount, and the effective amount of the best selection so far\n+    CAmount curr_amount = 0;\n+    CAmount best_selection_amount = MAX_MONEY;\n+\n+    // The weight of the currently selected input set, and the weight of the best selection\n+    int curr_weight = 0;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+\n+    // Whether the input sets generated during this search have exceeded the maximum transaction weight at any point\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Index of the next UTXO to consider in utxo_pool\n+    size_t next_utxo = 0;\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transitions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the current selection weight exceeds the max weight or\n+     *                             the current selection amount is equal to or greater than the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselect the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= total_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {\n+            // Solution is not guaranteed to be optimal if `curr_try` hit TOTAL_TRIES\n+            result.SetSelectionsEvaluated(curr_try);\n+            break;\n+        }\n+\n+        if (next_utxo == utxo_pool.size()) {\n+            // Last added UTXO was end of UTXO pool, nothing left to add on inclusion or omission branch: CUT\n+            should_cut = true;\n+        }\n+\n+        if (should_cut) {\n+            // Neither adding to the current selection nor exploring the omission branch of the last selected UTXO can\n+            // find any solutions. Redirect to exploring Omission branch of the penultimate selected UTXO (i.e. deselect\n+            // last selected UTXO, then SHIFT)\n+            should_cut = false;\n+            deselect_last();\n+            should_shift  = true;\n+        }\n+\n+        if (should_shift) {\n+            // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n+            if (curr_selection.empty()) {\n+                // Exhausted search space before running into attempt limit\n+                result.SetSelectionsEvaluated(curr_try);",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 155,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "9ccbef5d481f7e6d42887f4230a2443e44405094",
      "in_reply_to_id": 1472864023,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Moved `result.SetSelectionsEvaluated(curr_try)` after the loop",
      "created_at": "2024-02-01T20:17:20Z",
      "updated_at": "2024-02-01T22:02:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475094275",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475094275"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 342,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475095394",
      "pull_request_review_id": 1857527717,
      "id": 1475095394,
      "node_id": "PRRC_kwDOABII585X7Cti",
      "diff_hunk": "@@ -709,6 +709,13 @@ util::Result<SelectionResult> ChooseSelectionResult(interfaces::Chain& chain, co\n         results.push_back(*knapsack_result);\n     } else append_error(knapsack_result);\n \n+    if (coin_selection_params.m_effective_feerate > CFeeRate{3 * coin_selection_params.m_long_term_feerate}) { // Minimize input set for feerates of at least 3×LTFRE (default: 30 ṩ/vB+)\n+        if (auto cg_result{CoinGrinder(groups.positive_group, nTargetValue, coin_selection_params.m_min_change_target, max_inputs_weight)}) {\n+            cg_result->ComputeAndSetWaste(coin_selection_params.min_viable_change, coin_selection_params.m_cost_of_change, coin_selection_params.m_change_fee);\n+            results.push_back(*cg_result);\n+        } else append_error(cg_result);",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "9ccbef5d481f7e6d42887f4230a2443e44405094",
      "in_reply_to_id": 1472865513,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2024-02-01T20:18:28Z",
      "updated_at": "2024-02-01T22:02:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475095394",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475095394"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 716,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475100291",
      "pull_request_review_id": 1857527717,
      "id": 1475100291,
      "node_id": "PRRC_kwDOABII585X7D6D",
      "diff_hunk": "@@ -188,6 +188,177 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower waste preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Check that there are sufficient funds\n+    CAmount total_available = 0;\n+    for (const OutputGroup& utxo : utxo_pool) {\n+        // Assert UTXOs with non-positive effective value have been filtered\n+        Assume(utxo.GetSelectionAmount() > 0);\n+        total_available += utxo.GetSelectionAmount();\n+    }\n+\n+    const CAmount total_target = selection_target + change_target;\n+    if (total_available < total_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // The current selection and the best input set found so far, stored as the utxo_pool indices of the UTXOs forming them\n+    std::vector<size_t> curr_selection;\n+    std::vector<size_t> best_selection;\n+\n+    // The currently selected effective amount, and the effective amount of the best selection so far\n+    CAmount curr_amount = 0;\n+    CAmount best_selection_amount = MAX_MONEY;\n+\n+    // The weight of the currently selected input set, and the weight of the best selection\n+    int curr_weight = 0;\n+    int best_selection_weight = std::numeric_limits<int>::max();\n+\n+    // Whether the input sets generated during this search have exceeded the maximum transaction weight at any point\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Index of the next UTXO to consider in utxo_pool\n+    size_t next_utxo = 0;\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transitions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the current selection weight exceeds the max weight or\n+     *                             the current selection amount is equal to or greater than the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselect the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    size_t curr_try = 0;\n+    while (true) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        if (curr_weight > max_weight) {\n+            // max_weight exceeded: SHIFT\n+            max_tx_weight_exceeded = true;\n+            should_shift  = true;\n+        } else if (curr_amount >= total_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {\n+            // Solution is not guaranteed to be optimal if `curr_try` hit TOTAL_TRIES\n+            result.SetSelectionsEvaluated(curr_try);\n+            break;\n+        }\n+\n+        if (next_utxo == utxo_pool.size()) {\n+            // Last added UTXO was end of UTXO pool, nothing left to add on inclusion or omission branch: CUT\n+            should_cut = true;\n+        }\n+\n+        if (should_cut) {\n+            // Neither adding to the current selection nor exploring the omission branch of the last selected UTXO can\n+            // find any solutions. Redirect to exploring Omission branch of the penultimate selected UTXO (i.e. deselect\n+            // last selected UTXO, then SHIFT)",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 145,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "9ccbef5d481f7e6d42887f4230a2443e44405094",
      "in_reply_to_id": 1472849582,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed as follows:\r\n\r\n```diff\r\n-            // find any solutions. Redirect to exploring Omission branch of the penultimate selected UTXO (i.e. deselect\r\n-            // last selected UTXO, then SHIFT)\r\n+            // find any solutions. Redirect to exploring the Omission branch of the penultimate selected UTXO (i.e.\r\n+            // set `next_utxo` to one after the penultimate selected, then deselect the last two selected UTXOs)\r\n```",
      "created_at": "2024-02-01T20:22:46Z",
      "updated_at": "2024-02-01T22:02:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475100291",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475100291"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 332,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475114260",
      "pull_request_review_id": 1857573521,
      "id": 1475114260,
      "node_id": "PRRC_kwDOABII585X7HUU",
      "diff_hunk": "@@ -1090,6 +1090,187 @@ BOOST_AUTO_TEST_CASE(effective_value_test)\n     BOOST_CHECK_EQUAL(output5.GetEffectiveValue(), nValue); // The effective value should be equal to the absolute value if input_bytes is -1\n }\n \n+static util::Result<SelectionResult> CoinGrinder(const CAmount& target,\n+                                                    const CoinSelectionParams& cs_params,\n+                                                    const node::NodeContext& m_node,\n+                                                    int max_weight,\n+                                                    std::function<CoinsResult(CWallet&)> coin_setup)\n+{\n+    std::unique_ptr<CWallet> wallet = NewWallet(m_node);\n+    CoinEligibilityFilter filter(0, 0, 0); // accept all coins without ancestors\n+    Groups group = GroupOutputs(*wallet, coin_setup(*wallet), cs_params, {{filter}})[filter].all_groups;\n+    return CoinGrinder(group.positive_group, target, cs_params.m_min_change_target, max_weight);\n+}\n+\n+BOOST_AUTO_TEST_CASE(coin_grinder_tests)\n+{\n+    // Test Coin Grinder:\n+    // 1) Insufficient funds, select all provided coins and fail.\n+    // 2) Exceeded max weight, coin selection always surpasses the max allowed weight.\n+    // 3) Select coins without surpassing the max weight (some coins surpasses the max allowed weight, some others not)\n+    // 4) Test that two less valuable UTXOs with a combined lower weight are preferred over a more valuable heavier UTXO\n+    // 5) Test finding a solution in a UTXO pool with mixed weights\n+    // 6) Test that the lightest solution among many clones is found\n+\n+    FastRandomContext rand;\n+    CoinSelectionParams dummy_params{ // Only used to provide the 'avoid_partial' flag.\n+            rand,\n+            /*change_output_size=*/34,\n+            /*change_spend_size=*/68,\n+            /*min_change_target=*/CENT,\n+            /*effective_feerate=*/CFeeRate(5000),\n+            /*long_term_feerate=*/CFeeRate(2000),\n+            /*discard_feerate=*/CFeeRate(1000),\n+            /*tx_noinputs_size=*/10 + 34, // static header size + output size\n+            /*avoid_partial=*/false,\n+    };\n+\n+    {\n+        // #########################################################\n+        // 1) Insufficient funds, select all provided coins and fail\n+        // #########################################################\n+        CAmount target = 49.5L * COIN;\n+        int max_weight = 10'000; // high enough to not fail for this reason.\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 10; ++j) {\n+                add_coin(available_coins, wallet, CAmount(1 * COIN));\n+                add_coin(available_coins, wallet, CAmount(2 * COIN));\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(!res);\n+        BOOST_CHECK(util::ErrorString(res).empty()); // empty means \"insufficient funds\"\n+    }\n+\n+    {\n+        // ###########################\n+        // 2) Test max weight exceeded\n+        // ###########################\n+        CAmount target = 29.5L * COIN;\n+        int max_weight = 3000;\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 10; ++j) {\n+                add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true);\n+                add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(!res);\n+        BOOST_CHECK(util::ErrorString(res).original.find(\"The inputs size exceeds the maximum weight\") != std::string::npos);\n+    }\n+\n+    {\n+        // ###############################################################################################################\n+        // 3) Test selection when some coins surpass the max allowed weight while others not. --> must find a good solution\n+        // ################################################################################################################\n+        CAmount target = 25.33L * COIN;\n+        int max_weight = 10'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 60; ++j) { // 60 UTXO --> 19,8 BTC total --> 60 × 272 WU = 16320 WU\n+                add_coin(available_coins, wallet, CAmount(0.33 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            for (int i = 0; i < 10; i++) { // 10 UTXO --> 20 BTC total --> 10 × 272 WU = 2720 WU\n+                add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(res);\n+        // If this takes more attempts, the implementation has regressed\n+        size_t expected_attempts = 100'000;\n+        BOOST_CHECK_MESSAGE(res->GetSelectionsEvaluated() == expected_attempts, strprintf(\"Expected %i attempts, but got %i\", expected_attempts, res->GetSelectionsEvaluated()));\n+    }\n+\n+    {\n+        // #################################################################################################################\n+        // 4) Test that two less valuable UTXOs with a combined lower weight are preferred over a more valuable heavier UTXO\n+        // #################################################################################################################\n+        SelectionResult expected_result(CAmount(0), SelectionAlgorithm::CG);\n+        CAmount target =  1.9L * COIN;\n+        int max_weight = 400'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true, 148);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 68);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 68);\n+            return available_coins;\n+        });\n+        expected_result.Clear();",
      "path": "src/wallet/test/coinselector_tests.cpp",
      "position": null,
      "original_position": 111,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "e00d908ce1091c00389f978ee07c184ca91daacd",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit: test: Add coin_grinder_tests\r\n\r\nI think clearing the expected result here is not necessary. You can get rid of this (and potentially also just move the declaration of `expected_result` here instead.",
      "created_at": "2024-02-01T20:34:45Z",
      "updated_at": "2024-02-01T21:22:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475114260",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475114260"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1200,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475116651",
      "pull_request_review_id": 1857573521,
      "id": 1475116651,
      "node_id": "PRRC_kwDOABII585X7H5r",
      "diff_hunk": "@@ -1090,6 +1090,187 @@ BOOST_AUTO_TEST_CASE(effective_value_test)\n     BOOST_CHECK_EQUAL(output5.GetEffectiveValue(), nValue); // The effective value should be equal to the absolute value if input_bytes is -1\n }\n \n+static util::Result<SelectionResult> CoinGrinder(const CAmount& target,\n+                                                    const CoinSelectionParams& cs_params,\n+                                                    const node::NodeContext& m_node,\n+                                                    int max_weight,\n+                                                    std::function<CoinsResult(CWallet&)> coin_setup)\n+{\n+    std::unique_ptr<CWallet> wallet = NewWallet(m_node);\n+    CoinEligibilityFilter filter(0, 0, 0); // accept all coins without ancestors\n+    Groups group = GroupOutputs(*wallet, coin_setup(*wallet), cs_params, {{filter}})[filter].all_groups;\n+    return CoinGrinder(group.positive_group, target, cs_params.m_min_change_target, max_weight);\n+}\n+\n+BOOST_AUTO_TEST_CASE(coin_grinder_tests)\n+{\n+    // Test Coin Grinder:\n+    // 1) Insufficient funds, select all provided coins and fail.\n+    // 2) Exceeded max weight, coin selection always surpasses the max allowed weight.\n+    // 3) Select coins without surpassing the max weight (some coins surpasses the max allowed weight, some others not)\n+    // 4) Test that two less valuable UTXOs with a combined lower weight are preferred over a more valuable heavier UTXO\n+    // 5) Test finding a solution in a UTXO pool with mixed weights\n+    // 6) Test that the lightest solution among many clones is found\n+\n+    FastRandomContext rand;\n+    CoinSelectionParams dummy_params{ // Only used to provide the 'avoid_partial' flag.\n+            rand,\n+            /*change_output_size=*/34,\n+            /*change_spend_size=*/68,\n+            /*min_change_target=*/CENT,\n+            /*effective_feerate=*/CFeeRate(5000),\n+            /*long_term_feerate=*/CFeeRate(2000),\n+            /*discard_feerate=*/CFeeRate(1000),\n+            /*tx_noinputs_size=*/10 + 34, // static header size + output size\n+            /*avoid_partial=*/false,\n+    };\n+\n+    {\n+        // #########################################################\n+        // 1) Insufficient funds, select all provided coins and fail\n+        // #########################################################\n+        CAmount target = 49.5L * COIN;\n+        int max_weight = 10'000; // high enough to not fail for this reason.\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 10; ++j) {\n+                add_coin(available_coins, wallet, CAmount(1 * COIN));\n+                add_coin(available_coins, wallet, CAmount(2 * COIN));\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(!res);\n+        BOOST_CHECK(util::ErrorString(res).empty()); // empty means \"insufficient funds\"\n+    }\n+\n+    {\n+        // ###########################\n+        // 2) Test max weight exceeded\n+        // ###########################\n+        CAmount target = 29.5L * COIN;\n+        int max_weight = 3000;\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 10; ++j) {\n+                add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true);\n+                add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(!res);\n+        BOOST_CHECK(util::ErrorString(res).original.find(\"The inputs size exceeds the maximum weight\") != std::string::npos);\n+    }\n+\n+    {\n+        // ###############################################################################################################\n+        // 3) Test selection when some coins surpass the max allowed weight while others not. --> must find a good solution\n+        // ################################################################################################################\n+        CAmount target = 25.33L * COIN;\n+        int max_weight = 10'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 60; ++j) { // 60 UTXO --> 19,8 BTC total --> 60 × 272 WU = 16320 WU\n+                add_coin(available_coins, wallet, CAmount(0.33 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            for (int i = 0; i < 10; i++) { // 10 UTXO --> 20 BTC total --> 10 × 272 WU = 2720 WU\n+                add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(res);\n+        // If this takes more attempts, the implementation has regressed\n+        size_t expected_attempts = 100'000;\n+        BOOST_CHECK_MESSAGE(res->GetSelectionsEvaluated() == expected_attempts, strprintf(\"Expected %i attempts, but got %i\", expected_attempts, res->GetSelectionsEvaluated()));\n+    }\n+\n+    {\n+        // #################################################################################################################\n+        // 4) Test that two less valuable UTXOs with a combined lower weight are preferred over a more valuable heavier UTXO\n+        // #################################################################################################################\n+        SelectionResult expected_result(CAmount(0), SelectionAlgorithm::CG);\n+        CAmount target =  1.9L * COIN;\n+        int max_weight = 400'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true, 148);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 68);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 68);\n+            return available_coins;\n+        });\n+        expected_result.Clear();\n+        add_coin(1 * COIN, 1, expected_result);\n+        add_coin(1 * COIN, 2, expected_result);\n+        BOOST_CHECK(EquivalentResult(expected_result, *res));\n+        // If this takes more attempts, the implementation has regressed\n+        size_t expected_attempts = 4;\n+        BOOST_CHECK_MESSAGE(res->GetSelectionsEvaluated() == expected_attempts, strprintf(\"Expected %i attempts, but got %i\", expected_attempts, res->GetSelectionsEvaluated()));\n+    }\n+\n+    {\n+        // ###############################################################################################################\n+        // 5) Test finding a solution in a UTXO pool with mixed weights\n+        // ################################################################################################################\n+        CAmount target = 30L * COIN;\n+        int max_weight = 400'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 5; ++j) {\n+                // Add heavy coins {3, 6, 9, 12, 15}\n+                add_coin(available_coins, wallet, CAmount((3 + 3 * j) * COIN), CFeeRate(5000), 144, false, 0, true, 350);\n+                // Add medium coins {2, 5, 8, 11, 14}\n+                add_coin(available_coins, wallet, CAmount((2 + 3 * j) * COIN), CFeeRate(5000), 144, false, 0, true, 250);\n+                // Add light coins {1, 4, 7, 10, 13}\n+                add_coin(available_coins, wallet, CAmount((1 + 3 * j) * COIN), CFeeRate(5000), 144, false, 0, true, 150);\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(res);\n+        // If this takes more attempts, the implementation has regressed\n+        size_t expected_attempts = 2041;\n+        BOOST_CHECK_MESSAGE(res->GetSelectionsEvaluated() == expected_attempts, strprintf(\"Expected %i attempts, but got %i\", expected_attempts, res->GetSelectionsEvaluated()));\n+    }\n+\n+    {\n+        // #################################################################################################################\n+        // 6) Test that the lightest solution among many clones is found\n+        // #################################################################################################################\n+        SelectionResult expected_result(CAmount(0), SelectionAlgorithm::CG);\n+        CAmount target =  9.9L * COIN;\n+        int max_weight = 400'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            // Expected Result: 4 + 3 + 2 + 1 = 10 BTC at 400 vB\n+            add_coin(available_coins, wallet, CAmount(4 * COIN), CFeeRate(5000), 144, false, 0, true, 100);\n+            add_coin(available_coins, wallet, CAmount(3 * COIN), CFeeRate(5000), 144, false, 0, true, 100);\n+            add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true, 100);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 100);\n+            // Distracting clones:\n+            for (int j = 0; j < 100; ++j) {\n+                add_coin(available_coins, wallet, CAmount(8 * COIN), CFeeRate(5000), 144, false, 0, true, 1000);\n+            }\n+            for (int j = 0; j < 100; ++j) {\n+                add_coin(available_coins, wallet, CAmount(7 * COIN), CFeeRate(5000), 144, false, 0, true, 800);\n+            }\n+            for (int j = 0; j < 100; ++j) {\n+                add_coin(available_coins, wallet, CAmount(6 * COIN), CFeeRate(5000), 144, false, 0, true, 600);\n+            }\n+            for (int j = 0; j < 100; ++j) {\n+                add_coin(available_coins, wallet, CAmount(5 * COIN), CFeeRate(5000), 144, false, 0, true, 400);\n+            }\n+            return available_coins;\n+        });\n+        expected_result.Clear();",
      "path": "src/wallet/test/coinselector_tests.cpp",
      "position": null,
      "original_position": 173,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "e00d908ce1091c00389f978ee07c184ca91daacd",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit: test: Add coin_grinder_tests\r\n\r\nSame as per point 5)",
      "created_at": "2024-02-01T20:35:20Z",
      "updated_at": "2024-02-01T21:22:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475116651",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475116651"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1262,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475146550",
      "pull_request_review_id": 1857527717,
      "id": 1475146550,
      "node_id": "PRRC_kwDOABII585X7PM2",
      "diff_hunk": "@@ -134,6 +135,86 @@ FUZZ_TARGET(coin_grinder)\n     }\n }\n \n+FUZZ_TARGET(coin_grinder_is_optimal)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+    CoinSelectionParams coin_params{fast_random_context};\n+    coin_params.m_subtract_fee_outputs = false;\n+    coin_params.m_effective_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};",
      "path": "src/wallet/test/fuzz/coinselection.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "e8115ac3402a1722f89f2a4e1907a7fe151622dc",
      "in_reply_to_id": 1472986777,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I had to make the following change to ensure that there is a positive effective value:\r\n\r\n```diff\r\n-        const CAmount eff_value{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(0, MAX_MONEY - max_spendable)};\r\n+        // Ensure that each UTXO has at least an effective value of 1 sat\r\n+        const CAmount eff_value{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY - max_spendable - max_output_groups + group_pos.size())};\r\n```",
      "created_at": "2024-02-01T21:03:30Z",
      "updated_at": "2024-02-01T22:02:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475146550",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475146550"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475155882",
      "pull_request_review_id": 1857527717,
      "id": 1475155882,
      "node_id": "PRRC_kwDOABII585X7Req",
      "diff_hunk": "@@ -183,6 +200,223 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n     return result;\n }\n \n+/*\n+ * Coin Grinder is a DFS-based algorithm that deterministically searches for the minimum-weight input set to fund the\n+ * transaction. The algorithm is similar to the Branch and Bound algorithm, but will produce a transaction _with_ a\n+ * change output instead of a changeless transaction.\n+ *\n+ * @param std::vector<OutputGroup>& utxo_pool The UTXOs that we are choosing from. These UTXOs will be sorted in\n+ *        descending order by effective value, with lower weight preferred as a tie-breaker. (We can think of an output\n+ *        group with multiple as a heavier UTXO with the combined amount here.)\n+ * @param const CAmount& selection_target This is the minimum amount that we need for the transaction without considering change.\n+ * @param const CAmount& change_target The minimum budget for creating a change output, by which we increase the selection_target.\n+ * @param int max_weight The maximum permitted weight for the input set.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n+ */\n+util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n+{\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending_effval_weight);\n+    // The sum of UTXO amounts after this UTXO index, e.g. lookahead[5] = Σ(UTXO[6+].amount)\n+    std::vector<CAmount> lookahead(utxo_pool.size());\n+    // The minimum UTXO weight among the remaining UTXOs after this UTXO index, e.g. min_tail_weight[5] = min(UTXO[6+].weight)\n+    std::vector<int> min_tail_weight(utxo_pool.size());\n+\n+    // Calculate lookahead values, min_tail_weights, and check that there are sufficient funds\n+    CAmount total_available = 0;\n+    int min_group_weight = std::numeric_limits<int>::max();\n+    size_t i = utxo_pool.size();\n+    while (i > 0) {\n+        --i;\n+        lookahead[i] = total_available;\n+        min_tail_weight[i] = min_group_weight;\n+        // UTXOs with non-positive effective value must have been filtered\n+        Assume(utxo_pool[i].GetSelectionAmount() > 0);\n+        total_available += utxo_pool[i].GetSelectionAmount();\n+        min_group_weight = std::min(min_group_weight, utxo_pool[i].m_weight);\n+    }\n+\n+    const CAmount total_target = selection_target + change_target;\n+    if (total_available < total_target) {\n+        // Insufficient funds\n+        return util::Error();\n+    }\n+\n+    // The current selection and the best input set found so far, stored as the utxo_pool indices of the UTXOs forming them\n+    std::vector<size_t> curr_selection;\n+    std::vector<size_t> best_selection;\n+\n+    // The currently selected effective amount, and the effective amount of the best selection so far\n+    CAmount curr_amount = 0;\n+    CAmount best_selection_amount = MAX_MONEY;\n+\n+    // The weight of the currently selected input set, and the weight of the best selection\n+    int curr_weight = 0;\n+    int best_selection_weight = max_weight; // Tie is fine, because we prefer lower selection amount\n+\n+    // Whether the input sets generated during this search have exceeded the maximum transaction weight at any point\n+    bool max_tx_weight_exceeded = false;\n+\n+    // Index of the next UTXO to consider in utxo_pool\n+    size_t next_utxo = 0;\n+\n+    /*\n+     * You can think of the current selection as a vector of booleans that has decided inclusion or exclusion of all\n+     * UTXOs before `next_utxo`. When we consider the next UTXO, we extend this hypothetical boolean vector either with\n+     * a true value if the UTXO is included or a false value if it is omitted. The equivalent state is stored more\n+     * compactly as the list of indices of the included UTXOs and the `next_utxo` index.\n+     *\n+     * We can never find a new solution by deselecting a UTXO, because we then revisit a previously evaluated\n+     * selection. Therefore, we only need to check whether we found a new solution _after adding_ a new UTXO.\n+     *\n+     * Each iteration of CoinGrinder starts by selecting the `next_utxo` and evaluating the current selection. We\n+     * use three state transitions to progress from the current selection to the next promising selection:\n+     *\n+     * - EXPLORE inclusion branch: We do not have sufficient funds, yet. Add `next_utxo` to the current selection, then\n+     *                             nominate the direct successor of the just selected UTXO as our `next_utxo` for the\n+     *                             following iteration.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: EXPLORE, next_utxo: 8\n+     *                                 Next Selection: {0, 5, 7, 8}\n+     *\n+     * - SHIFT to omission branch: Adding more UTXOs to the current selection cannot produce a solution that is better\n+     *                             than the current best, e.g. the current selection weight exceeds the max weight or\n+     *                             the current selection amount is equal to or greater than the target.\n+     *                             We designate our `next_utxo` the one after the tail of our current selection, then\n+     *                             deselect the tail of our current selection.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: SHIFT, next_utxo: 8, omit last selected: {0, 5}\n+     *                                 Next Selection: {0, 5, 8}\n+     *\n+     * - CUT entire subtree:       We have exhausted the inclusion branch for the penultimately selected UTXO, both the\n+     *                             inclusion and the omission branch of the current prefix are barren. E.g. we have\n+     *                             reached the end of the UTXO pool, so neither further EXPLORING nor SHIFTING can find\n+     *                             any solutions. We designate our `next_utxo` the one after our penultimate selected,\n+     *                             then deselect both the last and penultimate selected.\n+     *\n+     *                             Example:\n+     *                                 Current Selection: {0, 5, 7}\n+     *                                 Evaluation: CUT, next_utxo: 6, omit two last selected: {0}\n+     *                                 Next Selection: {0, 6}\n+     */\n+    auto deselect_last = [&]() {\n+        OutputGroup& utxo = utxo_pool[curr_selection.back()];\n+        curr_amount -= utxo.GetSelectionAmount();\n+        curr_weight -= utxo.m_weight;\n+        curr_selection.pop_back();\n+    };\n+\n+    SelectionResult result(selection_target, SelectionAlgorithm::CG);\n+    bool is_done = false;\n+    size_t curr_try = 0;\n+    while (!is_done) {\n+        bool should_shift{false}, should_cut{false};\n+        // Select `next_utxo`\n+        OutputGroup& utxo = utxo_pool[next_utxo];\n+        curr_amount += utxo.GetSelectionAmount();\n+        curr_weight += utxo.m_weight;\n+        curr_selection.push_back(next_utxo);\n+        ++next_utxo;\n+        ++curr_try;\n+\n+        // EVALUATE current selection: check for solutions and see whether we can CUT or SHIFT before EXPLORING further\n+        auto curr_tail = curr_selection.back();\n+        if (curr_amount + lookahead[curr_tail] < total_target) {\n+            // Insufficient funds with lookahead: CUT\n+            should_cut = true;\n+        } else if (curr_weight > best_selection_weight) {\n+            // best_selection_weight is initialized to max_weight\n+            if (curr_weight > max_weight) max_tx_weight_exceeded = true;\n+            // Worse weight than best solution. More UTXOs only increase weight:\n+            // CUT if last selected group had minimal weight, else SHIFT\n+            if (utxo_pool[curr_tail].m_weight <= min_tail_weight[curr_tail]) {\n+                should_cut = true;\n+            } else {\n+                should_shift  = true;\n+            }\n+        } else if (curr_amount >= total_target) {\n+            // Success, adding more weight cannot be better: SHIFT\n+            should_shift  = true;\n+            if (curr_weight < best_selection_weight || (curr_weight == best_selection_weight && curr_amount < best_selection_amount)) {\n+                // New lowest weight, or same weight with fewer funds tied up\n+                best_selection = curr_selection;\n+                best_selection_weight = curr_weight;\n+                best_selection_amount = curr_amount;\n+            }\n+        } else if (!best_selection.empty() && curr_weight + min_tail_weight[curr_tail] * ((total_target - curr_amount) / utxo_pool[curr_tail].GetSelectionAmount()) > best_selection_weight) {\n+            // Compare minimal tail weight and last selected amount with the amount missing to gauge whether a better weight is still possible.\n+            if (utxo_pool[curr_tail].m_weight <= min_tail_weight[curr_tail]) {\n+                should_cut = true;\n+            } else {\n+                should_shift = true;\n+            }\n+        }\n+\n+        if (curr_try >= TOTAL_TRIES) {\n+            // Solution is not guaranteed to be optimal if `curr_try` hit TOTAL_TRIES\n+            result.SetSelectionsEvaluated(curr_try);\n+            result.SetAlgoCompleted(false);\n+            break;\n+        }\n+\n+        if (next_utxo == utxo_pool.size()) {\n+            // Last added UTXO was end of UTXO pool, nothing left to add on inclusion or omission branch: CUT\n+            should_cut = true;\n+        }\n+\n+        if (should_cut) {\n+            // Neither adding to the current selection nor exploring the omission branch of the last selected UTXO can\n+            // find any solutions. Redirect to exploring Omission branch of the penultimate selected UTXO (i.e. deselect\n+            // last selected UTXO, then SHIFT)\n+            should_cut = false;\n+            deselect_last();\n+            should_shift  = true;\n+        }\n+\n+        while (should_shift) {\n+            // Set `next_utxo` to one after last selected, then deselect last selected UTXO\n+            if (curr_selection.empty()) {\n+                // Exhausted search space before running into attempt limit\n+                is_done = true;\n+                result.SetSelectionsEvaluated(curr_try);\n+                result.SetAlgoCompleted(true);\n+                break;\n+            }\n+            next_utxo = curr_selection.back() + 1;\n+            deselect_last();\n+            should_shift  = false;\n+\n+            // After SHIFTing to an omission branch, the `next_utxo` might have the same value and same weight as the",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 233,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "ab7eaaa98bc29bafb96cda2d391e9a7ab16ccac7",
      "in_reply_to_id": 1475072896,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Instead of comparing fees, I’m comparing weights here now. I’ll also add a commit to skip larger weights after tie-breaking the sort order with the weight.",
      "created_at": "2024-02-01T21:13:15Z",
      "updated_at": "2024-02-01T22:02:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475155882",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475155882"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 392,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475157115",
      "pull_request_review_id": 1857573521,
      "id": 1475157115,
      "node_id": "PRRC_kwDOABII585X7Rx7",
      "diff_hunk": "@@ -204,13 +204,18 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n {\n     std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    // The sum of UTXO amounts after this UTXO index, e.g. lookahead[5] = Σ(UTXO[6+].amount)\n+    std::vector<CAmount> lookahead(utxo_pool.size());\n \n-    // Check that there are sufficient funds\n+    // Calculate lookahead values, and check that there are sufficient funds\n     CAmount total_available = 0;\n-    for (const OutputGroup& utxo : utxo_pool) {\n-        // Assert UTXOs with non-positive effective value have been filtered\n-        Assume(utxo.GetSelectionAmount() > 0);\n-        total_available += utxo.GetSelectionAmount();\n+    size_t i = utxo_pool.size();\n+    while (i > 0) {",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "b441b2cc02c4a72bcee32fc4083f1de3be17509e",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In opt: Track remaining effective_value in lookahead:\r\n\r\nI wonder why this gets turned into a descending while loop instead of a descending for loop. Given the total number of iterations is known beforehand a for seems best suited (plus the scope of the counter is reduced to to scope of the loop)",
      "created_at": "2024-02-01T21:14:41Z",
      "updated_at": "2024-02-01T21:22:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475157115",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475157115"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 213,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475162152",
      "pull_request_review_id": 1857573521,
      "id": 1475162152,
      "node_id": "PRRC_kwDOABII585X7TAo",
      "diff_hunk": "@@ -1269,6 +1270,33 @@ BOOST_AUTO_TEST_CASE(coin_grinder_tests)\n         size_t expected_attempts = 42;\n         BOOST_CHECK_MESSAGE(res->GetSelectionsEvaluated() == expected_attempts, strprintf(\"Expected %i attempts, but got %i\", expected_attempts, res->GetSelectionsEvaluated()));\n     }\n+\n+    {\n+        // #################################################################################################################\n+        // 7) Lots of tiny UTXOs of different amounts quickly exhausts the search attempts\n+        // #################################################################################################################\n+        SelectionResult expected_result(CAmount(0), SelectionAlgorithm::CG);\n+        CAmount target =  1.9L * COIN;\n+        int max_weight = 40000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            add_coin(available_coins, wallet, CAmount(1.8 * COIN), CFeeRate(5000), 144, false, 0, true, 2500);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 1000);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 1000);\n+            for (int j = 0; j < 100; ++j) {\n+                // make a 100 unique coins only differing by one sat\n+                add_coin(available_coins, wallet, CAmount(0.01 * COIN + j), CFeeRate(5000), 144, false, 0, true, 110);\n+            }\n+            return available_coins;\n+        });\n+        expected_result.Clear();",
      "path": "src/wallet/test/coinselector_tests.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "89465b0551ea6001c69a3dd78957b4033b056bdd",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in test: Exhaust search attempts with tiny UTXOs:\r\n\r\nSame as for cases 5) and 6), clearing is not needed",
      "created_at": "2024-02-01T21:19:34Z",
      "updated_at": "2024-02-01T21:22:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475162152",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475162152"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1292,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475183696",
      "pull_request_review_id": 1857527717,
      "id": 1475183696,
      "node_id": "PRRC_kwDOABII585X7YRQ",
      "diff_hunk": "@@ -1090,6 +1090,187 @@ BOOST_AUTO_TEST_CASE(effective_value_test)\n     BOOST_CHECK_EQUAL(output5.GetEffectiveValue(), nValue); // The effective value should be equal to the absolute value if input_bytes is -1\n }\n \n+static util::Result<SelectionResult> CoinGrinder(const CAmount& target,\n+                                                    const CoinSelectionParams& cs_params,\n+                                                    const node::NodeContext& m_node,\n+                                                    int max_weight,\n+                                                    std::function<CoinsResult(CWallet&)> coin_setup)\n+{\n+    std::unique_ptr<CWallet> wallet = NewWallet(m_node);\n+    CoinEligibilityFilter filter(0, 0, 0); // accept all coins without ancestors\n+    Groups group = GroupOutputs(*wallet, coin_setup(*wallet), cs_params, {{filter}})[filter].all_groups;\n+    return CoinGrinder(group.positive_group, target, cs_params.m_min_change_target, max_weight);\n+}\n+\n+BOOST_AUTO_TEST_CASE(coin_grinder_tests)\n+{\n+    // Test Coin Grinder:\n+    // 1) Insufficient funds, select all provided coins and fail.\n+    // 2) Exceeded max weight, coin selection always surpasses the max allowed weight.\n+    // 3) Select coins without surpassing the max weight (some coins surpasses the max allowed weight, some others not)\n+    // 4) Test that two less valuable UTXOs with a combined lower weight are preferred over a more valuable heavier UTXO\n+    // 5) Test finding a solution in a UTXO pool with mixed weights\n+    // 6) Test that the lightest solution among many clones is found\n+\n+    FastRandomContext rand;\n+    CoinSelectionParams dummy_params{ // Only used to provide the 'avoid_partial' flag.\n+            rand,\n+            /*change_output_size=*/34,\n+            /*change_spend_size=*/68,\n+            /*min_change_target=*/CENT,\n+            /*effective_feerate=*/CFeeRate(5000),\n+            /*long_term_feerate=*/CFeeRate(2000),\n+            /*discard_feerate=*/CFeeRate(1000),\n+            /*tx_noinputs_size=*/10 + 34, // static header size + output size\n+            /*avoid_partial=*/false,\n+    };\n+\n+    {\n+        // #########################################################\n+        // 1) Insufficient funds, select all provided coins and fail\n+        // #########################################################\n+        CAmount target = 49.5L * COIN;\n+        int max_weight = 10'000; // high enough to not fail for this reason.\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 10; ++j) {\n+                add_coin(available_coins, wallet, CAmount(1 * COIN));\n+                add_coin(available_coins, wallet, CAmount(2 * COIN));\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(!res);\n+        BOOST_CHECK(util::ErrorString(res).empty()); // empty means \"insufficient funds\"\n+    }\n+\n+    {\n+        // ###########################\n+        // 2) Test max weight exceeded\n+        // ###########################\n+        CAmount target = 29.5L * COIN;\n+        int max_weight = 3000;\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 10; ++j) {\n+                add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true);\n+                add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(!res);\n+        BOOST_CHECK(util::ErrorString(res).original.find(\"The inputs size exceeds the maximum weight\") != std::string::npos);\n+    }\n+\n+    {\n+        // ###############################################################################################################\n+        // 3) Test selection when some coins surpass the max allowed weight while others not. --> must find a good solution\n+        // ################################################################################################################\n+        CAmount target = 25.33L * COIN;\n+        int max_weight = 10'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 60; ++j) { // 60 UTXO --> 19,8 BTC total --> 60 × 272 WU = 16320 WU\n+                add_coin(available_coins, wallet, CAmount(0.33 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            for (int i = 0; i < 10; i++) { // 10 UTXO --> 20 BTC total --> 10 × 272 WU = 2720 WU\n+                add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(res);\n+        // If this takes more attempts, the implementation has regressed\n+        size_t expected_attempts = 100'000;\n+        BOOST_CHECK_MESSAGE(res->GetSelectionsEvaluated() == expected_attempts, strprintf(\"Expected %i attempts, but got %i\", expected_attempts, res->GetSelectionsEvaluated()));\n+    }\n+\n+    {\n+        // #################################################################################################################\n+        // 4) Test that two less valuable UTXOs with a combined lower weight are preferred over a more valuable heavier UTXO\n+        // #################################################################################################################\n+        SelectionResult expected_result(CAmount(0), SelectionAlgorithm::CG);\n+        CAmount target =  1.9L * COIN;\n+        int max_weight = 400'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true, 148);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 68);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 68);\n+            return available_coins;\n+        });\n+        expected_result.Clear();",
      "path": "src/wallet/test/coinselector_tests.cpp",
      "position": null,
      "original_position": 111,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "e00d908ce1091c00389f978ee07c184ca91daacd",
      "in_reply_to_id": 1475114260,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yep, moved declaration down there.",
      "created_at": "2024-02-01T21:38:12Z",
      "updated_at": "2024-02-01T22:02:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475183696",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475183696"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1200,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475183856",
      "pull_request_review_id": 1857527717,
      "id": 1475183856,
      "node_id": "PRRC_kwDOABII585X7YTw",
      "diff_hunk": "@@ -1090,6 +1090,187 @@ BOOST_AUTO_TEST_CASE(effective_value_test)\n     BOOST_CHECK_EQUAL(output5.GetEffectiveValue(), nValue); // The effective value should be equal to the absolute value if input_bytes is -1\n }\n \n+static util::Result<SelectionResult> CoinGrinder(const CAmount& target,\n+                                                    const CoinSelectionParams& cs_params,\n+                                                    const node::NodeContext& m_node,\n+                                                    int max_weight,\n+                                                    std::function<CoinsResult(CWallet&)> coin_setup)\n+{\n+    std::unique_ptr<CWallet> wallet = NewWallet(m_node);\n+    CoinEligibilityFilter filter(0, 0, 0); // accept all coins without ancestors\n+    Groups group = GroupOutputs(*wallet, coin_setup(*wallet), cs_params, {{filter}})[filter].all_groups;\n+    return CoinGrinder(group.positive_group, target, cs_params.m_min_change_target, max_weight);\n+}\n+\n+BOOST_AUTO_TEST_CASE(coin_grinder_tests)\n+{\n+    // Test Coin Grinder:\n+    // 1) Insufficient funds, select all provided coins and fail.\n+    // 2) Exceeded max weight, coin selection always surpasses the max allowed weight.\n+    // 3) Select coins without surpassing the max weight (some coins surpasses the max allowed weight, some others not)\n+    // 4) Test that two less valuable UTXOs with a combined lower weight are preferred over a more valuable heavier UTXO\n+    // 5) Test finding a solution in a UTXO pool with mixed weights\n+    // 6) Test that the lightest solution among many clones is found\n+\n+    FastRandomContext rand;\n+    CoinSelectionParams dummy_params{ // Only used to provide the 'avoid_partial' flag.\n+            rand,\n+            /*change_output_size=*/34,\n+            /*change_spend_size=*/68,\n+            /*min_change_target=*/CENT,\n+            /*effective_feerate=*/CFeeRate(5000),\n+            /*long_term_feerate=*/CFeeRate(2000),\n+            /*discard_feerate=*/CFeeRate(1000),\n+            /*tx_noinputs_size=*/10 + 34, // static header size + output size\n+            /*avoid_partial=*/false,\n+    };\n+\n+    {\n+        // #########################################################\n+        // 1) Insufficient funds, select all provided coins and fail\n+        // #########################################################\n+        CAmount target = 49.5L * COIN;\n+        int max_weight = 10'000; // high enough to not fail for this reason.\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 10; ++j) {\n+                add_coin(available_coins, wallet, CAmount(1 * COIN));\n+                add_coin(available_coins, wallet, CAmount(2 * COIN));\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(!res);\n+        BOOST_CHECK(util::ErrorString(res).empty()); // empty means \"insufficient funds\"\n+    }\n+\n+    {\n+        // ###########################\n+        // 2) Test max weight exceeded\n+        // ###########################\n+        CAmount target = 29.5L * COIN;\n+        int max_weight = 3000;\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 10; ++j) {\n+                add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true);\n+                add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(!res);\n+        BOOST_CHECK(util::ErrorString(res).original.find(\"The inputs size exceeds the maximum weight\") != std::string::npos);\n+    }\n+\n+    {\n+        // ###############################################################################################################\n+        // 3) Test selection when some coins surpass the max allowed weight while others not. --> must find a good solution\n+        // ################################################################################################################\n+        CAmount target = 25.33L * COIN;\n+        int max_weight = 10'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 60; ++j) { // 60 UTXO --> 19,8 BTC total --> 60 × 272 WU = 16320 WU\n+                add_coin(available_coins, wallet, CAmount(0.33 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            for (int i = 0; i < 10; i++) { // 10 UTXO --> 20 BTC total --> 10 × 272 WU = 2720 WU\n+                add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true);\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(res);\n+        // If this takes more attempts, the implementation has regressed\n+        size_t expected_attempts = 100'000;\n+        BOOST_CHECK_MESSAGE(res->GetSelectionsEvaluated() == expected_attempts, strprintf(\"Expected %i attempts, but got %i\", expected_attempts, res->GetSelectionsEvaluated()));\n+    }\n+\n+    {\n+        // #################################################################################################################\n+        // 4) Test that two less valuable UTXOs with a combined lower weight are preferred over a more valuable heavier UTXO\n+        // #################################################################################################################\n+        SelectionResult expected_result(CAmount(0), SelectionAlgorithm::CG);\n+        CAmount target =  1.9L * COIN;\n+        int max_weight = 400'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true, 148);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 68);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 68);\n+            return available_coins;\n+        });\n+        expected_result.Clear();\n+        add_coin(1 * COIN, 1, expected_result);\n+        add_coin(1 * COIN, 2, expected_result);\n+        BOOST_CHECK(EquivalentResult(expected_result, *res));\n+        // If this takes more attempts, the implementation has regressed\n+        size_t expected_attempts = 4;\n+        BOOST_CHECK_MESSAGE(res->GetSelectionsEvaluated() == expected_attempts, strprintf(\"Expected %i attempts, but got %i\", expected_attempts, res->GetSelectionsEvaluated()));\n+    }\n+\n+    {\n+        // ###############################################################################################################\n+        // 5) Test finding a solution in a UTXO pool with mixed weights\n+        // ################################################################################################################\n+        CAmount target = 30L * COIN;\n+        int max_weight = 400'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            for (int j = 0; j < 5; ++j) {\n+                // Add heavy coins {3, 6, 9, 12, 15}\n+                add_coin(available_coins, wallet, CAmount((3 + 3 * j) * COIN), CFeeRate(5000), 144, false, 0, true, 350);\n+                // Add medium coins {2, 5, 8, 11, 14}\n+                add_coin(available_coins, wallet, CAmount((2 + 3 * j) * COIN), CFeeRate(5000), 144, false, 0, true, 250);\n+                // Add light coins {1, 4, 7, 10, 13}\n+                add_coin(available_coins, wallet, CAmount((1 + 3 * j) * COIN), CFeeRate(5000), 144, false, 0, true, 150);\n+            }\n+            return available_coins;\n+        });\n+        BOOST_CHECK(res);\n+        // If this takes more attempts, the implementation has regressed\n+        size_t expected_attempts = 2041;\n+        BOOST_CHECK_MESSAGE(res->GetSelectionsEvaluated() == expected_attempts, strprintf(\"Expected %i attempts, but got %i\", expected_attempts, res->GetSelectionsEvaluated()));\n+    }\n+\n+    {\n+        // #################################################################################################################\n+        // 6) Test that the lightest solution among many clones is found\n+        // #################################################################################################################\n+        SelectionResult expected_result(CAmount(0), SelectionAlgorithm::CG);\n+        CAmount target =  9.9L * COIN;\n+        int max_weight = 400'000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            // Expected Result: 4 + 3 + 2 + 1 = 10 BTC at 400 vB\n+            add_coin(available_coins, wallet, CAmount(4 * COIN), CFeeRate(5000), 144, false, 0, true, 100);\n+            add_coin(available_coins, wallet, CAmount(3 * COIN), CFeeRate(5000), 144, false, 0, true, 100);\n+            add_coin(available_coins, wallet, CAmount(2 * COIN), CFeeRate(5000), 144, false, 0, true, 100);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 100);\n+            // Distracting clones:\n+            for (int j = 0; j < 100; ++j) {\n+                add_coin(available_coins, wallet, CAmount(8 * COIN), CFeeRate(5000), 144, false, 0, true, 1000);\n+            }\n+            for (int j = 0; j < 100; ++j) {\n+                add_coin(available_coins, wallet, CAmount(7 * COIN), CFeeRate(5000), 144, false, 0, true, 800);\n+            }\n+            for (int j = 0; j < 100; ++j) {\n+                add_coin(available_coins, wallet, CAmount(6 * COIN), CFeeRate(5000), 144, false, 0, true, 600);\n+            }\n+            for (int j = 0; j < 100; ++j) {\n+                add_coin(available_coins, wallet, CAmount(5 * COIN), CFeeRate(5000), 144, false, 0, true, 400);\n+            }\n+            return available_coins;\n+        });\n+        expected_result.Clear();",
      "path": "src/wallet/test/coinselector_tests.cpp",
      "position": null,
      "original_position": 173,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "e00d908ce1091c00389f978ee07c184ca91daacd",
      "in_reply_to_id": 1475116651,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-02-01T21:38:22Z",
      "updated_at": "2024-02-01T22:02:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475183856",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475183856"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1262,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475198825",
      "pull_request_review_id": 1857527717,
      "id": 1475198825,
      "node_id": "PRRC_kwDOABII585X7b9p",
      "diff_hunk": "@@ -204,13 +204,18 @@ util::Result<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool\n util::Result<SelectionResult> CoinGrinder(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, CAmount change_target, int max_weight)\n {\n     std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    // The sum of UTXO amounts after this UTXO index, e.g. lookahead[5] = Σ(UTXO[6+].amount)\n+    std::vector<CAmount> lookahead(utxo_pool.size());\n \n-    // Check that there are sufficient funds\n+    // Calculate lookahead values, and check that there are sufficient funds\n     CAmount total_available = 0;\n-    for (const OutputGroup& utxo : utxo_pool) {\n-        // Assert UTXOs with non-positive effective value have been filtered\n-        Assume(utxo.GetSelectionAmount() > 0);\n-        total_available += utxo.GetSelectionAmount();\n+    size_t i = utxo_pool.size();\n+    while (i > 0) {",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "b441b2cc02c4a72bcee32fc4083f1de3be17509e",
      "in_reply_to_id": 1475157115,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sure, replaced with:\r\n\r\n```diff\r\n-    size_t i = utxo_pool.size();\r\n-    while (i > 0) {\r\n-        --i;\r\n+    for (int i = utxo_pool.size() - 1 ; i >= 0; --i) {\r\n```",
      "created_at": "2024-02-01T21:51:41Z",
      "updated_at": "2024-02-01T22:02:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475198825",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475198825"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 213,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475202681",
      "pull_request_review_id": 1857527717,
      "id": 1475202681,
      "node_id": "PRRC_kwDOABII585X7c55",
      "diff_hunk": "@@ -1269,6 +1270,33 @@ BOOST_AUTO_TEST_CASE(coin_grinder_tests)\n         size_t expected_attempts = 42;\n         BOOST_CHECK_MESSAGE(res->GetSelectionsEvaluated() == expected_attempts, strprintf(\"Expected %i attempts, but got %i\", expected_attempts, res->GetSelectionsEvaluated()));\n     }\n+\n+    {\n+        // #################################################################################################################\n+        // 7) Lots of tiny UTXOs of different amounts quickly exhausts the search attempts\n+        // #################################################################################################################\n+        SelectionResult expected_result(CAmount(0), SelectionAlgorithm::CG);\n+        CAmount target =  1.9L * COIN;\n+        int max_weight = 40000; // WU\n+        const auto& res = CoinGrinder(target, dummy_params, m_node, max_weight, [&](CWallet& wallet) {\n+            CoinsResult available_coins;\n+            add_coin(available_coins, wallet, CAmount(1.8 * COIN), CFeeRate(5000), 144, false, 0, true, 2500);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 1000);\n+            add_coin(available_coins, wallet, CAmount(1 * COIN), CFeeRate(5000), 144, false, 0, true, 1000);\n+            for (int j = 0; j < 100; ++j) {\n+                // make a 100 unique coins only differing by one sat\n+                add_coin(available_coins, wallet, CAmount(0.01 * COIN + j), CFeeRate(5000), 144, false, 0, true, 110);\n+            }\n+            return available_coins;\n+        });\n+        expected_result.Clear();",
      "path": "src/wallet/test/coinselector_tests.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "ee6ff57bec959a0887202b5fa44bd339bec3bbaf",
      "original_commit_id": "89465b0551ea6001c69a3dd78957b4033b056bdd",
      "in_reply_to_id": 1475162152,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Absolutely. Fixed.",
      "created_at": "2024-02-01T21:55:20Z",
      "updated_at": "2024-02-01T22:02:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27877#discussion_r1475202681",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1475202681"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27877"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1292,
      "side": "RIGHT"
    }
  ]
}