{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708",
    "id": 2035561350,
    "node_id": "PR_kwDOABII5855VDOG",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/30708",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/30708.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/30708.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30708",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30708/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
    "number": 30708,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "rpc: add getdescriptoractivity",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The RPC command `scanblocks` provides a useful way to get a set of blockhashes that have activity relevant to a set of descriptors (`relevant_blocks`). However actually extracting the activity from those blocks is left as an exercise to the end user. \r\n\r\nThis process involves not only generating the (potentially ranged) set of scripts for the descriptor set on the client side (maybe via `deriveaddresses`), but then the user must retrieve each block's contents one-by-one using `getblock <hash>`, which is transmitted over a network link. And that's all before they perform the actual search over block content. There's even more work required to incorporate unconfirmed transactions.\r\n\r\nThis PR introduces an RPC `getdescriptoractivity` that [dovetails](https://bitcoin-irc.chaincode.com/bitcoin-core-dev/2024-08-16#1046393;) with `scanblocks` output, handling the process described above. Users specify the blockhashes (perhaps from `relevant_blocks`) and a set of descriptors; they are then given all spend/receive activity in that set of blocks.\r\n\r\nThis is a very useful tool when implementing lightweight wallets that want neither to require a third-party indexer like electrs, nor the overhead of creating and managing watch-only wallets in Core. This allows Core to be more easily used in a \"stateless\" manner by wallets, with potentially many nodes interchangeably acting as backends.\r\n\r\n### Example usage\r\n\r\n```\r\n% ./src/bitcoin-cli scanblocks start \\\r\n    '[\"addr(bc1p0cp0vyag6snlta2l7c4am3rue7eef9f72l7uhx52m4v27vfydx9s8tfs7t)\"]' \\\r\n    857263\r\n{\r\n  \"from_height\": 857263,\r\n  \"to_height\": 858263,\r\n  \"relevant_blocks\": [\r\n    \"00000000000000000002bc5cc78f5b0913a5230a8f4b0d5060bc9a60900a5a88\",\r\n    \"00000000000000000001c5291ed6a40c06d3db5c8fb738567654b24a14b24ecb\"\r\n  ],\r\n  \"completed\": true\r\n}\r\n\r\n\r\n% ./src/bitcoin-cli getdescriptoractivity \\\r\n    '[\"00000000000000000002bc5cc78f5b0913a5230a8f4b0d5060bc9a60900a5a88\", \"00000000000000000001c5291ed6a40c06d3db5c8fb738567654b24a14b24ecb\"]' \\\r\n    '[\"addr(bc1p0cp0vyag6snlta2l7c4am3rue7eef9f72l7uhx52m4v27vfydx9s8tfs7t)\"]'\r\n{\r\n  \"activity\": [\r\n    {\r\n      \"type\": \"receive\",\r\n      \"address\": \"bc1p0cp0vyag6snlta2l7c4am3rue7eef9f72l7uhx52m4v27vfydx9s8tfs7t\",\r\n      \"desc\": \"rawtr(7e02f613a8d427f5f55ff62bddc47ccfb394953e57fdcb9a8add58af3124698b)#yewcd80j\",\r\n      \"amount\": 0.00002900,\r\n      \"blockhash\": \"00000000000000000002bc5cc78f5b0913a5230a8f4b0d5060bc9a60900a5a88\",\r\n      \"height\": 857907,\r\n      \"txid\": \"c9d34f202c1f66d80cae76f305350f5fdde910b97cf6ae6bf79f5bcf2a337d06\",\r\n      \"vout\": 254\r\n    },\r\n    {\r\n      \"type\": \"spend\",\r\n      \"address\": \"bc1p0cp0vyag6snlta2l7c4am3rue7eef9f72l7uhx52m4v27vfydx9s8tfs7t\",\r\n      \"desc\": \"rawtr(7e02f613a8d427f5f55ff62bddc47ccfb394953e57fdcb9a8add58af3124698b)#yewcd80j\",\r\n      \"amount\": 0.00002900,\r\n      \"blockhash\": \"00000000000000000001c5291ed6a40c06d3db5c8fb738567654b24a14b24ecb\",\r\n      \"height\": 857907,\r\n      \"spend_txid\": \"7f61d1b248d4ee46376f9c6df272f63fbb0c17039381fb23ca5d90473b823c36\",\r\n      \"spend_vin\": 0,\r\n      \"prevout_txid\": \"c9d34f202c1f66d80cae76f305350f5fdde910b97cf6ae6bf79f5bcf2a337d06\",\r\n      \"prevout_vout\": 254\r\n    }\r\n  ]\r\n}\r\n```\r\n",
    "labels": [
      {
        "id": 98279177,
        "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
        "name": "RPC/REST/ZMQ",
        "color": "0052cc",
        "default": false
      }
    ],
    "created_at": "2024-08-24T16:25:59Z",
    "updated_at": "2024-09-19T14:32:12Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "ca0dbf117970f43b20290ab9fbc4ada4b2d6f55d",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "danielabrozzoni",
        "id": 25042473,
        "node_id": "MDQ6VXNlcjI1MDQyNDcz",
        "avatar_url": "https://avatars.githubusercontent.com/u/25042473?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/danielabrozzoni",
        "html_url": "https://github.com/danielabrozzoni",
        "followers_url": "https://api.github.com/users/danielabrozzoni/followers",
        "following_url": "https://api.github.com/users/danielabrozzoni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/danielabrozzoni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/danielabrozzoni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/danielabrozzoni/subscriptions",
        "organizations_url": "https://api.github.com/users/danielabrozzoni/orgs",
        "repos_url": "https://api.github.com/users/danielabrozzoni/repos",
        "events_url": "https://api.github.com/users/danielabrozzoni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/danielabrozzoni/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "pablomartin4btc",
        "id": 110166421,
        "node_id": "U_kgDOBpEBlQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/110166421?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pablomartin4btc",
        "html_url": "https://github.com/pablomartin4btc",
        "followers_url": "https://api.github.com/users/pablomartin4btc/followers",
        "following_url": "https://api.github.com/users/pablomartin4btc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pablomartin4btc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pablomartin4btc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pablomartin4btc/subscriptions",
        "organizations_url": "https://api.github.com/users/pablomartin4btc/orgs",
        "repos_url": "https://api.github.com/users/pablomartin4btc/repos",
        "events_url": "https://api.github.com/users/pablomartin4btc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pablomartin4btc/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "jamesob:2024-08-getdescriptoractivity",
      "ref": "2024-08-getdescriptoractivity",
      "sha": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 42077031,
        "node_id": "MDEwOlJlcG9zaXRvcnk0MjA3NzAzMQ==",
        "name": "bitcoin",
        "full_name": "jamesob/bitcoin",
        "owner": {
          "login": "jamesob",
          "id": 73197,
          "node_id": "MDQ6VXNlcjczMTk3",
          "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jamesob",
          "html_url": "https://github.com/jamesob",
          "followers_url": "https://api.github.com/users/jamesob/followers",
          "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
          "organizations_url": "https://api.github.com/users/jamesob/orgs",
          "repos_url": "https://api.github.com/users/jamesob/repos",
          "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/jamesob/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/jamesob/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/jamesob/bitcoin",
        "archive_url": "https://api.github.com/repos/jamesob/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/jamesob/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/jamesob/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/jamesob/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/jamesob/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/jamesob/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/jamesob/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/jamesob/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/jamesob/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/jamesob/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/jamesob/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/jamesob/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/jamesob/bitcoin/events",
        "forks_url": "https://api.github.com/repos/jamesob/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/jamesob/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/jamesob/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/jamesob/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/jamesob/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/jamesob/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/jamesob/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/jamesob/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/jamesob/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/jamesob/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/jamesob/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/jamesob/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/jamesob/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/jamesob/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/jamesob/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/jamesob/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:jamesob/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/jamesob/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/jamesob/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/jamesob/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/jamesob/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/jamesob/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/jamesob/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/jamesob/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/jamesob/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/jamesob/bitcoin/hooks",
        "svn_url": "https://github.com/jamesob/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 3,
        "stargazers_count": 5,
        "watchers_count": 5,
        "size": 287795,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-09-14T15:45:24Z",
        "created_at": "2015-09-07T22:18:03Z",
        "updated_at": "2024-03-26T20:20:47Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "0c4ff18ee9ec91b424ad26d2643e42566aa45e40",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36170,
        "stargazers_count": 78454,
        "watchers_count": 78454,
        "size": 268828,
        "default_branch": "master",
        "open_issues_count": 649,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-09-19T11:17:22Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-09-19T13:02:39Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 410,
    "deletions": 0,
    "changed_files": 8,
    "commits": 1,
    "review_comments": 19,
    "comments": 8
  },
  "events": [
    {
      "event": "commented",
      "id": 2308447341,
      "node_id": "IC_kwDOABII586JmBxt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2308447341",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-24T16:26:03Z",
      "updated_at": "2024-09-19T02:23:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/30708).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [tdb3](https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2314225218) |\n| Concept ACK | [danielabrozzoni](https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2269094650), [pablomartin4btc](https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2278000353) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#issuecomment-2308447341",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30708"
    },
    {
      "event": "labeled",
      "id": 14001772317,
      "node_id": "LE_lADOABII586UGZ_mzwAAAANCkhcd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14001772317",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-24T16:26:05Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "reviewed",
      "id": 2258846712,
      "node_id": "PRR_kwDOABII586Go0P4",
      "url": null,
      "actor": null,
      "commit_id": "d7fe20d068dc9d37381a45b66206ad58f5ca7e53",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nThank you.  This seems to be a great way to simplify the chain of RPC commands needed to obtain targeted transaction history.\r\n\r\nThought about a potential alternative that updates/enhances `scanblocks` instead of adding a new RPC (with the advantage of not needing to provide block hashes). Adding `getdescriptoractivity` seems like a better solution, since it avoids breaking RPC compatibility. Carrying block hashes from `scanblocks` to `getdescriptoractivity` seems like a reasonably price to pay for compatibility.",
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2258846712",
      "submitted_at": "2024-08-24T18:26:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "labeled",
      "id": 14002055569,
      "node_id": "LE_lADOABII586UGZ_mzwAAAANClmmR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14002055569",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-24T18:47:38Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2308493309,
      "node_id": "IC_kwDOABII586JmM_9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2308493309",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-24T18:47:39Z",
      "updated_at": "2024-08-24T18:47:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/29204025345</sub>\n\n<details><summary>Hints</summary>\n\nMake sure to run all tests locally, according to the documentation.\n\nThe failure may happen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#issuecomment-2308493309",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30708"
    },
    {
      "event": "commented",
      "id": 2308521018,
      "node_id": "IC_kwDOABII586JmTw6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2308521018",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-24T19:58:13Z",
      "updated_at": "2024-08-24T19:58:13Z",
      "author_association": "MEMBER",
      "body": "> Thought about a potential alternative that updates/enhances `scanblocks` instead of adding a new RPC (with the advantage of not needing to provide block hashes). Adding `getdescriptoractivity` seems like a better solution, since it avoids breaking RPC compatibility. Carrying block hashes from `scanblocks` to `getdescriptoractivity` seems like a reasonably price to pay for compatibility.\r\n\r\nI thought about this initially and I think it's probably worth doing at some point via an additional `with_activity` parameter or something. The code here could be factored out and reused. But ultimately I think it's good to have a separate RPC command. \r\n\r\nOne possibility (that is probably more valuable) is to add an incremental `relevant_blocks` key to `scanblocks status` output, so that the client can begin calling `getdescriptoractivity` progressively as results roll in but before the entire scan is finished.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#issuecomment-2308521018",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30708"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14002247294,
      "node_id": "HRFPE_lADOABII586UGZ_mzwAAAANCmVZ-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14002247294",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-24T20:11:41Z"
    },
    {
      "event": "reviewed",
      "id": 2258968029,
      "node_id": "PRR_kwDOABII586GpR3d",
      "url": null,
      "actor": null,
      "commit_id": "c3cdf11a576fd9549a9cc3326dc93cd84e47db39",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2258968029",
      "submitted_at": "2024-08-24T21:15:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14003038763,
      "node_id": "HRFPE_lADOABII586UGZ_mzwAAAANCpWor",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14003038763",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-25T03:08:56Z"
    },
    {
      "event": "commented",
      "id": 2308842097,
      "node_id": "IC_kwDOABII586JniJx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2308842097",
      "actor": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-25T13:30:58Z",
      "updated_at": "2024-08-25T13:30:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "> One possibility (that is probably more valuable) is to add an incremental `relevant_blocks` key to `scanblocks status` output, so that the client can begin calling `getdescriptoractivity` progressively as results roll in but before the entire scan is finished.\r\n\r\nGreat idea.  Created an initial draft PR #30713\r\n",
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#issuecomment-2308842097",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30708"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14016603515,
      "node_id": "HRFPE_lADOABII586UGZ_mzwAAAANDdGV7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14016603515",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-26T17:23:17Z"
    },
    {
      "event": "unlabeled",
      "id": 14017409805,
      "node_id": "UNLE_lADOABII586UGZ_mzwAAAANDgLMN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14017409805",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-26T18:34:38Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2269094650,
      "node_id": "PRR_kwDOABII586HP6L6",
      "url": null,
      "actor": null,
      "commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nThis would greatly simplify the `scanblock` UX and allow for scanning activity in the mempool.\r\n\r\nI think either a `with_activity` parameter in `scanblocks` or a new `getdescriptoractivity` RPC command would be a good solution. I prefer the former, as the user would only have to wait for one (potentially slow) RPC call instead of two. However, if we go with it, it would be useful to add either a `include_mempool` parameter to `scanblocks`, or add a `scanmempool` command.",
      "user": {
        "login": "danielabrozzoni",
        "id": 25042473,
        "node_id": "MDQ6VXNlcjI1MDQyNDcz",
        "avatar_url": "https://avatars.githubusercontent.com/u/25042473?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/danielabrozzoni",
        "html_url": "https://github.com/danielabrozzoni",
        "followers_url": "https://api.github.com/users/danielabrozzoni/followers",
        "following_url": "https://api.github.com/users/danielabrozzoni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/danielabrozzoni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/danielabrozzoni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/danielabrozzoni/subscriptions",
        "organizations_url": "https://api.github.com/users/danielabrozzoni/orgs",
        "repos_url": "https://api.github.com/users/danielabrozzoni/repos",
        "events_url": "https://api.github.com/users/danielabrozzoni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/danielabrozzoni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2269094650",
      "submitted_at": "2024-08-29T15:01:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "commented",
      "id": 2318375038,
      "node_id": "IC_kwDOABII586KL5h-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2318375038",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-29T16:56:43Z",
      "updated_at": "2024-08-29T16:57:23Z",
      "author_association": "MEMBER",
      "body": "> I think either a `with_activity` parameter in `scanblocks` or a new `getdescriptoractivity` RPC command would be a good solution. I prefer the former, as the user would only have to wait for one (potentially slow) RPC call instead of two.\r\n\r\nThis change in conjunction with https://github.com/bitcoin/bitcoin/pull/30713 will actually allow the most rapid report of descriptor activity, since this call over just a few blockhashes is actually very fast. Results can be scanned progressively as they appear; I don't think we could get the same responsiveness using a `scanblocks [with_activity]` approach even though that would be simpler for the caller.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#issuecomment-2318375038",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30708"
    },
    {
      "event": "reviewed",
      "id": 2273389568,
      "node_id": "PRR_kwDOABII586HgSwA",
      "url": null,
      "actor": null,
      "commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "One downside of this approach compared to `scanblocks [with_activity]` is the re-parsing and re-derivation of the descriptor on each `getdescriptoractivity` call. E.g. for a ranged descriptor with default values, each command call would involve deriving 1,000 keys and generating their corresponding matching scripts, which are then added to the filter elements set to perform the membership test.\r\n\r\nOrthogonal topic:\r\nRegardless of how this is implemented, it seems we could skip the repeated work by providing the encoded elements set directly.\r\nCuriously, I implemented a command to retrieve the wallet elements set two years ago and have gathered the commits here: https://github.com/furszy/bitcoin-core/tree/2024_wallet_retrieve_needle_set. One drawback of this idea is the inability to expand the descriptor range beyond the pre-established limits during the scanning procedure (it will not expand the limit once it finds a matching script), but this may or may not be an issue depending on the external wallet architecture.\r\n     - Could move forward with it on another PR if there are some conceptual acks too -",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2273389568",
      "submitted_at": "2024-08-30T19:43:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "commented",
      "id": 2323108926,
      "node_id": "IC_kwDOABII586Kd9Q-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2323108926",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-01T01:41:56Z",
      "updated_at": "2024-09-01T01:43:09Z",
      "author_association": "MEMBER",
      "body": "> One downside of this approach compared to scanblocks [with_activity] is the re-parsing and re-derivation of the descriptor on each getdescriptoractivity call. E.g. for a ranged descriptor with default values, each command call would involve deriving 1,000 keys and generating their corresponding matching scripts, which are then added to the filter elements set to perform the membership test.\r\n\r\nHow slow is this actually, though? Some kind of bounded cache would probably fix this pretty easily if it wound up taking non-negligible time relative to the other operations for these calls, which I would expect to swamp a non-IO computation like descriptor derivation.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#issuecomment-2323108926",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30708"
    },
    {
      "event": "commented",
      "id": 2323782834,
      "node_id": "IC_kwDOABII586Kghyy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2323782834",
      "actor": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-02T04:18:17Z",
      "updated_at": "2024-09-02T04:47:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "A quick data point.  On mainnet, getting activity for 39C7fxSzEACPjM78Z7xdPxhf7mKxJwvfMJ over 200 block hashes was pretty fast.  About 2.5s (on a Zen 2 CPU and a pedestrian DRAM-less SSD).\r\n\r\n```\r\ntime src/bitcoin-cli getdescriptoractivity '[\"00000000000000000000c58c91c455930e9ebd8d463529e1f0f833a16e132a51\",\"000000000000000000014ffca17b9ec566e98e28b655cc835a0f933564b526ba\",...]' '[\"addr(39C7fxSzEACPjM78Z7xdPxhf7mKxJwvfMJ)\"]'\r\n...\r\nreal    0m2.513s\r\nuser    0m0.003s\r\nsys     0m0.006s \r\n```",
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#issuecomment-2323782834",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30708"
    },
    {
      "event": "reviewed",
      "id": 2275714079,
      "node_id": "PRR_kwDOABII586HpKQf",
      "url": null,
      "actor": null,
      "commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "> How slow is this actually, though? Some kind of bounded cache would probably fix this pretty easily if it wound up taking non-negligible time relative to the other operations for these calls, which I would expect to swamp a non-IO computation like descriptor derivation.\r\n\r\nThat was also my initial expectation but then faced stuff like https://github.com/bitcoin/bitcoin/issues/30632#issuecomment-2310966130, which takes ~4 seconds to parse + derive. And it could get worse if the user adds some templating to it (#22838).\r\n\r\nHowever, yeah.. I'm probably over-thinking this for a command that will mostly be used on standard descriptors where the parsing + derivation time is negligible.\r\n\r\nStill, for the sake of playing with it; the ~4 seconds descriptor example with some templating:\r\n```\r\n\"wsh(andor(multi(2,[a0d3c79c/48'/1'/83'/2']tpubDFGoZLGBUQDBPzYHppiNcmX8hg2BkJvaanhUUyQHQCvkbjmqvb5akMW5AQKdYxSHbkaYPZR4JMMSMF7qSW3iERxPoVKSjdttnmEvwhpDAC7/0/*,[ea2484f9/48'/1'/83'/2']tpubDEzGdYvznBEvmWDgo8aJznu74ZRcQct2d2k6VEVtcgKJvCjCVitPVTtxgAfM2Hd5QVscv2jN8AjN6Ch69NhXYiceZ7eR8Sth2Sq6UND18So/<1;2;3;4>/*,[93f245d7/48'/1'/83'/2']tpubDFhRvp2M93SFsVPyp4bMbbgRMMtAs8iW7pMAFyLoZ1tcQF7RGfHUs8xmmC7EgXcE1K5TAQwZdYC8qRGCrp4xFGgv52LmHXPi1Axq3Tzx8vB/0/*),or_i(and_v(v:pkh([61cdf766/48'/1'/83'/2']tpubDECwF5HxsawRWjXiFK5M5aEXXa5suC4bKC3d3FH1N29FxZBTsfwFP6T5MEprZT3ztQMWKVqntYVsayo5EMRDY6o583aVXHeb15wz8goBBd9/0/*),after(1753574400)),thresh(2,pk([621f3bec/48'/1'/0'/2']tpubDEXD6B4sX85AyA3WJv1rB3NnADe8EvujnudmLTY8dmdgVKyUst3R65KQqAVyxY5q5USsMh9iqgGkDMtMzfV7zvRtUhV8timsH3H37P5C4Nt/0/*),s:pk([8275bddc/48'/1'/0'/2']tpubDEfYUTvUb7XpvzxGBXxTjQd7gq6yxHaoHj14igUiQtvf8GKmNLjwwLGib5Pojn2uaYzMQzFbJm9iEcW8QWgD6EfijJYssK6gEgnBZ3DZkVu/0/*),s:pk([d715111c/48'/1'/0'/2']tpubDEzThyvXPmkRAYSJryTPfVwHTEY2hjR8oH957Nk43wGtuvpTVLMKz3hYHe5rNyXXUCy3PSYHKfv3wRnupypT2YzkaCL9yPa4ELvTSKX1GuN/0/*),snl:after(1740182400))),and_v(v:thresh(2,pkh([621f3bec/48'/1'/0'/2']tpubDEXD6B4sX85AyA3WJv1rB3NnADe8EvujnudmLTY8dmdgVKyUst3R65KQqAVyxY5q5USsMh9iqgGkDMtMzfV7zvRtUhV8timsH3H37P5C4Nt/2/*),a:pkh([8275bddc/48'/1'/0'/2']tpubDEfYUTvUb7XpvzxGBXxTjQd7gq6yxHaoHj14igUiQtvf8GKmNLjwwLGib5Pojn2uaYzMQzFbJm9iEcW8QWgD6EfijJYssK6gEgnBZ3DZkVu/2/*),a:pkh([d715111c/48'/1'/0'/2']tpubDEzThyvXPmkRAYSJryTPfVwHTEY2hjR8oH957Nk43wGtuvpTVLMKz3hYHe5rNyXXUCy3PSYHKfv3wRnupypT2YzkaCL9yPa4ELvTSKX1GuN/2/*)),after(1757462400))))\"\r\n```\r\n\r\nInformational update: this descriptor (without the templating part) comes from https://github.com/Blockstream/miniscript-templates/blob/main/mint-005.md.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2275714079",
      "submitted_at": "2024-09-02T13:49:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "reviewed",
      "id": 2278000353,
      "node_id": "PRR_kwDOABII586Hx4bh",
      "url": null,
      "actor": null,
      "commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nPerformed some light testing with the given examples from the top description.\r\n\r\nFor more complex cases/ non standard descriptors, as mentioned by @furszy, perhaps it's worth it to analyze them later at some point.",
      "user": {
        "login": "pablomartin4btc",
        "id": 110166421,
        "node_id": "U_kgDOBpEBlQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/110166421?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pablomartin4btc",
        "html_url": "https://github.com/pablomartin4btc",
        "followers_url": "https://api.github.com/users/pablomartin4btc/followers",
        "following_url": "https://api.github.com/users/pablomartin4btc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pablomartin4btc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pablomartin4btc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pablomartin4btc/subscriptions",
        "organizations_url": "https://api.github.com/users/pablomartin4btc/orgs",
        "repos_url": "https://api.github.com/users/pablomartin4btc/repos",
        "events_url": "https://api.github.com/users/pablomartin4btc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pablomartin4btc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2278000353",
      "submitted_at": "2024-09-03T17:00:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "commented",
      "id": 2334181480,
      "node_id": "IC_kwDOABII586LIMho",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2334181480",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-06T14:25:58Z",
      "updated_at": "2024-09-06T14:25:58Z",
      "author_association": "MEMBER",
      "body": "I think this is ready for \"actual\" review, in case anyone was wondering.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#issuecomment-2334181480",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30708"
    },
    {
      "event": "reviewed",
      "id": 2286432258,
      "node_id": "PRR_kwDOABII586ISDAC",
      "url": null,
      "actor": null,
      "commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK\r\n\r\nThanks for the useful RPC.  Love that for some use cases it enables the option to avoid ancillary software (e.g. electrum server).\r\n\r\nLeft some initial comments for now (mainly for tests).  Planning to circle back.",
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2286432258",
      "submitted_at": "2024-09-06T15:53:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "labeled",
      "id": 14171034750,
      "node_id": "LE_lADOABII586UGZ_mzwAAAANMqNR-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14171034750",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-07T15:46:27Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2288595901,
      "node_id": "PRR_kwDOABII586IaTO9",
      "url": null,
      "actor": null,
      "commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Left a couple more comments.",
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2288595901",
      "submitted_at": "2024-09-08T23:05:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "unlabeled",
      "id": 14178933492,
      "node_id": "UNLE_lADOABII586UGZ_mzwAAAANNIVr0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14178933492",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-09T08:09:08Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2297650009,
      "node_id": "PRR_kwDOABII586I81tZ",
      "url": null,
      "actor": null,
      "commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2297650009",
      "submitted_at": "2024-09-11T15:45:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDEzNjVlZThlOWM3YTIwYWE2M2JjZGRiMWE2ZDU4NDNjMDVmZjkzMzA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "tree": {
        "sha": "8c7a2d08836c2f17ef6225c5995470a6529e14a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c7a2d08836c2f17ef6225c5995470a6529e14a9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d79ea809d28197b1b4e3748aa1715272b53601d0",
          "sha": "d79ea809d28197b1b4e3748aa1715272b53601d0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d79ea809d28197b1b4e3748aa1715272b53601d0"
        }
      ],
      "message": "rpc: add getdescriptoractivity",
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2024-09-14T15:44:18Z"
      },
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2024-08-21T08:23:40Z"
      },
      "sha": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14259579769,
      "node_id": "HRFPE_lADOABII586UGZ_mzwAAAANR7-t5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14259579769",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-14T15:45:26Z"
    },
    {
      "event": "reviewed",
      "id": 2304336437,
      "node_id": "PRR_kwDOABII586JWWI1",
      "url": null,
      "actor": null,
      "commit_id": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I've pushed an update addressing feedback and adding release notes. Thanks for all review so far.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2304336437",
      "submitted_at": "2024-09-14T15:46:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "reviewed",
      "id": 2314225218,
      "node_id": "PRR_kwDOABII586J8EZC",
      "url": null,
      "actor": null,
      "commit_id": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330\r\n\r\nThis is a value-add that I hope gets more traction/review.\r\nLeft a few more minor nits.\r\nPerformed light local testing with regtest (sendtoaddress, unconfirmed and confirmed txs). As time allows, I may exercise additional descriptors.\r\n\r\nMight also not be a bad idea to mark as experimental in help: \r\n`EXPERIMENTAL warning: this call may be changed in future releases.`",
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#pullrequestreview-2314225218",
      "submitted_at": "2024-09-19T02:23:36Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
    },
    {
      "event": "review_requested",
      "id": 14316806585,
      "node_id": "RRE_lADOABII586UGZ_mzwAAAANVWSG5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14316806585",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-19T02:23:40Z",
      "requested_reviewer": {
        "login": "danielabrozzoni",
        "id": 25042473,
        "node_id": "MDQ6VXNlcjI1MDQyNDcz",
        "avatar_url": "https://avatars.githubusercontent.com/u/25042473?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/danielabrozzoni",
        "html_url": "https://github.com/danielabrozzoni",
        "followers_url": "https://api.github.com/users/danielabrozzoni/followers",
        "following_url": "https://api.github.com/users/danielabrozzoni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/danielabrozzoni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/danielabrozzoni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/danielabrozzoni/subscriptions",
        "organizations_url": "https://api.github.com/users/danielabrozzoni/orgs",
        "repos_url": "https://api.github.com/users/danielabrozzoni/repos",
        "events_url": "https://api.github.com/users/danielabrozzoni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/danielabrozzoni/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 14316806645,
      "node_id": "RRE_lADOABII586UGZ_mzwAAAANVWSH1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14316806645",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-19T02:23:40Z",
      "requested_reviewer": {
        "login": "pablomartin4btc",
        "id": 110166421,
        "node_id": "U_kgDOBpEBlQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/110166421?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pablomartin4btc",
        "html_url": "https://github.com/pablomartin4btc",
        "followers_url": "https://api.github.com/users/pablomartin4btc/followers",
        "following_url": "https://api.github.com/users/pablomartin4btc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pablomartin4btc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pablomartin4btc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pablomartin4btc/subscriptions",
        "organizations_url": "https://api.github.com/users/pablomartin4btc/orgs",
        "repos_url": "https://api.github.com/users/pablomartin4btc/repos",
        "events_url": "https://api.github.com/users/pablomartin4btc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pablomartin4btc/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1730137103",
      "pull_request_review_id": 2258968029,
      "id": 1730137103,
      "node_id": "PRRC_kwDOABII585nH8wP",
      "diff_hunk": "@@ -0,0 +1,171 @@\n+#!/usr/bin/env python3",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": 1,
      "original_position": 1,
      "commit_id": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "original_commit_id": "c3cdf11a576fd9549a9cc3326dc93cd84e47db39",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think the new test file needs to be added to the runner.\r\n\r\n```diff\r\n--- a/test/functional/test_runner.py\r\n+++ b/test/functional/test_runner.py\r\n@@ -396,6 +396,7 @@ BASE_SCRIPTS = [\r\n     'feature_config_args.py',\r\n     'feature_presegwit_node_upgrade.py',\r\n     'feature_settings.py',\r\n+    'rpc_getdescriptoractivity.py',\r\n     'rpc_getdescriptorinfo.py',\r\n     'rpc_mempool_info.py',\r\n     'rpc_help.py',\r\n```\r\n",
      "created_at": "2024-08-24T21:15:26Z",
      "updated_at": "2024-08-24T21:15:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1730137103",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1730137103"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747223007",
      "pull_request_review_id": 2286432258,
      "id": 1747223007,
      "node_id": "PRRC_kwDOABII585oJIHf",
      "diff_hunk": "@@ -0,0 +1,171 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from io import BytesIO\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.messages import COIN, CTransaction\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        self.generate(node, 101)",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": null,
      "original_position": 21,
      "commit_id": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": null,
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Rather than generate 101 new blocks, maybe the test could take advantage of the pre-mined test framework chain here (since `setup_clean_chain` defaults to `False`, with 200 blocks generated)?\r\n\r\nFrom test_framework/wallet.py:\r\n```\r\n# When the pre-mined test framework chain is used, it contains coinbase\r\n# outputs to the MiniWallet's default address in blocks 76-100\r\n```\r\n\r\nProbably not an exciting speed increase, but every bit counts.",
      "created_at": "2024-09-06T14:31:34Z",
      "updated_at": "2024-09-06T15:53:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1747223007",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747223007"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747224502",
      "pull_request_review_id": 2286432258,
      "id": 1747224502,
      "node_id": "PRRC_kwDOABII585oJIe2",
      "diff_hunk": "@@ -0,0 +1,171 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from io import BytesIO\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.messages import COIN, CTransaction\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        self.generate(node, 101)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        # self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+\n+        # Assert that the activity list contains exactly one entry for the block\n+        assert_equal(len(result['activity']), 1)\n+        assert result['activity'][0]['type'] == 'receive'\n+        assert result['activity'][0]['txid'] == txid\n+        assert result['activity'][0]['blockhash'] == blockhash\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with multiple addresses\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)\n+\n+        # Assert that the activity list contains exactly two entries\n+        assert_equal(len(result['activity']), 2)\n+\n+        [a1] = [a for a in result['activity'] if a['address'] == addr_1]\n+        [a2] = [a for a in result['activity'] if a['address'] == addr_2]\n+\n+        # Validate individual entries\n+        assert a1['blockhash'] == blockhash\n+        assert a1['amount'] == 1.0\n+\n+        assert a2['blockhash'] == blockhash\n+        assert a2['amount'] == 2.0\n+\n+    def test_invalid_blockhash(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        invalid_blockhash = \"0000000000000000000000000000000000000000000000000000000000000000\"\n+\n+        try:\n+            node.getdescriptoractivity([invalid_blockhash], [f\"addr({addr_1})\"], True)\n+            raise AssertionError(\"RPC call should have failed\")\n+        except Exception:\n+            pass",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": null,
      "original_position": 100,
      "commit_id": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": null,
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could use `assert_raises_rpc_error` here instead of the try/except.\r\nSomething similar to:\r\n```python\r\nassert_raises_rpc_error(-5, \"Block not found\", node.getdescriptoractivity, [invalid_blockhash], [f\"addr({addr_1})\"], True)\r\n```",
      "created_at": "2024-09-06T14:32:36Z",
      "updated_at": "2024-09-06T15:53:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1747224502",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747224502"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": 96,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 100,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747235621",
      "pull_request_review_id": 2286432258,
      "id": 1747235621,
      "node_id": "PRRC_kwDOABII585oJLMl",
      "diff_hunk": "@@ -0,0 +1,171 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from io import BytesIO\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.messages import COIN, CTransaction\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        self.generate(node, 101)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        # self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+\n+        # Assert that the activity list contains exactly one entry for the block\n+        assert_equal(len(result['activity']), 1)\n+        assert result['activity'][0]['type'] == 'receive'\n+        assert result['activity'][0]['txid'] == txid\n+        assert result['activity'][0]['blockhash'] == blockhash\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with multiple addresses\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)\n+\n+        # Assert that the activity list contains exactly two entries\n+        assert_equal(len(result['activity']), 2)\n+\n+        [a1] = [a for a in result['activity'] if a['address'] == addr_1]\n+        [a2] = [a for a in result['activity'] if a['address'] == addr_2]\n+\n+        # Validate individual entries\n+        assert a1['blockhash'] == blockhash\n+        assert a1['amount'] == 1.0\n+\n+        assert a2['blockhash'] == blockhash\n+        assert a2['amount'] == 2.0\n+\n+    def test_invalid_blockhash(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        invalid_blockhash = \"0000000000000000000000000000000000000000000000000000000000000000\"",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": 104,
      "original_position": 94,
      "commit_id": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": null,
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit:  `0000...` is astronomically unlikely to hit, but not sure it is invalid.  Maybe could use `invalid_blockhash = \"ffff...\"` instead, which seems appears to be above the powLimit for regtest.\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/bbf95c0cc57147827b9f4577c641b12dd4170e78/src/kernel/chainparams.cpp#L541\r\n\r\nI could be mistaken, and feel free to disregard",
      "created_at": "2024-09-06T14:41:11Z",
      "updated_at": "2024-09-08T23:04:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1747235621",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747235621"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 104,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747277470",
      "pull_request_review_id": 2286432258,
      "id": 1747277470,
      "node_id": "PRRC_kwDOABII585oJVae",
      "diff_hunk": "@@ -0,0 +1,171 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from io import BytesIO\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.messages import COIN, CTransaction\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        self.generate(node, 101)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        # self.test_receive_then_spend(node, wallet)",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": null,
      "original_position": 29,
      "commit_id": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": null,
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This would be a great test to include.  Seeing `test_framework.authproxy.JSONRPCException: mandatory-script-verify-flag-failed (Witness program hash mismatch) (-26)` when uncommented.",
      "created_at": "2024-09-06T15:08:19Z",
      "updated_at": "2024-09-06T15:53:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1747277470",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747277470"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747291150",
      "pull_request_review_id": 2286432258,
      "id": 1747291150,
      "node_id": "PRRC_kwDOABII585oJYwO",
      "diff_hunk": "@@ -0,0 +1,171 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from io import BytesIO\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.messages import COIN, CTransaction\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        self.generate(node, 101)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        # self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+\n+        # Assert that the activity list contains exactly one entry for the block\n+        assert_equal(len(result['activity']), 1)\n+        assert result['activity'][0]['type'] == 'receive'\n+        assert result['activity'][0]['txid'] == txid\n+        assert result['activity'][0]['blockhash'] == blockhash\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with multiple addresses\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)\n+\n+        # Assert that the activity list contains exactly two entries\n+        assert_equal(len(result['activity']), 2)\n+\n+        [a1] = [a for a in result['activity'] if a['address'] == addr_1]\n+        [a2] = [a for a in result['activity'] if a['address'] == addr_2]\n+\n+        # Validate individual entries\n+        assert a1['blockhash'] == blockhash\n+        assert a1['amount'] == 1.0\n+\n+        assert a2['blockhash'] == blockhash\n+        assert a2['amount'] == 2.0\n+\n+    def test_invalid_blockhash(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        invalid_blockhash = \"0000000000000000000000000000000000000000000000000000000000000000\"\n+\n+        try:\n+            node.getdescriptoractivity([invalid_blockhash], [f\"addr({addr_1})\"], True)\n+            raise AssertionError(\"RPC call should have failed\")\n+        except Exception:\n+            pass\n+\n+    def test_confirmed_and_unconfirmed(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid_1 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        _, spk_2, to_addr = getnewdestination()\n+        txid_2 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)['txid']\n+\n+        # Test getdescriptoractivity with both confirmed and unconfirmed transactions\n+        result = node.getdescriptoractivity(\n+            [blockhash], [f\"addr({addr_1})\", f\"addr({to_addr})\"], True)\n+\n+        # Assert that the activity list contains exactly two entries (1 confirmed, 1 unconfirmed)\n+        activity = result['activity']\n+        assert_equal(len(activity), 2)\n+\n+        [confirmed] = [a for a in activity if a['blockhash'] == blockhash]\n+        assert confirmed['txid'] == txid_1\n+        assert confirmed['height'] == node.getblockchaininfo()['blocks']\n+\n+        assert any(a['txid'] == txid_2 for a in activity if a['blockhash'] == \"\")\n+\n+    def test_receive_then_spend(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        sent = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        rawtx_1 = sent['tx']\n+        txid_1 = sent['txid']\n+\n+        blockhash_1 = self.generate(node, 1)[0]\n+        [vout_idx] = [i for i, o in enumerate(rawtx_1.vout) if o.nValue == 1.0 * COIN]\n+\n+        inputs = [{'txid': txid_1, 'vout': vout_idx}]\n+        outputs = {addr_1: 0.9999}\n+        rawtx_2 = node.createrawtransaction(inputs, outputs)\n+        signed = CTransaction()\n+        signed.deserialize(BytesIO(bytes.fromhex(rawtx_2)))\n+        wallet.sign_tx(signed)\n+        txid_2 = wallet.sendrawtransaction(\n+            from_node=node, tx_hex=signed.serialize().hex())\n+\n+        blockhash_2 = self.generate(node, 1)[0]\n+\n+        result = node.getdescriptoractivity([blockhash_1, blockhash_2], [f\"addr({addr_1})\"], True)\n+\n+        # Expecting two activities: one 'receive' in blockhash_1, one 'spend' in blockhash_2\n+        assert_equal(len(result['activity']), 2)\n+\n+        assert result['activity'][0]['type'] == 'receive'\n+        assert result['activity'][0]['txid'] == txid_1\n+        assert result['activity'][0]['blockhash'] == blockhash_1\n+        assert result['activity'][0]['address'] == addr_1\n+        assert result['activity'][0]['value'] == 1.0",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": null,
      "original_position": 160,
      "commit_id": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": null,
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```diff\r\n- assert result['activity'][0]['value'] == 1.0\r\n+ assert result['activity'][0]['amount'] == 1.0\r\n```",
      "created_at": "2024-09-06T15:17:47Z",
      "updated_at": "2024-09-06T15:53:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1747291150",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747291150"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747291778",
      "pull_request_review_id": 2286432258,
      "id": 1747291778,
      "node_id": "PRRC_kwDOABII585oJY6C",
      "diff_hunk": "@@ -0,0 +1,171 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from io import BytesIO\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.messages import COIN, CTransaction\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        self.generate(node, 101)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        # self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+\n+        # Assert that the activity list contains exactly one entry for the block\n+        assert_equal(len(result['activity']), 1)\n+        assert result['activity'][0]['type'] == 'receive'\n+        assert result['activity'][0]['txid'] == txid\n+        assert result['activity'][0]['blockhash'] == blockhash\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with multiple addresses\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)\n+\n+        # Assert that the activity list contains exactly two entries\n+        assert_equal(len(result['activity']), 2)\n+\n+        [a1] = [a for a in result['activity'] if a['address'] == addr_1]\n+        [a2] = [a for a in result['activity'] if a['address'] == addr_2]\n+\n+        # Validate individual entries\n+        assert a1['blockhash'] == blockhash\n+        assert a1['amount'] == 1.0\n+\n+        assert a2['blockhash'] == blockhash\n+        assert a2['amount'] == 2.0\n+\n+    def test_invalid_blockhash(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        invalid_blockhash = \"0000000000000000000000000000000000000000000000000000000000000000\"\n+\n+        try:\n+            node.getdescriptoractivity([invalid_blockhash], [f\"addr({addr_1})\"], True)\n+            raise AssertionError(\"RPC call should have failed\")\n+        except Exception:\n+            pass\n+\n+    def test_confirmed_and_unconfirmed(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid_1 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        _, spk_2, to_addr = getnewdestination()\n+        txid_2 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)['txid']\n+\n+        # Test getdescriptoractivity with both confirmed and unconfirmed transactions\n+        result = node.getdescriptoractivity(\n+            [blockhash], [f\"addr({addr_1})\", f\"addr({to_addr})\"], True)\n+\n+        # Assert that the activity list contains exactly two entries (1 confirmed, 1 unconfirmed)\n+        activity = result['activity']\n+        assert_equal(len(activity), 2)\n+\n+        [confirmed] = [a for a in activity if a['blockhash'] == blockhash]\n+        assert confirmed['txid'] == txid_1\n+        assert confirmed['height'] == node.getblockchaininfo()['blocks']\n+\n+        assert any(a['txid'] == txid_2 for a in activity if a['blockhash'] == \"\")\n+\n+    def test_receive_then_spend(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        sent = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        rawtx_1 = sent['tx']\n+        txid_1 = sent['txid']\n+\n+        blockhash_1 = self.generate(node, 1)[0]\n+        [vout_idx] = [i for i, o in enumerate(rawtx_1.vout) if o.nValue == 1.0 * COIN]\n+\n+        inputs = [{'txid': txid_1, 'vout': vout_idx}]\n+        outputs = {addr_1: 0.9999}\n+        rawtx_2 = node.createrawtransaction(inputs, outputs)\n+        signed = CTransaction()\n+        signed.deserialize(BytesIO(bytes.fromhex(rawtx_2)))\n+        wallet.sign_tx(signed)\n+        txid_2 = wallet.sendrawtransaction(\n+            from_node=node, tx_hex=signed.serialize().hex())\n+\n+        blockhash_2 = self.generate(node, 1)[0]\n+\n+        result = node.getdescriptoractivity([blockhash_1, blockhash_2], [f\"addr({addr_1})\"], True)\n+\n+        # Expecting two activities: one 'receive' in blockhash_1, one 'spend' in blockhash_2\n+        assert_equal(len(result['activity']), 2)\n+\n+        assert result['activity'][0]['type'] == 'receive'\n+        assert result['activity'][0]['txid'] == txid_1\n+        assert result['activity'][0]['blockhash'] == blockhash_1\n+        assert result['activity'][0]['address'] == addr_1\n+        assert result['activity'][0]['value'] == 1.0\n+\n+        assert result['activity'][1]['type'] == 'spend'\n+        assert result['activity'][1]['spend_txid'] == txid_2\n+        assert result['activity'][1]['prevout_txid'] == txid_1\n+        assert result['activity'][1]['blockhash'] == blockhash_2\n+        assert result['activity'][0]['address'] == addr_1\n+        assert result['activity'][0]['value'] == 0.9999",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": null,
      "original_position": 167,
      "commit_id": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": null,
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```diff\r\n- assert result['activity'][0]['value'] == 0.9999\r\n+ assert result['activity'][0]['amount'] == 0.9999\r\n```",
      "created_at": "2024-09-06T15:18:15Z",
      "updated_at": "2024-09-06T15:53:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1747291778",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747291778"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747344172",
      "pull_request_review_id": 2286432258,
      "id": 1747344172,
      "node_id": "PRRC_kwDOABII585oJlss",
      "diff_hunk": "@@ -0,0 +1,171 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from io import BytesIO\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.messages import COIN, CTransaction\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        self.generate(node, 101)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        # self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+\n+        # Assert that the activity list contains exactly one entry for the block\n+        assert_equal(len(result['activity']), 1)\n+        assert result['activity'][0]['type'] == 'receive'\n+        assert result['activity'][0]['txid'] == txid\n+        assert result['activity'][0]['blockhash'] == blockhash\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with multiple addresses\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)\n+\n+        # Assert that the activity list contains exactly two entries\n+        assert_equal(len(result['activity']), 2)\n+\n+        [a1] = [a for a in result['activity'] if a['address'] == addr_1]\n+        [a2] = [a for a in result['activity'] if a['address'] == addr_2]\n+\n+        # Validate individual entries\n+        assert a1['blockhash'] == blockhash\n+        assert a1['amount'] == 1.0\n+\n+        assert a2['blockhash'] == blockhash\n+        assert a2['amount'] == 2.0\n+\n+    def test_invalid_blockhash(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        invalid_blockhash = \"0000000000000000000000000000000000000000000000000000000000000000\"\n+\n+        try:\n+            node.getdescriptoractivity([invalid_blockhash], [f\"addr({addr_1})\"], True)\n+            raise AssertionError(\"RPC call should have failed\")\n+        except Exception:\n+            pass\n+\n+    def test_confirmed_and_unconfirmed(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid_1 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        _, spk_2, to_addr = getnewdestination()\n+        txid_2 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)['txid']\n+\n+        # Test getdescriptoractivity with both confirmed and unconfirmed transactions\n+        result = node.getdescriptoractivity(\n+            [blockhash], [f\"addr({addr_1})\", f\"addr({to_addr})\"], True)\n+\n+        # Assert that the activity list contains exactly two entries (1 confirmed, 1 unconfirmed)\n+        activity = result['activity']\n+        assert_equal(len(activity), 2)\n+\n+        [confirmed] = [a for a in activity if a['blockhash'] == blockhash]\n+        assert confirmed['txid'] == txid_1\n+        assert confirmed['height'] == node.getblockchaininfo()['blocks']\n+\n+        assert any(a['txid'] == txid_2 for a in activity if a['blockhash'] == \"\")\n+\n+    def test_receive_then_spend(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        sent = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        rawtx_1 = sent['tx']\n+        txid_1 = sent['txid']\n+\n+        blockhash_1 = self.generate(node, 1)[0]\n+        [vout_idx] = [i for i, o in enumerate(rawtx_1.vout) if o.nValue == 1.0 * COIN]\n+\n+        inputs = [{'txid': txid_1, 'vout': vout_idx}]\n+        outputs = {addr_1: 0.9999}\n+        rawtx_2 = node.createrawtransaction(inputs, outputs)\n+        signed = CTransaction()\n+        signed.deserialize(BytesIO(bytes.fromhex(rawtx_2)))",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": null,
      "original_position": 144,
      "commit_id": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": null,
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could use `test_framework/messages.py:tx_from_hex()` here, e.g.:\r\n\r\n```diff\r\n-        signed = CTransaction()\r\n-        signed.deserialize(BytesIO(bytes.fromhex(rawtx_2)))\r\n+        signed = tx_from_hex(rawtx_2)\r\n```",
      "created_at": "2024-09-06T15:47:46Z",
      "updated_at": "2024-09-06T15:53:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1747344172",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747344172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": 143,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1749344034",
      "pull_request_review_id": 2288595901,
      "id": 1749344034,
      "node_id": "PRRC_kwDOABII585oRN8i",
      "diff_hunk": "@@ -2561,6 +2561,227 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address being spent from\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor being spent from\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address receiving value\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor receiving value\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"Txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"Vout of the receiving output\"},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+    std::vector<CBlockIndex*> blockindexes;\n+\n+    {\n+        // Validate all given blockhashes.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            blockindexes.push_back(pindex);\n+        }\n+    }\n+\n+    std::set<CScript> scripts_to_watch;\n+    std::map<CScript, std::string> descriptors_watched;\n+\n+    // Determine scripts to watch\n+    for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+\n+        for (const CScript& script : scripts) {\n+            scripts_to_watch.insert(script);\n+            descriptors_watched.emplace(script, InferDescriptor(script, provider)->ToString());\n+        }\n+    }\n+\n+    const auto AddSpend = [&](\n+            const CScript& spk,\n+            const CAmount val,\n+            const CTransactionRef& tx,\n+            int vin,\n+            const CTxIn& txin,\n+            const CBlockIndex* index\n+            ) {\n+        UniValue event(UniValue::VOBJ);\n+        event.pushKV(\"type\", \"spend\");\n+        event.pushKV(\"address\", ScriptToAddress(spk).value_or(\"\"));",
      "path": "src/rpc/blockchain.cpp",
      "position": 99,
      "original_position": 97,
      "commit_id": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": null,
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: instead of making this an empty string if there is no address, could make the \"address\" key optional and omit it if nullopt.",
      "created_at": "2024-09-08T20:05:37Z",
      "updated_at": "2024-09-08T23:05:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1749344034",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1749344034"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2659,
      "original_line": 2659,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1749385219",
      "pull_request_review_id": 2288595901,
      "id": 1749385219,
      "node_id": "PRRC_kwDOABII585oRYAD",
      "diff_hunk": "@@ -2561,6 +2561,227 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address being spent from\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor being spent from\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address receiving value\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor receiving value\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"Txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"Vout of the receiving output\"},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+    std::vector<CBlockIndex*> blockindexes;\n+\n+    {\n+        // Validate all given blockhashes.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");",
      "path": "src/rpc/blockchain.cpp",
      "position": 69,
      "original_position": 67,
      "commit_id": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": null,
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "A test could be added for this error condition (or could be added in a follow-up PR).  Here's a rough idea (https://github.com/tdb3/bitcoin/commit/43301b2019e5b2ceb347641cdb8eb18aa7fa8879)\r\n\r\n",
      "created_at": "2024-09-08T22:54:04Z",
      "updated_at": "2024-09-09T12:38:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1749385219",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1749385219"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2629,
      "original_line": 2629,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755002681",
      "pull_request_review_id": 2297650009,
      "id": 1755002681,
      "node_id": "PRRC_kwDOABII585omzc5",
      "diff_hunk": "@@ -2561,6 +2561,227 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address being spent from\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor being spent from\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address receiving value\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor receiving value\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"Txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"Vout of the receiving output\"},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+    std::vector<CBlockIndex*> blockindexes;\n+\n+    {\n+        // Validate all given blockhashes.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            blockindexes.push_back(pindex);\n+        }\n+    }\n+\n+    std::set<CScript> scripts_to_watch;\n+    std::map<CScript, std::string> descriptors_watched;\n+\n+    // Determine scripts to watch\n+    for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+\n+        for (const CScript& script : scripts) {\n+            scripts_to_watch.insert(script);\n+            descriptors_watched.emplace(script, InferDescriptor(script, provider)->ToString());\n+        }\n+    }\n+\n+    const auto AddSpend = [&](\n+            const CScript& spk,\n+            const CAmount val,\n+            const CTransactionRef& tx,\n+            int vin,\n+            const CTxIn& txin,\n+            const CBlockIndex* index\n+            ) {\n+        UniValue event(UniValue::VOBJ);\n+        event.pushKV(\"type\", \"spend\");\n+        event.pushKV(\"address\", ScriptToAddress(spk).value_or(\"\"));",
      "path": "src/rpc/blockchain.cpp",
      "position": 99,
      "original_position": 97,
      "commit_id": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": 1749344034,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think emitting the address here is confusing. In all of Bitcoin Core's RPC interface, addresses are seen as receive-only entities, through which a wallet receives coins, but the resulting balance then belongs to the wallet. This notion of a \"from address\" you're using here only makes sense in an \"address balance\" situation, which doesn't match the model of rest of the RPC interface. E.g. the wallet's `listtransactions` does list an address for both send and receive, but for sending it's the address being sent to, not the \"spent from\" address.\r\n\r\nWhat would you think about having a hex-encoded `scriptPubKey` in both \"spend\" and \"receive\" entries here instead? That would be unambiguous, and also more general (doesn't rely on the scriptPubKey having a well-defined address encoding).\r\n\r\n",
      "created_at": "2024-09-11T15:41:04Z",
      "updated_at": "2024-09-11T15:45:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1755002681",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755002681"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2659,
      "original_line": 2659,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755015149",
      "pull_request_review_id": 2297650009,
      "id": 1755015149,
      "node_id": "PRRC_kwDOABII585om2ft",
      "diff_hunk": "@@ -2561,6 +2561,227 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address being spent from\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor being spent from\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address receiving value\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor receiving value\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"Txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"Vout of the receiving output\"},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+    std::vector<CBlockIndex*> blockindexes;\n+\n+    {\n+        // Validate all given blockhashes.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            blockindexes.push_back(pindex);\n+        }\n+    }\n+\n+    std::set<CScript> scripts_to_watch;\n+    std::map<CScript, std::string> descriptors_watched;\n+\n+    // Determine scripts to watch\n+    for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+\n+        for (const CScript& script : scripts) {\n+            scripts_to_watch.insert(script);\n+            descriptors_watched.emplace(script, InferDescriptor(script, provider)->ToString());",
      "path": "src/rpc/blockchain.cpp",
      "position": 85,
      "original_position": 83,
      "commit_id": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's a really roundabout way of generating specialized descriptors, but there doesn't seem to be a better way unfortunately.",
      "created_at": "2024-09-11T15:44:57Z",
      "updated_at": "2024-09-11T15:45:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1755015149",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1755015149"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2645,
      "original_line": 2645,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1759630564",
      "pull_request_review_id": 2304336437,
      "id": 1759630564,
      "node_id": "PRRC_kwDOABII585o4dTk",
      "diff_hunk": "@@ -2561,6 +2561,227 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address being spent from\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor being spent from\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address receiving value\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor receiving value\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"Txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"Vout of the receiving output\"},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+    std::vector<CBlockIndex*> blockindexes;\n+\n+    {\n+        // Validate all given blockhashes.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            blockindexes.push_back(pindex);\n+        }\n+    }\n+\n+    std::set<CScript> scripts_to_watch;\n+    std::map<CScript, std::string> descriptors_watched;\n+\n+    // Determine scripts to watch\n+    for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+\n+        for (const CScript& script : scripts) {\n+            scripts_to_watch.insert(script);\n+            descriptors_watched.emplace(script, InferDescriptor(script, provider)->ToString());\n+        }\n+    }\n+\n+    const auto AddSpend = [&](\n+            const CScript& spk,\n+            const CAmount val,\n+            const CTransactionRef& tx,\n+            int vin,\n+            const CTxIn& txin,\n+            const CBlockIndex* index\n+            ) {\n+        UniValue event(UniValue::VOBJ);\n+        event.pushKV(\"type\", \"spend\");\n+        event.pushKV(\"address\", ScriptToAddress(spk).value_or(\"\"));",
      "path": "src/rpc/blockchain.cpp",
      "position": 99,
      "original_position": 97,
      "commit_id": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": 1749344034,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm in favor of leaving this in as a convenience to the end user, although I think the suggestion to include a hex-encoded sPK is a good one and I'll add that. Many wallets will ultimately want to show which address is being spent from, e.g. \r\n\r\n![image](https://github.com/user-attachments/assets/06e68014-4a25-4949-90b9-0ead9918f2d5)\r\n\r\nIf we can inexpensively determine that here, I think it's a nice option for the end user.\r\n\r\nIn terms of a blank string vs. omitted key, I think it's better to have a consistent return schema than it is to avoid a blank string, so I'm going to leave that as-is. If there's some way in our horribly confusing RPC machinery to make the value nullable, that would probably be my preference.",
      "created_at": "2024-09-14T00:51:20Z",
      "updated_at": "2024-09-14T15:46:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1759630564",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1759630564"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2659,
      "original_line": 2659,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1759630712",
      "pull_request_review_id": 2304336437,
      "id": 1759630712,
      "node_id": "PRRC_kwDOABII585o4dV4",
      "diff_hunk": "@@ -0,0 +1,171 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from io import BytesIO\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.messages import COIN, CTransaction\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        self.generate(node, 101)",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": null,
      "original_position": 21,
      "commit_id": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": 1747223007,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed this generate() call.",
      "created_at": "2024-09-14T00:52:28Z",
      "updated_at": "2024-09-14T15:46:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1759630712",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1759630712"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1759640764",
      "pull_request_review_id": 2304336437,
      "id": 1759640764,
      "node_id": "PRRC_kwDOABII585o4fy8",
      "diff_hunk": "@@ -0,0 +1,171 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from io import BytesIO\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.messages import COIN, CTransaction\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        self.generate(node, 101)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        # self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+\n+        # Assert that the activity list contains exactly one entry for the block\n+        assert_equal(len(result['activity']), 1)\n+        assert result['activity'][0]['type'] == 'receive'\n+        assert result['activity'][0]['txid'] == txid\n+        assert result['activity'][0]['blockhash'] == blockhash\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with multiple addresses\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)\n+\n+        # Assert that the activity list contains exactly two entries\n+        assert_equal(len(result['activity']), 2)\n+\n+        [a1] = [a for a in result['activity'] if a['address'] == addr_1]\n+        [a2] = [a for a in result['activity'] if a['address'] == addr_2]\n+\n+        # Validate individual entries\n+        assert a1['blockhash'] == blockhash\n+        assert a1['amount'] == 1.0\n+\n+        assert a2['blockhash'] == blockhash\n+        assert a2['amount'] == 2.0\n+\n+    def test_invalid_blockhash(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        invalid_blockhash = \"0000000000000000000000000000000000000000000000000000000000000000\"",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": 104,
      "original_position": 94,
      "commit_id": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": 1747235621,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This value is used as an invalid hash elsewhere (https://github.com/bitcoin/bitcoin/blob/master/test/functional/wallet_listsinceblock.py#L95) so I'm going to leave this as is.",
      "created_at": "2024-09-14T01:59:05Z",
      "updated_at": "2024-09-14T15:46:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1759640764",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1759640764"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 104,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1759642418",
      "pull_request_review_id": 2304336437,
      "id": 1759642418,
      "node_id": "PRRC_kwDOABII585o4gMy",
      "diff_hunk": "@@ -2561,6 +2561,227 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address being spent from\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor being spent from\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address receiving value\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor receiving value\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"Txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"Vout of the receiving output\"},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+    std::vector<CBlockIndex*> blockindexes;\n+\n+    {\n+        // Validate all given blockhashes.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");",
      "path": "src/rpc/blockchain.cpp",
      "position": 69,
      "original_position": 67,
      "commit_id": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": 1749385219,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I cherry-picked this, but it adds significant runtime to the test for what is a very basic check. I'd suggest filing a follow-up if you're still interested in testing this.",
      "created_at": "2024-09-14T02:09:59Z",
      "updated_at": "2024-09-14T15:46:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1759642418",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1759642418"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2629,
      "original_line": 2629,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1766035266",
      "pull_request_review_id": 2314225218,
      "id": 1766035266,
      "node_id": "PRRC_kwDOABII585pQ49C",
      "diff_hunk": "@@ -2561,6 +2561,231 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address being spent from\"},\n+                        {RPCResult::Type::STR, \"scriptpubkey_hex\", \"A hex string of the scriptPubKey being spent from\"},",
      "path": "src/rpc/blockchain.cpp",
      "position": 23,
      "original_position": 23,
      "commit_id": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "original_commit_id": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "in_reply_to_id": null,
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: if another update occurs, may want to use `STR_HEX` for `scriptpubkey_hex`",
      "created_at": "2024-09-19T01:55:59Z",
      "updated_at": "2024-09-19T02:23:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1766035266",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1766035266"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2583,
      "original_line": 2583,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1766056564",
      "pull_request_review_id": 2314225218,
      "id": 1766056564,
      "node_id": "PRRC_kwDOABII585pQ-J0",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.messages import COIN\n+from test_framework.wallet import MiniWallet, getnewdestination\n+\n+\n+class GetBlocksActivityTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        node.setmocktime(node.getblockheader(node.getbestblockhash())['time'])\n+        wallet.generate(200, invalid_call=False)\n+\n+        self.test_no_activity(node)\n+        self.test_activity_in_block(node, wallet)\n+        self.test_no_mempool_inclusion(node, wallet)\n+        self.test_multiple_addresses(node, wallet)\n+        self.test_invalid_blockhash(node, wallet)\n+        self.test_confirmed_and_unconfirmed(node, wallet)\n+        self.test_receive_then_spend(node, wallet)\n+\n+    def test_no_activity(self, node):\n+        _, spk_1, addr_1 = getnewdestination()\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\"], True)\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_activity_in_block(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid = wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        # Test getdescriptoractivity with the specific blockhash\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\"], True)\n+\n+        for k, v in {\n+                'address': addr_1,\n+                'amount': Decimal('1.00000000'),\n+                'blockhash': blockhash,\n+                'desc': 'rawtr',  # partial\n+                'height': 201,\n+                'scriptpubkey_hex': spk_1.hex(),\n+                'txid': txid,\n+                'type': 'receive',\n+                'vout': 1,\n+        }.items():\n+            if k == 'desc':\n+                assert_equal(result['activity'][0][k].split('(')[0], v)\n+            else:\n+                assert_equal(result['activity'][0][k], v)\n+\n+\n+    def test_no_mempool_inclusion(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)\n+\n+        # Do not generate a block to keep the transaction in the mempool\n+\n+        result = node.getdescriptoractivity([], [f\"addr({addr_1})\", f\"addr({addr_2})\"], False)\n+\n+        assert_equal(len(result['activity']), 0)\n+\n+    def test_multiple_addresses(self, node, wallet):\n+        _, spk_1, addr_1 = getnewdestination()\n+        _, spk_2, addr_2 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+        wallet.send_to(from_node=node, scriptPubKey=spk_2, amount=2 * COIN)\n+\n+        blockhash = self.generate(node, 1)[0]\n+\n+        result = node.getdescriptoractivity([blockhash], [f\"addr({addr_1})\", f\"addr({addr_2})\"], True)\n+\n+        assert_equal(len(result['activity']), 2)\n+\n+        [a1] = [a for a in result['activity'] if a['address'] == addr_1]\n+        [a2] = [a for a in result['activity'] if a['address'] == addr_2]\n+\n+        assert a1['blockhash'] == blockhash\n+        assert a1['amount'] == 1.0\n+\n+        assert a2['blockhash'] == blockhash\n+        assert a2['amount'] == 2.0\n+\n+    def test_invalid_blockhash(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\n+\n+        invalid_blockhash = \"0000000000000000000000000000000000000000000000000000000000000000\"\n+\n+        assert_raises_rpc_error(\n+            -5, \"Block not found\",\n+            node.getdescriptoractivity, [invalid_blockhash], [f\"addr({addr_1})\"], True)\n+\n+    def test_confirmed_and_unconfirmed(self, node, wallet):\n+        self.generate(node, 20) # Generate to get more fees\n+\n+        _, spk_1, addr_1 = getnewdestination()\n+        txid_1 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_1, amount=1 * COIN)['txid']\n+        blockhash = self.generate(node, 1)[0]\n+\n+        _, spk_2, to_addr = getnewdestination()\n+        txid_2 = wallet.send_to(\n+            from_node=node, scriptPubKey=spk_2, amount=1 * COIN)['txid']\n+\n+        result = node.getdescriptoractivity(\n+            [blockhash], [f\"addr({addr_1})\", f\"addr({to_addr})\"], True)\n+\n+        activity = result['activity']\n+        assert_equal(len(activity), 2)\n+\n+        [confirmed] = [a for a in activity if a['blockhash'] == blockhash]\n+        assert confirmed['txid'] == txid_1\n+        assert confirmed['height'] == node.getblockchaininfo()['blocks']",
      "path": "test/functional/rpc_getdescriptoractivity.py",
      "position": 130,
      "original_position": 130,
      "commit_id": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "original_commit_id": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "in_reply_to_id": null,
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If this is touched again, could add asserts to check that the unconfirmed tx has blank blockhash and -1 height. Could be left for a follow-up PR.",
      "created_at": "2024-09-19T02:19:06Z",
      "updated_at": "2024-09-19T02:24:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1766056564",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1766056564"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": 128,
      "original_start_line": 128,
      "start_side": "RIGHT",
      "line": 130,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1766950748",
      "pull_request_review_id": 2315742724,
      "id": 1766950748,
      "node_id": "PRRC_kwDOABII585pUYdc",
      "diff_hunk": "@@ -2561,6 +2561,227 @@ static RPCHelpMan scanblocks()\n     };\n }\n \n+static RPCHelpMan getdescriptoractivity()\n+{\n+    return RPCHelpMan{\"getdescriptoractivity\",\n+        \"\\nGet spend and receive activity associated with a set of descriptors for a set of blocks. \"\n+        \"This command pairs well with the `relevant_blocks` output of `scanblocks()`.\\n\"\n+        \"This call may take several minutes. If you encounter timeouts, try specifying no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+        {\n+            RPCArg{\"blockhashes\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The list of blockhashes to examine for activity\\n\", {\n+                {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A valid blockhash\"},\n+            }},\n+            scan_objects_arg_desc,\n+            {\"include_mempool\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether to include unconfirmed activity\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::ARR, \"activity\", \"events\", {\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'spend'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address being spent from\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor being spent from\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the spent output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The blockhash this spend appears in. Empty if in mempool\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the spend (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"spend_txid\", \"The txid of the spending transaction\"},\n+                        {RPCResult::Type::NUM, \"spend_vout\", \"The vout of the spend\"},\n+                        {RPCResult::Type::STR_HEX, \"prevout_txid\", \"The txid of the prevout\"},\n+                        {RPCResult::Type::NUM, \"prevout_vout\", \"The vout of the prevout\"},\n+                    }},\n+                    {RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"type\", \"always 'receive'\"},\n+                        {RPCResult::Type::STR, \"address\", \"The address receiving value\"},\n+                        {RPCResult::Type::STR, \"desc\", \"The inferred descriptor receiving value\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the new output\"},\n+                        {RPCResult::Type::STR_HEX, \"blockhash\", \"The block that this receive is in\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the receive (-1 if unconfirmed)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"Txid of the receiving transaction\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"Vout of the receiving output\"},\n+                    }},\n+                    // TODO is the skip_type_check avoidable with a heterogeneous ARR?\n+                }, /*skip_type_check=*/true},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getdescriptoractivity\", \"'[\\\"000000000000000000001347062c12fded7c528943c8ce133987e2e2f5a840ee\\\"]' '[\\\"addr(bc1qzl6nsgqzu89a66l50cvwapnkw5shh23zarqkw9)\\\"]'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue activity(UniValue::VARR);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+    std::vector<CBlockIndex*> blockindexes;\n+\n+    {\n+        // Validate all given blockhashes.\n+        LOCK(::cs_main);\n+        for (const UniValue& blockhash : request.params[0].get_array().getValues()) {\n+            uint256 bhash = ParseHashV(blockhash, \"blockhash\");\n+            CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(bhash);\n+            if (!pindex) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            }\n+            if (!chainman.ActiveChain().Contains(pindex)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n+            }\n+            blockindexes.push_back(pindex);\n+        }\n+    }\n+\n+    std::set<CScript> scripts_to_watch;\n+    std::map<CScript, std::string> descriptors_watched;\n+\n+    // Determine scripts to watch\n+    for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+\n+        for (const CScript& script : scripts) {\n+            scripts_to_watch.insert(script);\n+            descriptors_watched.emplace(script, InferDescriptor(script, provider)->ToString());\n+        }\n+    }\n+\n+    const auto AddSpend = [&](\n+            const CScript& spk,\n+            const CAmount val,\n+            const CTransactionRef& tx,\n+            int vin,\n+            const CTxIn& txin,\n+            const CBlockIndex* index\n+            ) {\n+        UniValue event(UniValue::VOBJ);\n+        event.pushKV(\"type\", \"spend\");\n+        event.pushKV(\"address\", ScriptToAddress(spk).value_or(\"\"));",
      "path": "src/rpc/blockchain.cpp",
      "position": 99,
      "original_position": 97,
      "commit_id": "1365ee8e9c7a20aa63bcddb1a6d5843c05ff9330",
      "original_commit_id": "c660db98672b9d82a1d5bfdcf36894d24365195e",
      "in_reply_to_id": 1749344034,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Many wallets will ultimately want to show which address is being spent from, e.g.\r\n\r\nThe fact that people want to do dumb things is not a reason to support it. I blame blockchain explorers for instituting, and perpetuating, the misunderstanding that Bitcoin wallet balances can be assessed by observing their receive addresses' balances.\r\n\r\nBitcoin Core has never followed the notion that addresses have their own individual balance or can be spent \"from\" (it's not wrong or inconsistent to see things this way, but it contributes to the misunderstanding). I don't think this PR should change that.",
      "created_at": "2024-09-19T14:32:12Z",
      "updated_at": "2024-09-19T14:32:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30708#discussion_r1766950748",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1766950748"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30708"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2659,
      "original_line": 2659,
      "side": "RIGHT"
    }
  ]
}