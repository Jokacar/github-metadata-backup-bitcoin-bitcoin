{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30083",
    "id": 1864518763,
    "node_id": "PR_kwDOABII585vIkxr",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/30083",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/30083.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/30083.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30083",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30083/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30083/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30083/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/04ffe4061da2d0135f206032e167703772b5da78",
    "number": 30083,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "kernel: Remove batchpriority from kernel library",
    "user": {
      "login": "TheCharlatan",
      "id": 8421793,
      "node_id": "MDQ6VXNlcjg0MjE3OTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheCharlatan",
      "html_url": "https://github.com/TheCharlatan",
      "followers_url": "https://api.github.com/users/TheCharlatan/followers",
      "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
      "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
      "repos_url": "https://api.github.com/users/TheCharlatan/repos",
      "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The current usage of ScheduleBatchPriority is not transparent. Once the thread scheduling is changed, it remains unchanged for the remainder of the thread's lifetime. So move the call from `ImportBlocks` to the init code where it is clearer that its effect lasts for the entire lifetime of the thread.\r\n\r\nUsers of the kernel library might not expect `ImportBlocks` to have an influence on the thread it is called in. Particularly since it is only a compile time option and cannot be controlled at runtime. With this patch users of the kernel library can now freely choose their own scheduling policy.\r\n\r\nThis PR is easier reviewed with `git diff --color-moved-ws=ignore-all-space --color-moved=dimmed-zebra`\r\n\r\n---\r\nThis PR is part of the [libbitcoinkernel project](https://github.com/bitcoin/bitcoin/issues/27587).",
    "labels": [
      {
        "id": 118379652,
        "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
        "name": "Validation",
        "color": "6060aa",
        "default": false
      }
    ],
    "created_at": "2024-05-10T20:43:15Z",
    "updated_at": "2024-05-13T18:52:18Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "5bfae48f3b259dddbf3fddd1e3b68cf0e7fc95b6",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "TheCharlatan:rmKernelBatchPriority",
      "ref": "rmKernelBatchPriority",
      "sha": "04ffe4061da2d0135f206032e167703772b5da78",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 94456368,
        "node_id": "MDEwOlJlcG9zaXRvcnk5NDQ1NjM2OA==",
        "name": "bitcoin",
        "full_name": "TheCharlatan/bitcoin",
        "owner": {
          "login": "TheCharlatan",
          "id": 8421793,
          "node_id": "MDQ6VXNlcjg0MjE3OTM=",
          "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/TheCharlatan",
          "html_url": "https://github.com/TheCharlatan",
          "followers_url": "https://api.github.com/users/TheCharlatan/followers",
          "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
          "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
          "repos_url": "https://api.github.com/users/TheCharlatan/repos",
          "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/TheCharlatan/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/TheCharlatan/bitcoin",
        "archive_url": "https://api.github.com/repos/TheCharlatan/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/TheCharlatan/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/TheCharlatan/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/TheCharlatan/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/TheCharlatan/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/TheCharlatan/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/TheCharlatan/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/TheCharlatan/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/TheCharlatan/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/TheCharlatan/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/TheCharlatan/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/TheCharlatan/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/TheCharlatan/bitcoin/events",
        "forks_url": "https://api.github.com/repos/TheCharlatan/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/TheCharlatan/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/TheCharlatan/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/TheCharlatan/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/TheCharlatan/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/TheCharlatan/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/TheCharlatan/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/TheCharlatan/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/TheCharlatan/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/TheCharlatan/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/TheCharlatan/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/TheCharlatan/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/TheCharlatan/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/TheCharlatan/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/TheCharlatan/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/TheCharlatan/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:TheCharlatan/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/TheCharlatan/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/TheCharlatan/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/TheCharlatan/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/TheCharlatan/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/TheCharlatan/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/TheCharlatan/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/TheCharlatan/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/TheCharlatan/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/TheCharlatan/bitcoin/hooks",
        "svn_url": "https://github.com/TheCharlatan/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 237474,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-05-11T11:27:37Z",
        "created_at": "2017-06-15T16:03:35Z",
        "updated_at": "2024-05-11T08:42:28Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "2cedb42a928fbf3a1e0e8715e918497cbe64af0d",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35401,
        "stargazers_count": 76359,
        "watchers_count": 76359,
        "size": 258388,
        "default_branch": "master",
        "open_issues_count": 692,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-05-13T18:28:04Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-05-13T17:47:15Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30083"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 54,
    "deletions": 57,
    "changed_files": 3,
    "commits": 1,
    "review_comments": 3,
    "comments": 2
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDA0ZmZlNDA2MWRhMmQwMTM1ZjIwNjAzMmUxNjc3MDM3NzJiNWRhNzg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/04ffe4061da2d0135f206032e167703772b5da78",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/04ffe4061da2d0135f206032e167703772b5da78",
      "tree": {
        "sha": "d448edfe315e0cf08fac47b7a8cdb28e782125b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d448edfe315e0cf08fac47b7a8cdb28e782125b6"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d448edfe315e0cf08fac47b7a8cdb28e782125b6\nparent 6f1d9064381d834b0f8daa9011f18ba40834d85a\nauthor TheCharlatan <seb.kung@gmail.com> 1715371834 +0200\ncommitter TheCharlatan <seb.kung@gmail.com> 1715372897 +0200\n\nkernel: Remove batchpriority from kernel library\n\nThe current usage of ScheduleBatchPriority is not transparent. Once the\nthread scheduling is changed, it remains unchanged for the remainder of\nthe thread's lifetime. So move the call from `ImportBlocks` to the init\ncode where it is clearer that its effect lasts for the entire lifetime\nof the thread.\n\nUsers of the kernel library might not expect `ImportBlocks` to have an\ninfluence on the thread it is called in. Particularly since it is only a\ncompile time option and cannot be controlled at runtime. With this patch\nusers of the kernel library can now choose their own scheduling policy.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8s/Eq9C5nYN+67fQm3m0VpHbQXMFAmY+g2IACgkQm3m0VpHb\nQXMCyg/8DdDNQA/rVoXkIVu1IxhOF+P3h6O+ujxb9t/iVLRbfYk0xzPJyl55+2n5\n/qGCRBmvLoSMNafKtJG6kyEpKF57IWG15gw08NBOBKrIqZhUZbPHMpfHvbxXt1Ff\nF5fDroEjMGTAHemn+WCmyevL/KMpFcWDTdDWt3dqc939KgO2EnaLZ9XpdkDLkPzn\n1qIA1O3ZGFwxkculo62mzOfgrC+erlFUe8uidmSS5rNtFhSSxdHucoCITi1rctak\nvlOi/omn49/tPTQDLWOuNfdDIdo1jkv6+pCHFhLMvzwWa26j5CkEeM65UW6fkIq7\neajoc4IawARSycbYJ/56HZTGVMs/PiqU3Xtnncy2PK2G7GLMvLJ1sR7NBKCwEvi9\nwDjVPz8LP9NQEJVnJBQDs/1XSRoAAjiGJMLsvFNlvoaJQNWHbxwUV31SLvBX+urE\ne69b20OAuY718j6qVLDeGge2648C2G05WqBHpZUe/9BJN/Pw8lLJ5LyYFXpJRN5/\nYImG9shMRFJpjjMVet87IIRGnGNihmyPkqBhWIjPkEB74PjSuiGdFzmW6eC7eslt\nbxi0KAmoNgWYb0zirw2Gyf2yx8/w6bE+Qx83SYk+hWgkmK7ijOt3PbuKDpdQVtxI\nXMaObxb7XTIPeCNtwBDZ1ZjfSAaVtSj8E1GGncXNEEoYzkClC+w=\n=Lk1I\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f1d9064381d834b0f8daa9011f18ba40834d85a",
          "sha": "6f1d9064381d834b0f8daa9011f18ba40834d85a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6f1d9064381d834b0f8daa9011f18ba40834d85a"
        }
      ],
      "message": "kernel: Remove batchpriority from kernel library\n\nThe current usage of ScheduleBatchPriority is not transparent. Once the\nthread scheduling is changed, it remains unchanged for the remainder of\nthe thread's lifetime. So move the call from `ImportBlocks` to the init\ncode where it is clearer that its effect lasts for the entire lifetime\nof the thread.\n\nUsers of the kernel library might not expect `ImportBlocks` to have an\ninfluence on the thread it is called in. Particularly since it is only a\ncompile time option and cannot be controlled at runtime. With this patch\nusers of the kernel library can now choose their own scheduling policy.",
      "committer": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-05-10T20:28:17Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2024-05-10T20:10:34Z"
      },
      "sha": "04ffe4061da2d0135f206032e167703772b5da78"
    },
    {
      "event": "commented",
      "id": 2105247787,
      "node_id": "IC_kwDOABII5859e4gr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2105247787",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-10T20:43:17Z",
      "updated_at": "2024-05-13T16:35:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/30083).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [maflcko](https://github.com/bitcoin/bitcoin/pull/30083#issuecomment-2107333523), [ryanofsky](https://github.com/bitcoin/bitcoin/pull/30083#pullrequestreview-2053188813) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30083#issuecomment-2105247787",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30083"
    },
    {
      "event": "labeled",
      "id": 12773919780,
      "node_id": "LE_lADOABII586IhJQWzwAAAAL5Yowk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12773919780",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-10T20:43:19Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "commented",
      "id": 2107333523,
      "node_id": "IC_kwDOABII5859m1uT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2107333523",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-13T11:31:10Z",
      "updated_at": "2024-05-13T11:31:10Z",
      "author_association": "MEMBER",
      "body": "utACK 04ffe4061da2d0135f206032e167703772b5da78 🎪\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\nuntrusted comment: signature from minisign secret key on empty file; verify via: minisign -Vm \"${path_to_any_empty_file}\" -P RWTRmVTMeKV5noAMqVlsMugDDCyyTSbA3Re5AkUrhvLVln0tSaFWglOw -x \"${path_to_this_whole_four_line_signature_blob}\"\r\nRUTRmVTMeKV5npGrKx1nqXCw5zeVHdtdYURB/KlyA/LMFgpNCs+SkW9a8N95d+U4AP1RJMi+krxU1A3Yux4bpwZNLvVBKy0wLgM=\r\ntrusted comment: utACK 04ffe4061da2d0135f206032e167703772b5da78 🎪\r\n+qesV40tSRVM79Z50q9pkaw6EHghp2f2kaOTAqmPSZrbiwPdZpTUZ9LRm10oH73eRU6lRi7LFaZGDceW1rZzDg==\r\n```\r\n\r\n</details>\r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30083#issuecomment-2107333523",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30083"
    },
    {
      "event": "reviewed",
      "id": 2053188813,
      "node_id": "PRR_kwDOABII5856YSzN",
      "url": null,
      "actor": null,
      "commit_id": "04ffe4061da2d0135f206032e167703772b5da78",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 04ffe4061da2d0135f206032e167703772b5da78, this is an obvious improvement",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30083#pullrequestreview-2053188813",
      "submitted_at": "2024-05-13T16:35:31Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30083"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598754079",
      "pull_request_review_id": 2053188813,
      "id": 1598754079,
      "node_id": "PRRC_kwDOABII585fSw0f",
      "diff_hunk": "@@ -1175,69 +1175,65 @@ class ImportingNow\n \n void ImportBlocks(ChainstateManager& chainman, std::vector<fs::path> vImportFiles)\n {\n-    ScheduleBatchPriority();\n-\n-    {\n-        ImportingNow imp{chainman.m_blockman.m_importing};\n-\n-        // -reindex\n-        if (fReindex) {\n-            int nFile = 0;\n-            // Map of disk positions for blocks with unknown parent (only used for reindex);\n-            // parent hash -> child disk position, multiple children can have the same parent.\n-            std::multimap<uint256, FlatFilePos> blocks_with_unknown_parent;\n-            while (true) {\n-                FlatFilePos pos(nFile, 0);\n-                if (!fs::exists(chainman.m_blockman.GetBlockPosFilename(pos))) {\n-                    break; // No block files left to reindex\n-                }\n-                AutoFile file{chainman.m_blockman.OpenBlockFile(pos, true)};\n-                if (file.IsNull()) {\n-                    break; // This error is logged in OpenBlockFile\n-                }\n-                LogPrintf(\"Reindexing block file blk%05u.dat...\\n\", (unsigned int)nFile);\n-                chainman.LoadExternalBlockFile(file, &pos, &blocks_with_unknown_parent);\n-                if (chainman.m_interrupt) {\n-                    LogPrintf(\"Interrupt requested. Exit %s\\n\", __func__);\n-                    return;\n-                }\n-                nFile++;\n+    ImportingNow imp{chainman.m_blockman.m_importing};\n+\n+    // -reindex\n+    if (fReindex) {\n+        int nFile = 0;\n+        // Map of disk positions for blocks with unknown parent (only used for reindex);\n+        // parent hash -> child disk position, multiple children can have the same parent.\n+        std::multimap<uint256, FlatFilePos> blocks_with_unknown_parent;\n+        while (true) {\n+            FlatFilePos pos(nFile, 0);\n+            if (!fs::exists(chainman.m_blockman.GetBlockPosFilename(pos))) {\n+                break; // No block files left to reindex\n             }\n-            WITH_LOCK(::cs_main, chainman.m_blockman.m_block_tree_db->WriteReindexing(false));\n-            fReindex = false;\n-            LogPrintf(\"Reindexing finished\\n\");\n-            // To avoid ending up in a situation without genesis block, re-try initializing (no-op if reindexing worked):\n-            chainman.ActiveChainstate().LoadGenesisBlock();\n+            AutoFile file{chainman.m_blockman.OpenBlockFile(pos, true)};\n+            if (file.IsNull()) {\n+                break; // This error is logged in OpenBlockFile\n+            }\n+            LogPrintf(\"Reindexing block file blk%05u.dat...\\n\", (unsigned int)nFile);\n+            chainman.LoadExternalBlockFile(file, &pos, &blocks_with_unknown_parent);\n+            if (chainman.m_interrupt) {\n+                LogPrintf(\"Interrupt requested. Exit %s\\n\", __func__);\n+                return;\n+            }\n+            nFile++;\n         }\n-\n-        // -loadblock=\n-        for (const fs::path& path : vImportFiles) {\n-            AutoFile file{fsbridge::fopen(path, \"rb\")};\n-            if (!file.IsNull()) {\n-                LogPrintf(\"Importing blocks file %s...\\n\", fs::PathToString(path));\n-                chainman.LoadExternalBlockFile(file);\n-                if (chainman.m_interrupt) {\n-                    LogPrintf(\"Interrupt requested. Exit %s\\n\", __func__);\n-                    return;\n-                }\n-            } else {\n-                LogPrintf(\"Warning: Could not open blocks file %s\\n\", fs::PathToString(path));\n+        WITH_LOCK(::cs_main, chainman.m_blockman.m_block_tree_db->WriteReindexing(false));\n+        fReindex = false;\n+        LogPrintf(\"Reindexing finished\\n\");\n+        // To avoid ending up in a situation without genesis block, re-try initializing (no-op if reindexing worked):\n+        chainman.ActiveChainstate().LoadGenesisBlock();\n+    }\n+\n+    // -loadblock=\n+    for (const fs::path& path : vImportFiles) {\n+        AutoFile file{fsbridge::fopen(path, \"rb\")};\n+        if (!file.IsNull()) {\n+            LogPrintf(\"Importing blocks file %s...\\n\", fs::PathToString(path));\n+            chainman.LoadExternalBlockFile(file);\n+            if (chainman.m_interrupt) {\n+                LogPrintf(\"Interrupt requested. Exit %s\\n\", __func__);\n+                return;\n             }\n+        } else {\n+            LogPrintf(\"Warning: Could not open blocks file %s\\n\", fs::PathToString(path));\n         }\n+    }\n \n-        // scan for better chains in the block chain database, that are not yet connected in the active best chain\n+    // scan for better chains in the block chain database, that are not yet connected in the active best chain\n \n-        // We can't hold cs_main during ActivateBestChain even though we're accessing\n-        // the chainman unique_ptrs since ABC requires us not to be holding cs_main, so retrieve\n-        // the relevant pointers before the ABC call.\n-        for (Chainstate* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n-            BlockValidationState state;\n-            if (!chainstate->ActivateBestChain(state, nullptr)) {\n-                chainman.GetNotifications().fatalError(strprintf(_(\"Failed to connect best block (%s).\"), state.ToString()));\n-                return;\n-            }\n+    // We can't hold cs_main during ActivateBestChain even though we're accessing\n+    // the chainman unique_ptrs since ABC requires us not to be holding cs_main, so retrieve\n+    // the relevant pointers before the ABC call.\n+    for (Chainstate* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n+        BlockValidationState state;\n+        if (!chainstate->ActivateBestChain(state, nullptr)) {\n+            chainman.GetNotifications().fatalError(strprintf(_(\"Failed to connect best block (%s).\"), state.ToString()));\n+            return;\n         }\n-    } // End scope of ImportingNow",
      "path": "src/node/blockstorage.cpp",
      "position": 117,
      "original_position": 117,
      "commit_id": "04ffe4061da2d0135f206032e167703772b5da78",
      "original_commit_id": "04ffe4061da2d0135f206032e167703772b5da78",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"kernel: Remove batchpriority from kernel library\" (04ffe4061da2d0135f206032e167703772b5da78)\r\n\r\nI think it might be useful to keep the `// End scope of ImportNow` comment here. If someone is adding new code at this point, it's possible they might want to add it with importing set to false, or importing set to true, so the comment would be a reminder that the value will change at this point.",
      "created_at": "2024-05-13T16:34:05Z",
      "updated_at": "2024-05-13T16:35:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30083#discussion_r1598754079",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598754079"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30083"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1240,
      "original_line": 1240,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598809395",
      "pull_request_review_id": 2053295748,
      "id": 1598809395,
      "node_id": "PRRC_kwDOABII585fS-Uz",
      "diff_hunk": "@@ -1175,69 +1175,65 @@ class ImportingNow\n \n void ImportBlocks(ChainstateManager& chainman, std::vector<fs::path> vImportFiles)\n {\n-    ScheduleBatchPriority();\n-\n-    {\n-        ImportingNow imp{chainman.m_blockman.m_importing};\n-\n-        // -reindex\n-        if (fReindex) {\n-            int nFile = 0;\n-            // Map of disk positions for blocks with unknown parent (only used for reindex);\n-            // parent hash -> child disk position, multiple children can have the same parent.\n-            std::multimap<uint256, FlatFilePos> blocks_with_unknown_parent;\n-            while (true) {\n-                FlatFilePos pos(nFile, 0);\n-                if (!fs::exists(chainman.m_blockman.GetBlockPosFilename(pos))) {\n-                    break; // No block files left to reindex\n-                }\n-                AutoFile file{chainman.m_blockman.OpenBlockFile(pos, true)};\n-                if (file.IsNull()) {\n-                    break; // This error is logged in OpenBlockFile\n-                }\n-                LogPrintf(\"Reindexing block file blk%05u.dat...\\n\", (unsigned int)nFile);\n-                chainman.LoadExternalBlockFile(file, &pos, &blocks_with_unknown_parent);\n-                if (chainman.m_interrupt) {\n-                    LogPrintf(\"Interrupt requested. Exit %s\\n\", __func__);\n-                    return;\n-                }\n-                nFile++;\n+    ImportingNow imp{chainman.m_blockman.m_importing};\n+\n+    // -reindex\n+    if (fReindex) {\n+        int nFile = 0;\n+        // Map of disk positions for blocks with unknown parent (only used for reindex);\n+        // parent hash -> child disk position, multiple children can have the same parent.\n+        std::multimap<uint256, FlatFilePos> blocks_with_unknown_parent;\n+        while (true) {\n+            FlatFilePos pos(nFile, 0);\n+            if (!fs::exists(chainman.m_blockman.GetBlockPosFilename(pos))) {\n+                break; // No block files left to reindex\n             }\n-            WITH_LOCK(::cs_main, chainman.m_blockman.m_block_tree_db->WriteReindexing(false));\n-            fReindex = false;\n-            LogPrintf(\"Reindexing finished\\n\");\n-            // To avoid ending up in a situation without genesis block, re-try initializing (no-op if reindexing worked):\n-            chainman.ActiveChainstate().LoadGenesisBlock();\n+            AutoFile file{chainman.m_blockman.OpenBlockFile(pos, true)};\n+            if (file.IsNull()) {\n+                break; // This error is logged in OpenBlockFile\n+            }\n+            LogPrintf(\"Reindexing block file blk%05u.dat...\\n\", (unsigned int)nFile);\n+            chainman.LoadExternalBlockFile(file, &pos, &blocks_with_unknown_parent);\n+            if (chainman.m_interrupt) {\n+                LogPrintf(\"Interrupt requested. Exit %s\\n\", __func__);\n+                return;\n+            }\n+            nFile++;\n         }\n-\n-        // -loadblock=\n-        for (const fs::path& path : vImportFiles) {\n-            AutoFile file{fsbridge::fopen(path, \"rb\")};\n-            if (!file.IsNull()) {\n-                LogPrintf(\"Importing blocks file %s...\\n\", fs::PathToString(path));\n-                chainman.LoadExternalBlockFile(file);\n-                if (chainman.m_interrupt) {\n-                    LogPrintf(\"Interrupt requested. Exit %s\\n\", __func__);\n-                    return;\n-                }\n-            } else {\n-                LogPrintf(\"Warning: Could not open blocks file %s\\n\", fs::PathToString(path));\n+        WITH_LOCK(::cs_main, chainman.m_blockman.m_block_tree_db->WriteReindexing(false));\n+        fReindex = false;\n+        LogPrintf(\"Reindexing finished\\n\");\n+        // To avoid ending up in a situation without genesis block, re-try initializing (no-op if reindexing worked):\n+        chainman.ActiveChainstate().LoadGenesisBlock();\n+    }\n+\n+    // -loadblock=\n+    for (const fs::path& path : vImportFiles) {\n+        AutoFile file{fsbridge::fopen(path, \"rb\")};\n+        if (!file.IsNull()) {\n+            LogPrintf(\"Importing blocks file %s...\\n\", fs::PathToString(path));\n+            chainman.LoadExternalBlockFile(file);\n+            if (chainman.m_interrupt) {\n+                LogPrintf(\"Interrupt requested. Exit %s\\n\", __func__);\n+                return;\n             }\n+        } else {\n+            LogPrintf(\"Warning: Could not open blocks file %s\\n\", fs::PathToString(path));\n         }\n+    }\n \n-        // scan for better chains in the block chain database, that are not yet connected in the active best chain\n+    // scan for better chains in the block chain database, that are not yet connected in the active best chain\n \n-        // We can't hold cs_main during ActivateBestChain even though we're accessing\n-        // the chainman unique_ptrs since ABC requires us not to be holding cs_main, so retrieve\n-        // the relevant pointers before the ABC call.\n-        for (Chainstate* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n-            BlockValidationState state;\n-            if (!chainstate->ActivateBestChain(state, nullptr)) {\n-                chainman.GetNotifications().fatalError(strprintf(_(\"Failed to connect best block (%s).\"), state.ToString()));\n-                return;\n-            }\n+    // We can't hold cs_main during ActivateBestChain even though we're accessing\n+    // the chainman unique_ptrs since ABC requires us not to be holding cs_main, so retrieve\n+    // the relevant pointers before the ABC call.\n+    for (Chainstate* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n+        BlockValidationState state;\n+        if (!chainstate->ActivateBestChain(state, nullptr)) {\n+            chainman.GetNotifications().fatalError(strprintf(_(\"Failed to connect best block (%s).\"), state.ToString()));\n+            return;\n         }\n-    } // End scope of ImportingNow",
      "path": "src/node/blockstorage.cpp",
      "position": 117,
      "original_position": 117,
      "commit_id": "04ffe4061da2d0135f206032e167703772b5da78",
      "original_commit_id": "04ffe4061da2d0135f206032e167703772b5da78",
      "in_reply_to_id": 1598754079,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do you want to preserve the comment or the scoping? I was on the fence about this, but decided to drop the scoping after the introduced RAII wrappers for the ECC context, which don't scope either: https://github.com/bitcoin/bitcoin/pull/29252/files#diff-dbfadb3e0332664bff298a329b1d27065d2decbbe43fd391388af18f5861c114R17\r\n\r\nBesides, I don't think it is likely that his function will grow. It is finally scoped in a reasonably limited way now. If a more functionality is added, it should probably go in another function and removing the scoping as done here encourages that.",
      "created_at": "2024-05-13T17:23:28Z",
      "updated_at": "2024-05-13T17:23:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30083#discussion_r1598809395",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598809395"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30083"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1240,
      "original_line": 1240,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598906084",
      "pull_request_review_id": 2053461704,
      "id": 1598906084,
      "node_id": "PRRC_kwDOABII585fTV7k",
      "diff_hunk": "@@ -1175,69 +1175,65 @@ class ImportingNow\n \n void ImportBlocks(ChainstateManager& chainman, std::vector<fs::path> vImportFiles)\n {\n-    ScheduleBatchPriority();\n-\n-    {\n-        ImportingNow imp{chainman.m_blockman.m_importing};\n-\n-        // -reindex\n-        if (fReindex) {\n-            int nFile = 0;\n-            // Map of disk positions for blocks with unknown parent (only used for reindex);\n-            // parent hash -> child disk position, multiple children can have the same parent.\n-            std::multimap<uint256, FlatFilePos> blocks_with_unknown_parent;\n-            while (true) {\n-                FlatFilePos pos(nFile, 0);\n-                if (!fs::exists(chainman.m_blockman.GetBlockPosFilename(pos))) {\n-                    break; // No block files left to reindex\n-                }\n-                AutoFile file{chainman.m_blockman.OpenBlockFile(pos, true)};\n-                if (file.IsNull()) {\n-                    break; // This error is logged in OpenBlockFile\n-                }\n-                LogPrintf(\"Reindexing block file blk%05u.dat...\\n\", (unsigned int)nFile);\n-                chainman.LoadExternalBlockFile(file, &pos, &blocks_with_unknown_parent);\n-                if (chainman.m_interrupt) {\n-                    LogPrintf(\"Interrupt requested. Exit %s\\n\", __func__);\n-                    return;\n-                }\n-                nFile++;\n+    ImportingNow imp{chainman.m_blockman.m_importing};\n+\n+    // -reindex\n+    if (fReindex) {\n+        int nFile = 0;\n+        // Map of disk positions for blocks with unknown parent (only used for reindex);\n+        // parent hash -> child disk position, multiple children can have the same parent.\n+        std::multimap<uint256, FlatFilePos> blocks_with_unknown_parent;\n+        while (true) {\n+            FlatFilePos pos(nFile, 0);\n+            if (!fs::exists(chainman.m_blockman.GetBlockPosFilename(pos))) {\n+                break; // No block files left to reindex\n             }\n-            WITH_LOCK(::cs_main, chainman.m_blockman.m_block_tree_db->WriteReindexing(false));\n-            fReindex = false;\n-            LogPrintf(\"Reindexing finished\\n\");\n-            // To avoid ending up in a situation without genesis block, re-try initializing (no-op if reindexing worked):\n-            chainman.ActiveChainstate().LoadGenesisBlock();\n+            AutoFile file{chainman.m_blockman.OpenBlockFile(pos, true)};\n+            if (file.IsNull()) {\n+                break; // This error is logged in OpenBlockFile\n+            }\n+            LogPrintf(\"Reindexing block file blk%05u.dat...\\n\", (unsigned int)nFile);\n+            chainman.LoadExternalBlockFile(file, &pos, &blocks_with_unknown_parent);\n+            if (chainman.m_interrupt) {\n+                LogPrintf(\"Interrupt requested. Exit %s\\n\", __func__);\n+                return;\n+            }\n+            nFile++;\n         }\n-\n-        // -loadblock=\n-        for (const fs::path& path : vImportFiles) {\n-            AutoFile file{fsbridge::fopen(path, \"rb\")};\n-            if (!file.IsNull()) {\n-                LogPrintf(\"Importing blocks file %s...\\n\", fs::PathToString(path));\n-                chainman.LoadExternalBlockFile(file);\n-                if (chainman.m_interrupt) {\n-                    LogPrintf(\"Interrupt requested. Exit %s\\n\", __func__);\n-                    return;\n-                }\n-            } else {\n-                LogPrintf(\"Warning: Could not open blocks file %s\\n\", fs::PathToString(path));\n+        WITH_LOCK(::cs_main, chainman.m_blockman.m_block_tree_db->WriteReindexing(false));\n+        fReindex = false;\n+        LogPrintf(\"Reindexing finished\\n\");\n+        // To avoid ending up in a situation without genesis block, re-try initializing (no-op if reindexing worked):\n+        chainman.ActiveChainstate().LoadGenesisBlock();\n+    }\n+\n+    // -loadblock=\n+    for (const fs::path& path : vImportFiles) {\n+        AutoFile file{fsbridge::fopen(path, \"rb\")};\n+        if (!file.IsNull()) {\n+            LogPrintf(\"Importing blocks file %s...\\n\", fs::PathToString(path));\n+            chainman.LoadExternalBlockFile(file);\n+            if (chainman.m_interrupt) {\n+                LogPrintf(\"Interrupt requested. Exit %s\\n\", __func__);\n+                return;\n             }\n+        } else {\n+            LogPrintf(\"Warning: Could not open blocks file %s\\n\", fs::PathToString(path));\n         }\n+    }\n \n-        // scan for better chains in the block chain database, that are not yet connected in the active best chain\n+    // scan for better chains in the block chain database, that are not yet connected in the active best chain\n \n-        // We can't hold cs_main during ActivateBestChain even though we're accessing\n-        // the chainman unique_ptrs since ABC requires us not to be holding cs_main, so retrieve\n-        // the relevant pointers before the ABC call.\n-        for (Chainstate* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n-            BlockValidationState state;\n-            if (!chainstate->ActivateBestChain(state, nullptr)) {\n-                chainman.GetNotifications().fatalError(strprintf(_(\"Failed to connect best block (%s).\"), state.ToString()));\n-                return;\n-            }\n+    // We can't hold cs_main during ActivateBestChain even though we're accessing\n+    // the chainman unique_ptrs since ABC requires us not to be holding cs_main, so retrieve\n+    // the relevant pointers before the ABC call.\n+    for (Chainstate* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n+        BlockValidationState state;\n+        if (!chainstate->ActivateBestChain(state, nullptr)) {\n+            chainman.GetNotifications().fatalError(strprintf(_(\"Failed to connect best block (%s).\"), state.ToString()));\n+            return;\n         }\n-    } // End scope of ImportingNow",
      "path": "src/node/blockstorage.cpp",
      "position": 117,
      "original_position": 117,
      "commit_id": "04ffe4061da2d0135f206032e167703772b5da78",
      "original_commit_id": "04ffe4061da2d0135f206032e167703772b5da78",
      "in_reply_to_id": 1598754079,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30083#discussion_r1598809395\r\n\r\nWhatever you prefer is good. I like getting rid of the nested scope, and the current PR is fine. I was just suggesting keeping the comment as a reminder that the import variable would be change to false at that point.",
      "created_at": "2024-05-13T18:52:18Z",
      "updated_at": "2024-05-13T18:52:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30083#discussion_r1598906084",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598906084"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30083"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1240,
      "original_line": 1240,
      "side": "LEFT"
    }
  ]
}