{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
    "id": 975730425,
    "node_id": "PR_kwDOABII5846KHb5",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/25454",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/25454.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/25454.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25454",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25454/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
    "number": 25454,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "p2p: Avoid multiple getheaders messages in flight to the same peer",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Change `getheaders` messages so that we wait up to 2 minutes for a response to a prior `getheaders` message before issuing a new one.\r\n\r\nAlso change the handling of the `getheaders` message sent in response to a block INV, so that we no longer use the hashstop variable (including the hash stop will just mean that if our peer's headers chain is longer, then we won't learn\r\nit, so there's no benefit to using hashstop).\r\n\r\nAlso, now respond to a `getheaders` during IBD with an empty headers message (rather than nothing) -- this better conforms to the intent of the new logic that it's better to not ignore a peer's `getheaders` message, even if you have nothing to give. This also avoids a lot of functional tests breaking.\r\n\r\nThis PR also reworks the headers processing logic to make it more readable.",
    "labels": [
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      }
    ],
    "milestone": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54",
      "html_url": "https://github.com/bitcoin/bitcoin/milestone/54",
      "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54/labels",
      "id": 7150037,
      "node_id": "MI_kwDOABII584AbRnV",
      "number": 54,
      "state": "closed",
      "title": "24.0",
      "description": "",
      "creator": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 0,
      "closed_issues": 159,
      "created_at": "2021-09-14T08:27:02Z",
      "updated_at": "2022-11-29T15:44:44Z",
      "closed_at": "2022-11-29T15:44:44Z"
    },
    "created_at": "2022-06-22T20:25:22Z",
    "updated_at": "2024-03-29T12:40:40Z",
    "closed_at": "2022-07-04T20:28:46Z",
    "mergeable_state": "unknown",
    "merged_at": "2022-07-04T20:28:46Z",
    "merge_commit_sha": "87d012324afa285221073540781295f1b7381a15",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "sdaftuar:2022-06-single-getheaders",
      "ref": "2022-06-single-getheaders",
      "sha": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 28761781,
        "node_id": "MDEwOlJlcG9zaXRvcnkyODc2MTc4MQ==",
        "name": "bitcoin",
        "full_name": "sdaftuar/bitcoin",
        "owner": {
          "login": "sdaftuar",
          "id": 7463573,
          "node_id": "MDQ6VXNlcjc0NjM1NzM=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sdaftuar",
          "html_url": "https://github.com/sdaftuar",
          "followers_url": "https://api.github.com/users/sdaftuar/followers",
          "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
          "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
          "repos_url": "https://api.github.com/users/sdaftuar/repos",
          "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/sdaftuar/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/sdaftuar/bitcoin",
        "archive_url": "https://api.github.com/repos/sdaftuar/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/sdaftuar/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/sdaftuar/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/sdaftuar/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/sdaftuar/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/sdaftuar/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/sdaftuar/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/sdaftuar/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/sdaftuar/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/sdaftuar/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/sdaftuar/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/sdaftuar/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/sdaftuar/bitcoin/events",
        "forks_url": "https://api.github.com/repos/sdaftuar/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/sdaftuar/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/sdaftuar/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/sdaftuar/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/sdaftuar/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/sdaftuar/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/sdaftuar/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/sdaftuar/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/sdaftuar/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/sdaftuar/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/sdaftuar/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/sdaftuar/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/sdaftuar/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/sdaftuar/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/sdaftuar/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/sdaftuar/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:sdaftuar/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/sdaftuar/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/sdaftuar/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/sdaftuar/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/sdaftuar/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/sdaftuar/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/sdaftuar/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/sdaftuar/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/sdaftuar/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/sdaftuar/bitcoin/hooks",
        "svn_url": "https://github.com/sdaftuar/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 2,
        "stargazers_count": 4,
        "watchers_count": 4,
        "size": 264282,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-03-28T19:08:45Z",
        "created_at": "2015-01-04T02:52:13Z",
        "updated_at": "2024-02-09T22:47:48Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "ca08e00a1b1e8c04b5a83e3f95b7ca14c35ae23e",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34942,
        "stargazers_count": 75111,
        "watchers_count": 75111,
        "size": 253916,
        "default_branch": "master",
        "open_issues_count": 718,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-03-29T11:41:12Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-03-29T12:44:11Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 292,
    "deletions": 177,
    "changed_files": 3,
    "commits": 9,
    "review_comments": 63,
    "comments": 9
  },
  "events": [
    {
      "event": "labeled",
      "id": 6859731414,
      "node_id": "LE_lADOABII585MV_-_zwAAAAGY3zHW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6859731414",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-22T20:26:12Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "commented",
      "id": 1163567385,
      "node_id": "IC_kwDOABII585FWqEZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1163567385",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-22T20:26:27Z",
      "updated_at": "2022-06-22T20:26:27Z",
      "author_association": "MEMBER",
      "body": "@ajtowns This should fix the issue you've seen in functional tests, where generating a bunch of blocks at once can result in O(n^2) headers downloads.",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#issuecomment-1163567385",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25454"
    },
    {
      "event": "mentioned",
      "id": 6859733122,
      "node_id": "MEE_lADOABII585MV_-_zwAAAAGY3ziC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6859733122",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-22T20:26:28Z"
    },
    {
      "event": "subscribed",
      "id": 6859733127,
      "node_id": "SE_lADOABII585MV_-_zwAAAAGY3ziH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6859733127",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-22T20:26:28Z"
    },
    {
      "event": "reviewed",
      "id": 1016167029,
      "node_id": "PRR_kwDOABII5848kXp1",
      "url": null,
      "actor": null,
      "commit_id": "ccda6c1612d968f3b0d3ac3da98e7917d4affca8",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "joani24",
        "id": 102772612,
        "node_id": "U_kgDOBiAvhA",
        "avatar_url": "https://avatars.githubusercontent.com/u/102772612?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joani24",
        "html_url": "https://github.com/joani24",
        "followers_url": "https://api.github.com/users/joani24/followers",
        "following_url": "https://api.github.com/users/joani24/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/joani24/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/joani24/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/joani24/subscriptions",
        "organizations_url": "https://api.github.com/users/joani24/orgs",
        "repos_url": "https://api.github.com/users/joani24/repos",
        "events_url": "https://api.github.com/users/joani24/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/joani24/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#pullrequestreview-1016167029",
      "submitted_at": "2022-06-23T00:01:40Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6862045789,
      "node_id": "HRFPE_lADOABII585MV_-_zwAAAAGZAoJd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6862045789",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-23T02:00:09Z"
    },
    {
      "event": "commented",
      "id": 1163888510,
      "node_id": "IC_kwDOABII585FX4d-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1163888510",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-23T03:37:48Z",
      "updated_at": "2022-06-30T20:38:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#25515](https://github.com/bitcoin/bitcoin/pull/25515) ([draft] PeerManager unit tests by dergoegge)\n* [#25514](https://github.com/bitcoin/bitcoin/pull/25514) (net processing: Move CNode::nServices and CNode::nLocalServices to Peer by dergoegge)\n* [#25268](https://github.com/bitcoin/bitcoin/pull/25268) (refactor: Introduce EvictionManager by dergoegge)\n* [#25203](https://github.com/bitcoin/bitcoin/pull/25203) (logging: update to severity-based logging by jonatack)\n* [#24571](https://github.com/bitcoin/bitcoin/pull/24571) (p2p: Prevent block index fingerprinting by sending additional getheaders messages by dergoegge)\n* [#24008](https://github.com/bitcoin/bitcoin/pull/24008) (assumeutxo: net_processing changes by jamesob)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#issuecomment-1163888510",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25454"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-23T04:02:46Z",
      "updated_at": "2022-06-23T04:02:46Z",
      "source": {
        "issue": {
          "id": 1275444957,
          "node_id": "PR_kwDOABII58454AyI",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25404",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25404/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25404/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25404/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25404",
          "number": 25404,
          "state": "closed",
          "state_reason": null,
          "title": "p2p, doc: Use MAX_BLOCKS_TO_ANNOUNCE consistently",
          "body": "Block announcements via headers may have up to `MAX_BLOCKS_TO_ANNOUNCE = 8` entries according to the definition of this constant.\r\nHowever, there are a few spots saying they should have a size _less than_ `MAX_BLOCKS_TO_ANNOUNCE`. Fix these.\r\nI don't think that this is critical (this only changes behavior when we get a headers announcement with exactly `MAX_BLOCKS_TO_ANNOUNCE` blocks which we can't connect), but it would be nice to handle this limit consistently.\r\n",
          "user": {
            "login": "mzumsande",
            "id": 48763452,
            "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
            "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mzumsande",
            "html_url": "https://github.com/mzumsande",
            "followers_url": "https://api.github.com/users/mzumsande/followers",
            "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
            "organizations_url": "https://api.github.com/users/mzumsande/orgs",
            "repos_url": "https://api.github.com/users/mzumsande/repos",
            "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/mzumsande/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25404",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25404",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25404.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25404.patch"
          },
          "closed_at": "2022-06-27T13:22:25Z",
          "created_at": "2022-06-17T20:44:59Z",
          "updated_at": "2023-06-27T10:08:18Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-23T05:02:44Z",
      "updated_at": "2022-06-23T05:02:44Z",
      "source": {
        "issue": {
          "id": 1258121997,
          "node_id": "PR_kwDOABII5844-S2D",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25268",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25268/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25268/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25268/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25268",
          "number": 25268,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Introduce EvictionManager",
          "body": "At the moment, the eviction logic is mangled across two different components (`CConnman`, `PeerManager`), so we can't really test it in isolation. This is not completely true for the inbound eviction logic as it exists as static functions in `net.{h.cpp}` for which tests already exist. However, the outbound eviction logic is not covered by any fuzz tests and is only testable by spinning up both a connman and peerman.\r\n\r\nThis PR splits out the eviction logic into its own component `EvictionManager`. In addition to isolating the eviction logic, we get rid of several layer violations (e.g. `CConnman::ForEachNode/ForNode` calls, `CNode::m_last_block_time`, etc.) between `net` and `net processing`.\r\n\r\nOne instance of the `EvictionManager` is created at start up and passed as a reference to the connection and peer managers. The connection and peer managers report all eviction relevant information to the eviction manager who ultimately suggests nodes to evict as the result of `EvictionManager::SelectInboundNodeToEvict` and `EvictionManager::SelectOutboundNodesToEvict`.",
          "user": {
            "login": "dergoegge",
            "id": 8077169,
            "node_id": "MDQ6VXNlcjgwNzcxNjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dergoegge",
            "html_url": "https://github.com/dergoegge",
            "followers_url": "https://api.github.com/users/dergoegge/followers",
            "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
            "organizations_url": "https://api.github.com/users/dergoegge/orgs",
            "repos_url": "https://api.github.com/users/dergoegge/repos",
            "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dergoegge/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 12,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25268",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25268",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25268.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25268.patch"
          },
          "closed_at": "2023-09-28T20:06:22Z",
          "created_at": "2022-06-02T12:34:15Z",
          "updated_at": "2023-09-28T20:06:22Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-23T05:33:54Z",
      "updated_at": "2022-06-23T05:33:54Z",
      "source": {
        "issue": {
          "id": 1237242058,
          "node_id": "PR_kwDOABII58434jdK",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25144",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25144/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25144/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25144/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25144",
          "number": 25144,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Pass Peer& to Misbehaving()",
          "body": "`Misbehaving` has several coding related issues (ignoring the conceptual issues here for now):\r\n* It is public, but it is not supposed to be called from outside of net_processing. Fix that by making it private and creating a public `UnitTestMisbehaving` method for unit testing only.\r\n* It doesn't do anything if a `nullptr` is passed. It would be less confusing to just skip the call instead. Fix that by passing `Peer&` to `Misbehaving()`.\r\n* It calls `GetPeerRef`, causing `!m_peer_mutex` lock annotations to be propagated. This is harmless, but verbose. Fix it by removing the no longer needed call to `GetPeerRef` and the no longer needed lock annotations.",
          "user": {
            "login": "maflcko",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maflcko",
            "html_url": "https://github.com/maflcko",
            "followers_url": "https://api.github.com/users/maflcko/followers",
            "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
            "organizations_url": "https://api.github.com/users/maflcko/orgs",
            "repos_url": "https://api.github.com/users/maflcko/repos",
            "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/maflcko/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25144",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25144",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25144.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25144.patch"
          },
          "closed_at": "2022-06-27T09:23:17Z",
          "created_at": "2022-05-16T14:24:30Z",
          "updated_at": "2023-06-27T10:08:20Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-23T07:18:42Z",
      "updated_at": "2022-06-23T07:18:42Z",
      "source": {
        "issue": {
          "id": 1169929317,
          "node_id": "PR_kwDOABII5840ed8t",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24571",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24571/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24571/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24571/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/24571",
          "number": 24571,
          "state": "closed",
          "state_reason": null,
          "title": "p2p: Prevent block index fingerprinting by sending additional getheaders messages",
          "body": "The block index might contain stale blocks that are not part of the main chain. If a malicious peer is able to probe a node's block index for certain stale blocks then it can use this information to fingerprint the node.\r\n\r\nWhen receiving headers (either through a `cmpctblock` or `headers` messages) a node will send `getheaders` if the predecessor of the first header does not exist. This leaks information from the block index if the predecessor of the header is a stale block because no `getheaders` will be sent in that case revealing that the stale block exists in the index.\r\n\r\nThis PR prevents this fingerprinting by sending additional `getheaders` messages in cases where not doing so leaks the existence of stale blocks. To determine when additional messages should be send, we introduce the `PeerManagerImpl::m_chain_tips_sets` map which keeps track of seen chain tips per network, effectively creating a per network view of the node's global block index.  We only try to accept new headers if they connect to anything in our global index and they connect to our active chain or to a chain that was previously sent to us by a peer on the same network. We send a `getheaders` message should these conditions not be met.",
          "user": {
            "login": "dergoegge",
            "id": 8077169,
            "node_id": "MDQ6VXNlcjgwNzcxNjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dergoegge",
            "html_url": "https://github.com/dergoegge",
            "followers_url": "https://api.github.com/users/dergoegge/followers",
            "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
            "organizations_url": "https://api.github.com/users/dergoegge/orgs",
            "repos_url": "https://api.github.com/users/dergoegge/repos",
            "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dergoegge/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 749416508,
              "node_id": "MDU6TGFiZWw3NDk0MTY1MDg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Up%20for%20grabs",
              "name": "Up for grabs",
              "color": "99a810",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 23,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24571",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/24571",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/24571.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/24571.patch"
          },
          "closed_at": "2023-05-30T15:21:38Z",
          "created_at": "2022-03-15T16:47:34Z",
          "updated_at": "2023-05-30T15:22:31Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1164079513,
      "node_id": "IC_kwDOABII585FYnGZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1164079513",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-23T07:56:17Z",
      "updated_at": "2022-06-23T07:56:17Z",
      "author_association": "MEMBER",
      "body": "Concept ACK, great catch",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#issuecomment-1164079513",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25454"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-23T08:39:40Z",
      "updated_at": "2022-06-23T08:39:40Z",
      "source": {
        "issue": {
          "id": 1096591544,
          "node_id": "PR_kwDOABII584wrFC4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24008",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24008/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24008/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24008/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/24008",
          "number": 24008,
          "state": "closed",
          "state_reason": null,
          "title": "assumeutxo: net_processing changes",
          "body": "This is part of the [assumeutxo project](https://github.com/bitcoin/bitcoin/projects/11) (parent PR: #27596) \r\n\r\n---\r\n\r\nThis PR includes the changes necessary to perform network functionality with multiple chainstates in use. Various pieces of net_processing logic have to be modified in order to support block download that is simultaneous across numerous chainstates.\r\n\r\nChanges include\r\n\r\n- Modify FindNextBlocksToDownload() to parameterize the chainstate\r\n  being worked on.\r\n\r\n- Change GetNodeStateStats to take the max nCommonHeight per peer across\r\n  all chainstates.\r\n\r\n- Add CNodeState::chainstate_to_last_common_block\r\n  * we need this to allow handling for a single peer to distinguish\r\n    between separate chainstates we're simultaneously downloading blocks for\r\n\r\n- Share `requests_available` across chainstates when finding the next blocks\r\n  to download (during calls to FindNextBlocksToDownload()).\r\n\r\n---\r\n\r\nThis PR shares commit https://github.com/jamesob/bitcoin/commit/17906dd52543fb75d2c45de884799b35ec5721f4 with #24006, and is included here so that the two changes can be reviewed in parallel.\r\n\r\nThis PR excludes a small net_processing commit, https://github.com/jamesob/bitcoin/commit/3e6164d96f9a42ecbf34359f6fd1af5413346933, which will be proposed for merge after #24006 since it relies on the introduction of the `BackgroundBlockConnected()` validationinterface event that the indexing changes introduce.\r\n\r\n---\r\n\r\nSome commits here are best reviewed with `--ignore-space-change`.\r\n\r\nUnit-testing net_processing is notoriously difficult and with that in mind I haven't included any unittests here, but in parallel with review of these changes I will attempt to write some tests. Note that this behavior is covered in the functional tests included in the parent PR: https://github.com/jamesob/bitcoin/commit/c4949f2daf05289e76123b3c705277bf735a79d6",
          "user": {
            "login": "jamesob",
            "id": 73197,
            "node_id": "MDQ6VXNlcjczMTk3",
            "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jamesob",
            "html_url": "https://github.com/jamesob",
            "followers_url": "https://api.github.com/users/jamesob/followers",
            "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
            "organizations_url": "https://api.github.com/users/jamesob/orgs",
            "repos_url": "https://api.github.com/users/jamesob/repos",
            "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jamesob/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 17,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24008",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/24008",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/24008.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/24008.patch"
          },
          "closed_at": "2023-05-26T21:26:05Z",
          "created_at": "2022-01-07T19:08:10Z",
          "updated_at": "2023-06-25T04:22:13Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1017522335,
      "node_id": "PRR_kwDOABII5848piif",
      "url": null,
      "actor": null,
      "commit_id": "f757d2a471f806a384a60f8783ccdebdb25cd403",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#pullrequestreview-1017522335",
      "submitted_at": "2022-06-23T19:37:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6873835178,
      "node_id": "HRFPE_lADOABII585MV_-_zwAAAAGZtmaq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6873835178",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-24T12:17:15Z"
    },
    {
      "event": "reviewed",
      "id": 1017752385,
      "node_id": "PRR_kwDOABII5848qatB",
      "url": null,
      "actor": null,
      "commit_id": "f2e3f6d732c13faff9de165044ae11e374f0ba0f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#pullrequestreview-1017752385",
      "submitted_at": "2022-06-24T16:20:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6875665654,
      "node_id": "HRFPE_lADOABII585MV_-_zwAAAAGZ0lT2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6875665654",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-24T17:07:53Z"
    },
    {
      "event": "labeled",
      "id": 6884269351,
      "node_id": "LE_lADOABII585MV_-_zwAAAAGaVZ0n",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6884269351",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-27T11:00:24Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6885046262,
      "node_id": "HRFPE_lADOABII585MV_-_zwAAAAGaYXf2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6885046262",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-27T12:48:50Z"
    },
    {
      "event": "unlabeled",
      "id": 6885186454,
      "node_id": "UNLE_lADOABII585MV_-_zwAAAAGaY5uW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6885186454",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-27T13:06:15Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 6886256799,
      "node_id": "LE_lADOABII585MV_-_zwAAAAGac_Cf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6886256799",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-27T15:15:11Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6888609302,
      "node_id": "HRFPE_lADOABII585MV_-_zwAAAAGal9YW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6888609302",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-27T21:08:29Z"
    },
    {
      "event": "unlabeled",
      "id": 6888754762,
      "node_id": "UNLE_lADOABII585MV_-_zwAAAAGamg5K",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6888754762",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-27T21:31:15Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1021591496,
      "node_id": "PRR_kwDOABII58485D_I",
      "url": null,
      "actor": null,
      "commit_id": "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#pullrequestreview-1021591496",
      "submitted_at": "2022-06-28T12:46:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6894825405,
      "node_id": "HRFPE_lADOABII585MV_-_zwAAAAGa9q-9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6894825405",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-28T14:54:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6896564038,
      "node_id": "HRFPE_lADOABII585MV_-_zwAAAAGbETdG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6896564038",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-28T19:00:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6896626272,
      "node_id": "HRFPE_lADOABII585MV_-_zwAAAAGbEipg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6896626272",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-28T19:11:24Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDdmMjQ1MDg3MWIzZWEwYjRkMDJkNTZiZDJjYTM2NWZjYzI1Y2Y5MGU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e",
      "tree": {
        "sha": "3146cd6799d122677dec4c43d7f8512563430e35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3146cd6799d122677dec4c43d7f8512563430e35"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2111f32f2a6998531871e7792b5208992868ba7f",
          "sha": "2111f32f2a6998531871e7792b5208992868ba7f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2111f32f2a6998531871e7792b5208992868ba7f"
        }
      ],
      "message": "Move handling of unconnecting headers into own function",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2022-06-28T19:53:25Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2022-02-08T22:02:55Z"
      },
      "sha": "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDk0OTJlOTNiZjlmNGE4NDFiZjQzY2E0YjU5Mzg3MWMwODYzZDViNjM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9492e93bf9f4a841bf43ca4b593871c0863d5b63",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9492e93bf9f4a841bf43ca4b593871c0863d5b63",
      "tree": {
        "sha": "672f81b5e33b23d5326b6eb14fd401fd336af2b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/672f81b5e33b23d5326b6eb14fd401fd336af2b2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e",
          "sha": "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e"
        }
      ],
      "message": "Add helper function for checking header continuity",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2022-06-28T19:53:25Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2022-02-08T22:11:30Z"
      },
      "sha": "9492e93bf9f4a841bf43ca4b593871c0863d5b63"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGJmOGVhNmRmNzU3NDljMjdmNzUzYjU2MmM0NzI0YjNmOGQyNjNhZDQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf8ea6df75749c27f753b562c4724b3f8d263ad4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bf8ea6df75749c27f753b562c4724b3f8d263ad4",
      "tree": {
        "sha": "55ea2f671aa53f0b7d81b6e79e86c2fcdb4ae3fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/55ea2f671aa53f0b7d81b6e79e86c2fcdb4ae3fe"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9492e93bf9f4a841bf43ca4b593871c0863d5b63",
          "sha": "9492e93bf9f4a841bf43ca4b593871c0863d5b63",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9492e93bf9f4a841bf43ca4b593871c0863d5b63"
        }
      ],
      "message": "Move additional headers fetching to own function\n\nAlso moves the call to happen directly after validation of a headers message\n(rather than mixed in with other state updates for the peer), and removes an\nincorrect comment in favor of one that explains why headers sync must continue\nfrom the last header a peer has sent.",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2022-06-28T19:53:25Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2022-02-08T22:15:20Z"
      },
      "sha": "bf8ea6df75749c27f753b562c4724b3f8d263ad4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDI5YzQ1MTg1MjIzNDQxOTQzYWI2MTBlNjI5MzdhMTE4YzdjM2E1YjI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29c45185223441943ab610e62937a118c7c3a5b2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/29c45185223441943ab610e62937a118c7c3a5b2",
      "tree": {
        "sha": "42f7820dacee597a7b83f4b9c8aa7d43d0ce9231",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/42f7820dacee597a7b83f4b9c8aa7d43d0ce9231"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf8ea6df75749c27f753b562c4724b3f8d263ad4",
          "sha": "bf8ea6df75749c27f753b562c4724b3f8d263ad4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/bf8ea6df75749c27f753b562c4724b3f8d263ad4"
        }
      ],
      "message": "Move headers-direct-fetch logic into own function",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2022-06-28T19:53:25Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2022-02-08T22:33:32Z"
      },
      "sha": "29c45185223441943ab610e62937a118c7c3a5b2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDJiMzQxZGI3MzE3OTM4NDRmMTI5NDQzNjMxODZlZGVhMjNlYWJkZWI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b341db731793844f12944363186edea23eabdeb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2b341db731793844f12944363186edea23eabdeb",
      "tree": {
        "sha": "7287f3a9e4b508f33f1f1e2ec42585015a906402",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7287f3a9e4b508f33f1f1e2ec42585015a906402"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29c45185223441943ab610e62937a118c7c3a5b2",
          "sha": "29c45185223441943ab610e62937a118c7c3a5b2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/29c45185223441943ab610e62937a118c7c3a5b2"
        }
      ],
      "message": "Move headers direct fetch to end of ProcessHeadersMessage",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2022-06-28T19:53:25Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2022-02-08T22:36:33Z"
      },
      "sha": "2b341db731793844f12944363186edea23eabdeb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZkOTVjZDNlNzQ0NGViYWFhYmI2NGE3Njc4M2VhMzU1MTUzMGYxZDc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d95cd3e7444ebaaabb64a76783ea3551530f1d7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6d95cd3e7444ebaaabb64a76783ea3551530f1d7",
      "tree": {
        "sha": "862b7c0a1316da2fa9bbd2cf53a8117363cba54b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/862b7c0a1316da2fa9bbd2cf53a8117363cba54b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b341db731793844f12944363186edea23eabdeb",
          "sha": "2b341db731793844f12944363186edea23eabdeb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2b341db731793844f12944363186edea23eabdeb"
        }
      ],
      "message": "Move peer state updates from headers message into separate function",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2022-06-28T19:53:25Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2022-02-08T22:40:33Z"
      },
      "sha": "6d95cd3e7444ebaaabb64a76783ea3551530f1d7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGZmZTg3ZGIyNDdiMTlmZmI4YmZiYTMyOWM1ZGQwYmUzOWVmNWE1M2Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ffe87db247b19ffb8bfba329c5dd0be39ef5a53f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ffe87db247b19ffb8bfba329c5dd0be39ef5a53f",
      "tree": {
        "sha": "b5763d8c978db5d9077c5a148267f3fe3a97f87f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5763d8c978db5d9077c5a148267f3fe3a97f87f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d95cd3e7444ebaaabb64a76783ea3551530f1d7",
          "sha": "6d95cd3e7444ebaaabb64a76783ea3551530f1d7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6d95cd3e7444ebaaabb64a76783ea3551530f1d7"
        }
      ],
      "message": "Cleanup received_new_header calculation to use WITH_LOCK",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2022-06-28T19:53:25Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2022-02-08T22:43:38Z"
      },
      "sha": "ffe87db247b19ffb8bfba329c5dd0be39ef5a53f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFiZjVkMTZjMjRjYjA4YjA0NTFiZGJkNGQxZGU2M2ExMjkzMGU4ZjU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/abf5d16c24cb08b0451bdbd4d1de63a12930e8f5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/abf5d16c24cb08b0451bdbd4d1de63a12930e8f5",
      "tree": {
        "sha": "e441e52e6b097b6d9b966a6a85e86433b277a626",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e441e52e6b097b6d9b966a6a85e86433b277a626"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ffe87db247b19ffb8bfba329c5dd0be39ef5a53f",
          "sha": "ffe87db247b19ffb8bfba329c5dd0be39ef5a53f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ffe87db247b19ffb8bfba329c5dd0be39ef5a53f"
        }
      ],
      "message": "Don't send getheaders message when another request is outstanding\n\nChange getheaders messages so that we wait up to 2 minutes for a response to a\nprior getheaders message before issuing a new one.\n\nAlso change the handling of the getheaders message sent in response to a block\nINV, so that we no longer use the hashstop variable (including the hash stop\nwill just mean that if our peer's headers chain is longer, then we won't learn\nit, so there's no benefit to using hashstop).\n\nAlso, now respond to a getheaders during IBD with an empty headers message\n(rather than nothing) -- this better conforms to the intent of the new logic\nthat it's better to not ignore a peer's getheaders message, even if you have\nnothing to give. This also avoids a lot of functional tests breaking.\n\np2p_segwit.py is modified to use this same strategy, as the test logic (of\nexpecting a getheaders after a block inv) would otherwise be broken.",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2022-06-28T19:53:25Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2022-03-03T19:48:38Z"
      },
      "sha": "abf5d16c24cb08b0451bdbd4d1de63a12930e8f5"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6896909225,
      "node_id": "HRFPE_lADOABII585MV_-_zwAAAAGbFnup",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6896909225",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-28T19:54:15Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-30T07:25:09Z",
      "updated_at": "2022-06-30T07:25:09Z",
      "source": {
        "issue": {
          "id": 1247071697,
          "node_id": "PR_kwDOABII5844ZBvy",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25203",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25203/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25203/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25203/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25203",
          "number": 25203,
          "state": "open",
          "state_reason": null,
          "title": "Severity-based logging -- parent PR",
          "body": "This is a parent PR for continuing updates to severity-based logging. See https://github.com/bitcoin/bitcoin/issues/20576 for motivation and https://github.com/bitcoin/bitcoin/pull/25306 for discussion.\r\n\r\n- [x] https://github.com/bitcoin/bitcoin/pull/24464\r\n- [x] https://github.com/bitcoin/bitcoin/pull/25286\r\n- [x] #25306\r\n- [x] https://github.com/bitcoin/bitcoin/issues/25614\r\n- [x] https://github.com/bitcoin/bitcoin/pull/26957\r\n- [x] https://github.com/bitcoin/bitcoin/pull/27632\r\n- #27231 \r\n- print the wallet name more clearly in wallet logging to distinguish it from category/level\r\n- unconditionally log `Info` severity level messages\r\n- replace the hardcoded `LogLevelsList()` vector with a programmatic one derived from the `Level` enum class\r\n- convert `GetLogCategory()` to `std::optional`\r\n- deduplicate the `LogCategory` code\r\n- update to severity-based logging in the following areas, dropping the use of `LogPrintf` and `LogPrint`: addrdb, addrman, banman, i2p, mempool, netbase, net, net_processing, timedata, torcontrol\r\n- when we're ready to drop the other logging macros, rename `LogPrintLevel` to simply `Log`, which will be the only log macro needed after migration from the other macros is complete\r\n",
          "user": {
            "login": "jonatack",
            "id": 2415484,
            "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonatack",
            "html_url": "https://github.com/jonatack",
            "followers_url": "https://api.github.com/users/jonatack/followers",
            "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
            "organizations_url": "https://api.github.com/users/jonatack/orgs",
            "repos_url": "https://api.github.com/users/jonatack/repos",
            "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jonatack/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 19,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25203",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25203",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25203.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25203.patch"
          },
          "created_at": "2022-05-24T20:08:49Z",
          "updated_at": "2024-01-11T17:13:42Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1171555243,
      "node_id": "IC_kwDOABII585F1IOr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1171555243",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-30T18:43:17Z",
      "updated_at": "2022-06-30T18:43:17Z",
      "author_association": "MEMBER",
      "body": "Code review ACK b6f63bd991569d45b19c4f2d83b223e6e7cdcff3",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#issuecomment-1171555243",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25454"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-30T19:50:44Z",
      "updated_at": "2022-06-30T19:50:44Z",
      "source": {
        "issue": {
          "id": 1290476607,
          "node_id": "PR_kwDOABII5846qNZf",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25515",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25515/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25515/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25515/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25515",
          "number": 25515,
          "state": "closed",
          "state_reason": null,
          "title": "net, test: Virtualise CConnman and add initial PeerManager unit tests",
          "body": "This PR creates an abstract `ConnectionsInterface` class that is used as an interface for interacting with the connection manager. The `PeerManager` is made to hold a reference to a `ConnectionsInterface` instead of `CConnman`, which makes it possible for us to mock the connection manager in the newly introduced `PeerManager` unit tests. Two initial unit tests are added for the version handshake and ping/pong logic.",
          "user": {
            "login": "dergoegge",
            "id": 8077169,
            "node_id": "MDQ6VXNlcjgwNzcxNjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dergoegge",
            "html_url": "https://github.com/dergoegge",
            "followers_url": "https://api.github.com/users/dergoegge/followers",
            "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
            "organizations_url": "https://api.github.com/users/dergoegge/orgs",
            "repos_url": "https://api.github.com/users/dergoegge/repos",
            "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dergoegge/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 12,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25515",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25515.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25515.patch"
          },
          "closed_at": "2023-08-10T14:23:28Z",
          "created_at": "2022-06-30T18:04:58Z",
          "updated_at": "2023-08-10T14:23:29Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-30T19:52:17Z",
      "updated_at": "2022-06-30T19:52:17Z",
      "source": {
        "issue": {
          "id": 1290473405,
          "node_id": "PR_kwDOABII5846qMtw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25514",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25514/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25514/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25514/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25514",
          "number": 25514,
          "state": "closed",
          "state_reason": null,
          "title": "net processing: Move CNode::nServices and CNode::nLocalServices to Peer",
          "body": "Another step in #19398. Which services we offer to a peer and which services they offer to us is application layer data and should not be stored on `CNode`.\r\n\r\nThis is also a prerequisite for adding `PeerManager` unit tests (See #25515).",
          "user": {
            "login": "dergoegge",
            "id": 8077169,
            "node_id": "MDQ6VXNlcjgwNzcxNjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dergoegge",
            "html_url": "https://github.com/dergoegge",
            "followers_url": "https://api.github.com/users/dergoegge/followers",
            "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
            "organizations_url": "https://api.github.com/users/dergoegge/orgs",
            "repos_url": "https://api.github.com/users/dergoegge/repos",
            "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dergoegge/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25514",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25514",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25514.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25514.patch"
          },
          "closed_at": "2022-07-19T06:33:58Z",
          "created_at": "2022-06-30T18:01:24Z",
          "updated_at": "2023-07-25T10:16:36Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDk5ZjQ3ODVjYWQ5NDY1N2RjZjM0OWQwMGZkZDZmMWQ0NGNhYzliYjA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "tree": {
        "sha": "4282d66ef69302c1155b44eca6a4e600255a0cad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4282d66ef69302c1155b44eca6a4e600255a0cad"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/abf5d16c24cb08b0451bdbd4d1de63a12930e8f5",
          "sha": "abf5d16c24cb08b0451bdbd4d1de63a12930e8f5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/abf5d16c24cb08b0451bdbd4d1de63a12930e8f5"
        }
      ],
      "message": "Replace GetTime() with NodeClock in MaybeSendGetHeaders()",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2022-07-01T12:29:14Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2022-06-28T14:53:02Z"
      },
      "sha": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6918177832,
      "node_id": "HRFPE_lADOABII585MV_-_zwAAAAGcWwQo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6918177832",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-01T12:30:37Z"
    },
    {
      "event": "commented",
      "id": 1173298333,
      "node_id": "IC_kwDOABII585F7xyd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1173298333",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-04T03:28:39Z",
      "updated_at": "2022-07-04T03:28:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "> @ajtowns This should fix the issue you've seen in functional tests, where generating a bunch of blocks at once can result in O(n^2) headers downloads.\r\n\r\nCan confirm that it seems to fix the problem, and that the debug logs for p2p_blockheaders show much fewer \"getheaders\" requests.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#issuecomment-1173298333",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25454"
    },
    {
      "event": "mentioned",
      "id": 6924514036,
      "node_id": "MEE_lADOABII585MV_-_zwAAAAGcu7L0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6924514036",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-04T03:28:39Z"
    },
    {
      "event": "subscribed",
      "id": 6924514038,
      "node_id": "SE_lADOABII585MV_-_zwAAAAGcu7L2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6924514038",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-04T03:28:39Z"
    },
    {
      "event": "commented",
      "id": 1173723141,
      "node_id": "IC_kwDOABII585F9ZgF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1173723141",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-04T11:46:54Z",
      "updated_at": "2022-07-04T11:46:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK 99f4785cad94657dcf349d00fdd6f1d44cac9bb0 ; code review, check over new logic of when to send getheaders messages",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#issuecomment-1173723141",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25454"
    },
    {
      "event": "reviewed",
      "id": 1027446708,
      "node_id": "PRR_kwDOABII5849PZe0",
      "url": null,
      "actor": null,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK 99f4785cad94657dcf349d00fdd6f1d44cac9bb0\r\n\r\nNits are very non-blocking",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#pullrequestreview-1027446708",
      "submitted_at": "2022-07-04T13:25:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
    },
    {
      "event": "commented",
      "id": 1173836249,
      "node_id": "IC_kwDOABII585F91HZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1173836249",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-04T13:40:37Z",
      "updated_at": "2022-07-04T13:40:37Z",
      "author_association": "MEMBER",
      "body": "Code review ACK  99f4785cad94657dcf349d00fdd6f1d44cac9bb0 ",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#issuecomment-1173836249",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25454"
    },
    {
      "event": "renamed",
      "id": 6928345450,
      "node_id": "RTE_lADOABII585MV_-_zwAAAAGc9ilq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6928345450",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-04T14:00:53Z",
      "rename": {
        "from": "p2p, refactor: Avoid multiple getheaders messages in flight to the same peer",
        "to": "p2p: Avoid multiple getheaders messages in flight to the same peer"
      }
    },
    {
      "event": "reviewed",
      "id": 1027773070,
      "node_id": "PRR_kwDOABII5849QpKO",
      "url": null,
      "actor": null,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "tACK https://github.com/bitcoin/bitcoin/pull/25454/commits/99f4785cad94657dcf349d00fdd6f1d44cac9bb0 Good improvement in the code.\r\n\r\nTested on signet.\r\n",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#pullrequestreview-1027773070",
      "submitted_at": "2022-07-04T17:20:29Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
    },
    {
      "event": "commented",
      "id": 1174109776,
      "node_id": "IC_kwDOABII585F-35Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1174109776",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-04T19:07:40Z",
      "updated_at": "2022-07-04T19:07:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code Review ACK 99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#issuecomment-1174109776",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25454"
    },
    {
      "event": "merged",
      "id": 6930031189,
      "node_id": "ME_lADOABII585MV_-_zwAAAAGdD-JV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6930031189",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "87d012324afa285221073540781295f1b7381a15",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87d012324afa285221073540781295f1b7381a15",
      "created_at": "2022-07-04T20:28:46Z"
    },
    {
      "event": "closed",
      "id": 6930031200,
      "node_id": "CE_lADOABII585MV_-_zwAAAAGdD-Jg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6930031200",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-04T20:28:47Z"
    },
    {
      "event": "referenced",
      "id": 6930166730,
      "node_id": "REFE_lADOABII585MV_-_zwAAAAGdEfPK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6930166730",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "35150b06a743026f7b7c70c9fcab49719ae2c574",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/35150b06a743026f7b7c70c9fcab49719ae2c574",
      "created_at": "2022-07-04T21:21:06Z"
    },
    {
      "event": "reviewed",
      "id": 1028199542,
      "node_id": "PRR_kwDOABII5849SRR2",
      "url": null,
      "actor": null,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "left some questions",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#pullrequestreview-1028199542",
      "submitted_at": "2022-07-05T12:53:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
    },
    {
      "event": "reviewed",
      "id": 1030142634,
      "node_id": "PRR_kwDOABII5849Zrqq",
      "url": null,
      "actor": null,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#pullrequestreview-1030142634",
      "submitted_at": "2022-07-06T13:55:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-06T18:37:21Z",
      "updated_at": "2022-07-06T18:37:21Z",
      "source": {
        "issue": {
          "id": 1296222086,
          "node_id": "PR_kwDOABII58469Su1",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25557",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25557/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25557/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25557/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25557",
          "number": 25557,
          "state": "closed",
          "state_reason": null,
          "title": "p2p: Eliminate atomic for m_last_getheaders_timestamp",
          "body": "Eliminate the unnecessary atomic guarding `m_last_getheaders_timestamp`, which is only accessed in a single thread (thanks to MarcoFalke for pointing this out).\r\n\r\nAlso address a nit that came up in #25454.",
          "user": {
            "login": "sdaftuar",
            "id": 7463573,
            "node_id": "MDQ6VXNlcjc0NjM1NzM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sdaftuar",
            "html_url": "https://github.com/sdaftuar",
            "followers_url": "https://api.github.com/users/sdaftuar/followers",
            "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
            "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
            "repos_url": "https://api.github.com/users/sdaftuar/repos",
            "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25557",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25557",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25557.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25557.patch"
          },
          "closed_at": "2022-07-14T07:57:08Z",
          "created_at": "2022-07-06T18:37:21Z",
          "updated_at": "2023-07-14T10:12:57Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "referenced",
      "id": 6991991857,
      "node_id": "REFE_lADOABII585MV_-_zwAAAAGgwVQx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6991991857",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8efa73e7ce4ea0c1b7ad5c3947a5ecf9fb6361d3",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8efa73e7ce4ea0c1b7ad5c3947a5ecf9fb6361d3",
      "created_at": "2022-07-14T07:57:01Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-01T22:45:27Z",
      "updated_at": "2022-08-01T22:45:27Z",
      "source": {
        "issue": {
          "id": 109682810,
          "node_id": "MDU6SXNzdWUxMDk2ODI4MTA=",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6755",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6755/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6755/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6755/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/6755",
          "number": 6755,
          "state": "closed",
          "state_reason": "completed",
          "title": "Duplicate getheaders requests",
          "body": "During the initial headers download, a client may start to request the same headers multiple times from its syncing peer.  This happens if a new block is found while the peer is syncing, for the following reason:\n\nFor the ordinary headers syncing procedure, the client starts by asking for an initial set of headers, and then whenever it receives a message with 2,000 headers, it follows up with a request for more.  _However_, if a new block is found, its peer sends a corresponding inv message, which prompts the syncing client to _also_ ask for the headers preceding the new block.  This requests the same headers again, and when they are received a second time, it continues requesting more.  Depending on how many new blocks are found and how long the header syncing lasts, this may lead to a situation where the same set of headers is requested many times.\n\nThis obviously puts unnecessary strain on both the client that syncs and the peer that sends the data.  This is a problem particularly for altcoins with either of a high block frequency or merge-mining (much larger header messages), but it happens with Bitcoin itself as well.\n\nTo fix it, we could keep (in-memory only) for each peer the highest \"from\" height for which we requested headers from it.  Whenever a new request would be sent with a smaller number, we drop it instead.  Alternatively, one could probably also make the logic for requesting headers following an inv message smarter, so that it does not request when we are in the initial headers sync.  What do you think?  I'm willing to implement a patch for whatever solution is suggested.\n",
          "user": {
            "login": "domob1812",
            "id": 4943644,
            "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/domob1812",
            "html_url": "https://github.com/domob1812",
            "followers_url": "https://api.github.com/users/domob1812/followers",
            "following_url": "https://api.github.com/users/domob1812/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/domob1812/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/domob1812/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
            "organizations_url": "https://api.github.com/users/domob1812/orgs",
            "repos_url": "https://api.github.com/users/domob1812/repos",
            "events_url": "https://api.github.com/users/domob1812/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/domob1812/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 326918230,
              "node_id": "MDU6TGFiZWwzMjY5MTgyMzA=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Resource%20usage",
              "name": "Resource usage",
              "color": "981023",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "comments": 8,
          "closed_at": "2022-08-01T23:55:33Z",
          "created_at": "2015-10-04T14:08:28Z",
          "updated_at": "2023-08-01T10:17:52Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1064307359,
      "node_id": "PRR_kwDOABII584_cAqf",
      "url": null,
      "actor": null,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#pullrequestreview-1064307359",
      "submitted_at": "2022-08-06T13:24:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-07T17:59:15Z",
      "updated_at": "2022-09-07T17:59:15Z",
      "source": {
        "issue": {
          "id": 1364987849,
          "node_id": "PR_kwDOABII584-hzt9",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26036",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26036/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26036/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26036/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26036",
          "number": 26036,
          "state": "closed",
          "state_reason": null,
          "title": "net: add NetEventsInterface::g_msgproc_mutex",
          "body": "There are many cases where we assume message processing is single-threaded in order for how we access node-related memory to be safe. Add an explicit mutex that we can use to document this, which allows the compiler to catch any cases where we try to access that memory from other threads and break that assumption.",
          "user": {
            "login": "ajtowns",
            "id": 127186,
            "node_id": "MDQ6VXNlcjEyNzE4Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ajtowns",
            "html_url": "https://github.com/ajtowns",
            "followers_url": "https://api.github.com/users/ajtowns/followers",
            "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
            "organizations_url": "https://api.github.com/users/ajtowns/orgs",
            "repos_url": "https://api.github.com/users/ajtowns/repos",
            "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ajtowns/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26036",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26036",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26036.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26036.patch"
          },
          "closed_at": "2022-09-20T13:18:50Z",
          "created_at": "2022-09-07T17:36:04Z",
          "updated_at": "2023-09-20T12:11:32Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "milestoned",
      "id": 7396331159,
      "node_id": "MIE_lADOABII585MV_-_zwAAAAG42w6X",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7396331159",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-15T15:53:46Z",
      "milestone": {
        "title": "24.0"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-30T10:02:59Z",
      "updated_at": "2023-03-30T10:02:59Z",
      "source": {
        "issue": {
          "id": 1647302253,
          "node_id": "PR_kwDOABII585NPrmR",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27368",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27368/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27368/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27368/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27368",
          "number": 27368,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Drop no longer used `CNetMsgMaker` instances",
          "body": "The removed lines have been unused since the https://github.com/bitcoin/bitcoin/commit/abf5d16c24cb08b0451bdbd4d1de63a12930e8f5 commit from https://github.com/bitcoin/bitcoin/pull/25454.",
          "user": {
            "login": "hebasto",
            "id": 32963518,
            "node_id": "MDQ6VXNlcjMyOTYzNTE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hebasto",
            "html_url": "https://github.com/hebasto",
            "followers_url": "https://api.github.com/users/hebasto/followers",
            "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
            "organizations_url": "https://api.github.com/users/hebasto/orgs",
            "repos_url": "https://api.github.com/users/hebasto/repos",
            "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/hebasto/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27368",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27368",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27368.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27368.patch"
          },
          "closed_at": "2023-03-30T12:45:35Z",
          "created_at": "2023-03-30T10:02:58Z",
          "updated_at": "2023-05-15T11:11:09Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1490109063,
      "node_id": "IC_kwDOABII585Y0UKH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1490109063",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-30T11:04:54Z",
      "updated_at": "2023-03-30T11:04:54Z",
      "author_association": "MEMBER",
      "body": "> `msgMaker` is now unused in ProcessHeadersMessage.\r\n\r\nSame for `PeerManagerImpl::HandleFewUnconnectingHeaders()` and `PeerManagerImpl::ConsiderEviction()`.\r\nSee https://github.com/bitcoin/bitcoin/pull/27368.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#issuecomment-1490109063",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25454"
    },
    {
      "event": "referenced",
      "id": 8887105579,
      "node_id": "REFE_lADOABII585MV_-_zwAAAAIRtngr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8887105579",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5241b8bdff0296c3da2a0185e9836436c49acad0",
      "commit_url": "https://api.github.com/repos/bitcoin-core/gui/commits/5241b8bdff0296c3da2a0185e9836436c49acad0",
      "created_at": "2023-03-30T12:45:33Z"
    },
    {
      "event": "referenced",
      "id": 8903118127,
      "node_id": "REFE_lADOABII585MV_-_zwAAAAISqs0v",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8903118127",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d5d878e4d8b912cfddbea6c8637c791f41de0251",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/d5d878e4d8b912cfddbea6c8637c791f41de0251",
      "created_at": "2023-04-01T03:07:18Z"
    },
    {
      "event": "referenced",
      "id": 11157530552,
      "node_id": "REFE_lADOABII585MV_-_zwAAAAKZCme4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11157530552",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e70a075264b1d8f75b9c9a2db485570019000d1a",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/e70a075264b1d8f75b9c9a2db485570019000d1a",
      "created_at": "2023-12-05T18:27:24Z"
    },
    {
      "event": "referenced",
      "id": 11157530583,
      "node_id": "REFE_lADOABII585MV_-_zwAAAAKZCmfX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11157530583",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5ccc844d00756389289aac6d378742679c742ae9",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/5ccc844d00756389289aac6d378742679c742ae9",
      "created_at": "2023-12-05T18:27:24Z"
    },
    {
      "event": "referenced",
      "id": 11157530616,
      "node_id": "REFE_lADOABII585MV_-_zwAAAAKZCmf4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11157530616",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "bba802a752c987c81554435014e78fbbe97df062",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/bba802a752c987c81554435014e78fbbe97df062",
      "created_at": "2023-12-05T18:27:24Z"
    },
    {
      "event": "referenced",
      "id": 11157530640,
      "node_id": "REFE_lADOABII585MV_-_zwAAAAKZCmgQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11157530640",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a0058fe8593b97409e9e92d0016098eccc9e3fec",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/a0058fe8593b97409e9e92d0016098eccc9e3fec",
      "created_at": "2023-12-05T18:27:24Z"
    },
    {
      "event": "referenced",
      "id": 11157530659,
      "node_id": "REFE_lADOABII585MV_-_zwAAAAKZCmgj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11157530659",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2d39859311e92c0496c3ee3e289f0b85cbbe17b1",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/2d39859311e92c0496c3ee3e289f0b85cbbe17b1",
      "created_at": "2023-12-05T18:27:24Z"
    },
    {
      "event": "referenced",
      "id": 11157530680,
      "node_id": "REFE_lADOABII585MV_-_zwAAAAKZCmg4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11157530680",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "61921db59636b27955c69a251ec6209ea8261757",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/61921db59636b27955c69a251ec6209ea8261757",
      "created_at": "2023-12-05T18:27:24Z"
    },
    {
      "event": "referenced",
      "id": 11165820238,
      "node_id": "REFE_lADOABII585MV_-_zwAAAAKZiOVO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11165820238",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "71e67ffdd3827b7f10d0872a247eca1c3b986a95",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/71e67ffdd3827b7f10d0872a247eca1c3b986a95",
      "created_at": "2023-12-06T09:49:11Z"
    },
    {
      "event": "referenced",
      "id": 12045080401,
      "node_id": "REFE_lADOABII585MV_-_zwAAAALN8VdR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12045080401",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a903bba4d65720265659c6d4dae6cd8d9ec89c0f",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/a903bba4d65720265659c6d4dae6cd8d9ec89c0f",
      "created_at": "2024-03-07T16:38:08Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-07T16:40:31Z",
      "updated_at": "2024-03-07T16:40:31Z",
      "source": {
        "issue": {
          "id": 2171442551,
          "node_id": "PR_kwDOABII585o1hNH",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29575",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29575/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29575/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29575/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29575",
          "number": 29575,
          "state": "open",
          "state_reason": null,
          "title": "net_processing: make any misbehavior trigger immediate discouragement",
          "body": "So far, discouragement of peers triggers when their misbehavior score exceeds 100 points. Most types of misbehavior increment the score by 100, triggering immediate discouragement, but some types do not. This PR makes all increments equal to either 100 (meaning any misbehavior will immediately cause disconnection and discouragement) or 0 (making the behavior effectively unconditionally allowed), and then removes the logic for score accumulation.\r\n\r\nThis simplifies the code a bit, but also makes protocol expectations clearer: if a peer misbehaves, they get disconnected. There is no good reason why certain types of protocol violations should be permitted 4 times (howmuch=20) or 9 times (howmuch=10), while many others are never allowed. Furthermore, the distinction between these looks arbitrary.\r\n\r\nTo assess whether this does not unduly affect existing other software on the network, I've been running this with an additional patch (see https://github.com/sipa/bitcoin/commits/202403_nomisbehave_log) that adds logging whenever behavior is detected whose misbehavior increment is changed to 100 by this PR. Over the past day I have not seen any instances on my well-connected node (~150 incoming connections), but will continue to monitor.\r\n\r\nThe specific types of misbehavior that are changed to 100 are:\r\n* Sending us a `block` which does not connect to our header tree (which necessarily must have been unsollicited). [used to be score 10]\r\n* Sending us a `headers` with a non-continuous headers sequence. [used to be score 20]\r\n* Sending us more than 1000 addresses in a single `addr` or `addrv2` message [used to be score 20]\r\n* Sending us more than 50000 invs in a single `inv` message [used to be score 20]\r\n* Sending us more than 2000 headers in a single `headers` message [used to be score 20]\r\n\r\nThe specific types of misbehavior that are changed to 0 are:\r\n* Sending us 10 (*) separate BIP130 headers announcements that do not connect to our block tree [used to be score 20]\r\n* Sending us more than 8 headers in a single `headers` message (which thus does not get treated as a BIP130 announcement) that does not connect to our block tree. [used to be score 10]\r\n\r\nI believe that none of these behaviors are unavoidable, except for the one marked (*) which can in theory happen still due to interaction between BIP130 and variations in system clocks (the max 2 hour in the future rule). This one has been removed entirely. In order to remove the impact of the bug it was designed to deal with, without relying on misbehavior, a separate improvement is included that makes `getheaders`-tracking more accurate.\r\n\r\nIn another unrelated improvement, this also gets rid of the 8 header limit heuristic to determine whether an incoming non-connecting `headers` is a potential BIP130 announcement, as this rule is no longer needed to prevent spurious Misbehavior. Instead, any non-connecting `headers` is now treated as a potential announcement.",
          "user": {
            "login": "sipa",
            "id": 548488,
            "node_id": "MDQ6VXNlcjU0ODQ4OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sipa",
            "html_url": "https://github.com/sipa",
            "followers_url": "https://api.github.com/users/sipa/followers",
            "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
            "organizations_url": "https://api.github.com/users/sipa/orgs",
            "repos_url": "https://api.github.com/users/sipa/repos",
            "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sipa/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 11,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29575",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29575",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29575.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29575.patch"
          },
          "created_at": "2024-03-06T12:54:56Z",
          "updated_at": "2024-03-29T00:32:41Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "referenced",
      "id": 12093865474,
      "node_id": "REFE_lADOABII585MV_-_zwAAAALQ2b4C",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12093865474",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ce238dd79bd3a1190a2229fac4502fa5742fc6e3",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/ce238dd79bd3a1190a2229fac4502fa5742fc6e3",
      "created_at": "2024-03-12T19:09:04Z"
    },
    {
      "event": "locked",
      "id": 12294722665,
      "node_id": "LOE_lADOABII585MV_-_zwAAAALc0pRp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12294722665",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-29T12:40:40Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/905373582",
      "pull_request_review_id": 1017522335,
      "id": 905373582,
      "node_id": "PRRC_kwDOABII58419ueO",
      "diff_hunk": "@@ -3403,6 +3412,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         if (m_chainman.ActiveTip() == nullptr ||\n                 (m_chainman.ActiveTip()->nChainWork < nMinimumChainWork && !pfrom.HasPermission(NetPermissionFlags::Download))) {\n             LogPrint(BCLog::NET, \"Ignoring getheaders from peer=%d because active chain has too little work\\n\", pfrom.GetId());",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 169,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "f757d2a471f806a384a60f8783ccdebdb25cd403",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe change this log message? because now we send something in response instead of ignoring",
      "created_at": "2022-06-23T19:13:10Z",
      "updated_at": "2022-06-23T19:37:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r905373582",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/905373582"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3414,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/905376797",
      "pull_request_review_id": 1017522335,
      "id": 905376797,
      "node_id": "PRRC_kwDOABII58419vQd",
      "diff_hunk": "@@ -355,8 +357,11 @@ struct Peer {\n     /** Work queue of items requested by this peer **/\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n+    /** Time of the last getheaders message to this peer */\n+    std::atomic<std::chrono::seconds> m_last_getheaders_timestamp{0s};\n+\n     Peer(NodeId id)\n-        : m_id{id}\n+        : m_id(id)",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "f757d2a471f806a384a60f8783ccdebdb25cd403",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: this looks like an accidental change, or do you have a reasoning for this?",
      "created_at": "2022-06-23T19:17:46Z",
      "updated_at": "2022-06-23T19:37:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r905376797",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/905376797"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 364,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/905386665",
      "pull_request_review_id": 1017522335,
      "id": 905386665,
      "node_id": "PRRC_kwDOABII58419xqp",
      "diff_hunk": "@@ -2258,23 +2265,19 @@ bool PeerManagerImpl::CheckHeadersAreContinuous(const std::vector<CBlockHeader>&\n     return true;\n }\n \n-/*\n- * Continue fetching headers from a given point.\n- * pindexLast should be the last header we learned from a peer in their prior\n- * headers message.\n- *\n- * This is used for headers sync with a peer; even if pindexLast is an ancestor\n- * of a known chain (such as our tip) we don't yet know where the peer's chain\n- * might fork from what we know, so we continue exactly from where the peer\n- * left off.\n- */\n-void PeerManagerImpl::FetchMoreHeaders(CNode& pfrom, const CBlockIndex *pindexLast, const Peer& peer)\n+bool PeerManagerImpl::MaybeSendGetHeaders(CNode& pfrom, const CBlockLocator& locator, Peer& peer)",
      "path": "src/net_processing.cpp",
      "position": 108,
      "original_position": 103,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "f757d2a471f806a384a60f8783ccdebdb25cd403",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why did you change it to receive a `CBlockLocator`? I don't think we ever create locators that are not part of the main chain. Also (maybe a bit nitpicky) we dont need to compute the locator if we don't send the `getheaders` message, so doing that inside of `MaybeSendGetHeaders` makes more sense to me.",
      "created_at": "2022-06-23T19:31:45Z",
      "updated_at": "2022-06-23T19:37:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r905386665",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/905386665"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2271,
      "original_line": 2271,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/905542853",
      "pull_request_review_id": 1017752385,
      "id": 905542853,
      "node_id": "PRRC_kwDOABII5841-XzF",
      "diff_hunk": "@@ -2443,15 +2443,9 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n         return;\n     }\n \n-    {\n-        LOCK(cs_main);\n-\n-        // If we don't have the last header, then they'll have given us\n-        // something new (if these headers are valid).\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers.back().GetHash())) {\n-            received_new_header = true;\n-        }\n-    }\n+    // If we don't have the last header, then this peer will have given us\n+    // something new (if these headers are valid).\n+    received_new_header = WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers.back().GetHash()) == nullptr);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "64deef68be5afe2161079b7e52d48f43311df0ed",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: could just use `bool received_new_header  = ...` , remove the initialization a few lines above and move this down a few lines to where it is used.",
      "created_at": "2022-06-23T22:13:29Z",
      "updated_at": "2022-06-24T16:20:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r905542853",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/905542853"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2448,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906001551",
      "pull_request_review_id": 1018387319,
      "id": 906001551,
      "node_id": "PRRC_kwDOABII5842AHyP",
      "diff_hunk": "@@ -2258,23 +2265,19 @@ bool PeerManagerImpl::CheckHeadersAreContinuous(const std::vector<CBlockHeader>&\n     return true;\n }\n \n-/*\n- * Continue fetching headers from a given point.\n- * pindexLast should be the last header we learned from a peer in their prior\n- * headers message.\n- *\n- * This is used for headers sync with a peer; even if pindexLast is an ancestor\n- * of a known chain (such as our tip) we don't yet know where the peer's chain\n- * might fork from what we know, so we continue exactly from where the peer\n- * left off.\n- */\n-void PeerManagerImpl::FetchMoreHeaders(CNode& pfrom, const CBlockIndex *pindexLast, const Peer& peer)\n+bool PeerManagerImpl::MaybeSendGetHeaders(CNode& pfrom, const CBlockLocator& locator, Peer& peer)",
      "path": "src/net_processing.cpp",
      "position": 108,
      "original_position": 103,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "f757d2a471f806a384a60f8783ccdebdb25cd403",
      "in_reply_to_id": 905386665,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The reason I introduced this interface change here is that this branch is a precursor to another change I will be proposing to the headers sync logic, in which we might send getheaders messages based on locators that are not calculated from a single CBlockIndex entry. ",
      "created_at": "2022-06-24T12:10:45Z",
      "updated_at": "2022-06-24T12:10:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r906001551",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906001551"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2271,
      "original_line": 2271,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906010773",
      "pull_request_review_id": 1018402364,
      "id": 906010773,
      "node_id": "PRRC_kwDOABII5842AKCV",
      "diff_hunk": "@@ -355,8 +357,11 @@ struct Peer {\n     /** Work queue of items requested by this peer **/\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n+    /** Time of the last getheaders message to this peer */\n+    std::atomic<std::chrono::seconds> m_last_getheaders_timestamp{0s};\n+\n     Peer(NodeId id)\n-        : m_id{id}\n+        : m_id(id)",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "f757d2a471f806a384a60f8783ccdebdb25cd403",
      "in_reply_to_id": 905376797,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yep this was a rebase error, fixed!",
      "created_at": "2022-06-24T12:22:49Z",
      "updated_at": "2022-06-24T12:22:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r906010773",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906010773"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 364,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906010899",
      "pull_request_review_id": 1018402553,
      "id": 906010899,
      "node_id": "PRRC_kwDOABII5842AKET",
      "diff_hunk": "@@ -3403,6 +3412,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         if (m_chainman.ActiveTip() == nullptr ||\n                 (m_chainman.ActiveTip()->nChainWork < nMinimumChainWork && !pfrom.HasPermission(NetPermissionFlags::Download))) {\n             LogPrint(BCLog::NET, \"Ignoring getheaders from peer=%d because active chain has too little work\\n\", pfrom.GetId());",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 169,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "f757d2a471f806a384a60f8783ccdebdb25cd403",
      "in_reply_to_id": 905373582,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2022-06-24T12:23:00Z",
      "updated_at": "2022-06-24T12:23:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r906010899",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906010899"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3414,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906192500",
      "pull_request_review_id": 1017752385,
      "id": 906192500,
      "node_id": "PRRC_kwDOABII5842A2Z0",
      "diff_hunk": "@@ -4423,16 +4443,17 @@ void PeerManagerImpl::ConsiderEviction(CNode& pto, std::chrono::seconds time_in_\n                 pto.fDisconnect = true;\n             } else {\n                 assert(state.m_chain_sync.m_work_header);\n-                LogPrint(BCLog::NET, \"sending getheaders to outbound peer=%d to verify chain work (current best known block:%s, benchmark blockhash: %s)\\n\", pto.GetId(), state.pindexBestKnownBlock != nullptr ? state.pindexBestKnownBlock->GetBlockHash().ToString() : \"<none>\", state.m_chain_sync.m_work_header->GetBlockHash().ToString());\n-                m_connman.PushMessage(&pto, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(state.m_chain_sync.m_work_header->pprev), uint256()));\n-                state.m_chain_sync.m_sent_getheaders = true;\n-                constexpr auto HEADERS_RESPONSE_TIME{2min};\n-                // Bump the timeout to allow a response, which could clear the timeout\n-                // (if the response shows the peer has synced), reset the timeout (if\n-                // the peer syncs to the required work but not to our tip), or result\n-                // in disconnect (if we advance to the timeout and pindexBestKnownBlock\n-                // has not sufficiently progressed)\n-                state.m_chain_sync.m_timeout = time_in_seconds + HEADERS_RESPONSE_TIME;\n+                if (MaybeSendGetHeaders(pto,\n+                            m_chainman.ActiveChain().GetLocator(state.m_chain_sync.m_work_header->pprev), *peer)) {\n+                    LogPrint(BCLog::NET, \"sending getheaders to outbound peer=%d to verify chain work (current best known block:%s, benchmark blockhash: %s)\\n\", pto.GetId(), state.pindexBestKnownBlock != nullptr ? state.pindexBestKnownBlock->GetBlockHash().ToString() : \"<none>\", state.m_chain_sync.m_work_header->GetBlockHash().ToString());\n+                    state.m_chain_sync.m_sent_getheaders = true;\n+                    // Bump the timeout to allow a response, which could clear the timeout\n+                    // (if the response shows the peer has synced), reset the timeout (if\n+                    // the peer syncs to the required work but not to our tip), or result\n+                    // in disconnect (if we advance to the timeout and pindexBestKnownBlock\n+                    // has not sufficiently progressed)\n+                    state.m_chain_sync.m_timeout = time_in_seconds + HEADERS_RESPONSE_TIME;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 231,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "f2e3f6d732c13faff9de165044ae11e374f0ba0f",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could this be abused by a peer to evade eviction by making us send `GetHeaders()` from other places (e.g. sending unconnecting CMPCTBLOCK messages) and sometimes sending stale headers? That might restart the `m_last_getheaders_timestamp` timer so that we never get to set `state.m_chain_sync.m_sent_getheaders` and `state.m_chain_sync.m_timeout` here and therefore won't disconnect.",
      "created_at": "2022-06-24T15:51:18Z",
      "updated_at": "2022-06-24T16:20:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r906192500",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906192500"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4455,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906221757",
      "pull_request_review_id": 1018711161,
      "id": 906221757,
      "node_id": "PRRC_kwDOABII5842A9i9",
      "diff_hunk": "@@ -2443,15 +2443,9 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n         return;\n     }\n \n-    {\n-        LOCK(cs_main);\n-\n-        // If we don't have the last header, then they'll have given us\n-        // something new (if these headers are valid).\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers.back().GetHash())) {\n-            received_new_header = true;\n-        }\n-    }\n+    // If we don't have the last header, then this peer will have given us\n+    // something new (if these headers are valid).\n+    received_new_header = WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers.back().GetHash()) == nullptr);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "64deef68be5afe2161079b7e52d48f43311df0ed",
      "in_reply_to_id": 905542853,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We need to do the calculation here before invoking `ProcessNewBlockHeaders()` because that will cause headers to be added to the block index, but I'll get rid of the declaration at line 2423, as we can just declare and initialize here instead.",
      "created_at": "2022-06-24T16:29:52Z",
      "updated_at": "2022-06-24T16:29:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r906221757",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906221757"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2448,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906228594",
      "pull_request_review_id": 1018720526,
      "id": 906228594,
      "node_id": "PRRC_kwDOABII5842A_Ny",
      "diff_hunk": "@@ -4423,16 +4443,17 @@ void PeerManagerImpl::ConsiderEviction(CNode& pto, std::chrono::seconds time_in_\n                 pto.fDisconnect = true;\n             } else {\n                 assert(state.m_chain_sync.m_work_header);\n-                LogPrint(BCLog::NET, \"sending getheaders to outbound peer=%d to verify chain work (current best known block:%s, benchmark blockhash: %s)\\n\", pto.GetId(), state.pindexBestKnownBlock != nullptr ? state.pindexBestKnownBlock->GetBlockHash().ToString() : \"<none>\", state.m_chain_sync.m_work_header->GetBlockHash().ToString());\n-                m_connman.PushMessage(&pto, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(state.m_chain_sync.m_work_header->pprev), uint256()));\n-                state.m_chain_sync.m_sent_getheaders = true;\n-                constexpr auto HEADERS_RESPONSE_TIME{2min};\n-                // Bump the timeout to allow a response, which could clear the timeout\n-                // (if the response shows the peer has synced), reset the timeout (if\n-                // the peer syncs to the required work but not to our tip), or result\n-                // in disconnect (if we advance to the timeout and pindexBestKnownBlock\n-                // has not sufficiently progressed)\n-                state.m_chain_sync.m_timeout = time_in_seconds + HEADERS_RESPONSE_TIME;\n+                if (MaybeSendGetHeaders(pto,\n+                            m_chainman.ActiveChain().GetLocator(state.m_chain_sync.m_work_header->pprev), *peer)) {\n+                    LogPrint(BCLog::NET, \"sending getheaders to outbound peer=%d to verify chain work (current best known block:%s, benchmark blockhash: %s)\\n\", pto.GetId(), state.pindexBestKnownBlock != nullptr ? state.pindexBestKnownBlock->GetBlockHash().ToString() : \"<none>\", state.m_chain_sync.m_work_header->GetBlockHash().ToString());\n+                    state.m_chain_sync.m_sent_getheaders = true;\n+                    // Bump the timeout to allow a response, which could clear the timeout\n+                    // (if the response shows the peer has synced), reset the timeout (if\n+                    // the peer syncs to the required work but not to our tip), or result\n+                    // in disconnect (if we advance to the timeout and pindexBestKnownBlock\n+                    // has not sufficiently progressed)\n+                    state.m_chain_sync.m_timeout = time_in_seconds + HEADERS_RESPONSE_TIME;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 231,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "f2e3f6d732c13faff9de165044ae11e374f0ba0f",
      "in_reply_to_id": 906192500,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for thinking about this.  I think you're right to raise this concern, and after re-reviewing this logic, I think the best course of action is to just have this call-site assume the `getheaders` message goes out (rather than branch on the return value) -- because if it doesn't, it means we've already sent a `getheaders`, and so the peer should have provided us with a sufficiently high work chain anyway. \r\n\r\nDoes that reasoning sound right to you as well?\r\n\r\n(Edit: I guess a downside to this is that if a peer is in the middle of big reorg, that this logic might cause them to be evicted, because our timeouts aren't long enough to necessarily deliver a huge reorg -- however that is a pre-existing issue with this strategy, and we have other mitigations in place like protecting some of our outbound peers from eviction under this logic.)",
      "created_at": "2022-06-24T16:38:25Z",
      "updated_at": "2022-06-24T16:44:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r906228594",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906228594"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4455,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906264070",
      "pull_request_review_id": 1018773248,
      "id": 906264070,
      "node_id": "PRRC_kwDOABII5842BH4G",
      "diff_hunk": "@@ -4423,16 +4443,17 @@ void PeerManagerImpl::ConsiderEviction(CNode& pto, std::chrono::seconds time_in_\n                 pto.fDisconnect = true;\n             } else {\n                 assert(state.m_chain_sync.m_work_header);\n-                LogPrint(BCLog::NET, \"sending getheaders to outbound peer=%d to verify chain work (current best known block:%s, benchmark blockhash: %s)\\n\", pto.GetId(), state.pindexBestKnownBlock != nullptr ? state.pindexBestKnownBlock->GetBlockHash().ToString() : \"<none>\", state.m_chain_sync.m_work_header->GetBlockHash().ToString());\n-                m_connman.PushMessage(&pto, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(state.m_chain_sync.m_work_header->pprev), uint256()));\n-                state.m_chain_sync.m_sent_getheaders = true;\n-                constexpr auto HEADERS_RESPONSE_TIME{2min};\n-                // Bump the timeout to allow a response, which could clear the timeout\n-                // (if the response shows the peer has synced), reset the timeout (if\n-                // the peer syncs to the required work but not to our tip), or result\n-                // in disconnect (if we advance to the timeout and pindexBestKnownBlock\n-                // has not sufficiently progressed)\n-                state.m_chain_sync.m_timeout = time_in_seconds + HEADERS_RESPONSE_TIME;\n+                if (MaybeSendGetHeaders(pto,\n+                            m_chainman.ActiveChain().GetLocator(state.m_chain_sync.m_work_header->pprev), *peer)) {\n+                    LogPrint(BCLog::NET, \"sending getheaders to outbound peer=%d to verify chain work (current best known block:%s, benchmark blockhash: %s)\\n\", pto.GetId(), state.pindexBestKnownBlock != nullptr ? state.pindexBestKnownBlock->GetBlockHash().ToString() : \"<none>\", state.m_chain_sync.m_work_header->GetBlockHash().ToString());\n+                    state.m_chain_sync.m_sent_getheaders = true;\n+                    // Bump the timeout to allow a response, which could clear the timeout\n+                    // (if the response shows the peer has synced), reset the timeout (if\n+                    // the peer syncs to the required work but not to our tip), or result\n+                    // in disconnect (if we advance to the timeout and pindexBestKnownBlock\n+                    // has not sufficiently progressed)\n+                    state.m_chain_sync.m_timeout = time_in_seconds + HEADERS_RESPONSE_TIME;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 231,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "f2e3f6d732c13faff9de165044ae11e374f0ba0f",
      "in_reply_to_id": 906192500,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Does that reasoning sound right to you as well?\r\n\r\nYes, that's also the solution I had thought of. ",
      "created_at": "2022-06-24T17:29:31Z",
      "updated_at": "2022-06-24T17:29:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r906264070",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906264070"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4455,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908380211",
      "pull_request_review_id": 1021591496,
      "id": 908380211,
      "node_id": "PRRC_kwDOABII5842JMgz",
      "diff_hunk": "@@ -2194,6 +2215,203 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+ * don't connect before given DoS points.\n+ *\n+ * Once a headers message is received that is valid and does connect,\n+ * nUnconnectingHeaders gets reset back to 0.\n+ */\n+void PeerManagerImpl::HandleFewUnconnectingHeaders(CNode& pfrom, Peer& peer,\n+        const std::vector<CBlockHeader>& headers)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    LOCK(cs_main);\n+    CNodeState *nodestate = State(pfrom.GetId());\n+\n+    nodestate->nUnconnectingHeaders++;\n+    // Try to fill in the missing headers.\n+    if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), peer)) {\n+        LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+            headers[0].GetHash().ToString(),\n+            headers[0].hashPrevBlock.ToString(),\n+            m_chainman.m_best_header->nHeight,\n+            pfrom.GetId(), nodestate->nUnconnectingHeaders);\n+    }\n+    // Set hashLastUnknownBlock for this peer, so that if we\n+    // eventually get the headers - even from a different peer -\n+    // we can use this peer to download.\n+    UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n+\n+    // The peer may just be broken, so periodically assign DoS points if this\n+    // condition persists.\n+    if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n+        Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n+    }\n+    return;\n+}\n+\n+bool PeerManagerImpl::CheckHeadersAreContinuous(const std::vector<CBlockHeader>& headers) const\n+{\n+    uint256 hashLastBlock;\n+    for (const CBlockHeader& header : headers) {\n+        if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n+            return false;\n+        }\n+        hashLastBlock = header.GetHash();\n+    }\n+    return true;\n+}\n+\n+bool PeerManagerImpl::MaybeSendGetHeaders(CNode& pfrom, const CBlockLocator& locator, Peer& peer)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    const auto current_time = GetTime<std::chrono::seconds>();",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 113,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Looking at the documentation for `GetTime` it appears that `NodeClock::now()` would be preferred here.",
      "created_at": "2022-06-28T11:45:06Z",
      "updated_at": "2022-06-28T12:46:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908380211",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908380211"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908387486",
      "pull_request_review_id": 1021591496,
      "id": 908387486,
      "node_id": "PRRC_kwDOABII5842JOSe",
      "diff_hunk": "@@ -560,6 +565,22 @@ class PeerManagerImpl final : public PeerManager\n                                const std::vector<CBlockHeader>& headers,\n                                bool via_compact_block)\n         EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n+    /** Various helpers for headers processing, invoked by ProcessHeadersMessage() */\n+    /** Deal with state tracking and headers sync for peers that send the\n+     * occasional non-connecting header (this can happen due to BIP 130 headers\n+     * announcements for blocks interacting with the 2hr rule). */",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's not clear to me what 2hr rule you are referring to",
      "created_at": "2022-06-28T11:53:50Z",
      "updated_at": "2022-06-28T12:46:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908387486",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908387486"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 574,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908392415",
      "pull_request_review_id": 1021591496,
      "id": 908392415,
      "node_id": "PRRC_kwDOABII5842JPff",
      "diff_hunk": "@@ -2206,55 +2424,35 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n         return;\n     }\n \n-    bool received_new_header = false;\n     const CBlockIndex *pindexLast = nullptr;\n-    {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom.GetId());\n \n-        // If this looks like it could be a block announcement (nCount <=\n-        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n-        // don't connect:\n-        // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n-        // - Once a headers message is received that is valid and does connect,\n-        //   nUnconnectingHeaders gets reset back to 0.\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n-            nodestate->nUnconnectingHeaders++;\n-            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), uint256()));\n-            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n-                     headers[0].GetHash().ToString(),\n-                     headers[0].hashPrevBlock.ToString(),\n-                     m_chainman.m_best_header->nHeight,\n-                     pfrom.GetId(), nodestate->nUnconnectingHeaders);\n-            // Set hashLastUnknownBlock for this peer, so that if we\n-            // eventually get the headers - even from a different peer -\n-            // we can use this peer to download.\n-            UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n-\n-            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n-                Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n-            }\n-            return;\n-        }\n+    // Do these headers connect to something in our block index?\n+    bool headers_connect_blockindex = WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) != nullptr);\n \n-        uint256 hashLastBlock;\n-        for (const CBlockHeader& header : headers) {\n-            if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n-                Misbehaving(peer, 20, \"non-continuous headers sequence\");\n-                return;\n-            }\n-            hashLastBlock = header.GetHash();\n+    if (!headers_connect_blockindex) {\n+        if (nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n+            // If this looks like it could be a BIP 130 block announcement, use\n+            // special logic for handling headers that don't connect, as this\n+            // could be benign.\n+            HandleFewUnconnectingHeaders(pfrom, peer, headers);\n+        } else {\n+            BlockValidationState state;\n+            state.Invalid(BlockValidationResult::BLOCK_MISSING_PREV, \"prev-blk-not-found\");\n+            MaybePunishNodeForBlock(pfrom.GetId(), state, via_compact_block, \"invalid header received\");",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 310,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think a direct call to `Misbehaving()` is better here, see: https://github.com/bitcoin/bitcoin/pull/24571#discussion_r863638047",
      "created_at": "2022-06-28T11:59:15Z",
      "updated_at": "2022-06-28T12:46:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908392415",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908392415"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": 2439,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2441,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908396948",
      "pull_request_review_id": 1021591496,
      "id": 908396948,
      "node_id": "PRRC_kwDOABII5842JQmU",
      "diff_hunk": "@@ -2194,6 +2215,203 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+ * don't connect before given DoS points.\n+ *\n+ * Once a headers message is received that is valid and does connect,\n+ * nUnconnectingHeaders gets reset back to 0.\n+ */\n+void PeerManagerImpl::HandleFewUnconnectingHeaders(CNode& pfrom, Peer& peer,\n+        const std::vector<CBlockHeader>& headers)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    LOCK(cs_main);\n+    CNodeState *nodestate = State(pfrom.GetId());\n+\n+    nodestate->nUnconnectingHeaders++;\n+    // Try to fill in the missing headers.\n+    if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), peer)) {\n+        LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+            headers[0].GetHash().ToString(),\n+            headers[0].hashPrevBlock.ToString(),\n+            m_chainman.m_best_header->nHeight,\n+            pfrom.GetId(), nodestate->nUnconnectingHeaders);\n+    }\n+    // Set hashLastUnknownBlock for this peer, so that if we\n+    // eventually get the headers - even from a different peer -\n+    // we can use this peer to download.\n+    UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n+\n+    // The peer may just be broken, so periodically assign DoS points if this\n+    // condition persists.\n+    if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n+        Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n+    }\n+    return;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n```",
      "created_at": "2022-06-28T12:04:37Z",
      "updated_at": "2022-06-28T12:46:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908396948",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908396948"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908405682",
      "pull_request_review_id": 1021591496,
      "id": 908405682,
      "node_id": "PRRC_kwDOABII5842JSuy",
      "diff_hunk": "@@ -2206,55 +2424,35 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n         return;\n     }\n \n-    bool received_new_header = false;\n     const CBlockIndex *pindexLast = nullptr;\n-    {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom.GetId());\n \n-        // If this looks like it could be a block announcement (nCount <=\n-        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n-        // don't connect:\n-        // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n-        // - Once a headers message is received that is valid and does connect,\n-        //   nUnconnectingHeaders gets reset back to 0.\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n-            nodestate->nUnconnectingHeaders++;\n-            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), uint256()));\n-            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n-                     headers[0].GetHash().ToString(),\n-                     headers[0].hashPrevBlock.ToString(),\n-                     m_chainman.m_best_header->nHeight,\n-                     pfrom.GetId(), nodestate->nUnconnectingHeaders);\n-            // Set hashLastUnknownBlock for this peer, so that if we\n-            // eventually get the headers - even from a different peer -\n-            // we can use this peer to download.\n-            UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n-\n-            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n-                Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n-            }\n-            return;\n-        }\n+    // Do these headers connect to something in our block index?\n+    bool headers_connect_blockindex = WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) != nullptr);\n \n-        uint256 hashLastBlock;\n-        for (const CBlockHeader& header : headers) {\n-            if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n-                Misbehaving(peer, 20, \"non-continuous headers sequence\");\n-                return;\n-            }\n-            hashLastBlock = header.GetHash();\n+    if (!headers_connect_blockindex) {\n+        if (nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n+            // If this looks like it could be a BIP 130 block announcement, use\n+            // special logic for handling headers that don't connect, as this\n+            // could be benign.\n+            HandleFewUnconnectingHeaders(pfrom, peer, headers);\n+        } else {\n+            BlockValidationState state;\n+            state.Invalid(BlockValidationResult::BLOCK_MISSING_PREV, \"prev-blk-not-found\");\n+            MaybePunishNodeForBlock(pfrom.GetId(), state, via_compact_block, \"invalid header received\");\n         }\n+        return;\n+    }\n \n-        // If we don't have the last header, then they'll have given us\n-        // something new (if these headers are valid).\n-        if (!m_chainman.m_blockman.LookupBlockIndex(hashLastBlock)) {\n-            received_new_header = true;\n-        }\n+    // At this point, the headers connect to something in our block index.\n+    if (!CheckHeadersAreContinuous(headers)) {\n+        Misbehaving(peer, 20, \"non-continuous headers sequence\");\n+        return;\n     }\n \n+    // If we don't have the last header, then this peer will have given us\n+    // something new (if these headers are valid).\n+    bool received_new_header = WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers.back().GetHash()) == nullptr);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 328,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    bool received_new_header{WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers.back().GetHash()) == nullptr)};\r\n```",
      "created_at": "2022-06-28T12:14:38Z",
      "updated_at": "2022-06-28T12:46:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908405682",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908405682"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2454,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908587356",
      "pull_request_review_id": 1021894446,
      "id": 908587356,
      "node_id": "PRRC_kwDOABII5842J_Fc",
      "diff_hunk": "@@ -2194,6 +2215,203 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+ * don't connect before given DoS points.\n+ *\n+ * Once a headers message is received that is valid and does connect,\n+ * nUnconnectingHeaders gets reset back to 0.\n+ */\n+void PeerManagerImpl::HandleFewUnconnectingHeaders(CNode& pfrom, Peer& peer,\n+        const std::vector<CBlockHeader>& headers)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    LOCK(cs_main);\n+    CNodeState *nodestate = State(pfrom.GetId());\n+\n+    nodestate->nUnconnectingHeaders++;\n+    // Try to fill in the missing headers.\n+    if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), peer)) {\n+        LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+            headers[0].GetHash().ToString(),\n+            headers[0].hashPrevBlock.ToString(),\n+            m_chainman.m_best_header->nHeight,\n+            pfrom.GetId(), nodestate->nUnconnectingHeaders);\n+    }\n+    // Set hashLastUnknownBlock for this peer, so that if we\n+    // eventually get the headers - even from a different peer -\n+    // we can use this peer to download.\n+    UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n+\n+    // The peer may just be broken, so periodically assign DoS points if this\n+    // condition persists.\n+    if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n+        Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n+    }\n+    return;\n+}\n+\n+bool PeerManagerImpl::CheckHeadersAreContinuous(const std::vector<CBlockHeader>& headers) const\n+{\n+    uint256 hashLastBlock;\n+    for (const CBlockHeader& header : headers) {\n+        if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n+            return false;\n+        }\n+        hashLastBlock = header.GetHash();\n+    }\n+    return true;\n+}\n+\n+bool PeerManagerImpl::MaybeSendGetHeaders(CNode& pfrom, const CBlockLocator& locator, Peer& peer)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    const auto current_time = GetTime<std::chrono::seconds>();",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 113,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "in_reply_to_id": 908380211,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, I tried to make this switch in the last commit but it took me several tries to get it to compile, so please review and let me know if I'm using `NodeClock` correctly!",
      "created_at": "2022-06-28T14:55:04Z",
      "updated_at": "2022-06-28T14:55:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908587356",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908587356"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908814819",
      "pull_request_review_id": 1022219149,
      "id": 908814819,
      "node_id": "PRRC_kwDOABII5842K2nj",
      "diff_hunk": "@@ -560,6 +565,22 @@ class PeerManagerImpl final : public PeerManager\n                                const std::vector<CBlockHeader>& headers,\n                                bool via_compact_block)\n         EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n+    /** Various helpers for headers processing, invoked by ProcessHeadersMessage() */\n+    /** Deal with state tracking and headers sync for peers that send the\n+     * occasional non-connecting header (this can happen due to BIP 130 headers\n+     * announcements for blocks interacting with the 2hr rule). */",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "in_reply_to_id": 908387486,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "One of the most unusual validation rules is that we don't accept a block that is more than 2 hours in the future, see:\r\n https://github.com/bitcoin/bitcoin/blob/5bf65ec66e5986c9188e3f6234f1c5c0f8dc7f90/src/validation.cpp#L3469",
      "created_at": "2022-06-28T18:30:48Z",
      "updated_at": "2022-06-28T18:30:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908814819",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908814819"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 574,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908816037",
      "pull_request_review_id": 1022220768,
      "id": 908816037,
      "node_id": "PRRC_kwDOABII5842K26l",
      "diff_hunk": "@@ -2206,55 +2424,35 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n         return;\n     }\n \n-    bool received_new_header = false;\n     const CBlockIndex *pindexLast = nullptr;\n-    {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom.GetId());\n \n-        // If this looks like it could be a block announcement (nCount <=\n-        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n-        // don't connect:\n-        // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n-        // - Once a headers message is received that is valid and does connect,\n-        //   nUnconnectingHeaders gets reset back to 0.\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n-            nodestate->nUnconnectingHeaders++;\n-            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), uint256()));\n-            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n-                     headers[0].GetHash().ToString(),\n-                     headers[0].hashPrevBlock.ToString(),\n-                     m_chainman.m_best_header->nHeight,\n-                     pfrom.GetId(), nodestate->nUnconnectingHeaders);\n-            // Set hashLastUnknownBlock for this peer, so that if we\n-            // eventually get the headers - even from a different peer -\n-            // we can use this peer to download.\n-            UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n-\n-            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n-                Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n-            }\n-            return;\n-        }\n+    // Do these headers connect to something in our block index?\n+    bool headers_connect_blockindex = WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) != nullptr);\n \n-        uint256 hashLastBlock;\n-        for (const CBlockHeader& header : headers) {\n-            if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n-                Misbehaving(peer, 20, \"non-continuous headers sequence\");\n-                return;\n-            }\n-            hashLastBlock = header.GetHash();\n+    if (!headers_connect_blockindex) {\n+        if (nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n+            // If this looks like it could be a BIP 130 block announcement, use\n+            // special logic for handling headers that don't connect, as this\n+            // could be benign.\n+            HandleFewUnconnectingHeaders(pfrom, peer, headers);\n+        } else {\n+            BlockValidationState state;\n+            state.Invalid(BlockValidationResult::BLOCK_MISSING_PREV, \"prev-blk-not-found\");\n+            MaybePunishNodeForBlock(pfrom.GetId(), state, via_compact_block, \"invalid header received\");",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 310,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "in_reply_to_id": 908392415,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-06-28T18:32:12Z",
      "updated_at": "2022-06-28T18:32:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908816037",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908816037"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": 2439,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2441,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908816540",
      "pull_request_review_id": 1022221449,
      "id": 908816540,
      "node_id": "PRRC_kwDOABII5842K3Cc",
      "diff_hunk": "@@ -2194,6 +2215,203 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+ * don't connect before given DoS points.\n+ *\n+ * Once a headers message is received that is valid and does connect,\n+ * nUnconnectingHeaders gets reset back to 0.\n+ */\n+void PeerManagerImpl::HandleFewUnconnectingHeaders(CNode& pfrom, Peer& peer,\n+        const std::vector<CBlockHeader>& headers)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    LOCK(cs_main);\n+    CNodeState *nodestate = State(pfrom.GetId());\n+\n+    nodestate->nUnconnectingHeaders++;\n+    // Try to fill in the missing headers.\n+    if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), peer)) {\n+        LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+            headers[0].GetHash().ToString(),\n+            headers[0].hashPrevBlock.ToString(),\n+            m_chainman.m_best_header->nHeight,\n+            pfrom.GetId(), nodestate->nUnconnectingHeaders);\n+    }\n+    // Set hashLastUnknownBlock for this peer, so that if we\n+    // eventually get the headers - even from a different peer -\n+    // we can use this peer to download.\n+    UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n+\n+    // The peer may just be broken, so periodically assign DoS points if this\n+    // condition persists.\n+    if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n+        Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n+    }\n+    return;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "in_reply_to_id": 908396948,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-06-28T18:32:50Z",
      "updated_at": "2022-06-28T18:32:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908816540",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908816540"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908817213",
      "pull_request_review_id": 1022222425,
      "id": 908817213,
      "node_id": "PRRC_kwDOABII5842K3M9",
      "diff_hunk": "@@ -2206,55 +2424,35 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n         return;\n     }\n \n-    bool received_new_header = false;\n     const CBlockIndex *pindexLast = nullptr;\n-    {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom.GetId());\n \n-        // If this looks like it could be a block announcement (nCount <=\n-        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n-        // don't connect:\n-        // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n-        // - Once a headers message is received that is valid and does connect,\n-        //   nUnconnectingHeaders gets reset back to 0.\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n-            nodestate->nUnconnectingHeaders++;\n-            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), uint256()));\n-            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n-                     headers[0].GetHash().ToString(),\n-                     headers[0].hashPrevBlock.ToString(),\n-                     m_chainman.m_best_header->nHeight,\n-                     pfrom.GetId(), nodestate->nUnconnectingHeaders);\n-            // Set hashLastUnknownBlock for this peer, so that if we\n-            // eventually get the headers - even from a different peer -\n-            // we can use this peer to download.\n-            UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n-\n-            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n-                Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n-            }\n-            return;\n-        }\n+    // Do these headers connect to something in our block index?\n+    bool headers_connect_blockindex = WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) != nullptr);\n \n-        uint256 hashLastBlock;\n-        for (const CBlockHeader& header : headers) {\n-            if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n-                Misbehaving(peer, 20, \"non-continuous headers sequence\");\n-                return;\n-            }\n-            hashLastBlock = header.GetHash();\n+    if (!headers_connect_blockindex) {\n+        if (nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n+            // If this looks like it could be a BIP 130 block announcement, use\n+            // special logic for handling headers that don't connect, as this\n+            // could be benign.\n+            HandleFewUnconnectingHeaders(pfrom, peer, headers);\n+        } else {\n+            BlockValidationState state;\n+            state.Invalid(BlockValidationResult::BLOCK_MISSING_PREV, \"prev-blk-not-found\");\n+            MaybePunishNodeForBlock(pfrom.GetId(), state, via_compact_block, \"invalid header received\");\n         }\n+        return;\n+    }\n \n-        // If we don't have the last header, then they'll have given us\n-        // something new (if these headers are valid).\n-        if (!m_chainman.m_blockman.LookupBlockIndex(hashLastBlock)) {\n-            received_new_header = true;\n-        }\n+    // At this point, the headers connect to something in our block index.\n+    if (!CheckHeadersAreContinuous(headers)) {\n+        Misbehaving(peer, 20, \"non-continuous headers sequence\");\n+        return;\n     }\n \n+    // If we don't have the last header, then this peer will have given us\n+    // something new (if these headers are valid).\n+    bool received_new_header = WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers.back().GetHash()) == nullptr);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 328,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "in_reply_to_id": 908405682,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Took this change and also switched to this type of initialization for  `headers_connect_blockindex` as well.",
      "created_at": "2022-06-28T18:33:42Z",
      "updated_at": "2022-06-28T18:33:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908817213",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908817213"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2454,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908849115",
      "pull_request_review_id": 1022268771,
      "id": 908849115,
      "node_id": "PRRC_kwDOABII5842K-_b",
      "diff_hunk": "@@ -2194,6 +2215,203 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+ * don't connect before given DoS points.\n+ *\n+ * Once a headers message is received that is valid and does connect,\n+ * nUnconnectingHeaders gets reset back to 0.\n+ */\n+void PeerManagerImpl::HandleFewUnconnectingHeaders(CNode& pfrom, Peer& peer,\n+        const std::vector<CBlockHeader>& headers)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    LOCK(cs_main);\n+    CNodeState *nodestate = State(pfrom.GetId());\n+\n+    nodestate->nUnconnectingHeaders++;\n+    // Try to fill in the missing headers.\n+    if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), peer)) {\n+        LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+            headers[0].GetHash().ToString(),\n+            headers[0].hashPrevBlock.ToString(),\n+            m_chainman.m_best_header->nHeight,\n+            pfrom.GetId(), nodestate->nUnconnectingHeaders);\n+    }\n+    // Set hashLastUnknownBlock for this peer, so that if we\n+    // eventually get the headers - even from a different peer -\n+    // we can use this peer to download.\n+    UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n+\n+    // The peer may just be broken, so periodically assign DoS points if this\n+    // condition persists.\n+    if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n+        Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n+    }\n+    return;\n+}\n+\n+bool PeerManagerImpl::CheckHeadersAreContinuous(const std::vector<CBlockHeader>& headers) const\n+{\n+    uint256 hashLastBlock;\n+    for (const CBlockHeader& header : headers) {\n+        if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n+            return false;\n+        }\n+        hashLastBlock = header.GetHash();\n+    }\n+    return true;\n+}\n+\n+bool PeerManagerImpl::MaybeSendGetHeaders(CNode& pfrom, const CBlockLocator& locator, Peer& peer)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    const auto current_time = GetTime<std::chrono::seconds>();",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 113,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "in_reply_to_id": 908380211,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Dropping the std::atomic seems to have made things work with both clang and g++, so I think this is probably right now (thanks to @dongcarl and @sipa for helping me sort through this!).",
      "created_at": "2022-06-28T19:15:48Z",
      "updated_at": "2022-06-28T19:15:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908849115",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908849115"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908862830",
      "pull_request_review_id": 1022287381,
      "id": 908862830,
      "node_id": "PRRC_kwDOABII5842LCVu",
      "diff_hunk": "@@ -560,6 +565,22 @@ class PeerManagerImpl final : public PeerManager\n                                const std::vector<CBlockHeader>& headers,\n                                bool via_compact_block)\n         EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n+    /** Various helpers for headers processing, invoked by ProcessHeadersMessage() */\n+    /** Deal with state tracking and headers sync for peers that send the\n+     * occasional non-connecting header (this can happen due to BIP 130 headers\n+     * announcements for blocks interacting with the 2hr rule). */",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "in_reply_to_id": 908387486,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah ok, thanks for clarifying! Maybe mention the `MAX_FUTURE_BLOCK_TIME` constant here to make it obvious?",
      "created_at": "2022-06-28T19:23:32Z",
      "updated_at": "2022-06-28T19:23:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908862830",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908862830"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 574,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908866897",
      "pull_request_review_id": 1022293270,
      "id": 908866897,
      "node_id": "PRRC_kwDOABII5842LDVR",
      "diff_hunk": "@@ -2194,6 +2215,203 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+ * don't connect before given DoS points.\n+ *\n+ * Once a headers message is received that is valid and does connect,\n+ * nUnconnectingHeaders gets reset back to 0.\n+ */\n+void PeerManagerImpl::HandleFewUnconnectingHeaders(CNode& pfrom, Peer& peer,\n+        const std::vector<CBlockHeader>& headers)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    LOCK(cs_main);\n+    CNodeState *nodestate = State(pfrom.GetId());\n+\n+    nodestate->nUnconnectingHeaders++;\n+    // Try to fill in the missing headers.\n+    if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), peer)) {\n+        LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+            headers[0].GetHash().ToString(),\n+            headers[0].hashPrevBlock.ToString(),\n+            m_chainman.m_best_header->nHeight,\n+            pfrom.GetId(), nodestate->nUnconnectingHeaders);\n+    }\n+    // Set hashLastUnknownBlock for this peer, so that if we\n+    // eventually get the headers - even from a different peer -\n+    // we can use this peer to download.\n+    UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n+\n+    // The peer may just be broken, so periodically assign DoS points if this\n+    // condition persists.\n+    if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n+        Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n+    }\n+    return;\n+}\n+\n+bool PeerManagerImpl::CheckHeadersAreContinuous(const std::vector<CBlockHeader>& headers) const\n+{\n+    uint256 hashLastBlock;\n+    for (const CBlockHeader& header : headers) {\n+        if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n+            return false;\n+        }\n+        hashLastBlock = header.GetHash();\n+    }\n+    return true;\n+}\n+\n+bool PeerManagerImpl::MaybeSendGetHeaders(CNode& pfrom, const CBlockLocator& locator, Peer& peer)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    const auto current_time = GetTime<std::chrono::seconds>();",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 113,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "in_reply_to_id": 908380211,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Interesting, the `std::atomic` version did work for me locally (compiled with clang). What you have now looks good to me!",
      "created_at": "2022-06-28T19:28:57Z",
      "updated_at": "2022-06-28T19:28:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908866897",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908866897"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908867081",
      "pull_request_review_id": 1022293573,
      "id": 908867081,
      "node_id": "PRRC_kwDOABII5842LDYJ",
      "diff_hunk": "@@ -2194,6 +2215,203 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+ * don't connect before given DoS points.\n+ *\n+ * Once a headers message is received that is valid and does connect,\n+ * nUnconnectingHeaders gets reset back to 0.\n+ */\n+void PeerManagerImpl::HandleFewUnconnectingHeaders(CNode& pfrom, Peer& peer,\n+        const std::vector<CBlockHeader>& headers)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    LOCK(cs_main);\n+    CNodeState *nodestate = State(pfrom.GetId());\n+\n+    nodestate->nUnconnectingHeaders++;\n+    // Try to fill in the missing headers.\n+    if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), peer)) {\n+        LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+            headers[0].GetHash().ToString(),\n+            headers[0].hashPrevBlock.ToString(),\n+            m_chainman.m_best_header->nHeight,\n+            pfrom.GetId(), nodestate->nUnconnectingHeaders);\n+    }\n+    // Set hashLastUnknownBlock for this peer, so that if we\n+    // eventually get the headers - even from a different peer -\n+    // we can use this peer to download.\n+    UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n+\n+    // The peer may just be broken, so periodically assign DoS points if this\n+    // condition persists.\n+    if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n+        Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n+    }\n+    return;\n+}\n+\n+bool PeerManagerImpl::CheckHeadersAreContinuous(const std::vector<CBlockHeader>& headers) const\n+{\n+    uint256 hashLastBlock;\n+    for (const CBlockHeader& header : headers) {\n+        if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n+            return false;\n+        }\n+        hashLastBlock = header.GetHash();\n+    }\n+    return true;\n+}\n+\n+bool PeerManagerImpl::MaybeSendGetHeaders(CNode& pfrom, const CBlockLocator& locator, Peer& peer)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    const auto current_time = GetTime<std::chrono::seconds>();",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 113,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "in_reply_to_id": 908380211,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It should be possible to use std::atomic on this (if you want to). Though, you may have to invoke the time_point constructor before assigning a value to the atomic. This can be done, for example, by calling `NodeSeconds{}` from https://github.com/bitcoin/bitcoin/blob/480d8069d7da954301fbb5c96b766e91b139fe5b/src/util/time.h#L25",
      "created_at": "2022-06-28T19:29:15Z",
      "updated_at": "2022-06-28T19:29:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908867081",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908867081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908882206",
      "pull_request_review_id": 1022315313,
      "id": 908882206,
      "node_id": "PRRC_kwDOABII5842LHEe",
      "diff_hunk": "@@ -2194,6 +2215,203 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+ * don't connect before given DoS points.\n+ *\n+ * Once a headers message is received that is valid and does connect,\n+ * nUnconnectingHeaders gets reset back to 0.\n+ */\n+void PeerManagerImpl::HandleFewUnconnectingHeaders(CNode& pfrom, Peer& peer,\n+        const std::vector<CBlockHeader>& headers)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    LOCK(cs_main);\n+    CNodeState *nodestate = State(pfrom.GetId());\n+\n+    nodestate->nUnconnectingHeaders++;\n+    // Try to fill in the missing headers.\n+    if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), peer)) {\n+        LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+            headers[0].GetHash().ToString(),\n+            headers[0].hashPrevBlock.ToString(),\n+            m_chainman.m_best_header->nHeight,\n+            pfrom.GetId(), nodestate->nUnconnectingHeaders);\n+    }\n+    // Set hashLastUnknownBlock for this peer, so that if we\n+    // eventually get the headers - even from a different peer -\n+    // we can use this peer to download.\n+    UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n+\n+    // The peer may just be broken, so periodically assign DoS points if this\n+    // condition persists.\n+    if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n+        Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n+    }\n+    return;\n+}\n+\n+bool PeerManagerImpl::CheckHeadersAreContinuous(const std::vector<CBlockHeader>& headers) const\n+{\n+    uint256 hashLastBlock;\n+    for (const CBlockHeader& header : headers) {\n+        if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n+            return false;\n+        }\n+        hashLastBlock = header.GetHash();\n+    }\n+    return true;\n+}\n+\n+bool PeerManagerImpl::MaybeSendGetHeaders(CNode& pfrom, const CBlockLocator& locator, Peer& peer)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    const auto current_time = GetTime<std::chrono::seconds>();",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 113,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "in_reply_to_id": 908380211,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@MarcoFalke I think I'll probably give up on trying to use `std::atomic` because all my efforts seem to fail, but if you feel like writing the code and can share a diff that compiles I'd be happy to include it.",
      "created_at": "2022-06-28T19:49:32Z",
      "updated_at": "2022-06-28T19:49:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908882206",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908882206"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908885764",
      "pull_request_review_id": 1022320268,
      "id": 908885764,
      "node_id": "PRRC_kwDOABII5842LH8E",
      "diff_hunk": "@@ -560,6 +565,22 @@ class PeerManagerImpl final : public PeerManager\n                                const std::vector<CBlockHeader>& headers,\n                                bool via_compact_block)\n         EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n+    /** Various helpers for headers processing, invoked by ProcessHeadersMessage() */\n+    /** Deal with state tracking and headers sync for peers that send the\n+     * occasional non-connecting header (this can happen due to BIP 130 headers\n+     * announcements for blocks interacting with the 2hr rule). */",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "in_reply_to_id": 908387486,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done!",
      "created_at": "2022-06-28T19:54:12Z",
      "updated_at": "2022-06-28T19:54:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908885764",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908885764"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 574,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/911178979",
      "pull_request_review_id": 1025098765,
      "id": 911178979,
      "node_id": "PRRC_kwDOABII5842T3zj",
      "diff_hunk": "@@ -2194,6 +2215,203 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+ * don't connect before given DoS points.\n+ *\n+ * Once a headers message is received that is valid and does connect,\n+ * nUnconnectingHeaders gets reset back to 0.\n+ */\n+void PeerManagerImpl::HandleFewUnconnectingHeaders(CNode& pfrom, Peer& peer,\n+        const std::vector<CBlockHeader>& headers)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    LOCK(cs_main);\n+    CNodeState *nodestate = State(pfrom.GetId());\n+\n+    nodestate->nUnconnectingHeaders++;\n+    // Try to fill in the missing headers.\n+    if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), peer)) {\n+        LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+            headers[0].GetHash().ToString(),\n+            headers[0].hashPrevBlock.ToString(),\n+            m_chainman.m_best_header->nHeight,\n+            pfrom.GetId(), nodestate->nUnconnectingHeaders);\n+    }\n+    // Set hashLastUnknownBlock for this peer, so that if we\n+    // eventually get the headers - even from a different peer -\n+    // we can use this peer to download.\n+    UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n+\n+    // The peer may just be broken, so periodically assign DoS points if this\n+    // condition persists.\n+    if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n+        Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n+    }\n+    return;\n+}\n+\n+bool PeerManagerImpl::CheckHeadersAreContinuous(const std::vector<CBlockHeader>& headers) const\n+{\n+    uint256 hashLastBlock;\n+    for (const CBlockHeader& header : headers) {\n+        if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n+            return false;\n+        }\n+        hashLastBlock = header.GetHash();\n+    }\n+    return true;\n+}\n+\n+bool PeerManagerImpl::MaybeSendGetHeaders(CNode& pfrom, const CBlockLocator& locator, Peer& peer)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    const auto current_time = GetTime<std::chrono::seconds>();",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 113,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "in_reply_to_id": 908380211,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I presume the issue was g++-8 in https://cirrus-ci.com/task/5966736871653376?logs=ci#L2017\r\n\r\nI tried my proposal (calling `NodeSeconds{}`) and it worked on top of your commit.\r\n\r\n```diff\r\n# git log -1 && git diff \r\ncommit fa24d37213cede7136ed34d481091b84642c62a6 (HEAD)\r\nAuthor: Suhas Daftuar <sdaftuar@gmail.com>\r\nDate:   Tue Jun 28 10:53:02 2022 -0400\r\n\r\n    Replace GetTime() with NodeClock in MaybeSendGetHeaders()\r\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\r\nindex a75e3bd7f..6fc3009cb 100644\r\n--- a/src/net_processing.cpp\r\n+++ b/src/net_processing.cpp\r\n@@ -358,7 +358,7 @@ struct Peer {\r\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\r\n \r\n     /** Time of the last getheaders message to this peer */\r\n-    std::atomic<NodeClock::time_point> m_last_getheaders_timestamp{};\r\n+    std::atomic<NodeClock::time_point> m_last_getheaders_timestamp{NodeSeconds{}};\r\n \r\n     Peer(NodeId id)\r\n         : m_id{id}\r\n```\r\n\r\nAn equivalent would be to call `NodeClock::time_point{}` instead.",
      "created_at": "2022-06-30T15:40:30Z",
      "updated_at": "2022-06-30T15:40:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r911178979",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/911178979"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/911834780",
      "pull_request_review_id": 1026030833,
      "id": 911834780,
      "node_id": "PRRC_kwDOABII5842WX6c",
      "diff_hunk": "@@ -2194,6 +2215,203 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+ * don't connect before given DoS points.\n+ *\n+ * Once a headers message is received that is valid and does connect,\n+ * nUnconnectingHeaders gets reset back to 0.\n+ */\n+void PeerManagerImpl::HandleFewUnconnectingHeaders(CNode& pfrom, Peer& peer,\n+        const std::vector<CBlockHeader>& headers)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    LOCK(cs_main);\n+    CNodeState *nodestate = State(pfrom.GetId());\n+\n+    nodestate->nUnconnectingHeaders++;\n+    // Try to fill in the missing headers.\n+    if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), peer)) {\n+        LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+            headers[0].GetHash().ToString(),\n+            headers[0].hashPrevBlock.ToString(),\n+            m_chainman.m_best_header->nHeight,\n+            pfrom.GetId(), nodestate->nUnconnectingHeaders);\n+    }\n+    // Set hashLastUnknownBlock for this peer, so that if we\n+    // eventually get the headers - even from a different peer -\n+    // we can use this peer to download.\n+    UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n+\n+    // The peer may just be broken, so periodically assign DoS points if this\n+    // condition persists.\n+    if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n+        Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n+    }\n+    return;\n+}\n+\n+bool PeerManagerImpl::CheckHeadersAreContinuous(const std::vector<CBlockHeader>& headers) const\n+{\n+    uint256 hashLastBlock;\n+    for (const CBlockHeader& header : headers) {\n+        if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n+            return false;\n+        }\n+        hashLastBlock = header.GetHash();\n+    }\n+    return true;\n+}\n+\n+bool PeerManagerImpl::MaybeSendGetHeaders(CNode& pfrom, const CBlockLocator& locator, Peer& peer)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    const auto current_time = GetTime<std::chrono::seconds>();",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 113,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "in_reply_to_id": 908380211,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think the problem here is `std::atomic<T>` requires `T` to be trivially copyable, but unlike `duration`, `time_point` isn't implemented as trivially copyable (and none of `time_point`, `duration`, or the underlying `rep` are specified as being trivially copyable either). Since we already assume `duration` is trivially copyable, last time I messed with this I wrote a wrapper, something like:\r\n\r\n```c++\r\ntemplate<typename TP>\r\nclass atomic_time_point {\r\nprivate:\r\n    using dur = typename TP::duration;\r\n    std::atomic<dur> d;\r\npublic:\r\n    atomic_time_point() noexcept : d{dur{0}} { }\r\n    atomic_time_point(const atomic_time_point&) = delete;\r\n    atomic_time_point(const TP& t) noexcept : d{t.time_since_epoch()} { }\r\n    TP load() { return TP{d.load()}; }\r\n    TP operator=(const TP& t) { d = t.time_since_epoch(); return t; }\r\n};\r\nusing AtomicNodeTime = atomic_time_point<NodeClock::time_point>;\r\nusing AtomicNodeSeconds = atomic_time_point<NodeSeconds>;\r\n```\r\n\r\nwhich would let you write `AtomicNodeTime m_last_getheaders_timestamp{};` without relying on `time_point` implementation details.",
      "created_at": "2022-07-01T10:23:28Z",
      "updated_at": "2022-07-01T10:23:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r911834780",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/911834780"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/911858045",
      "pull_request_review_id": 1026064291,
      "id": 911858045,
      "node_id": "PRRC_kwDOABII5842Wdl9",
      "diff_hunk": "@@ -2194,6 +2215,203 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+ * don't connect before given DoS points.\n+ *\n+ * Once a headers message is received that is valid and does connect,\n+ * nUnconnectingHeaders gets reset back to 0.\n+ */\n+void PeerManagerImpl::HandleFewUnconnectingHeaders(CNode& pfrom, Peer& peer,\n+        const std::vector<CBlockHeader>& headers)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    LOCK(cs_main);\n+    CNodeState *nodestate = State(pfrom.GetId());\n+\n+    nodestate->nUnconnectingHeaders++;\n+    // Try to fill in the missing headers.\n+    if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), peer)) {\n+        LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+            headers[0].GetHash().ToString(),\n+            headers[0].hashPrevBlock.ToString(),\n+            m_chainman.m_best_header->nHeight,\n+            pfrom.GetId(), nodestate->nUnconnectingHeaders);\n+    }\n+    // Set hashLastUnknownBlock for this peer, so that if we\n+    // eventually get the headers - even from a different peer -\n+    // we can use this peer to download.\n+    UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n+\n+    // The peer may just be broken, so periodically assign DoS points if this\n+    // condition persists.\n+    if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n+        Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n+    }\n+    return;\n+}\n+\n+bool PeerManagerImpl::CheckHeadersAreContinuous(const std::vector<CBlockHeader>& headers) const\n+{\n+    uint256 hashLastBlock;\n+    for (const CBlockHeader& header : headers) {\n+        if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n+            return false;\n+        }\n+        hashLastBlock = header.GetHash();\n+    }\n+    return true;\n+}\n+\n+bool PeerManagerImpl::MaybeSendGetHeaders(CNode& pfrom, const CBlockLocator& locator, Peer& peer)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    const auto current_time = GetTime<std::chrono::seconds>();",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 113,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "in_reply_to_id": 908380211,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> time_point isn't implemented as trivially copyable\r\n\r\nCan you add references to your claim that they are not trivially copyable?\r\n\r\nSee also the cpp program which passes on gcc7/clang5:\r\n\r\n```cpp\r\n#include <chrono>\r\n\r\ntemplate <class T>\r\nvoid CanUseInAtomic() {\r\n    static_assert(std::is_trivially_copyable_v<T>);\r\n    static_assert(std::is_copy_constructible_v<T>);\r\n    static_assert(std::is_move_constructible_v<T>);\r\n    static_assert(std::is_copy_assignable_v<T>);\r\n    static_assert(std::is_move_assignable_v<T>);\r\n}\r\n\r\nint main() {\r\n    CanUseInAtomic<bool>();\r\n    CanUseInAtomic<std::chrono::seconds>();      // duration\r\n    CanUseInAtomic<std::chrono::system_clock::time_point>();  // time_point\r\n}\r\n```\r\n\r\n\r\n\r\nhttps://godbolt.org/z/3nKc43cPv",
      "created_at": "2022-07-01T10:55:11Z",
      "updated_at": "2022-07-01T10:55:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r911858045",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/911858045"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/911914840",
      "pull_request_review_id": 1026148037,
      "id": 911914840,
      "node_id": "PRRC_kwDOABII5842WrdY",
      "diff_hunk": "@@ -2194,6 +2215,203 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+ * don't connect before given DoS points.\n+ *\n+ * Once a headers message is received that is valid and does connect,\n+ * nUnconnectingHeaders gets reset back to 0.\n+ */\n+void PeerManagerImpl::HandleFewUnconnectingHeaders(CNode& pfrom, Peer& peer,\n+        const std::vector<CBlockHeader>& headers)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    LOCK(cs_main);\n+    CNodeState *nodestate = State(pfrom.GetId());\n+\n+    nodestate->nUnconnectingHeaders++;\n+    // Try to fill in the missing headers.\n+    if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), peer)) {\n+        LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+            headers[0].GetHash().ToString(),\n+            headers[0].hashPrevBlock.ToString(),\n+            m_chainman.m_best_header->nHeight,\n+            pfrom.GetId(), nodestate->nUnconnectingHeaders);\n+    }\n+    // Set hashLastUnknownBlock for this peer, so that if we\n+    // eventually get the headers - even from a different peer -\n+    // we can use this peer to download.\n+    UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n+\n+    // The peer may just be broken, so periodically assign DoS points if this\n+    // condition persists.\n+    if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n+        Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n+    }\n+    return;\n+}\n+\n+bool PeerManagerImpl::CheckHeadersAreContinuous(const std::vector<CBlockHeader>& headers) const\n+{\n+    uint256 hashLastBlock;\n+    for (const CBlockHeader& header : headers) {\n+        if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n+            return false;\n+        }\n+        hashLastBlock = header.GetHash();\n+    }\n+    return true;\n+}\n+\n+bool PeerManagerImpl::MaybeSendGetHeaders(CNode& pfrom, const CBlockLocator& locator, Peer& peer)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    const auto current_time = GetTime<std::chrono::seconds>();",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 113,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "in_reply_to_id": 908380211,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm, fair point. `static_assert(std::is_nothrow_default_constructible_v<T>);` catches it for clang 5, but not for gcc 7.1 for what that's worth.\r\n\r\nBut I don't think the pre-C++20 behaviour of default `std::atomic` initialization is ever what we want anyway? Per https://en.cppreference.com/w/cpp/atomic/atomic/atomic\r\n\r\n> 1) The default constructor is trivial: no initialization takes place other than [zero initialization](https://en.cppreference.com/w/cpp/language/zero_initialization) of static and thread-local objects. [std::atomic_init](https://en.cppreference.com/w/cpp/atomic/atomic_init) may be used to complete initialization.\r\n\r\nthat will just leave things undefined, like `int x;` ?\r\n\r\n(Anyway, no need for further changes in this PR, as far as I can see)",
      "created_at": "2022-07-01T12:23:35Z",
      "updated_at": "2022-07-01T12:23:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r911914840",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/911914840"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/911918154",
      "pull_request_review_id": 1026152869,
      "id": 911918154,
      "node_id": "PRRC_kwDOABII5842WsRK",
      "diff_hunk": "@@ -2194,6 +2215,203 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+ * don't connect before given DoS points.\n+ *\n+ * Once a headers message is received that is valid and does connect,\n+ * nUnconnectingHeaders gets reset back to 0.\n+ */\n+void PeerManagerImpl::HandleFewUnconnectingHeaders(CNode& pfrom, Peer& peer,\n+        const std::vector<CBlockHeader>& headers)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    LOCK(cs_main);\n+    CNodeState *nodestate = State(pfrom.GetId());\n+\n+    nodestate->nUnconnectingHeaders++;\n+    // Try to fill in the missing headers.\n+    if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), peer)) {\n+        LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+            headers[0].GetHash().ToString(),\n+            headers[0].hashPrevBlock.ToString(),\n+            m_chainman.m_best_header->nHeight,\n+            pfrom.GetId(), nodestate->nUnconnectingHeaders);\n+    }\n+    // Set hashLastUnknownBlock for this peer, so that if we\n+    // eventually get the headers - even from a different peer -\n+    // we can use this peer to download.\n+    UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n+\n+    // The peer may just be broken, so periodically assign DoS points if this\n+    // condition persists.\n+    if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n+        Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n+    }\n+    return;\n+}\n+\n+bool PeerManagerImpl::CheckHeadersAreContinuous(const std::vector<CBlockHeader>& headers) const\n+{\n+    uint256 hashLastBlock;\n+    for (const CBlockHeader& header : headers) {\n+        if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n+            return false;\n+        }\n+        hashLastBlock = header.GetHash();\n+    }\n+    return true;\n+}\n+\n+bool PeerManagerImpl::MaybeSendGetHeaders(CNode& pfrom, const CBlockLocator& locator, Peer& peer)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    const auto current_time = GetTime<std::chrono::seconds>();",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 113,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "in_reply_to_id": 908380211,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I can't say I'm exactly following everything you guys are talking about, but @MarcoFalke thank you -- I updated the PR and the compilers all seem happy now. :). Will squash that last fixup commit now...",
      "created_at": "2022-07-01T12:28:19Z",
      "updated_at": "2022-07-01T12:28:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r911918154",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/911918154"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/912929185",
      "pull_request_review_id": 1027446708,
      "id": 912929185,
      "node_id": "PRRC_kwDOABII5842ajGh",
      "diff_hunk": "@@ -2194,6 +2199,48 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+ * don't connect before given DoS points.",
      "path": "src/net_processing.cpp",
      "position": 23,
      "original_position": 23,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit, typo: \"before *being* given DoS points\" ?",
      "created_at": "2022-07-04T11:55:19Z",
      "updated_at": "2022-07-04T13:25:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r912929185",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/912929185"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2225,
      "original_line": 2209,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913000465",
      "pull_request_review_id": 1027446708,
      "id": 913000465,
      "node_id": "PRRC_kwDOABII5842a0gR",
      "diff_hunk": "@@ -82,7 +82,7 @@ def run_test(self):\n         msg.hashstop = 0\n         peer.send_and_ping(msg)\n         time.sleep(5)\n-        assert \"headers\" not in peer.last_message\n+        assert (\"headers\" not in peer.last_message or len(peer.last_message[\"headers\"].headers) == 0)",
      "path": "test/functional/feature_minchainwork.py",
      "position": 5,
      "original_position": 5,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "abf5d16c24cb08b0451bdbd4d1de63a12930e8f5",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: braces are unnecessary, I think.",
      "created_at": "2022-07-04T13:21:33Z",
      "updated_at": "2022-07-04T13:25:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r913000465",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913000465"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 85,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913493528",
      "pull_request_review_id": 1028199542,
      "id": 913493528,
      "node_id": "PRRC_kwDOABII5842cs4Y",
      "diff_hunk": "@@ -2194,6 +2199,48 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that",
      "path": "src/net_processing.cpp",
      "position": 22,
      "original_position": 22,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e: Pretty sure this counts the headers mgs, not the headers?",
      "created_at": "2022-07-05T07:51:39Z",
      "updated_at": "2022-07-05T12:53:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r913493528",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913493528"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2224,
      "original_line": 2208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913495541",
      "pull_request_review_id": 1028199542,
      "id": 913495541,
      "node_id": "PRRC_kwDOABII5842ctX1",
      "diff_hunk": "@@ -2208,36 +2255,24 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n \n     bool received_new_header = false;\n     const CBlockIndex *pindexLast = nullptr;\n-    {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom.GetId());\n \n-        // If this looks like it could be a block announcement (nCount <=\n-        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n-        // don't connect:\n-        // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n-        // - Once a headers message is received that is valid and does connect,\n-        //   nUnconnectingHeaders gets reset back to 0.\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n-            nodestate->nUnconnectingHeaders++;\n-            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), uint256()));\n-            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n-                     headers[0].GetHash().ToString(),\n-                     headers[0].hashPrevBlock.ToString(),\n-                     m_chainman.m_best_header->nHeight,\n-                     pfrom.GetId(), nodestate->nUnconnectingHeaders);\n-            // Set hashLastUnknownBlock for this peer, so that if we\n-            // eventually get the headers - even from a different peer -\n-            // we can use this peer to download.\n-            UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n-\n-            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n-                Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n-            }\n-            return;\n+    // Do these headers connect to something in our block index?\n+    bool headers_connect_blockindex{WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) != nullptr)};\n+\n+    if (!headers_connect_blockindex) {\n+        if (nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n+            // If this looks like it could be a BIP 130 block announcement, use\n+            // special logic for handling headers that don't connect, as this\n+            // could be benign.\n+            HandleFewUnconnectingHeaders(pfrom, peer, headers);\n+        } else {\n+            Misbehaving(peer, 10, \"invalid header received\");",
      "path": "src/net_processing.cpp",
      "position": 104,
      "original_position": 104,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e It might be good to mention in the commit message that you are changing the points in this \"move\" commit.\r\n\r\nPreviously a non-connecting non-continuous header sequence of size MAX_BLOCKS_TO_ANNOUNCE+1 was assigned 20. Now it is assigned 10, no?",
      "created_at": "2022-07-05T07:53:50Z",
      "updated_at": "2022-07-06T12:48:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r913495541",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913495541"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2439,
      "original_line": 2269,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913611807",
      "pull_request_review_id": 1028199542,
      "id": 913611807,
      "node_id": "PRRC_kwDOABII5842dJwf",
      "diff_hunk": "@@ -2444,15 +2443,9 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n         return;\n     }\n \n-    {\n-        LOCK(cs_main);\n-\n-        // If we don't have the last header, then they'll have given us\n-        // something new (if these headers are valid).\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers.back().GetHash())) {\n-            received_new_header = true;\n-        }\n-    }\n+    // If we don't have the last header, then this peer will have given us\n+    // something new (if these headers are valid).\n+    bool received_new_header{WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers.back().GetHash()) == nullptr)};",
      "path": "src/net_processing.cpp",
      "position": 23,
      "original_position": 23,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "ffe87db247b19ffb8bfba329c5dd0be39ef5a53f",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ffe87db247b19ffb8bfba329c5dd0be39ef5a53f:  It looks like you are splitting one LOCK of cs_main in master into at least 3 in this pull. It would seem plausible that under no load  this has no impact, as only one thread will be active at most. However at higher load, this may cause net_processing to be (minimally) slowed down with the changes here?\r\n\r\nNot a big deal, but maybe at least this cs_main can be avoided by opportunistically calculating the result in the previous WITH_LOCK ?",
      "created_at": "2022-07-05T09:54:35Z",
      "updated_at": "2022-07-05T12:53:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r913611807",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913611807"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2452,
      "original_line": 2448,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914721953",
      "pull_request_review_id": 1029924661,
      "id": 914721953,
      "node_id": "PRRC_kwDOABII5842hYyh",
      "diff_hunk": "@@ -2208,36 +2255,24 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n \n     bool received_new_header = false;\n     const CBlockIndex *pindexLast = nullptr;\n-    {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom.GetId());\n \n-        // If this looks like it could be a block announcement (nCount <=\n-        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n-        // don't connect:\n-        // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n-        // - Once a headers message is received that is valid and does connect,\n-        //   nUnconnectingHeaders gets reset back to 0.\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n-            nodestate->nUnconnectingHeaders++;\n-            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), uint256()));\n-            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n-                     headers[0].GetHash().ToString(),\n-                     headers[0].hashPrevBlock.ToString(),\n-                     m_chainman.m_best_header->nHeight,\n-                     pfrom.GetId(), nodestate->nUnconnectingHeaders);\n-            // Set hashLastUnknownBlock for this peer, so that if we\n-            // eventually get the headers - even from a different peer -\n-            // we can use this peer to download.\n-            UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n-\n-            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n-                Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n-            }\n-            return;\n+    // Do these headers connect to something in our block index?\n+    bool headers_connect_blockindex{WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) != nullptr)};\n+\n+    if (!headers_connect_blockindex) {\n+        if (nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n+            // If this looks like it could be a BIP 130 block announcement, use\n+            // special logic for handling headers that don't connect, as this\n+            // could be benign.\n+            HandleFewUnconnectingHeaders(pfrom, peer, headers);\n+        } else {\n+            Misbehaving(peer, 10, \"invalid header received\");",
      "path": "src/net_processing.cpp",
      "position": 104,
      "original_position": 104,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e",
      "in_reply_to_id": 913495541,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It still gets a score of 20 via `HandleFewUnconnectingHeaders()` when `nCount <= MAX_BLOCKS_TO_ANNOUNCE`; this adds an unavoidable score of 10 for unconnecting headers when `nCount > MAX_BLOCKS_TO_ANNOUNCE` which previously was more or less ignored...",
      "created_at": "2022-07-06T11:19:30Z",
      "updated_at": "2022-07-06T11:19:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914721953",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914721953"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2439,
      "original_line": 2269,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914770077",
      "pull_request_review_id": 1029993980,
      "id": 914770077,
      "node_id": "PRRC_kwDOABII5842hkid",
      "diff_hunk": "@@ -2208,36 +2255,24 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n \n     bool received_new_header = false;\n     const CBlockIndex *pindexLast = nullptr;\n-    {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom.GetId());\n \n-        // If this looks like it could be a block announcement (nCount <=\n-        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n-        // don't connect:\n-        // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n-        // - Once a headers message is received that is valid and does connect,\n-        //   nUnconnectingHeaders gets reset back to 0.\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n-            nodestate->nUnconnectingHeaders++;\n-            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), uint256()));\n-            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n-                     headers[0].GetHash().ToString(),\n-                     headers[0].hashPrevBlock.ToString(),\n-                     m_chainman.m_best_header->nHeight,\n-                     pfrom.GetId(), nodestate->nUnconnectingHeaders);\n-            // Set hashLastUnknownBlock for this peer, so that if we\n-            // eventually get the headers - even from a different peer -\n-            // we can use this peer to download.\n-            UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n-\n-            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n-                Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n-            }\n-            return;\n+    // Do these headers connect to something in our block index?\n+    bool headers_connect_blockindex{WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) != nullptr)};\n+\n+    if (!headers_connect_blockindex) {\n+        if (nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n+            // If this looks like it could be a BIP 130 block announcement, use\n+            // special logic for handling headers that don't connect, as this\n+            // could be benign.\n+            HandleFewUnconnectingHeaders(pfrom, peer, headers);\n+        } else {\n+            Misbehaving(peer, 10, \"invalid header received\");",
      "path": "src/net_processing.cpp",
      "position": 104,
      "original_position": 104,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e",
      "in_reply_to_id": 913495541,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Previously a non-connecting non-continuous header sequence of size MAX_UNCONNECTING_HEADERS would be submitted to validation through `ProcessNewBlockHeaders()`, since the `if (!m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount <= MAX_BLOCKS_TO_ANNOUNCE)` block would be skipped.\r\n\r\nThat would return `BlockValidationResult::BLOCK_MISSING_PREV`:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/691a08718beff31d1b821b192609ea3bfdb24d41/src/validation.cpp#L3590-L3593\r\n\r\nwhich would result in 10 misbehaviour points in `MaybePunishNodeForBlock`",
      "created_at": "2022-07-06T12:19:04Z",
      "updated_at": "2022-07-06T12:19:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914770077",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914770077"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2439,
      "original_line": 2269,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914819517",
      "pull_request_review_id": 1030067842,
      "id": 914819517,
      "node_id": "PRRC_kwDOABII5842hwm9",
      "diff_hunk": "@@ -2208,36 +2255,24 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n \n     bool received_new_header = false;\n     const CBlockIndex *pindexLast = nullptr;\n-    {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom.GetId());\n \n-        // If this looks like it could be a block announcement (nCount <=\n-        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n-        // don't connect:\n-        // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n-        // - Once a headers message is received that is valid and does connect,\n-        //   nUnconnectingHeaders gets reset back to 0.\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n-            nodestate->nUnconnectingHeaders++;\n-            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), uint256()));\n-            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n-                     headers[0].GetHash().ToString(),\n-                     headers[0].hashPrevBlock.ToString(),\n-                     m_chainman.m_best_header->nHeight,\n-                     pfrom.GetId(), nodestate->nUnconnectingHeaders);\n-            // Set hashLastUnknownBlock for this peer, so that if we\n-            // eventually get the headers - even from a different peer -\n-            // we can use this peer to download.\n-            UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n-\n-            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n-                Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n-            }\n-            return;\n+    // Do these headers connect to something in our block index?\n+    bool headers_connect_blockindex{WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) != nullptr)};\n+\n+    if (!headers_connect_blockindex) {\n+        if (nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n+            // If this looks like it could be a BIP 130 block announcement, use\n+            // special logic for handling headers that don't connect, as this\n+            // could be benign.\n+            HandleFewUnconnectingHeaders(pfrom, peer, headers);\n+        } else {\n+            Misbehaving(peer, 10, \"invalid header received\");",
      "path": "src/net_processing.cpp",
      "position": 104,
      "original_position": 104,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e",
      "in_reply_to_id": 913495541,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> this adds an unavoidable score of 10 for unconnecting headers when nCount > MAX_BLOCKS_TO_ANNOUNCE which previously was more or less ignored...\r\n\r\nCan you explain a bit more why this was \"more or less ignored\"? \r\n\r\nPreviously it was deterministically and consistently assigned a `Misbehaving(peer, 20, \"non-continuous headers sequence\");`.\r\n\r\nNow it is deterministically and consistently assigned a `Misbehaving(peer, 10, \"invalid header received\");`.\r\n\r\n> Previously a non-connecting non-continuous header sequence of size MAX_UNCONNECTING_HEADERS would be submitted to validation through ProcessNewBlockHeaders()\r\n\r\nNo, it wouldn't, as it would be rejected by the `Misbehaving(peer, 20, \"non-continuous headers sequence\");` check?\r\n\r\n\r\nWhat am I missing?\r\n",
      "created_at": "2022-07-06T13:09:35Z",
      "updated_at": "2022-07-06T13:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914819517",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914819517"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2439,
      "original_line": 2269,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914832494",
      "pull_request_review_id": 1030087015,
      "id": 914832494,
      "node_id": "PRRC_kwDOABII5842hzxu",
      "diff_hunk": "@@ -2208,36 +2255,24 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n \n     bool received_new_header = false;\n     const CBlockIndex *pindexLast = nullptr;\n-    {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom.GetId());\n \n-        // If this looks like it could be a block announcement (nCount <=\n-        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n-        // don't connect:\n-        // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n-        // - Once a headers message is received that is valid and does connect,\n-        //   nUnconnectingHeaders gets reset back to 0.\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n-            nodestate->nUnconnectingHeaders++;\n-            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), uint256()));\n-            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n-                     headers[0].GetHash().ToString(),\n-                     headers[0].hashPrevBlock.ToString(),\n-                     m_chainman.m_best_header->nHeight,\n-                     pfrom.GetId(), nodestate->nUnconnectingHeaders);\n-            // Set hashLastUnknownBlock for this peer, so that if we\n-            // eventually get the headers - even from a different peer -\n-            // we can use this peer to download.\n-            UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n-\n-            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n-                Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n-            }\n-            return;\n+    // Do these headers connect to something in our block index?\n+    bool headers_connect_blockindex{WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) != nullptr)};\n+\n+    if (!headers_connect_blockindex) {\n+        if (nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n+            // If this looks like it could be a BIP 130 block announcement, use\n+            // special logic for handling headers that don't connect, as this\n+            // could be benign.\n+            HandleFewUnconnectingHeaders(pfrom, peer, headers);\n+        } else {\n+            Misbehaving(peer, 10, \"invalid header received\");",
      "path": "src/net_processing.cpp",
      "position": 104,
      "original_position": 104,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e",
      "in_reply_to_id": 913495541,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> What am I missing?\r\n\r\nNothing. I misread non-continuous as continuous. You're right that this would be rejected with `Misbehaving(peer, 20, \"non-continuous headers sequence\")`",
      "created_at": "2022-07-06T13:22:11Z",
      "updated_at": "2022-07-06T13:22:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914832494",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914832494"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2439,
      "original_line": 2269,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914871029",
      "pull_request_review_id": 1030142634,
      "id": 914871029,
      "node_id": "PRRC_kwDOABII5842h9L1",
      "diff_hunk": "@@ -358,7 +358,7 @@ struct Peer {\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n     /** Time of the last getheaders message to this peer */\n-    std::atomic<std::chrono::seconds> m_last_getheaders_timestamp{0s};\n+    std::atomic<NodeClock::time_point> m_last_getheaders_timestamp{NodeSeconds{}};",
      "path": "src/net_processing.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is there even a need to make this atomic? In a single threaded environment this is not needed. And if the same peer is served by several threads (for whatever reason) in the future, an atomic may prevent UB, but doesn't seem sufficient to prevent races logically.\r\n\r\n",
      "created_at": "2022-07-06T13:55:39Z",
      "updated_at": "2022-07-06T13:55:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914871029",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914871029"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914887154",
      "pull_request_review_id": 1030166239,
      "id": 914887154,
      "node_id": "PRRC_kwDOABII5842iBHy",
      "diff_hunk": "@@ -2194,6 +2199,48 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that",
      "path": "src/net_processing.cpp",
      "position": 22,
      "original_position": 22,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e",
      "in_reply_to_id": 913493528,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sure, I can update the comment in a followup (there's a sense in which what is written is true, in that we only are checking the first header in a message to see if it connects, but that's probably an overly convoluted way to think about things).",
      "created_at": "2022-07-06T14:09:03Z",
      "updated_at": "2022-07-06T14:09:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914887154",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914887154"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2224,
      "original_line": 2208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914892574",
      "pull_request_review_id": 1030173664,
      "id": 914892574,
      "node_id": "PRRC_kwDOABII5842iCce",
      "diff_hunk": "@@ -358,7 +358,7 @@ struct Peer {\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n     /** Time of the last getheaders message to this peer */\n-    std::atomic<std::chrono::seconds> m_last_getheaders_timestamp{0s};\n+    std::atomic<NodeClock::time_point> m_last_getheaders_timestamp{NodeSeconds{}};",
      "path": "src/net_processing.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "in_reply_to_id": 914871029,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm that is an interesting point.  My sense was that we don't want to rely on implicit single-threadedness to reason about data races, so it was safer to just throw this into an atomic and not worry about it.\r\n\r\nI also think that having multiple threads servicing the same peer would not really work for a bunch of reasons (including the one you give, about logical errors in code like this).  I would imagine that multithreading network handling in the future would involve different threads servicing different peers.\r\n\r\nI think the most likely form of UB from data races would be if we were to expose this value via RPC in the future.  So to make this future-proof, I'd prefer that we leave this as-is; it doesn't seem like the performance hit of having an atomic here (which is rarely accessed, as `getheaders` messages are not a frequent occurrence, and there are far more effective ways to CPU DoS a node than to trigger a getheaders) is significant enough to warrant making this harder to reason about in the future.",
      "created_at": "2022-07-06T14:13:50Z",
      "updated_at": "2022-07-06T14:13:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914892574",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914892574"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914899946",
      "pull_request_review_id": 1030184400,
      "id": 914899946,
      "node_id": "PRRC_kwDOABII5842iEPq",
      "diff_hunk": "@@ -2208,36 +2255,24 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n \n     bool received_new_header = false;\n     const CBlockIndex *pindexLast = nullptr;\n-    {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom.GetId());\n \n-        // If this looks like it could be a block announcement (nCount <=\n-        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n-        // don't connect:\n-        // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n-        // - Once a headers message is received that is valid and does connect,\n-        //   nUnconnectingHeaders gets reset back to 0.\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n-            nodestate->nUnconnectingHeaders++;\n-            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), uint256()));\n-            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n-                     headers[0].GetHash().ToString(),\n-                     headers[0].hashPrevBlock.ToString(),\n-                     m_chainman.m_best_header->nHeight,\n-                     pfrom.GetId(), nodestate->nUnconnectingHeaders);\n-            // Set hashLastUnknownBlock for this peer, so that if we\n-            // eventually get the headers - even from a different peer -\n-            // we can use this peer to download.\n-            UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n-\n-            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n-                Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n-            }\n-            return;\n+    // Do these headers connect to something in our block index?\n+    bool headers_connect_blockindex{WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) != nullptr)};\n+\n+    if (!headers_connect_blockindex) {\n+        if (nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n+            // If this looks like it could be a BIP 130 block announcement, use\n+            // special logic for handling headers that don't connect, as this\n+            // could be benign.\n+            HandleFewUnconnectingHeaders(pfrom, peer, headers);\n+        } else {\n+            Misbehaving(peer, 10, \"invalid header received\");",
      "path": "src/net_processing.cpp",
      "position": 104,
      "original_position": 104,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e",
      "in_reply_to_id": 913495541,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure what to say here other than that yes, there are minor behavior changes in this PR.  I don't think any are significant as the DoS points here are pretty arbitrary and when checking for different failures, it shouldn't matter too much which order we do things.  I would have been happy to update the commit message as you suggest but now that this is merged there's not much I can do!\r\n\r\nIt should be the case that any failure before that resulted in DoS points would still result in DoS points now, I think -- if that is not the case, then that would be an oversight to fix.  The motivation for making these kinds of minor changes is to make the headers processing easier to reason about, which is also in preparation for another change I'll be proposing to headers sync in the future (which I think will be easier to understand with the headers processing logic that is introduced in this PR).",
      "created_at": "2022-07-06T14:20:11Z",
      "updated_at": "2022-07-06T14:20:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914899946",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914899946"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2439,
      "original_line": 2269,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914903742",
      "pull_request_review_id": 1030190027,
      "id": 914903742,
      "node_id": "PRRC_kwDOABII5842iFK-",
      "diff_hunk": "@@ -2444,15 +2443,9 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n         return;\n     }\n \n-    {\n-        LOCK(cs_main);\n-\n-        // If we don't have the last header, then they'll have given us\n-        // something new (if these headers are valid).\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers.back().GetHash())) {\n-            received_new_header = true;\n-        }\n-    }\n+    // If we don't have the last header, then this peer will have given us\n+    // something new (if these headers are valid).\n+    bool received_new_header{WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers.back().GetHash()) == nullptr)};",
      "path": "src/net_processing.cpp",
      "position": 23,
      "original_position": 23,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "ffe87db247b19ffb8bfba329c5dd0be39ef5a53f",
      "in_reply_to_id": 913611807,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I suppose!  My view is that the performance here is extremely minor compared to code readability and organizing the ideas in this function together, so I prefer it this way.",
      "created_at": "2022-07-06T14:23:26Z",
      "updated_at": "2022-07-06T14:23:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914903742",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914903742"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2452,
      "original_line": 2448,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914946969",
      "pull_request_review_id": 1030253253,
      "id": 914946969,
      "node_id": "PRRC_kwDOABII5842iPuZ",
      "diff_hunk": "@@ -2208,36 +2255,24 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n \n     bool received_new_header = false;\n     const CBlockIndex *pindexLast = nullptr;\n-    {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom.GetId());\n \n-        // If this looks like it could be a block announcement (nCount <=\n-        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n-        // don't connect:\n-        // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n-        // - Once a headers message is received that is valid and does connect,\n-        //   nUnconnectingHeaders gets reset back to 0.\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n-            nodestate->nUnconnectingHeaders++;\n-            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), uint256()));\n-            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n-                     headers[0].GetHash().ToString(),\n-                     headers[0].hashPrevBlock.ToString(),\n-                     m_chainman.m_best_header->nHeight,\n-                     pfrom.GetId(), nodestate->nUnconnectingHeaders);\n-            // Set hashLastUnknownBlock for this peer, so that if we\n-            // eventually get the headers - even from a different peer -\n-            // we can use this peer to download.\n-            UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n-\n-            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n-                Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n-            }\n-            return;\n+    // Do these headers connect to something in our block index?\n+    bool headers_connect_blockindex{WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) != nullptr)};\n+\n+    if (!headers_connect_blockindex) {\n+        if (nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n+            // If this looks like it could be a BIP 130 block announcement, use\n+            // special logic for handling headers that don't connect, as this\n+            // could be benign.\n+            HandleFewUnconnectingHeaders(pfrom, peer, headers);\n+        } else {\n+            Misbehaving(peer, 10, \"invalid header received\");",
      "path": "src/net_processing.cpp",
      "position": 104,
      "original_position": 104,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e",
      "in_reply_to_id": 913495541,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, it wasn't meant as a criticism of https://github.com/bitcoin/bitcoin/commit/7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e more as a nit to keep in mind in the future. I think the code changes in this commit are perfectly fine. Generally I just prefer to split behaviour changes from refactoring changes, or at least explain the behaviour changes in the commit message briefly. Otherwise, what seems obvious to the author is easily missed by reviewers. (I think this discussion is supporting evidence enough).\r\n\r\n",
      "created_at": "2022-07-06T14:59:09Z",
      "updated_at": "2022-07-06T14:59:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914946969",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914946969"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2439,
      "original_line": 2269,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914956474",
      "pull_request_review_id": 1030266347,
      "id": 914956474,
      "node_id": "PRRC_kwDOABII5842iSC6",
      "diff_hunk": "@@ -358,7 +358,7 @@ struct Peer {\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n     /** Time of the last getheaders message to this peer */\n-    std::atomic<std::chrono::seconds> m_last_getheaders_timestamp{0s};\n+    std::atomic<NodeClock::time_point> m_last_getheaders_timestamp{NodeSeconds{}};",
      "path": "src/net_processing.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "in_reply_to_id": 914871029,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think if this was ever exposed on RPC, we'd also want to think which other fields to return atomically in the response, in which case a per-field atomic isn't enough to prevent logic races. So to me it seems slightly preferable to leave the design of thread safety to when it is needed. Otherwise it may be assumed in the future that this is already perfectly thread safe and can be used as is. Leaving this plain (without atomic) would at least have a thread sanitizer failure hint that the design needs to be re-thought if this was accessed by more than one thread in the future.",
      "created_at": "2022-07-06T15:07:13Z",
      "updated_at": "2022-07-06T15:07:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914956474",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914956474"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914956922",
      "pull_request_review_id": 1030267034,
      "id": 914956922,
      "node_id": "PRRC_kwDOABII5842iSJ6",
      "diff_hunk": "@@ -358,7 +358,7 @@ struct Peer {\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n     /** Time of the last getheaders message to this peer */\n-    std::atomic<std::chrono::seconds> m_last_getheaders_timestamp{0s};\n+    std::atomic<NodeClock::time_point> m_last_getheaders_timestamp{NodeSeconds{}};",
      "path": "src/net_processing.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "in_reply_to_id": 914871029,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(Other than that, agree that atomic doesn't affect performance)",
      "created_at": "2022-07-06T15:07:41Z",
      "updated_at": "2022-07-06T15:07:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914956922",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914956922"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914957570",
      "pull_request_review_id": 1030268055,
      "id": 914957570,
      "node_id": "PRRC_kwDOABII5842iSUC",
      "diff_hunk": "@@ -2194,6 +2199,48 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that",
      "path": "src/net_processing.cpp",
      "position": 22,
      "original_position": 22,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e",
      "in_reply_to_id": 913493528,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Did that in https://github.com/bitcoin/bitcoin/pull/25555. Feel free to NACK or ACK",
      "created_at": "2022-07-06T15:08:16Z",
      "updated_at": "2022-07-06T15:08:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914957570",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914957570"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2224,
      "original_line": 2208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914988526",
      "pull_request_review_id": 1030311611,
      "id": 914988526,
      "node_id": "PRRC_kwDOABII5842iZ3u",
      "diff_hunk": "@@ -2208,36 +2255,24 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n \n     bool received_new_header = false;\n     const CBlockIndex *pindexLast = nullptr;\n-    {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom.GetId());\n \n-        // If this looks like it could be a block announcement (nCount <=\n-        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n-        // don't connect:\n-        // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n-        // - Once a headers message is received that is valid and does connect,\n-        //   nUnconnectingHeaders gets reset back to 0.\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n-            nodestate->nUnconnectingHeaders++;\n-            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), uint256()));\n-            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n-                     headers[0].GetHash().ToString(),\n-                     headers[0].hashPrevBlock.ToString(),\n-                     m_chainman.m_best_header->nHeight,\n-                     pfrom.GetId(), nodestate->nUnconnectingHeaders);\n-            // Set hashLastUnknownBlock for this peer, so that if we\n-            // eventually get the headers - even from a different peer -\n-            // we can use this peer to download.\n-            UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n-\n-            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n-                Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n-            }\n-            return;\n+    // Do these headers connect to something in our block index?\n+    bool headers_connect_blockindex{WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) != nullptr)};\n+\n+    if (!headers_connect_blockindex) {\n+        if (nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n+            // If this looks like it could be a BIP 130 block announcement, use\n+            // special logic for handling headers that don't connect, as this\n+            // could be benign.\n+            HandleFewUnconnectingHeaders(pfrom, peer, headers);\n+        } else {\n+            Misbehaving(peer, 10, \"invalid header received\");",
      "path": "src/net_processing.cpp",
      "position": 104,
      "original_position": 104,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e",
      "in_reply_to_id": 913495541,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Previously a non-connecting non-continuous header sequence of size MAX_BLOCKS_TO_ANNOUNCE+1 was assigned 20. Now it is assigned 10, no?\r\n> Previously it was deterministically and consistently assigned a `Misbehaving(peer, 20, \"non-continuous headers sequence\");`.\r\n\r\nAh, sorry, I was only thinking of the non-connecting continuous case, not the non-connecting, non-continuous case.",
      "created_at": "2022-07-06T15:36:48Z",
      "updated_at": "2022-07-06T15:36:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914988526",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914988526"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2439,
      "original_line": 2269,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/915103219",
      "pull_request_review_id": 1030482960,
      "id": 915103219,
      "node_id": "PRRC_kwDOABII5842i13z",
      "diff_hunk": "@@ -358,7 +358,7 @@ struct Peer {\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n     /** Time of the last getheaders message to this peer */\n-    std::atomic<std::chrono::seconds> m_last_getheaders_timestamp{0s};\n+    std::atomic<NodeClock::time_point> m_last_getheaders_timestamp{NodeSeconds{}};",
      "path": "src/net_processing.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "in_reply_to_id": 914871029,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You know, I think you're right that this atomic is incorrect.  We need to hold a lock throughout `MaybeSendGetHeaders()` because this variable can be accessed in the scheduler thread or in the net processing thread, and if we don't hold a lock throughout that function we can get a data race.  Thanks for asking about this, I'll open a PR to fix.",
      "created_at": "2022-07-06T17:42:46Z",
      "updated_at": "2022-07-06T17:42:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r915103219",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/915103219"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/915154998",
      "pull_request_review_id": 1030555544,
      "id": 915154998,
      "node_id": "PRRC_kwDOABII5842jCg2",
      "diff_hunk": "@@ -358,7 +358,7 @@ struct Peer {\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n     /** Time of the last getheaders message to this peer */\n-    std::atomic<std::chrono::seconds> m_last_getheaders_timestamp{0s};\n+    std::atomic<NodeClock::time_point> m_last_getheaders_timestamp{NodeSeconds{}};",
      "path": "src/net_processing.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "in_reply_to_id": 914871029,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Addressed in #25557",
      "created_at": "2022-07-06T18:49:28Z",
      "updated_at": "2022-07-06T18:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r915154998",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/915154998"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/918044113",
      "pull_request_review_id": 1034498803,
      "id": 918044113,
      "node_id": "PRRC_kwDOABII5842uD3R",
      "diff_hunk": "@@ -358,7 +358,7 @@ struct Peer {\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n     /** Time of the last getheaders message to this peer */\n-    std::atomic<std::chrono::seconds> m_last_getheaders_timestamp{0s};\n+    std::atomic<NodeClock::time_point> m_last_getheaders_timestamp{NodeSeconds{}};",
      "path": "src/net_processing.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "in_reply_to_id": 914871029,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can you elaborate a bit on this? Unless I am missing something `MaybeSendGetHeaders`/`ConsiderEviction` is only called in-thread, not to be confused with `CheckForStaleTipAndEvictPeers`, which is called out-of-thread. What am I missing?",
      "created_at": "2022-07-11T15:03:51Z",
      "updated_at": "2022-07-11T15:03:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r918044113",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/918044113"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/918106763",
      "pull_request_review_id": 1034586611,
      "id": 918106763,
      "node_id": "PRRC_kwDOABII5842uTKL",
      "diff_hunk": "@@ -358,7 +358,7 @@ struct Peer {\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n     /** Time of the last getheaders message to this peer */\n-    std::atomic<std::chrono::seconds> m_last_getheaders_timestamp{0s};\n+    std::atomic<NodeClock::time_point> m_last_getheaders_timestamp{NodeSeconds{}};",
      "path": "src/net_processing.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "in_reply_to_id": 914871029,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What is \"in-thread\" and \"out-of-thread\"?",
      "created_at": "2022-07-11T16:00:20Z",
      "updated_at": "2022-07-11T16:00:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r918106763",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/918106763"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/918573866",
      "pull_request_review_id": 1035246824,
      "id": 918573866,
      "node_id": "PRRC_kwDOABII5842wFMq",
      "diff_hunk": "@@ -358,7 +358,7 @@ struct Peer {\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n     /** Time of the last getheaders message to this peer */\n-    std::atomic<std::chrono::seconds> m_last_getheaders_timestamp{0s};\n+    std::atomic<NodeClock::time_point> m_last_getheaders_timestamp{NodeSeconds{}};",
      "path": "src/net_processing.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "in_reply_to_id": 914871029,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"in-thread\" means running in the thread \"ThreadMessageHandler (b-msghand): Application level message handling (sending and receiving). Almost all net_processing and validation logic runs on this thread.\"",
      "created_at": "2022-07-12T05:54:46Z",
      "updated_at": "2022-07-12T05:54:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r918573866",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/918573866"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/918679389",
      "pull_request_review_id": 1035394398,
      "id": 918679389,
      "node_id": "PRRC_kwDOABII5842we9d",
      "diff_hunk": "@@ -358,7 +358,7 @@ struct Peer {\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n     /** Time of the last getheaders message to this peer */\n-    std::atomic<std::chrono::seconds> m_last_getheaders_timestamp{0s};\n+    std::atomic<NodeClock::time_point> m_last_getheaders_timestamp{NodeSeconds{}};",
      "path": "src/net_processing.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "in_reply_to_id": 914871029,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Right, `m_last_getheaders_timestamp` is accessed from `PeerManagerImpl::MaybeSendGetHeaders()` and `PeerManagerImpl::ProcessMessage()` which are only called from a single thread `ThreadMessageHandler()`.\r\n\r\n> because this variable can be accessed in the scheduler thread or in the net processing thread\r\n\r\n@sdaftuar, I think it is not accessed from the scheduler thread?\r\n\r\nI am in favor of simplicity, in this case meaning to not protect data that is accessed by a single thread. If in the future it is accessed by another thread, then an appropriate protection should be added. That may be an atomic or a mutex just for that variable or a mutex for multiple variables depending on the need. Otherwise we may end up protecting it needlessly now and later to have to rework the protection anyway (or worse - use the available, inappropriate protection, like @MarcoFalke mentioned above \"...it may be assumed in the future that this is already perfectly thread safe...\").",
      "created_at": "2022-07-12T08:13:16Z",
      "updated_at": "2022-07-12T08:13:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r918679389",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/918679389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/919084005",
      "pull_request_review_id": 1035971831,
      "id": 919084005,
      "node_id": "PRRC_kwDOABII5842yBvl",
      "diff_hunk": "@@ -358,7 +358,7 @@ struct Peer {\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n     /** Time of the last getheaders message to this peer */\n-    std::atomic<std::chrono::seconds> m_last_getheaders_timestamp{0s};\n+    std::atomic<NodeClock::time_point> m_last_getheaders_timestamp{NodeSeconds{}};",
      "path": "src/net_processing.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "in_reply_to_id": 914871029,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Can you elaborate a bit on this? Unless I am missing something MaybeSendGetHeaders/ConsiderEviction is only called in-thread, not to be confused with CheckForStaleTipAndEvictPeers, which is called out-of-thread. What am I missing?\r\n\r\nAh, I guess I misremembered how `ConsiderEviction` is called (and thought it was run in the scheduler thread).  \r\n\r\nI'll update my other PR and drop the mutex/atomic altogether.",
      "created_at": "2022-07-12T15:03:16Z",
      "updated_at": "2022-07-12T15:03:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r919084005",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/919084005"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/919097013",
      "pull_request_review_id": 1035991112,
      "id": 919097013,
      "node_id": "PRRC_kwDOABII5842yE61",
      "diff_hunk": "@@ -358,7 +358,7 @@ struct Peer {\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n     /** Time of the last getheaders message to this peer */\n-    std::atomic<std::chrono::seconds> m_last_getheaders_timestamp{0s};\n+    std::atomic<NodeClock::time_point> m_last_getheaders_timestamp{NodeSeconds{}};",
      "path": "src/net_processing.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "in_reply_to_id": 914871029,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I am in favor of simplicity, in this case meaning to not protect data that is accessed by a single thread.\r\n\r\nPossible idea for the future. In theory could have `SingleThread<T>` class similar to the `Synced<T>` class from #25390 that wraps an object and asserts in debug mode that is always accessed from the same thread. I think a solution like that would be overkill here, and I'm struggling to think of cases where it wouldn't be overkill, but it wouldn't be hard to implement and could be useful to help code document assumptions it is making.",
      "created_at": "2022-07-12T15:14:34Z",
      "updated_at": "2022-07-12T15:14:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r919097013",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/919097013"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920866842",
      "pull_request_review_id": 1038452819,
      "id": 920866842,
      "node_id": "PRRC_kwDOABII584241Aa",
      "diff_hunk": "@@ -2194,6 +2199,48 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+ * don't connect before given DoS points.",
      "path": "src/net_processing.cpp",
      "position": 23,
      "original_position": 23,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e",
      "in_reply_to_id": 912929185,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done as part of https://github.com/bitcoin/bitcoin/pull/25555",
      "created_at": "2022-07-14T07:57:26Z",
      "updated_at": "2022-07-14T07:58:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r920866842",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920866842"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2225,
      "original_line": 2209,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920867311",
      "pull_request_review_id": 1038453482,
      "id": 920867311,
      "node_id": "PRRC_kwDOABII584241Hv",
      "diff_hunk": "@@ -82,7 +82,7 @@ def run_test(self):\n         msg.hashstop = 0\n         peer.send_and_ping(msg)\n         time.sleep(5)\n-        assert \"headers\" not in peer.last_message\n+        assert (\"headers\" not in peer.last_message or len(peer.last_message[\"headers\"].headers) == 0)",
      "path": "test/functional/feature_minchainwork.py",
      "position": 5,
      "original_position": 5,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "abf5d16c24cb08b0451bdbd4d1de63a12930e8f5",
      "in_reply_to_id": 913000465,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done as part of 8efa73e7ce4ea0c1b7ad5c3947a5ecf9fb6361d3",
      "created_at": "2022-07-14T07:57:57Z",
      "updated_at": "2022-07-14T07:57:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r920867311",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920867311"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 85,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920868519",
      "pull_request_review_id": 1038455160,
      "id": 920868519,
      "node_id": "PRRC_kwDOABII584241an",
      "diff_hunk": "@@ -358,7 +358,7 @@ struct Peer {\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n     /** Time of the last getheaders message to this peer */\n-    std::atomic<std::chrono::seconds> m_last_getheaders_timestamp{0s};\n+    std::atomic<NodeClock::time_point> m_last_getheaders_timestamp{NodeSeconds{}};",
      "path": "src/net_processing.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "in_reply_to_id": 914871029,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should be resolved by 8efa73e7ce4ea0c1b7ad5c3947a5ecf9fb6361d3",
      "created_at": "2022-07-14T07:59:12Z",
      "updated_at": "2022-07-14T07:59:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r920868519",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920868519"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/939528345",
      "pull_request_review_id": 1064307359,
      "id": 939528345,
      "node_id": "PRRC_kwDOABII5844ABCZ",
      "diff_hunk": "@@ -2206,55 +2424,33 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n         return;\n     }\n \n-    bool received_new_header = false;\n     const CBlockIndex *pindexLast = nullptr;\n-    {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom.GetId());\n \n-        // If this looks like it could be a block announcement (nCount <=\n-        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n-        // don't connect:\n-        // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n-        // - Once a headers message is received that is valid and does connect,\n-        //   nUnconnectingHeaders gets reset back to 0.\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n-            nodestate->nUnconnectingHeaders++;\n-            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), uint256()));",
      "path": "src/net_processing.cpp",
      "position": 275,
      "original_position": 275,
      "commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_commit_id": "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`msgMaker` is now unused in ProcessHeadersMessage. This is fixed in #25717",
      "created_at": "2022-08-06T13:24:51Z",
      "updated_at": "2022-08-06T13:25:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r939528345",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/939528345"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2225,
      "original_line": 2225,
      "side": "LEFT"
    }
  ]
}