{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132",
    "id": 2138649533,
    "node_id": "PR_kwDOABII585_eTO9",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/31132",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/31132.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/31132.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/95e6b0d189b770af2d29fbdae93c5b34290848a7",
    "number": 31132,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "validation: fetch block inputs on parallel threads ~17% faster IBD",
    "user": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "When fetching inputs in ConnectBlock, each input is fetched from the cache in series. A cache miss means a round trip to the disk db to fetch the outpoint and insert it into the cache. Since the db is locked from being written during ConnectTip, we can fetch all block inputs missing from the cache in parallel on multiple threads before entering ConnectBlock. Using this strategy resulted in a ~17% faster IBD (or master was ~21% slower).\r\n\r\nDoing IBD with 16 vcores from a local peer with default settings, stopping at height 850k:\r\n\r\n|  | Mean [s] | Min [s] | Max [s] | Relative |\r\n|:---|---:|---:|---:|---:|\r\n| branch | 22187.488 ± 50.159 | 22152.021 | 22222.956 | 1.00 |\r\n| master | 26865.884 ± 33.498 | 26842.197 | 26889.570 | 1.21 |\r\n\r\n\r\nThis approach is heavily inspired by `CCheckQueue`, but we could not easily reuse it since it only checks for validity and doesn't allow us to store results in a queue. So, this PR creates a new `InputFetcher` that loops through all inputs of a block on the main thread and adds their outpoints to a queue to be fetched in parallel. Worker threads pull outpoints from the queue and fetch them from the db, and then push the resulting coins back onto another queue. Once the main thread has finished looping through the block inputs, it pulls results from the coins queue and inserts them into the cache.\r\n\r\nThis PR uses number of cores to create the worker threads, but since the work on the threads is IO bound, it might benefit from using a multiple of the number of cores. However, that would result in more memory usage and lock contention, so unsure what the optimal number is.",
    "labels": [
      {
        "id": 118379652,
        "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
        "name": "Validation",
        "color": "6060aa",
        "default": false
      },
      {
        "id": 5334691551,
        "node_id": "LA_kwDOABII588AAAABPfju3w",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
        "name": "CI failed",
        "description": "",
        "color": "cccccc",
        "default": false
      }
    ],
    "created_at": "2024-10-22T14:40:28Z",
    "updated_at": "2024-11-20T18:53:20Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "d9cf177dd98c63da920be2afb60313144ff55c43",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "andrewtoth:threaded-inputs",
      "ref": "threaded-inputs",
      "sha": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 156145027,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNTYxNDUwMjc=",
        "name": "bitcoin",
        "full_name": "andrewtoth/bitcoin",
        "owner": {
          "login": "andrewtoth",
          "id": 237213,
          "node_id": "MDQ6VXNlcjIzNzIxMw==",
          "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/andrewtoth",
          "html_url": "https://github.com/andrewtoth",
          "followers_url": "https://api.github.com/users/andrewtoth/followers",
          "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
          "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
          "repos_url": "https://api.github.com/users/andrewtoth/repos",
          "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/andrewtoth/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/andrewtoth/bitcoin",
        "archive_url": "https://api.github.com/repos/andrewtoth/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/andrewtoth/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/andrewtoth/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/andrewtoth/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/andrewtoth/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/andrewtoth/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/andrewtoth/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/andrewtoth/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/andrewtoth/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/andrewtoth/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/andrewtoth/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/andrewtoth/bitcoin/events",
        "forks_url": "https://api.github.com/repos/andrewtoth/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/andrewtoth/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/andrewtoth/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/andrewtoth/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/andrewtoth/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/andrewtoth/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/andrewtoth/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/andrewtoth/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/andrewtoth/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/andrewtoth/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/andrewtoth/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/andrewtoth/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/andrewtoth/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/andrewtoth/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/andrewtoth/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/andrewtoth/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:andrewtoth/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/andrewtoth/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/andrewtoth/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/andrewtoth/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/andrewtoth/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/andrewtoth/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/andrewtoth/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/andrewtoth/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/andrewtoth/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/andrewtoth/bitcoin/hooks",
        "svn_url": "https://github.com/andrewtoth/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 266735,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-11-20T18:46:10Z",
        "created_at": "2018-11-05T01:43:59Z",
        "updated_at": "2022-12-23T04:16:30Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "22ef95dbe3e467039e6cd18988e66557d94041d1",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36430,
        "stargazers_count": 79638,
        "watchers_count": 79638,
        "size": 272651,
        "default_branch": "master",
        "open_issues_count": 652,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-11-20T15:45:53Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-11-20T18:43:04Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 641,
    "deletions": 6,
    "changed_files": 11,
    "commits": 6,
    "review_comments": 39,
    "comments": 13
  },
  "events": [
    {
      "event": "commented",
      "id": 2429478185,
      "node_id": "IC_kwDOABII586QzuUp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2429478185",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-22T14:40:31Z",
      "updated_at": "2024-11-19T02:24:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/31132.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [l0rinc](https://github.com/bitcoin/bitcoin/pull/31132#pullrequestreview-2388117544) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#31313](https://github.com/bitcoin/bitcoin/pull/31313) (refactor: Clamp worker threads in ChainstateManager constructor by TheCharlatan)\n* [#30906](https://github.com/bitcoin/bitcoin/pull/30906) (refactor: prohibit direct flags access in CCoinsCacheEntry and remove invalid tests by l0rinc)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-2429478185",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "labeled",
      "id": 14786916578,
      "node_id": "LE_lADOABII586bT0I_zwAAAANxXnDi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14786916578",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-22T14:40:34Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14787017217,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAANxX_oB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14787017217",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-22T14:45:41Z"
    },
    {
      "event": "commented",
      "id": 2429491813,
      "node_id": "IC_kwDOABII586Qzxpl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2429491813",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-22T14:45:47Z",
      "updated_at": "2024-10-22T14:45:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/31894441286</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-2429491813",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "labeled",
      "id": 14787019013,
      "node_id": "LE_lADOABII586bT0I_zwAAAANxYAEF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14787019013",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-22T14:45:47Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "renamed",
      "id": 14787094471,
      "node_id": "RTE_lADOABII586bT0I_zwAAAANxYSfH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14787094471",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-22T14:49:35Z",
      "rename": {
        "from": "validation: fetch block inputs parallel threads ~17% faster IBD",
        "to": "validation: fetch block inputs on parallel threads ~17% faster IBD"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14787303983,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAANxZFov",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14787303983",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-22T14:59:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14788613835,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAANxeFbL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14788613835",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-22T16:12:52Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14790893735,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAANxmyCn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14790893735",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-22T18:46:51Z"
    },
    {
      "event": "unlabeled",
      "id": 14792905981,
      "node_id": "UNLE_lADOABII586bT0I_zwAAAANxudT9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14792905981",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-22T21:09:47Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2388117544,
      "node_id": "PRR_kwDOABII586OV8go",
      "url": null,
      "actor": null,
      "commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nI'm still missing tests and benchmarks here and I think we need to find better default values for SSD and HDD parallelism, and I'd be interested in how coroutines would perform here instead of trying to find the best batching size manually.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#pullrequestreview-2388117544",
      "submitted_at": "2024-10-23T12:44:26Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
    },
    {
      "event": "reviewed",
      "id": 2388943653,
      "node_id": "PRR_kwDOABII586OZGMl",
      "url": null,
      "actor": null,
      "commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Cool idea.\r\n\r\nSince the inputs fetcher call is blocking, instead of creating a new set of worker threads, what do you think about re-using the existing script validation ones (or any other unused worker threads) by implementing a general-purpose thread pool shared among the validation checks? \r\nThe script validation checks and the inputs fetching mechanism are never done concurrently because you need the inputs in order to verify the scripts. So, they could share workers.\r\n\r\nThis should be benchmarked because it might add some overhead but, #26966 introduces such structure inside 401f21bfd72f32a28147677af542887518a4dbff, which we could pull off and use for validation.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#pullrequestreview-2388943653",
      "submitted_at": "2024-10-23T14:25:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
    },
    {
      "event": "commented",
      "id": 2432481201,
      "node_id": "IC_kwDOABII586Q_Lex",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2432481201",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-23T14:48:28Z",
      "updated_at": "2024-10-23T14:48:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "> implementing a general-purpose thread pool shared among the validation checks?\r\n\r\nNice, yes that would be great! That would simplify this PR a lot if it could just schedule tasks on worker threads and receive the responses, instead of implementing all the sync code itself.\r\n\r\n> https://github.com/bitcoin/bitcoin/pull/26966 introduces such structure inside https://github.com/bitcoin/bitcoin/commit/401f21bfd72f32a28147677af542887518a4dbff, which we could pull off and use for validation.\r\n\r\nConcept ACK!",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-2432481201",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "commented",
      "id": 2436046062,
      "node_id": "IC_kwDOABII586RMxzu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2436046062",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-24T18:12:38Z",
      "updated_at": "2024-10-26T15:04:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "Finished benching on a HDD until 860k on Intel(R) Core(TM) i7-7700 CPU @ 3.60GHz, CPU = 8:\r\n\r\n```bash\r\nSummary\r\n'COMMIT=f278ca4ec3f0a90c285e640f1a270869ca594d20 ./build/src/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=860000 -dbcache=10000 -printtoconsole=0' ran\r\n 1.02 times faster than 'COMMIT=e9e23b59f8eedb8dfae75aa660328299fba92b50 ./build/src/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=860000 -dbcache=10000 -printtoconsole=\r\n0'\r\n```\r\n\r\n> f278ca4ec3 coins: allow emplacing non-dirty coins internally (39993.343777768874 seconds = 11.1 hours)\r\n> e9e23b59f8 validation: fetch block inputs in parallel (40929.84310861388 seconds = 11.3 hours)\r\n\r\n-----\r\n\r\n~So likely on HDD we shouldn't use so many threads, apparently it slows down IBD.~\r\nMaybe we could add a new config option (`iothreads` or `iothreadmultiplier` or something).\r\nThe defaults should likely depend on whether it's an SSD or HDD.\r\n\r\n-----\r\n\r\nEdit:\r\n\r\n<details>\r\n<summary>Previous results</summary>\r\n\r\n```bash\r\n\"command\": \"COMMIT=f278ca4ec3f0a90c285e640f1a270869ca594d20 ./build/src/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=860000 -dbcache=10000 -printtoconsole=0\",\r\n\"times\": [39993.343777768874],\r\n\r\n\"command\": \"COMMIT=e9e23b59f8eedb8dfae75aa660328299fba92b50 ./build/src/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=860000 -dbcache=10000 -printtoconsole=0\",\r\n\"times\": [40929.84310861388],\r\n```\r\n\r\n</details>\r\n\r\nI have retried the same with half the parallelism (rebased, but no other change in the end, otherwise the results would be hard to interpret):\r\n```bash\r\n\"command\": \"COMMIT=8207d372b2fac24af0f8999b30e71e88d40b3a13 ./build/src/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=860000 -dbcache=10000 -printtoconsole=0\",\r\n\"times\": [40579.00445769842],\r\n``` \r\n\r\nSo it's a tiny bit faster than before (surprisingly stable for an actual IBD with real peers), but still slower-than/same-as before, so not sure why it's not faster.\r\n\r\n----\r\n\r\nEdit:\r\n\r\nRunning it on a HDD with a low dbcache value reproduces the original result:\r\n\r\n<details>\r\n<summary>benchmark</summary>\r\n\r\n```bash\r\nhyperfine --runs 1 --show-output --export-json /mnt/my_storage/ibd_full-threaded-inputs-3.json --parameter-list COMMIT 92fc718592be55812b2c73a3bf57599fc81425fa,8207d372b2fac24af0f8999b30e71e88d40b3a13 --prepare 'rm -rf /mnt/my_storage/BitcoinData/* && git checkout {COMMIT} && git clean -fxd && git reset --hard && cmake -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_UTIL=OFF -DBUILD_TX=OFF -DBUILD_TESTS=OFF -DENABLE_WALLET=OFF -DINSTALL_MAN=OFF && cmake --build build -j$(nproc)' 'COMMIT={COMMIT} ./build/src/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=860000 -dbcache=1000 -printtoconsole=0'\r\n```\r\n\r\n</details>\r\n\r\n```bash\r\n8207d372b2 validation: fetch block inputs in parallel\r\n92fc718592 coins: allow emplacing non-dirty coins internally\r\nSummary\r\n  'COMMIT=8207d372b2fac24af0f8999b30e71e88d40b3a13 ./build/src/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=860000 -dbcache=1000 -printtoconsole=0' ran\r\n    1.16 times faster than 'COMMIT=92fc718592be55812b2c73a3bf57599fc81425fa ./build/src/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=860000 -dbcache=1000 -printtoconsole=0'\r\n```",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-2436046062",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "commented",
      "id": 2436080216,
      "node_id": "IC_kwDOABII586RM6JY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2436080216",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-24T18:31:14Z",
      "updated_at": "2024-10-24T18:31:14Z",
      "author_association": "CONTRIBUTOR",
      "body": "> So likely on HDD we shouldn't use so many threads, apparently it slows down IBD.\r\n\r\nI'm not sure we can conclude that from your benchmark. It used a very high dbcache setting, which makes the effect of this change less important. It also is syncing from untrusted network peers, so there is some variance which could also account for the 2% difference.",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-2436080216",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14856978808,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN1i4F4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14856978808",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-24T18:40:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14857622714,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN1lVS6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14857622714",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-24T19:25:33Z"
    },
    {
      "event": "commented",
      "id": 2436178257,
      "node_id": "IC_kwDOABII586RNSFR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2436178257",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-24T19:25:38Z",
      "updated_at": "2024-10-24T19:25:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/32027275494</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-2436178257",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "labeled",
      "id": 14857623683,
      "node_id": "LE_lADOABII586bT0I_zwAAAAN1lViD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14857623683",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-24T19:25:38Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 14869493997,
      "node_id": "UNLE_lADOABII586bT0I_zwAAAAN2Snjt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14869493997",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-25T09:58:21Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14910229658,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN4uAya",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14910229658",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-26T18:47:56Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14910333712,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN4uaMQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14910333712",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-26T18:51:56Z"
    },
    {
      "event": "labeled",
      "id": 14910335810,
      "node_id": "LE_lADOABII586bT0I_zwAAAAN4uatC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14910335810",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-26T18:52:00Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2439692907,
      "node_id": "IC_kwDOABII586RasJr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2439692907",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-26T18:52:01Z",
      "updated_at": "2024-10-26T18:52:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/32107893176</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-2439692907",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14911794047,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN4z-t_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14911794047",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-26T20:01:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14914596074,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN4-qzq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14914596074",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-26T22:14:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14914980894,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN5AIwe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14914980894",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-26T22:31:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14915740952,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN5DCUY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14915740952",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-26T23:07:17Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14917256589,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN5I0WN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14917256589",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-27T00:11:36Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14920099117,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN5TqUt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14920099117",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-27T04:45:57Z"
    },
    {
      "event": "convert_to_draft",
      "id": 14925130762,
      "node_id": "CTDE_lADOABII586bT0I_zwAAAAN5m2wK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14925130762",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-27T13:28:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14925301705,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN5ngfJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14925301705",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-27T13:40:24Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14926730470,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN5s9Tm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14926730470",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-27T15:15:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14926840604,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN5tYMc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14926840604",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-27T15:21:57Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14927991893,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN5xxRV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14927991893",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-27T16:37:26Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14928181449,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN5yfjJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14928181449",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-27T16:51:17Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14928621817,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN50LD5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14928621817",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-27T17:19:53Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14931091175,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN59l7n",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14931091175",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-27T19:55:53Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15163921481,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOH1xRJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15163921481",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-07T00:54:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15164034996,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOH2M-0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15164034996",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-07T00:59:53Z"
    },
    {
      "event": "unlabeled",
      "id": 15165724918,
      "node_id": "UNLE_lADOABII586bT0I_zwAAAAOH8pj2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15165724918",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-07T02:25:20Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15169496211,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOILCST",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15169496211",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-07T05:22:21Z"
    },
    {
      "event": "ready_for_review",
      "id": 15183787339,
      "node_id": "RFRE_lADOABII586bT0I_zwAAAAOJBjVL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15183787339",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-07T15:01:24Z"
    },
    {
      "event": "commented",
      "id": 2462468543,
      "node_id": "IC_kwDOABII586Sxkm_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2462468543",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-07T15:05:31Z",
      "updated_at": "2024-11-07T15:05:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "@furszy I tried to switch to using a shared threadpool, but it is much slower that way. We need a way to have shared state between threads for this, instead of just scheduling tasks. I suppose the generic threadpool is great for scheduling independent tasks like indexing an individual block, but for quickly pulling outpoints off a shared vector it is not optimized well.\r\n\r\nFrom https://github.com/bitcoin/bitcoin/issues/29386:\r\n> I just [noticed the comment in the code](https://github.com/bitcoin/bitcoin/blob/9eeee7caa3f95ee17a645e12d330261f8e3c2dbf/doc/reduce-memory.md?plain=1#L37C1-L39C15):\r\n>>    For each thread a thread stack needs to be allocated. By default on Linux,\r\n    threads take up 8MiB for the thread stack on a 64-bit system, and 4MiB in a\r\n    32-bit system.\r\n\r\n> Only 8MiB of Virtual Memory is allocated, which doesn't really mean anything. Due to CoW mechanism, only the parts of stack that are being used will be allocated as Physical Memory which is the one that actually matters.\r\n\r\nSo, I don't think it matters much to have an extra threadpool owned by the input fetcher.\r\n\r\nI think this is ready for more review. I also added tests and a benchmark.",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-2462468543",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "mentioned",
      "id": 15183942257,
      "node_id": "MEE_lADOABII586bT0I_zwAAAAOJCJJx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15183942257",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-07T15:05:32Z"
    },
    {
      "event": "subscribed",
      "id": 15183942283,
      "node_id": "SE_lADOABII586bT0I_zwAAAAOJCJKL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15183942283",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-07T15:05:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15189550538,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOJXiXK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15189550538",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-07T18:38:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15239155612,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOMUw-c",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15239155612",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "66bbde0ec074c68ddc4145e2d3c33e877a8a132c",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/66bbde0ec074c68ddc4145e2d3c33e877a8a132c",
      "created_at": "2024-11-09T18:21:42Z"
    },
    {
      "event": "commented",
      "id": 2473948407,
      "node_id": "IC_kwDOABII586TdXT3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2473948407",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-13T15:28:15Z",
      "updated_at": "2024-11-13T15:28:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "For later blocks where cache misses are much more common, this change has an even bigger impact.\r\nThis benchmark report shows a 40% speedup measuring from blocks 840k to 850k. Also, compare flamegraphs of master and this branch, where the latter has 15 worker threads fetching coins from disk.\r\nhttps://bitcoin-dev-tools.github.io/benchcoin/results/pr-19/11798124132/index.html",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-2473948407",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "commented",
      "id": 2480372333,
      "node_id": "IC_kwDOABII586T13pt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2480372333",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-16T03:35:49Z",
      "updated_at": "2024-11-16T03:35:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "Even with just 2 worker threads, there is significant (~30%) speed improvement for syncing recent blocks.\r\nhttps://bitcoin-dev-tools.github.io/benchcoin/results/pr-19/11865650166/index.html",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-2480372333",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15320436676,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAORK0_E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15320436676",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "97e90b5ac5a5a83a9305b8c9573760996b069419",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/97e90b5ac5a5a83a9305b8c9573760996b069419",
      "created_at": "2024-11-16T03:40:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15320841157,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAORMXvF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15320841157",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c38cf8f92fff1df5c40b3c10e699726adc68b535",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/c38cf8f92fff1df5c40b3c10e699726adc68b535",
      "created_at": "2024-11-16T07:52:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15322202672,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAORRkIw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15322202672",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "faf19f18031ead55b1d441444a1b30b8de8bbfab",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/faf19f18031ead55b1d441444a1b30b8de8bbfab",
      "created_at": "2024-11-16T19:35:04Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15322230462,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAORRq6-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15322230462",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ea8e67ca7d8a76c87f9df3617ea287f339b3f44b",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/ea8e67ca7d8a76c87f9df3617ea287f339b3f44b",
      "created_at": "2024-11-16T19:45:00Z"
    },
    {
      "event": "commented",
      "id": 2480756343,
      "node_id": "IC_kwDOABII586T3VZ3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2480756343",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-16T19:45:10Z",
      "updated_at": "2024-11-16T19:45:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/33086747731</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-2480756343",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "labeled",
      "id": 15322230898,
      "node_id": "LE_lADOABII586bT0I_zwAAAAORRrBy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15322230898",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-16T19:45:10Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15322459653,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAORSi4F",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15322459653",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "887ab0c0a12a12e5ebc91a98c6b3972a6bc29af4",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/887ab0c0a12a12e5ebc91a98c6b3972a6bc29af4",
      "created_at": "2024-11-16T20:56:52Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15322466773,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAORSknV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15322466773",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7ff688350de239d752a42d216b44fad75ec698a6",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/7ff688350de239d752a42d216b44fad75ec698a6",
      "created_at": "2024-11-16T20:58:46Z"
    },
    {
      "event": "unlabeled",
      "id": 15322621035,
      "node_id": "UNLE_lADOABII586bT0I_zwAAAAORTKRr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15322621035",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-16T21:38:17Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15323161161,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAORVOJJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15323161161",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2bd5f0f03b19d1b71953ac51a5809014c232a497",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/2bd5f0f03b19d1b71953ac51a5809014c232a497",
      "created_at": "2024-11-17T00:02:59Z"
    },
    {
      "event": "reviewed",
      "id": 2442755733,
      "node_id": "PRR_kwDOABII586RmX6V",
      "url": null,
      "actor": null,
      "commit_id": "2bd5f0f03b19d1b71953ac51a5809014c232a497",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#pullrequestreview-2442755733",
      "submitted_at": "2024-11-18T14:22:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15335691084,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOSFBNM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15335691084",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1fe34824cf75628e6b180e9ed5e6eb1b9ba98709",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/1fe34824cf75628e6b180e9ed5e6eb1b9ba98709",
      "created_at": "2024-11-18T14:54:05Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15336267654,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOSHN-G",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15336267654",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8b813495d132ff2390e039ac6cb321b82b51efd6",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/8b813495d132ff2390e039ac6cb321b82b51efd6",
      "created_at": "2024-11-18T15:33:59Z"
    },
    {
      "event": "commented",
      "id": 2483393645,
      "node_id": "IC_kwDOABII586UBZRt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2483393645",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-18T15:34:04Z",
      "updated_at": "2024-11-18T15:34:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/33143571653</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-2483393645",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "labeled",
      "id": 15336268823,
      "node_id": "LE_lADOABII586bT0I_zwAAAAOSHOQX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15336268823",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-18T15:34:04Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15337346046,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOSLVP-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15337346046",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "992c76f3bb1a2d091f7604208a09f94ceff75509",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/992c76f3bb1a2d091f7604208a09f94ceff75509",
      "created_at": "2024-11-18T16:49:52Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15338125165,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOSOTdt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15338125165",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5e05539ee48d3d4786f573d05a6ba9e89a8e74f6",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/5e05539ee48d3d4786f573d05a6ba9e89a8e74f6",
      "created_at": "2024-11-18T17:54:07Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15338487303,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOSPr4H",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15338487303",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0875e93322ae53b2ac7d9418501f002da73b258b",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/0875e93322ae53b2ac7d9418501f002da73b258b",
      "created_at": "2024-11-18T18:25:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15338614667,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOSQK-L",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15338614667",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "28e739e557de92b287546b211f763bd890d00c2d",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/28e739e557de92b287546b211f763bd890d00c2d",
      "created_at": "2024-11-18T18:37:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15339145882,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOSSMqa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15339145882",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "04b3f4529e804cfcdc79135a1929535b578860cd",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/04b3f4529e804cfcdc79135a1929535b578860cd",
      "created_at": "2024-11-18T19:26:05Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15339688166,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOSURDm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15339688166",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7317d2056714047ff0a09c6f3bb62dccd6b56802",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/7317d2056714047ff0a09c6f3bb62dccd6b56802",
      "created_at": "2024-11-18T20:08:53Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15340495444,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOSXWJU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15340495444",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3a9553dbd55836c1a17583b4421f4dd9c8bd65cf",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/3a9553dbd55836c1a17583b4421f4dd9c8bd65cf",
      "created_at": "2024-11-18T21:24:26Z"
    },
    {
      "event": "unlabeled",
      "id": 15340858532,
      "node_id": "UNLE_lADOABII586bT0I_zwAAAAOSYuyk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15340858532",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-18T22:03:21Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDNhNGFmNTUwNzE0NmIwMTVjYzc1NDE5NWM4OWM3MGUxYWQ4NDA0Y2Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a4af5507146b015cc754195c89c70e1ad8404cd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3a4af5507146b015cc754195c89c70e1ad8404cd",
      "tree": {
        "sha": "8b4dfd2415ea884e80fb9dacd833480d32d4a4a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b4dfd2415ea884e80fb9dacd833480d32d4a4a7"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 8b4dfd2415ea884e80fb9dacd833480d32d4a4a7\nparent 746f93b4f0f47c67642057944fb79dddf17369f9\nauthor Andrew Toth <andrewstoth@gmail.com> 1730940694 -0500\ncommitter Andrew Toth <andrewstoth@gmail.com> 1732022529 -0500\n\ncoins: allow emplacing non-dirty coins internally\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEISytpz6vNK/yCogaYAB6/Ik4sBgFAmc8kQEACgkQYAB6/Ik4\nsBhnJg/+I2+jJE7DM59eOg8zZkcOTblipN1gMA5CNALeYZAWHv2bzraSFdUEyNfj\nEmefqZ4jKjzW/v7QAEfmpual1/mqklazbMbBpcPeLsnQmNiF+mGSbChagBfe9NCo\nOi2BhJ45kedzr2QIMXmJf93uyM/QIknPoy+uPkO4Vr/it7kd3uP9VnR0AVb/nzZJ\n3+hemdJFHzHFlt0e9yeWAKVBo4+M8axTl0vY47MBwSmFV1joMFuxB1uuvBsgZUFt\n35ju03Qf/egVYNokLIM635kewXnbOk+rtypLbi7kAkhMQcHTUHJpVk+VXDvJhhp6\nvzuQgIqe91e0czWnd6jdp6jl9SvvX/2A0efr9a9n8fTQckzNZf5ngXAuD6jOFqTl\nQyrAP1Heix+WB2h2C8eatk0w0YgcX2CmY8x+woIySw71fg39JlQqqNna72OCtCKU\nUnYjeC/AxA29eDyCezmU0mo7qF+hCRR0rTXUK40Ll4qNFmDBZXnkjhlZiarC0Q/F\nzR+M6iH8KGg5KUgTZsJbH59vluRjCkxc83qHau4vK4eoRus8WRzw/a01Clko0XzR\nWPXCm0ml63c5PvslVk/p8Rfl2LM4sUkGTwzMoVvQvE+Nnx/O8SnqC6r8uR5mQlf2\nA0/s3XG1BfjajJ/NPJwSe1UaMtNXd/kdzcPKu7q2k7z8XHAaA/8=\n=8BgS\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/746f93b4f0f47c67642057944fb79dddf17369f9",
          "sha": "746f93b4f0f47c67642057944fb79dddf17369f9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/746f93b4f0f47c67642057944fb79dddf17369f9"
        }
      ],
      "message": "coins: allow emplacing non-dirty coins internally",
      "committer": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2024-11-19T13:22:09Z"
      },
      "author": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2024-11-07T00:51:34Z"
      },
      "sha": "3a4af5507146b015cc754195c89c70e1ad8404cd"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15349486168,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOS5pJY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15349486168",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "02ae43e470ed16943ef8783dbc59784ac7e6bbb1",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/02ae43e470ed16943ef8783dbc59784ac7e6bbb1",
      "created_at": "2024-11-19T13:22:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15350958942,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOS_Qte",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15350958942",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d35740b5c63ceb2157518c572e76063f1d2968f2",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/d35740b5c63ceb2157518c572e76063f1d2968f2",
      "created_at": "2024-11-19T15:02:27Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGY0ZTFlYzk4MDE3NjM1NzYwNjkwYzc2ZGU4YzE3YzQzMzlkNWVjMWM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f4e1ec98017635760690c76de8c17c4339d5ec1c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f4e1ec98017635760690c76de8c17c4339d5ec1c",
      "tree": {
        "sha": "2f2e267747631449a9f2cf673cb52c77a8c8cd6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2f2e267747631449a9f2cf673cb52c77a8c8cd6b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 2f2e267747631449a9f2cf673cb52c77a8c8cd6b\nparent 3a4af5507146b015cc754195c89c70e1ad8404cd\nauthor Andrew Toth <andrewstoth@gmail.com> 1730940717 -0500\ncommitter Andrew Toth <andrewstoth@gmail.com> 1732125952 -0500\n\ncoins: add inputfetcher\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEISytpz6vNK/yCogaYAB6/Ik4sBgFAmc+JQAACgkQYAB6/Ik4\nsBjWwQ/+N7knLxMfPAdOzdYQm2yurPDYtesPLNrFmWC6tkZx0xtmNJAreHFT1Omf\nT1stBT5P/9Fbwf0rqZS4QureldzkEmktpXnMwVGbQ/GkNwtPSUq12Zp3DPrWBVbV\nMvPZ9o2RCOuTij9p9HHFxOoKCl6WTKlp67s7XILuzxwl6Bgjzvfb7lzeadf9eSTR\nMVfMunJdN5iHt5fRtGZsU6ZJKxAPDfY9f4z/CgIYnOWN1ItjkcOzOl2iN1L3Udnc\nJfd06RQXumvycccpk+MYyV9SV8I1ksj611dWjufBSsKATfbKhPB0NlVJqqWhZwmR\niUXSKPBORsjNrBTDhIhd+kymuFh/MYVXor0IupVACiOIaAQY8ilGyHhiXEKyuiPE\n+NccUeezTNrtzu3Hw/1biZIj/eGu0yvc2uztB6LKY342sBdllf7azqmSyFQsWi3q\n5QtDr9tmg4CWFh8r8aRwalAqJcQaEVWCoAflVOIe3oeqkH2KOxSGANHFBGKjpgrY\n4lkVX7gqvx1Mv92VDjmhwFvswDoY8sMdrVyDy59YNCdy/Jnb4K9tW4TT6sQY7yev\n/QEwpnHgFukMUi70qdyKEQ8Ig5oZvv08ErtUX8J3Ve0LeqkXQfC7FT9b01Pu4DYx\nGlc9g6dxtdpi8Ym6NNYlKmIdjQcdmwgBZSKBXkdBnAujmVTwk5Y=\n=pE+U\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a4af5507146b015cc754195c89c70e1ad8404cd",
          "sha": "3a4af5507146b015cc754195c89c70e1ad8404cd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3a4af5507146b015cc754195c89c70e1ad8404cd"
        }
      ],
      "message": "coins: add inputfetcher",
      "committer": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2024-11-20T18:05:52Z"
      },
      "author": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2024-11-07T00:51:57Z"
      },
      "sha": "f4e1ec98017635760690c76de8c17c4339d5ec1c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGI1Y2ZiNjBjNDQ4OTgyZGE0MjQzZjhjY2EzNWY3Mzk1MThhYzUyNjA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5cfb60c448982da4243f8cca35f739518ac5260",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b5cfb60c448982da4243f8cca35f739518ac5260",
      "tree": {
        "sha": "cb1bb6a6feedc2eda7ccc68e91b1e430476ec512",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb1bb6a6feedc2eda7ccc68e91b1e430476ec512"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree cb1bb6a6feedc2eda7ccc68e91b1e430476ec512\nparent f4e1ec98017635760690c76de8c17c4339d5ec1c\nauthor Andrew Toth <andrewstoth@gmail.com> 1730940728 -0500\ncommitter Andrew Toth <andrewstoth@gmail.com> 1732125952 -0500\n\ntests: add inputfetcher tests\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEISytpz6vNK/yCogaYAB6/Ik4sBgFAmc+JQAACgkQYAB6/Ik4\nsBjXRRAAlOOPS34uIxO5ebpfOSRJm8CphkpGv+mIUZgx3qsPhG/F/Y/CR4YnAfe6\n6iKeUyz20SB1GxDzWETds2xrvOBth9M2vxkiLfe0Ug1i2iPd5wcbx+Dnn5mvBLre\n2EljHyY4tW3XAa9Q/EgfozqZWXFF4kT9/VkYMSnXJ0nhKyVV9bgVeINQ+eylgBi1\nvvDPFpjv3o3D5T/toD34tHXjXQfnq0AEYApwY+59cuabyrnj6JkDXg6EzL+/79m2\nH3EZ+uBMEGmTVwyz01R3kIs2Fa/vpl/5k28nVOa3n443BYAZRzkkcoc/dkEHyf3d\n5Z1dCbMVmwL/dsrzsKwGRXdMYlNjX96XITP18LSjFdvK0auh1SklZkWKxKckQ3wD\nabY2DyM3ETTDJQYgZgmOGFWDK8qQAcX048/75X5CkkOneOFsTNmEKaChPnhiOO65\nBpkusWhJL7j6jb0j17IUlpgblcySPJWmm8SIevB0jbloex17rIxv4osnUovZBI47\njAlAD8PZvkIX7SPCunUCRJpzfBTdmTio6Ok/aJXz4HyXNTbv/nPTdq2vh+FQlron\noDzLqZr+FHZYC4TGQSVyWieqdIKpTE8D2qzKpa9rWCFICOgI39GiSR/0+VAgcu/j\nDfCRp9KscrlHQC0H1ARkpOvY5Z1Ak2UiYl9AU132XTtMMyUShi0=\n=qX43\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f4e1ec98017635760690c76de8c17c4339d5ec1c",
          "sha": "f4e1ec98017635760690c76de8c17c4339d5ec1c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f4e1ec98017635760690c76de8c17c4339d5ec1c"
        }
      ],
      "message": "tests: add inputfetcher tests",
      "committer": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2024-11-20T18:05:52Z"
      },
      "author": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2024-11-07T00:52:08Z"
      },
      "sha": "b5cfb60c448982da4243f8cca35f739518ac5260"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNlMDU4ODk3OTY5OGNmYjA0NjBjZDg3NWFmYTlmNjE5MTI4YWYxZjg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce0588979698cfb0460cd875afa9f619128af1f8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ce0588979698cfb0460cd875afa9f619128af1f8",
      "tree": {
        "sha": "01383065edf9d0dd75595309ccc33a5d2822f724",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/01383065edf9d0dd75595309ccc33a5d2822f724"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 01383065edf9d0dd75595309ccc33a5d2822f724\nparent b5cfb60c448982da4243f8cca35f739518ac5260\nauthor Andrew Toth <andrewstoth@gmail.com> 1730940738 -0500\ncommitter Andrew Toth <andrewstoth@gmail.com> 1732125952 -0500\n\nbench: add inputfetcher bench\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEISytpz6vNK/yCogaYAB6/Ik4sBgFAmc+JQAACgkQYAB6/Ik4\nsBhCxQ/7ByP6VATEccP/BjIGNLW0HEM1T+PK5WSBxBPlMk5a1RRIbuXggD+DDxsb\nyU9ilWqn9eIsVi9DiSzk1vqFrHPDL5KEgikHToEel2Wzn0O3ucMN2o0jZDV8UcwV\nRMeeS/FmPt7OC56vHnOkZARDG1EceMIcT0UIMq88mJKEgaI8wRtUy8tWfBP316bn\nzv0bpmNjW2qgV215XFSdKxZNjtuOhUhhZAbqZd7Zpr4NSF/M5Xr3PEradBf8k4Hf\ntI73RNnbkRMd/2UGlW3l1VVcROBoPuv15qLg495doX4s4N+OffPNCQwXnt3g0ees\nV9o+txDRmetmovYA5CaHpMkG/EB6Z3PxxClliFfKXrgtSFAtixqzWktjwbMmoQxe\nzPF96W+8mWTAvlbpnCCm+CVHygkEA+4Vzwgf01hQghAGijXADIOiT5XofQFE2ZOJ\nYG+zC6/lFgfFFWhFXr9HZRqiHEeW4xSTmX8+oX9puPn1iqiN1YY+8XldGREIoJYN\nfbimdqOxLyqbPu1yXxNza0BFY3PT3a/VQMb7MzOTGwOeqF7Z3xb1AmgM9lY/S27h\nTXera83OGmWoGWbs8ni2vuF50QfsgOyLjWXDHWAVsBlQkr/OJhZ02tRdH0S4emOf\nkU5wVj9ZvzbTkTlTBtC3nqa0tBVvhLMxNIjXkq84MXbj40sxLQo=\n=Dr8f\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5cfb60c448982da4243f8cca35f739518ac5260",
          "sha": "b5cfb60c448982da4243f8cca35f739518ac5260",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b5cfb60c448982da4243f8cca35f739518ac5260"
        }
      ],
      "message": "bench: add inputfetcher bench",
      "committer": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2024-11-20T18:05:52Z"
      },
      "author": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2024-11-07T00:52:18Z"
      },
      "sha": "ce0588979698cfb0460cd875afa9f619128af1f8"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15371196417,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOUMdgB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15371196417",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "24a523084d061020a94fc13709cb0c99862e6687",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/24a523084d061020a94fc13709cb0c99862e6687",
      "created_at": "2024-11-20T18:19:29Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGE3NTFjYTFjZmU2OGM5NGFhMWJmZDMzMDYzOWE2OTc0ZTFjMmU2ODg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a751ca1cfe68c94aa1bfd330639a6974e1c2e688",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a751ca1cfe68c94aa1bfd330639a6974e1c2e688",
      "tree": {
        "sha": "b20caa9636b0b9af09c276218394aaed40e542de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b20caa9636b0b9af09c276218394aaed40e542de"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree b20caa9636b0b9af09c276218394aaed40e542de\nparent ce0588979698cfb0460cd875afa9f619128af1f8\nauthor Andrew Toth <andrewstoth@gmail.com> 1731785610 -0500\ncommitter Andrew Toth <andrewstoth@gmail.com> 1732128352 -0500\n\nfuzz: add inputfetcher fuzz harness\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEISytpz6vNK/yCogaYAB6/Ik4sBgFAmc+LmAACgkQYAB6/Ik4\nsBh2CRAAoPu0CpvV0oxzkTxNr8h/cqv2zIZRcrlp4WY+h8Mwoj0l+atINVHPskYL\njjwV0Oj0Qdfm5L6O5u+c8Gz8hFrTkn+KUg7wEIQbaeWsJMsOBdaVXHRAvvEKyIEn\nlZG/1RED0P/dLVX9wn2GTfgE28xGr1bzE4nvPFYfe9C4tX6+z2lG8JToWBgYTsMl\ne02ikZ/Fu7ZBdVD7g2qI1tvd5rMHZt9H2ol2RVl+xoaYQp1QrDp4wJD0kjgIkvnM\nxH0M8aKOxMYwIZVCosOWL+xTM79DgOwXBOMj3pKZD9ikTePWo5w+5DSt4/53M864\nhIyIK8gczfFlKVLvdbDK/LUZyVCwCIqTqEl5JP7vZvaghArdmzjiwVJwfgGVs4tD\nnr+qsUdwb0vTQL4aBDpLGHD5tc2qfkH+S/42JWXCLI47KFibSdQvTHbCbAyPczkj\nVn1gd6234qrZQeBOswXdqZhy+YcO0m26kw4sysssEAS0+6lnnnP4w3EXwX8/mgmO\n9QRTOdyOFYUueUTHSujsP+b3ybkm41Pxo9uCUQ6oNFB5cwFwfd+YIWcpIYqDOO0y\n40GVknkades6yyETe6EjFghvkPtHC6GPqUmKa0p1QhpalJ2lcap8AQ4VdwuQVQ8e\ntR8DOsEpUS7KEJYLZlEura+bvHZSn8oQ94iKGU04RSpDsWEvuVg=\n=hE8T\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce0588979698cfb0460cd875afa9f619128af1f8",
          "sha": "ce0588979698cfb0460cd875afa9f619128af1f8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ce0588979698cfb0460cd875afa9f619128af1f8"
        }
      ],
      "message": "fuzz: add inputfetcher fuzz harness",
      "committer": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2024-11-20T18:45:52Z"
      },
      "author": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2024-11-16T19:33:30Z"
      },
      "sha": "a751ca1cfe68c94aa1bfd330639a6974e1c2e688"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDk1ZTZiMGQxODliNzcwYWYyZDI5ZmJkYWU5M2M1YjM0MjkwODQ4YTc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "tree": {
        "sha": "8401ca694486b477d69aeb3b96d983dce841fba7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8401ca694486b477d69aeb3b96d983dce841fba7"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 8401ca694486b477d69aeb3b96d983dce841fba7\nparent a751ca1cfe68c94aa1bfd330639a6974e1c2e688\nauthor Andrew Toth <andrewstoth@gmail.com> 1730940754 -0500\ncommitter Andrew Toth <andrewstoth@gmail.com> 1732128352 -0500\n\nvalidation: fetch block inputs in parallel\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEISytpz6vNK/yCogaYAB6/Ik4sBgFAmc+LmAACgkQYAB6/Ik4\nsBhHShAAgjv/MhP0Z8WFfEktrlDsHexyrXBycO4Y6LaYZbbMEdhKM6B5XeTNsIO3\nSMmewqmxs6lUt34J7ZReEuFt4QipKZILK8/GrWQjAkAZl1PUOEfxTGoWVQVlUF30\nLZPQgzcD6uOqqymhY89j7JwkQj/RP5oKAVGazXNsuH6CCOLaYOG/9X7DZgFFbr+1\nh1Nvdt1Yzwp2JSkaq5WkeNeU2CiRNML2pKEzPRgcmZsByUqT5W5zlGMEW+YJUb4s\nBWIrQUhCoSCRFICeWUON6gaD+EtxvyGQDT9aF+C1i5FtNm8RTV4UZwRv+TWanTWe\n6/CHDvk4c21OOs9yH3MOzLT9prybiKSesaAzuQg41HCUJqyX3kHpDHhEwhtmLIGZ\nL46xH/CZsOmtBCPfRGstWFW8VzFxz5I2VBLBNLroqjN8foFdIOXNhYPldEPWMgJP\npH1lSPyFyp4MBB/4YJpF5lDJX+mynDrfQ0T8rAHRvdSxd7q0ATPdi9qetv0usY77\n2En3D7zXjgs/6eR2kPGeJb8nA0A6UklnTQb7NuUpd0rFtNE/JdQyE2NL2rpPLlIa\nuymgfRBisSyERYepZ3QkrbU5BZ19sLDdgmr3b0wIriUqdYOUabgEekf2+40ynPo6\nkttl0rJjhyrCU9fM5yVFOudPjGQae1VjC/5df4wiasPCHbG9eEY=\n=Rzc7\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a751ca1cfe68c94aa1bfd330639a6974e1c2e688",
          "sha": "a751ca1cfe68c94aa1bfd330639a6974e1c2e688",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a751ca1cfe68c94aa1bfd330639a6974e1c2e688"
        }
      ],
      "message": "validation: fetch block inputs in parallel",
      "committer": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2024-11-20T18:45:52Z"
      },
      "author": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2024-11-07T00:52:34Z"
      },
      "sha": "95e6b0d189b770af2d29fbdae93c5b34290848a7"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15371454684,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOUNcjc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15371454684",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "created_at": "2024-11-20T18:46:12Z"
    },
    {
      "event": "labeled",
      "id": 15371455548,
      "node_id": "LE_lADOABII586bT0I_zwAAAAOUNcw8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15371455548",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-20T18:46:17Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2489311955,
      "node_id": "IC_kwDOABII586UX-LT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2489311955",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-20T18:46:18Z",
      "updated_at": "2024-11-20T18:46:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/33279820062</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-2489311955",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "reviewed",
      "id": 2445676953,
      "node_id": "PRR_kwDOABII586RxhGZ",
      "url": null,
      "actor": null,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#pullrequestreview-2445676953",
      "submitted_at": "2024-11-20T18:48:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812440117",
      "pull_request_review_id": 2388117544,
      "id": 1812440117,
      "node_id": "PRRC_kwDOABII585sB6Q1",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n+                // in_flight_fetches_count will only be truthy after first run.\n+                if (in_flight_fetches_count) {\n+                    if (m_pairs.empty()) {\n+                        m_pairs = std::move(pairs);\n+                    } else {\n+                        m_pairs.reserve(m_pairs.size() + pairs.size());\n+                        m_pairs.insert(m_pairs.end(), std::make_move_iterator(pairs.begin()),\n+                                       std::make_move_iterator(pairs.end()));\n+                    }\n+                    m_in_flight_fetches_count -= in_flight_fetches_count;\n+                    m_main_cv.notify_one();\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_outpoints.empty() && !m_request_stop) {\n+                    m_worker_cv.wait(lock);\n+                }\n+                if (m_request_stop) {\n+                    return;\n+                }\n+\n+                const auto even_bucket{m_in_flight_fetches_count / m_worker_threads.size()};\n+                in_flight_fetches_count = std::max(static_cast<size_t>(1),\n+                                                   std::min(std::min(m_outpoints.size(), m_batch_size), even_bucket));\n+                auto start_it = m_outpoints.end() - in_flight_fetches_count;\n+                outpoints.assign(std::make_move_iterator(start_it), std::make_move_iterator(m_outpoints.end()));\n+                m_outpoints.erase(start_it, m_outpoints.end());\n+            }\n+\n+            pairs.clear();\n+            pairs.reserve(outpoints.size());\n+            for (COutPoint& outpoint : outpoints) {\n+                Coin coin;\n+                if (!m_db->GetCoin(outpoint, coin)) {\n+                    // Missing an input, just break. This block will fail validation, so no point in continuing.\n+                    break;\n+                }\n+                pairs.emplace_back(std::move(outpoint), std::move(coin));\n+            }\n+        } while (true);\n+    }\n+\n+    //! Add a batch of outpoints to the queue\n+    void Add(std::vector<COutPoint>&& outpoints) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (outpoints.empty()) {\n+            return;\n+        }\n+\n+        const auto size{outpoints.size()};\n+        {\n+            LOCK(m_mutex);\n+            m_in_flight_fetches_count += outpoints.size();\n+            if (m_outpoints.empty()) {\n+                m_outpoints = std::move(outpoints);\n+            } else {\n+                m_outpoints.insert(m_outpoints.end(), std::make_move_iterator(outpoints.begin()), std::make_move_iterator(outpoints.end()));\n+            }\n+        }\n+\n+        if (size == 1) {\n+            m_worker_cv.notify_one();\n+        } else {\n+            m_worker_cv.notify_all();\n+        }\n+    }\n+\n+\n+public:\n+    //! Create a new input fetcher\n+    explicit InputFetcher(size_t batch_size, size_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        m_worker_threads.reserve(worker_thread_count);\n+        for (size_t n = 0; n < worker_thread_count; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"inputfetch.%i\", n));",
      "path": "src/inputfetcher.h",
      "position": 177,
      "original_position": 151,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Q: Is this a leftover a hack for non-owning LevelDB threads, or is this really the best way to name threads in a cross-platform way?",
      "created_at": "2024-10-23T10:26:47Z",
      "updated_at": "2024-10-23T13:27:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812440117",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812440117"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 177,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812531761",
      "pull_request_review_id": 2388117544,
      "id": 1812531761,
      "node_id": "PRRC_kwDOABII585sCQox",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n+                // in_flight_fetches_count will only be truthy after first run.\n+                if (in_flight_fetches_count) {\n+                    if (m_pairs.empty()) {\n+                        m_pairs = std::move(pairs);\n+                    } else {\n+                        m_pairs.reserve(m_pairs.size() + pairs.size());\n+                        m_pairs.insert(m_pairs.end(), std::make_move_iterator(pairs.begin()),\n+                                       std::make_move_iterator(pairs.end()));\n+                    }\n+                    m_in_flight_fetches_count -= in_flight_fetches_count;\n+                    m_main_cv.notify_one();\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_outpoints.empty() && !m_request_stop) {\n+                    m_worker_cv.wait(lock);\n+                }\n+                if (m_request_stop) {\n+                    return;\n+                }\n+\n+                const auto even_bucket{m_in_flight_fetches_count / m_worker_threads.size()};\n+                in_flight_fetches_count = std::max(static_cast<size_t>(1),\n+                                                   std::min(std::min(m_outpoints.size(), m_batch_size), even_bucket));\n+                auto start_it = m_outpoints.end() - in_flight_fetches_count;\n+                outpoints.assign(std::make_move_iterator(start_it), std::make_move_iterator(m_outpoints.end()));\n+                m_outpoints.erase(start_it, m_outpoints.end());\n+            }\n+\n+            pairs.clear();\n+            pairs.reserve(outpoints.size());\n+            for (COutPoint& outpoint : outpoints) {\n+                Coin coin;\n+                if (!m_db->GetCoin(outpoint, coin)) {\n+                    // Missing an input, just break. This block will fail validation, so no point in continuing.\n+                    break;\n+                }\n+                pairs.emplace_back(std::move(outpoint), std::move(coin));\n+            }\n+        } while (true);\n+    }\n+\n+    //! Add a batch of outpoints to the queue\n+    void Add(std::vector<COutPoint>&& outpoints) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (outpoints.empty()) {\n+            return;\n+        }\n+\n+        const auto size{outpoints.size()};\n+        {\n+            LOCK(m_mutex);\n+            m_in_flight_fetches_count += outpoints.size();\n+            if (m_outpoints.empty()) {\n+                m_outpoints = std::move(outpoints);\n+            } else {\n+                m_outpoints.insert(m_outpoints.end(), std::make_move_iterator(outpoints.begin()), std::make_move_iterator(outpoints.end()));\n+            }\n+        }\n+\n+        if (size == 1) {\n+            m_worker_cv.notify_one();\n+        } else {\n+            m_worker_cv.notify_all();\n+        }\n+    }\n+\n+\n+public:\n+    //! Create a new input fetcher\n+    explicit InputFetcher(size_t batch_size, size_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        m_worker_threads.reserve(worker_thread_count);\n+        for (size_t n = 0; n < worker_thread_count; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"inputfetch.%i\", n));\n+                Loop();\n+            });\n+        }\n+    }\n+\n+    // Since this class manages its own resources, which is a thread\n+    // pool `m_worker_threads`, copy and move operations are not appropriate.\n+    InputFetcher(const InputFetcher&) = delete;\n+    InputFetcher& operator=(const InputFetcher&) = delete;\n+    InputFetcher(InputFetcher&&) = delete;\n+    InputFetcher& operator=(InputFetcher&&) = delete;\n+\n+\n+    //! Fetch all block inputs from db, and insert into cache.\n+    void FetchInputs(CCoinsViewCache& cache, const CCoinsViewDB& db, const CBlock& block) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        m_db = &db;\n+\n+        std::vector<COutPoint> buffer{};\n+        buffer.reserve(m_batch_size);\n+        std::set<Txid> txids{};\n+        for (const auto& tx : block.vtx) {\n+            if (tx->IsCoinBase()) continue;\n+            for (const auto& in : tx->vin) {\n+                const auto& outpoint = in.prevout;\n+                // If an input references an outpoint from earlier in the\n+                // block, it won't be in the cache yet but it also won't be\n+                // in the db either.\n+                if (txids.contains(outpoint.hash)) {\n+                    continue;\n+                }\n+                if (cache.HaveCoinInCache(outpoint)) {\n+                    continue;\n+                }\n+\n+                buffer.emplace_back(outpoint);\n+                if (buffer.size() == m_batch_size) {\n+                    Add(std::move(buffer));",
      "path": "src/inputfetcher.h",
      "position": null,
      "original_position": 189,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We're mostly creating the buckets randomly here, so each thread will need access to basically all of the keys.\r\nSince we have an idea of how LevelDB works here (i.e. Sorted String Table), we could likely improve cache locality (would likely be most beneficial on HDDs) and minimize lock contention by splitting the reads by sorted transactions instead.",
      "created_at": "2024-10-23T11:29:06Z",
      "updated_at": "2024-10-23T12:44:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812531761",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812531761"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812534028",
      "pull_request_review_id": 2388117544,
      "id": 1812534028,
      "node_id": "PRRC_kwDOABII585sCRMM",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);",
      "path": "src/inputfetcher.h",
      "position": 73,
      "original_position": 73,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm wondering if we really need to (b)lock here or whether we could we create a [read-only snapshot](https://github.com/google/leveldb/blob/main/doc/index.md#snapshots) instead and avoid stalling?",
      "created_at": "2024-10-23T11:30:32Z",
      "updated_at": "2024-10-23T12:44:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812534028",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812534028"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 73,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812548418",
      "pull_request_review_id": 2388117544,
      "id": 1812548418,
      "node_id": "PRRC_kwDOABII585sCUtC",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher",
      "path": "src/inputfetcher.h",
      "position": 33,
      "original_position": 29,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I know it's not trivial request, but can we add a test for this class which fetches everything in parallel and sequentially and assert that the result is equivalent?\r\nAnd preferably also a benchmark, like we have it for https://github.com/bitcoin/bitcoin/blob/master/src/bench/checkqueue.cpp.\r\nI would gladly help here, if needed.",
      "created_at": "2024-10-23T11:39:06Z",
      "updated_at": "2024-10-23T12:44:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812548418",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812548418"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 33,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812560601",
      "pull_request_review_id": 2388117544,
      "id": 1812560601,
      "node_id": "PRRC_kwDOABII585sCXrZ",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n+                // in_flight_fetches_count will only be truthy after first run.\n+                if (in_flight_fetches_count) {\n+                    if (m_pairs.empty()) {\n+                        m_pairs = std::move(pairs);\n+                    } else {\n+                        m_pairs.reserve(m_pairs.size() + pairs.size());\n+                        m_pairs.insert(m_pairs.end(), std::make_move_iterator(pairs.begin()),\n+                                       std::make_move_iterator(pairs.end()));\n+                    }\n+                    m_in_flight_fetches_count -= in_flight_fetches_count;\n+                    m_main_cv.notify_one();\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_outpoints.empty() && !m_request_stop) {\n+                    m_worker_cv.wait(lock);\n+                }\n+                if (m_request_stop) {\n+                    return;\n+                }\n+\n+                const auto even_bucket{m_in_flight_fetches_count / m_worker_threads.size()};\n+                in_flight_fetches_count = std::max(static_cast<size_t>(1),\n+                                                   std::min(std::min(m_outpoints.size(), m_batch_size), even_bucket));\n+                auto start_it = m_outpoints.end() - in_flight_fetches_count;\n+                outpoints.assign(std::make_move_iterator(start_it), std::make_move_iterator(m_outpoints.end()));\n+                m_outpoints.erase(start_it, m_outpoints.end());\n+            }\n+\n+            pairs.clear();\n+            pairs.reserve(outpoints.size());\n+            for (COutPoint& outpoint : outpoints) {\n+                Coin coin;\n+                if (!m_db->GetCoin(outpoint, coin)) {\n+                    // Missing an input, just break. This block will fail validation, so no point in continuing.\n+                    break;\n+                }\n+                pairs.emplace_back(std::move(outpoint), std::move(coin));\n+            }\n+        } while (true);\n+    }\n+\n+    //! Add a batch of outpoints to the queue\n+    void Add(std::vector<COutPoint>&& outpoints) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (outpoints.empty()) {\n+            return;\n+        }\n+\n+        const auto size{outpoints.size()};\n+        {\n+            LOCK(m_mutex);\n+            m_in_flight_fetches_count += outpoints.size();\n+            if (m_outpoints.empty()) {\n+                m_outpoints = std::move(outpoints);\n+            } else {\n+                m_outpoints.insert(m_outpoints.end(), std::make_move_iterator(outpoints.begin()), std::make_move_iterator(outpoints.end()));\n+            }\n+        }\n+\n+        if (size == 1) {\n+            m_worker_cv.notify_one();\n+        } else {\n+            m_worker_cv.notify_all();\n+        }\n+    }\n+\n+\n+public:\n+    //! Create a new input fetcher\n+    explicit InputFetcher(size_t batch_size, size_t worker_thread_count) noexcept",
      "path": "src/inputfetcher.h",
      "position": null,
      "original_position": 145,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "For consistency (see: `explicit CCheckQueue(unsigned int batch_size, int worker_threads_num)`) and simplicity (`m_input_fetcher{/*batch_size=*/128, static_cast<size_t>(options.worker_threads_num)}`, and to follow modern C++ directions where sizes seem to be preferred as signed values, see: https://github.com/bitcoin/bitcoin/pull/30927#discussion_r1766881296), please consider making these int(s) instead.",
      "created_at": "2024-10-23T11:46:37Z",
      "updated_at": "2024-10-23T12:47:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812560601",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812560601"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812599960",
      "pull_request_review_id": 2388117544,
      "id": 1812599960,
      "node_id": "PRRC_kwDOABII585sChSY",
      "diff_hunk": "@@ -6243,6 +6248,7 @@ static ChainstateManager::Options&& Flatten(ChainstateManager::Options&& opts)\n \n ChainstateManager::ChainstateManager(const util::SignalInterrupt& interrupt, Options options, node::BlockManager::Options blockman_options)\n     : m_script_check_queue{/*batch_size=*/128, options.worker_threads_num},\n+      m_input_fetcher{/*batch_size=*/128, static_cast<size_t>(options.worker_threads_num)},",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Unlike the script checks, these fetches aren't CPU bound, there is no reason to provide the number of CPUs as the number of parallels threads.\r\nI don't know if we care about HDD performance here or not, but we can likely find a multiplier that makes this better for both SSD and HDD.\r\n\r\nQuoting from https://pkolaczk.github.io/disk-parallelism:\r\n> It was surprising to me that even 64 threads, which are far more than the number of CPU cores (4 physical, 8 virtual), still improved the performance. I guess that with requests of such a small size to such a fast storage, you need to submit really many of them to keep the SSD busy.\r\n\r\nIf we can provide a benchmark for this usecase we can likely find an optimal multiplier here - I won't nack but this part is very important for me.",
      "created_at": "2024-10-23T12:07:45Z",
      "updated_at": "2024-10-23T12:44:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812599960",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812599960"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812604307",
      "pull_request_review_id": 2388117544,
      "id": 1812604307,
      "node_id": "PRRC_kwDOABII585sCiWT",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n+                // in_flight_fetches_count will only be truthy after first run.\n+                if (in_flight_fetches_count) {\n+                    if (m_pairs.empty()) {\n+                        m_pairs = std::move(pairs);\n+                    } else {\n+                        m_pairs.reserve(m_pairs.size() + pairs.size());\n+                        m_pairs.insert(m_pairs.end(), std::make_move_iterator(pairs.begin()),\n+                                       std::make_move_iterator(pairs.end()));\n+                    }\n+                    m_in_flight_fetches_count -= in_flight_fetches_count;\n+                    m_main_cv.notify_one();\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_outpoints.empty() && !m_request_stop) {\n+                    m_worker_cv.wait(lock);\n+                }\n+                if (m_request_stop) {\n+                    return;\n+                }\n+\n+                const auto even_bucket{m_in_flight_fetches_count / m_worker_threads.size()};\n+                in_flight_fetches_count = std::max(static_cast<size_t>(1),\n+                                                   std::min(std::min(m_outpoints.size(), m_batch_size), even_bucket));\n+                auto start_it = m_outpoints.end() - in_flight_fetches_count;\n+                outpoints.assign(std::make_move_iterator(start_it), std::make_move_iterator(m_outpoints.end()));\n+                m_outpoints.erase(start_it, m_outpoints.end());\n+            }\n+\n+            pairs.clear();\n+            pairs.reserve(outpoints.size());\n+            for (COutPoint& outpoint : outpoints) {\n+                Coin coin;\n+                if (!m_db->GetCoin(outpoint, coin)) {\n+                    // Missing an input, just break. This block will fail validation, so no point in continuing.\n+                    break;\n+                }\n+                pairs.emplace_back(std::move(outpoint), std::move(coin));\n+            }\n+        } while (true);\n+    }\n+\n+    //! Add a batch of outpoints to the queue\n+    void Add(std::vector<COutPoint>&& outpoints) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (outpoints.empty()) {\n+            return;\n+        }\n+\n+        const auto size{outpoints.size()};\n+        {\n+            LOCK(m_mutex);\n+            m_in_flight_fetches_count += outpoints.size();\n+            if (m_outpoints.empty()) {\n+                m_outpoints = std::move(outpoints);\n+            } else {\n+                m_outpoints.insert(m_outpoints.end(), std::make_move_iterator(outpoints.begin()), std::make_move_iterator(outpoints.end()));\n+            }\n+        }\n+\n+        if (size == 1) {\n+            m_worker_cv.notify_one();\n+        } else {\n+            m_worker_cv.notify_all();\n+        }\n+    }\n+\n+\n+public:\n+    //! Create a new input fetcher\n+    explicit InputFetcher(size_t batch_size, size_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        m_worker_threads.reserve(worker_thread_count);\n+        for (size_t n = 0; n < worker_thread_count; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"inputfetch.%i\", n));\n+                Loop();\n+            });\n+        }\n+    }\n+\n+    // Since this class manages its own resources, which is a thread\n+    // pool `m_worker_threads`, copy and move operations are not appropriate.\n+    InputFetcher(const InputFetcher&) = delete;\n+    InputFetcher& operator=(const InputFetcher&) = delete;\n+    InputFetcher(InputFetcher&&) = delete;\n+    InputFetcher& operator=(InputFetcher&&) = delete;\n+\n+\n+    //! Fetch all block inputs from db, and insert into cache.\n+    void FetchInputs(CCoinsViewCache& cache, const CCoinsViewDB& db, const CBlock& block) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        m_db = &db;\n+\n+        std::vector<COutPoint> buffer{};\n+        buffer.reserve(m_batch_size);\n+        std::set<Txid> txids{};\n+        for (const auto& tx : block.vtx) {\n+            if (tx->IsCoinBase()) continue;\n+            for (const auto& in : tx->vin) {\n+                const auto& outpoint = in.prevout;\n+                // If an input references an outpoint from earlier in the\n+                // block, it won't be in the cache yet but it also won't be\n+                // in the db either.\n+                if (txids.contains(outpoint.hash)) {\n+                    continue;\n+                }\n+                if (cache.HaveCoinInCache(outpoint)) {\n+                    continue;\n+                }\n+\n+                buffer.emplace_back(outpoint);\n+                if (buffer.size() == m_batch_size) {",
      "path": "src/inputfetcher.h",
      "position": null,
      "original_position": 188,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Would it be possible to create the batch sizes dynamically?\r\nSince the number of missing values differs for every block (and every dbcache size), it may not make more sense to calculate the optimal split instead of using the random value of 128.\r\nCoroutines might alleviate this problem.",
      "created_at": "2024-10-23T12:10:35Z",
      "updated_at": "2024-10-23T13:37:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812604307",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812604307"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812606720",
      "pull_request_review_id": 2388117544,
      "id": 1812606720,
      "node_id": "PRRC_kwDOABII585sCi8A",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n+                // in_flight_fetches_count will only be truthy after first run.\n+                if (in_flight_fetches_count) {\n+                    if (m_pairs.empty()) {\n+                        m_pairs = std::move(pairs);\n+                    } else {\n+                        m_pairs.reserve(m_pairs.size() + pairs.size());\n+                        m_pairs.insert(m_pairs.end(), std::make_move_iterator(pairs.begin()),\n+                                       std::make_move_iterator(pairs.end()));\n+                    }\n+                    m_in_flight_fetches_count -= in_flight_fetches_count;\n+                    m_main_cv.notify_one();\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_outpoints.empty() && !m_request_stop) {\n+                    m_worker_cv.wait(lock);\n+                }\n+                if (m_request_stop) {\n+                    return;\n+                }\n+\n+                const auto even_bucket{m_in_flight_fetches_count / m_worker_threads.size()};\n+                in_flight_fetches_count = std::max(static_cast<size_t>(1),\n+                                                   std::min(std::min(m_outpoints.size(), m_batch_size), even_bucket));\n+                auto start_it = m_outpoints.end() - in_flight_fetches_count;\n+                outpoints.assign(std::make_move_iterator(start_it), std::make_move_iterator(m_outpoints.end()));\n+                m_outpoints.erase(start_it, m_outpoints.end());\n+            }\n+\n+            pairs.clear();\n+            pairs.reserve(outpoints.size());\n+            for (COutPoint& outpoint : outpoints) {\n+                Coin coin;\n+                if (!m_db->GetCoin(outpoint, coin)) {\n+                    // Missing an input, just break. This block will fail validation, so no point in continuing.\n+                    break;\n+                }\n+                pairs.emplace_back(std::move(outpoint), std::move(coin));\n+            }\n+        } while (true);\n+    }\n+\n+    //! Add a batch of outpoints to the queue\n+    void Add(std::vector<COutPoint>&& outpoints) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (outpoints.empty()) {\n+            return;\n+        }\n+\n+        const auto size{outpoints.size()};\n+        {\n+            LOCK(m_mutex);\n+            m_in_flight_fetches_count += outpoints.size();\n+            if (m_outpoints.empty()) {\n+                m_outpoints = std::move(outpoints);\n+            } else {\n+                m_outpoints.insert(m_outpoints.end(), std::make_move_iterator(outpoints.begin()), std::make_move_iterator(outpoints.end()));\n+            }\n+        }\n+\n+        if (size == 1) {\n+            m_worker_cv.notify_one();\n+        } else {\n+            m_worker_cv.notify_all();\n+        }\n+    }\n+\n+\n+public:\n+    //! Create a new input fetcher\n+    explicit InputFetcher(size_t batch_size, size_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        m_worker_threads.reserve(worker_thread_count);\n+        for (size_t n = 0; n < worker_thread_count; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"inputfetch.%i\", n));\n+                Loop();\n+            });\n+        }\n+    }\n+\n+    // Since this class manages its own resources, which is a thread\n+    // pool `m_worker_threads`, copy and move operations are not appropriate.\n+    InputFetcher(const InputFetcher&) = delete;\n+    InputFetcher& operator=(const InputFetcher&) = delete;\n+    InputFetcher(InputFetcher&&) = delete;\n+    InputFetcher& operator=(InputFetcher&&) = delete;\n+\n+\n+    //! Fetch all block inputs from db, and insert into cache.\n+    void FetchInputs(CCoinsViewCache& cache, const CCoinsViewDB& db, const CBlock& block) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        m_db = &db;\n+\n+        std::vector<COutPoint> buffer{};\n+        buffer.reserve(m_batch_size);\n+        std::set<Txid> txids{};\n+        for (const auto& tx : block.vtx) {\n+            if (tx->IsCoinBase()) continue;\n+            for (const auto& in : tx->vin) {\n+                const auto& outpoint = in.prevout;\n+                // If an input references an outpoint from earlier in the\n+                // block, it won't be in the cache yet but it also won't be\n+                // in the db either.\n+                if (txids.contains(outpoint.hash)) {\n+                    continue;\n+                }\n+                if (cache.HaveCoinInCache(outpoint)) {\n+                    continue;\n+                }\n+\n+                buffer.emplace_back(outpoint);\n+                if (buffer.size() == m_batch_size) {\n+                    Add(std::move(buffer));\n+                    buffer.clear();\n+                    buffer.reserve(m_batch_size);\n+                }\n+            }\n+            txids.insert(tx->GetHash());\n+        }\n+\n+        Add(std::move(buffer));",
      "path": "src/inputfetcher.h",
      "position": null,
      "original_position": 197,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Do we always have leftovers or will this process the last batch twice (or process an empty one) if the batch happens to be divisible by batch_size?",
      "created_at": "2024-10-23T12:11:58Z",
      "updated_at": "2024-10-23T13:37:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812606720",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812606720"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812659221",
      "pull_request_review_id": 2388117544,
      "id": 1812659221,
      "node_id": "PRRC_kwDOABII585sCvwV",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)",
      "path": "src/inputfetcher.h",
      "position": 64,
      "original_position": 65,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We're basically mimicking RocksDB's `MultiGet` here - but prewarming the cache instead in separate get requests, since we can't really access LevelDB's internals.\r\n\r\nSince splitting into buckets isn't trivial and since `MultiGet` seems to rely on C++20 [coroutines](https://en.cppreference.com/w/cpp/language/coroutines) (which wasn't available in 2012 when `CCheckQueue` was written), I'm wondering how much simpler this fetching would be if we had lightweight suspendible threads instead: https://rocksdb.org/blog/2022/10/07/asynchronous-io-in-rocksdb.html#multiget",
      "created_at": "2024-10-23T12:35:29Z",
      "updated_at": "2024-10-23T13:37:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812659221",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812659221"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812779405",
      "pull_request_review_id": 2388734949,
      "id": 1812779405,
      "node_id": "PRRC_kwDOABII585sDNGN",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);",
      "path": "src/inputfetcher.h",
      "position": 73,
      "original_position": 73,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812534028,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is blocking so we can access the queue of shared outpoints that we need to fetch from. It is not blocking for LevelDB, we access the db once we are out of the critical section.",
      "created_at": "2024-10-23T13:34:07Z",
      "updated_at": "2024-10-23T13:34:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812779405",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812779405"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 73,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812781136",
      "pull_request_review_id": 2388740849,
      "id": 1812781136,
      "node_id": "PRRC_kwDOABII585sDNhQ",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher",
      "path": "src/inputfetcher.h",
      "position": 33,
      "original_position": 29,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812548418,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, I can add these but I am waiting for some more conceptual support.",
      "created_at": "2024-10-23T13:35:04Z",
      "updated_at": "2024-10-23T13:35:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812781136",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812781136"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 33,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812785573",
      "pull_request_review_id": 2388754731,
      "id": 1812785573,
      "node_id": "PRRC_kwDOABII585sDOml",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n+                // in_flight_fetches_count will only be truthy after first run.\n+                if (in_flight_fetches_count) {\n+                    if (m_pairs.empty()) {\n+                        m_pairs = std::move(pairs);\n+                    } else {\n+                        m_pairs.reserve(m_pairs.size() + pairs.size());\n+                        m_pairs.insert(m_pairs.end(), std::make_move_iterator(pairs.begin()),\n+                                       std::make_move_iterator(pairs.end()));\n+                    }\n+                    m_in_flight_fetches_count -= in_flight_fetches_count;\n+                    m_main_cv.notify_one();\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_outpoints.empty() && !m_request_stop) {\n+                    m_worker_cv.wait(lock);\n+                }\n+                if (m_request_stop) {\n+                    return;\n+                }\n+\n+                const auto even_bucket{m_in_flight_fetches_count / m_worker_threads.size()};\n+                in_flight_fetches_count = std::max(static_cast<size_t>(1),\n+                                                   std::min(std::min(m_outpoints.size(), m_batch_size), even_bucket));\n+                auto start_it = m_outpoints.end() - in_flight_fetches_count;\n+                outpoints.assign(std::make_move_iterator(start_it), std::make_move_iterator(m_outpoints.end()));\n+                m_outpoints.erase(start_it, m_outpoints.end());\n+            }\n+\n+            pairs.clear();\n+            pairs.reserve(outpoints.size());\n+            for (COutPoint& outpoint : outpoints) {\n+                Coin coin;\n+                if (!m_db->GetCoin(outpoint, coin)) {\n+                    // Missing an input, just break. This block will fail validation, so no point in continuing.\n+                    break;\n+                }\n+                pairs.emplace_back(std::move(outpoint), std::move(coin));\n+            }\n+        } while (true);\n+    }\n+\n+    //! Add a batch of outpoints to the queue\n+    void Add(std::vector<COutPoint>&& outpoints) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (outpoints.empty()) {\n+            return;\n+        }\n+\n+        const auto size{outpoints.size()};\n+        {\n+            LOCK(m_mutex);\n+            m_in_flight_fetches_count += outpoints.size();\n+            if (m_outpoints.empty()) {\n+                m_outpoints = std::move(outpoints);\n+            } else {\n+                m_outpoints.insert(m_outpoints.end(), std::make_move_iterator(outpoints.begin()), std::make_move_iterator(outpoints.end()));\n+            }\n+        }\n+\n+        if (size == 1) {\n+            m_worker_cv.notify_one();\n+        } else {\n+            m_worker_cv.notify_all();\n+        }\n+    }\n+\n+\n+public:\n+    //! Create a new input fetcher\n+    explicit InputFetcher(size_t batch_size, size_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        m_worker_threads.reserve(worker_thread_count);\n+        for (size_t n = 0; n < worker_thread_count; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"inputfetch.%i\", n));\n+                Loop();\n+            });\n+        }\n+    }\n+\n+    // Since this class manages its own resources, which is a thread\n+    // pool `m_worker_threads`, copy and move operations are not appropriate.\n+    InputFetcher(const InputFetcher&) = delete;\n+    InputFetcher& operator=(const InputFetcher&) = delete;\n+    InputFetcher(InputFetcher&&) = delete;\n+    InputFetcher& operator=(InputFetcher&&) = delete;\n+\n+\n+    //! Fetch all block inputs from db, and insert into cache.\n+    void FetchInputs(CCoinsViewCache& cache, const CCoinsViewDB& db, const CBlock& block) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        m_db = &db;\n+\n+        std::vector<COutPoint> buffer{};\n+        buffer.reserve(m_batch_size);\n+        std::set<Txid> txids{};\n+        for (const auto& tx : block.vtx) {\n+            if (tx->IsCoinBase()) continue;\n+            for (const auto& in : tx->vin) {\n+                const auto& outpoint = in.prevout;\n+                // If an input references an outpoint from earlier in the\n+                // block, it won't be in the cache yet but it also won't be\n+                // in the db either.\n+                if (txids.contains(outpoint.hash)) {\n+                    continue;\n+                }\n+                if (cache.HaveCoinInCache(outpoint)) {\n+                    continue;\n+                }\n+\n+                buffer.emplace_back(outpoint);\n+                if (buffer.size() == m_batch_size) {\n+                    Add(std::move(buffer));\n+                    buffer.clear();\n+                    buffer.reserve(m_batch_size);\n+                }\n+            }\n+            txids.insert(tx->GetHash());\n+        }\n+\n+        Add(std::move(buffer));",
      "path": "src/inputfetcher.h",
      "position": null,
      "original_position": 197,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812606720,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It won't process twice, but it could pass in an empty vector, which is ignored if you look at `Add` implementation.",
      "created_at": "2024-10-23T13:37:19Z",
      "updated_at": "2024-10-23T13:37:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812785573",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812785573"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812794214",
      "pull_request_review_id": 2388768186,
      "id": 1812794214,
      "node_id": "PRRC_kwDOABII585sDQtm",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)",
      "path": "src/inputfetcher.h",
      "position": 64,
      "original_position": 65,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812659221,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think it would be similar in complexity, we would still need all the locking mechanisms to prevent multithreaded access.\r\n\r\nWhat would really be great is if we had a similar construction to Rust's `std::sync::mpsc`.",
      "created_at": "2024-10-23T13:40:49Z",
      "updated_at": "2024-10-23T13:40:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812794214",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812794214"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812797796",
      "pull_request_review_id": 2388773991,
      "id": 1812797796,
      "node_id": "PRRC_kwDOABII585sDRlk",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n+                // in_flight_fetches_count will only be truthy after first run.\n+                if (in_flight_fetches_count) {\n+                    if (m_pairs.empty()) {\n+                        m_pairs = std::move(pairs);\n+                    } else {\n+                        m_pairs.reserve(m_pairs.size() + pairs.size());\n+                        m_pairs.insert(m_pairs.end(), std::make_move_iterator(pairs.begin()),\n+                                       std::make_move_iterator(pairs.end()));\n+                    }\n+                    m_in_flight_fetches_count -= in_flight_fetches_count;\n+                    m_main_cv.notify_one();\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_outpoints.empty() && !m_request_stop) {\n+                    m_worker_cv.wait(lock);\n+                }\n+                if (m_request_stop) {\n+                    return;\n+                }\n+\n+                const auto even_bucket{m_in_flight_fetches_count / m_worker_threads.size()};\n+                in_flight_fetches_count = std::max(static_cast<size_t>(1),\n+                                                   std::min(std::min(m_outpoints.size(), m_batch_size), even_bucket));\n+                auto start_it = m_outpoints.end() - in_flight_fetches_count;\n+                outpoints.assign(std::make_move_iterator(start_it), std::make_move_iterator(m_outpoints.end()));\n+                m_outpoints.erase(start_it, m_outpoints.end());\n+            }\n+\n+            pairs.clear();\n+            pairs.reserve(outpoints.size());\n+            for (COutPoint& outpoint : outpoints) {\n+                Coin coin;\n+                if (!m_db->GetCoin(outpoint, coin)) {\n+                    // Missing an input, just break. This block will fail validation, so no point in continuing.\n+                    break;\n+                }\n+                pairs.emplace_back(std::move(outpoint), std::move(coin));\n+            }\n+        } while (true);\n+    }\n+\n+    //! Add a batch of outpoints to the queue\n+    void Add(std::vector<COutPoint>&& outpoints) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (outpoints.empty()) {\n+            return;\n+        }\n+\n+        const auto size{outpoints.size()};\n+        {\n+            LOCK(m_mutex);\n+            m_in_flight_fetches_count += outpoints.size();\n+            if (m_outpoints.empty()) {\n+                m_outpoints = std::move(outpoints);\n+            } else {\n+                m_outpoints.insert(m_outpoints.end(), std::make_move_iterator(outpoints.begin()), std::make_move_iterator(outpoints.end()));\n+            }\n+        }\n+\n+        if (size == 1) {\n+            m_worker_cv.notify_one();\n+        } else {\n+            m_worker_cv.notify_all();\n+        }\n+    }\n+\n+\n+public:\n+    //! Create a new input fetcher\n+    explicit InputFetcher(size_t batch_size, size_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        m_worker_threads.reserve(worker_thread_count);\n+        for (size_t n = 0; n < worker_thread_count; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"inputfetch.%i\", n));\n+                Loop();\n+            });\n+        }\n+    }\n+\n+    // Since this class manages its own resources, which is a thread\n+    // pool `m_worker_threads`, copy and move operations are not appropriate.\n+    InputFetcher(const InputFetcher&) = delete;\n+    InputFetcher& operator=(const InputFetcher&) = delete;\n+    InputFetcher(InputFetcher&&) = delete;\n+    InputFetcher& operator=(InputFetcher&&) = delete;\n+\n+\n+    //! Fetch all block inputs from db, and insert into cache.\n+    void FetchInputs(CCoinsViewCache& cache, const CCoinsViewDB& db, const CBlock& block) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        m_db = &db;\n+\n+        std::vector<COutPoint> buffer{};\n+        buffer.reserve(m_batch_size);\n+        std::set<Txid> txids{};\n+        for (const auto& tx : block.vtx) {\n+            if (tx->IsCoinBase()) continue;\n+            for (const auto& in : tx->vin) {\n+                const auto& outpoint = in.prevout;\n+                // If an input references an outpoint from earlier in the\n+                // block, it won't be in the cache yet but it also won't be\n+                // in the db either.\n+                if (txids.contains(outpoint.hash)) {\n+                    continue;\n+                }\n+                if (cache.HaveCoinInCache(outpoint)) {\n+                    continue;\n+                }\n+\n+                buffer.emplace_back(outpoint);\n+                if (buffer.size() == m_batch_size) {",
      "path": "src/inputfetcher.h",
      "position": null,
      "original_position": 188,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812604307,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm not sure it would warrant the complexity I think this batch size is \"good enough\" for now. In a follow up we could maybe add ways to set this with configs to experiment if there really is more optimal settings.",
      "created_at": "2024-10-23T13:42:02Z",
      "updated_at": "2024-10-23T13:42:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812797796",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812797796"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812800076",
      "pull_request_review_id": 2388778745,
      "id": 1812800076,
      "node_id": "PRRC_kwDOABII585sDSJM",
      "diff_hunk": "@@ -6243,6 +6248,7 @@ static ChainstateManager::Options&& Flatten(ChainstateManager::Options&& opts)\n \n ChainstateManager::ChainstateManager(const util::SignalInterrupt& interrupt, Options options, node::BlockManager::Options blockman_options)\n     : m_script_check_queue{/*batch_size=*/128, options.worker_threads_num},\n+      m_input_fetcher{/*batch_size=*/128, static_cast<size_t>(options.worker_threads_num)},",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812599960,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Adding more threads will require more memory, which is one reason to not use many more.\r\n\r\nI did a benchmark using 64 threads on the same 16 vcore machine, and it was slightly slower :/",
      "created_at": "2024-10-23T13:43:08Z",
      "updated_at": "2024-10-23T13:43:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812800076",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812800076"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812807883",
      "pull_request_review_id": 2388792724,
      "id": 1812807883,
      "node_id": "PRRC_kwDOABII585sDUDL",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n+                // in_flight_fetches_count will only be truthy after first run.\n+                if (in_flight_fetches_count) {\n+                    if (m_pairs.empty()) {\n+                        m_pairs = std::move(pairs);\n+                    } else {\n+                        m_pairs.reserve(m_pairs.size() + pairs.size());\n+                        m_pairs.insert(m_pairs.end(), std::make_move_iterator(pairs.begin()),\n+                                       std::make_move_iterator(pairs.end()));\n+                    }\n+                    m_in_flight_fetches_count -= in_flight_fetches_count;\n+                    m_main_cv.notify_one();\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_outpoints.empty() && !m_request_stop) {\n+                    m_worker_cv.wait(lock);\n+                }\n+                if (m_request_stop) {\n+                    return;\n+                }\n+\n+                const auto even_bucket{m_in_flight_fetches_count / m_worker_threads.size()};\n+                in_flight_fetches_count = std::max(static_cast<size_t>(1),\n+                                                   std::min(std::min(m_outpoints.size(), m_batch_size), even_bucket));\n+                auto start_it = m_outpoints.end() - in_flight_fetches_count;\n+                outpoints.assign(std::make_move_iterator(start_it), std::make_move_iterator(m_outpoints.end()));\n+                m_outpoints.erase(start_it, m_outpoints.end());\n+            }\n+\n+            pairs.clear();\n+            pairs.reserve(outpoints.size());\n+            for (COutPoint& outpoint : outpoints) {\n+                Coin coin;\n+                if (!m_db->GetCoin(outpoint, coin)) {\n+                    // Missing an input, just break. This block will fail validation, so no point in continuing.\n+                    break;\n+                }\n+                pairs.emplace_back(std::move(outpoint), std::move(coin));\n+            }\n+        } while (true);\n+    }\n+\n+    //! Add a batch of outpoints to the queue\n+    void Add(std::vector<COutPoint>&& outpoints) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (outpoints.empty()) {\n+            return;\n+        }\n+\n+        const auto size{outpoints.size()};\n+        {\n+            LOCK(m_mutex);\n+            m_in_flight_fetches_count += outpoints.size();\n+            if (m_outpoints.empty()) {\n+                m_outpoints = std::move(outpoints);\n+            } else {\n+                m_outpoints.insert(m_outpoints.end(), std::make_move_iterator(outpoints.begin()), std::make_move_iterator(outpoints.end()));\n+            }\n+        }\n+\n+        if (size == 1) {\n+            m_worker_cv.notify_one();\n+        } else {\n+            m_worker_cv.notify_all();\n+        }\n+    }\n+\n+\n+public:\n+    //! Create a new input fetcher\n+    explicit InputFetcher(size_t batch_size, size_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        m_worker_threads.reserve(worker_thread_count);\n+        for (size_t n = 0; n < worker_thread_count; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"inputfetch.%i\", n));\n+                Loop();\n+            });\n+        }\n+    }\n+\n+    // Since this class manages its own resources, which is a thread\n+    // pool `m_worker_threads`, copy and move operations are not appropriate.\n+    InputFetcher(const InputFetcher&) = delete;\n+    InputFetcher& operator=(const InputFetcher&) = delete;\n+    InputFetcher(InputFetcher&&) = delete;\n+    InputFetcher& operator=(InputFetcher&&) = delete;\n+\n+\n+    //! Fetch all block inputs from db, and insert into cache.\n+    void FetchInputs(CCoinsViewCache& cache, const CCoinsViewDB& db, const CBlock& block) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        m_db = &db;\n+\n+        std::vector<COutPoint> buffer{};\n+        buffer.reserve(m_batch_size);\n+        std::set<Txid> txids{};\n+        for (const auto& tx : block.vtx) {\n+            if (tx->IsCoinBase()) continue;\n+            for (const auto& in : tx->vin) {\n+                const auto& outpoint = in.prevout;\n+                // If an input references an outpoint from earlier in the\n+                // block, it won't be in the cache yet but it also won't be\n+                // in the db either.\n+                if (txids.contains(outpoint.hash)) {\n+                    continue;\n+                }\n+                if (cache.HaveCoinInCache(outpoint)) {\n+                    continue;\n+                }\n+\n+                buffer.emplace_back(outpoint);\n+                if (buffer.size() == m_batch_size) {\n+                    Add(std::move(buffer));",
      "path": "src/inputfetcher.h",
      "position": null,
      "original_position": 189,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812531761,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think there is any lock contention here if we are doing multithreaded reading?\r\n\r\nI also think what you're suggesting would add a lot more complexity to this PR, when this is \"good enough\".",
      "created_at": "2024-10-23T13:46:50Z",
      "updated_at": "2024-10-23T13:46:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812807883",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812807883"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812815888",
      "pull_request_review_id": 2388804635,
      "id": 1812815888,
      "node_id": "PRRC_kwDOABII585sDWAQ",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n+                // in_flight_fetches_count will only be truthy after first run.\n+                if (in_flight_fetches_count) {\n+                    if (m_pairs.empty()) {\n+                        m_pairs = std::move(pairs);\n+                    } else {\n+                        m_pairs.reserve(m_pairs.size() + pairs.size());\n+                        m_pairs.insert(m_pairs.end(), std::make_move_iterator(pairs.begin()),\n+                                       std::make_move_iterator(pairs.end()));\n+                    }\n+                    m_in_flight_fetches_count -= in_flight_fetches_count;\n+                    m_main_cv.notify_one();\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_outpoints.empty() && !m_request_stop) {\n+                    m_worker_cv.wait(lock);\n+                }\n+                if (m_request_stop) {\n+                    return;\n+                }\n+\n+                const auto even_bucket{m_in_flight_fetches_count / m_worker_threads.size()};\n+                in_flight_fetches_count = std::max(static_cast<size_t>(1),\n+                                                   std::min(std::min(m_outpoints.size(), m_batch_size), even_bucket));\n+                auto start_it = m_outpoints.end() - in_flight_fetches_count;\n+                outpoints.assign(std::make_move_iterator(start_it), std::make_move_iterator(m_outpoints.end()));\n+                m_outpoints.erase(start_it, m_outpoints.end());\n+            }\n+\n+            pairs.clear();\n+            pairs.reserve(outpoints.size());\n+            for (COutPoint& outpoint : outpoints) {\n+                Coin coin;\n+                if (!m_db->GetCoin(outpoint, coin)) {\n+                    // Missing an input, just break. This block will fail validation, so no point in continuing.\n+                    break;\n+                }\n+                pairs.emplace_back(std::move(outpoint), std::move(coin));\n+            }\n+        } while (true);\n+    }\n+\n+    //! Add a batch of outpoints to the queue\n+    void Add(std::vector<COutPoint>&& outpoints) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (outpoints.empty()) {\n+            return;\n+        }\n+\n+        const auto size{outpoints.size()};\n+        {\n+            LOCK(m_mutex);\n+            m_in_flight_fetches_count += outpoints.size();\n+            if (m_outpoints.empty()) {\n+                m_outpoints = std::move(outpoints);\n+            } else {\n+                m_outpoints.insert(m_outpoints.end(), std::make_move_iterator(outpoints.begin()), std::make_move_iterator(outpoints.end()));\n+            }\n+        }\n+\n+        if (size == 1) {\n+            m_worker_cv.notify_one();\n+        } else {\n+            m_worker_cv.notify_all();\n+        }\n+    }\n+\n+\n+public:\n+    //! Create a new input fetcher\n+    explicit InputFetcher(size_t batch_size, size_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        m_worker_threads.reserve(worker_thread_count);\n+        for (size_t n = 0; n < worker_thread_count; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"inputfetch.%i\", n));",
      "path": "src/inputfetcher.h",
      "position": 177,
      "original_position": 151,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812440117,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Unsure, copied from `CScriptCheck`. If the state of the art of thread naming has advanced since that was written, please let me know!",
      "created_at": "2024-10-23T13:49:23Z",
      "updated_at": "2024-10-23T13:49:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812815888",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812815888"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 177,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812826580",
      "pull_request_review_id": 2388824311,
      "id": 1812826580,
      "node_id": "PRRC_kwDOABII585sDYnU",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n+                // in_flight_fetches_count will only be truthy after first run.\n+                if (in_flight_fetches_count) {\n+                    if (m_pairs.empty()) {\n+                        m_pairs = std::move(pairs);\n+                    } else {\n+                        m_pairs.reserve(m_pairs.size() + pairs.size());\n+                        m_pairs.insert(m_pairs.end(), std::make_move_iterator(pairs.begin()),\n+                                       std::make_move_iterator(pairs.end()));\n+                    }\n+                    m_in_flight_fetches_count -= in_flight_fetches_count;\n+                    m_main_cv.notify_one();\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_outpoints.empty() && !m_request_stop) {\n+                    m_worker_cv.wait(lock);\n+                }\n+                if (m_request_stop) {\n+                    return;\n+                }\n+\n+                const auto even_bucket{m_in_flight_fetches_count / m_worker_threads.size()};\n+                in_flight_fetches_count = std::max(static_cast<size_t>(1),\n+                                                   std::min(std::min(m_outpoints.size(), m_batch_size), even_bucket));\n+                auto start_it = m_outpoints.end() - in_flight_fetches_count;\n+                outpoints.assign(std::make_move_iterator(start_it), std::make_move_iterator(m_outpoints.end()));\n+                m_outpoints.erase(start_it, m_outpoints.end());\n+            }\n+\n+            pairs.clear();\n+            pairs.reserve(outpoints.size());\n+            for (COutPoint& outpoint : outpoints) {\n+                Coin coin;\n+                if (!m_db->GetCoin(outpoint, coin)) {\n+                    // Missing an input, just break. This block will fail validation, so no point in continuing.\n+                    break;\n+                }\n+                pairs.emplace_back(std::move(outpoint), std::move(coin));\n+            }\n+        } while (true);\n+    }\n+\n+    //! Add a batch of outpoints to the queue\n+    void Add(std::vector<COutPoint>&& outpoints) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (outpoints.empty()) {\n+            return;\n+        }\n+\n+        const auto size{outpoints.size()};\n+        {\n+            LOCK(m_mutex);\n+            m_in_flight_fetches_count += outpoints.size();\n+            if (m_outpoints.empty()) {\n+                m_outpoints = std::move(outpoints);\n+            } else {\n+                m_outpoints.insert(m_outpoints.end(), std::make_move_iterator(outpoints.begin()), std::make_move_iterator(outpoints.end()));\n+            }\n+        }\n+\n+        if (size == 1) {\n+            m_worker_cv.notify_one();\n+        } else {\n+            m_worker_cv.notify_all();\n+        }\n+    }\n+\n+\n+public:\n+    //! Create a new input fetcher\n+    explicit InputFetcher(size_t batch_size, size_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        m_worker_threads.reserve(worker_thread_count);\n+        for (size_t n = 0; n < worker_thread_count; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"inputfetch.%i\", n));",
      "path": "src/inputfetcher.h",
      "position": 177,
      "original_position": 151,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812440117,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The C++ standard library does as far as I know have no way of renaming threads at all. `src/util/threadnames.{h,cpp}` is our wrapper around the various platform-dependent ways of doing so on supported systems.",
      "created_at": "2024-10-23T13:54:03Z",
      "updated_at": "2024-10-23T13:54:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812826580",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812826580"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 177,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812838378",
      "pull_request_review_id": 2388842458,
      "id": 1812838378,
      "node_id": "PRRC_kwDOABII585sDbfq",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)",
      "path": "src/inputfetcher.h",
      "position": 64,
      "original_position": 65,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812659221,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can you tell me why we need to prevent multithreaded access exactly? We could collect the values to different vectors, each one accessed only by a single thread and merge them into the cache at the end on a single thread, right?\r\n \r\n How would `mpsc` solve this better? Do you think we need work stealing to make it perfectly parallel? Wouldn't coroutines already achieve the same?",
      "created_at": "2024-10-23T13:58:56Z",
      "updated_at": "2024-10-23T13:58:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812838378",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812838378"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812842053",
      "pull_request_review_id": 2388848761,
      "id": 1812842053,
      "node_id": "PRRC_kwDOABII585sDcZF",
      "diff_hunk": "@@ -6243,6 +6248,7 @@ static ChainstateManager::Options&& Flatten(ChainstateManager::Options&& opts)\n \n ChainstateManager::ChainstateManager(const util::SignalInterrupt& interrupt, Options options, node::BlockManager::Options blockman_options)\n     : m_script_check_queue{/*batch_size=*/128, options.worker_threads_num},\n+      m_input_fetcher{/*batch_size=*/128, static_cast<size_t>(options.worker_threads_num)},",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812599960,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "4x may be too much to begin with, but 1.5-2x sounds plausible, I'll help with benchmarking this once my current batches finish.",
      "created_at": "2024-10-23T14:00:53Z",
      "updated_at": "2024-10-23T14:00:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812842053",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812842053"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812845859",
      "pull_request_review_id": 2388855957,
      "id": 1812845859,
      "node_id": "PRRC_kwDOABII585sDdUj",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n+                // in_flight_fetches_count will only be truthy after first run.\n+                if (in_flight_fetches_count) {\n+                    if (m_pairs.empty()) {\n+                        m_pairs = std::move(pairs);\n+                    } else {\n+                        m_pairs.reserve(m_pairs.size() + pairs.size());\n+                        m_pairs.insert(m_pairs.end(), std::make_move_iterator(pairs.begin()),\n+                                       std::make_move_iterator(pairs.end()));\n+                    }\n+                    m_in_flight_fetches_count -= in_flight_fetches_count;\n+                    m_main_cv.notify_one();\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_outpoints.empty() && !m_request_stop) {\n+                    m_worker_cv.wait(lock);\n+                }\n+                if (m_request_stop) {\n+                    return;\n+                }\n+\n+                const auto even_bucket{m_in_flight_fetches_count / m_worker_threads.size()};\n+                in_flight_fetches_count = std::max(static_cast<size_t>(1),\n+                                                   std::min(std::min(m_outpoints.size(), m_batch_size), even_bucket));\n+                auto start_it = m_outpoints.end() - in_flight_fetches_count;\n+                outpoints.assign(std::make_move_iterator(start_it), std::make_move_iterator(m_outpoints.end()));\n+                m_outpoints.erase(start_it, m_outpoints.end());\n+            }\n+\n+            pairs.clear();\n+            pairs.reserve(outpoints.size());\n+            for (COutPoint& outpoint : outpoints) {\n+                Coin coin;\n+                if (!m_db->GetCoin(outpoint, coin)) {\n+                    // Missing an input, just break. This block will fail validation, so no point in continuing.\n+                    break;\n+                }\n+                pairs.emplace_back(std::move(outpoint), std::move(coin));\n+            }\n+        } while (true);\n+    }\n+\n+    //! Add a batch of outpoints to the queue\n+    void Add(std::vector<COutPoint>&& outpoints) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (outpoints.empty()) {\n+            return;\n+        }\n+\n+        const auto size{outpoints.size()};\n+        {\n+            LOCK(m_mutex);\n+            m_in_flight_fetches_count += outpoints.size();\n+            if (m_outpoints.empty()) {\n+                m_outpoints = std::move(outpoints);\n+            } else {\n+                m_outpoints.insert(m_outpoints.end(), std::make_move_iterator(outpoints.begin()), std::make_move_iterator(outpoints.end()));\n+            }\n+        }\n+\n+        if (size == 1) {\n+            m_worker_cv.notify_one();\n+        } else {\n+            m_worker_cv.notify_all();\n+        }\n+    }\n+\n+\n+public:\n+    //! Create a new input fetcher\n+    explicit InputFetcher(size_t batch_size, size_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        m_worker_threads.reserve(worker_thread_count);\n+        for (size_t n = 0; n < worker_thread_count; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"inputfetch.%i\", n));\n+                Loop();\n+            });\n+        }\n+    }\n+\n+    // Since this class manages its own resources, which is a thread\n+    // pool `m_worker_threads`, copy and move operations are not appropriate.\n+    InputFetcher(const InputFetcher&) = delete;\n+    InputFetcher& operator=(const InputFetcher&) = delete;\n+    InputFetcher(InputFetcher&&) = delete;\n+    InputFetcher& operator=(InputFetcher&&) = delete;\n+\n+\n+    //! Fetch all block inputs from db, and insert into cache.\n+    void FetchInputs(CCoinsViewCache& cache, const CCoinsViewDB& db, const CBlock& block) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        m_db = &db;\n+\n+        std::vector<COutPoint> buffer{};\n+        buffer.reserve(m_batch_size);\n+        std::set<Txid> txids{};\n+        for (const auto& tx : block.vtx) {\n+            if (tx->IsCoinBase()) continue;\n+            for (const auto& in : tx->vin) {\n+                const auto& outpoint = in.prevout;\n+                // If an input references an outpoint from earlier in the\n+                // block, it won't be in the cache yet but it also won't be\n+                // in the db either.\n+                if (txids.contains(outpoint.hash)) {\n+                    continue;\n+                }\n+                if (cache.HaveCoinInCache(outpoint)) {\n+                    continue;\n+                }\n+\n+                buffer.emplace_back(outpoint);\n+                if (buffer.size() == m_batch_size) {\n+                    Add(std::move(buffer));",
      "path": "src/inputfetcher.h",
      "position": null,
      "original_position": 189,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812531761,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This might be as simple as sorting by tx before we create the buckets.",
      "created_at": "2024-10-23T14:02:34Z",
      "updated_at": "2024-10-23T14:02:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812845859",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812845859"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812849403",
      "pull_request_review_id": 2388859978,
      "id": 1812849403,
      "node_id": "PRRC_kwDOABII585sDeL7",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n+                // in_flight_fetches_count will only be truthy after first run.\n+                if (in_flight_fetches_count) {\n+                    if (m_pairs.empty()) {\n+                        m_pairs = std::move(pairs);\n+                    } else {\n+                        m_pairs.reserve(m_pairs.size() + pairs.size());\n+                        m_pairs.insert(m_pairs.end(), std::make_move_iterator(pairs.begin()),\n+                                       std::make_move_iterator(pairs.end()));\n+                    }\n+                    m_in_flight_fetches_count -= in_flight_fetches_count;\n+                    m_main_cv.notify_one();\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_outpoints.empty() && !m_request_stop) {\n+                    m_worker_cv.wait(lock);\n+                }\n+                if (m_request_stop) {\n+                    return;\n+                }\n+\n+                const auto even_bucket{m_in_flight_fetches_count / m_worker_threads.size()};\n+                in_flight_fetches_count = std::max(static_cast<size_t>(1),\n+                                                   std::min(std::min(m_outpoints.size(), m_batch_size), even_bucket));\n+                auto start_it = m_outpoints.end() - in_flight_fetches_count;\n+                outpoints.assign(std::make_move_iterator(start_it), std::make_move_iterator(m_outpoints.end()));\n+                m_outpoints.erase(start_it, m_outpoints.end());\n+            }\n+\n+            pairs.clear();\n+            pairs.reserve(outpoints.size());\n+            for (COutPoint& outpoint : outpoints) {\n+                Coin coin;\n+                if (!m_db->GetCoin(outpoint, coin)) {\n+                    // Missing an input, just break. This block will fail validation, so no point in continuing.\n+                    break;\n+                }\n+                pairs.emplace_back(std::move(outpoint), std::move(coin));\n+            }\n+        } while (true);\n+    }\n+\n+    //! Add a batch of outpoints to the queue\n+    void Add(std::vector<COutPoint>&& outpoints) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (outpoints.empty()) {\n+            return;\n+        }\n+\n+        const auto size{outpoints.size()};\n+        {\n+            LOCK(m_mutex);\n+            m_in_flight_fetches_count += outpoints.size();\n+            if (m_outpoints.empty()) {\n+                m_outpoints = std::move(outpoints);\n+            } else {\n+                m_outpoints.insert(m_outpoints.end(), std::make_move_iterator(outpoints.begin()), std::make_move_iterator(outpoints.end()));\n+            }\n+        }\n+\n+        if (size == 1) {\n+            m_worker_cv.notify_one();\n+        } else {\n+            m_worker_cv.notify_all();\n+        }\n+    }\n+\n+\n+public:\n+    //! Create a new input fetcher\n+    explicit InputFetcher(size_t batch_size, size_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        m_worker_threads.reserve(worker_thread_count);\n+        for (size_t n = 0; n < worker_thread_count; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"inputfetch.%i\", n));",
      "path": "src/inputfetcher.h",
      "position": 177,
      "original_position": 151,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812440117,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thank you, please resolve the comment.",
      "created_at": "2024-10-23T14:03:52Z",
      "updated_at": "2024-10-23T14:03:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812849403",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812849403"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 177,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812852143",
      "pull_request_review_id": 2388864249,
      "id": 1812852143,
      "node_id": "PRRC_kwDOABII585sDe2v",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);",
      "path": "src/inputfetcher.h",
      "position": 73,
      "original_position": 73,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812534028,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As mentioned before, why do we need shared outpoints here?",
      "created_at": "2024-10-23T14:04:56Z",
      "updated_at": "2024-10-23T14:04:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812852143",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812852143"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 73,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812858116",
      "pull_request_review_id": 2388874771,
      "id": 1812858116,
      "node_id": "PRRC_kwDOABII585sDgUE",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)",
      "path": "src/inputfetcher.h",
      "position": 64,
      "original_position": 65,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812659221,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I haven't yet experimented with them, but as far as I understand it, coroutines are just programming paradigm, not magic; they don't do anything of their own, besides making things that were already possible easier to write. In particular, you still need a thread pool or some mechanism for scheduling how to run them,",
      "created_at": "2024-10-23T14:07:08Z",
      "updated_at": "2024-10-23T14:07:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812858116",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812858116"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812862679",
      "pull_request_review_id": 2388882032,
      "id": 1812862679,
      "node_id": "PRRC_kwDOABII585sDhbX",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)",
      "path": "src/inputfetcher.h",
      "position": 64,
      "original_position": 65,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812659221,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> We could collect the values to different vectors, each one accessed only by a single thread and merge them into the cache at the end on a single thread\r\n\r\nIf the vectors are thread local, then how can the main thread access them at the end to write them? We also want to be writing throughout while the workers are fetching, not just at the end.\r\n\r\n> How would mpsc solve this better?\r\n\r\nInstead of each worker thread having a local queue of results, which they then append to the global results queue, they could just push each result to the channel individually. The main thread could just pull results off the channel as they arrive, instead of waiting to be awoken by a worker thread that appended all its results to the global queue.\r\n\r\n> work stealing\r\n\r\nThat is a concept for async rust, or `std::async::mpsc`. We can do all this without introducing an async runtime. But, this is getting off topic.",
      "created_at": "2024-10-23T14:09:31Z",
      "updated_at": "2024-10-23T14:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812862679",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812862679"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812869347",
      "pull_request_review_id": 2388892235,
      "id": 1812869347,
      "node_id": "PRRC_kwDOABII585sDjDj",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n+                // in_flight_fetches_count will only be truthy after first run.\n+                if (in_flight_fetches_count) {\n+                    if (m_pairs.empty()) {\n+                        m_pairs = std::move(pairs);\n+                    } else {\n+                        m_pairs.reserve(m_pairs.size() + pairs.size());\n+                        m_pairs.insert(m_pairs.end(), std::make_move_iterator(pairs.begin()),\n+                                       std::make_move_iterator(pairs.end()));\n+                    }\n+                    m_in_flight_fetches_count -= in_flight_fetches_count;\n+                    m_main_cv.notify_one();\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_outpoints.empty() && !m_request_stop) {\n+                    m_worker_cv.wait(lock);\n+                }\n+                if (m_request_stop) {\n+                    return;\n+                }\n+\n+                const auto even_bucket{m_in_flight_fetches_count / m_worker_threads.size()};\n+                in_flight_fetches_count = std::max(static_cast<size_t>(1),\n+                                                   std::min(std::min(m_outpoints.size(), m_batch_size), even_bucket));\n+                auto start_it = m_outpoints.end() - in_flight_fetches_count;\n+                outpoints.assign(std::make_move_iterator(start_it), std::make_move_iterator(m_outpoints.end()));\n+                m_outpoints.erase(start_it, m_outpoints.end());\n+            }\n+\n+            pairs.clear();\n+            pairs.reserve(outpoints.size());\n+            for (COutPoint& outpoint : outpoints) {\n+                Coin coin;\n+                if (!m_db->GetCoin(outpoint, coin)) {\n+                    // Missing an input, just break. This block will fail validation, so no point in continuing.\n+                    break;\n+                }\n+                pairs.emplace_back(std::move(outpoint), std::move(coin));\n+            }\n+        } while (true);\n+    }\n+\n+    //! Add a batch of outpoints to the queue\n+    void Add(std::vector<COutPoint>&& outpoints) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (outpoints.empty()) {\n+            return;\n+        }\n+\n+        const auto size{outpoints.size()};\n+        {\n+            LOCK(m_mutex);\n+            m_in_flight_fetches_count += outpoints.size();\n+            if (m_outpoints.empty()) {\n+                m_outpoints = std::move(outpoints);\n+            } else {\n+                m_outpoints.insert(m_outpoints.end(), std::make_move_iterator(outpoints.begin()), std::make_move_iterator(outpoints.end()));\n+            }\n+        }\n+\n+        if (size == 1) {\n+            m_worker_cv.notify_one();\n+        } else {\n+            m_worker_cv.notify_all();\n+        }\n+    }\n+\n+\n+public:\n+    //! Create a new input fetcher\n+    explicit InputFetcher(size_t batch_size, size_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        m_worker_threads.reserve(worker_thread_count);\n+        for (size_t n = 0; n < worker_thread_count; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"inputfetch.%i\", n));\n+                Loop();\n+            });\n+        }\n+    }\n+\n+    // Since this class manages its own resources, which is a thread\n+    // pool `m_worker_threads`, copy and move operations are not appropriate.\n+    InputFetcher(const InputFetcher&) = delete;\n+    InputFetcher& operator=(const InputFetcher&) = delete;\n+    InputFetcher(InputFetcher&&) = delete;\n+    InputFetcher& operator=(InputFetcher&&) = delete;\n+\n+\n+    //! Fetch all block inputs from db, and insert into cache.\n+    void FetchInputs(CCoinsViewCache& cache, const CCoinsViewDB& db, const CBlock& block) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        m_db = &db;\n+\n+        std::vector<COutPoint> buffer{};\n+        buffer.reserve(m_batch_size);\n+        std::set<Txid> txids{};\n+        for (const auto& tx : block.vtx) {\n+            if (tx->IsCoinBase()) continue;\n+            for (const auto& in : tx->vin) {\n+                const auto& outpoint = in.prevout;\n+                // If an input references an outpoint from earlier in the\n+                // block, it won't be in the cache yet but it also won't be\n+                // in the db either.\n+                if (txids.contains(outpoint.hash)) {\n+                    continue;\n+                }\n+                if (cache.HaveCoinInCache(outpoint)) {\n+                    continue;\n+                }\n+\n+                buffer.emplace_back(outpoint);\n+                if (buffer.size() == m_batch_size) {\n+                    Add(std::move(buffer));",
      "path": "src/inputfetcher.h",
      "position": null,
      "original_position": 189,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812531761,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If a benchmark shows that it is better, then great!",
      "created_at": "2024-10-23T14:12:37Z",
      "updated_at": "2024-10-23T14:17:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812869347",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812869347"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812874933",
      "pull_request_review_id": 2388902089,
      "id": 1812874933,
      "node_id": "PRRC_kwDOABII585sDka1",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);",
      "path": "src/inputfetcher.h",
      "position": 73,
      "original_position": 73,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812534028,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The main thread adds all outpoints to a global vector, which all workers will fetch their work from.",
      "created_at": "2024-10-23T14:15:35Z",
      "updated_at": "2024-10-23T14:17:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812874933",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812874933"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 73,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1813017536",
      "pull_request_review_id": 2389159040,
      "id": 1813017536,
      "node_id": "PRRC_kwDOABII585sEHPA",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)",
      "path": "src/inputfetcher.h",
      "position": 64,
      "original_position": 65,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812659221,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> coroutines are just programming paradigm, not magic\r\n\r\nThat's also what I was counting on! :D\r\n\r\nIn RocksDB they have [high and low priority work](https://github.com/facebook/rocksdb/wiki/RocksDB-Tuning-Guide#parallelism-options) (I assume that's just added to the front or the back of a background work deque) – this could align well with @furszy's suggestion for mixing different kinds of background work units.\r\n\r\nI haven't used the C++ variant of coroutines either, but my thinking was that since they can theoretically yield execution when waiting for IO (and resume later), this would allow threads to focus on other tasks in the meantime. Combined with an appropriate scheduling mechanism (such as a thread pool), we could maximize both CPU and IO usage, if I'm not mistaken.\r\nInstead of each thread handling just one task, it could suspend a coroutine while waiting on IO (e.g., a database fetch) and resume it later, effectively maximizing CPU and IO work without needing to know the exact details of the work.\r\n\r\n> If the vectors are thread local\r\n\r\nThe vector would still be global, but each thread would only access a single bucket (i.e. global vector of vectors, with each thread from the pool writing only to `vector[thread_id]`, which contains a vector of fetched coins).\r\nWhen all the work is finished, we'd iterate over the global vector and merge the results into the cache on a single thread.\r\nAs mentioned, sorting the outpoints before fetching could help improve data locality and reduce lock contention, and the coroutines above would help with work stealing, ensuring that all threads finish roughly at the same time.\r\n\r\nIs there anything prohibiting us from doing something like this to minimize synchronization and lock contention during the fetch phase? I understand some synchronization would still be needed during the merge, but this could help reduce global locks and unnecessary synchronization throughout the process.\r\n",
      "created_at": "2024-10-23T15:15:39Z",
      "updated_at": "2024-10-23T15:18:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1813017536",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1813017536"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1813041419",
      "pull_request_review_id": 2389202333,
      "id": 1813041419,
      "node_id": "PRRC_kwDOABII585sENEL",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)",
      "path": "src/inputfetcher.h",
      "position": 64,
      "original_position": 65,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812659221,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I haven't used the C++ variant of coroutines either, but my thinking was that since they can theoretically yield execution when waiting for IO (and resume later), this would allow threads to focus on other tasks in the meantime.\r\n\r\nThat needs async I/O, and is unrelated to coroutines, as far as I understand it. Coroutines just help with keeping track of what to do when the reads come back inside rocksdb.\r\n\r\nAs long as LevelDB (or whatever database engine we use) internally does not use async I/O, there will be one (waiting) thread per parallel outstanding read request from the database.",
      "created_at": "2024-10-23T15:28:19Z",
      "updated_at": "2024-10-23T15:28:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1813041419",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1813041419"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1832842632",
      "pull_request_review_id": 2421253359,
      "id": 1832842632,
      "node_id": "PRRC_kwDOABII585tPvWI",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n+                // in_flight_fetches_count will only be truthy after first run.\n+                if (in_flight_fetches_count) {\n+                    if (m_pairs.empty()) {\n+                        m_pairs = std::move(pairs);\n+                    } else {\n+                        m_pairs.reserve(m_pairs.size() + pairs.size());\n+                        m_pairs.insert(m_pairs.end(), std::make_move_iterator(pairs.begin()),\n+                                       std::make_move_iterator(pairs.end()));\n+                    }\n+                    m_in_flight_fetches_count -= in_flight_fetches_count;\n+                    m_main_cv.notify_one();\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_outpoints.empty() && !m_request_stop) {\n+                    m_worker_cv.wait(lock);\n+                }\n+                if (m_request_stop) {\n+                    return;\n+                }\n+\n+                const auto even_bucket{m_in_flight_fetches_count / m_worker_threads.size()};\n+                in_flight_fetches_count = std::max(static_cast<size_t>(1),\n+                                                   std::min(std::min(m_outpoints.size(), m_batch_size), even_bucket));\n+                auto start_it = m_outpoints.end() - in_flight_fetches_count;\n+                outpoints.assign(std::make_move_iterator(start_it), std::make_move_iterator(m_outpoints.end()));\n+                m_outpoints.erase(start_it, m_outpoints.end());\n+            }\n+\n+            pairs.clear();\n+            pairs.reserve(outpoints.size());\n+            for (COutPoint& outpoint : outpoints) {\n+                Coin coin;\n+                if (!m_db->GetCoin(outpoint, coin)) {\n+                    // Missing an input, just break. This block will fail validation, so no point in continuing.\n+                    break;\n+                }\n+                pairs.emplace_back(std::move(outpoint), std::move(coin));\n+            }\n+        } while (true);\n+    }\n+\n+    //! Add a batch of outpoints to the queue\n+    void Add(std::vector<COutPoint>&& outpoints) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (outpoints.empty()) {\n+            return;\n+        }\n+\n+        const auto size{outpoints.size()};\n+        {\n+            LOCK(m_mutex);\n+            m_in_flight_fetches_count += outpoints.size();\n+            if (m_outpoints.empty()) {\n+                m_outpoints = std::move(outpoints);\n+            } else {\n+                m_outpoints.insert(m_outpoints.end(), std::make_move_iterator(outpoints.begin()), std::make_move_iterator(outpoints.end()));\n+            }\n+        }\n+\n+        if (size == 1) {\n+            m_worker_cv.notify_one();\n+        } else {\n+            m_worker_cv.notify_all();\n+        }\n+    }\n+\n+\n+public:\n+    //! Create a new input fetcher\n+    explicit InputFetcher(size_t batch_size, size_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        m_worker_threads.reserve(worker_thread_count);\n+        for (size_t n = 0; n < worker_thread_count; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"inputfetch.%i\", n));\n+                Loop();\n+            });\n+        }\n+    }\n+\n+    // Since this class manages its own resources, which is a thread\n+    // pool `m_worker_threads`, copy and move operations are not appropriate.\n+    InputFetcher(const InputFetcher&) = delete;\n+    InputFetcher& operator=(const InputFetcher&) = delete;\n+    InputFetcher(InputFetcher&&) = delete;\n+    InputFetcher& operator=(InputFetcher&&) = delete;\n+\n+\n+    //! Fetch all block inputs from db, and insert into cache.\n+    void FetchInputs(CCoinsViewCache& cache, const CCoinsViewDB& db, const CBlock& block) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        m_db = &db;\n+\n+        std::vector<COutPoint> buffer{};\n+        buffer.reserve(m_batch_size);\n+        std::set<Txid> txids{};\n+        for (const auto& tx : block.vtx) {\n+            if (tx->IsCoinBase()) continue;\n+            for (const auto& in : tx->vin) {\n+                const auto& outpoint = in.prevout;\n+                // If an input references an outpoint from earlier in the\n+                // block, it won't be in the cache yet but it also won't be\n+                // in the db either.\n+                if (txids.contains(outpoint.hash)) {\n+                    continue;\n+                }\n+                if (cache.HaveCoinInCache(outpoint)) {\n+                    continue;\n+                }\n+\n+                buffer.emplace_back(outpoint);\n+                if (buffer.size() == m_batch_size) {",
      "path": "src/inputfetcher.h",
      "position": null,
      "original_position": 188,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812604307,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I changed the batch size to be number of workers.",
      "created_at": "2024-11-07T15:05:53Z",
      "updated_at": "2024-11-07T15:05:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1832842632",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1832842632"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1832843082",
      "pull_request_review_id": 2421254123,
      "id": 1832843082,
      "node_id": "PRRC_kwDOABII585tPvdK",
      "diff_hunk": "@@ -6243,6 +6248,7 @@ static ChainstateManager::Options&& Flatten(ChainstateManager::Options&& opts)\n \n ChainstateManager::ChainstateManager(const util::SignalInterrupt& interrupt, Options options, node::BlockManager::Options blockman_options)\n     : m_script_check_queue{/*batch_size=*/128, options.worker_threads_num},\n+      m_input_fetcher{/*batch_size=*/128, static_cast<size_t>(options.worker_threads_num)},",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812599960,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added a benchmark to experiment with these.",
      "created_at": "2024-11-07T15:06:09Z",
      "updated_at": "2024-11-07T15:06:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1832843082",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1832843082"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1832843202",
      "pull_request_review_id": 2421254376,
      "id": 1832843202,
      "node_id": "PRRC_kwDOABII585tPvfC",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n+                // in_flight_fetches_count will only be truthy after first run.\n+                if (in_flight_fetches_count) {\n+                    if (m_pairs.empty()) {\n+                        m_pairs = std::move(pairs);\n+                    } else {\n+                        m_pairs.reserve(m_pairs.size() + pairs.size());\n+                        m_pairs.insert(m_pairs.end(), std::make_move_iterator(pairs.begin()),\n+                                       std::make_move_iterator(pairs.end()));\n+                    }\n+                    m_in_flight_fetches_count -= in_flight_fetches_count;\n+                    m_main_cv.notify_one();\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_outpoints.empty() && !m_request_stop) {\n+                    m_worker_cv.wait(lock);\n+                }\n+                if (m_request_stop) {\n+                    return;\n+                }\n+\n+                const auto even_bucket{m_in_flight_fetches_count / m_worker_threads.size()};\n+                in_flight_fetches_count = std::max(static_cast<size_t>(1),\n+                                                   std::min(std::min(m_outpoints.size(), m_batch_size), even_bucket));\n+                auto start_it = m_outpoints.end() - in_flight_fetches_count;\n+                outpoints.assign(std::make_move_iterator(start_it), std::make_move_iterator(m_outpoints.end()));\n+                m_outpoints.erase(start_it, m_outpoints.end());\n+            }\n+\n+            pairs.clear();\n+            pairs.reserve(outpoints.size());\n+            for (COutPoint& outpoint : outpoints) {\n+                Coin coin;\n+                if (!m_db->GetCoin(outpoint, coin)) {\n+                    // Missing an input, just break. This block will fail validation, so no point in continuing.\n+                    break;\n+                }\n+                pairs.emplace_back(std::move(outpoint), std::move(coin));\n+            }\n+        } while (true);\n+    }\n+\n+    //! Add a batch of outpoints to the queue\n+    void Add(std::vector<COutPoint>&& outpoints) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (outpoints.empty()) {\n+            return;\n+        }\n+\n+        const auto size{outpoints.size()};\n+        {\n+            LOCK(m_mutex);\n+            m_in_flight_fetches_count += outpoints.size();\n+            if (m_outpoints.empty()) {\n+                m_outpoints = std::move(outpoints);\n+            } else {\n+                m_outpoints.insert(m_outpoints.end(), std::make_move_iterator(outpoints.begin()), std::make_move_iterator(outpoints.end()));\n+            }\n+        }\n+\n+        if (size == 1) {\n+            m_worker_cv.notify_one();\n+        } else {\n+            m_worker_cv.notify_all();\n+        }\n+    }\n+\n+\n+public:\n+    //! Create a new input fetcher\n+    explicit InputFetcher(size_t batch_size, size_t worker_thread_count) noexcept",
      "path": "src/inputfetcher.h",
      "position": null,
      "original_position": 145,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812560601,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2024-11-07T15:06:14Z",
      "updated_at": "2024-11-07T15:06:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1832843202",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1832843202"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1832844237",
      "pull_request_review_id": 2421256210,
      "id": 1832844237,
      "node_id": "PRRC_kwDOABII585tPvvN",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher",
      "path": "src/inputfetcher.h",
      "position": 33,
      "original_position": 29,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812548418,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added tests and benchmark.\r\nThe test has random parameters, one of which would be end up having a single worker thread.",
      "created_at": "2024-11-07T15:06:54Z",
      "updated_at": "2024-11-07T15:06:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1832844237",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1832844237"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 33,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1845238389",
      "pull_request_review_id": 2440804044,
      "id": 1845238389,
      "node_id": "PRRC_kwDOABII585t_Bp1",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher",
      "path": "src/inputfetcher.h",
      "position": 33,
      "original_position": 29,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812548418,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Also added fuzz harness",
      "created_at": "2024-11-16T20:59:12Z",
      "updated_at": "2024-11-16T20:59:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1845238389",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1845238389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 33,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1846665944",
      "pull_request_review_id": 2442755733,
      "id": 1846665944,
      "node_id": "PRRC_kwDOABII585uEeLY",
      "diff_hunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <inputfetcher.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <util/transaction_identifier.h>\n+\n+#include <cstdint>\n+\n+FUZZ_TARGET(inputfetcher)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const auto batch_size{\n+        fuzzed_data_provider.ConsumeIntegralInRange<int32_t>(0, 1024)};\n+    const auto worker_threads{\n+        fuzzed_data_provider.ConsumeIntegralInRange<int32_t>(0, 15)};\n+    InputFetcher fetcher{batch_size, worker_threads};\n+\n+    CCoinsView dummy;\n+    CCoinsViewCache db(&dummy);\n+    CCoinsViewCache cache(&db);\n+\n+    CBlock block;\n+    Txid prevhash{Txid::FromUint256(ConsumeUInt256(fuzzed_data_provider))};\n+\n+    const auto txs{fuzzed_data_provider.ConsumeIntegralInRange<uint32_t>(1,\n+        std::numeric_limits<uint32_t>::max())};\n+    for (uint32_t i{0}; i < txs; ++i) {",
      "path": "src/test/fuzz/inputfetcher.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "2bd5f0f03b19d1b71953ac51a5809014c232a497",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This will create very long running inputs (e.g. txs = std::numeric_limits<uint32_t>::max()).\r\n\r\n```suggestion\r\n    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), N) {\r\n```\r\n\r\nor\r\n\r\n```suggestion\r\n    LIMITED_WHILE(fuzzed_data_provider.remaining_bytes(), N) {\r\n```",
      "created_at": "2024-11-18T14:16:51Z",
      "updated_at": "2024-11-18T14:22:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1846665944",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1846665944"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": 30,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1846667260",
      "pull_request_review_id": 2442755733,
      "id": 1846667260,
      "node_id": "PRRC_kwDOABII585uEef8",
      "diff_hunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <inputfetcher.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <util/transaction_identifier.h>\n+\n+#include <cstdint>\n+\n+FUZZ_TARGET(inputfetcher)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const auto batch_size{\n+        fuzzed_data_provider.ConsumeIntegralInRange<int32_t>(0, 1024)};\n+    const auto worker_threads{\n+        fuzzed_data_provider.ConsumeIntegralInRange<int32_t>(0, 15)};\n+    InputFetcher fetcher{batch_size, worker_threads};\n+\n+    CCoinsView dummy;\n+    CCoinsViewCache db(&dummy);\n+    CCoinsViewCache cache(&db);\n+\n+    CBlock block;\n+    Txid prevhash{Txid::FromUint256(ConsumeUInt256(fuzzed_data_provider))};\n+\n+    const auto txs{fuzzed_data_provider.ConsumeIntegralInRange<uint32_t>(1,\n+        std::numeric_limits<uint32_t>::max())};\n+    for (uint32_t i{0}; i < txs; ++i) {\n+        CMutableTransaction tx;\n+\n+        const auto inputs{fuzzed_data_provider.ConsumeIntegral<uint32_t>()};\n+        for (uint32_t j{0}; j < inputs; ++j) {",
      "path": "src/test/fuzz/inputfetcher.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "2bd5f0f03b19d1b71953ac51a5809014c232a497",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Same as above, this will create long running inputs and maybe even run out of memory?",
      "created_at": "2024-11-18T14:17:42Z",
      "updated_at": "2024-11-18T14:22:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1846667260",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1846667260"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": 35,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1846954861",
      "pull_request_review_id": 2443219199,
      "id": 1846954861,
      "node_id": "PRRC_kwDOABII585uFktt",
      "diff_hunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <inputfetcher.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <util/transaction_identifier.h>\n+\n+#include <cstdint>\n+\n+FUZZ_TARGET(inputfetcher)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const auto batch_size{\n+        fuzzed_data_provider.ConsumeIntegralInRange<int32_t>(0, 1024)};\n+    const auto worker_threads{\n+        fuzzed_data_provider.ConsumeIntegralInRange<int32_t>(0, 15)};\n+    InputFetcher fetcher{batch_size, worker_threads};\n+\n+    CCoinsView dummy;\n+    CCoinsViewCache db(&dummy);\n+    CCoinsViewCache cache(&db);\n+\n+    CBlock block;\n+    Txid prevhash{Txid::FromUint256(ConsumeUInt256(fuzzed_data_provider))};\n+\n+    const auto txs{fuzzed_data_provider.ConsumeIntegralInRange<uint32_t>(1,\n+        std::numeric_limits<uint32_t>::max())};\n+    for (uint32_t i{0}; i < txs; ++i) {",
      "path": "src/test/fuzz/inputfetcher.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "2bd5f0f03b19d1b71953ac51a5809014c232a497",
      "in_reply_to_id": 1846665944,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, done!",
      "created_at": "2024-11-18T17:04:07Z",
      "updated_at": "2024-11-18T17:04:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1846954861",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1846954861"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": 30,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1848485522",
      "pull_request_review_id": 2445676953,
      "id": 1848485522,
      "node_id": "PRRC_kwDOABII585uLaaS",
      "diff_hunk": "@@ -416,13 +416,14 @@ class CCoinsViewCache : public CCoinsViewBacked\n     void AddCoin(const COutPoint& outpoint, Coin&& coin, bool possible_overwrite);\n \n     /**\n-     * Emplace a coin into cacheCoins without performing any checks, marking\n-     * the emplaced coin as dirty.\n+     * Emplace a coin into cacheCoins without performing any checks, optionally\n+     * marking the emplaced coin as dirty.",
      "path": "src/coins.h",
      "position": 7,
      "original_position": 7,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "3a4af5507146b015cc754195c89c70e1ad8404cd",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Should this rather say \"optionally marking the emplaced coin as not dirty\", since the default is always dirty?",
      "created_at": "2024-11-19T14:38:21Z",
      "updated_at": "2024-11-20T18:48:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1848485522",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1848485522"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 420,
      "original_line": 420,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850828070",
      "pull_request_review_id": 2449452592,
      "id": 1850828070,
      "node_id": "PRRC_kwDOABII585uUWUm",
      "diff_hunk": "@@ -416,13 +416,14 @@ class CCoinsViewCache : public CCoinsViewBacked\n     void AddCoin(const COutPoint& outpoint, Coin&& coin, bool possible_overwrite);\n \n     /**\n-     * Emplace a coin into cacheCoins without performing any checks, marking\n-     * the emplaced coin as dirty.\n+     * Emplace a coin into cacheCoins without performing any checks, optionally\n+     * marking the emplaced coin as dirty.",
      "path": "src/coins.h",
      "position": 7,
      "original_position": 7,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "original_commit_id": "3a4af5507146b015cc754195c89c70e1ad8404cd",
      "in_reply_to_id": 1848485522,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm not sure that's the best though, since we do not mark a coin as not dirty. That is the default state.\r\n\r\nWhat about\r\n\"marking the coin as dirty unless `set_dirty` is set to false\"?",
      "created_at": "2024-11-20T18:53:20Z",
      "updated_at": "2024-11-20T18:53:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1850828070",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850828070"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 420,
      "original_line": 420,
      "side": "RIGHT"
    }
  ]
}