{
  "type": "issue",
  "issue": {
    "id": 2682989515,
    "node_id": "I_kwDOABII586f6yvL",
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31345",
    "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
    "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31345/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31345/comments",
    "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31345/events",
    "html_url": "https://github.com/bitcoin/bitcoin/issues/31345",
    "number": 31345,
    "state": "open",
    "state_reason": null,
    "title": "Add `sat_to_btc()` and conversely `btc_to_sat()` util functions in functional tests",
    "body": "### Motivation\r\n\r\nIn [functional tests](https://github.com/bitcoin/bitcoin/tree/master/test/functional), there are numerous instances of conversion code with patterns such as `/ COIN` and `* COIN` that are converting between units _satoshis_ to _BTC_. \r\n\r\nFollowing details are as of the latest commit on master 2638fdb4f934be96b7c798dbac38ea5ab8a6374a.\r\n\r\n### Patterns stats\r\n```terminal\r\n# satoshis to BTC conversion\r\n➜  bitcoin git:(2638fdb4f9) ✗ git grep -n \"/ COIN\" -- '*.py' | wc -l\r\n      22\r\n\r\n# BTC to satoshis conversion\r\n➜  bitcoin git:(2638fdb4f9) ✗ git grep -n \"* COIN\" -- '*.py' | wc -l\r\n     127\r\n```\r\n\r\n### Satoshis to BTC conversion instances\r\n<details>\r\n<summary>git grep -n \"/ COIN\" -- '*.py'</summary>\r\n\r\n```terminal\r\ntest/functional/feature_fee_estimation.py:128:        fee_rate=Decimal(feerate * 1000) / COIN,\r\ntest/functional/feature_fee_estimation.py:301:        high_feerate_kvb = Decimal(high_feerate) / COIN * 10 ** 3\r\ntest/functional/feature_rbf.py:211:            fee=(Decimal(fee) / COIN) * n,\r\ntest/functional/feature_rbf.py:220:            fee=(Decimal(fee) / COIN) * n + Decimal(\"0.1\"),\r\ntest/functional/feature_rbf.py:240:                fee=2 * (Decimal(fee) / COIN) * n,\r\ntest/functional/feature_rbf.py:356:                fee=Decimal(fee) / COIN,\r\ntest/functional/interface_usdt_mempool.py:172:        tx = self.wallet.send_self_transfer(from_node=node, fee=fee / COIN)\r\ntest/functional/interface_usdt_mempool.py:209:        tx = self.wallet.send_self_transfer(from_node=node, fee=fee / COIN)\r\ntest/functional/interface_usdt_mempool.py:258:            from_node=node, utxo_to_spend=utxo, fee=original_fee / COIN\r\ntest/functional/interface_usdt_mempool.py:265:            from_node=node, utxo_to_spend=utxo, fee=replacement_fee / COIN\r\ntest/functional/mempool_ephemeral_dust.py:39:        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\r\ntest/functional/mempool_ephemeral_dust.py:48:        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\r\ntest/functional/mempool_package_rbf.py:166:        incremental_sats_required = Decimal(package_3_size) / COIN\r\ntest/functional/mining_prioritisetransaction.py:97:        fee_delta_b = Decimal(9999) / COIN\r\ntest/functional/mining_prioritisetransaction.py:98:        fee_delta_c_1 = Decimal(-1234) / COIN\r\ntest/functional/mining_prioritisetransaction.py:99:        fee_delta_c_2 = Decimal(8888) / COIN\r\ntest/functional/p2p_ibd_txrelay.py:31:MAX_FEE_FILTER = Decimal(9170997) / COIN\r\ntest/functional/p2p_ibd_txrelay.py:32:NORMAL_FEE_FILTER = Decimal(100) / COIN\r\ntest/functional/test_framework/messages.py:492:            % (self.nValue // COIN, self.nValue % COIN,\r\ntest/functional/test_framework/wallet.py:326:        fee = Decimal(inputs_value_total - outputs_value_total) / COIN\r\ntest/functional/test_framework/wallet.py:345:                value=Decimal(tx.vout[i].nValue) / COIN,\r\ntest/functional/wallet_import_rescan.py:280:            variant.initial_amount = get_rand_amount(min_amount=((500 * 20 / COIN) + AMOUNT_DUST))\r\n```\r\n</details>\r\n\r\n### BTC to Satoshis conversion instances\r\n<details>\r\n<summary>git grep -n \"* COIN\" -- '*.py'</summary>\r\n\r\n```\r\ntest/functional/feature_bip68_sequence.py:94:        value = int((utxo[\"value\"] - self.relayfee) * COIN)\r\ntest/functional/feature_bip68_sequence.py:115:        tx2.vout = [CTxOut(int(value - self.relayfee * COIN), SCRIPT_W0_SH_OP_TRUE)]\r\ntest/functional/feature_bip68_sequence.py:203:            tx.vout.append(CTxOut(int(value - self.relayfee * tx_size * COIN / 1000), SCRIPT_W0_SH_OP_TRUE))\r\ntest/functional/feature_bip68_sequence.py:233:        tx2.vout = [CTxOut(int(tx1.vout[0].nValue - self.relayfee * COIN), SCRIPT_W0_SH_OP_TRUE)]\r\ntest/functional/feature_bip68_sequence.py:253:            tx.vout = [CTxOut(int(orig_tx.vout[0].nValue - relayfee * COIN), SCRIPT_W0_SH_OP_TRUE)]\r\ntest/functional/feature_bip68_sequence.py:365:        tx2.vout = [CTxOut(int(tx1.vout[0].nValue - self.relayfee * COIN), SCRIPT_W0_SH_OP_TRUE)]\r\ntest/functional/feature_bip68_sequence.py:383:        tx3.vout = [CTxOut(int(tx2.vout[0].nValue - self.relayfee * COIN), SCRIPT_W0_SH_OP_TRUE)]\r\ntest/functional/feature_block.py:812:        tx = self.create_and_sign_transaction(out[17], 51 * COIN)\r\ntest/functional/feature_block.py:1162:        tx77 = self.create_and_sign_transaction(out[24], 10 * COIN)\r\ntest/functional/feature_block.py:1168:        tx78 = self.create_tx(tx77, 0, 9 * COIN)\r\ntest/functional/feature_block.py:1173:        tx79 = self.create_tx(tx78, 0, 8 * COIN)\r\ntest/functional/feature_coinstatsindex.py:155:            amount=21 * COIN,\r\ntest/functional/feature_coinstatsindex.py:164:        tx2.vout = [CTxOut(int(Decimal(tx2_val) * COIN), CScript([OP_RETURN] + [OP_FALSE] * 30))]\r\ntest/functional/feature_coinstatsindex.py:192:        cb.vout.append(CTxOut(5 * COIN, CScript([OP_FALSE])))\r\ntest/functional/feature_dbcrash.py:192:            input_amount = int(sum([utxo['value'] for utxo in utxos_to_spend]) * COIN)\r\ntest/functional/feature_fee_estimation.py:60:    tx.vout[0].nValue = int((total_in - amount - fee) * COIN)\r\ntest/functional/feature_fee_estimation.py:62:    tx.vout[1].nValue = int(amount * COIN)\r\ntest/functional/feature_rbf.py:116:        tx.vout[0].nValue -= int(0.1 * COIN)\r\ntest/functional/feature_rbf.py:131:        initial_nValue = 5 * COIN\r\ntest/functional/feature_rbf.py:137:        while remaining_value > 1 * COIN:\r\ntest/functional/feature_rbf.py:138:            remaining_value -= int(0.1 * COIN)\r\ntest/functional/feature_rbf.py:160:        dbl_tx.vout[0].nValue = int(0.1 * COIN)\r\ntest/functional/feature_rbf.py:171:        initial_nValue = 5 * COIN\r\ntest/functional/feature_rbf.py:174:        def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.00001 * COIN, _total_txs=None):\r\ntest/functional/feature_rbf.py:202:        fee = int(0.00001 * COIN)\r\ntest/functional/feature_rbf.py:232:            fee = int(0.00001 * COIN)\r\ntest/functional/feature_rbf.py:250:        tx0_outpoint = self.make_utxo(self.nodes[0], int(1.1 * COIN))\r\ntest/functional/feature_rbf.py:273:        utxo1 = self.make_utxo(self.nodes[0], int(1.2 * COIN))\r\ntest/functional/feature_rbf.py:274:        utxo2 = self.make_utxo(self.nodes[0], 3 * COIN)\r\ntest/functional/feature_rbf.py:312:        confirmed_utxo = self.make_utxo(self.nodes[0], int(1.1 * COIN))\r\ntest/functional/feature_rbf.py:313:        unconfirmed_utxo = self.make_utxo(self.nodes[0], int(0.1 * COIN), confirmed=False)\r\ntest/functional/feature_rbf.py:325:            amount_per_output=1 * COIN,\r\ntest/functional/feature_rbf.py:337:        initial_nValue = 10 * COIN\r\ntest/functional/feature_rbf.py:339:        fee = int(0.0001 * COIN)\r\ntest/functional/feature_rbf.py:466:        tx0_outpoint = self.make_utxo(self.nodes[0], int(1.1 * COIN))\r\ntest/functional/feature_rbf.py:480:            amount_per_output=int(0.00001 * COIN),\r\ntest/functional/feature_rbf.py:487:        self.nodes[0].prioritisetransaction(txid=tx1a_txid, fee_delta=int(-0.1 * COIN))\r\ntest/functional/feature_rbf.py:495:        tx1_outpoint = self.make_utxo(self.nodes[0], int(1.1 * COIN))\r\ntest/functional/feature_rbf.py:516:        self.nodes[0].prioritisetransaction(txid=tx2b[\"txid\"], fee_delta=int(0.1 * COIN))\r\ntest/functional/feature_rbf.py:557:        confirmed_utxo = self.make_utxo(self.nodes[0], int(2 * COIN))\r\ntest/functional/feature_segwit.py:279:        tx.vout.append(CTxOut(int(49.99 * COIN), CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE])))\r\ntest/functional/feature_segwit.py:295:        tx.vout.append(CTxOut(int(49.95 * COIN), CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE])))  # Huge fee\r\ntest/functional/interface_rest.py:99:        txid = self.wallet.send_to(from_node=self.nodes[0], scriptPubKey=getnewdestination()[1], amount=int(0.1\r\n * COIN))[\"txid\"]\r\ntest/functional/interface_rest.py:176:        txid = self.wallet.send_to(from_node=self.nodes[0], scriptPubKey=getnewdestination()[1], amount=int(0.\r\n1 * COIN))[\"txid\"]\r\ntest/functional/interface_usdt_utxocache.py:195:                assert_equal(50 * COIN, event.value)\r\ntest/functional/interface_usdt_utxocache.py:301:                        \"value\": int(prevout_tx[\"vout\"][vin[\"vout\"]][\"value\"] * COIN),\r\ntest/functional/interface_usdt_utxocache.py:310:                        \"value\": int(vout[\"value\"] * COIN),\r\ntest/functional/mempool_accept.py:91:        tx.vout[0].nValue = int(0.3 * COIN)\r\ntest/functional/mempool_accept.py:92:        tx.vout[1].nValue = int(49 * COIN)\r\ntest/functional/mempool_accept.py:120:        tx.vout[0].nValue = int((Decimal('0.3') - fee) * COIN)\r\ntest/functional/mempool_accept.py:134:        tx.vout[0].nValue = int(output_amount * COIN)\r\ntest/functional/mempool_accept.py:156:        tx.vout[0].nValue -= int(fee * COIN)  # Double the fee\r\ntest/functional/mempool_accept.py:184:        tx.vout[0].nValue = int(0.1 * COIN)\r\ntest/functional/mempool_accept.py:202:        tx.vout[0].nValue = int(0.05 * COIN)\r\ntest/functional/mempool_accept_wtxid.py:59:        parent.vout.append(CTxOut(int(9.99998 * COIN), script_pubkey))\r\ntest/functional/mempool_accept_wtxid.py:76:        child_one.vout.append(CTxOut(int(9.99996 * COIN), child_script_pubkey))\r\ntest/functional/mempool_dust.py:53:            dust_threshold = int(get_fee(tx_size, dust_relay_fee) * COIN)\r\ntest/functional/mempool_limit.py:254:        cpfp_satoshis = int(cpfp_fee * COIN) + magic_satoshis\r\ntest/functional/mempool_limit.py:323:        child = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_utxos, fee_per_output=int(cpfp_fee\r\n * COIN))\r\ntest/functional/mempool_limit.py:372:        node.prioritisetransaction(tx_rich[\"txid\"], 0, int(DEFAULT_FEE * COIN))\r\ntest/functional/mempool_package_rbf.py:65:            fee_per_output=int(child_fee * COIN // num_child_outputs),\r\ntest/functional/mempool_package_rbf.py:281:            fee_per_output=int(DEFAULT_CHILD_FEE * COIN),\r\ntest/functional/mempool_package_rbf.py:314:            fee_per_output=int(DEFAULT_FEE * COIN),\r\ntest/functional/mempool_package_rbf.py:321:            fee_per_output=int(DEFAULT_FEE * COIN),\r\ntest/functional/mempool_package_rbf.py:367:            fee_per_output=int(DEFAULT_FEE * COIN),\r\ntest/functional/mempool_package_rbf.py:374:            fee_per_output=int(DEFAULT_FEE * COIN),\r\ntest/functional/mempool_package_rbf.py:412:            fee_per_output=int(DEFAULT_FEE * COIN),\r\ntest/functional/mempool_package_rbf.py:420:            fee_per_output=int(DEFAULT_FEE * COIN),\r\ntest/functional/mempool_package_rbf.py:427:            fee_per_output=int(DEFAULT_FEE * COIN),\r\ntest/functional/mempool_package_rbf.py:491:            fee_per_output=int(DEFAULT_CHILD_FEE * COIN),\r\ntest/functional/mempool_package_rbf.py:579:            fee_per_output=int(DEFAULT_CHILD_FEE * COIN),\r\ntest/functional/mempool_persist.py:233:        self.nodes[0].prioritisetransaction(tx_node01_secret[\"txid\"], 0, 2 * COIN)\r\ntest/functional/mempool_persist.py:234:        self.nodes[1].prioritisetransaction(tx_node01_secret[\"txid\"], 0, 3 * COIN)\r\ntest/functional/mempool_truc.py:551:        fee_to_beat = max(int(tx_v3_child_2[\"fee\"] * COIN), int(tx_unrelated_replacee[\"fee\"]*COIN))\r\ntest/functional/mining_prioritisetransaction.py:48:        assert_equal(self.nodes[0].getprioritisedtransactions(), { tx_replacee[\"txid\"] : { \"fee_d\r\nelta\" : 100, \"in_mempool\" : True, \"modified_fee\": int(tx_replacee[\"fee\"] * COIN + 100)}})\r\ntest/functional/mining_prioritisetransaction.py:56:        assert_equal(self.nodes[0].getprioritisedtransactions(), { tx_replacee[\"txid\"] : { \"fee_d\r\nelta\" : COIN + 100, \"in_mempool\" : True, \"modified_fee\": int(tx_replacee[\"fee\"] * COIN + COIN + 100)}})\r\ntest/functional/mining_prioritisetransaction.py:100:        self.nodes[0].prioritisetransaction(txid=txid_b, fee_delta=int(fee_delta_b * COIN))\r\ntest/functional/mining_prioritisetransaction.py:101:        self.nodes[0].prioritisetransaction(txid=txid_c, fee_delta=int(fee_delta_c_1 * COIN))\r\ntest/functional/mining_prioritisetransaction.py:102:        self.nodes[0].prioritisetransaction(txid=txid_c, fee_delta=int(fee_delta_c_2 * COIN))\r\ntest/functional/mining_prioritisetransaction.py:114:        assert_equal(self.nodes[0].getprioritisedtransactions(), {txid_b: {\"fee_delta\" : fee_del\r\nta_b*COIN, \"in_mempool\" : True, \"modified_fee\": int(fee_delta_b*COIN + COIN * tx_o_b[\"fee\"])}, txid_c: {\"fee_delta\" : (fee_delta_c_1 + fee_delta_c_2\r\n)*COIN, \"in_mempool\" : True, \"modified_fee\": int((fee_delta_c_1 + fee_delta_c_2 ) * COIN + COIN * tx_o_c[\"fee\"])}})\r\ntest/functional/mining_prioritisetransaction.py:124:        self.nodes[0].prioritisetransaction(txid=txid_b, fee_delta=int(fee_delta_b * COIN))\r\ntest/functional/mining_prioritisetransaction.py:125:        self.nodes[0].prioritisetransaction(txid=txid_c, fee_delta=int(fee_delta_c_1 * COIN))\r\ntest/functional/mining_prioritisetransaction.py:126:        self.nodes[0].prioritisetransaction(txid=txid_c, fee_delta=int(fee_delta_c_2 * COIN))\r\ntest/functional/mining_prioritisetransaction.py:133:        assert_equal(self.nodes[0].getprioritisedtransactions(), {txid_b: {\"fee_delta\" : fee_del\r\nta_b*COIN, \"in_mempool\" : True, \"modified_fee\": int(fee_delta_b*COIN + COIN * tx_o_b[\"fee\"])}, txid_c: {\"fee_delta\" : (fee_delta_c_1 + fee_delta_c_2\r\n)*COIN, \"in_mempool\" : True, \"modified_fee\": int((fee_delta_c_1 + fee_delta_c_2 ) * COIN + COIN * tx_o_c[\"fee\"])}})\r\ntest/functional/p2p_filter.py:141:        rel_txid = self.wallet.send_to(from_node=self.nodes[0], scriptPubKey=filter_peer.watch_script_pubkey, amou\r\nnt=1 * COIN)[\"txid\"]\r\ntest/functional/p2p_filter.py:142:        irr_result = self.wallet.send_to(from_node=self.nodes[0], scriptPubKey=getnewdestination()[1], amount=2 *\r\nCOIN)\r\ntest/functional/p2p_filter.py:160:        self.wallet.send_to(from_node=self.nodes[0], scriptPubKey=filter_peer.watch_script_pubkey, amount=9 * COIN\r\n)\r\ntest/functional/p2p_filter.py:189:        self.wallet.send_to(from_node=self.nodes[0], scriptPubKey=getnewdestination()[1], amount=7 * COIN)\r\ntest/functional/p2p_filter.py:196:        txid = self.wallet.send_to(from_node=self.nodes[0], scriptPubKey=filter_peer.watch_script_pubkey, amount=9\r\n * COIN)[\"txid\"]\r\ntest/functional/p2p_filter.py:203:            txid = self.wallet.send_to(from_node=self.nodes[0], scriptPubKey=getnewdestination()[1], amount=7 * CO\r\nIN)[\"txid\"]\r\ntest/functional/p2p_invalid_block.py:72:        tx1 = create_tx_with_script(block1.vtx[0], 0, script_sig=bytes([OP_TRUE]), amount=50 * COIN)\r\ntest/functional/p2p_invalid_block.py:73:        tx2 = create_tx_with_script(tx1, 0, script_sig=bytes([OP_TRUE]), amount=50 * COIN)\r\ntest/functional/p2p_invalid_block.py:120:        tx3 = create_tx_with_script(tx2, 0, script_sig=bytes([OP_TRUE]), amount=50 * COIN)\r\ntest/functional/p2p_invalid_tx.py:95:        tx_withhold.vout = [CTxOut(nValue=25 * COIN - 12000, scriptPubKey=SCRIPT_PUB_KEY_OP_TRUE)] * 2\r\ntest/functional/p2p_invalid_tx.py:101:        tx_orphan_1.vout = [CTxOut(nValue=8 * COIN, scriptPubKey=SCRIPT_PUB_KEY_OP_TRUE)] * 3\r\ntest/functional/p2p_invalid_tx.py:107:        tx_orphan_2_no_fee.vout.append(CTxOut(nValue=8 * COIN, scriptPubKey=SCRIPT_PUB_KEY_OP_TRUE))\r\ntest/functional/p2p_invalid_tx.py:112:        tx_orphan_2_valid.vout.append(CTxOut(nValue=8 * COIN - 12000, scriptPubKey=SCRIPT_PUB_KEY_OP_TRUE))\r\ntest/functional/p2p_invalid_tx.py:118:        tx_orphan_2_invalid.vout.append(CTxOut(nValue=11 * COIN, scriptPubKey=SCRIPT_PUB_KEY_OP_TRUE))\r\ntest/functional/p2p_invalid_tx.py:154:            orphan_tx_pool[i].vout.append(CTxOut(nValue=11 * COIN, scriptPubKey=SCRIPT_PUB_KEY_OP_TRUE))\r\ntest/functional/p2p_invalid_tx.py:162:        rejected_parent.vout.append(CTxOut(nValue=11 * COIN, scriptPubKey=SCRIPT_PUB_KEY_OP_TRUE))\r\ntest/functional/p2p_invalid_tx.py:174:        tx_withhold_until_block_A.vout = [CTxOut(nValue=12 * COIN, scriptPubKey=SCRIPT_PUB_KEY_OP_TRUE)] * 2\r\ntest/functional/p2p_invalid_tx.py:179:        tx_orphan_include_by_block_A.vout.append(CTxOut(nValue=12 * COIN - 12000, scriptPubKey=SCRIPT_PUB_KEY_\r\nOP_TRUE))\r\ntest/functional/p2p_invalid_tx.py:199:        tx_withhold_until_block_B.vout.append(CTxOut(nValue=11 * COIN, scriptPubKey=SCRIPT_PUB_KEY_OP_TRUE))\r\ntest/functional/p2p_invalid_tx.py:204:        tx_orphan_include_by_block_B.vout.append(CTxOut(nValue=10 * COIN, scriptPubKey=SCRIPT_PUB_KEY_OP_TRUE)\r\n)\r\ntest/functional/p2p_invalid_tx.py:209:        tx_orphan_conflict_by_block_B.vout.append(CTxOut(nValue=9 * COIN, scriptPubKey=SCRIPT_PUB_KEY_OP_TRUE)\r\n)\r\ntest/functional/rpc_blockchain.py:679:        tx = create_tx_with_script(block.vtx[0], 0, script_sig=bytes([OP_TRUE]), amount=50 * COIN)\r\ntest/functional/rpc_createmultisig.py:159:        tx = self.wallet.send_to(from_node=self.nodes[0], scriptPubKey=spk, amount=int(value * COIN))\r\ntest/functional/rpc_packages.py:248:            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\r\ntest/functional/rpc_rawtransaction.py:362:        tx.vout = [CTxOut(int(Decimal(tx_val) * COIN), CScript([OP_RETURN] + [OP_FALSE] * 30))]\r\ntest/functional/rpc_rawtransaction.py:369:        tx.vout = [CTxOut(int(Decimal(tx_val) * COIN), CScript([OP_FALSE] * 10001))]\r\ntest/functional/rpc_rawtransaction.py:376:        tx.vout = [CTxOut(int(Decimal(tx_val) * COIN), CScript([OP_INVALIDOPCODE]))]\r\ntest/functional/rpc_rawtransaction.py:383:        tx.vout = [CTxOut(int(Decimal(tx_val) * COIN), CScript([OP_RETURN] + [OP_FALSE] * 30))]\r\ntest/functional/rpc_rawtransaction.py:390:        tx.vout = [CTxOut(int(Decimal(tx_val) * COIN), CScript([OP_RETURN] + [OP_FALSE] * 30))]\r\ntest/functional/rpc_rawtransaction.py:397:        tx.vout = [CTxOut(int(Decimal(tx_val) * COIN), CScript([OP_RETURN] + [OP_FALSE] * 30))]\r\ntest/functional/rpc_scanblocks.py:34:        wallet.send_to(from_node=node, scriptPubKey=spk_1, amount=1 * COIN)\r\ntest/functional/rpc_scanblocks.py:41:                       amount=1 * COIN)\r\ntest/functional/rpc_signrawtransactionwithkey.py:53:        tx = self.wallet.send_to(from_node=self.nodes[0], scriptPubKey=script_pub_key, amount=in\r\nt(amount * COIN))\r\ntest/functional/test_framework/blocktools.py:137:    coinbaseoutput.nValue = nValue * COIN\r\ntest/functional/test_framework/messages.py:40:MAX_MONEY = 21000000 * COIN\r\ntest/functional/test_framework/messages.py:665:            if tout.nValue < 0 or tout.nValue > 21000000 * COIN:\r\ntest/functional/wallet_assumeutxo.py:122:                self.mini_wallet.send_to(from_node=n0, scriptPubKey=w_skp, amount=1 * COIN)\r\ntest/functional/wallet_assumeutxo.py:123:                self.mini_wallet.send_to(from_node=n0, scriptPubKey=w2_skp, amount=10 * COIN)\r\ntest/functional/wallet_basic.py:817:            assert_equal(this_unspent['ancestorfees'], ancestor_fees * COIN)\r\ntest/functional/wallet_fundrawtransaction.py:167:        tx.vout = [CTxOut(1 * COIN, bytearray(address_to_scriptpubkey(address)))] * 2\r\ntest/functional/wallet_fundrawtransaction.py:1304:        assert_equal(fundedtx['fee'] * COIN, tx_size * 10)\r\ntest/functional/wallet_fundrawtransaction.py:1312:        assert_equal(fundedtx['fee'] * COIN, tx_size * 10)\r\ntest/functional/wallet_listtransactions.py:198:        tx3_b.vout[0].nValue -= int(Decimal(\"0.004\") * COIN)  # bump the fee\r\n```\r\n</details>\r\n\r\n### Possible solution\r\n\r\nA possible solution that has garnered some support is to add utility functions in the functional tests such as `sat_to_btc()` and conversely `btc_to_sat()` that can get rid of this repetitive inline conversion and make the testing code more readable.\r\n\r\nPrior discussion: https://github.com/bitcoin/bitcoin/pull/30079#discussion_r1602965411\r\n\r\n### Useful Skills\r\n\r\n* Compiling Bitcoin Core from source\r\n* Running the C++ unit tests and the Python functional tests\r\n* Basic Python skills\r\n\r\n\r\n### Guidance for new contributors\r\n\r\nWant to work on this issue?\r\n\r\nFor guidance on contributing, please read [CONTRIBUTING.md](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md) before opening your pull request.\r\n",
    "user": {
      "login": "rkrux",
      "id": 5960750,
      "node_id": "MDQ6VXNlcjU5NjA3NTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rkrux",
      "html_url": "https://github.com/rkrux",
      "followers_url": "https://api.github.com/users/rkrux/followers",
      "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
      "organizations_url": "https://api.github.com/users/rkrux/orgs",
      "repos_url": "https://api.github.com/users/rkrux/repos",
      "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/rkrux/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "labels": [
      {
        "id": 349312277,
        "node_id": "MDU6TGFiZWwzNDkzMTIyNzc=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/good%20first%20issue",
        "name": "good first issue",
        "color": "c2e0c6",
        "default": true
      }
    ],
    "assignees": [],
    "author_association": "NONE",
    "locked": false,
    "comments": 1,
    "created_at": "2024-11-22T12:01:22Z",
    "updated_at": "2024-12-02T11:03:14Z"
  },
  "events": [
    {
      "event": "labeled",
      "id": 15396582578,
      "node_id": "LE_lADOABII586f6yvLzwAAAAOVtTSy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15396582578",
      "actor": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-22T12:01:22Z",
      "label": {
        "name": "good first issue",
        "color": "c2e0c6"
      }
    },
    {
      "event": "renamed",
      "id": 15418072274,
      "node_id": "RTE_lADOABII586f6yvLzwAAAAOW_RzS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15418072274",
      "actor": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-25T10:16:54Z",
      "rename": {
        "from": "Add `satToBtc()` and conversely `btcToSat()` util functions in functional tests",
        "to": "Add `sat_to_btc()` and conversely `btc_to_sat()` util functions in functional tests"
      }
    },
    {
      "event": "mentioned",
      "id": 15468659610,
      "node_id": "MEE_lADOABII586f6yvLzwAAAAOaAQOa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15468659610",
      "actor": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-28T18:49:09Z"
    },
    {
      "event": "subscribed",
      "id": 15468659613,
      "node_id": "SE_lADOABII586f6yvLzwAAAAOaAQOd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15468659613",
      "actor": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-28T18:49:10Z"
    },
    {
      "event": "commented",
      "id": 2511225604,
      "node_id": "IC_kwDOABII586VrkME",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2511225604",
      "actor": {
        "login": "le0nAg",
        "id": 80973875,
        "node_id": "MDQ6VXNlcjgwOTczODc1",
        "avatar_url": "https://avatars.githubusercontent.com/u/80973875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/le0nAg",
        "html_url": "https://github.com/le0nAg",
        "followers_url": "https://api.github.com/users/le0nAg/followers",
        "following_url": "https://api.github.com/users/le0nAg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/le0nAg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/le0nAg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/le0nAg/subscriptions",
        "organizations_url": "https://api.github.com/users/le0nAg/orgs",
        "repos_url": "https://api.github.com/users/le0nAg/repos",
        "events_url": "https://api.github.com/users/le0nAg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/le0nAg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-02T11:03:12Z",
      "updated_at": "2024-12-02T11:03:12Z",
      "author_association": "NONE",
      "body": "Could I take the issue? ",
      "user": {
        "login": "le0nAg",
        "id": 80973875,
        "node_id": "MDQ6VXNlcjgwOTczODc1",
        "avatar_url": "https://avatars.githubusercontent.com/u/80973875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/le0nAg",
        "html_url": "https://github.com/le0nAg",
        "followers_url": "https://api.github.com/users/le0nAg/followers",
        "following_url": "https://api.github.com/users/le0nAg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/le0nAg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/le0nAg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/le0nAg/subscriptions",
        "organizations_url": "https://api.github.com/users/le0nAg/orgs",
        "repos_url": "https://api.github.com/users/le0nAg/repos",
        "events_url": "https://api.github.com/users/le0nAg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/le0nAg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/31345#issuecomment-2511225604",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31345"
    }
  ]
}