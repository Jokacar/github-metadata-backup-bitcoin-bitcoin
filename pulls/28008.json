{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
    "id": 1414003377,
    "node_id": "PR_kwDOABII585UR_qx",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/28008",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/28008.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/28008.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28008",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28008/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/1c7582ead6e1119899922041c1af2b4169b0bc74",
    "number": 28008,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "BIP324 ciphersuite",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Depends on #27985 and #27993, based on and partially replaces #25361, part of #27634. Draft while dependencies are not merged.\r\n\r\nThis adds implementations of:\r\n* The ChaCha20Poly1305 AEAD from [RFC8439 section 2.8](https://datatracker.ietf.org/doc/html/rfc8439#section-2.8), including test vectors.\r\n* The FSChaCha20 stream cipher as specified in [BIP324](https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki#rekeying-wrappers-fschacha20poly1305-and-fschacha20), a rekeying wrapper around ChaCha20.\r\n* The FSChaCha20Poly1305 AEAD as specified in [BIP324](https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki#rekeying-wrappers-fschacha20poly1305-and-fschacha20), a rekeying wrapper around ChaCha20Poly1305.\r\n* A BIP324Cipher class that encapsulates key agreement, key derivation, and stream ciphers and AEADs for [BIP324 packet encoding](https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki#overall-packet-encryption-and-decryption-pseudocode).\r\n\r\nThe ChaCha20Poly1305 and FSChaCha20Poly1305 implementations are new, taking advance of the improvements in #27993.\r\n",
    "labels": [],
    "created_at": "2023-06-29T22:00:17Z",
    "updated_at": "2023-08-04T18:38:07Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "afb7fea5a07d1f7914ef3fc3dbf9eea976d9d5f2",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "sipa:202306_bip324_ciphersuite",
      "ref": "202306_bip324_ciphersuite",
      "sha": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 1458655,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDU4NjU1",
        "name": "bitcoin",
        "full_name": "sipa/bitcoin",
        "owner": {
          "login": "sipa",
          "id": 548488,
          "node_id": "MDQ6VXNlcjU0ODQ4OA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sipa",
          "html_url": "https://github.com/sipa",
          "followers_url": "https://api.github.com/users/sipa/followers",
          "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
          "organizations_url": "https://api.github.com/users/sipa/orgs",
          "repos_url": "https://api.github.com/users/sipa/repos",
          "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/sipa/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/sipa/bitcoin",
        "description": "Bitcoin integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/sipa/bitcoin",
        "archive_url": "https://api.github.com/repos/sipa/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/sipa/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/sipa/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/sipa/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/sipa/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/sipa/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/sipa/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/sipa/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/sipa/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/sipa/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/sipa/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/sipa/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/sipa/bitcoin/events",
        "forks_url": "https://api.github.com/repos/sipa/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/sipa/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/sipa/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/sipa/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/sipa/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/sipa/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/sipa/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/sipa/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/sipa/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/sipa/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/sipa/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/sipa/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/sipa/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/sipa/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/sipa/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/sipa/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:sipa/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/sipa/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/sipa/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/sipa/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/sipa/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/sipa/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/sipa/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/sipa/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/sipa/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/sipa/bitcoin/hooks",
        "svn_url": "https://github.com/sipa/bitcoin",
        "homepage": "http://www.bitcoin.org",
        "language": "TypeScript",
        "forks_count": 22,
        "stargazers_count": 84,
        "watchers_count": 84,
        "size": 218170,
        "default_branch": "lows",
        "open_issues_count": 16,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-01T19:30:18Z",
        "created_at": "2011-03-09T10:46:59Z",
        "updated_at": "2023-07-17T18:31:45Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "f57e724a809feb139c5ae71c4db65635427e4802",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35480,
        "stargazers_count": 70626,
        "watchers_count": 70626,
        "size": 236265,
        "default_branch": "master",
        "open_issues_count": 673,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-04T18:37:56Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-08-04T18:40:16Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 1312,
    "deletions": 605,
    "changed_files": 19,
    "commits": 8,
    "review_comments": 38,
    "comments": 8
  },
  "events": [
    {
      "event": "commented",
      "id": 1613858567,
      "node_id": "IC_kwDOABII585gMYcH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1613858567",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-29T22:00:20Z",
      "updated_at": "2023-07-28T12:11:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [jamesob](https://github.com/bitcoin/bitcoin/pull/28008#pullrequestreview-1550293430), [theStack](https://github.com/bitcoin/bitcoin/pull/28008#pullrequestreview-1551988560) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#28100](https://github.com/bitcoin/bitcoin/pull/28100) (crypto: more `Span<std::byte>` modernization & follow-ups by sipa)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#issuecomment-1613858567",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28008"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-29T22:01:05Z",
      "updated_at": "2023-06-29T22:01:05Z",
      "source": {
        "issue": {
          "id": 1707054771,
          "node_id": "I_kwDOABII585lv5az",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27634",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27634/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27634/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27634/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/27634",
          "number": 27634,
          "state": "open",
          "state_reason": null,
          "title": "BIP324 tracking issue",
          "body": "This issue will be updated to reflect the current state of [BIP324](https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki) integration.\r\n\r\nPRs ready for review:\r\n* #28008\r\n* #28165\r\n\r\nOverall plan:\r\n* [x] ElligatorSwift integration in Bitcoin Core: #27479 \r\n  * [x] Dependency: ElligatorSwift support in libsecp256k1: bitcoin-core/secp256k1#1129\r\n  * [x] Dependency: update libsecp256k1 subtree: currently part of 27479.\r\n* [ ] Cipher suite implementation (formerly 25361):\r\n  * [x] Support for not wasting ChaCha20 stream bytes: #26153\r\n  * [x] Support for RFC8439 variant of ChaCha20: #27985\r\n  * [x] Support for incremental Poly1305 computation: #27993\r\n  * [ ] Cipher suite: #28008\r\n* [ ] P2P v2 connection support (formerly 23561, 23233, 24545):\r\n  * [ ] P2P transport abstraction: #28165\r\n  * [ ] BIP324 connection support: #28196\r\n* [ ] P2P v2 signalling integration (formerly 24545): no PR yet\r\n* [ ] BIP324 functional tests: #24748:\r\n   * [x] Dependency: ElligatorSwift support in functional tests: #24005\r\n   * [x] Dependency: Field element support in functional tests: #26222\r\n* [ ] P2P_V2 service flag support in DNS seeder: sipa/bitcoin-seeder#102\r\n* [x] Prehistory:\r\n  * [x] Old ChaCha20Poly1305@Bitcoin cipher: #15649\r\n  * [x] Preparing for multiple transport layers: #16202 and #16562\r\n  * [x] Miscellaneous fixes: #22331 #23271\r\n  * [x] ChaCha20 performance: #24946 \r\n",
          "user": {
            "login": "sipa",
            "id": 548488,
            "node_id": "MDQ6VXNlcjU0ODQ4OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sipa",
            "html_url": "https://github.com/sipa",
            "followers_url": "https://api.github.com/users/sipa/followers",
            "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
            "organizations_url": "https://api.github.com/users/sipa/orgs",
            "repos_url": "https://api.github.com/users/sipa/repos",
            "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sipa/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 0,
          "created_at": "2023-05-12T07:00:54Z",
          "updated_at": "2023-08-01T17:59:34Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "unsubscribed",
      "id": 9682404195,
      "node_id": "UE_lADOABII585qMJPgzwAAAAJBHcNj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9682404195",
      "actor": {
        "login": "joostjager",
        "id": 4638168,
        "node_id": "MDQ6VXNlcjQ2MzgxNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4638168?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joostjager",
        "html_url": "https://github.com/joostjager",
        "followers_url": "https://api.github.com/users/joostjager/followers",
        "following_url": "https://api.github.com/users/joostjager/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/joostjager/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/joostjager/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/joostjager/subscriptions",
        "organizations_url": "https://api.github.com/users/joostjager/orgs",
        "repos_url": "https://api.github.com/users/joostjager/repos",
        "events_url": "https://api.github.com/users/joostjager/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/joostjager/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-29T23:20:23Z"
    },
    {
      "event": "labeled",
      "id": 9682770341,
      "node_id": "LE_lADOABII585qMJPgzwAAAAJBI1ml",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9682770341",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-30T00:58:46Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9683990240,
      "node_id": "HRFPE_lADOABII585qMJPgzwAAAAJBNfbg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9683990240",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-30T04:58:18Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-30T09:20:52Z",
      "updated_at": "2023-06-30T09:20:52Z",
      "source": {
        "issue": {
          "id": 1779254691,
          "node_id": "PR_kwDOABII585UKHAb",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27993",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27993/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27993/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27993/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27993",
          "number": 27993,
          "state": "closed",
          "state_reason": null,
          "title": "Make poly1305 support incremental computation + modernize",
          "body": "Our current Poly1305 code (src/crypto/poly1305.*) only supports computing the entire tag in one go (the `poly1305_auth` function takes a key and message, and outputs the tag). However, the RFC8439 authenticated encryption (as used in BIP324, see #27634) scheme makes use of Poly1305 in a way where the message consists of 3 different pieces:\r\n* The additionally authenticated data (AAD), padded to 16 bytes.\r\n* The ciphertext, padded to 16 bytes.\r\n* The length of the AAD and the length of the ciphertext, together another 16 bytes.\r\n\r\nImplementing RFC8439 using the existing `poly1305_auth` function requires creating a temporary copy with all these pieces of data concatenated just for the purpose of computing the tag (the approach used in #25361).\r\n\r\nThis PR replaces the poly1305 code with new code from https://github.com/floodyberry/poly1305-donna (with minor adjustments to make it match our coding style and use our utility functions, documented in the commit) which supports incremental operation, and then adds a C++ wrapper interface using std::byte Spans around it, and adds tests that incremental and all-at-once computation match.",
          "user": {
            "login": "sipa",
            "id": 548488,
            "node_id": "MDQ6VXNlcjU0ODQ4OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sipa",
            "html_url": "https://github.com/sipa",
            "followers_url": "https://api.github.com/users/sipa/followers",
            "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
            "organizations_url": "https://api.github.com/users/sipa/orgs",
            "repos_url": "https://api.github.com/users/sipa/repos",
            "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sipa/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27993",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27993",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27993.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27993.patch"
          },
          "closed_at": "2023-07-17T22:31:02Z",
          "created_at": "2023-06-28T16:01:35Z",
          "updated_at": "2023-07-18T20:56:57Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-30T09:32:54Z",
      "updated_at": "2023-06-30T09:32:54Z",
      "source": {
        "issue": {
          "id": 1777770208,
          "node_id": "PR_kwDOABII585UFE7q",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27985",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27985/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27985/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27985/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27985",
          "number": 27985,
          "state": "closed",
          "state_reason": null,
          "title": "Add support for RFC8439 variant of ChaCha20",
          "body": "Based on and replaces part of #25361, part of the BIP324 project (#27634). See also #19225 for background.\r\n\r\nThere are two variants of ChaCha20 in use. The currently implemented one uses a 64-bit nonce and a 64-bit block counter, while the one used in RFC8439 (and thus BIP324) uses a 96-bit nonce and 32-bit block counter. This PR changes the logic to use the 96-bit nonce variant, though in a way that's compatible with >256 GiB output (by automatically incrementing the first 32-bit part of the nonce when the block counter overflows).\r\n\r\nFor those who reviewed the original PR, the biggest change is here that the 96-bit nonce is passed as a Nonce96 type (pair of 32-bit + 64-bit integer) rather than a 12-byte array.\r\n",
          "user": {
            "login": "sipa",
            "id": 548488,
            "node_id": "MDQ6VXNlcjU0ODQ4OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sipa",
            "html_url": "https://github.com/sipa",
            "followers_url": "https://api.github.com/users/sipa/followers",
            "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
            "organizations_url": "https://api.github.com/users/sipa/orgs",
            "repos_url": "https://api.github.com/users/sipa/repos",
            "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sipa/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 12,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27985",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27985",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27985.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27985.patch"
          },
          "closed_at": "2023-07-12T16:59:14Z",
          "created_at": "2023-06-27T21:18:49Z",
          "updated_at": "2023-07-12T16:59:14Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9690442640,
      "node_id": "HRFPE_lADOABII585qMJPgzwAAAAJBmGuQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9690442640",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-30T18:06:16Z"
    },
    {
      "event": "unlabeled",
      "id": 9691300889,
      "node_id": "UNLE_lADOABII585qMJPgzwAAAAJBpYQZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9691300889",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-30T19:41:34Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9758057120,
      "node_id": "HRFPE_lADOABII585qMJPgzwAAAAJFoCKg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9758057120",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-07T18:45:57Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9758159826,
      "node_id": "HRFPE_lADOABII585qMJPgzwAAAAJFobPS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9758159826",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-07T18:54:58Z"
    },
    {
      "event": "labeled",
      "id": 9758160606,
      "node_id": "LE_lADOABII585qMJPgzwAAAAJFobbe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9758160606",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-07T18:55:04Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9759524519,
      "node_id": "HRFPE_lADOABII585qMJPgzwAAAAJFtoan",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9759524519",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-07T21:48:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9759556547,
      "node_id": "HRFPE_lADOABII585qMJPgzwAAAAJFtwPD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9759556547",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-07T21:54:30Z"
    },
    {
      "event": "renamed",
      "id": 9759557310,
      "node_id": "RTE_lADOABII585qMJPgzwAAAAJFtwa-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9759557310",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-07T21:54:38Z",
      "rename": {
        "from": "BIP324 ciphers: FSChaCha20 and FSChaCha20Poly1305",
        "to": "BIP324 ciphersuite"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9761779939,
      "node_id": "HRFPE_lADOABII585qMJPgzwAAAAJF2PDj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9761779939",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-08T04:04:28Z"
    },
    {
      "event": "unlabeled",
      "id": 9762637151,
      "node_id": "UNLE_lADOABII585qMJPgzwAAAAJF5gVf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9762637151",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-08T05:39:05Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9776059720,
      "node_id": "HRFPE_lADOABII585qMJPgzwAAAAJGstVI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9776059720",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-10T14:58:40Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9776946606,
      "node_id": "HRFPE_lADOABII585qMJPgzwAAAAJGwF2u",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9776946606",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-10T16:15:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9780265226,
      "node_id": "HRFPE_lADOABII585qMJPgzwAAAAJG8wEK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9780265226",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-10T22:03:30Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9780686925,
      "node_id": "HRFPE_lADOABII585qMJPgzwAAAAJG-XBN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9780686925",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-10T23:16:50Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9781909539,
      "node_id": "HRFPE_lADOABII585qMJPgzwAAAAJHDBgj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9781909539",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-11T02:46:54Z"
    },
    {
      "event": "labeled",
      "id": 9802582926,
      "node_id": "LE_lADOABII585qMJPgzwAAAAJIR4uO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9802582926",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-12T18:07:44Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9802997745,
      "node_id": "HRFPE_lADOABII585qMJPgzwAAAAJITd_x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9802997745",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-12T18:58:45Z"
    },
    {
      "event": "unlabeled",
      "id": 9803711540,
      "node_id": "UNLE_lADOABII585qMJPgzwAAAAJIWMQ0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9803711540",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-12T20:26:13Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 9804282786,
      "node_id": "LE_lADOABII585qMJPgzwAAAAJIYXui",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9804282786",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-12T21:43:59Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9814193125,
      "node_id": "HRFPE_lADOABII585qMJPgzwAAAAJI-LPl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9814193125",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-13T18:09:39Z"
    },
    {
      "event": "unlabeled",
      "id": 9815167770,
      "node_id": "UNLE_lADOABII585qMJPgzwAAAAJJB5Ma",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9815167770",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-13T20:06:58Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "ready_for_review",
      "id": 9843491264,
      "node_id": "RFRE_lADOABII585qMJPgzwAAAAJKt8HA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9843491264",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-17T22:43:48Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9843493200,
      "node_id": "HRFPE_lADOABII585qMJPgzwAAAAJKt8lQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9843493200",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-17T22:44:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9843547302,
      "node_id": "HRFPE_lADOABII585qMJPgzwAAAAJKuJym",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9843547302",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-17T22:53:45Z"
    },
    {
      "event": "commented",
      "id": 1638997490,
      "node_id": "IC_kwDOABII585hsR3y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1638997490",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-17T22:54:39Z",
      "updated_at": "2023-07-18T02:12:39Z",
      "author_association": "MEMBER",
      "body": "Rebased after merge of #28065, and marked ready for review as dependencies #27993 and #27985 are in.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#issuecomment-1638997490",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28008"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-18T18:34:21Z",
      "updated_at": "2023-07-18T18:34:21Z",
      "source": {
        "issue": {
          "id": 1810483287,
          "node_id": "PR_kwDOABII585V0MZE",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28100",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28100/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28100/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28100/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28100",
          "number": 28100,
          "state": "open",
          "state_reason": null,
          "title": "crypto: more `Span<std::byte>` modernization & follow-ups",
          "body": "This modernizes the ChaCha20 and ChaCha20Aligned interfaces to be `Span<std::byte>` based, and other improvements.\r\n\r\n* Removes our OpenSSH-inspired variant of the ChaCha20Poly1305 AEAD (which was added in anticipation of BIP324 using it, but the spec was later changed to using the RFC8439 one unmodified). #28008 replaces the code anyway, so it is pointless to apply the refectoring done in this PR to that old code.\r\n* Modifies all functions and constructors of `ChaCha20` and `ChaCha20Aligned` to be `Span<std::byte>` based.\r\n* Remove default constructors, to make sure all call sites provide a key (suggested in https://github.com/bitcoin/bitcoin/pull/26153#discussion_r1129313162)\r\n* Wipe key material on destruction for security (suggested in https://github.com/bitcoin/bitcoin/pull/26153#discussion_r1267164605)\r\n* Use `HexStr` on byte vectors in tests (suggested in https://github.com/bitcoin/bitcoin/pull/27993#discussion_r1262023316)\r\n* Support `std::byte` vectors in `ConsumeRandomLengthByteVector` and `ConsumeFixedLengthByteVector`, and use it (suggested in https://github.com/bitcoin/bitcoin/pull/27993#discussion_r1265337111)\r\n* And a few more.\r\n\r\nWhile related, I don't see this as a necessary for BIP324. Some changes here are also in #28008, but either or both can go in.",
          "user": {
            "login": "sipa",
            "id": 548488,
            "node_id": "MDQ6VXNlcjU0ODQ4OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sipa",
            "html_url": "https://github.com/sipa",
            "followers_url": "https://api.github.com/users/sipa/followers",
            "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
            "organizations_url": "https://api.github.com/users/sipa/orgs",
            "repos_url": "https://api.github.com/users/sipa/repos",
            "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sipa/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 1,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28100",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28100",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28100.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28100.patch"
          },
          "created_at": "2023-07-18T18:34:20Z",
          "updated_at": "2023-08-02T08:37:16Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1539997888,
      "node_id": "PRR_kwDOABII585byoDA",
      "url": null,
      "actor": null,
      "commit_id": "b0b6d11f16f65ce9b0d106372ce131eb6f179fe9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Reviewed the first four commits so far (up to c61fa6ab5917f3745a917f4fc2f3a9e96629d5d9), verified that the implementations of `AEADChaCha20Poly1305`, `FSChaCha20` and `FSChaCha20Poly1305` match the corresponding RFC8439 / BIP324 specifications. As with previous PRs, verified the test vectors (this time using PyCryptodome again) which was a bit more effort this time, as the rekeying wrappers FSChaCha20{Poly1305} also had to be implemented first: https://gist.github.com/theStack/e910505e39204c695a073ccc6d63719a\r\n\r\nLeft a few nits below.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#pullrequestreview-1539997888",
      "submitted_at": "2023-07-20T21:32:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9880330478,
      "node_id": "HRFPE_lADOABII585qMJPgzwAAAAJM6eDu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9880330478",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-21T00:30:16Z"
    },
    {
      "event": "reviewed",
      "id": 1537240624,
      "node_id": "PRR_kwDOABII585boG4w",
      "url": null,
      "actor": null,
      "commit_id": "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Submitting partial review (now to some degree obviated) up to the `FSChaCha20` implementation.\r\n\r\nLooking good so far. I also did cross-validation of the test vectors with [a Python library](https://github.com/ph4r05/py-chacha20poly1305) (happily a different implementation than The Stack Man) - the script for that can be found [here](https://github.com/jamesob/bitcoin-review-data/blob/master/28008.sipa.bip324_ciphersuite/verifycrypto.py), where I've manually copied test data from @sipa's cpp and verified with the unrelated Python implementation.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#pullrequestreview-1537240624",
      "submitted_at": "2023-07-21T13:30:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
    },
    {
      "event": "reviewed",
      "id": 1541993939,
      "node_id": "PRR_kwDOABII585b6PXT",
      "url": null,
      "actor": null,
      "commit_id": "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#pullrequestreview-1541993939",
      "submitted_at": "2023-07-22T01:15:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
    },
    {
      "event": "reviewed",
      "id": 1542406892,
      "node_id": "PRR_kwDOABII585b70Ls",
      "url": null,
      "actor": null,
      "commit_id": "5e0ca4ba371570d1a5275c5a79bc0c1253d97ead",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#pullrequestreview-1542406892",
      "submitted_at": "2023-07-23T22:22:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9901352007,
      "node_id": "HRFPE_lADOABII585qMJPgzwAAAAJOKqRH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9901352007",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-24T14:59:11Z"
    },
    {
      "event": "reviewed",
      "id": 1541600581,
      "node_id": "PRR_kwDOABII585b4vVF",
      "url": null,
      "actor": null,
      "commit_id": "180909f2c859be3c79630d9705c26a457715b9ed",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Review check-in; up to (but not including) 9e65744c4f44ce89f3176870d3cc25ac2b6bdc08",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#pullrequestreview-1541600581",
      "submitted_at": "2023-07-25T16:20:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
    },
    {
      "event": "commented",
      "id": 1650921567,
      "node_id": "IC_kwDOABII585iZxBf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1650921567",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-26T03:27:43Z",
      "updated_at": "2023-07-26T03:27:43Z",
      "author_association": "MEMBER",
      "body": "After thinking/working through further PRs, I'm beginning to wonder if it isn't better if these classes support incremental computation (i.e., the entire message/packet to be encrypted/decrypted isn't required to be presented in a one (or two) contiguous block(s) of memory, at a single point in time).\n\nThe advantage would primarily be a slightly lower latency when receiving a large P2P message. As is, the entire message needs to be received before any decryption can take place. With an incremental API, it could be decrypted on-the-fly as bytes are received over the wire, allowing a possibly shorter delay after the last byte is received. To get an idea about numbers: FSChaCha20Poly1305 on my Ryzen 5950X takes ~1.6 ns/byte, which would be 3.2 ms for a 2 MB block.\n\nSo advantages:\n* Lower latency when decrypting large messages.\n* More natural ability for split processing, possibly allowing fewer intermediary buffers to assemble plaintexts.\n\nDisadvantages:\n* More complex code, needing more complex tests to cover all possible scenarios.\n* Harder to make a safe-to-use API. The current approach has the advantage that it's impossible to get a decrypted message back if it fails the authenticity check. This is virtually impossible to prevent with an incremental API.\n\nWDYT?",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#issuecomment-1650921567",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28008"
    },
    {
      "event": "commented",
      "id": 1651257804,
      "node_id": "IC_kwDOABII585ibDHM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1651257804",
      "actor": {
        "login": "carnhofdaki",
        "id": 46941376,
        "node_id": "MDQ6VXNlcjQ2OTQxMzc2",
        "avatar_url": "https://avatars.githubusercontent.com/u/46941376?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/carnhofdaki",
        "html_url": "https://github.com/carnhofdaki",
        "followers_url": "https://api.github.com/users/carnhofdaki/followers",
        "following_url": "https://api.github.com/users/carnhofdaki/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/carnhofdaki/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/carnhofdaki/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/carnhofdaki/subscriptions",
        "organizations_url": "https://api.github.com/users/carnhofdaki/orgs",
        "repos_url": "https://api.github.com/users/carnhofdaki/repos",
        "events_url": "https://api.github.com/users/carnhofdaki/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/carnhofdaki/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-26T08:50:15Z",
      "updated_at": "2023-07-26T08:50:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "@sipa I think that the disadvantages you mention are much worse than the advantages it would bring. I think that keeping it simple is (at least in this implementation intended for first appearance in the `master` branch) an important feature of BIP-324.\r\n\r\nAs for me and my poor old Bitcoin node,\r\n please do not add complexity to the code.",
      "user": {
        "login": "carnhofdaki",
        "id": 46941376,
        "node_id": "MDQ6VXNlcjQ2OTQxMzc2",
        "avatar_url": "https://avatars.githubusercontent.com/u/46941376?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/carnhofdaki",
        "html_url": "https://github.com/carnhofdaki",
        "followers_url": "https://api.github.com/users/carnhofdaki/followers",
        "following_url": "https://api.github.com/users/carnhofdaki/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/carnhofdaki/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/carnhofdaki/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/carnhofdaki/subscriptions",
        "organizations_url": "https://api.github.com/users/carnhofdaki/orgs",
        "repos_url": "https://api.github.com/users/carnhofdaki/repos",
        "events_url": "https://api.github.com/users/carnhofdaki/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/carnhofdaki/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#issuecomment-1651257804",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28008"
    },
    {
      "event": "mentioned",
      "id": 9921048949,
      "node_id": "MEE_lADOABII585qMJPgzwAAAAJPVzF1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9921048949",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-26T08:50:15Z"
    },
    {
      "event": "subscribed",
      "id": 9921048972,
      "node_id": "SE_lADOABII585qMJPgzwAAAAJPVzGM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9921048972",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-26T08:50:15Z"
    },
    {
      "event": "commented",
      "id": 1651836376,
      "node_id": "IC_kwDOABII585idQXY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1651836376",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-26T13:41:26Z",
      "updated_at": "2023-07-26T13:41:26Z",
      "author_association": "MEMBER",
      "body": "> To get an idea about numbers: FSChaCha20Poly1305 on my Ryzen 5950X takes ~1.6 ns/byte, which would be 3.2 ms for a 2 MB block.\r\n\r\nI was curious how this (additive?) 3.2ms delay compares to existing block connection latency, so I sampled some logs from some of the okayish-CPU-but-well-networked machines I run. The [`Connect block: XXms` logs average to 67.8ms](https://gist.github.com/jamesob/2038a3ba3322726348f7479d4ac3e8e5) from that sample (after stripping out the long startup outliers). So from my perspective, this additional latency, while not negligible, wouldn't dissuade me personally from running with v2 P2P links.\r\n\r\nBut that said, assuming those numbers (68ms average connect time, +3.2ms V2 slowdown), we are talking about a theoretical 4.7% hit to global block propagation speed. For me this is right on the cusp of risking higher stale block rates, but that's not based on anything aside from gut feeling. Maybe we need to go back and review [@cdecker's work on block propagation sensitivity...](https://www.dpss.inesc-id.pt/~ler/docencia/rcs1314/papers/P2P2013_041.pdf)\r\n\r\nOf course, assuming that a 2MB transmission is necessary to connect blocks is a pessimistic assumption - compact blocks probably makes for a much lighter message most of the time. So I should walk back that \"5% global propagation slowdown\" concern as a little bombastic.\r\n\r\nPulling average cmpctblock message sizes from the same node(s), [we find that the average is ~21807 bytes, or 0.022MB](https://gist.github.com/jamesob/ddffb11bd9eaeb3acc2618915b36fa81). In that case, we're talking about a marginal V2 slowdown of 0.035ms, or 0.05% - which is much more palatable.\r\n\r\n> WDYT?\r\n\r\nFor me, V2 is a very important feature to get deployed. I would be hesitant to block the path to its deployment with items that are not themselves critical. So my assessment would be based on the particulars:\r\n\r\n- How much more complicated do you think a \"streaming\" API would be?\r\n  - What's the rough size of the diff from this change?\r\n- If a streaming API necessarily delays the authentication of messages, what does this mean for new DoS conditions?\r\n\r\n---\r\n\r\nBut I guess after realizing that the marginal delays we're talking about will be pretty much negligible for high-bandwidth compactblock receiving nodes, my vote is that we continue with this simple and more obviously correct/safe approach, and leave a streaming reimplementation for a later day - which presumably can be done without any protocol changes.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#issuecomment-1651836376",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28008"
    },
    {
      "event": "commented",
      "id": 1651962091,
      "node_id": "IC_kwDOABII585idvDr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1651962091",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-26T14:47:12Z",
      "updated_at": "2023-07-26T15:10:25Z",
      "author_association": "MEMBER",
      "body": "@jamesob Thanks for your comments, I think I largely agree.\r\n\r\nIt's a good observation that the case where a large non-compact block message is necessary for block connectivity is already fairly pessimal. Some more points to put this overhead in perspective:\r\n*  If you assume - say - a 1 Gbit/s connection, then receiving a byte takes 8 ns already, so adding 1.6 ns at most adds ~20% (regardless of whether the received data is short or big), and this ignores any other processing on top for the new block. \r\n* ~~This overhead inherently exists on the sender side in a way that cannot be avoided (as the block or whatever message is not constructed incrementally). So arguably, for the overall node-to-node latency, it's at worst a 10% overhead at 1 Gbit/s.~~ EDIT: Actually, no, streaming encryption is also possible, and possibly helpful.\r\n* We can probably bring that 1.6 ns number down by a factor 2x or 4x using machine-specific optimizations if need be (which will improve both sender and receiver).\r\n\r\n---\r\n\r\n> How much more complicated do you think a \"streaming\" API would be? \r\n\r\nIt'd consist of more functions, e.g. `StartEncrypt` / `StartDecrypt`, `EncryptData` / `DecryptData`, `FinishEncrypt` / `FinishDecrypt`, instead of functions that deal with the message in one go. On the other hand, it would allow dropping the functions that currently exist which accept a split buffer plaintext.\r\n\r\nI think most of the complexity would really be in designing them in a way that doesn't break abstractions too much. E.g. can you make it so that a caller does not need to know that the precisely first byte and last 16 bytes do not need a corresponding decryption buffer, for a BIP324 packet?\r\n\r\n> What's the rough size of the diff from this change?\r\n\r\nAlmost entirely in tests I think (and harder to understand API). The actual non-test code changes would be minimal, I expect.\r\n\r\n> If a streaming API necessarily delays the authentication of messages,\r\n\r\nQuite the opposite. A streaming API means that encryption/decryption (and authentication) state can be updated any time part of a message is processed/received. When the last bytes arrive, there would just be a finalization step, rather than needing to still perform the entire computation.\r\n\r\n> what does this mean for new DoS conditions?\r\n\r\nNothing, because semantically nothing changes. The conceptual behavior *must* be:\r\n* Message is received (in full).\r\n* Message is authenticated. If this fails, disconnect.\r\n* Message is decrypted, and released to the caller.\r\n\r\nIn a streaming setting, some of that decryption and authentication computation is done during the receiving, rather than sequentially. However, the overall behavior must still be indistinguishable from the receive/authenticate/decrypt sequence. In particular, the caller cannot take any action that depends on the decrypted message content before the entire message has been authenticated (otherwise you introduce a decryption oracle). This is I think the biggest concern with a streaming API: the caller immediately gets (parts of) the decrypted message back, but is not allowed to use/inspect them in any way before the full message has been processed.\r\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#issuecomment-1651962091",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28008"
    },
    {
      "event": "mentioned",
      "id": 9925198325,
      "node_id": "MEE_lADOABII585qMJPgzwAAAAJPloH1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9925198325",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-26T14:47:12Z"
    },
    {
      "event": "subscribed",
      "id": 9925198350,
      "node_id": "SE_lADOABII585qMJPgzwAAAAJPloIO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9925198350",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-26T14:47:12Z"
    },
    {
      "event": "commented",
      "id": 1652004878,
      "node_id": "IC_kwDOABII585id5gO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1652004878",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-26T15:10:33Z",
      "updated_at": "2023-07-26T15:10:33Z",
      "author_association": "MEMBER",
      "body": "> This is I think the biggest concern with a streaming API: the caller immediately gets (parts of) the decrypted message back, but is not allowed to use/inspect them in any way before the full message has been processed.\r\n\r\nSo just to be sure I understand, the risk is not any additional space requirement (since we need to buffer the full decrypted message anyway as things stand right now), but rather the risk of streaming is that the caller of this API will make some unwise use of a partially processed message before it has been proven to be authentic.\r\n\r\nIf correct, this strikes me as a pretty remote risk given that the consumption of this API is limited to our codebase and so it should be easy to make users aware of this caveat.\r\n\r\nAll that said, I still think we should proceed as-is, and I will continue review on this changeset.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#issuecomment-1652004878",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28008"
    },
    {
      "event": "commented",
      "id": 1652013883,
      "node_id": "IC_kwDOABII585id7s7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1652013883",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-26T15:15:26Z",
      "updated_at": "2023-07-26T15:15:54Z",
      "author_association": "MEMBER",
      "body": "> So just to be sure I understand, the risk is not any additional space requirement (since we need to buffer the full decrypted message anyway as things stand right now), but rather the risk of streaming is that the caller of this API will make some unwise use of a partially processed message before it has been proven to be authentic.\r\n\r\nYes.\r\n\r\n> If correct, this strikes me as a pretty remote risk given that the consumption of this API is limited to our codebase and so it should be easy to make users aware of this caveat.\r\n\r\nI have no doubt that we're able to write correct code that doesn't do anything wrong here. Still, it will make the code harder to understand for future contributors.\r\n\r\n> All that said, I still think we should proceed as-is, and I will continue review on this changeset.\r\n\r\nMakes sense.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#issuecomment-1652013883",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28008"
    },
    {
      "event": "reviewed",
      "id": 1548082611,
      "node_id": "PRR_kwDOABII585cRd2z",
      "url": null,
      "actor": null,
      "commit_id": "180909f2c859be3c79630d9705c26a457715b9ed",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 180909f2c859be3c79630d9705c26a457715b9ed ([`jamesob/ackr/28008.3.sipa.bip324_ciphersuite`](https://github.com/jamesob/bitcoin/tree/ackr/28008.3.sipa.bip324_ciphersuite))\r\n\r\nLooks great. I've spent about a week ramping up on BIP-324, reading the BIPs and underlying RFC 8439, asking @sipa stupid questions about the garbage terminator, and carefully reviewing the code in this pull request. I've verified the ChaCha20-Poly1305 test vectors against an unrelated implementation (Python's chacha20poly1305, in [this script](https://github.com/jamesob/bitcoin-review-data/blob/master/28008.sipa.bip324_ciphersuite/verifycrypto.py)).\r\n\r\nI haven't hand-verified the BIP-325 test vectors, but I have at least verified that they are a faithful reproduction of the same vectors used to validate the example BIP-0325 Python implementation, included in the BIPs repo. So at the very least, I have verified that this implementation is a faithful reproduction of the one sketched by the BIP.\r\n\r\nThe code looks very good, and is pretty easy to follow with minor cosmetic phrasing differences from the protocol flow described in the BIP. Outside of running tests, I haven't run this branch on mainnet simply because none of the changes really interface with live codepaths; this code will certainly be used in future BIP-325 related patches, which will merit live testing. I think it is sufficient to lean on the introduced test coverage to attest to the safety of this change.\r\n\r\n<details><summary>Show signature data</summary>\r\n<p>\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK 180909f2c859be3c79630d9705c26a457715b9ed ([`jamesob/ackr/28008.3.sipa.bip324_ciphersuite`](https://github.com/jamesob/bitcoin/tree/ackr/28008.3.sipa.bip324_ciphersuite))\r\n\r\nLooks great. I've spent about a week ramping up on BIP-324, reading the BIPs and underlying RFC 8439, asking @sipa stupid questions about the garbage terminator, and carefully reviewing the code in this pull request. I've verified the ChaCha20-Poly1305 test vectors against an unrelated implementation (Python's chacha20poly1305, in [this script](https://github.com/jamesob/bitcoin-review-data/blob/master/28008.sipa.bip324_ciphersuite/verifycrypto.py).\r\n\r\nI haven't hand-verified the BIP-325 test vectors, but I have at least verified that they are a faithful reproduction of the same vectors used to validate the example BIP-0325 Python implementation, included in the BIPs repo. So at the very least, I have verified that this implementation is a faithful reproduction of the one sketched by the BIP.\r\n\r\nThe code looks very good, and is pretty easy to follow with minor cosmetic phrasing differences from the protocol flow described in the BIP. Outside of running tests, I haven't run this branch on mainnet simply because none of the changes really interface with live codepaths; this code will certainly be used in future BIP-325 related patches, which will merit live testing. I think it is sufficient to lean on the introduced test coverage to attest to the safety of this change.\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQIzBAEBCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmTBf74ACgkQepNdrbLE\r\nTwVTEA/+OTunSNd8cy1tB+STraanydPQT1rrA4veCl+/h9ibFHn6c9Pn4HG1rp9k\r\ncVWzTlPyOfcMDk/iuRokKFVlr+Wa6dcZnPzVdBDM+2qzf89zgyYj9yWgIuPMEOYd\r\nGas3TC1msNAkDJmXH95UzwB4BGlemZPzMu6t1ybcYM3uEaPQWeG6xU36Izr+UdHm\r\npoPOOhPJcvSqLnvk1x0UfuYUPWSBog8XWiz2MLcH2e8AG+55JcAEUXCAZBVuaL52\r\ndPUW4WbYphjlBGyEW0JFTq/Euy2tCw14KFHCZ/T0Mhriz5OsXLWj4C+9MfOFRnce\r\nf85wGR62bpLICOmnWYfpKpbHPWzlmRTZ4r134R1dKjqwhUk8WKdm+HxWZLB0MVQS\r\nT7n8U3HIyzXF7cBNmi0V+t6ZT1ZXEMxG0dQhTe+3FEbq10wZt26nuTIeWETnFtZ6\r\n/2dm+3Z7xdCULkrH6IANt9dnpsqRD3IvQRmJuLlBSMNsbulIzLiWiaeLHWgxHcis\r\nZGN9Ki+KulvwR4JCwtKTluFWrLQZUSRhqK0I5LgUlJT4R53d/0E48LSqvO0r4QUq\r\nwe7dlJG+LaoS1brms80GlguqSrQ7ngWBNHi6k1V6yCJZfKV5ppGrdV8fRpz8fBE2\r\nesgxrh2yp1RA8SMGFh+k7yZ5RgoV36uZkERwfLMHdpkm/ZwHQH4=\r\n=H+8R\r\n-----END PGP SIGNATURE-----\r\n\r\n```\r\n\r\n</p></details>\r\n\r\n<details><summary>Show platform data</summary>\r\n<p>\r\n\r\n```\r\nTested on Linux-6.4.3-arch1-1-x86_64-with-glibc2.37\r\n\r\nConfigured with ./configure 'BDB_LIBS=-L/home/james/src/bitcoin/db4/lib -ldb_cxx-4.8' BDB_CFLAGS=-I/home/james/src/bitcoin/db4/include 'CXXFLAGS=-fPIE -pipe -O2 -g -Wthread-safety-analysis -Wall -Werror=sign-compare ' --disable-gui-tests --disable-fuzz-binary --enable-wallet --enable-debug --with-daemon --enable-natpmp-default\r\n\r\nCompiled with /usr/bin/ccache /usr/bin/clang++ -std=c++17 -mavx -mavx2 -mpclmul -fPIE -pipe -O2 -g -Wthread-safety-analysis -Wall -Werror=sign-compare  -O0 -g3 -ftrapv -fdebug-prefix-map=$(abs_top_srcdir)=.  -Wstack-protector -fstack-protector-all -fcf-protection=full -fstack-clash-protection -msse4.1 -msse4.2 -msse4 -msha  i\r\n\r\nCompiler version: clang version 15.0.7\r\n```\r\n\r\n</p></details>\r\n\r\n",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#pullrequestreview-1548082611",
      "submitted_at": "2023-07-26T20:19:15Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDlmZDA4NWExYTQ5ZDMxN2FiY2FmMTQ5MmI3MWM0OGJmMWExYjMwMDc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9fd085a1a49d317abcaf1492b71c48bf1a1b3007",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9fd085a1a49d317abcaf1492b71c48bf1a1b3007",
      "tree": {
        "sha": "411e70c5695ca7380ea0dc1bad3cbff2ea0e2ae4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/411e70c5695ca7380ea0dc1bad3cbff2ea0e2ae4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f57e724a809feb139c5ae71c4db65635427e4802",
          "sha": "f57e724a809feb139c5ae71c4db65635427e4802",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f57e724a809feb139c5ae71c4db65635427e4802"
        }
      ],
      "message": "crypto: remove outdated variant of ChaCha20Poly1305 AEAD\n\nRemove the variant of ChaCha20Poly1305 AEAD that was previously added in\nanticipation of BIP324 using it. BIP324 was updated to instead use rekeying\nwrappers around otherwise unmodified versions of the ChaCha20 stream cipher\nand the ChaCha20Poly1305 AEAD as specified in RFC8439.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-07-26T20:51:51Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-06-28T18:09:53Z"
      },
      "sha": "9fd085a1a49d317abcaf1492b71c48bf1a1b3007"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDlmZjA3NjhiZGNjYTA2ODM2Y2NjNjczZWFjZmE2NDhlODAxOTMwY2I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ff0768bdcca06836ccc673eacfa648e801930cb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9ff0768bdcca06836ccc673eacfa648e801930cb",
      "tree": {
        "sha": "d97a2ecfc83c0b889f0692921cc3b50febd39798",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d97a2ecfc83c0b889f0692921cc3b50febd39798"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9fd085a1a49d317abcaf1492b71c48bf1a1b3007",
          "sha": "9fd085a1a49d317abcaf1492b71c48bf1a1b3007",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9fd085a1a49d317abcaf1492b71c48bf1a1b3007"
        }
      ],
      "message": "crypto: add the ChaCha20Poly1305 AEAD as specified in RFC8439\n\nThis adds an implementation of the ChaCha20Poly1305 AEAD exactly matching\nthe version specified in RFC8439 section 2.8, including tests and official\ntest vectors.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-07-26T20:55:00Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-06-30T04:30:34Z"
      },
      "sha": "9ff0768bdcca06836ccc673eacfa648e801930cb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDBmZWUyNjc3OTJlYjhjYmRkNDhhZDc4ZjE3MTI0MjBiNWQ4ZDkwNWI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fee267792eb8cbdd48ad78f1712420b5d8d905b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0fee267792eb8cbdd48ad78f1712420b5d8d905b",
      "tree": {
        "sha": "bf815576f3aedf2b0ab5f3a98b6fd577110f2bc0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf815576f3aedf2b0ab5f3a98b6fd577110f2bc0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ff0768bdcca06836ccc673eacfa648e801930cb",
          "sha": "9ff0768bdcca06836ccc673eacfa648e801930cb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9ff0768bdcca06836ccc673eacfa648e801930cb"
        }
      ],
      "message": "crypto: add FSChaCha20, a rekeying wrapper around ChaCha20\n\nThis adds the FSChaCha20 stream cipher as specified in BIP324, a\nwrapper around the ChaCha20 stream cipher (specified in RFC8439\nsection 2.4) which automatically rekeys every N messages, and\nmanages the nonces used for encryption.\n\nCo-authored-by: dhruv <856960+dhruv@users.noreply.github.com>",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-07-26T20:55:05Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-06-28T22:20:30Z"
      },
      "sha": "0fee267792eb8cbdd48ad78f1712420b5d8d905b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFhOGNlZTkzMzQyZWU4NTc5MzFhZmVjOWFmM2ZmNWRiZDhjZTc3NDk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa8cee93342ee857931afec9af3ff5dbd8ce7749",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/aa8cee93342ee857931afec9af3ff5dbd8ce7749",
      "tree": {
        "sha": "3bc9c334f70cc1f6dbc02bd06785ccf2e4d3fc2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3bc9c334f70cc1f6dbc02bd06785ccf2e4d3fc2c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fee267792eb8cbdd48ad78f1712420b5d8d905b",
          "sha": "0fee267792eb8cbdd48ad78f1712420b5d8d905b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0fee267792eb8cbdd48ad78f1712420b5d8d905b"
        }
      ],
      "message": "crypto: add FSChaCha20Poly1305, rekeying wrapper around ChaCha20Poly1305\n\nThis adds the FSChaCha20Poly1305 AEAD as specified in BIP324, a wrapper\naround the ChaCha20Poly1305 AEAD (as specified in RFC8439 section 2.8) which\nautomatically rekeys every N messages, and automatically increments the nonce\nevery message.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-07-26T20:55:05Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-06-29T18:55:16Z"
      },
      "sha": "aa8cee93342ee857931afec9af3ff5dbd8ce7749"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFmMmI0NGM3NmU1ZGU4Y2U4ODAzODFlNTUzNWVhZDM3YWIwYjNiYTk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af2b44c76e5de8ce880381e5535ead37ab0b3ba9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/af2b44c76e5de8ce880381e5535ead37ab0b3ba9",
      "tree": {
        "sha": "3e5ecb06d2aeb6b01a0c540835f8e30db9b485c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e5ecb06d2aeb6b01a0c540835f8e30db9b485c2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa8cee93342ee857931afec9af3ff5dbd8ce7749",
          "sha": "aa8cee93342ee857931afec9af3ff5dbd8ce7749",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/aa8cee93342ee857931afec9af3ff5dbd8ce7749"
        }
      ],
      "message": "bench: add benchmark for FSChaCha20Poly1305\n\nAdd a benchmark for FSChaCha20Poly1305 encryption, so the overhead of key\ngeneration and authentication can be observed for various message sizes.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-07-26T20:55:05Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-06-30T17:06:54Z"
      },
      "sha": "af2b44c76e5de8ce880381e5535ead37ab0b3ba9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGM5MWNlZGYyODFlNTIwN2ZiNWZkMmNhODFmZWVjOTc2MGY3YzJlZDA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c91cedf281e5207fb5fd2ca81feec9760f7c2ed0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c91cedf281e5207fb5fd2ca81feec9760f7c2ed0",
      "tree": {
        "sha": "e15e37365ba600eacb06c7e147ce4aa18cd02fde",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e15e37365ba600eacb06c7e147ce4aa18cd02fde"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af2b44c76e5de8ce880381e5535ead37ab0b3ba9",
          "sha": "af2b44c76e5de8ce880381e5535ead37ab0b3ba9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/af2b44c76e5de8ce880381e5535ead37ab0b3ba9"
        }
      ],
      "message": "crypto: support split plaintext in ChaCha20Poly1305 Encrypt/Decrypt",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-07-26T21:00:22Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-07-07T00:40:20Z"
      },
      "sha": "c91cedf281e5207fb5fd2ca81feec9760f7c2ed0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDk5MGYwZjhkYTkyYTJkMTE4MjhhN2MwNWNhOTNiZjA1MjBiMmE5NWU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/990f0f8da92a2d11828a7c05ca93bf0520b2a95e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/990f0f8da92a2d11828a7c05ca93bf0520b2a95e",
      "tree": {
        "sha": "ff4be5b1637ac8dcf941f339b08bc167ffe84038",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff4be5b1637ac8dcf941f339b08bc167ffe84038"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c91cedf281e5207fb5fd2ca81feec9760f7c2ed0",
          "sha": "c91cedf281e5207fb5fd2ca81feec9760f7c2ed0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c91cedf281e5207fb5fd2ca81feec9760f7c2ed0"
        }
      ],
      "message": "Add BIP324Cipher, encapsulating key agreement, derivation, and stream/AEAD ciphers\n\nCo-authored-by: dhruv <856960+dhruv@users.noreply.github.com>",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-07-26T21:09:23Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-07-06T18:19:29Z"
      },
      "sha": "990f0f8da92a2d11828a7c05ca93bf0520b2a95e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFjNzU4MmVhZDZlMTExOTg5OTkyMjA0MWMxYWYyYjQxNjliMGJjNzQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c7582ead6e1119899922041c1af2b4169b0bc74",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1c7582ead6e1119899922041c1af2b4169b0bc74",
      "tree": {
        "sha": "62b62595c6148afa1ef56d0ccd4ba5d1c36a9aa7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/62b62595c6148afa1ef56d0ccd4ba5d1c36a9aa7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/990f0f8da92a2d11828a7c05ca93bf0520b2a95e",
          "sha": "990f0f8da92a2d11828a7c05ca93bf0520b2a95e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/990f0f8da92a2d11828a7c05ca93bf0520b2a95e"
        }
      ],
      "message": "tests: add decryption test to bip324_tests",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-07-26T21:09:27Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2023-07-10T14:58:20Z"
      },
      "sha": "1c7582ead6e1119899922041c1af2b4169b0bc74"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9928749446,
      "node_id": "HRFPE_lADOABII585qMJPgzwAAAAJPzLGG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9928749446",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-26T21:12:13Z"
    },
    {
      "event": "reviewed",
      "id": 1548892755,
      "node_id": "PRR_kwDOABII585cUjpT",
      "url": null,
      "actor": null,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Regarding the stream API discussion, I'd also prefer simplicity over efficiency for now and hence vote for keeping the implementation as-is; the potential advantage of \"slightly lower latency when receiving a large P2P message\" doesn't seem to outweigh the increased complexity / review power needed, even if it would mostly affect test code. @jamesob made some convincing points for that and I'm also sharing the following sentiment:\r\n> For me, V2 is a very important feature to get deployed. I would be hesitant to block the path to its deployment with items that are not themselves critical. \r\n\r\nBack to the actual code. Continued review from commit 5/8 (af2b44c76e5de8ce880381e5535ead37ab0b3ba9) onwards. Verified that the `BIP324Cipher` class implementation matches the BIP and also checked the corresponding test vectors by extending my own hacky Python implementation using PyCryptodome (for ChaCha20, ChaCha20Poly1305, SHA256 and HKDF with HMAC_SHA256) + ellswift from our test framework for (see updated gist https://gist.github.com/theStack/e910505e39204c695a073ccc6d63719a). \r\n\r\nPlanning another full review round over the next days, still have to look at the fuzz tests and the decryption error test cases.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#pullrequestreview-1548892755",
      "submitted_at": "2023-07-27T02:15:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
    },
    {
      "event": "reviewed",
      "id": 1550293430,
      "node_id": "PRR_kwDOABII585cZ5m2",
      "url": null,
      "actor": null,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "reACK 1c7582e\r\n\r\nBased on the interdiff (https://github.com/jamesob/bitcoin-review-data/blob/master/28008.sipa.bip324_ciphersuite/4.1c7582e/interdiff.3.180909f.diff), which contains the few minor changes @sipa has mentioned above (`const` declarations, doc adds, small refactors).\r\n\r\n> by extending my own hacky Python implementation using PyCryptodome (for ChaCha20, ChaCha20Poly1305, SHA256 and HKDF with HMAC_SHA256) + ellswift from our test framework for (see updated gist https://gist.github.com/theStack/e910505e39204c695a073ccc6d63719a).\r\n\r\nNice job @theStack! Less code necessary than I would've thought.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#pullrequestreview-1550293430",
      "submitted_at": "2023-07-27T16:34:12Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
    },
    {
      "event": "reviewed",
      "id": 1551988560,
      "node_id": "PRR_kwDOABII585cgXdQ",
      "url": null,
      "actor": null,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 1c7582ead6e1119899922041c1af2b4169b0bc74\r\n\r\nFinished reviewing. Code looks good to me, checked carefully that the implementation matches BIP324 and verified the test vectors (see above). :heavy_check_mark: ",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#pullrequestreview-1551988560",
      "submitted_at": "2023-07-28T12:11:38Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-01T17:56:59Z",
      "updated_at": "2023-08-01T17:56:59Z",
      "source": {
        "issue": {
          "id": 1831769418,
          "node_id": "PR_kwDOABII585W74nW",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28196",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28196/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28196/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28196/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28196",
          "number": 28196,
          "state": "open",
          "state_reason": null,
          "title": "BIP324 connection support",
          "body": "Builds on top of #28008 and #28165, and part of #27634. Draft while dependencies and (more) tests are missing.\r\n\r\nThis implements the BIP324 v2 transport and application layer. It is currently only accessible through the test-only `-bip324=` command-line option, which specifies IPs, host names, or subnets for which to use BIP324 connections. This option is only added in order to make experimentation possible; I don't expect it will be supported long-term (or should even remain in this PR).\r\n\r\nStill missing features are:\r\n* Support for the `NODE_P2P_V2` service flag.\r\n* Automatically trying V2 connections when the service flag is set.\r\n* Retrying downgrade to V1 when attempted outbound V2 connections immediately fail.\r\n* P2P functional tests (only a fuzz test for the transport is included, and a few bitcoind-to-bitcoind functional tests)\r\n\r\nOther than that, support for V2 connections is functionally complete, including:\r\n* Autodetection of incoming V1 connections.\r\n* Garbage, both sending and receiving.\r\n* Short message type IDs, both sending and receiving.\r\n* Ignore packets (receiving only, and untested).\r\n* Session IDs are visible in `getpeerinfo` output (for manual comparison).\r\n",
          "user": {
            "login": "sipa",
            "id": 548488,
            "node_id": "MDQ6VXNlcjU0ODQ4OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sipa",
            "html_url": "https://github.com/sipa",
            "followers_url": "https://api.github.com/users/sipa/followers",
            "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
            "organizations_url": "https://api.github.com/users/sipa/orgs",
            "repos_url": "https://api.github.com/users/sipa/repos",
            "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sipa/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 1,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28196",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28196",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28196.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28196.patch"
          },
          "created_at": "2023-08-01T17:56:58Z",
          "updated_at": "2023-08-03T17:07:32Z"
        },
        "type": "issue"
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268163179",
      "pull_request_review_id": 1537240624,
      "id": 1268163179,
      "node_id": "PRRC_kwDOABII585LlqJr",
      "diff_hunk": "@@ -0,0 +1,105 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20poly1305.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/chacha20.h>\n+#include <crypto/poly1305.h>\n+#include <span.h>\n+\n+#include <assert.h>\n+#include <cstdint>\n+#include <cstddef>\n+#include <iterator>\n+\n+AEADChaCha20Poly1305::AEADChaCha20Poly1305(Span<const std::byte> key) noexcept : m_chacha20(UCharCast(key.data()))\n+{\n+    assert(key.size() == KEYLEN);\n+}\n+\n+void AEADChaCha20Poly1305::SetKey(Span<const std::byte> key) noexcept\n+{\n+    assert(key.size() == KEYLEN);\n+    m_chacha20.SetKey32(UCharCast(key.data()));\n+}\n+\n+namespace {\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+#define HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n) noexcept\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif\n+\n+/** Write all tag data to poly1305 for an AEADChaCha20Poly1305 tag. */\n+void UpdateTag(Poly1305& poly1305, Span<const std::byte> aad, Span<const std::byte> cipher) noexcept\n+{\n+    static const std::byte PADDING[16] = {{}};\n+    // Process the padded AAD with Poly1305.\n+    poly1305.Update(aad);\n+    poly1305.Update(Span{PADDING}.first((16 - (aad.size() % 16)) % 16));\n+    // Process the padded ciphertext with Poly1305.\n+    poly1305.Update(cipher);\n+    poly1305.Update(Span{PADDING}.first((16 - (cipher.size() % 16)) % 16));\n+    // Process the AAD and plaintext length with Poly1305.\n+    std::byte length_desc[16];\n+    WriteLE64(UCharCast(length_desc), aad.size());\n+    WriteLE64(UCharCast(length_desc + 8), cipher.size());\n+    poly1305.Update(length_desc);\n+}\n+\n+} // namespace\n+\n+void AEADChaCha20Poly1305::Encrypt(Span<const std::byte> plain, Span<const std::byte> aad, Nonce96 nonce, Span<std::byte> cipher) noexcept\n+{\n+    assert(cipher.size() == plain.size() + EXPANSION);\n+\n+    // Encrypt using ChaCha20 (starting at index 1).\n+    m_chacha20.Seek64(nonce, 1);\n+    m_chacha20.Crypt(UCharCast(plain.data()), UCharCast(cipher.data()), plain.size());\n+\n+    // Get first block of keystream.\n+    std::byte first_block[64];\n+    m_chacha20.Seek64(nonce, 0);",
      "path": "src/crypto/chacha20poly1305.cpp",
      "position": 86,
      "original_position": 73,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "26a7c254dcb49a92070c88cc7963e4996cd9e7c7\r\n\r\n(Non-blocking note:) a little unexpected that this is written out of sequence with how it's described in [RFC 8439](https://datatracker.ietf.org/doc/html/rfc8439#section-2.8); \r\n\r\n> - First, a Poly1305 one-time key is generated from the 256-bit key and nonce using the procedure described in [Section 2.6](https://datatracker.ietf.org/doc/html/rfc8439#section-2.6).\r\n> - Next, the ChaCha20 encryption function is called to encrypt the plaintext, using the same key and nonce, and with the initial counter set to 1.\r\n\r\nNo harm in writing it this way, since a `Seek64()` resets any determinant state for `Keystream64()`/`Crypt64()`, but just had to squint for a few seconds to make sure it was okay.",
      "created_at": "2023-07-19T14:29:21Z",
      "updated_at": "2023-07-21T13:30:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1268163179",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268163179"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 86,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268282951",
      "pull_request_review_id": 1537240624,
      "id": 1268282951,
      "node_id": "PRRC_kwDOABII585LmHZH",
      "diff_hunk": "@@ -818,6 +837,61 @@ BOOST_AUTO_TEST_CASE(poly1305_testvector)\n                  \"0e410fa9d7a40ac582e77546be9a72bb\");\n }\n \n+BOOST_AUTO_TEST_CASE(chacha20poly1305_testvectors)\n+{\n+    // RFC 8439 Example from section 2.8.2\n+    TestChaCha20Poly1305(\"4c616469657320616e642047656e746c656d656e206f662074686520636c6173\"\n+                         \"73206f66202739393a204966204920636f756c64206f6666657220796f75206f\"\n+                         \"6e6c79206f6e652074697020666f7220746865206675747572652c2073756e73\"\n+                         \"637265656e20776f756c642062652069742e\",\n+                         \"50515253c0c1c2c3c4c5c6c7\",\n+                         \"808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9f\",\n+                         {7, 0x4746454443424140},",
      "path": "src/test/crypto_tests.cpp",
      "position": 197,
      "original_position": 46,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Note for reviewers that RFC test vectors use network byte order (big-endian); the `Nonce96` constructor here expects little-endian representation. Hence the reversal relative to RFC vectors.",
      "created_at": "2023-07-19T15:53:45Z",
      "updated_at": "2023-07-21T13:30:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1268282951",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268282951"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 976,
      "original_line": 976,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268291488",
      "pull_request_review_id": 1537240624,
      "id": 1268291488,
      "node_id": "PRRC_kwDOABII585LmJeg",
      "diff_hunk": "@@ -818,6 +837,61 @@ BOOST_AUTO_TEST_CASE(poly1305_testvector)\n                  \"0e410fa9d7a40ac582e77546be9a72bb\");\n }\n \n+BOOST_AUTO_TEST_CASE(chacha20poly1305_testvectors)\n+{\n+    // RFC 8439 Example from section 2.8.2\n+    TestChaCha20Poly1305(\"4c616469657320616e642047656e746c656d656e206f662074686520636c6173\"\n+                         \"73206f66202739393a204966204920636f756c64206f6666657220796f75206f\"\n+                         \"6e6c79206f6e652074697020666f7220746865206675747572652c2073756e73\"\n+                         \"637265656e20776f756c642062652069742e\",\n+                         \"50515253c0c1c2c3c4c5c6c7\",\n+                         \"808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9f\",\n+                         {7, 0x4746454443424140},\n+                         \"d31a8d34648e60db7b86afbc53ef7ec2a4aded51296e08fea9e2b5a736ee62d6\"\n+                         \"3dbea45e8ca9671282fafb69da92728b1a71de0a9e060b2905d6a5b67ecd3b36\"\n+                         \"92ddbd7f2d778b8c9803aee328091b58fab324e4fad675945585808b4831d7bc\"\n+                         \"3ff4def08e4b7a9de576d26586cec64b61161ae10b594f09e26a7e902ecbd060\"\n+                         \"0691\");",
      "path": "src/test/crypto_tests.cpp",
      "position": 202,
      "original_position": 51,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Note for reviewers that this ciphertext includes the Poly1305 tag; in the RFC, ciphertext vector omits the tag.",
      "created_at": "2023-07-19T16:00:43Z",
      "updated_at": "2023-07-21T14:04:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1268291488",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268291488"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 981,
      "original_line": 981,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269911157",
      "pull_request_review_id": 1539997888,
      "id": 1269911157,
      "node_id": "PRRC_kwDOABII585LsU51",
      "diff_hunk": "@@ -46,11 +47,11 @@ void UpdateTag(Poly1305& poly1305, Span<const std::byte> aad, Span<const std::by\n {\n     static const std::byte PADDING[16] = {{}};\n     // Process the padded AAD with Poly1305.\n-    poly1305.Update(aad);\n-    poly1305.Update(Span{PADDING}.first((16 - (aad.size() % 16)) % 16));\n+    unsigned aad_padding = (16 - (aad.size() % 16)) % 16;\n+    poly1305.Update(aad).Update(Span{PADDING}.first(aad_padding));\n     // Process the padded ciphertext with Poly1305.\n-    poly1305.Update(cipher);\n-    poly1305.Update(Span{PADDING}.first((16 - (cipher.size() % 16)) % 16));\n+    unsigned cipher_padding = (16 - (cipher.size() % 16)) % 16;\n+    poly1305.Update(cipher).Update(Span{PADDING}.first(cipher_padding));",
      "path": "src/crypto/chacha20poly1305.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "c61fa6ab5917f3745a917f4fc2f3a9e96629d5d9",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(in commit c61fa6ab5917f3745a917f4fc2f3a9e96629d5d9)\r\nnit: these refactoring changes in `UpdateTag` seem to be unrelated to FSChaCha20Poly1305, I think they can be already included the commit that introduces the ChaCha20Poly1305 AEAD (to avoid touching it again later and keep the diff small)? Also, `aad_padding` and `cipher_padding` could be const.",
      "created_at": "2023-07-20T20:03:29Z",
      "updated_at": "2023-07-20T21:32:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1269911157",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269911157"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": 49,
      "start_side": "LEFT",
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269960092",
      "pull_request_review_id": 1539997888,
      "id": 1269960092,
      "node_id": "PRRC_kwDOABII585Lsg2c",
      "diff_hunk": "@@ -0,0 +1,105 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20poly1305.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/chacha20.h>\n+#include <crypto/poly1305.h>\n+#include <span.h>\n+\n+#include <assert.h>\n+#include <cstdint>\n+#include <cstddef>\n+#include <iterator>\n+\n+AEADChaCha20Poly1305::AEADChaCha20Poly1305(Span<const std::byte> key) noexcept : m_chacha20(UCharCast(key.data()))\n+{\n+    assert(key.size() == KEYLEN);\n+}\n+\n+void AEADChaCha20Poly1305::SetKey(Span<const std::byte> key) noexcept\n+{\n+    assert(key.size() == KEYLEN);\n+    m_chacha20.SetKey32(UCharCast(key.data()));\n+}\n+\n+namespace {\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+#define HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n) noexcept\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif\n+\n+/** Write all tag data to poly1305 for an AEADChaCha20Poly1305 tag. */\n+void UpdateTag(Poly1305& poly1305, Span<const std::byte> aad, Span<const std::byte> cipher) noexcept\n+{\n+    static const std::byte PADDING[16] = {{}};\n+    // Process the padded AAD with Poly1305.\n+    poly1305.Update(aad);\n+    poly1305.Update(Span{PADDING}.first((16 - (aad.size() % 16)) % 16));\n+    // Process the padded ciphertext with Poly1305.\n+    poly1305.Update(cipher);\n+    poly1305.Update(Span{PADDING}.first((16 - (cipher.size() % 16)) % 16));\n+    // Process the AAD and plaintext length with Poly1305.\n+    std::byte length_desc[16];\n+    WriteLE64(UCharCast(length_desc), aad.size());\n+    WriteLE64(UCharCast(length_desc + 8), cipher.size());\n+    poly1305.Update(length_desc);\n+}\n+\n+} // namespace\n+\n+void AEADChaCha20Poly1305::Encrypt(Span<const std::byte> plain, Span<const std::byte> aad, Nonce96 nonce, Span<std::byte> cipher) noexcept\n+{\n+    assert(cipher.size() == plain.size() + EXPANSION);\n+\n+    // Encrypt using ChaCha20 (starting at index 1).\n+    m_chacha20.Seek64(nonce, 1);\n+    m_chacha20.Crypt(UCharCast(plain.data()), UCharCast(cipher.data()), plain.size());",
      "path": "src/crypto/chacha20poly1305.cpp",
      "position": null,
      "original_position": 69,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: could encrypt _after_ generating the poly1305 key to avoid having to `Seek64` twice, as the chacha20 object is already at the desired block count 1 after the `Keystream` call below (I think generate-poly1305-key -> encrypt -> compute tag is also the order as described in RFC8439). On the other hand, performance-wise it shouldn't make a difference as `Seek64` is quite cheap, and maybe it's even preferred to be explicit about the block counter instead. I haven't looked at any other ChaCha20Poly1305 AEAD implementation yet, so no idea what is common practice here. Just an idea.",
      "created_at": "2023-07-20T21:03:01Z",
      "updated_at": "2023-07-20T21:32:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1269960092",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269960092"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": 67,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269973943",
      "pull_request_review_id": 1539997888,
      "id": 1269973943,
      "node_id": "PRRC_kwDOABII585LskO3",
      "diff_hunk": "@@ -0,0 +1,105 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20poly1305.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/chacha20.h>\n+#include <crypto/poly1305.h>\n+#include <span.h>\n+\n+#include <assert.h>\n+#include <cstdint>\n+#include <cstddef>\n+#include <iterator>\n+\n+AEADChaCha20Poly1305::AEADChaCha20Poly1305(Span<const std::byte> key) noexcept : m_chacha20(UCharCast(key.data()))\n+{\n+    assert(key.size() == KEYLEN);\n+}\n+\n+void AEADChaCha20Poly1305::SetKey(Span<const std::byte> key) noexcept\n+{\n+    assert(key.size() == KEYLEN);\n+    m_chacha20.SetKey32(UCharCast(key.data()));\n+}\n+\n+namespace {\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+#define HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n) noexcept\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif\n+\n+/** Write all tag data to poly1305 for an AEADChaCha20Poly1305 tag. */\n+void UpdateTag(Poly1305& poly1305, Span<const std::byte> aad, Span<const std::byte> cipher) noexcept\n+{\n+    static const std::byte PADDING[16] = {{}};\n+    // Process the padded AAD with Poly1305.\n+    poly1305.Update(aad);\n+    poly1305.Update(Span{PADDING}.first((16 - (aad.size() % 16)) % 16));\n+    // Process the padded ciphertext with Poly1305.\n+    poly1305.Update(cipher);\n+    poly1305.Update(Span{PADDING}.first((16 - (cipher.size() % 16)) % 16));\n+    // Process the AAD and plaintext length with Poly1305.\n+    std::byte length_desc[16];\n+    WriteLE64(UCharCast(length_desc), aad.size());\n+    WriteLE64(UCharCast(length_desc + 8), cipher.size());\n+    poly1305.Update(length_desc);\n+}\n+\n+} // namespace\n+\n+void AEADChaCha20Poly1305::Encrypt(Span<const std::byte> plain, Span<const std::byte> aad, Nonce96 nonce, Span<std::byte> cipher) noexcept\n+{\n+    assert(cipher.size() == plain.size() + EXPANSION);\n+\n+    // Encrypt using ChaCha20 (starting at index 1).\n+    m_chacha20.Seek64(nonce, 1);\n+    m_chacha20.Crypt(UCharCast(plain.data()), UCharCast(cipher.data()), plain.size());\n+\n+    // Get first block of keystream.\n+    std::byte first_block[64];\n+    m_chacha20.Seek64(nonce, 0);\n+    m_chacha20.Keystream(UCharCast(first_block), sizeof(first_block));\n+    // Use the first 32 bytes of the first keystream block as poly1305 key.\n+    Poly1305 poly1305{Span{first_block}.first(Poly1305::KEYLEN)};",
      "path": "src/crypto/chacha20poly1305.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: it might be worth introducing a generate-poly1305-key helper (or even one that also does the tag computation already, given also aad and ciphertext) that can be called in Encrypt and Decrypt, to deduplicate code?",
      "created_at": "2023-07-20T21:14:19Z",
      "updated_at": "2023-07-20T21:32:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1269973943",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269973943"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": 71,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270122616",
      "pull_request_review_id": 1540313350,
      "id": 1270122616,
      "node_id": "PRRC_kwDOABII585LtIh4",
      "diff_hunk": "@@ -0,0 +1,105 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20poly1305.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/chacha20.h>\n+#include <crypto/poly1305.h>\n+#include <span.h>\n+\n+#include <assert.h>\n+#include <cstdint>\n+#include <cstddef>\n+#include <iterator>\n+\n+AEADChaCha20Poly1305::AEADChaCha20Poly1305(Span<const std::byte> key) noexcept : m_chacha20(UCharCast(key.data()))\n+{\n+    assert(key.size() == KEYLEN);\n+}\n+\n+void AEADChaCha20Poly1305::SetKey(Span<const std::byte> key) noexcept\n+{\n+    assert(key.size() == KEYLEN);\n+    m_chacha20.SetKey32(UCharCast(key.data()));\n+}\n+\n+namespace {\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+#define HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n) noexcept\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif\n+\n+/** Write all tag data to poly1305 for an AEADChaCha20Poly1305 tag. */\n+void UpdateTag(Poly1305& poly1305, Span<const std::byte> aad, Span<const std::byte> cipher) noexcept\n+{\n+    static const std::byte PADDING[16] = {{}};\n+    // Process the padded AAD with Poly1305.\n+    poly1305.Update(aad);\n+    poly1305.Update(Span{PADDING}.first((16 - (aad.size() % 16)) % 16));\n+    // Process the padded ciphertext with Poly1305.\n+    poly1305.Update(cipher);\n+    poly1305.Update(Span{PADDING}.first((16 - (cipher.size() % 16)) % 16));\n+    // Process the AAD and plaintext length with Poly1305.\n+    std::byte length_desc[16];\n+    WriteLE64(UCharCast(length_desc), aad.size());\n+    WriteLE64(UCharCast(length_desc + 8), cipher.size());\n+    poly1305.Update(length_desc);\n+}\n+\n+} // namespace\n+\n+void AEADChaCha20Poly1305::Encrypt(Span<const std::byte> plain, Span<const std::byte> aad, Nonce96 nonce, Span<std::byte> cipher) noexcept\n+{\n+    assert(cipher.size() == plain.size() + EXPANSION);\n+\n+    // Encrypt using ChaCha20 (starting at index 1).\n+    m_chacha20.Seek64(nonce, 1);\n+    m_chacha20.Crypt(UCharCast(plain.data()), UCharCast(cipher.data()), plain.size());\n+\n+    // Get first block of keystream.\n+    std::byte first_block[64];\n+    m_chacha20.Seek64(nonce, 0);\n+    m_chacha20.Keystream(UCharCast(first_block), sizeof(first_block));\n+    // Use the first 32 bytes of the first keystream block as poly1305 key.\n+    Poly1305 poly1305{Span{first_block}.first(Poly1305::KEYLEN)};",
      "path": "src/crypto/chacha20poly1305.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "in_reply_to_id": 1269973943,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, I've replaced `UpdateTag` with `ComputeTag`, which does the whole tag calculation, including poly1305 key generation.",
      "created_at": "2023-07-21T00:30:45Z",
      "updated_at": "2023-07-21T00:30:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270122616",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270122616"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": 71,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270123417",
      "pull_request_review_id": 1540314352,
      "id": 1270123417,
      "node_id": "PRRC_kwDOABII585LtIuZ",
      "diff_hunk": "@@ -0,0 +1,105 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20poly1305.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/chacha20.h>\n+#include <crypto/poly1305.h>\n+#include <span.h>\n+\n+#include <assert.h>\n+#include <cstdint>\n+#include <cstddef>\n+#include <iterator>\n+\n+AEADChaCha20Poly1305::AEADChaCha20Poly1305(Span<const std::byte> key) noexcept : m_chacha20(UCharCast(key.data()))\n+{\n+    assert(key.size() == KEYLEN);\n+}\n+\n+void AEADChaCha20Poly1305::SetKey(Span<const std::byte> key) noexcept\n+{\n+    assert(key.size() == KEYLEN);\n+    m_chacha20.SetKey32(UCharCast(key.data()));\n+}\n+\n+namespace {\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+#define HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n) noexcept\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif\n+\n+/** Write all tag data to poly1305 for an AEADChaCha20Poly1305 tag. */\n+void UpdateTag(Poly1305& poly1305, Span<const std::byte> aad, Span<const std::byte> cipher) noexcept\n+{\n+    static const std::byte PADDING[16] = {{}};\n+    // Process the padded AAD with Poly1305.\n+    poly1305.Update(aad);\n+    poly1305.Update(Span{PADDING}.first((16 - (aad.size() % 16)) % 16));\n+    // Process the padded ciphertext with Poly1305.\n+    poly1305.Update(cipher);\n+    poly1305.Update(Span{PADDING}.first((16 - (cipher.size() % 16)) % 16));\n+    // Process the AAD and plaintext length with Poly1305.\n+    std::byte length_desc[16];\n+    WriteLE64(UCharCast(length_desc), aad.size());\n+    WriteLE64(UCharCast(length_desc + 8), cipher.size());\n+    poly1305.Update(length_desc);\n+}\n+\n+} // namespace\n+\n+void AEADChaCha20Poly1305::Encrypt(Span<const std::byte> plain, Span<const std::byte> aad, Nonce96 nonce, Span<std::byte> cipher) noexcept\n+{\n+    assert(cipher.size() == plain.size() + EXPANSION);\n+\n+    // Encrypt using ChaCha20 (starting at index 1).\n+    m_chacha20.Seek64(nonce, 1);\n+    m_chacha20.Crypt(UCharCast(plain.data()), UCharCast(cipher.data()), plain.size());",
      "path": "src/crypto/chacha20poly1305.cpp",
      "position": null,
      "original_position": 69,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "in_reply_to_id": 1269960092,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I believe it's better not to do that, though it really doesn't matter much.\r\n\r\nThe reason is that if we'd start by generating the key, we'd have to store that key in memory somewhere, leave it there for the whole encryption, then fetch it again (at which point it's quite possibly gone from CPU caches) to compute the tag. By seeking and deriving at the end, we only need the chacha20 key/state, which is likely still hot at that point (as it's needed every 64 bytes of encryption). And the seeking itself is trivial.",
      "created_at": "2023-07-21T00:32:42Z",
      "updated_at": "2023-07-21T00:32:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270123417",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270123417"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": 67,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270123471",
      "pull_request_review_id": 1540314438,
      "id": 1270123471,
      "node_id": "PRRC_kwDOABII585LtIvP",
      "diff_hunk": "@@ -46,11 +47,11 @@ void UpdateTag(Poly1305& poly1305, Span<const std::byte> aad, Span<const std::by\n {\n     static const std::byte PADDING[16] = {{}};\n     // Process the padded AAD with Poly1305.\n-    poly1305.Update(aad);\n-    poly1305.Update(Span{PADDING}.first((16 - (aad.size() % 16)) % 16));\n+    unsigned aad_padding = (16 - (aad.size() % 16)) % 16;\n+    poly1305.Update(aad).Update(Span{PADDING}.first(aad_padding));\n     // Process the padded ciphertext with Poly1305.\n-    poly1305.Update(cipher);\n-    poly1305.Update(Span{PADDING}.first((16 - (cipher.size() % 16)) % 16));\n+    unsigned cipher_padding = (16 - (cipher.size() % 16)) % 16;\n+    poly1305.Update(cipher).Update(Span{PADDING}.first(cipher_padding));",
      "path": "src/crypto/chacha20poly1305.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "c61fa6ab5917f3745a917f4fc2f3a9e96629d5d9",
      "in_reply_to_id": 1269911157,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2023-07-21T00:32:51Z",
      "updated_at": "2023-07-21T00:32:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270123471",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270123471"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": 49,
      "start_side": "LEFT",
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270710501",
      "pull_request_review_id": 1541213348,
      "id": 1270710501,
      "node_id": "PRRC_kwDOABII585LvYDl",
      "diff_hunk": "@@ -818,6 +837,61 @@ BOOST_AUTO_TEST_CASE(poly1305_testvector)\n                  \"0e410fa9d7a40ac582e77546be9a72bb\");\n }\n \n+BOOST_AUTO_TEST_CASE(chacha20poly1305_testvectors)\n+{\n+    // RFC 8439 Example from section 2.8.2\n+    TestChaCha20Poly1305(\"4c616469657320616e642047656e746c656d656e206f662074686520636c6173\"\n+                         \"73206f66202739393a204966204920636f756c64206f6666657220796f75206f\"\n+                         \"6e6c79206f6e652074697020666f7220746865206675747572652c2073756e73\"\n+                         \"637265656e20776f756c642062652069742e\",\n+                         \"50515253c0c1c2c3c4c5c6c7\",\n+                         \"808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9f\",\n+                         {7, 0x4746454443424140},",
      "path": "src/test/crypto_tests.cpp",
      "position": 197,
      "original_position": 46,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "in_reply_to_id": 1268282951,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Note for reviewers that RFC test vectors use network byte order (big-endian);\r\n\r\nThat's not really accurate. The RFC (and its test vectors) see the nonce as a 12-byte array, not as a number that needs encoding. If anything, it assumes little-endian encoding (see https://datatracker.ietf.org/doc/html/rfc8439#section-2.3, \"A 96-bit nonce, treated as a concatenation of three 32-bit little-endian integers.\").\r\n\r\n> the Nonce96 constructor here expects little-endian representation.\r\n\r\nThe Nonce96 type here is indeed a pair of 32-bit and 64-bit integers which are serialized in little-endian notation to obtain the 12-byte array nonce in the RFC8439 sense.\r\n\r\n>  Hence the reversal relative to RFC vectors.\r\n\r\nThe reversal is actually due to the fact that integer constants in C++ (and in English...) are written in big-endian. After that point, everything in the code and the spec are little-endian.",
      "created_at": "2023-07-21T13:59:05Z",
      "updated_at": "2023-07-21T14:06:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270710501",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270710501"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 976,
      "original_line": 976,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270711568",
      "pull_request_review_id": 1541215141,
      "id": 1270711568,
      "node_id": "PRRC_kwDOABII585LvYUQ",
      "diff_hunk": "@@ -0,0 +1,105 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20poly1305.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/chacha20.h>\n+#include <crypto/poly1305.h>\n+#include <span.h>\n+\n+#include <assert.h>\n+#include <cstdint>\n+#include <cstddef>\n+#include <iterator>\n+\n+AEADChaCha20Poly1305::AEADChaCha20Poly1305(Span<const std::byte> key) noexcept : m_chacha20(UCharCast(key.data()))\n+{\n+    assert(key.size() == KEYLEN);\n+}\n+\n+void AEADChaCha20Poly1305::SetKey(Span<const std::byte> key) noexcept\n+{\n+    assert(key.size() == KEYLEN);\n+    m_chacha20.SetKey32(UCharCast(key.data()));\n+}\n+\n+namespace {\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+#define HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n) noexcept\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif\n+\n+/** Write all tag data to poly1305 for an AEADChaCha20Poly1305 tag. */\n+void UpdateTag(Poly1305& poly1305, Span<const std::byte> aad, Span<const std::byte> cipher) noexcept\n+{\n+    static const std::byte PADDING[16] = {{}};\n+    // Process the padded AAD with Poly1305.\n+    poly1305.Update(aad);\n+    poly1305.Update(Span{PADDING}.first((16 - (aad.size() % 16)) % 16));\n+    // Process the padded ciphertext with Poly1305.\n+    poly1305.Update(cipher);\n+    poly1305.Update(Span{PADDING}.first((16 - (cipher.size() % 16)) % 16));\n+    // Process the AAD and plaintext length with Poly1305.\n+    std::byte length_desc[16];\n+    WriteLE64(UCharCast(length_desc), aad.size());\n+    WriteLE64(UCharCast(length_desc + 8), cipher.size());\n+    poly1305.Update(length_desc);\n+}\n+\n+} // namespace\n+\n+void AEADChaCha20Poly1305::Encrypt(Span<const std::byte> plain, Span<const std::byte> aad, Nonce96 nonce, Span<std::byte> cipher) noexcept\n+{\n+    assert(cipher.size() == plain.size() + EXPANSION);\n+\n+    // Encrypt using ChaCha20 (starting at index 1).\n+    m_chacha20.Seek64(nonce, 1);\n+    m_chacha20.Crypt(UCharCast(plain.data()), UCharCast(cipher.data()), plain.size());\n+\n+    // Get first block of keystream.\n+    std::byte first_block[64];\n+    m_chacha20.Seek64(nonce, 0);",
      "path": "src/crypto/chacha20poly1305.cpp",
      "position": 86,
      "original_position": 73,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "in_reply_to_id": 1268163179,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I believe this may be clearer now that it's been rewritten. Also see https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270123417 for a rationale, if you're curious.",
      "created_at": "2023-07-21T14:00:04Z",
      "updated_at": "2023-07-21T14:08:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270711568",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270711568"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 86,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270921379",
      "pull_request_review_id": 1541557139,
      "id": 1270921379,
      "node_id": "PRRC_kwDOABII585LwLij",
      "diff_hunk": "@@ -818,6 +837,61 @@ BOOST_AUTO_TEST_CASE(poly1305_testvector)\n                  \"0e410fa9d7a40ac582e77546be9a72bb\");\n }\n \n+BOOST_AUTO_TEST_CASE(chacha20poly1305_testvectors)\n+{\n+    // RFC 8439 Example from section 2.8.2\n+    TestChaCha20Poly1305(\"4c616469657320616e642047656e746c656d656e206f662074686520636c6173\"\n+                         \"73206f66202739393a204966204920636f756c64206f6666657220796f75206f\"\n+                         \"6e6c79206f6e652074697020666f7220746865206675747572652c2073756e73\"\n+                         \"637265656e20776f756c642062652069742e\",\n+                         \"50515253c0c1c2c3c4c5c6c7\",\n+                         \"808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9f\",\n+                         {7, 0x4746454443424140},\n+                         \"d31a8d34648e60db7b86afbc53ef7ec2a4aded51296e08fea9e2b5a736ee62d6\"\n+                         \"3dbea45e8ca9671282fafb69da92728b1a71de0a9e060b2905d6a5b67ecd3b36\"\n+                         \"92ddbd7f2d778b8c9803aee328091b58fab324e4fad675945585808b4831d7bc\"\n+                         \"3ff4def08e4b7a9de576d26586cec64b61161ae10b594f09e26a7e902ecbd060\"\n+                         \"0691\");",
      "path": "src/test/crypto_tests.cpp",
      "position": 202,
      "original_position": 51,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "in_reply_to_id": 1268291488,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, it gives the tag separately; the RFC doesn't actually require the tag to be sent at the end.",
      "created_at": "2023-07-21T17:32:42Z",
      "updated_at": "2023-07-21T17:32:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270921379",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270921379"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 981,
      "original_line": 981,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270948739",
      "pull_request_review_id": 1541600581,
      "id": 1270948739,
      "node_id": "PRRC_kwDOABII585LwSOD",
      "diff_hunk": "@@ -0,0 +1,142 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20poly1305.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/chacha20.h>\n+#include <crypto/poly1305.h>\n+#include <span.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <cstdint>\n+#include <cstddef>\n+#include <iterator>\n+\n+AEADChaCha20Poly1305::AEADChaCha20Poly1305(Span<const std::byte> key) noexcept : m_chacha20(UCharCast(key.data()))\n+{\n+    assert(key.size() == KEYLEN);\n+}\n+\n+void AEADChaCha20Poly1305::SetKey(Span<const std::byte> key) noexcept\n+{\n+    assert(key.size() == KEYLEN);\n+    m_chacha20.SetKey32(UCharCast(key.data()));\n+}\n+\n+namespace {\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+#define HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n) noexcept\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif\n+\n+/** Compute poly1305 thag. chacha20 must be set to the right nonce, block 0. Will be at block 1 after. */",
      "path": "src/crypto/chacha20poly1305.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "cacc8fe2b59e45cde248a031c5ebbf9ec39c5b8f\r\n\r\n\"thag.\" Sounds Nordic.",
      "created_at": "2023-07-21T18:04:24Z",
      "updated_at": "2023-07-25T16:20:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270948739",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270948739"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270986511",
      "pull_request_review_id": 1541600581,
      "id": 1270986511,
      "node_id": "PRRC_kwDOABII585LwbcP",
      "diff_hunk": "@@ -98,4 +108,43 @@ class ChaCha20\n     void Crypt(const unsigned char* input, unsigned char* output, size_t bytes);\n };\n \n+/** Forward-secure ChaCha20\n+ *\n+ * This implements a stream cipher that automatically transitions to a new stream with a new key\n+ * and new nonce after a predefined number of encryptions or decryptions.\n+ *\n+ * See BIP324 for details.\n+ */\n+class FSChaCha20\n+{\n+private:\n+    /** Internal stream cipher. */\n+    ChaCha20 m_chacha20;\n+\n+    /** The number of encryptions/decryptions before a rekey happens. */\n+    const uint32_t m_rekey_interval;\n+\n+    /** The number of encryptions/decryptions since the last rekey. */\n+    uint32_t m_chunk_counter{0};\n+\n+    /** The number of rekey operations that have happened. */\n+    uint64_t m_rekey_counter{0};\n+\n+public:\n+    /** Length of keys expected by the constructor. */\n+    static constexpr unsigned KEYLEN = 32;",
      "path": "src/crypto/chacha20.h",
      "position": 59,
      "original_position": 59,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "5e0ca4ba371570d1a5275c5a79bc0c1253d97ead",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "5e0ca4ba371570d1a5275c5a79bc0c1253d97ead\r\n\r\nOdd to me that `KEYLEN` doesn't live higher up in the class hierarchy, since the other `ChaCha20*` only deal in 32-byte keys, but definitely not a big deal.",
      "created_at": "2023-07-21T18:52:39Z",
      "updated_at": "2023-07-25T16:20:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270986511",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270986511"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 135,
      "original_line": 135,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1271064136",
      "pull_request_review_id": 1541600581,
      "id": 1271064136,
      "node_id": "PRRC_kwDOABII585LwuZI",
      "diff_hunk": "@@ -255,20 +255,37 @@ static void TestChaCha20Poly1305(const std::string& plain_hex, const std::string\n     auto key = ParseHex<std::byte>(key_hex);\n     auto expected_cipher = ParseHex<std::byte>(cipher_hex);\n \n-    std::vector<std::byte> cipher(plain.size() + AEADChaCha20Poly1305::EXPANSION);\n-    AEADChaCha20Poly1305 aead{key};\n-    aead.Encrypt(plain, aad, nonce, cipher);\n-    BOOST_CHECK(cipher == expected_cipher);\n+    for (int i = 0; i < 10; ++i) {\n+        // During i=0, use single-plain Encrypt/Decrypt; others use a split at prefix.\n+        size_t prefix = i ? InsecureRandRange(plain.size() + 1) : plain.size();\n+        // Encrypt.\n+        std::vector<std::byte> cipher(plain.size() + AEADChaCha20Poly1305::EXPANSION);\n+        AEADChaCha20Poly1305 aead{key};\n+        if (i == 0) {\n+            aead.Encrypt(plain, aad, nonce, cipher);\n+        } else {\n+            aead.Encrypt(Span{plain}.first(prefix), Span{plain}.subspan(prefix), aad, nonce, cipher);\n+        }\n+        BOOST_CHECK(cipher == expected_cipher);\n \n-    std::vector<std::byte> decipher(cipher.size() - AEADChaCha20Poly1305::EXPANSION);\n-    bool ret = aead.Decrypt(cipher, aad, nonce, decipher);\n-    BOOST_CHECK(ret);\n-    BOOST_CHECK(decipher == plain);\n+        // Decrypt.\n+        std::vector<std::byte> decipher(cipher.size() - AEADChaCha20Poly1305::EXPANSION);\n+        bool ret{false};\n+        if (i == 0) {\n+            ret = aead.Decrypt(cipher, aad, nonce, decipher);\n+        } else {\n+            ret = aead.Decrypt(cipher, aad, nonce, Span{decipher}.first(prefix), Span{decipher}.subspan(prefix));\n+        }\n+        BOOST_CHECK(ret);\n+        BOOST_CHECK(decipher == plain);\n+    }\n \n+    // Test Keystream output.\n     std::vector<std::byte> keystream(plain.size());\n+    AEADChaCha20Poly1305 aead{key};\n     aead.Keystream(nonce, keystream);\n     for (size_t i = 0; i < plain.size(); ++i) {\n-        BOOST_CHECK_EQUAL(plain[i] ^ keystream[i], cipher[i]);\n+        BOOST_CHECK((plain[i] ^ keystream[i]) == expected_cipher[i]);",
      "path": "src/test/crypto_tests.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "df4303b996f8b4f095de18edd7d3dbe281b5f124",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "df4303b996f8b4f095de18edd7d3dbe281b5f124\r\n\r\nIf you have to retouch, maybe worth keeping the `BOOST_CHECK_EQUAL` (which compiles for me okay) since it'll give a printout of the mismatch.",
      "created_at": "2023-07-21T20:19:42Z",
      "updated_at": "2023-07-25T16:20:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1271064136",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1271064136"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 288,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1271193421",
      "pull_request_review_id": 1541993939,
      "id": 1271193421,
      "node_id": "PRRC_kwDOABII585LxN9N",
      "diff_hunk": "@@ -89,9 +92,67 @@ void TestBIP324PacketVector(\n     BOOST_CHECK(ciphertext.size() >= out_ciphertext_endswith.size());\n     BOOST_CHECK(Span{out_ciphertext_endswith} == Span{ciphertext}.last(out_ciphertext_endswith.size()));\n \n-    // Note that we don't test decryption here, as the test vectors don't provide the other party's\n-    // private key, so we cannot act like them. See the bip324_cipher_roundtrip fuzz test for a test\n-    // that does cover decryption.\n+    for (unsigned error = 0; error <= 11; ++error) {",
      "path": "src/test/bip324_tests.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "off-by-one, the \"message index wrong\" kind of error type (error=12) is currently not tested:\r\n```suggestion\r\n    for (unsigned error = 0; error <= 12; ++error) {\r\n```\r\n(to avoid issues like this, could add an enum with error types and give the highest error sth like ERROR_HIGHEST, to be used in the loop counter, but that's probably overkill)",
      "created_at": "2023-07-22T01:15:49Z",
      "updated_at": "2023-07-22T01:15:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1271193421",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1271193421"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1271567848",
      "pull_request_review_id": 1542406892,
      "id": 1271567848,
      "node_id": "PRRC_kwDOABII585LypXo",
      "diff_hunk": "@@ -151,3 +153,23 @@ FUZZ_TARGET(chacha20_split_keystream)\n     FuzzedDataProvider provider{buffer.data(), buffer.size()};\n     ChaCha20SplitFuzz<false>(provider);\n }\n+\n+FUZZ_TARGET(crypto_fschacha20)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    auto key = fuzzed_data_provider.ConsumeBytes<std::byte>(FSChaCha20::KEYLEN);\n+    key.resize(FSChaCha20::KEYLEN);\n+    auto salt = fuzzed_data_provider.ConsumeBytes<std::byte>(FSChaCha20::KEYLEN);\n+    salt.resize(FSChaCha20::KEYLEN);",
      "path": "src/test/fuzz/crypto_chacha20.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "5e0ca4ba371570d1a5275c5a79bc0c1253d97ead",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`salt` is currently not used anywhere.",
      "created_at": "2023-07-23T22:22:00Z",
      "updated_at": "2023-07-23T22:22:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1271567848",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1271567848"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": 163,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272387005",
      "pull_request_review_id": 1543685119,
      "id": 1272387005,
      "node_id": "PRRC_kwDOABII585L1xW9",
      "diff_hunk": "@@ -151,3 +153,23 @@ FUZZ_TARGET(chacha20_split_keystream)\n     FuzzedDataProvider provider{buffer.data(), buffer.size()};\n     ChaCha20SplitFuzz<false>(provider);\n }\n+\n+FUZZ_TARGET(crypto_fschacha20)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    auto key = fuzzed_data_provider.ConsumeBytes<std::byte>(FSChaCha20::KEYLEN);\n+    key.resize(FSChaCha20::KEYLEN);\n+    auto salt = fuzzed_data_provider.ConsumeBytes<std::byte>(FSChaCha20::KEYLEN);\n+    salt.resize(FSChaCha20::KEYLEN);",
      "path": "src/test/fuzz/crypto_chacha20.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "5e0ca4ba371570d1a5275c5a79bc0c1253d97ead",
      "in_reply_to_id": 1271567848,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No idea where this came from. Fixed.",
      "created_at": "2023-07-24T14:59:17Z",
      "updated_at": "2023-07-24T14:59:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1272387005",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272387005"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": 163,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272387694",
      "pull_request_review_id": 1543686298,
      "id": 1272387694,
      "node_id": "PRRC_kwDOABII585L1xhu",
      "diff_hunk": "@@ -89,9 +92,67 @@ void TestBIP324PacketVector(\n     BOOST_CHECK(ciphertext.size() >= out_ciphertext_endswith.size());\n     BOOST_CHECK(Span{out_ciphertext_endswith} == Span{ciphertext}.last(out_ciphertext_endswith.size()));\n \n-    // Note that we don't test decryption here, as the test vectors don't provide the other party's\n-    // private key, so we cannot act like them. See the bip324_cipher_roundtrip fuzz test for a test\n-    // that does cover decryption.\n+    for (unsigned error = 0; error <= 11; ++error) {",
      "path": "src/test/bip324_tests.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "in_reply_to_id": 1271193421,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.\r\n\r\nI've chosen not to introduce an enum, because it's not a very good with with the multiple bit error cases.",
      "created_at": "2023-07-24T14:59:51Z",
      "updated_at": "2023-07-24T14:59:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1272387694",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272387694"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1273858928",
      "pull_request_review_id": 1545982178,
      "id": 1273858928,
      "node_id": "PRRC_kwDOABII585L7Ytw",
      "diff_hunk": "@@ -98,4 +108,43 @@ class ChaCha20\n     void Crypt(const unsigned char* input, unsigned char* output, size_t bytes);\n };\n \n+/** Forward-secure ChaCha20\n+ *\n+ * This implements a stream cipher that automatically transitions to a new stream with a new key\n+ * and new nonce after a predefined number of encryptions or decryptions.\n+ *\n+ * See BIP324 for details.\n+ */\n+class FSChaCha20\n+{\n+private:\n+    /** Internal stream cipher. */\n+    ChaCha20 m_chacha20;\n+\n+    /** The number of encryptions/decryptions before a rekey happens. */\n+    const uint32_t m_rekey_interval;\n+\n+    /** The number of encryptions/decryptions since the last rekey. */\n+    uint32_t m_chunk_counter{0};\n+\n+    /** The number of rekey operations that have happened. */\n+    uint64_t m_rekey_counter{0};\n+\n+public:\n+    /** Length of keys expected by the constructor. */\n+    static constexpr unsigned KEYLEN = 32;",
      "path": "src/crypto/chacha20.h",
      "position": 59,
      "original_position": 59,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "5e0ca4ba371570d1a5275c5a79bc0c1253d97ead",
      "in_reply_to_id": 1270986511,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "See #28100, which modernizes `class ChaCha20` too.",
      "created_at": "2023-07-25T17:13:59Z",
      "updated_at": "2023-07-25T17:13:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1273858928",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1273858928"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 135,
      "original_line": 135,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275173737",
      "pull_request_review_id": 1548082611,
      "id": 1275173737,
      "node_id": "PRRC_kwDOABII585MAZtp",
      "diff_hunk": "@@ -0,0 +1,238 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bip324.h>\n+#include <chainparams.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+#include <util/strencodings.h>\n+\n+#include <array>\n+#include <vector>\n+#include <cstddef>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+namespace {\n+\n+void TestBIP324PacketVector(\n+    uint32_t in_idx,\n+    const std::string& in_priv_ours_hex,\n+    const std::string& in_ellswift_ours_hex,\n+    const std::string& in_ellswift_theirs_hex,\n+    bool in_initiating,\n+    const std::string& in_contents_hex,\n+    uint32_t in_multiply,\n+    const std::string& in_aad_hex,\n+    bool in_ignore,\n+    const std::string& mid_send_garbage_hex,\n+    const std::string& mid_recv_garbage_hex,\n+    const std::string& out_session_id_hex,\n+    const std::string& out_ciphertext_hex,\n+    const std::string& out_ciphertext_endswith_hex)\n+{\n+    // Convert input from hex to char/byte vectors/arrays.\n+    auto in_priv_ours = ParseHex(in_priv_ours_hex);\n+    auto in_ellswift_ours_vec = ParseHex<std::byte>(in_ellswift_ours_hex);\n+    assert(in_ellswift_ours_vec.size() == 64);\n+    std::array<std::byte, 64> in_ellswift_ours;\n+    std::copy(in_ellswift_ours_vec.begin(), in_ellswift_ours_vec.end(), in_ellswift_ours.begin());\n+    auto in_ellswift_theirs_vec = ParseHex<std::byte>(in_ellswift_theirs_hex);\n+    assert(in_ellswift_theirs_vec.size() == 64);\n+    std::array<std::byte, 64> in_ellswift_theirs;\n+    std::copy(in_ellswift_theirs_vec.begin(), in_ellswift_theirs_vec.end(), in_ellswift_theirs.begin());\n+    auto in_contents = ParseHex<std::byte>(in_contents_hex);\n+    auto in_aad = ParseHex<std::byte>(in_aad_hex);\n+    auto mid_send_garbage = ParseHex<std::byte>(mid_send_garbage_hex);\n+    auto mid_recv_garbage = ParseHex<std::byte>(mid_recv_garbage_hex);\n+    auto out_session_id = ParseHex<std::byte>(out_session_id_hex);\n+    auto out_ciphertext = ParseHex<std::byte>(out_ciphertext_hex);\n+    auto out_ciphertext_endswith = ParseHex<std::byte>(out_ciphertext_endswith_hex);",
      "path": "src/test/bip324_tests.cpp",
      "position": null,
      "original_position": 53,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "9e65744c4f44ce89f3176870d3cc25ac2b6bdc08",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "9e65744c4f44ce89f3176870d3cc25ac2b6bdc08\r\n\r\nOnly if you retouch, might be nice to declare the values that don't change here as `const auto`.",
      "created_at": "2023-07-26T15:48:56Z",
      "updated_at": "2023-07-26T20:19:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275173737",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275173737"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275238979",
      "pull_request_review_id": 1548082611,
      "id": 1275238979,
      "node_id": "PRRC_kwDOABII585MAppD",
      "diff_hunk": "@@ -0,0 +1,238 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bip324.h>\n+#include <chainparams.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+#include <util/strencodings.h>\n+\n+#include <array>\n+#include <vector>\n+#include <cstddef>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+namespace {\n+\n+void TestBIP324PacketVector(\n+    uint32_t in_idx,\n+    const std::string& in_priv_ours_hex,\n+    const std::string& in_ellswift_ours_hex,\n+    const std::string& in_ellswift_theirs_hex,\n+    bool in_initiating,\n+    const std::string& in_contents_hex,\n+    uint32_t in_multiply,\n+    const std::string& in_aad_hex,\n+    bool in_ignore,\n+    const std::string& mid_send_garbage_hex,\n+    const std::string& mid_recv_garbage_hex,\n+    const std::string& out_session_id_hex,\n+    const std::string& out_ciphertext_hex,\n+    const std::string& out_ciphertext_endswith_hex)\n+{\n+    // Convert input from hex to char/byte vectors/arrays.\n+    auto in_priv_ours = ParseHex(in_priv_ours_hex);\n+    auto in_ellswift_ours_vec = ParseHex<std::byte>(in_ellswift_ours_hex);\n+    assert(in_ellswift_ours_vec.size() == 64);\n+    std::array<std::byte, 64> in_ellswift_ours;\n+    std::copy(in_ellswift_ours_vec.begin(), in_ellswift_ours_vec.end(), in_ellswift_ours.begin());\n+    auto in_ellswift_theirs_vec = ParseHex<std::byte>(in_ellswift_theirs_hex);\n+    assert(in_ellswift_theirs_vec.size() == 64);\n+    std::array<std::byte, 64> in_ellswift_theirs;\n+    std::copy(in_ellswift_theirs_vec.begin(), in_ellswift_theirs_vec.end(), in_ellswift_theirs.begin());\n+    auto in_contents = ParseHex<std::byte>(in_contents_hex);\n+    auto in_aad = ParseHex<std::byte>(in_aad_hex);\n+    auto mid_send_garbage = ParseHex<std::byte>(mid_send_garbage_hex);\n+    auto mid_recv_garbage = ParseHex<std::byte>(mid_recv_garbage_hex);\n+    auto out_session_id = ParseHex<std::byte>(out_session_id_hex);\n+    auto out_ciphertext = ParseHex<std::byte>(out_ciphertext_hex);\n+    auto out_ciphertext_endswith = ParseHex<std::byte>(out_ciphertext_endswith_hex);\n+\n+    // Load keys\n+    CKey key;\n+    key.Set(in_priv_ours.begin(), in_priv_ours.end(), true);\n+    EllSwiftPubKey ellswift_ours(in_ellswift_ours);\n+    EllSwiftPubKey ellswift_theirs(in_ellswift_theirs);\n+\n+    // Instantiate encryption BIP324 cipher.\n+    BIP324Cipher cipher(key, ellswift_ours);\n+    BOOST_CHECK(!cipher);\n+    BOOST_CHECK(cipher.GetOurPubKey() == ellswift_ours);\n+    cipher.Initialize(ellswift_theirs, in_initiating);\n+    BOOST_CHECK(cipher);\n+\n+    // Compare session variables.\n+    BOOST_CHECK(Span{out_session_id} == cipher.GetSessionID());\n+    BOOST_CHECK(Span{mid_send_garbage} == cipher.GetSendGarbageTerminator());\n+    BOOST_CHECK(Span{mid_recv_garbage} == cipher.GetReceiveGarbageTerminator());\n+\n+    // Seek to the numbered packet.\n+    for (uint32_t i = 0; i < in_idx; ++i) {\n+        std::vector<std::byte> dummy(cipher.EXPANSION);\n+        cipher.Encrypt({}, {}, false, dummy);\n+    }\n+\n+    // Construct contents and encrypt it.\n+    std::vector<std::byte> contents;\n+    for (uint32_t i = 0; i < in_multiply; ++i) {\n+        contents.insert(contents.end(), in_contents.begin(), in_contents.end());\n+    }\n+    std::vector<std::byte> ciphertext(contents.size() + cipher.EXPANSION);\n+    cipher.Encrypt(contents, in_aad, in_ignore, ciphertext);\n+\n+    // Verify ciphertext.\n+    if (!out_ciphertext.empty()) BOOST_CHECK(out_ciphertext == ciphertext);",
      "path": "src/test/bip324_tests.cpp",
      "position": null,
      "original_position": 88,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "9e65744c4f44ce89f3176870d3cc25ac2b6bdc08",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "9e65744c4f44ce89f3176870d3cc25ac2b6bdc08\r\n\r\nSlightly confused by why this conditional is necessary - can you explain in what case our expected ciphertext would be empty, but the actually generated ciphertext wouldn't be? I've tried removing this conditional but I get test failures.",
      "created_at": "2023-07-26T16:46:33Z",
      "updated_at": "2023-07-26T20:19:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275238979",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275238979"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275292903",
      "pull_request_review_id": 1548082611,
      "id": 1275292903,
      "node_id": "PRRC_kwDOABII585MA2zn",
      "diff_hunk": "@@ -0,0 +1,133 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bip324.h>\n+#include <chainparams.h>\n+#include <span.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/xoroshiro128plusplus.h>\n+\n+#include <cstdint>\n+#include <tuple>\n+#include <vector>\n+\n+namespace {\n+\n+void Initialize()\n+{\n+    ECC_Start();\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+}  // namespace\n+\n+FUZZ_TARGET(bip324_cipher_roundtrip, .init=Initialize)\n+{\n+    // Test that BIP324Cipher's encryption and decryption agree.\n+\n+    // Load keys from fuzzer.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    // Initiator key\n+    auto init_key_data = provider.ConsumeBytes<unsigned char>(32);\n+    init_key_data.resize(32);\n+    CKey init_key;\n+    init_key.Set(init_key_data.begin(), init_key_data.end(), true);\n+    if (!init_key.IsValid()) return;\n+    // Initiator entropy\n+    auto init_ent = provider.ConsumeBytes<std::byte>(32);\n+    init_ent.resize(32);\n+    // Responder key\n+    auto resp_key_data = provider.ConsumeBytes<unsigned char>(32);\n+    resp_key_data.resize(32);\n+    CKey resp_key;\n+    resp_key.Set(resp_key_data.begin(), resp_key_data.end(), true);\n+    if (!resp_key.IsValid()) return;\n+    // Responder entropy\n+    auto resp_ent = provider.ConsumeBytes<std::byte>(32);\n+    resp_ent.resize(32);\n+\n+    // Initialize ciphers by exchanging public keys.\n+    BIP324Cipher initiator(init_key, init_ent);\n+    assert(!initiator);\n+    BIP324Cipher responder(resp_key, resp_ent);\n+    assert(!responder);\n+    initiator.Initialize(responder.GetOurPubKey(), true);\n+    assert(initiator);\n+    responder.Initialize(initiator.GetOurPubKey(), false);\n+    assert(responder);\n+\n+    // Initialize RNG deterministically, to generate contents and AAD. We assume that there are no\n+    // (potentially buggy) edge cases triggered by specific values of contents/AAD, so we can avoid\n+    // reading the actual data for those from the fuzzer input (which would need large amounts of\n+    // data).\n+    XoRoShiRo128PlusPlus rng(provider.ConsumeIntegral<uint64_t>());\n+\n+    // Compare session IDs and garbage terminators.\n+    assert(initiator.GetSessionID() == responder.GetSessionID());\n+    assert(initiator.GetSendGarbageTerminator() == responder.GetReceiveGarbageTerminator());\n+    assert(initiator.GetReceiveGarbageTerminator() == responder.GetSendGarbageTerminator());\n+\n+    LIMITED_WHILE(provider.remaining_bytes(), 1000) {\n+        // Mode:\n+        // - Bit 0: whether the ignore bit is set in message\n+        // - Bit 1: whether the responder (0) or initiator (1) sends\n+        // - Bit 2: whether this ciphertext will be corrupted (making it the last sent one)\n+        // - Bit 3-4: controls the maximum aad length (max 511 bytes)\n+        // - Bit 5-7: controls the maximum content length (max 16383 bytes, for performance reasons)\n+        unsigned mode = provider.ConsumeIntegral<uint8_t>();\n+        bool ignore = mode & 1;\n+        bool from_init = mode & 2;\n+        bool damage = mode & 4;\n+        unsigned aad_length_bits = 3 * ((mode >> 3) & 3);\n+        unsigned aad_length = provider.ConsumeIntegralInRange<unsigned>(0, (1 << aad_length_bits) - 1);\n+        unsigned length_bits = 2 * ((mode >> 5) & 7);\n+        unsigned length = provider.ConsumeIntegralInRange<unsigned>(0, (1 << length_bits) - 1);\n+        // Generate aad and content.\n+        std::vector<std::byte> aad(aad_length);\n+        for (auto& val : aad) val = std::byte{(uint8_t)rng()};\n+        std::vector<std::byte> contents(length);\n+        for (auto& val : contents) val = std::byte{(uint8_t)rng()};\n+\n+        // Encrypt\n+        std::vector<std::byte> ciphertext(length + initiator.EXPANSION);\n+        (from_init ? initiator : responder).Encrypt(contents, aad, ignore, ciphertext);\n+\n+        // Optionally damage 1 bit in either the ciphertext (corresponding to a change in transit)\n+        // or the aad (to make sure that decryption will fail if the AAD mismatches).\n+        if (damage) {\n+            unsigned damage_bit = provider.ConsumeIntegralInRange<unsigned>(0,\n+                (ciphertext.size() + aad.size()) * 8U - 1U);\n+            unsigned damage_pos = damage_bit >> 3;\n+            std::byte damage_val{(uint8_t)(1U << (damage_bit & 3))};\n+            if (damage_pos >= ciphertext.size()) {\n+                aad[damage_pos - ciphertext.size()] ^= damage_val;\n+            } else {\n+                ciphertext[damage_pos] ^= damage_val;\n+            }\n+        }\n+\n+        // Decrypt length\n+        uint32_t dec_length = (from_init ? responder : initiator).DecryptLength(Span{ciphertext}.first(initiator.LENGTH_LEN));\n+        if (!damage) {\n+            assert(dec_length == length);\n+        } else {\n+            // For performance reasons, don't try to decode if length got increased too much.\n+            if (dec_length > 16384 + length) break;",
      "path": "src/test/fuzz/bip324.cpp",
      "position": 122,
      "original_position": 118,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "9e65744c4f44ce89f3176870d3cc25ac2b6bdc08",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "9e65744c4f44ce89f3176870d3cc25ac2b6bdc08\r\n\r\nChoice of 2**14 arbitrary?",
      "created_at": "2023-07-26T17:38:13Z",
      "updated_at": "2023-07-26T20:19:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275292903",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275292903"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 122,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275295605",
      "pull_request_review_id": 1548082611,
      "id": 1275295605,
      "node_id": "PRRC_kwDOABII585MA3d1",
      "diff_hunk": "@@ -0,0 +1,133 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bip324.h>\n+#include <chainparams.h>\n+#include <span.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/xoroshiro128plusplus.h>\n+\n+#include <cstdint>\n+#include <tuple>\n+#include <vector>\n+\n+namespace {\n+\n+void Initialize()\n+{\n+    ECC_Start();\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+}  // namespace\n+\n+FUZZ_TARGET(bip324_cipher_roundtrip, .init=Initialize)\n+{\n+    // Test that BIP324Cipher's encryption and decryption agree.\n+\n+    // Load keys from fuzzer.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    // Initiator key\n+    auto init_key_data = provider.ConsumeBytes<unsigned char>(32);\n+    init_key_data.resize(32);\n+    CKey init_key;\n+    init_key.Set(init_key_data.begin(), init_key_data.end(), true);\n+    if (!init_key.IsValid()) return;\n+    // Initiator entropy\n+    auto init_ent = provider.ConsumeBytes<std::byte>(32);\n+    init_ent.resize(32);\n+    // Responder key\n+    auto resp_key_data = provider.ConsumeBytes<unsigned char>(32);\n+    resp_key_data.resize(32);\n+    CKey resp_key;\n+    resp_key.Set(resp_key_data.begin(), resp_key_data.end(), true);\n+    if (!resp_key.IsValid()) return;\n+    // Responder entropy\n+    auto resp_ent = provider.ConsumeBytes<std::byte>(32);\n+    resp_ent.resize(32);\n+\n+    // Initialize ciphers by exchanging public keys.\n+    BIP324Cipher initiator(init_key, init_ent);\n+    assert(!initiator);\n+    BIP324Cipher responder(resp_key, resp_ent);\n+    assert(!responder);\n+    initiator.Initialize(responder.GetOurPubKey(), true);\n+    assert(initiator);\n+    responder.Initialize(initiator.GetOurPubKey(), false);\n+    assert(responder);\n+\n+    // Initialize RNG deterministically, to generate contents and AAD. We assume that there are no\n+    // (potentially buggy) edge cases triggered by specific values of contents/AAD, so we can avoid\n+    // reading the actual data for those from the fuzzer input (which would need large amounts of\n+    // data).\n+    XoRoShiRo128PlusPlus rng(provider.ConsumeIntegral<uint64_t>());\n+\n+    // Compare session IDs and garbage terminators.\n+    assert(initiator.GetSessionID() == responder.GetSessionID());\n+    assert(initiator.GetSendGarbageTerminator() == responder.GetReceiveGarbageTerminator());\n+    assert(initiator.GetReceiveGarbageTerminator() == responder.GetSendGarbageTerminator());\n+\n+    LIMITED_WHILE(provider.remaining_bytes(), 1000) {\n+        // Mode:\n+        // - Bit 0: whether the ignore bit is set in message\n+        // - Bit 1: whether the responder (0) or initiator (1) sends\n+        // - Bit 2: whether this ciphertext will be corrupted (making it the last sent one)\n+        // - Bit 3-4: controls the maximum aad length (max 511 bytes)\n+        // - Bit 5-7: controls the maximum content length (max 16383 bytes, for performance reasons)\n+        unsigned mode = provider.ConsumeIntegral<uint8_t>();\n+        bool ignore = mode & 1;\n+        bool from_init = mode & 2;\n+        bool damage = mode & 4;\n+        unsigned aad_length_bits = 3 * ((mode >> 3) & 3);\n+        unsigned aad_length = provider.ConsumeIntegralInRange<unsigned>(0, (1 << aad_length_bits) - 1);\n+        unsigned length_bits = 2 * ((mode >> 5) & 7);\n+        unsigned length = provider.ConsumeIntegralInRange<unsigned>(0, (1 << length_bits) - 1);\n+        // Generate aad and content.\n+        std::vector<std::byte> aad(aad_length);\n+        for (auto& val : aad) val = std::byte{(uint8_t)rng()};\n+        std::vector<std::byte> contents(length);\n+        for (auto& val : contents) val = std::byte{(uint8_t)rng()};\n+\n+        // Encrypt\n+        std::vector<std::byte> ciphertext(length + initiator.EXPANSION);\n+        (from_init ? initiator : responder).Encrypt(contents, aad, ignore, ciphertext);\n+\n+        // Optionally damage 1 bit in either the ciphertext (corresponding to a change in transit)\n+        // or the aad (to make sure that decryption will fail if the AAD mismatches).\n+        if (damage) {\n+            unsigned damage_bit = provider.ConsumeIntegralInRange<unsigned>(0,\n+                (ciphertext.size() + aad.size()) * 8U - 1U);\n+            unsigned damage_pos = damage_bit >> 3;\n+            std::byte damage_val{(uint8_t)(1U << (damage_bit & 3))};\n+            if (damage_pos >= ciphertext.size()) {\n+                aad[damage_pos - ciphertext.size()] ^= damage_val;\n+            } else {\n+                ciphertext[damage_pos] ^= damage_val;\n+            }\n+        }\n+\n+        // Decrypt length\n+        uint32_t dec_length = (from_init ? responder : initiator).DecryptLength(Span{ciphertext}.first(initiator.LENGTH_LEN));\n+        if (!damage) {\n+            assert(dec_length == length);\n+        } else {\n+            // For performance reasons, don't try to decode if length got increased too much.\n+            if (dec_length > 16384 + length) break;\n+            // Otherwise, just append zeros if dec_length > length.\n+            ciphertext.resize(dec_length + initiator.EXPANSION);\n+        }\n+\n+        // Decrypt\n+        std::vector<std::byte> decrypt(dec_length);\n+        bool dec_ignore{false};\n+        bool ok = (from_init ? responder : initiator).Decrypt(Span{ciphertext}.subspan(initiator.LENGTH_LEN), aad, dec_ignore, decrypt);",
      "path": "src/test/fuzz/bip324.cpp",
      "position": null,
      "original_position": 126,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "9e65744c4f44ce89f3176870d3cc25ac2b6bdc08",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "9e65744c4f44ce89f3176870d3cc25ac2b6bdc08\r\n\r\nSmall thing, but if you retouch maybe:\r\n\r\n```diff\r\ndiff --git a/src/test/fuzz/bip324.cpp b/src/test/fuzz/bip324.cpp\r\nindex 5df279b7df..376728d61d 100644\r\n--- a/src/test/fuzz/bip324.cpp\r\n+++ b/src/test/fuzz/bip324.cpp\r\n@@ -109,8 +109,10 @@ FUZZ_TARGET(bip324_cipher_roundtrip, .init=Initialize)\r\n             }\r\n         }\r\n\r\n+        auto& receiver{from_init ? responder : initiator};\r\n+\r\n         // Decrypt length\r\n-        uint32_t dec_length = (from_init ? responder : initiator).DecryptLength(Span{ciphertext}.first(initiator.LENGTH_LEN));\r\n+        uint32_t dec_length = receiver.DecryptLength(Span{ciphertext}.first(initiator.LENGTH_LEN));\r\n         if (!damage) {\r\n             assert(dec_length == length);\r\n         } else {\r\n@@ -123,7 +125,7 @@ FUZZ_TARGET(bip324_cipher_roundtrip, .init=Initialize)\r\n         // Decrypt\r\n         std::vector<std::byte> decrypt(dec_length);\r\n         bool dec_ignore{false};\r\n-        bool ok = (from_init ? responder : initiator).Decrypt(Span{ciphertext}.subspan(initiator.LENGTH_LEN), aad, dec_ignore, decrypt);\r\n+        bool ok = receiver.Decrypt(Span{ciphertext}.subspan(initiator.LENGTH_LEN), aad, dec_ignore, decrypt);\r\n         // Decryption *must* fail if the packet was damaged, and succeed if it wasn't.\r\n         assert(!ok == damage);\r\n         if (!ok) break;\r\n```",
      "created_at": "2023-07-26T17:41:12Z",
      "updated_at": "2023-07-26T20:19:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275295605",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275295605"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 126,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275488694",
      "pull_request_review_id": 1548603142,
      "id": 1275488694,
      "node_id": "PRRC_kwDOABII585MBmm2",
      "diff_hunk": "@@ -818,6 +837,61 @@ BOOST_AUTO_TEST_CASE(poly1305_testvector)\n                  \"0e410fa9d7a40ac582e77546be9a72bb\");\n }\n \n+BOOST_AUTO_TEST_CASE(chacha20poly1305_testvectors)\n+{\n+    // RFC 8439 Example from section 2.8.2\n+    TestChaCha20Poly1305(\"4c616469657320616e642047656e746c656d656e206f662074686520636c6173\"\n+                         \"73206f66202739393a204966204920636f756c64206f6666657220796f75206f\"\n+                         \"6e6c79206f6e652074697020666f7220746865206675747572652c2073756e73\"\n+                         \"637265656e20776f756c642062652069742e\",\n+                         \"50515253c0c1c2c3c4c5c6c7\",\n+                         \"808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9f\",\n+                         {7, 0x4746454443424140},\n+                         \"d31a8d34648e60db7b86afbc53ef7ec2a4aded51296e08fea9e2b5a736ee62d6\"\n+                         \"3dbea45e8ca9671282fafb69da92728b1a71de0a9e060b2905d6a5b67ecd3b36\"\n+                         \"92ddbd7f2d778b8c9803aee328091b58fab324e4fad675945585808b4831d7bc\"\n+                         \"3ff4def08e4b7a9de576d26586cec64b61161ae10b594f09e26a7e902ecbd060\"\n+                         \"0691\");",
      "path": "src/test/crypto_tests.cpp",
      "position": 202,
      "original_position": 51,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "in_reply_to_id": 1268291488,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a comment to explain.",
      "created_at": "2023-07-26T21:12:23Z",
      "updated_at": "2023-07-26T21:12:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275488694",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275488694"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 981,
      "original_line": 981,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275488776",
      "pull_request_review_id": 1548603280,
      "id": 1275488776,
      "node_id": "PRRC_kwDOABII585MBmoI",
      "diff_hunk": "@@ -0,0 +1,142 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20poly1305.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/chacha20.h>\n+#include <crypto/poly1305.h>\n+#include <span.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <cstdint>\n+#include <cstddef>\n+#include <iterator>\n+\n+AEADChaCha20Poly1305::AEADChaCha20Poly1305(Span<const std::byte> key) noexcept : m_chacha20(UCharCast(key.data()))\n+{\n+    assert(key.size() == KEYLEN);\n+}\n+\n+void AEADChaCha20Poly1305::SetKey(Span<const std::byte> key) noexcept\n+{\n+    assert(key.size() == KEYLEN);\n+    m_chacha20.SetKey32(UCharCast(key.data()));\n+}\n+\n+namespace {\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+#define HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n) noexcept\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif\n+\n+/** Compute poly1305 thag. chacha20 must be set to the right nonce, block 0. Will be at block 1 after. */",
      "path": "src/crypto/chacha20poly1305.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "in_reply_to_id": 1270948739,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2023-07-26T21:12:30Z",
      "updated_at": "2023-07-26T21:12:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275488776",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275488776"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275488845",
      "pull_request_review_id": 1548603397,
      "id": 1275488845,
      "node_id": "PRRC_kwDOABII585MBmpN",
      "diff_hunk": "@@ -255,20 +255,37 @@ static void TestChaCha20Poly1305(const std::string& plain_hex, const std::string\n     auto key = ParseHex<std::byte>(key_hex);\n     auto expected_cipher = ParseHex<std::byte>(cipher_hex);\n \n-    std::vector<std::byte> cipher(plain.size() + AEADChaCha20Poly1305::EXPANSION);\n-    AEADChaCha20Poly1305 aead{key};\n-    aead.Encrypt(plain, aad, nonce, cipher);\n-    BOOST_CHECK(cipher == expected_cipher);\n+    for (int i = 0; i < 10; ++i) {\n+        // During i=0, use single-plain Encrypt/Decrypt; others use a split at prefix.\n+        size_t prefix = i ? InsecureRandRange(plain.size() + 1) : plain.size();\n+        // Encrypt.\n+        std::vector<std::byte> cipher(plain.size() + AEADChaCha20Poly1305::EXPANSION);\n+        AEADChaCha20Poly1305 aead{key};\n+        if (i == 0) {\n+            aead.Encrypt(plain, aad, nonce, cipher);\n+        } else {\n+            aead.Encrypt(Span{plain}.first(prefix), Span{plain}.subspan(prefix), aad, nonce, cipher);\n+        }\n+        BOOST_CHECK(cipher == expected_cipher);\n \n-    std::vector<std::byte> decipher(cipher.size() - AEADChaCha20Poly1305::EXPANSION);\n-    bool ret = aead.Decrypt(cipher, aad, nonce, decipher);\n-    BOOST_CHECK(ret);\n-    BOOST_CHECK(decipher == plain);\n+        // Decrypt.\n+        std::vector<std::byte> decipher(cipher.size() - AEADChaCha20Poly1305::EXPANSION);\n+        bool ret{false};\n+        if (i == 0) {\n+            ret = aead.Decrypt(cipher, aad, nonce, decipher);\n+        } else {\n+            ret = aead.Decrypt(cipher, aad, nonce, Span{decipher}.first(prefix), Span{decipher}.subspan(prefix));\n+        }\n+        BOOST_CHECK(ret);\n+        BOOST_CHECK(decipher == plain);\n+    }\n \n+    // Test Keystream output.\n     std::vector<std::byte> keystream(plain.size());\n+    AEADChaCha20Poly1305 aead{key};\n     aead.Keystream(nonce, keystream);\n     for (size_t i = 0; i < plain.size(); ++i) {\n-        BOOST_CHECK_EQUAL(plain[i] ^ keystream[i], cipher[i]);\n+        BOOST_CHECK((plain[i] ^ keystream[i]) == expected_cipher[i]);",
      "path": "src/test/crypto_tests.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "df4303b996f8b4f095de18edd7d3dbe281b5f124",
      "in_reply_to_id": 1271064136,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2023-07-26T21:12:36Z",
      "updated_at": "2023-07-26T21:12:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275488845",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275488845"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 288,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275488966",
      "pull_request_review_id": 1548603611,
      "id": 1275488966,
      "node_id": "PRRC_kwDOABII585MBmrG",
      "diff_hunk": "@@ -0,0 +1,238 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bip324.h>\n+#include <chainparams.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+#include <util/strencodings.h>\n+\n+#include <array>\n+#include <vector>\n+#include <cstddef>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+namespace {\n+\n+void TestBIP324PacketVector(\n+    uint32_t in_idx,\n+    const std::string& in_priv_ours_hex,\n+    const std::string& in_ellswift_ours_hex,\n+    const std::string& in_ellswift_theirs_hex,\n+    bool in_initiating,\n+    const std::string& in_contents_hex,\n+    uint32_t in_multiply,\n+    const std::string& in_aad_hex,\n+    bool in_ignore,\n+    const std::string& mid_send_garbage_hex,\n+    const std::string& mid_recv_garbage_hex,\n+    const std::string& out_session_id_hex,\n+    const std::string& out_ciphertext_hex,\n+    const std::string& out_ciphertext_endswith_hex)\n+{\n+    // Convert input from hex to char/byte vectors/arrays.\n+    auto in_priv_ours = ParseHex(in_priv_ours_hex);\n+    auto in_ellswift_ours_vec = ParseHex<std::byte>(in_ellswift_ours_hex);\n+    assert(in_ellswift_ours_vec.size() == 64);\n+    std::array<std::byte, 64> in_ellswift_ours;\n+    std::copy(in_ellswift_ours_vec.begin(), in_ellswift_ours_vec.end(), in_ellswift_ours.begin());\n+    auto in_ellswift_theirs_vec = ParseHex<std::byte>(in_ellswift_theirs_hex);\n+    assert(in_ellswift_theirs_vec.size() == 64);\n+    std::array<std::byte, 64> in_ellswift_theirs;\n+    std::copy(in_ellswift_theirs_vec.begin(), in_ellswift_theirs_vec.end(), in_ellswift_theirs.begin());\n+    auto in_contents = ParseHex<std::byte>(in_contents_hex);\n+    auto in_aad = ParseHex<std::byte>(in_aad_hex);\n+    auto mid_send_garbage = ParseHex<std::byte>(mid_send_garbage_hex);\n+    auto mid_recv_garbage = ParseHex<std::byte>(mid_recv_garbage_hex);\n+    auto out_session_id = ParseHex<std::byte>(out_session_id_hex);\n+    auto out_ciphertext = ParseHex<std::byte>(out_ciphertext_hex);\n+    auto out_ciphertext_endswith = ParseHex<std::byte>(out_ciphertext_endswith_hex);",
      "path": "src/test/bip324_tests.cpp",
      "position": null,
      "original_position": 53,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "9e65744c4f44ce89f3176870d3cc25ac2b6bdc08",
      "in_reply_to_id": 1275173737,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2023-07-26T21:12:47Z",
      "updated_at": "2023-07-26T21:12:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275488966",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275488966"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275490262",
      "pull_request_review_id": 1548605650,
      "id": 1275490262,
      "node_id": "PRRC_kwDOABII585MBm_W",
      "diff_hunk": "@@ -0,0 +1,238 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bip324.h>\n+#include <chainparams.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+#include <util/strencodings.h>\n+\n+#include <array>\n+#include <vector>\n+#include <cstddef>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+namespace {\n+\n+void TestBIP324PacketVector(\n+    uint32_t in_idx,\n+    const std::string& in_priv_ours_hex,\n+    const std::string& in_ellswift_ours_hex,\n+    const std::string& in_ellswift_theirs_hex,\n+    bool in_initiating,\n+    const std::string& in_contents_hex,\n+    uint32_t in_multiply,\n+    const std::string& in_aad_hex,\n+    bool in_ignore,\n+    const std::string& mid_send_garbage_hex,\n+    const std::string& mid_recv_garbage_hex,\n+    const std::string& out_session_id_hex,\n+    const std::string& out_ciphertext_hex,\n+    const std::string& out_ciphertext_endswith_hex)\n+{\n+    // Convert input from hex to char/byte vectors/arrays.\n+    auto in_priv_ours = ParseHex(in_priv_ours_hex);\n+    auto in_ellswift_ours_vec = ParseHex<std::byte>(in_ellswift_ours_hex);\n+    assert(in_ellswift_ours_vec.size() == 64);\n+    std::array<std::byte, 64> in_ellswift_ours;\n+    std::copy(in_ellswift_ours_vec.begin(), in_ellswift_ours_vec.end(), in_ellswift_ours.begin());\n+    auto in_ellswift_theirs_vec = ParseHex<std::byte>(in_ellswift_theirs_hex);\n+    assert(in_ellswift_theirs_vec.size() == 64);\n+    std::array<std::byte, 64> in_ellswift_theirs;\n+    std::copy(in_ellswift_theirs_vec.begin(), in_ellswift_theirs_vec.end(), in_ellswift_theirs.begin());\n+    auto in_contents = ParseHex<std::byte>(in_contents_hex);\n+    auto in_aad = ParseHex<std::byte>(in_aad_hex);\n+    auto mid_send_garbage = ParseHex<std::byte>(mid_send_garbage_hex);\n+    auto mid_recv_garbage = ParseHex<std::byte>(mid_recv_garbage_hex);\n+    auto out_session_id = ParseHex<std::byte>(out_session_id_hex);\n+    auto out_ciphertext = ParseHex<std::byte>(out_ciphertext_hex);\n+    auto out_ciphertext_endswith = ParseHex<std::byte>(out_ciphertext_endswith_hex);\n+\n+    // Load keys\n+    CKey key;\n+    key.Set(in_priv_ours.begin(), in_priv_ours.end(), true);\n+    EllSwiftPubKey ellswift_ours(in_ellswift_ours);\n+    EllSwiftPubKey ellswift_theirs(in_ellswift_theirs);\n+\n+    // Instantiate encryption BIP324 cipher.\n+    BIP324Cipher cipher(key, ellswift_ours);\n+    BOOST_CHECK(!cipher);\n+    BOOST_CHECK(cipher.GetOurPubKey() == ellswift_ours);\n+    cipher.Initialize(ellswift_theirs, in_initiating);\n+    BOOST_CHECK(cipher);\n+\n+    // Compare session variables.\n+    BOOST_CHECK(Span{out_session_id} == cipher.GetSessionID());\n+    BOOST_CHECK(Span{mid_send_garbage} == cipher.GetSendGarbageTerminator());\n+    BOOST_CHECK(Span{mid_recv_garbage} == cipher.GetReceiveGarbageTerminator());\n+\n+    // Seek to the numbered packet.\n+    for (uint32_t i = 0; i < in_idx; ++i) {\n+        std::vector<std::byte> dummy(cipher.EXPANSION);\n+        cipher.Encrypt({}, {}, false, dummy);\n+    }\n+\n+    // Construct contents and encrypt it.\n+    std::vector<std::byte> contents;\n+    for (uint32_t i = 0; i < in_multiply; ++i) {\n+        contents.insert(contents.end(), in_contents.begin(), in_contents.end());\n+    }\n+    std::vector<std::byte> ciphertext(contents.size() + cipher.EXPANSION);\n+    cipher.Encrypt(contents, in_aad, in_ignore, ciphertext);\n+\n+    // Verify ciphertext.\n+    if (!out_ciphertext.empty()) BOOST_CHECK(out_ciphertext == ciphertext);",
      "path": "src/test/bip324_tests.cpp",
      "position": null,
      "original_position": 88,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "9e65744c4f44ce89f3176870d3cc25ac2b6bdc08",
      "in_reply_to_id": 1275238979,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a comment to explain, and restructured a bit.\r\n\r\nThe BIP's test vectors specify either `out_ciphertext` (for short messages) or `out_ciphertext_endswith` (for long messages), the other one is empty. We should only compare the one that was provided.",
      "created_at": "2023-07-26T21:14:33Z",
      "updated_at": "2023-07-26T21:14:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275490262",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275490262"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275490861",
      "pull_request_review_id": 1548606542,
      "id": 1275490861,
      "node_id": "PRRC_kwDOABII585MBnIt",
      "diff_hunk": "@@ -0,0 +1,133 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bip324.h>\n+#include <chainparams.h>\n+#include <span.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/xoroshiro128plusplus.h>\n+\n+#include <cstdint>\n+#include <tuple>\n+#include <vector>\n+\n+namespace {\n+\n+void Initialize()\n+{\n+    ECC_Start();\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+}  // namespace\n+\n+FUZZ_TARGET(bip324_cipher_roundtrip, .init=Initialize)\n+{\n+    // Test that BIP324Cipher's encryption and decryption agree.\n+\n+    // Load keys from fuzzer.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    // Initiator key\n+    auto init_key_data = provider.ConsumeBytes<unsigned char>(32);\n+    init_key_data.resize(32);\n+    CKey init_key;\n+    init_key.Set(init_key_data.begin(), init_key_data.end(), true);\n+    if (!init_key.IsValid()) return;\n+    // Initiator entropy\n+    auto init_ent = provider.ConsumeBytes<std::byte>(32);\n+    init_ent.resize(32);\n+    // Responder key\n+    auto resp_key_data = provider.ConsumeBytes<unsigned char>(32);\n+    resp_key_data.resize(32);\n+    CKey resp_key;\n+    resp_key.Set(resp_key_data.begin(), resp_key_data.end(), true);\n+    if (!resp_key.IsValid()) return;\n+    // Responder entropy\n+    auto resp_ent = provider.ConsumeBytes<std::byte>(32);\n+    resp_ent.resize(32);\n+\n+    // Initialize ciphers by exchanging public keys.\n+    BIP324Cipher initiator(init_key, init_ent);\n+    assert(!initiator);\n+    BIP324Cipher responder(resp_key, resp_ent);\n+    assert(!responder);\n+    initiator.Initialize(responder.GetOurPubKey(), true);\n+    assert(initiator);\n+    responder.Initialize(initiator.GetOurPubKey(), false);\n+    assert(responder);\n+\n+    // Initialize RNG deterministically, to generate contents and AAD. We assume that there are no\n+    // (potentially buggy) edge cases triggered by specific values of contents/AAD, so we can avoid\n+    // reading the actual data for those from the fuzzer input (which would need large amounts of\n+    // data).\n+    XoRoShiRo128PlusPlus rng(provider.ConsumeIntegral<uint64_t>());\n+\n+    // Compare session IDs and garbage terminators.\n+    assert(initiator.GetSessionID() == responder.GetSessionID());\n+    assert(initiator.GetSendGarbageTerminator() == responder.GetReceiveGarbageTerminator());\n+    assert(initiator.GetReceiveGarbageTerminator() == responder.GetSendGarbageTerminator());\n+\n+    LIMITED_WHILE(provider.remaining_bytes(), 1000) {\n+        // Mode:\n+        // - Bit 0: whether the ignore bit is set in message\n+        // - Bit 1: whether the responder (0) or initiator (1) sends\n+        // - Bit 2: whether this ciphertext will be corrupted (making it the last sent one)\n+        // - Bit 3-4: controls the maximum aad length (max 511 bytes)\n+        // - Bit 5-7: controls the maximum content length (max 16383 bytes, for performance reasons)\n+        unsigned mode = provider.ConsumeIntegral<uint8_t>();\n+        bool ignore = mode & 1;\n+        bool from_init = mode & 2;\n+        bool damage = mode & 4;\n+        unsigned aad_length_bits = 3 * ((mode >> 3) & 3);\n+        unsigned aad_length = provider.ConsumeIntegralInRange<unsigned>(0, (1 << aad_length_bits) - 1);\n+        unsigned length_bits = 2 * ((mode >> 5) & 7);\n+        unsigned length = provider.ConsumeIntegralInRange<unsigned>(0, (1 << length_bits) - 1);\n+        // Generate aad and content.\n+        std::vector<std::byte> aad(aad_length);\n+        for (auto& val : aad) val = std::byte{(uint8_t)rng()};\n+        std::vector<std::byte> contents(length);\n+        for (auto& val : contents) val = std::byte{(uint8_t)rng()};\n+\n+        // Encrypt\n+        std::vector<std::byte> ciphertext(length + initiator.EXPANSION);\n+        (from_init ? initiator : responder).Encrypt(contents, aad, ignore, ciphertext);\n+\n+        // Optionally damage 1 bit in either the ciphertext (corresponding to a change in transit)\n+        // or the aad (to make sure that decryption will fail if the AAD mismatches).\n+        if (damage) {\n+            unsigned damage_bit = provider.ConsumeIntegralInRange<unsigned>(0,\n+                (ciphertext.size() + aad.size()) * 8U - 1U);\n+            unsigned damage_pos = damage_bit >> 3;\n+            std::byte damage_val{(uint8_t)(1U << (damage_bit & 3))};\n+            if (damage_pos >= ciphertext.size()) {\n+                aad[damage_pos - ciphertext.size()] ^= damage_val;\n+            } else {\n+                ciphertext[damage_pos] ^= damage_val;\n+            }\n+        }\n+\n+        // Decrypt length\n+        uint32_t dec_length = (from_init ? responder : initiator).DecryptLength(Span{ciphertext}.first(initiator.LENGTH_LEN));\n+        if (!damage) {\n+            assert(dec_length == length);\n+        } else {\n+            // For performance reasons, don't try to decode if length got increased too much.\n+            if (dec_length > 16384 + length) break;",
      "path": "src/test/fuzz/bip324.cpp",
      "position": 122,
      "original_position": 118,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "9e65744c4f44ce89f3176870d3cc25ac2b6bdc08",
      "in_reply_to_id": 1275292903,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Kind of. Permitting this to grow too large makes the test slower. The plaintext also has this restriction.",
      "created_at": "2023-07-26T21:15:19Z",
      "updated_at": "2023-07-26T21:15:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275490861",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275490861"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 122,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275490952",
      "pull_request_review_id": 1548606652,
      "id": 1275490952,
      "node_id": "PRRC_kwDOABII585MBnKI",
      "diff_hunk": "@@ -0,0 +1,133 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bip324.h>\n+#include <chainparams.h>\n+#include <span.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/xoroshiro128plusplus.h>\n+\n+#include <cstdint>\n+#include <tuple>\n+#include <vector>\n+\n+namespace {\n+\n+void Initialize()\n+{\n+    ECC_Start();\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+}  // namespace\n+\n+FUZZ_TARGET(bip324_cipher_roundtrip, .init=Initialize)\n+{\n+    // Test that BIP324Cipher's encryption and decryption agree.\n+\n+    // Load keys from fuzzer.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    // Initiator key\n+    auto init_key_data = provider.ConsumeBytes<unsigned char>(32);\n+    init_key_data.resize(32);\n+    CKey init_key;\n+    init_key.Set(init_key_data.begin(), init_key_data.end(), true);\n+    if (!init_key.IsValid()) return;\n+    // Initiator entropy\n+    auto init_ent = provider.ConsumeBytes<std::byte>(32);\n+    init_ent.resize(32);\n+    // Responder key\n+    auto resp_key_data = provider.ConsumeBytes<unsigned char>(32);\n+    resp_key_data.resize(32);\n+    CKey resp_key;\n+    resp_key.Set(resp_key_data.begin(), resp_key_data.end(), true);\n+    if (!resp_key.IsValid()) return;\n+    // Responder entropy\n+    auto resp_ent = provider.ConsumeBytes<std::byte>(32);\n+    resp_ent.resize(32);\n+\n+    // Initialize ciphers by exchanging public keys.\n+    BIP324Cipher initiator(init_key, init_ent);\n+    assert(!initiator);\n+    BIP324Cipher responder(resp_key, resp_ent);\n+    assert(!responder);\n+    initiator.Initialize(responder.GetOurPubKey(), true);\n+    assert(initiator);\n+    responder.Initialize(initiator.GetOurPubKey(), false);\n+    assert(responder);\n+\n+    // Initialize RNG deterministically, to generate contents and AAD. We assume that there are no\n+    // (potentially buggy) edge cases triggered by specific values of contents/AAD, so we can avoid\n+    // reading the actual data for those from the fuzzer input (which would need large amounts of\n+    // data).\n+    XoRoShiRo128PlusPlus rng(provider.ConsumeIntegral<uint64_t>());\n+\n+    // Compare session IDs and garbage terminators.\n+    assert(initiator.GetSessionID() == responder.GetSessionID());\n+    assert(initiator.GetSendGarbageTerminator() == responder.GetReceiveGarbageTerminator());\n+    assert(initiator.GetReceiveGarbageTerminator() == responder.GetSendGarbageTerminator());\n+\n+    LIMITED_WHILE(provider.remaining_bytes(), 1000) {\n+        // Mode:\n+        // - Bit 0: whether the ignore bit is set in message\n+        // - Bit 1: whether the responder (0) or initiator (1) sends\n+        // - Bit 2: whether this ciphertext will be corrupted (making it the last sent one)\n+        // - Bit 3-4: controls the maximum aad length (max 511 bytes)\n+        // - Bit 5-7: controls the maximum content length (max 16383 bytes, for performance reasons)\n+        unsigned mode = provider.ConsumeIntegral<uint8_t>();\n+        bool ignore = mode & 1;\n+        bool from_init = mode & 2;\n+        bool damage = mode & 4;\n+        unsigned aad_length_bits = 3 * ((mode >> 3) & 3);\n+        unsigned aad_length = provider.ConsumeIntegralInRange<unsigned>(0, (1 << aad_length_bits) - 1);\n+        unsigned length_bits = 2 * ((mode >> 5) & 7);\n+        unsigned length = provider.ConsumeIntegralInRange<unsigned>(0, (1 << length_bits) - 1);\n+        // Generate aad and content.\n+        std::vector<std::byte> aad(aad_length);\n+        for (auto& val : aad) val = std::byte{(uint8_t)rng()};\n+        std::vector<std::byte> contents(length);\n+        for (auto& val : contents) val = std::byte{(uint8_t)rng()};\n+\n+        // Encrypt\n+        std::vector<std::byte> ciphertext(length + initiator.EXPANSION);\n+        (from_init ? initiator : responder).Encrypt(contents, aad, ignore, ciphertext);\n+\n+        // Optionally damage 1 bit in either the ciphertext (corresponding to a change in transit)\n+        // or the aad (to make sure that decryption will fail if the AAD mismatches).\n+        if (damage) {\n+            unsigned damage_bit = provider.ConsumeIntegralInRange<unsigned>(0,\n+                (ciphertext.size() + aad.size()) * 8U - 1U);\n+            unsigned damage_pos = damage_bit >> 3;\n+            std::byte damage_val{(uint8_t)(1U << (damage_bit & 3))};\n+            if (damage_pos >= ciphertext.size()) {\n+                aad[damage_pos - ciphertext.size()] ^= damage_val;\n+            } else {\n+                ciphertext[damage_pos] ^= damage_val;\n+            }\n+        }\n+\n+        // Decrypt length\n+        uint32_t dec_length = (from_init ? responder : initiator).DecryptLength(Span{ciphertext}.first(initiator.LENGTH_LEN));\n+        if (!damage) {\n+            assert(dec_length == length);\n+        } else {\n+            // For performance reasons, don't try to decode if length got increased too much.\n+            if (dec_length > 16384 + length) break;\n+            // Otherwise, just append zeros if dec_length > length.\n+            ciphertext.resize(dec_length + initiator.EXPANSION);\n+        }\n+\n+        // Decrypt\n+        std::vector<std::byte> decrypt(dec_length);\n+        bool dec_ignore{false};\n+        bool ok = (from_init ? responder : initiator).Decrypt(Span{ciphertext}.subspan(initiator.LENGTH_LEN), aad, dec_ignore, decrypt);",
      "path": "src/test/fuzz/bip324.cpp",
      "position": null,
      "original_position": 126,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "9e65744c4f44ce89f3176870d3cc25ac2b6bdc08",
      "in_reply_to_id": 1275295605,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2023-07-26T21:15:25Z",
      "updated_at": "2023-07-26T21:15:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275490952",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275490952"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 126,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1277460913",
      "pull_request_review_id": 1551988560,
      "id": 1277460913,
      "node_id": "PRRC_kwDOABII585MJIGx",
      "diff_hunk": "@@ -93,9 +96,68 @@ void TestBIP324PacketVector(\n         BOOST_CHECK(Span{out_ciphertext_endswith} == Span{ciphertext}.last(out_ciphertext_endswith.size()));\n     }\n \n-    // Note that we don't test decryption here, as the test vectors don't provide the other party's\n-    // private key, so we cannot act like them. See the bip324_cipher_roundtrip fuzz test for a test\n-    // that does cover decryption.\n+    for (unsigned error = 0; error <= 12; ++error) {\n+        // error selects a type of error introduced:\n+        // - error=0: no errors, decryption should be successful\n+        // - error=1: wrong side\n+        // - error=2..9: bit error in ciphertext\n+        // - error=10: bit error in aad\n+        // - error=11: extra 0x00 at end of aad\n+        // - error=12: message index wrong\n+\n+        // Instantiate self-decrypting BIP324 cipher.\n+        BIP324Cipher dec_cipher(key, ellswift_ours);\n+        BOOST_CHECK(!dec_cipher);\n+        BOOST_CHECK(dec_cipher.GetOurPubKey() == ellswift_ours);\n+        dec_cipher.Initialize(ellswift_theirs, (error == 1) ^ in_initiating, /*self_decrypt=*/true);\n+        BOOST_CHECK(dec_cipher);\n+\n+        // Compare session variables.\n+        BOOST_CHECK((Span{out_session_id} == dec_cipher.GetSessionID()) == (error != 1));\n+        BOOST_CHECK((Span{mid_send_garbage} == dec_cipher.GetSendGarbageTerminator()) == (error != 1));\n+        BOOST_CHECK((Span{mid_recv_garbage} == dec_cipher.GetReceiveGarbageTerminator()) == (error != 1));\n+\n+        // Seek to the numbered packet.\n+        if (in_idx == 0 && error == 12) continue;\n+        uint32_t dec_idx = in_idx ^ (error == 12 ? (1U << InsecureRandRange(16)) : 0);\n+        for (uint32_t i = 0; i < dec_idx; ++i) {\n+            unsigned use_idx = i < in_idx ? i : 0;\n+            bool dec_ignore{false};\n+            dec_cipher.DecryptLength(Span{dummies[use_idx]}.first(cipher.LENGTH_LEN));\n+            dec_cipher.Decrypt(Span{dummies[use_idx]}.subspan(cipher.LENGTH_LEN), {}, dec_ignore, {});\n+        }\n+\n+        // Construct copied (and possibly damaged) copy of ciphertext.\n+        // Decrypt length\n+        auto to_decrypt = ciphertext;\n+        if (error >= 2 && error <= 9) {\n+            to_decrypt[InsecureRandRange(to_decrypt.size())] ^= std::byte(1U << InsecureRandRange(8));",
      "path": "src/test/bip324_tests.cpp",
      "position": 134,
      "original_position": 58,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "tiny-nit (or more, a curiosity question): Was it intended to derive the bit position within the byte randomly? Due to the choice of having 8 error values for this case, I was assuming that the idea was to systematically damage with all bit positions 0..7.\r\n```suggestion\r\n            to_decrypt[InsecureRandRange(to_decrypt.size())] ^= std::byte(1U << (error - 2));\r\n```\r\nBut in practice it shouldn't really matter and I guess both are fine.",
      "created_at": "2023-07-28T12:00:59Z",
      "updated_at": "2023-07-28T12:11:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1277460913",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1277460913"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 134,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1278562569",
      "pull_request_review_id": 1553637032,
      "id": 1278562569,
      "node_id": "PRRC_kwDOABII585MNVEJ",
      "diff_hunk": "@@ -93,9 +96,68 @@ void TestBIP324PacketVector(\n         BOOST_CHECK(Span{out_ciphertext_endswith} == Span{ciphertext}.last(out_ciphertext_endswith.size()));\n     }\n \n-    // Note that we don't test decryption here, as the test vectors don't provide the other party's\n-    // private key, so we cannot act like them. See the bip324_cipher_roundtrip fuzz test for a test\n-    // that does cover decryption.\n+    for (unsigned error = 0; error <= 12; ++error) {\n+        // error selects a type of error introduced:\n+        // - error=0: no errors, decryption should be successful\n+        // - error=1: wrong side\n+        // - error=2..9: bit error in ciphertext\n+        // - error=10: bit error in aad\n+        // - error=11: extra 0x00 at end of aad\n+        // - error=12: message index wrong\n+\n+        // Instantiate self-decrypting BIP324 cipher.\n+        BIP324Cipher dec_cipher(key, ellswift_ours);\n+        BOOST_CHECK(!dec_cipher);\n+        BOOST_CHECK(dec_cipher.GetOurPubKey() == ellswift_ours);\n+        dec_cipher.Initialize(ellswift_theirs, (error == 1) ^ in_initiating, /*self_decrypt=*/true);\n+        BOOST_CHECK(dec_cipher);\n+\n+        // Compare session variables.\n+        BOOST_CHECK((Span{out_session_id} == dec_cipher.GetSessionID()) == (error != 1));\n+        BOOST_CHECK((Span{mid_send_garbage} == dec_cipher.GetSendGarbageTerminator()) == (error != 1));\n+        BOOST_CHECK((Span{mid_recv_garbage} == dec_cipher.GetReceiveGarbageTerminator()) == (error != 1));\n+\n+        // Seek to the numbered packet.\n+        if (in_idx == 0 && error == 12) continue;\n+        uint32_t dec_idx = in_idx ^ (error == 12 ? (1U << InsecureRandRange(16)) : 0);\n+        for (uint32_t i = 0; i < dec_idx; ++i) {\n+            unsigned use_idx = i < in_idx ? i : 0;\n+            bool dec_ignore{false};\n+            dec_cipher.DecryptLength(Span{dummies[use_idx]}.first(cipher.LENGTH_LEN));\n+            dec_cipher.Decrypt(Span{dummies[use_idx]}.subspan(cipher.LENGTH_LEN), {}, dec_ignore, {});\n+        }\n+\n+        // Construct copied (and possibly damaged) copy of ciphertext.\n+        // Decrypt length\n+        auto to_decrypt = ciphertext;\n+        if (error >= 2 && error <= 9) {\n+            to_decrypt[InsecureRandRange(to_decrypt.size())] ^= std::byte(1U << InsecureRandRange(8));",
      "path": "src/test/bip324_tests.cpp",
      "position": 134,
      "original_position": 58,
      "commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_commit_id": "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "in_reply_to_id": 1277460913,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That very much sounds like it could have been my intent, but I honestly can't remember. I'll make this change if I retouch.",
      "created_at": "2023-07-30T12:44:22Z",
      "updated_at": "2023-07-30T12:44:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1278562569",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1278562569"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 134,
      "original_line": 134,
      "side": "RIGHT"
    }
  ]
}