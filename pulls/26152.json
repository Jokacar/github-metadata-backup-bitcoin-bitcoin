{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
    "id": 1063336065,
    "node_id": "PR_kwDOABII584_YTiB",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/26152",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/26152.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/26152.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
    "number": 26152,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Bump unconfirmed ancestor transactions to target feerate",
    "user": {
      "login": "murchandamus",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murchandamus",
      "html_url": "https://github.com/murchandamus",
      "followers_url": "https://api.github.com/users/murchandamus/followers",
      "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
      "organizations_url": "https://api.github.com/users/murchandamus/orgs",
      "repos_url": "https://api.github.com/users/murchandamus/repos",
      "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/murchandamus/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Includes some commits to address follow-ups from #27021: https://github.com/bitcoin/bitcoin/pull/27021#issuecomment-1554675156\r\n\r\nReduces the effective value of unconfirmed UTXOs by the fees necessary to bump their ancestor transactions to the same feerate.\r\n\r\nWhile the individual UTXOs always account for their full ancestry before coin-selection, we can correct potential overestimates with a second pass where we establish the ancestry and bump fee for the whole input set collectively.\r\n\r\nFixes #9645 \r\nFixes #9864 \r\nFixes #15553",
    "labels": [
      {
        "id": 149424,
        "node_id": "MDU6TGFiZWwxNDk0MjQ=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
        "name": "Wallet",
        "color": "08a781",
        "default": false
      },
      {
        "id": 1648013533,
        "node_id": "MDU6TGFiZWwxNjQ4MDEzNTMz",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Review%20club",
        "name": "Review club",
        "description": "",
        "color": "0052cc",
        "default": false
      }
    ],
    "created_at": "2022-09-21T20:52:28Z",
    "updated_at": "2023-09-03T12:10:47Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "8e446b148b90dfecfd40748bd5e2ba43612abe82",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "murchandamus:2022-09-ancestor-aware-funding",
      "ref": "2022-09-ancestor-aware-funding",
      "sha": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 23979970,
        "node_id": "MDEwOlJlcG9zaXRvcnkyMzk3OTk3MA==",
        "name": "bitcoin",
        "full_name": "murchandamus/bitcoin",
        "owner": {
          "login": "murchandamus",
          "id": 4060799,
          "node_id": "MDQ6VXNlcjQwNjA3OTk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/murchandamus",
          "html_url": "https://github.com/murchandamus",
          "followers_url": "https://api.github.com/users/murchandamus/followers",
          "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
          "organizations_url": "https://api.github.com/users/murchandamus/orgs",
          "repos_url": "https://api.github.com/users/murchandamus/repos",
          "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/murchandamus/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/murchandamus/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/murchandamus/bitcoin",
        "archive_url": "https://api.github.com/repos/murchandamus/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/murchandamus/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/murchandamus/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/murchandamus/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/murchandamus/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/murchandamus/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/murchandamus/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/murchandamus/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/murchandamus/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/murchandamus/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/murchandamus/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/murchandamus/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/murchandamus/bitcoin/events",
        "forks_url": "https://api.github.com/repos/murchandamus/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/murchandamus/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/murchandamus/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/murchandamus/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/murchandamus/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/murchandamus/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/murchandamus/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/murchandamus/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/murchandamus/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/murchandamus/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/murchandamus/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/murchandamus/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/murchandamus/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/murchandamus/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/murchandamus/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/murchandamus/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:murchandamus/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/murchandamus/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/murchandamus/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/murchandamus/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/murchandamus/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/murchandamus/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/murchandamus/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/murchandamus/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/murchandamus/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/murchandamus/bitcoin/hooks",
        "svn_url": "https://github.com/murchandamus/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 204935,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-30T17:44:06Z",
        "created_at": "2014-09-12T23:11:53Z",
        "updated_at": "2023-05-11T06:24:44Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "df5af114df19730dc1d2936e5819e07273182a76",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35609,
        "stargazers_count": 71203,
        "watchers_count": 71203,
        "size": 238774,
        "default_branch": "master",
        "open_issues_count": 682,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-09-03T12:29:53Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-09-03T11:37:58Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 1076,
    "deletions": 325,
    "changed_files": 14,
    "commits": 8,
    "review_comments": 221,
    "comments": 33
  },
  "events": [
    {
      "event": "head_ref_force_pushed",
      "id": 7434358340,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAG7H05E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7434358340",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-21T21:16:53Z"
    },
    {
      "event": "commented",
      "id": 1254331602,
      "node_id": "IC_kwDOABII585Kw5TS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1254331602",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-21T23:24:48Z",
      "updated_at": "2023-09-03T12:10:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [t-bast](https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1604246030), [ismaelsadeeq](https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1701087528) |\n| Concept ACK | [fanquake](https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1116611222), [glozow](https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1117618586), [jonatack](https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1118062799), [ishaanam](https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1122523189), [andrewtoth](https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1187092079), [stickies-v](https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1188589097), [LarryRuane](https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1198255084), [josibake](https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1206585147) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#28391](https://github.com/bitcoin/bitcoin/pull/28391) (refactor: Simplify CTxMempool/BlockAssembler fields, remove some external mapTx access by TheCharlatan)\n* [#28335](https://github.com/bitcoin/bitcoin/pull/28335) (RFC: Remove boost usage from kernel api / headers by TheCharlatan)\n* [#27865](https://github.com/bitcoin/bitcoin/pull/27865) (wallet: Track no-longer-spendable TXOs separately by achow101)\n* [#27601](https://github.com/bitcoin/bitcoin/pull/27601) (wallet: don't duplicate change output if already exist by furszy)\n* [#27286](https://github.com/bitcoin/bitcoin/pull/27286) (wallet: Keep track of the wallet's own transaction outputs in memory by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1254331602",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "reviewed",
      "id": 1116611222,
      "node_id": "PRR_kwDOABII585CjiKW",
      "url": null,
      "actor": null,
      "commit_id": "54fd46be525961c2fe0e9cc02549584aaaad571b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1116611222",
      "submitted_at": "2022-09-22T08:33:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "review_requested",
      "id": 7437339121,
      "node_id": "RRE_lADOABII585SV7NTzwAAAAG7TMnx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7437339121",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-22T08:34:30Z",
      "requested_reviewer": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 7437339136,
      "node_id": "RRE_lADOABII585SV7NTzwAAAAG7TMoA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7437339136",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-22T08:34:30Z",
      "requested_reviewer": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-22T17:14:20Z",
      "updated_at": "2022-09-22T17:14:20Z",
      "source": {
        "issue": {
          "id": 1315657410,
          "node_id": "PR_kwDOABII5847-7hZ",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25685",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25685/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25685/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25685/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25685",
          "number": 25685,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Faster transaction creation by removing pre-set-inputs fetching responsibility from Coin Selection",
          "body": "#### # Context (Current Flow on Master)\r\n\r\nIn the transaction creation process, in order to select which coins the new transaction will spend,\r\nwe first obtain all the available coins known by the wallet, which means walking-through the\r\nwallet txes map, gathering the ones that fulfill certain spendability requirements in a vector.\r\n\r\nThis coins vector is then provided to the Coin Selection process, which first checks if the user\r\nhas manually selected any input (which could be internal, aka known by the wallet, or external),\r\nand if it does, it fetches them by searching each of them inside the wallet and/or inside the\r\nCoin Control external tx data.\r\n\r\nThen, after finding the pre-selected-inputs and gathering them in a vector, the Coin Selection\r\nprocess walks-through the entire available coins vector once more just to erase coins that are\r\nin both vectors. So the Coin Selection process doesn’t pick them twice (duplicate inputs inside\r\nthe same transaction).\r\n\r\n#### # Process Workflow Changes\r\n\r\nNow, a new method, `FetchCoins` will be responsible for:\r\n1) Lookup the user pre-selected-inputs (which can be internal or external).\r\n2) And, fetch the available coins in the wallet (excluding the already fetched ones).\r\n\r\nWhich will occur prior to the Coin Selection process. Which allows us to never include the\r\npre-selected-inputs inside the available coins vector in the first place, as well as doing other\r\nnice improvements (written below).\r\n\r\nSo, Coin Selection can perform its main responsibility without mixing it with having to fetch\r\ninternal/external coins nor any slow and unneeded duplicate coins verification.\r\n\r\n#### # Summarizing the Improvements:\r\n\r\n1) If any pre-selected-input lookup fail, the process will return the error right away.\r\n    (before, the wallet was fetching all the wallet available coins, walking through the\r\n    entire txes map, and then failing for an invalid pre-selected-input inside SelectCoins)\r\n\r\n2) The pre-selected-inputs lookup failure causes are properly described on the return error.\r\n    (before, we were returning an \"Insufficient Funds\" error for everything, even if the failure\r\n    was due a not solvable external input)\r\n\r\n3) **Faster Coin Selection**: no longer need to \"remove the pre-set inputs from the available coins\r\n    vector so that Coin Selection doesn't pick them\" (which meant to loop-over the entire\r\n    available coins vector at Coin Selection time, erasing duplicate coins that were pre-selected).\r\n   \r\n    Now, the available coins vector, which is built after the pre-selected-inputs fetching,\r\n    doesn’t include the already selected inputs in the first place.\r\n\r\n4) **Faster transaction creation** for transactions that only use manually selected inputs.\r\n\r\n    We now will return early, as soon as we finish fetching the pre-selected-inputs and\r\n    not perform the resources expensive calculation of walking-through the entire wallet\r\n    txes map to obtain the available coins (coins that we will not use).\r\n\r\n---------------------------\r\n\r\nAdded a new bench (f6d0bb2) measuring the transaction creation process, for a wallet with ~250k UTXO, only using the pre-selected-inputs inside coin control. Setting `m_allow_other_inputs=false` to disallow the wallet to include coins automatically.\r\n\r\n#### Result on this PR (tip f6d0bb2d):\r\n\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|        1,048,675.00 |              953.58 |    0.3% |      0.06 | `WalletCreateTransaction`\r\n\r\nvs\r\n\r\n#### Result on master (tip 4a4289e2):\r\n\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|       96,373,458.20 |               10.38 |    0.2% |      5.30 | `WalletCreateTransaction`\r\n\r\nThe benchmark took to run in master: **96.37 milliseconds**, while in this PR: **1 millisecond**  🚀 .",
          "user": {
            "login": "furszy",
            "id": 5377650,
            "node_id": "MDQ6VXNlcjUzNzc2NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/furszy",
            "html_url": "https://github.com/furszy",
            "followers_url": "https://api.github.com/users/furszy/followers",
            "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
            "organizations_url": "https://api.github.com/users/furszy/orgs",
            "repos_url": "https://api.github.com/users/furszy/repos",
            "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/furszy/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 30,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25685",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25685",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25685.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25685.patch"
          },
          "closed_at": "2022-10-27T21:49:29Z",
          "created_at": "2022-07-23T13:19:19Z",
          "updated_at": "2023-05-27T01:48:36Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-22T19:30:40Z",
      "updated_at": "2022-09-22T19:30:40Z",
      "source": {
        "issue": {
          "id": 1260256447,
          "node_id": "PR_kwDOABII5845Fj6p",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25273",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25273/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25273/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25273/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25273",
          "number": 25273,
          "state": "open",
          "state_reason": null,
          "title": "wallet: Pass through transaction locktime and preset input sequences and scripts to CreateTransaction",
          "body": "Currently `FundTransaction` handles transaction locktime and preset input data by extracting the selected inputs and change output from `CreateTransaction`'s results. This means that `CreateTransaction` is actually unaware of any user desired locktime or sequence numbers. This can have an effect on whether and how anti-fee-sniping works.\r\n\r\nThis PR makes `CreateTransaction` aware of the locktime and preset input data by providing them to `CCoinControl`. `CreateTransasction` will then set the sequences, scriptSigs, scriptWItnesses, and locktime as appropriate if they are specified. This allows `FundTransaction` to actually use `CreateTransaction`'s result directly instead of having to extract the parts of it that it wants.\r\n\r\nAdditionally `FundTransaction` will return a `CreateTransactionResult` as `CreateTransaction` does instead of having several output parameters. Lastly, instead of using `-1` as a magic number for the change output position, the change position is changed to be an optional with no value set indicating no desired change output position (when provided as an input parameter) or no change output present (in the result).",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25273",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25273",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25273.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25273.patch"
          },
          "created_at": "2022-06-03T18:58:15Z",
          "updated_at": "2023-09-03T02:26:10Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7442551693,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAG7nFON",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7442551693",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-22T19:55:27Z"
    },
    {
      "event": "commented",
      "id": 1255484595,
      "node_id": "IC_kwDOABII585K1Syz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1255484595",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-22T19:56:21Z",
      "updated_at": "2022-09-22T19:56:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks @fanquake, I fixed the two issues.\r\n\r\nI also added a test for a transaction using `subtractfeefromamount`",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1255484595",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "mentioned",
      "id": 7442556958,
      "node_id": "MEE_lADOABII585SV7NTzwAAAAG7nGge",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7442556958",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-22T19:56:21Z"
    },
    {
      "event": "subscribed",
      "id": 7442556963,
      "node_id": "SE_lADOABII585SV7NTzwAAAAG7nGgj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7442556963",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-22T19:56:21Z"
    },
    {
      "event": "reviewed",
      "id": 1117618586,
      "node_id": "PRR_kwDOABII585CnYGa",
      "url": null,
      "actor": null,
      "commit_id": "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "HUGE Concept ACK obviously 🥳 🥳 \r\n\r\n~This needs to obey -maxtxfee, so I'd suggest that coin selection keeps track of what ancestors the tx has and how much of the fees is ancestors vs this transaction. And we'd want a test where the target feerate is just below maxtxfee and there are low-feerate ancestors to bump, and so `total fees paid / size of this tx` is higher than maxtxfee, but actually you're just paying to bump.~\r\n\r\n~Also, given that there is a (small) chance of overpayment, it would be good to check that -maxtxfee protects against something drastic. For example, a test where all the coins share 1 large parent? It will overestimate and -maxtxfee should make sure the tx isn't sent?~ edit: this is totally wrong",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1117618586",
      "submitted_at": "2022-09-22T20:09:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-22T21:40:34Z",
      "updated_at": "2022-09-22T21:40:34Z",
      "source": {
        "issue": {
          "id": 1111576675,
          "node_id": "PR_kwDOABII584xcXBo",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24128",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24128/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24128/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24128/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/24128",
          "number": 24128,
          "state": "open",
          "state_reason": null,
          "title": "wallet: BIP 326 sequence based anti-fee-snipe for taproot inputs",
          "body": "The goal of BIP 326 is to provide a \"privacy cloak\" for txs that use sequence-based locking. This is only possible for taproot inputs, as taproot spends may look identical for \"dumb wallets\" and \"smart contracts\" iff they use the key-path spend.\r\n\r\nSequence-based locking has minimally lower anti-fee sniping guarantees if all the txs that created the inputs aren't itself locked to the block they were included in. However, the minimal degradation should be acceptable, given that anti-fee-snipe will set the locktime to the past of 10% of the txs anyway.",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24128",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/24128",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/24128.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/24128.patch"
          },
          "created_at": "2022-01-22T14:12:15Z",
          "updated_at": "2023-08-18T10:29:21Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1118029972,
      "node_id": "PRR_kwDOABII585Co8iU",
      "url": null,
      "actor": null,
      "commit_id": "26f96f0e13ab801993cd7b95282230d45ee8ce65",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1118029972",
      "submitted_at": "2022-09-23T07:37:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1118045668,
      "node_id": "PRR_kwDOABII585CpAXk",
      "url": null,
      "actor": null,
      "commit_id": "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1118045668",
      "submitted_at": "2022-09-23T07:52:02Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1118062799,
      "node_id": "PRR_kwDOABII585CpEjP",
      "url": null,
      "actor": null,
      "commit_id": "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1118062799",
      "submitted_at": "2022-09-23T08:04:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1118076665,
      "node_id": "PRR_kwDOABII585CpH75",
      "url": null,
      "actor": null,
      "commit_id": "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1118076665",
      "submitted_at": "2022-09-23T08:16:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1118109036,
      "node_id": "PRR_kwDOABII585CpP1s",
      "url": null,
      "actor": null,
      "commit_id": "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, thanks a lot for working on this, it will be very helpful!\r\nAnd this set of internal utility functions will very likely be useful for many things in the future.\r\nI'll create a set of E2E tests in eclair to run against this branch when I have a bit more time, I'll let you know the results.",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1118109036",
      "submitted_at": "2022-09-23T08:47:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "labeled",
      "id": 7446310623,
      "node_id": "LE_lADOABII585SV7NTzwAAAAG71a7f",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7446310623",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-23T10:43:50Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "commented",
      "id": 1256381127,
      "node_id": "IC_kwDOABII585K4trH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1256381127",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-23T15:49:00Z",
      "updated_at": "2022-09-23T15:49:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "I ran a first set of tests from within eclair against https://github.com/bitcoin/bitcoin/pull/26152/commits/a07ac02d2bc6500a03c29a0413bb913735dca46f, and everything is looking good :+1: ",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1256381127",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "reviewed",
      "id": 1122523189,
      "node_id": "PRR_kwDOABII585C6Fg1",
      "url": null,
      "actor": null,
      "commit_id": "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1122523189",
      "submitted_at": "2022-09-27T18:52:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7471492341,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAG9Vez1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7471492341",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-27T19:15:31Z"
    },
    {
      "event": "commented",
      "id": 1259945661,
      "node_id": "IC_kwDOABII585LGT69",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1259945661",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-27T19:19:18Z",
      "updated_at": "2022-09-27T20:25:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "@jonatack, @t-bast: Thanks for the review and testing. I made an attempt of getting rid of the getters on MockMempoolEntry, but what I did interfered with the calls made on properties of actual mempool entries. Will have to shift my approach.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1259945661",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "mentioned",
      "id": 7471515035,
      "node_id": "MEE_lADOABII585SV7NTzwAAAAG9VkWb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7471515035",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-27T19:19:18Z"
    },
    {
      "event": "subscribed",
      "id": 7471515039,
      "node_id": "SE_lADOABII585SV7NTzwAAAAG9VkWf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7471515039",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-27T19:19:18Z"
    },
    {
      "event": "mentioned",
      "id": 7471515043,
      "node_id": "MEE_lADOABII585SV7NTzwAAAAG9VkWj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7471515043",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-27T19:19:18Z"
    },
    {
      "event": "subscribed",
      "id": 7471515046,
      "node_id": "SE_lADOABII585SV7NTzwAAAAG9VkWm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7471515046",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-27T19:19:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7471937780,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAG9XLj0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7471937780",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-27T20:25:01Z"
    },
    {
      "event": "commented",
      "id": 1260008562,
      "node_id": "IC_kwDOABII585LGjRy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1260008562",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-27T20:25:04Z",
      "updated_at": "2022-09-27T20:25:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "@glozow: Maybe for\r\n\r\n> This needs to obey -maxtxfee\r\n\r\nMaybe we can add a `maxtxfee` check to the filter introduced in #25729 for max weight after input sets are produced for different subsets of the available coins. Perhaps a separate PR that builds both on this one here and #25729.\r\n\r\n@jonatack, @t-bast:\r\nFixed whitespace issues, applied the propose change to a class for the `struct MockMempoolEntry`, amended comments in Chain interface. Thanks!\r\n",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1260008562",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "mentioned",
      "id": 7471938059,
      "node_id": "MEE_lADOABII585SV7NTzwAAAAG9XLoL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7471938059",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-27T20:25:04Z"
    },
    {
      "event": "subscribed",
      "id": 7471938068,
      "node_id": "SE_lADOABII585SV7NTzwAAAAG9XLoU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7471938068",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-27T20:25:04Z"
    },
    {
      "event": "mentioned",
      "id": 7471942175,
      "node_id": "MEE_lADOABII585SV7NTzwAAAAG9XMof",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7471942175",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-27T20:25:44Z"
    },
    {
      "event": "subscribed",
      "id": 7471942184,
      "node_id": "SE_lADOABII585SV7NTzwAAAAG9XMoo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7471942184",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-27T20:25:44Z"
    },
    {
      "event": "mentioned",
      "id": 7471942195,
      "node_id": "MEE_lADOABII585SV7NTzwAAAAG9XMoz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7471942195",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-27T20:25:44Z"
    },
    {
      "event": "subscribed",
      "id": 7471942199,
      "node_id": "SE_lADOABII585SV7NTzwAAAAG9XMo3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7471942199",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-27T20:25:44Z"
    },
    {
      "event": "reviewed",
      "id": 1123725020,
      "node_id": "PRR_kwDOABII585C-q7c",
      "url": null,
      "actor": null,
      "commit_id": "337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": ">> This needs to obey -maxtxfee\r\n\r\n> Maybe we can add a maxtxfee check to the filter introduced in https://github.com/bitcoin/bitcoin/pull/25729 for max weight after input sets are produced for different subsets of the available coins. Perhaps a separate PR that builds both on this one here and https://github.com/bitcoin/bitcoin/pull/25729.\r\n\r\n~Not sure if this is scope creep, but seems like breaking maxtxfee would be a bug and should probably be done in the same PR? Why not build this on top of #25729?~ ignore",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1123725020",
      "submitted_at": "2022-09-28T14:24:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7685032156,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAHKEEjc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7685032156",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-27T18:53:40Z"
    },
    {
      "event": "commented",
      "id": 1293951299,
      "node_id": "IC_kwDOABII585NICFD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1293951299",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-27T19:08:57Z",
      "updated_at": "2022-10-27T19:08:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "- Reordered members vs initialization\r\n- Removed special casing of UTXOs without relatives in CalculateBumpFee\r\n- Call CalculateBumpFee once for the whole UTXO pool instead of introducing chain-interface dependency on every UTXO\r\n\r\nTodos:\r\n- Prevent exceeding `maxtxfee`\r\n- Add test for bumpfee RPC\r\n- Add secondary modus for CalculateBumpFee that treats the provided UTXOs as being spent together. This allows us to recalculate the bumpfee of all inputs together to resolve our overpayment caveat. ",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1293951299",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "labeled",
      "id": 7686411631,
      "node_id": "LE_lADOABII585SV7NTzwAAAAHKJVVv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7686411631",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-27T22:55:59Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1300814643,
      "node_id": "IC_kwDOABII585NiNsz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1300814643",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-02T16:19:58Z",
      "updated_at": "2022-11-02T16:19:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "@glozow: looking more into this, I realized that the `maxtxfee` refers to an absolute fee, not a feerate. `maxtxfee` is checked after a transaction is built, so I don't see how ancestor aware funding changes anything in regard to `maxtxfee`—we still check at the end whether the amount of fee is allowed, regardless how we calculated the fee. If you meant `maxtxfeerate`, that is used to check raw transactions on submission in `sendrawtx`, so it doesn't apply here either.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1300814643",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "mentioned",
      "id": 7725110962,
      "node_id": "MEE_lADOABII585SV7NTzwAAAAHMc9ay",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7725110962",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-02T16:19:58Z"
    },
    {
      "event": "subscribed",
      "id": 7725110977,
      "node_id": "SE_lADOABII585SV7NTzwAAAAHMc9bB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7725110977",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-02T16:19:58Z"
    },
    {
      "event": "commented",
      "id": 1301002778,
      "node_id": "IC_kwDOABII585Ni7oa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1301002778",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-02T17:42:09Z",
      "updated_at": "2022-11-02T17:42:09Z",
      "author_association": "MEMBER",
      "body": "> maxtxfee refers to an absolute fee, not a feerate. maxtxfee is checked after a transaction is built, so I don't see how ancestor aware funding changes anything in regard to maxtxfee\r\n\r\nAh for some reason I thought it was a feerate, apologies. Question: is it better to only enforce `-maxtxfee` on the fees paid for the tx itself and not on the fees used to bump its ancestors? Or would the user expect that it's applied to any tx, bumping or not?",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1301002778",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "commented",
      "id": 1301062904,
      "node_id": "IC_kwDOABII585NjKT4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1301062904",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-02T18:38:45Z",
      "updated_at": "2022-11-02T18:38:45Z",
      "author_association": "MEMBER",
      "body": "> Question: is it better to only enforce `-maxtxfee` on the fees paid for the tx itself and not on the fees used to bump its ancestors? Or would the user expect that it's applied to any tx, bumping or not?\r\n\r\nI think that `-maxtxfee` should be expected to behave the same regardless of bumping, it's a context-free check.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1301062904",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7726569570,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAHMihhi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7726569570",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-02T19:23:47Z"
    },
    {
      "event": "commented",
      "id": 1301111044,
      "node_id": "IC_kwDOABII585NjWEE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1301111044",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-02T19:26:26Z",
      "updated_at": "2022-11-02T19:26:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "Latest changes:\r\n- Fixed bug where the outpoints spent by a transaction to be replaced got set to a bumpfee of 0\r\n- Added a test for preset inputs and the `bumpfee` RPC\r\n- Rebased\r\n\r\nRemaining Todo:\r\n- Add secondary modus for CalculateBumpFee that treats the provided UTXOs as being spent together. This allows us to recalculate the bumpfee of all inputs together to resolve our overpayment caveat.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1301111044",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "unlabeled",
      "id": 7726640008,
      "node_id": "UNLE_lADOABII585SV7NTzwAAAAHMiyuI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7726640008",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-02T19:33:52Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7736468155,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAHNISK7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7736468155",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-03T23:07:32Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-04T11:36:29Z",
      "updated_at": "2022-11-04T11:36:29Z",
      "source": {
        "issue": {
          "id": 1427976072,
          "node_id": "PR_kwDOABII585BybKF",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26419",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26419/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26419/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26419/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26419",
          "number": 26419,
          "state": "closed",
          "state_reason": null,
          "title": "log: mempool: log removal reason in validation interface",
          "body": "Currently the exact reason a transaction is removed from the mempool isn't logged. It is sometimes detectable from context, but adding the `reason` to the validation interface logs (where it is already passed) seems like an easy way to disambiguate.\r\n\r\nFor example in the case of mempool expiry, the logs look like this:\r\n\r\n```\r\n[validationinterface.cpp:220] [TransactionRemovedFromMempool] [validation] Enqueuing TransactionRemovedFromMempool: txid=<txid> wtxid=<wtxid>\r\n[txmempool.cpp:1050] [RemoveUnbroadcastTx] [mempool] Removed <txid> from set of unbroadcast txns before confirmation that txn was sent out\r\n[validationinterface.cpp:220] [operator()] [validation] TransactionRemovedFromMempool: txid=<txid> wtxid=<wtxid>\r\n[validation.cpp:267] [LimitMempoolSize] [mempool] Expired 1 transactions from the memory pool\r\n```\r\n\r\nThere is no context-free way to know $txid was evicted on the basis of expiry. This change will make that case (and probably others) clear.",
          "user": {
            "login": "jamesob",
            "id": 73197,
            "node_id": "MDQ6VXNlcjczMTk3",
            "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jamesob",
            "html_url": "https://github.com/jamesob",
            "followers_url": "https://api.github.com/users/jamesob/followers",
            "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
            "organizations_url": "https://api.github.com/users/jamesob/orgs",
            "repos_url": "https://api.github.com/users/jamesob/repos",
            "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jamesob/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26419",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26419",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26419.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26419.patch"
          },
          "closed_at": "2022-11-05T09:34:08Z",
          "created_at": "2022-10-29T00:12:05Z",
          "updated_at": "2022-11-05T09:34:09Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-04T19:31:19Z",
      "updated_at": "2022-11-04T19:31:19Z",
      "source": {
        "issue": {
          "id": 1403702935,
          "node_id": "PR_kwDOABII585Aham6",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26289",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26289/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26289/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26289/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26289",
          "number": 26289,
          "state": "closed",
          "state_reason": null,
          "title": "Use util::Result in for calculating mempool ancestors",
          "body": "Upon reviewing the documentation for `CTxMemPool::CalculateMemPoolAncestors`, I noticed `setAncestors` was meant to be an `out` parameter but actually is an `in,out` parameter, as can be observed by adding `assert(setAncestors.empty());` as the first line in the function and running `make check`. This PR fixes this unexpected behaviour and introduces refactoring improvements to make intents and effects of the code more clear.\r\n\r\n## Unexpected behaviour\r\nThis behaviour occurs only in the package acceptance path, currently only triggered by `testmempoolaccept` and `submitpackage` RPCs. \r\n\r\nIn `MemPoolAccept::AcceptMultipleTransactions()`, we first call `PreChecks()` and then `SubmitPackage()` with the same `Workspace ws` reference. `PreChecks` leaves `ws.m_ancestors` in a potentially non-empty state, before it is passed on to `MemPoolAccept::SubmitPackage`. `SubmitPackage` is the only place where `setAncestors` isn't guaranteed to be empty before calling `CalculateMemPoolAncestors`. The most straightforward fix is to just forcefully clear `setAncestors` at the beginning of CalculateMemPoolAncestors, which is done in the first bugfix commit.\r\n\r\n## Improvements\r\n### Return value instead of out-parameters\r\nThis PR updates the function signatures for `CTxMemPool::CalculateMemPoolAncestors` and `CTxMemPool::CalculateAncestorsAndCheckLimits` to use a `util::Result` return type and eliminate both the `setAncestors` `in,out`-parameter as well as the error string. It simplifies the code and makes the intent and effects more explicit.\r\n\r\n### Observability\r\nThere are 7 instances where we currently call `CalculateMemPoolAncestors` without actually checking if the function succeeded because we assume that it can't fail, such as in [miner.cpp](https://github.com/bitcoin/bitcoin/blob/69b10212ea5370606c7a5aa500a70c36b4cbb58f/src/node/miner.cpp#L399). This PR adds a new wrapper `AssumeCalculateMemPoolAncestors` function that logs such unexpected failures, or in case of debug builds even halts the program. It's not crucial to the objective, more of an observability improvement that seems sensible to add on here.",
          "user": {
            "login": "stickies-v",
            "id": 69010457,
            "node_id": "MDQ6VXNlcjY5MDEwNDU3",
            "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stickies-v",
            "html_url": "https://github.com/stickies-v",
            "followers_url": "https://api.github.com/users/stickies-v/followers",
            "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
            "organizations_url": "https://api.github.com/users/stickies-v/orgs",
            "repos_url": "https://api.github.com/users/stickies-v/repos",
            "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/stickies-v/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 164208572,
              "node_id": "MDU6TGFiZWwxNjQyMDg1NzI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool",
              "name": "Mempool",
              "color": "fef2c0",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 20,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26289",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26289",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26289.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26289.patch"
          },
          "closed_at": "2023-01-03T21:31:16Z",
          "created_at": "2022-10-10T20:55:08Z",
          "updated_at": "2023-01-03T21:31:17Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 7745501793,
      "node_id": "LE_lADOABII585SV7NTzwAAAAHNqvph",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7745501793",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-05T09:47:00Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-05T10:14:58Z",
      "updated_at": "2022-11-05T10:14:58Z",
      "source": {
        "issue": {
          "id": 1332409874,
          "node_id": "PR_kwDOABII584817t0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25806",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25806/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25806/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25806/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25806",
          "number": 25806,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: group outputs only once, decouple it from Coin Selection",
          "body": "The idea originates from https://github.com/bitcoin/bitcoin/pull/24845#issuecomment-1130310321.\r\n\r\nNote:\r\nFor clarity, it's recommended to start reviewing from the end result to understand the structure of the flow.\r\n\r\n#### GroupOutputs function rationale:\r\nIf \"Avoid Partial Spends\" is enabled, the function gathers outputs with the same script together inside a container. So Coin Selection can treats them as if them were just one possible input and either select them all or not select them. \r\n\r\n#### How the Inputs Fetch + Selection process roughly works:\r\n\r\n```\r\n1. Fetch user’s manually selected inputs.\r\n2. Fetch wallet available coins (walks through the entire wallet txes map) and insert them into a set of vectors (each vector store outputs from a single type).\r\n3. Coin Selection Process:\r\n   Call `AttemptSelection` 8 times. Each of them expands the coin eligibility filter (accepting a larger subset of coins in the calculation) until it founds a solutions or completely fails if no solutions gets founds after the 8 rounds.\r\n\r\n   Each `AttemptSelection` call performs the following actions:\r\n     - For each output type supported by the wallet (P2SH, P2PK, P2WPKH, P2WSH and a combination of all of them):\r\n       Call ‘ChooseSelectionResult’ providing the respective, filtered by type, coins vector. Which:\r\n           I. Groups the outputs vector twice (one for positive only and a second one who includes the negative ones as well).\r\n              - GroupOutputs walks-through the entire inputted coins vector one time at least, + more if we are avoiding partial spends, to generate a vector of OutputGroups.\r\n           II. Then performs every coin selection algorithm using the recently created vector of OutputGroup: (1) BnB, (2) knapsack and (3) SRD.\r\n           III. Then returns the best solution out of them.\r\n```\r\n\r\nWe perform the general operation of gathering outputs, with the same script, into a single container inside:\r\nEach coins selection attempt (8 times —> each coin eligibility filter), for each of the outputs vector who were filtered by type (plus another one joining all the outputs as well if needed), twice (one for the positive only outputs effective value and a second one for all of them).\r\n\r\nSo, in the worst case scenario where no solution is found after the 8 Coin Selection attempts, the `GroupOutputs` function is called 80 times (8 * 5 * 2).\r\n\r\n#### Improvements:\r\n\r\nThis proposal streamlines the process so that the output groups, filtered by coin eligibility and type, are created in a single loop outside of the Coin Selection Process. \r\n\r\nThe new process is as follows:\r\n\r\n```\r\n1. Fetch user’s manually selected inputs.\r\n2. Fetch wallet available coins.\r\n3. Group outputs by each coin eligibility filter and each different output type found.\r\n4. Coin Selection Process: \r\n   Call AttemptSelection 8 times. Each of them expands the coin eligibility filter (accepting different output groups) until it founds a solutions or completely fails if no solutions gets founds after the 8 rounds.\r\n   \r\n   Each ‘AttemptSelection’ call performs the following actions:\r\n      - For each output type supported by the wallet (P2SH, P2PK, P2WPKH, P2WSH and all of them):\r\n          A. Call ‘ChooseSelectionResult’ providing the respective, filtered by type, output group. Which:\r\n             I. Performs every coin selection algorithm using the provided vector of OutputGroup: (1) BnB, (2) knapsack and (3) SRD.\r\n             II. Then returns the best solution out of them.\r\n```\r\n\r\nExtra Note:\r\nThe next steps after this PR will be to:\r\n1) Merge `AvailableCoins` and `GroupOutputs` processes.\r\n2) Skip entire coin selection rounds if no new coins are added into the subsequent round.\r\n3) Remove global feerates from the OutputGroup class.\r\n4) Remove secondary \"grouped\" tx creation from `CreateTransactionInternal` by running Coin Selection results over the aps grouped outputs vs non-aps ones.",
          "user": {
            "login": "furszy",
            "id": 5377650,
            "node_id": "MDQ6VXNlcjUzNzc2NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/furszy",
            "html_url": "https://github.com/furszy",
            "followers_url": "https://api.github.com/users/furszy/followers",
            "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
            "organizations_url": "https://api.github.com/users/furszy/orgs",
            "repos_url": "https://api.github.com/users/furszy/repos",
            "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/furszy/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 13,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25806",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25806",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25806.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25806.patch"
          },
          "closed_at": "2023-03-06T23:52:42Z",
          "created_at": "2022-08-08T21:19:07Z",
          "updated_at": "2023-05-27T01:47:50Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-05T12:45:31Z",
      "updated_at": "2022-11-05T12:45:31Z",
      "source": {
        "issue": {
          "id": 1320863837,
          "node_id": "PR_kwDOABII5848PxGI",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25729",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25729/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25729/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25729/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25729",
          "number": 25729,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Check max transaction weight in CoinSelection",
          "body": "This PR is an attempt to fix #5782.\r\n\r\nI have added 4 test scenarios, 3 of them provided here https://github.com/bitcoin/bitcoin/issues/5782#issuecomment-73819058 (slightly modified to use a segwit wallet).\r\n\r\nHere are my benchmarks : \r\n## PR\r\n|               ns/op |                op/s |    err% |          ins/op |          cyc/op |    IPC |         bra/op |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|        1,466,341.00 |              681.97 |    0.6% |   11,176,762.00 |    3,358,752.00 |  3.328 |   1,897,839.00 |    0.3% |      0.02 | `CoinSelection`\r\n\r\n## Master\r\n\r\n|               ns/op |                op/s |    err% |          ins/op |          cyc/op |    IPC |         bra/op |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|        1,526,029.00 |              655.30 |    0.5% |   11,142,188.00 |    3,499,200.00 |  3.184 |   1,994,156.00 |    0.2% |      0.02 | `CoinSelection`",
          "user": {
            "login": "aureleoules",
            "id": 22493292,
            "node_id": "MDQ6VXNlcjIyNDkzMjky",
            "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aureleoules",
            "html_url": "https://github.com/aureleoules",
            "followers_url": "https://api.github.com/users/aureleoules/followers",
            "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
            "organizations_url": "https://api.github.com/users/aureleoules/orgs",
            "repos_url": "https://api.github.com/users/aureleoules/repos",
            "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/aureleoules/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 28,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25729",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25729",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25729.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25729.patch"
          },
          "closed_at": "2022-12-06T17:09:51Z",
          "created_at": "2022-07-28T12:33:06Z",
          "updated_at": "2023-01-12T11:51:43Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1304553544,
      "node_id": "IC_kwDOABII585NwehI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1304553544",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-05T14:09:19Z",
      "updated_at": "2022-11-05T14:09:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "Update:\r\n\r\n<s>Caveat: If multiple UTXOs share ancestry, this implementation will overpay by bumping shared ancestors once per descendant.</s>\r\n\r\nAfter calculating an input set candidate, we recalculate the bumpfee for the collective set of inputs and correct our fee estimation if there was an overestimate due to overlapping ancestries.\r\n\r\nLeft to do:\r\n• rebase\r\n• clean up tests\r\n• clean up commits\r\n• touch up commit messages",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1304553544",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7755223722,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAHOP1Kq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7755223722",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-07T18:20:36Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7755413005,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAHOQjYN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7755413005",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-07T18:49:19Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7755482401,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAHOQ0Uh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7755482401",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-07T19:00:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7755624814,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAHORXFu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7755624814",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-07T19:19:16Z"
    },
    {
      "event": "unlabeled",
      "id": 7755644921,
      "node_id": "UNLE_lADOABII585SV7NTzwAAAAHORb_5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7755644921",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-07T19:22:14Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1306080540,
      "node_id": "IC_kwDOABII585N2TUc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1306080540",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-07T19:22:32Z",
      "updated_at": "2022-11-07T19:22:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "Cleaned up tests, redrew commits, touched up commit messages, rebased.\r\n\r\n**Ready for review.** :partying_face:",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1306080540",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "ready_for_review",
      "id": 7755647363,
      "node_id": "RFRE_lADOABII585SV7NTzwAAAAHORcmD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7755647363",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-07T19:22:35Z"
    },
    {
      "event": "reviewed",
      "id": 1173244112,
      "node_id": "PRR_kwDOABII585F7kjQ",
      "url": null,
      "actor": null,
      "commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Are there any functional tests that test for fee calculation for a transaction with both an input with an unconfirmed ancestor and a confirmed input? I couldn't find one by looking at the descriptions of the functional tests.",
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1173244112",
      "submitted_at": "2022-11-09T05:11:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "labeled",
      "id": 7803899672,
      "node_id": "LE_lADOABII585SV7NTzwAAAAHRJg8Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7803899672",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-14T12:58:55Z",
      "label": {
        "name": "Review club",
        "color": "0052cc"
      }
    },
    {
      "event": "subscribed",
      "id": 7809501638,
      "node_id": "SE_lADOABII585SV7NTzwAAAAHRe4nG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7809501638",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-15T01:19:12Z"
    },
    {
      "event": "reviewed",
      "id": 1183993011,
      "node_id": "PRR_kwDOABII585Gkkyz",
      "url": null,
      "actor": null,
      "commit_id": "ad8bffe548a2536f925e6911c7d50c1aaab1a59e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1183993011",
      "submitted_at": "2022-11-17T09:56:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1187092079,
      "node_id": "PRR_kwDOABII585GwZZv",
      "url": null,
      "actor": null,
      "commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1187092079",
      "submitted_at": "2022-11-19T17:45:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-21T13:12:37Z",
      "updated_at": "2022-11-21T13:12:37Z",
      "source": {
        "issue": {
          "id": 574036791,
          "node_id": "MDU6SXNzdWU1NzQwMzY3OTE=",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18243",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18243/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18243/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18243/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/18243",
          "number": 18243,
          "state": "open",
          "state_reason": null,
          "title": "Make fee estimation mockable via RPC",
          "body": "Right now the only(?) test we have that exercises interesting fee estimation codepaths is `feature_estimate_fee.py`. For fee-bumping and other tests it would make sense to allow test authors to quickly construct fluctuating fee scenarios at will.\r\n\r\nrelated: https://github.com/bitcoin/bitcoin/issues/18240",
          "user": {
            "login": "instagibbs",
            "id": 5767891,
            "node_id": "MDQ6VXNlcjU3Njc4OTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/instagibbs",
            "html_url": "https://github.com/instagibbs",
            "followers_url": "https://api.github.com/users/instagibbs/followers",
            "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
            "organizations_url": "https://api.github.com/users/instagibbs/orgs",
            "repos_url": "https://api.github.com/users/instagibbs/repos",
            "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/instagibbs/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 1,
          "created_at": "2020-03-02T15:05:14Z",
          "updated_at": "2022-11-21T13:12:37Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1188589097,
      "node_id": "PRR_kwDOABII585G2G4p",
      "url": null,
      "actor": null,
      "commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK. Finished going through the code in the first 2 commits, more comments to come as I progress.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1188589097",
      "submitted_at": "2022-11-22T01:30:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1190768828,
      "node_id": "PRR_kwDOABII585G-bC8",
      "url": null,
      "actor": null,
      "commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1190768828",
      "submitted_at": "2022-11-23T17:57:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-23T19:57:38Z",
      "updated_at": "2022-11-23T19:57:38Z",
      "source": {
        "issue": {
          "id": 1461939996,
          "node_id": "PR_kwDOABII585Dkmyw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26560",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26560/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26560/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26560/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26560",
          "number": 26560,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: bugfix, invalid CoinsResult cached total amount",
          "body": "This comes with #26559.\r\n\r\nSolving few bugs inside the wallet's transaction creation\r\nprocess and adding test coverage for them.\r\nPlus, making use of the `CoinsResult::total_amount` cached value\r\ninside the Coin Selection process to return early if we don't have\r\nenough funds to cover the target amount.\r\n\r\n### Bugs\r\n\r\n1) The `CoinsResult::Erase` method removes only one\r\noutput from the available coins vector (there is a [loop break](https://github.com/bitcoin/bitcoin/blob/c1061be14a515b0ed4f4d646fcd0378c62e6ded3/src/wallet/spend.cpp#L112)\r\nthat should have never been there) and not all the preset inputs.\r\n\r\n   Which on master is not a problem, because since [#25685](https://github.com/bitcoin/bitcoin/pull/25685)\r\n   we are no longer using the method. But, it's a bug on v24\r\n   (check [#26559](https://github.com/bitcoin/bitcoin/pull/26559)).\r\n\r\n   This method it's being fixed and not removed because I'm later using it to solve\r\n   another bug inside this PR.\r\n\r\n2) As we update the total cached amount of the `CoinsResult` object inside\r\n   `AvailableCoins` and we don't use such function inside the coin selection\r\n   tests (we manually load up the `CoinsResult` object), there is a discrepancy\r\n   between the outputs that we add/erase and the total amount cached value.\r\n\r\n### Improvements\r\n\r\n* This makes use of the `CoinsResult` total amount field to early return\r\n  with an \"Insufficient funds\" error inside Coin Selection if the tx target\r\n  amount is greater than the sum of all the wallet available coins plus the\r\n  preset inputs amounts (we don't need to perform the entire coin selection\r\n  process if we already know that there aren't enough funds inside our wallet).\r\n\r\n### Test Coverage\r\n\r\n1) Adds test coverage for the duplicated preset input selection bug that we have in v24.\r\n  Where the wallet invalidly selects the preset inputs twice during the Coin Selection\r\n  process. Which ends up with a \"good\" Coin Selection result that does not cover the\r\n  total tx target amount. Which, alone, crashes the wallet due an insane fee.\r\n  But.. to make it worst, adding the subtract fee from output functionality\r\n  to this mix ends up with the wallet by-passing the \"insane\" fee assertion,\r\n  decreasing the output amount to fulfill the insane fee, and.. sadly,\r\n  broadcasting the tx to the network.\r\n\r\n2) Adds test coverage for the `CoinsResult::Erase` method.",
          "user": {
            "login": "furszy",
            "id": 5377650,
            "node_id": "MDQ6VXNlcjUzNzc2NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/furszy",
            "html_url": "https://github.com/furszy",
            "followers_url": "https://api.github.com/users/furszy/followers",
            "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
            "organizations_url": "https://api.github.com/users/furszy/orgs",
            "repos_url": "https://api.github.com/users/furszy/repos",
            "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/furszy/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 16,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26560",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26560",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26560.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26560.patch"
          },
          "closed_at": "2022-12-05T17:01:36Z",
          "created_at": "2022-11-23T15:13:40Z",
          "updated_at": "2023-09-01T14:47:21Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1330485399,
      "node_id": "IC_kwDOABII585PTZiX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1330485399",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-29T11:30:16Z",
      "updated_at": "2022-11-29T11:30:16Z",
      "author_association": "MEMBER",
      "body": "Needs rebase after 8597260872bbef86524996ec695ffb30ec596416",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1330485399",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-29T19:56:15Z",
      "updated_at": "2022-11-29T19:56:15Z",
      "source": {
        "issue": {
          "id": 1468076653,
          "node_id": "PR_kwDOABII585D44Ok",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26600",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26600/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26600/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26600/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26600",
          "number": 26600,
          "state": "closed",
          "state_reason": null,
          "title": "test: Set wallet type in test_runner when only one type is allowed",
          "body": "Currently devs are free to set or not set the wallet type in the test_runner when only one type is allowed to be set.\r\n\r\nThis is inconsistent and causes review comments such as:\r\n\r\n* https://github.com/bitcoin/bitcoin/pull/24865#discussion_r1009752111\r\n",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26600",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26600",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26600.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26600.patch"
          },
          "closed_at": "2022-11-30T09:25:27Z",
          "created_at": "2022-11-29T13:34:26Z",
          "updated_at": "2022-11-30T09:51:00Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1198255084,
      "node_id": "PRR_kwDOABII585Ha-vs",
      "url": null,
      "actor": null,
      "commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "898ad9d5904f1b689d18d94f20d92500cf443758\r\nConcept ACK\r\nLGTM, suggestions are minor. I'll continue reviewing.",
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1198255084",
      "submitted_at": "2022-11-29T22:58:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "labeled",
      "id": 7920286929,
      "node_id": "LE_lADOABII585SV7NTzwAAAAHYFfzR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7920286929",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-30T09:45:45Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1186932380,
      "node_id": "PRR_kwDOABII585Gvyac",
      "url": null,
      "actor": null,
      "commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1186932380",
      "submitted_at": "2022-11-30T18:05:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1198749149,
      "node_id": "PRR_kwDOABII585Hc3Xd",
      "url": null,
      "actor": null,
      "commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1198749149",
      "submitted_at": "2022-12-02T00:08:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-02T17:30:18Z",
      "updated_at": "2022-12-02T17:30:18Z",
      "source": {
        "issue": {
          "id": 1436104730,
          "node_id": "PR_kwDOABII585CNk-9",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26451",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26451/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26451/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26451/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26451",
          "number": 26451,
          "state": "open",
          "state_reason": null,
          "title": "Enforce incentive compatibility for all RBF replacements",
          "body": "Opening this for discussion.\r\n\r\nCurrently it's possible in our RBF rules to evict a transaction with higher mining score from our mempool, in favor of a transaction with a higher total fee but lower feerate.  This patch would fix this incentive incompatibility, by requiring that any new transaction have a mining score (as defined by the minimum of its feerate and its feerate including ancestors) to be greater than the individual feerates of all transactions that would be evicted.\r\n\r\nBecause this new feerate criteria includes the ancestors of a new transaction in the score, we are able to eliminate the prohibition against including new unconfirmed parents in a replacement transaction, a slight relaxation of the prior rules.",
          "user": {
            "login": "sdaftuar",
            "id": 7463573,
            "node_id": "MDQ6VXNlcjc0NjM1NzM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sdaftuar",
            "html_url": "https://github.com/sdaftuar",
            "followers_url": "https://api.github.com/users/sdaftuar/followers",
            "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
            "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
            "repos_url": "https://api.github.com/users/sdaftuar/repos",
            "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64584,
              "node_id": "MDU6TGFiZWw2NDU4NA==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming",
              "name": "Brainstorming",
              "color": "ebd775",
              "default": false
            },
            {
              "id": 82428251,
              "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
              "name": "TX fees and policy",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 33,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26451",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26451",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26451.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26451.patch"
          },
          "created_at": "2022-11-04T13:50:15Z",
          "updated_at": "2023-08-31T20:56:43Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1203025818,
      "node_id": "PRR_kwDOABII585HtLea",
      "url": null,
      "actor": null,
      "commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1203025818",
      "submitted_at": "2022-12-02T20:12:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1205584712,
      "node_id": "PRR_kwDOABII585H28NI",
      "url": null,
      "actor": null,
      "commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1205584712",
      "submitted_at": "2022-12-06T01:25:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1205980356,
      "node_id": "PRR_kwDOABII585H4czE",
      "url": null,
      "actor": null,
      "commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1205980356",
      "submitted_at": "2022-12-06T06:44:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1206585147,
      "node_id": "PRR_kwDOABII585H6wc7",
      "url": null,
      "actor": null,
      "commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nStill in the process of reviewing (have reviewed up to and most of b669fd94f84e679d4549ef0abe1b0483e1406152), but left a few comments. \r\n\r\nSome general feedback: \r\n\r\nI noticed a lot of asserts being used. As I understand it, this is going to be a functionality exposed to the wallet, so wouldn't it be better to replace asserts with error messages that can be returned to the wallet? Seems better than crashing the node, IMO.\r\n\r\nAlso, the `MiniMiner` function is quite complicated. It might be worth adding a high-level overview to the PR description for the `MiniMiner::MiniMiner` as it seems like this is where a lot of the logic is. In particular, it seems to be working with several caches, so perhaps describing the general flow would be helpful. Take this feedback with a grain of salt, tho, as I'm not super familiar with the mempool and that could be why I'm struggling to follow the steps :sweat_smile: ",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1206585147",
      "submitted_at": "2022-12-06T15:06:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1206979066,
      "node_id": "PRR_kwDOABII585H8Qn6",
      "url": null,
      "actor": null,
      "commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Hopefully this is helpful and not annoying, but here's a branch that makes the first couple commits less assert-happy and applies some of the suggestions to miniminer: https://github.com/glozow/bitcoin/tree/26152-fixups",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1206979066",
      "submitted_at": "2022-12-06T17:16:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "commented",
      "id": 1340645477,
      "node_id": "IC_kwDOABII585P6KBl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1340645477",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-07T09:28:29Z",
      "updated_at": "2022-12-07T09:28:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Hopefully this is helpful and not annoying, but here's a branch that makes the first couple commits less assert-happy and applies some of the suggestions to miniminer: https://github.com/glozow/bitcoin/tree/26152-fixups\r\n\r\nlgtm! ",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1340645477",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "reviewed",
      "id": 1208822643,
      "node_id": "PRR_kwDOABII585IDStz",
      "url": null,
      "actor": null,
      "commit_id": "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1208822643",
      "submitted_at": "2022-12-07T17:16:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "commented",
      "id": 1344506798,
      "node_id": "IC_kwDOABII585QI4uu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1344506798",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-09T16:24:23Z",
      "updated_at": "2022-12-09T16:24:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "Two thoughts:\r\n\r\n1) I think this could be split up into two PRs; one for `MiniMiner` and another for the wallet logic. My reasoning here is the MiniMiner code seems like it could be useful outside of the wallet use case and thus could be merged independently and both parts by themselves seem complex enough that splitting it into two might make things easier to review.\r\n\r\n2) per @LarryRuane 's comment [#26152 (comment)](https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1038492630), I'm also not totally convinced we need the `to_be_replaced` logic in `MiniMiner`. I took out all of the code relating to `to_be_replaced` and the unit and functional tests still pass. It's possible this is due to insufficient test coverage, in which case having a test case to demonstrate why this logic is necessary would be super helpful. I have a few more thoughts regarding whether `MiniMiner` or the wallet should be handling the conflicting transactions logic, but I'll try to add a concrete example in a test case to first convince myself and also make the conversation more productive",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1344506798",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "mentioned",
      "id": 8000111025,
      "node_id": "MEE_lADOABII585SV7NTzwAAAAHc2AGx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8000111025",
      "actor": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-09T16:24:23Z"
    },
    {
      "event": "subscribed",
      "id": 8000111042,
      "node_id": "SE_lADOABII585SV7NTzwAAAAHc2AHC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8000111042",
      "actor": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-09T16:24:23Z"
    },
    {
      "event": "commented",
      "id": 1344541489,
      "node_id": "IC_kwDOABII585QJBMx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1344541489",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-09T17:01:45Z",
      "updated_at": "2022-12-09T17:01:45Z",
      "author_association": "MEMBER",
      "body": "> I'm also not totally convinced we need the to_be_replaced logic in MiniMiner. I took out all of the code relating to to_be_replaced and the unit and functional tests still pass. It's possible this is due to insufficient test coverage\r\n\r\nI would say this is at least 95% due to insufficient coverage in the unit tests (pretty sparse at the moment). I don't think it's possible to hit very much of the replacement-related logic through functional tests, because our (1) RBF rules currently do not allow any additional unconfirmed inputs so we won't actually ask MiniMiner to calculate much, (2) our wallet will never try to replace something with descendants and (3) our wallet will always use all the inputs from the replacee (so the size of `to_be_replaced` is always 1 and the set of unconfirmed ancestors is identical before and after).\r\n\r\nBut maybe this is a good reason *to* remove it! If it never executes because of how our wallet operates, and the wallet is the only client of this interface, then it would be complexity for no reason. We could just use `CalculateTotalBumpFees()` for a replacement (since that's all the unconfirmed inputs we'll use) and only add logic for replacements if (1) ever changes in the future.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1344541489",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "commented",
      "id": 1345580773,
      "node_id": "IC_kwDOABII585QM-7l",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1345580773",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-11T15:16:40Z",
      "updated_at": "2022-12-11T15:16:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "> But maybe this is a good reason _to_ remove it! If it never executes because of how our wallet operates, and the wallet is the only client of this interface, then it would be complexity for no reason.\r\n\r\nI think this is a good reason to leave it out for now. I started writing a unit test to try and cover different replacement scenarios, but it felt a little silly to be writing tests for scenarios that would never actually happen to due the RBF rules and how the wallet behaves.\r\n\r\nI also haven't been able to think of a scenario where `MiniMiner` would return an incorrect bumpfee if it didn't have the \"to be replaced logic\" if `MiniMiner` was given a set of \"reasonable\" outpoints in the first place. @Xekyo perhaps you have an example that I haven't thought of?\r\n\r\ntldr; imo we should prefer a simpler implementation which makes as few assumptions as possible and add in more complexity if/when it is needed.",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1345580773",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "mentioned",
      "id": 8007879743,
      "node_id": "MEE_lADOABII585SV7NTzwAAAAHdTow_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8007879743",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-11T15:16:40Z"
    },
    {
      "event": "subscribed",
      "id": 8007879746,
      "node_id": "SE_lADOABII585SV7NTzwAAAAHdToxC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8007879746",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-11T15:16:40Z"
    },
    {
      "event": "reviewed",
      "id": 1220130696,
      "node_id": "PRR_kwDOABII585IubeI",
      "url": null,
      "actor": null,
      "commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Just FYI, I added a commit with a benchmark to the [branch](https://github.com/LarryRuane/bitcoin/commits/2022-11-pr26152-refactor) I mentioned earlier (with an alternate implementation of `MiniMiner`); feel free to cherry-pick this commit. It also seems useful as a stress test -- most of my comments below are the result of running the benchmark.",
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1220130696",
      "submitted_at": "2022-12-16T06:31:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1187107175,
      "node_id": "PRR_kwDOABII585GwdFn",
      "url": null,
      "actor": null,
      "commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "WIP: I’ve addressed all comments up to https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1344506798\r\n\r\nI am currently evaluating whether splitting this PR in two makes sense, and still need to investigate @LarryRuane’s alternative branch.\r\n\r\nRedesignating this PR to draft to signal that it’s not ready for review at the moment.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1187107175",
      "submitted_at": "2023-01-31T21:48:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8404085476,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAH07Crk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8404085476",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-31T21:49:17Z"
    },
    {
      "event": "convert_to_draft",
      "id": 8404098782,
      "node_id": "CTDE_lADOABII585SV7NTzwAAAAH07F7e",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8404098782",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-31T21:51:13Z"
    },
    {
      "event": "unlabeled",
      "id": 8404521593,
      "node_id": "UNLE_lADOABII585SV7NTzwAAAAH08tJ5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8404521593",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-31T22:55:51Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-01T05:01:50Z",
      "updated_at": "2023-02-01T05:01:50Z",
      "source": {
        "issue": {
          "id": 1551005139,
          "node_id": "PR_kwDOABII585IOLQz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26935",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26935/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26935/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26935/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26935",
          "number": 26935,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Fix clang-tidy readability-const-return-type violations",
          "body": "This comes up during review, so instead of wasting review cycles on this, just enforce it via CI",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26935",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26935",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26935.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26935.patch"
          },
          "closed_at": "2023-02-01T15:53:45Z",
          "created_at": "2023-01-20T15:06:42Z",
          "updated_at": "2023-02-02T09:53:48Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-01T05:07:52Z",
      "updated_at": "2023-02-01T05:07:52Z",
      "source": {
        "issue": {
          "id": 1535454202,
          "node_id": "PR_kwDOABII585HfnBR",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26902",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26902/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26902/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26902/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26902",
          "number": 26902,
          "state": "open",
          "state_reason": null,
          "title": "wallet: do not backdate locktime if it may lead to fingerprinting",
          "body": "This is a draft implementation for #26526 and #26527. As suggested by 0xB10C, back-dating locktime in transactions that are RBF replacements or spend unconfirmed UTXOs may be used as a fingerprint of Bitcoin Core wallet.",
          "user": {
            "login": "rodentrabies",
            "id": 7646953,
            "node_id": "MDQ6VXNlcjc2NDY5NTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7646953?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rodentrabies",
            "html_url": "https://github.com/rodentrabies",
            "followers_url": "https://api.github.com/users/rodentrabies/followers",
            "following_url": "https://api.github.com/users/rodentrabies/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/rodentrabies/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/rodentrabies/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/rodentrabies/subscriptions",
            "organizations_url": "https://api.github.com/users/rodentrabies/orgs",
            "repos_url": "https://api.github.com/users/rodentrabies/repos",
            "events_url": "https://api.github.com/users/rodentrabies/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/rodentrabies/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26902",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26902",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26902.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26902.patch"
          },
          "created_at": "2023-01-16T20:27:55Z",
          "updated_at": "2023-07-10T15:05:15Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-01T05:48:59Z",
      "updated_at": "2023-02-01T05:48:59Z",
      "source": {
        "issue": {
          "id": 1511435068,
          "node_id": "PR_kwDOABII585GOkOp",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26756",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26756/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26756/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26756/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26756",
          "number": 26756,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Replace `GetBalance()` logic with `AvailableCoins()`",
          "body": "This PR proposes a solution for https://github.com/bitcoin/bitcoin/issues/26500 by changing the `AvailableCoins()` function to calculate values by status (`TRUSTED`, `UNTRUSTED_PENDING` and `IMMATURE`) and ownership (`MINE`, `WATCH_ONLY`), eliminating the `GetBalance()` logic.\r\n\r\nThe downside is that the cache is no longer used. Not sure about the performance implication, but if the approach is OK, caching can also be used with this solution.\r\n\r\nThis approach also fixes the bug mentioned at the end of the `wallet_abandonconflict.py` file.",
          "user": {
            "login": "w0xlt",
            "id": 94266259,
            "node_id": "U_kgDOBZ5jkw",
            "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/w0xlt",
            "html_url": "https://github.com/w0xlt",
            "followers_url": "https://api.github.com/users/w0xlt/followers",
            "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
            "organizations_url": "https://api.github.com/users/w0xlt/orgs",
            "repos_url": "https://api.github.com/users/w0xlt/repos",
            "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/w0xlt/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26756",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26756",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26756.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26756.patch"
          },
          "closed_at": "2023-05-03T14:43:16Z",
          "created_at": "2022-12-27T04:58:13Z",
          "updated_at": "2023-05-03T14:43:17Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-01T08:18:02Z",
      "updated_at": "2023-02-01T08:18:02Z",
      "source": {
        "issue": {
          "id": 1369658973,
          "node_id": "PR_kwDOABII584-xVBf",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26066",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26066/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26066/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26066/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26066",
          "number": 26066,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Refactor and document CoinControl",
          "body": "- Moves CoinControl function definitions from `coincontrol.h` to `coincontrol.cpp`\r\n- Adds more documentation\r\n- Renames class member for an improved comprehension\r\n- Use `std::optional` for `GetExternalOutput`",
          "user": {
            "login": "aureleoules",
            "id": 22493292,
            "node_id": "MDQ6VXNlcjIyNDkzMjky",
            "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aureleoules",
            "html_url": "https://github.com/aureleoules",
            "followers_url": "https://api.github.com/users/aureleoules/followers",
            "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
            "organizations_url": "https://api.github.com/users/aureleoules/orgs",
            "repos_url": "https://api.github.com/users/aureleoules/repos",
            "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/aureleoules/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 19,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26066",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26066",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26066.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26066.patch"
          },
          "closed_at": "2023-05-03T15:17:52Z",
          "created_at": "2022-09-12T10:38:30Z",
          "updated_at": "2023-05-03T15:17:52Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-01T11:21:53Z",
      "updated_at": "2023-02-01T11:21:53Z",
      "source": {
        "issue": {
          "id": 782505298,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTUyMDQ5MjI1",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20892",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20892/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20892/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20892/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20892",
          "number": 20892,
          "state": "open",
          "state_reason": null,
          "title": "tests: Run both descriptor and legacy tests within a single test invocation",
          "body": "Instead of having the tests only do one type or the other, depending on command line arguments, these tests should be running with both types of wallets. Any test that calls `add_wallet_options` will be run for each wallet type that it specifies a wallet option for if none are give in the command line. If a particular wallet is specified with `--legacy-wallet` or `--descriptors`, the options are still respected.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 16,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20892",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20892",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20892.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20892.patch"
          },
          "created_at": "2021-01-09T03:50:55Z",
          "updated_at": "2023-09-02T16:56:39Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 8412009407,
      "node_id": "LE_lADOABII585SV7NTzwAAAAH1ZRO_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8412009407",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-01T16:01:52Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8415634712,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAH1nGUY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8415634712",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-01T23:29:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8415883910,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAH1oDKG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8415883910",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-02T00:17:46Z"
    },
    {
      "event": "commented",
      "id": 1412961365,
      "node_id": "IC_kwDOABII585UOBRV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1412961365",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-02T00:29:51Z",
      "updated_at": "2023-02-02T00:30:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "I’ve split the four commits that establish the **MiniMiner** logic into their own PR #27021. I’ll work on implementing the remaining open comments from here in the new PR. New review of the first four commits should please be added to #27021 forth going.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1412961365",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "unlabeled",
      "id": 8415989498,
      "node_id": "UNLE_lADOABII585SV7NTzwAAAAH1oc76",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8415989498",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-02T00:33:07Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-03T08:12:41Z",
      "updated_at": "2023-02-03T08:12:41Z",
      "source": {
        "issue": {
          "id": 1567092238,
          "node_id": "PR_kwDOABII585JD0iK",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27021",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27021/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27021/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27021/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27021",
          "number": 27021,
          "state": "closed",
          "state_reason": null,
          "title": "Implement Mini version of BlockAssembler to calculate mining scores",
          "body": "Implement Mini version of BlockAssembler to calculate mining scores\r\n    \r\nRun the mining algorithm on a subset of the mempool, only disturbing the\r\nmempool to copy out fee information for relevant entries. Intended to be\r\nused by wallet to calculate amounts needed for fee-bumping unconfirmed\r\ntransactions.\r\n\r\nFrom comments of sipa and glozow below:\r\n\r\n> > In what way does the code added here differ from the real block assembly code?\r\n> \r\n>    * Only operates on the relevant transactions rather than full mempool\r\n>    * Has the ability to remove transactions that will be replaced so they don't impact their ancestors\r\n>    * Does not hold mempool lock outside of the constructor, makes copies of the entries it needs instead (though I'm not sure if this has an effect in practice)\r\n>    * Doesn't do the sanity checks like keeping weight within max block weight and `IsFinalTx()`\r\n>    * After the block template is built, additionally calculates fees to bump remaining ancestor packages to target feerate\r\n\r\n",
          "user": {
            "login": "murchandamus",
            "id": 4060799,
            "node_id": "MDQ6VXNlcjQwNjA3OTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/murchandamus",
            "html_url": "https://github.com/murchandamus",
            "followers_url": "https://api.github.com/users/murchandamus/followers",
            "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
            "organizations_url": "https://api.github.com/users/murchandamus/orgs",
            "repos_url": "https://api.github.com/users/murchandamus/repos",
            "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/murchandamus/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 164208572,
              "node_id": "MDU6TGFiZWwxNjQyMDg1NzI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool",
              "name": "Mempool",
              "color": "fef2c0",
              "default": false
            }
          ],
          "assignee": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "assignees": [
            {
              "login": "glozow",
              "id": 25183001,
              "node_id": "MDQ6VXNlcjI1MTgzMDAx",
              "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/glozow",
              "html_url": "https://github.com/glozow",
              "followers_url": "https://api.github.com/users/glozow/followers",
              "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
              "organizations_url": "https://api.github.com/users/glozow/orgs",
              "repos_url": "https://api.github.com/users/glozow/repos",
              "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/glozow/received_events",
              "type": "User",
              "site_admin": false
            }
          ],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 34,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27021",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27021",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27021.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27021.patch"
          },
          "closed_at": "2023-05-19T14:28:06Z",
          "created_at": "2023-02-02T00:25:13Z",
          "updated_at": "2023-06-13T16:54:56Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8541698617,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAH9H_o5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8541698617",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-16T22:22:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8541713647,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAH9IDTv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8541713647",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-16T22:25:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8548691619,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAH9iq6j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8548691619",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-17T16:09:55Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8548701692,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAH9itX8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8548701692",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-17T16:11:02Z"
    },
    {
      "event": "commented",
      "id": 1434867163,
      "node_id": "IC_kwDOABII585VhlXb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1434867163",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-17T16:16:20Z",
      "updated_at": "2023-02-17T16:16:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "Since last comment:\r\n\r\n- Rebased on-top of the latest version of #27021.\r\n- Addressed that `CalculateTotalBumpFee` now returns an std::optional<CAmount> because we automatically fail calculation for (too) large clusters of unconfirmed transactions\r\n- Waiting for #27021 before opening for review",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1434867163",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "commented",
      "id": 1435036691,
      "node_id": "IC_kwDOABII585ViOwT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1435036691",
      "actor": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-17T17:55:25Z",
      "updated_at": "2023-02-17T17:55:25Z",
      "author_association": "CONTRIBUTOR",
      "body": "For anyone wanting to review this PR and would like some help with basic mempool concepts, I made a video: https://youtu.be/sQ05azzTp9o.",
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1435036691",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "milestoned",
      "id": 8595085505,
      "node_id": "MIE_lADOABII585SV7NTzwAAAAIATpjB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8595085505",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-23T19:08:59Z",
      "milestone": {
        "title": "25.0"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-23T22:59:09Z",
      "updated_at": "2023-02-23T22:59:09Z",
      "source": {
        "issue": {
          "id": 1364381194,
          "node_id": "PR_kwDOABII584-fwqX",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26032",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26032/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26032/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26032/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26032",
          "number": 26032,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: skip R-value signature grinding for external signers",
          "body": "When producing a dummy signature for the purpose of estimating the transaction fee, do not assume an external signer performs R-value grinding on the signature.\r\n\r\nIn particular, this avoids a scenario where the fee rate is 1 sat / vbyte and a transaction with a 72 byte signature is not accepted into our mempool.\r\n\r\nSuggested testing:\r\n1. On master, launch with `-signet` and create an external signer wallet using e.g. a Trezor and HWI, see [guide](https://github.com/bitcoin/bitcoin/blob/master/doc/external-signer.md#example-usage) (with the GUI it should \"just work\" once you have the HWI path configured).\r\n2. Create a few addresses and fund them from the faucet: https://signet.bc-2.jp/ (wait for confirmation)\r\n3. Create another address, and now send the entire wallet to it, set the fee to 1 sat/byte\r\n4. Most likely this transaction never gets broadcast and you won't see it on the [signet explorer](https://explorer.bc-2.jp) \r\n\r\n5. With this PR, try again.\r\n6. Check the explorer and inspect the transaction. Each input witness starts with either `30440220` (R has 32 bytes) or `30440221` (R has 33 bytes). See this explainer for [DER encoding](https://bitcoin.stackexchange.com/questions/92680/what-are-the-der-signature-and-sec-format).\r\n\r\nFixes #26030 ",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 19,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26032",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26032",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26032.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26032.patch"
          },
          "closed_at": "2023-02-27T17:38:08Z",
          "created_at": "2022-09-07T09:38:01Z",
          "updated_at": "2023-03-01T09:13:31Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 8619046746,
      "node_id": "LE_lADOABII585SV7NTzwAAAAIBvDda",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8619046746",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-27T18:37:46Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8664287417,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAIEboi5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8664287417",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-03T23:13:00Z"
    },
    {
      "event": "commented",
      "id": 1454249283,
      "node_id": "IC_kwDOABII585WrhVD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1454249283",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-03T23:13:07Z",
      "updated_at": "2023-06-14T13:04:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased on latest version of #27021 ",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1454249283",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8756540726,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAIJ7jU2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8756540726",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-15T15:03:30Z"
    },
    {
      "event": "commented",
      "id": 1470172234,
      "node_id": "IC_kwDOABII585XoQxK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1470172234",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-15T15:04:36Z",
      "updated_at": "2023-06-14T13:04:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased on latest version of https://github.com/bitcoin/bitcoin/pull/27021. If you are interested in having #26152 in Bitcoin Core v25.0, please consider making time to review #27021.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1470172234",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-21T10:19:36Z",
      "updated_at": "2023-03-21T10:19:36Z",
      "source": {
        "issue": {
          "id": 829979688,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTkxNTU5MTg5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21422/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21422/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21422/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21422",
          "number": 21422,
          "state": "closed",
          "state_reason": null,
          "title": "Add feerate histogram to getmempoolinfo",
          "body": "This PR is a slightly modified version of #15836 (jonasschnelli):\r\n\r\n> This follows the approach of adding statistical information to Bitcoin Core that would otherwise be inefficient to calculate outside of the codebase.\r\n> \r\n> Adds an optional feerate histogram to `getmempoolinfo`.\r\n> \r\n> The concept and code is heavily inspired by the stats jhoenicke runs (https://github.com/jhoenicke/mempool, http://bitcoin-mempool.info).\r\n> \r\n> If someone has a good idea how to make the feerate-groups dynamic but also semi-constant for similar fee environments, please comment.\r\n> \r\n> If this is feature we'd like to have in master (concept ACKs), I'd continue this with writing tests.\r\n> \r\n> A simple plot of the data is [here](https://bitcointools.jonasschnelli.ch/mempool-histogram/).\r\n> RPC output sample is [here](https://gist.github.com/jonasschnelli/f5b8a701375c280b65842f44e4f6c046).\r\n\r\n<s>My attempts to contact jonasschnelli were, unfortunately, unsuccessful so I decided to create this PR in an attempt to move this forward. If this is somehow problematic, please let me know to work it out.</s> **edit:** Jonas is happy the work continues.\r\n\r\n### This PR\r\n\r\nNote that REST support which is in #15836 is not included in this PR. It can be improved in this PR or in a follow-up one if it is deemed useful/required/etc.\r\n\r\n#### Applied review comments from the old PR\r\n\r\n* https://github.com/bitcoin/bitcoin/pull/15836#discussion_r304327165 - \"Remove these files and maybe update .gitignore?\"\r\n* https://github.com/bitcoin/bitcoin/pull/15836#discussion_r304346834 - \"This must be before the above line (order is important) otherwise `rest_mempool_info_with_fee_histogram` is never called.\"\r\n* https://github.com/bitcoin/bitcoin/pull/15836#issuecomment-499886548 - \"This gives me a new warning on build: [...]\" This is already addressed, I believe.\r\n* https://github.com/bitcoin/bitcoin/pull/15836#discussion_r588927756 - Simplify `if (feeperbyte >= feelimits[i] && (i == feelimits.size() - 1 || feeperbyte < feelimits[i + 1])) {`\r\n* https://github.com/bitcoin/bitcoin/commit/0b6ba66238c377116bc6c21e19cffbf1b6dfc788 - Added test proposed by promag\r\n* https://github.com/bitcoin/bitcoin/pull/15836#discussion_r437788703 - `std::to_string(...)` replaced with `ToString(...) as done in #18134\r\n\r\n#### Test commands\r\n\r\n```bash\r\n$ ./bitcoin-cli -testnet getmempoolinfo \"[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200]\" # To test the new behavior\r\n```\r\n\r\n```bash\r\n$ test/functional/test_runner.py mempool_fee_histogram.py # To run the new test\r\n```\r\n\r\n```bash\r\n$ ./bitcoin-cli -testnet -rpcuser=test -rpcpassword=test help getmempoolinfo\r\ngetmempoolinfo ( [fee_rate,...] )\r\n\r\nReturns details on the active state of the TX memory pool.\r\n\r\nArguments:\r\n1. fee_histogram    (json array, optional) Fee statistics grouped by fee rate ranges\r\n     [\r\n       fee_rate,    (numeric, required) Fee rate (in sat/vB) to group the fees by\r\n       ...\r\n     ]\r\n\r\nResult:\r\n{                               (json object)\r\n  \"loaded\" : true|false,        (boolean) True if the mempool is fully loaded\r\n  \"size\" : n,                   (numeric) Current tx count\r\n  \"bytes\" : n,                  (numeric) Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\r\n  \"usage\" : n,                  (numeric) Total memory usage for the mempool\r\n  \"total_fee\" : n,              (numeric) Total fees for the mempool in BTC, ignoring modified fees through prioritizetransaction\r\n  \"maxmempool\" : n,             (numeric) Maximum memory usage for the mempool\r\n  \"mempoolminfee\" : n,          (numeric) Minimum fee rate in BTC/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\r\n  \"minrelaytxfee\" : n,          (numeric) Current minimum relay fee for transactions\r\n  \"unbroadcastcount\" : n,       (numeric) Current number of transactions that haven't passed initial broadcast yet\r\n  \"fee_histogram\" : {           (json object)\r\n    \"fee_rate_groups\" : {       (json object)\r\n      \"<fee_rate_group>\" : {    (json object) Fee rate group named by its lower bound (in sat/vB), identical to the \"from\" field below\r\n        \"size\" : n,             (numeric) Cumulative size of all transactions in the fee rate group (in vBytes)\r\n        \"count\" : n,            (numeric) Number of transactions in the fee rate group\r\n        \"fees\" : n,             (numeric) Cumulative fees of all transactions in the fee rate group (in sat)\r\n        \"from\" : n             (numeric) Group contains transactions with fee rates equal or greater than this value (in sat/vB)\r\n      },\r\n      ...\r\n    },\r\n    \"total_fees\" : n            (numeric) Total available fees in mempool (in sat)\r\n  }\r\n}\r\n\r\nExamples:\r\n> bitcoin-cli getmempoolinfo\r\n> bitcoin-cli getmempoolinfo \"[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200]\"\r\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\", \"method\": \"getmempoolinfo\", \"params\": []}' -H 'content-type: text/plain;' http://127.0.0.1:8332/\r\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\", \"method\": \"getmempoolinfo\", \"params\": [[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200]]}' -H 'content-type: text/plain;' http://127.0.0.1:8332/\r\n```\r\n\r\n#### Output on testnet (2022-07-09)\r\n\r\n```bash\r\n./bitcoin-cli -testnet -rpcuser=test -rpcpassword=test getmempoolinfo \"[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200]\"\r\n```\r\n\r\n<details>\r\n  <summary>JSON output</summary>\r\n\r\n  ```json\r\n{\r\n  \"loaded\": true,\r\n  \"size\": 10,\r\n  \"bytes\": 2652,\r\n  \"usage\": 13504,\r\n  \"total_fee\": 0.00363010,\r\n  \"maxmempool\": 300000000,\r\n  \"mempoolminfee\": 0.00001000,\r\n  \"minrelaytxfee\": 0.00001000,\r\n  \"unbroadcastcount\": 0,\r\n  \"fee_histogram\": {\r\n    \"fee_rate_groups\": {\r\n      \"0\": {\r\n        \"size\": 0,\r\n        \"count\": 0,\r\n        \"fees\": 0,\r\n        \"from\": 0\r\n      },\r\n      \"1\": {\r\n        \"size\": 403,\r\n        \"count\": 2,\r\n        \"fees\": 403,\r\n        \"from\": 1\r\n      },\r\n      \"2\": {\r\n        \"size\": 554,\r\n        \"count\": 2,\r\n        \"fees\": 561,\r\n        \"from\": 2\r\n      },\r\n      \"3\": {\r\n        \"size\": 0,\r\n        \"count\": 0,\r\n        \"fees\": 0,\r\n        \"from\": 3\r\n      },\r\n      \"4\": {\r\n        \"size\": 0,\r\n        \"count\": 0,\r\n        \"fees\": 0,\r\n        \"from\": 4\r\n      },\r\n      \"5\": {\r\n        \"size\": 0,\r\n        \"count\": 0,\r\n        \"fees\": 0,\r\n        \"from\": 5\r\n      },\r\n      \"6\": {\r\n        \"size\": 255,\r\n        \"count\": 1,\r\n        \"fees\": 1345,\r\n        \"from\": 6\r\n      },\r\n      \"7\": {\r\n        \"size\": 0,\r\n        \"count\": 0,\r\n        \"fees\": 0,\r\n        \"from\": 7\r\n      },\r\n      \"8\": {\r\n        \"size\": 0,\r\n        \"count\": 0,\r\n        \"fees\": 0,\r\n        \"from\": 8\r\n      },\r\n      \"10\": {\r\n        \"size\": 0,\r\n        \"count\": 0,\r\n        \"fees\": 0,\r\n        \"from\": 10\r\n      },\r\n      \"12\": {\r\n        \"size\": 0,\r\n        \"count\": 0,\r\n        \"fees\": 0,\r\n        \"from\": 12\r\n      },\r\n      \"14\": {\r\n        \"size\": 0,\r\n        \"count\": 0,\r\n        \"fees\": 0,\r\n        \"from\": 14\r\n      },\r\n      \"17\": {\r\n        \"size\": 0,\r\n        \"count\": 0,\r\n        \"fees\": 0,\r\n        \"from\": 17\r\n      },\r\n      \"20\": {\r\n        \"size\": 0,\r\n        \"count\": 0,\r\n        \"fees\": 0,\r\n        \"from\": 20\r\n      },\r\n      \"25\": {\r\n        \"size\": 352,\r\n        \"count\": 1,\r\n        \"fees\": 9505,\r\n        \"from\": 25\r\n      },\r\n      \"30\": {\r\n        \"size\": 144,\r\n        \"count\": 1,\r\n        \"fees\": 4520,\r\n        \"from\": 30\r\n      },\r\n      \"40\": {\r\n        \"size\": 0,\r\n        \"count\": 0,\r\n        \"fees\": 0,\r\n        \"from\": 40\r\n      },\r\n      \"50\": {\r\n        \"size\": 374,\r\n        \"count\": 1,\r\n        \"fees\": 20000,\r\n        \"from\": 50\r\n      },\r\n      \"60\": {\r\n        \"size\": 351,\r\n        \"count\": 1,\r\n        \"fees\": 23937,\r\n        \"from\": 60\r\n      },\r\n      \"70\": {\r\n        \"size\": 0,\r\n        \"count\": 0,\r\n        \"fees\": 0,\r\n        \"from\": 70\r\n      },\r\n      \"80\": {\r\n        \"size\": 0,\r\n        \"count\": 0,\r\n        \"fees\": 0,\r\n        \"from\": 80\r\n      },\r\n      \"100\": {\r\n        \"size\": 0,\r\n        \"count\": 0,\r\n        \"fees\": 0,\r\n        \"from\": 100\r\n      },\r\n      \"120\": {\r\n        \"size\": 0,\r\n        \"count\": 0,\r\n        \"fees\": 0,\r\n        \"from\": 120\r\n      },\r\n      \"140\": {\r\n        \"size\": 0,\r\n        \"count\": 0,\r\n        \"fees\": 0,\r\n        \"from\": 140\r\n      },\r\n      \"170\": {\r\n        \"size\": 0,\r\n        \"count\": 0,\r\n        \"fees\": 0,\r\n        \"from\": 170\r\n      },\r\n      \"200\": {\r\n        \"size\": 219,\r\n        \"count\": 1,\r\n        \"fees\": 302739,\r\n        \"from\": 200\r\n      }\r\n    },\r\n    \"total_fees\": 363010\r\n  }\r\n}\r\n```\r\n</details>\r\n\r\n#### Various inputs\r\n\r\n```bash\r\n./bitcoin-cli -testnet -rpcuser=test -rpcpassword=test getmempoolinfo \"[0]\"       # OK, one fee rate group covering all possible transaction fee rates (i.e. `>=0`); total_fee = fee_histogram.total_fees\r\n./bitcoin-cli -testnet -rpcuser=test -rpcpassword=test getmempoolinfo \"[-1]\"      # reports: Non-negative values are expected\r\n./bitcoin-cli -testnet -rpcuser=test -rpcpassword=test getmempoolinfo \"[0,0]\"     # reports: Strictly increasing values are expected\r\n./bitcoin-cli -testnet -rpcuser=test -rpcpassword=test getmempoolinfo \"[0,1,0]\"   # reports: Strictly increasing values are expected\r\n./bitcoin-cli -testnet -rpcuser=test -rpcpassword=test getmempoolinfo \"[0, 1000000000000000000000000000000000]\" # reports: JSON integer out of range\r\n./bitcoin-cli -testnet -rpcuser=test -rpcpassword=test getmempoolinfo '[1.2,2,3]' # reports: JSON integer out of range\r\n./bitcoin-cli -testnet -rpcuser=test -rpcpassword=test getmempoolinfo '[\"2\"]'     # reports: Error parsing JSON: ['2']\r\n```",
          "user": {
            "login": "kiminuo",
            "id": 58662979,
            "node_id": "MDQ6VXNlcjU4NjYyOTc5",
            "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kiminuo",
            "html_url": "https://github.com/kiminuo",
            "followers_url": "https://api.github.com/users/kiminuo/followers",
            "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
            "organizations_url": "https://api.github.com/users/kiminuo/orgs",
            "repos_url": "https://api.github.com/users/kiminuo/repos",
            "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/kiminuo/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 71,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21422",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21422.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21422.patch"
          },
          "closed_at": "2023-03-20T14:42:45Z",
          "created_at": "2021-03-12T10:32:00Z",
          "updated_at": "2023-07-08T08:02:40Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8900705838,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAIShf4u",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8900705838",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-31T18:20:21Z"
    },
    {
      "event": "commented",
      "id": 1492411947,
      "node_id": "IC_kwDOABII585Y9GYr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1492411947",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-31T18:21:22Z",
      "updated_at": "2023-03-31T18:21:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased on latest version of #27021, then rebased on master to resolve merge conflicts. \r\n\r\nNeeded to reintroduce access to the Chain interface in `ChooseSelectionResult()`.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1492411947",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-01T04:56:15Z",
      "updated_at": "2023-04-01T04:56:15Z",
      "source": {
        "issue": {
          "id": 1636614290,
          "node_id": "PR_kwDOABII585Mr_-x",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27308",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27308/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27308/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27308/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27308",
          "number": 27308,
          "state": "closed",
          "state_reason": null,
          "title": "bumpfee: avoid making bumped transactions with too low fee when replacing outputs",
          "body": "When replacing the outputs of a transaction during `bumpfee`, it is possible to accidentally create a transaction that will not be accepted into the mempool as it does not meet the incremental relay fee requirements. This occurs because the size estimation used for checking the provided feerate does not account for the replaced outputs; it instead uses the original outputs. When the replaced outputs is significantly different from the original, there can be a large difference in estimated transaction sizes that can make a transaction miss the absolute fee requirements for the incremental relay fee. Unfortunately we do not currently inform the user when the bumped transaction fails to relay, so they could use `bumpfee` and think the transaction has been bumped when it actually has not.\r\n\r\nThis issue is resolved by replacing the outputs before doing the size estimation, and also updating the feerate checker to use the actual fee values when calculating the required minimum fee.\r\n\r\nAlso added a test for this scenario.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27308",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27308",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27308.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27308.patch"
          },
          "closed_at": "2023-04-15T11:55:24Z",
          "created_at": "2023-03-22T23:05:05Z",
          "updated_at": "2023-04-15T11:55:25Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-01T05:06:37Z",
      "updated_at": "2023-04-01T05:06:37Z",
      "source": {
        "issue": {
          "id": 1632858009,
          "node_id": "PR_kwDOABII585MfYTP",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27286",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27286/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27286/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27286/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27286",
          "number": 27286,
          "state": "open",
          "state_reason": null,
          "title": "wallet: Keep track of the wallet's own transaction outputs in memory",
          "body": "Currently, the wallet is not actually aware about its own transaction outputs. Instead, it will iterate all of the transactions stored in `mapWallet`, and then all of the outputs of those transactions, in order to figure out what belongs to it for the purposes of coin selection and balance calculation. For balance calculation, there is caching that results in it only iterating all of the transactions, but not all of the outputs. However when the cache is dirty, everything is iterated. This is especially problematic for wallets that have a lot of transactions, or transactions that have a lot of unrelated outputs (as may occur with coinjoins or batched payments).\r\n\r\nThis PR helps to resolve this issue by making the wallet track all of the outputs that belong to it in a new member `m_txos`. Note that this includes outputs that may have already been spent. Both balance calculation (`GetBalance`) and coin selection (`AvailableCoins`) are updated to iterate `m_txos`. This is generally faster since it ignores all of the unrelated outputs, and it is not slower as in the worst case of wallets containing only single output transactions, it's exactly the same number of outputs iterated.\r\n\r\n`m_txos` is memory only, and it is populated during wallet loading. When each transaction is loaded, all of its outputs are checked to see if it is `IsMine`, and if so, an entry added to `m_txos`. When new transactions are received, the same procedure is done.\r\n\r\nSince imports can change the `IsMine` status of a transaction (although they can only be \"promoted\" from watchonly to spendable), all of the import RPCs will be a bit slower as they re-iterate all transactions and all outputs to update `m_txos`.\r\n\r\nEach output in `m_txos` is stored in a new `WalletTXO` class. This class contains references to the parent `CWalletTx` and the `CTxOut` itself. It also caches the `IsMine` value of the txout. This should be safe as `IsMine` should not change unless there are imports. This allows us to have additional performance improvements in places that use these `WalletTXO`s as they can use the cached `IsMine` rather than repeatedly calling `IsMine` which can be expensive.\r\n\r\nThe existing `WalletBalance` benchmark demonstrates the performance improvement that this PR makes. The existing `WalletAvailableCoins` benchmark doesn't as all of the outputs used in that benchmark belong to the test wallet. I've updated that benchmark to have a bunch of unrelated outputs in each transaction so that the difference is demonstrated.\r\n\r\nThis is part of a larger project to have the wallet actually track and store a set of its UTXOs.\r\n\r\nBuilt on #24914 as it requires loading the txs last in order for `m_txos` to be built correctly.\r\n\r\n***\r\n\r\n## Benchmarks:\r\n\r\nMaster:\r\n\r\n|               ns/op |                op/s |    err% |          ins/op |         bra/op |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|---------------:|--------:|----------:|:----------\r\n|       92,245,141.50 |               10.84 |    0.1% |  988,823,975.00 |  66,803,340.50 |    0.0% |      2.04 | `WalletAvailableCoins`\r\n|            5,709.90 |          175,134.50 |    0.5% |       80,968.24 |      25,539.15 |    0.1% |      0.01 | `WalletBalanceClean`\r\n|          139,396.17 |            7,173.80 |    0.6% |    1,383,390.50 |     430,276.86 |    0.0% |      0.01 | `WalletBalanceDirty`\r\n|            5,055.80 |          197,792.47 |    0.3% |       80,968.10 |      25,539.02 |    0.1% |      0.01 | `WalletBalanceMine`\r\n|                9.79 |      102,152,396.19 |    0.1% |          161.00 |          37.00 |    0.0% |      0.01 | `WalletBalanceWatch`\r\n|        1,552,736.00 |              644.02 |    1.5% |   20,316,315.80 |     618,545.80 |    0.6% |      0.08 | `WalletCreateTxUseOnlyPresetInputs`\r\n|      114,114,732.00 |                8.76 |    0.5% |1,291,047,717.60 | 320,244,602.00 |    0.0% |      6.30 | `WalletCreateTxUsePresetInputsAndCoinSelection`\r\n|      359,315,754.00 |                2.78 |    0.1% |4,339,447,818.00 | 136,619,757.00 |    0.7% |      1.80 | `WalletLoadingDescriptors`\r\n|       98,230,601.00 |               10.18 |    0.1% |  537,688,964.00 |  97,332,266.00 |    0.3% |      0.49 | `WalletLoadingLegacy`\r\n\r\nPR:\r\n\r\n|               ns/op |                op/s |    err% |          ins/op |         bra/op |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|---------------:|--------:|----------:|:----------\r\n|       75,319,868.50 |               13.28 |    0.2% |  863,758,229.00 |  30,892,593.00 |    0.2% |      1.66 | `WalletAvailableCoins`\r\n|            2,367.62 |          422,364.95 |    1.0% |       35,785.05 |       9,893.01 |    0.2% |      0.01 | `WalletBalanceClean`\r\n|            2,685.58 |          372,359.55 |    0.2% |       36,501.05 |      10,027.01 |    0.1% |      0.01 | `WalletBalanceDirty`\r\n|            3,462.24 |          288,830.68 |    2.7% |       35,785.06 |       9,893.01 |    0.3% |      0.01 | `WalletBalanceMine`\r\n|               11.65 |       85,838,176.97 |    0.1% |          180.00 |          42.00 |    0.0% |      0.01 | `WalletBalanceWatch`\r\n|        1,563,092.60 |              639.76 |    1.5% |   20,426,154.40 |     649,953.80 |    0.6% |      0.09 | `WalletCreateTxUseOnlyPresetInputs`\r\n|       58,367,804.40 |               17.13 |    0.9% |  587,164,005.00 | 107,905,843.80 |    0.1% |      3.21 | `WalletCreateTxUsePresetInputsAndCoinSelection`\r\n|      365,302,636.00 |                2.74 |    0.2% |4,349,345,147.00 | 138,730,668.00 |    0.8% |      1.83 | `WalletLoadingDescriptors`\r\n|      124,995,585.00 |                8.00 |    1.2% |  801,998,316.00 | 103,210,721.00 |    0.3% |      0.63 | `WalletLoadingLegacy`\r\n",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27286",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27286.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27286.patch"
          },
          "created_at": "2023-03-20T21:02:45Z",
          "updated_at": "2023-09-03T01:39:46Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-01T08:09:44Z",
      "updated_at": "2023-04-01T08:09:44Z",
      "source": {
        "issue": {
          "id": 1439164645,
          "node_id": "PR_kwDOABII585CXmaB",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26467",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26467/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26467/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26467/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26467",
          "number": 26467,
          "state": "closed",
          "state_reason": null,
          "title": "bumpfee: Allow the user to choose which output is change",
          "body": "When bumping the transaction fee, we will try to find the change output of the transaction in order to have an output whose value we can modify so that we can meet the target feerate. However we do not always find the change output which can cause us to unnecessarily add an additional output to the transaction. We can avoid this issue by outsourcing the determination of change to the user if they so desire.\r\n\r\nThis PR adds a `orig_change_pos` option to bumpfee which the user can use to specify the index of the change output.\r\n\r\nFixes #11233\r\nFixes #20795",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 13,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26467",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26467",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26467.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26467.patch"
          },
          "closed_at": "2023-07-20T08:55:23Z",
          "created_at": "2022-11-07T23:38:09Z",
          "updated_at": "2023-08-09T21:12:48Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "unlabeled",
      "id": 8906016004,
      "node_id": "UNLE_lADOABII585SV7NTzwAAAAIS1wUE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8906016004",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-02T08:32:21Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-04T07:25:12Z",
      "updated_at": "2023-04-04T07:25:12Z",
      "source": {
        "issue": {
          "id": 1650131834,
          "node_id": "PR_kwDOABII585NZG7Z",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27385",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27385/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27385/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27385/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27385",
          "number": 27385,
          "state": "open",
          "state_reason": null,
          "title": "net, refactor: extract Network and BIP155Network logic to node/network",
          "body": "This extracts the `Network` and `BIP155Network` logic to `node/network`.  The code has been living between `netaddress` and `netbase` and some compilation units include these large files when they only need a `Network` enum or related method.  Separating the code to a standalone unit in `node` improves code separation and helps with using only what is needed, which may reduce build size and speed up build times.\r\n\r\nI verified the `include` headers with https://cirrus-ci.com/task/6749578737745920 generated by https://github.com/bitcoin/bitcoin/pull/27385/commits/8f647a65d3484c7acd2d97f4b055c582d7734b6f while this was in draft and carefully narrowed them down to the most relevant ones.\r\n\r\nPossible todos for a follow-up: upgrade `Network` to an `enum class`, e.g. `NET_I2P` becomes `Network::I2P` and https://github.com/bitcoin/bitcoin/pull/27385/commits/5cfa3fb8b5815aaf96483a63526e5f0bf3c0a06b.",
          "user": {
            "login": "jonatack",
            "id": 2415484,
            "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonatack",
            "html_url": "https://github.com/jonatack",
            "followers_url": "https://api.github.com/users/jonatack/followers",
            "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
            "organizations_url": "https://api.github.com/users/jonatack/orgs",
            "repos_url": "https://api.github.com/users/jonatack/repos",
            "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jonatack/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27385",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27385",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27385.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27385.patch"
          },
          "created_at": "2023-03-31T22:40:50Z",
          "updated_at": "2023-08-15T22:28:43Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-04T16:41:14Z",
      "updated_at": "2023-04-04T16:41:14Z",
      "source": {
        "issue": {
          "id": 1653866076,
          "node_id": "PR_kwDOABII585NlaIF",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27419",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27419/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27419/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27419/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27419",
          "number": 27419,
          "state": "closed",
          "state_reason": null,
          "title": "move-only: Extract common/args from util/system",
          "body": "This pull request is part of the `libbitcoinkernel` project https://github.com/bitcoin/bitcoin/issues/24303 https://github.com/bitcoin/bitcoin/projects/18 and more specifically its \"Step 2: Decouple most non-consensus code from libbitcoinkernel\". It is part of a series of patches splitting up the `util/system` files. Its preceding pull request is https://github.com/bitcoin/bitcoin/pull/27254.\r\n\r\nThe pull request contains an extraction of ArgsManager related functions from util/system into their own common/ file.\r\n\r\nThe background of this commit is an ongoing effort to decouple the libbitcoinkernel library from the ArgsManager. The ArgsManager belongs into the common library, since the kernel library should not depend on it. See [doc/design/libraries.md](https://github.com/bitcoin/bitcoin/blob/master/doc/design/libraries.md) for more information on this rationale.\r\n",
          "user": {
            "login": "TheCharlatan",
            "id": 8421793,
            "node_id": "MDQ6VXNlcjg0MjE3OTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TheCharlatan",
            "html_url": "https://github.com/TheCharlatan",
            "followers_url": "https://api.github.com/users/TheCharlatan/followers",
            "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
            "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
            "repos_url": "https://api.github.com/users/TheCharlatan/repos",
            "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/60",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/60",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/60/labels",
            "id": 9286970,
            "node_id": "MI_kwDOABII584AjbU6",
            "number": 60,
            "state": "open",
            "title": "26.0",
            "description": "",
            "creator": {
              "login": "fanquake",
              "id": 863730,
              "node_id": "MDQ6VXNlcjg2MzczMA==",
              "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/fanquake",
              "html_url": "https://github.com/fanquake",
              "followers_url": "https://api.github.com/users/fanquake/followers",
              "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
              "organizations_url": "https://api.github.com/users/fanquake/orgs",
              "repos_url": "https://api.github.com/users/fanquake/repos",
              "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/fanquake/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 11,
            "closed_issues": 32,
            "created_at": "2023-04-15T11:36:05Z",
            "updated_at": "2023-09-03T07:51:10Z"
          },
          "locked": false,
          "comments": 14,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27419",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27419",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27419.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27419.patch"
          },
          "closed_at": "2023-04-21T10:19:53Z",
          "created_at": "2023-04-04T13:12:04Z",
          "updated_at": "2023-04-21T10:19:54Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "demilestoned",
      "id": 8933714025,
      "node_id": "DEME_lADOABII585SV7NTzwAAAAIUfahp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8933714025",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-05T10:47:51Z",
      "milestone": {
        "title": "25.0"
      }
    },
    {
      "event": "labeled",
      "id": 9014312467,
      "node_id": "LE_lADOABII585SV7NTzwAAAAIZS34T",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9014312467",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-15T13:14:07Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9264022316,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAIoLcMs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9264022316",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-17T02:35:19Z"
    },
    {
      "event": "commented",
      "id": 1550602703,
      "node_id": "IC_kwDOABII585cbFHP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1550602703",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-17T02:38:36Z",
      "updated_at": "2023-06-14T13:04:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased on #27021, need to rebase on master next, then will incorporate the follow-up nits from #27021",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1550602703",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9504821511,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAI2iBEH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9504821511",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-12T16:23:50Z"
    },
    {
      "event": "commented",
      "id": 1587664581,
      "node_id": "IC_kwDOABII585eodbF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1587664581",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-12T16:25:24Z",
      "updated_at": "2023-06-14T13:04:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased on master, incorporated outstanding follow-ups from https://github.com/bitcoin/bitcoin/pull/27021#issuecomment-1554675156",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1587664581",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9504863220,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAI2iLP0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9504863220",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-12T16:28:52Z"
    },
    {
      "event": "labeled",
      "id": 9504863969,
      "node_id": "LE_lADOABII585SV7NTzwAAAAI2iLbh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9504863969",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-12T16:28:58Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9504960564,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAI2ijA0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9504960564",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-12T16:38:58Z"
    },
    {
      "event": "unlabeled",
      "id": 9505309752,
      "node_id": "UNLE_lADOABII585SV7NTzwAAAAI2j4Q4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9505309752",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-12T17:07:38Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9505410115,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAI2kQxD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9505410115",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-12T17:17:34Z"
    },
    {
      "event": "unsubscribed",
      "id": 9506346297,
      "node_id": "UE_lADOABII585SV7NTzwAAAAI2n1U5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9506346297",
      "actor": {
        "login": "joostjager",
        "id": 4638168,
        "node_id": "MDQ6VXNlcjQ2MzgxNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4638168?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joostjager",
        "html_url": "https://github.com/joostjager",
        "followers_url": "https://api.github.com/users/joostjager/followers",
        "following_url": "https://api.github.com/users/joostjager/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/joostjager/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/joostjager/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/joostjager/subscriptions",
        "organizations_url": "https://api.github.com/users/joostjager/orgs",
        "repos_url": "https://api.github.com/users/joostjager/repos",
        "events_url": "https://api.github.com/users/joostjager/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/joostjager/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-12T18:43:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9507371416,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAI2rvmY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9507371416",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-12T20:14:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9507538150,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAI2sYTm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9507538150",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-12T20:29:15Z"
    },
    {
      "event": "commented",
      "id": 1588047051,
      "node_id": "IC_kwDOABII585ep6zL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1588047051",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-12T20:31:11Z",
      "updated_at": "2023-06-12T20:31:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased, added four commits for the follow-ups from #27021, cleaned up the commit messages, added @theStack’s wonderful topology overview for the transactions, built each commit separately to make sure all tests pass.\r\n\r\n**Ready for review**",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1588047051",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "mentioned",
      "id": 9507554179,
      "node_id": "MEE_lADOABII585SV7NTzwAAAAI2scOD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9507554179",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-12T20:31:11Z"
    },
    {
      "event": "subscribed",
      "id": 9507554187,
      "node_id": "SE_lADOABII585SV7NTzwAAAAI2scOL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9507554187",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-12T20:31:11Z"
    },
    {
      "event": "ready_for_review",
      "id": 9507554482,
      "node_id": "RFRE_lADOABII585SV7NTzwAAAAI2scSy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9507554482",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-12T20:31:14Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-12T20:49:34Z",
      "updated_at": "2023-06-12T20:49:34Z",
      "source": {
        "issue": {
          "id": 1753342247,
          "node_id": "PR_kwDOABII585SzfoS",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27865",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27865/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27865/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27865/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27865",
          "number": 27865,
          "state": "open",
          "state_reason": null,
          "title": "wallet: Track no-longer-spendable TXOs separately",
          "body": "In #27286, the wallet keeps track of all of its transaction outputs, even if they are already spent or are otherwise unspendable. This TXO set is iterated for balance checking and coin selection preparation, which can still be slow for wallets that have had a lot of activity. This PR aims to improve the performance of such wallets by moving UTXOs that are definitely no longer spendable to a different map in the wallet so that far fewer TXOs need to be iterated for the aforementioned functions.\r\n\r\nUnspendable TXOs (not to be confused with Unspent TXOs) are those which have a spending transaction that has been confirmed, or are no longer valid due to reorgs. TXOs that are spent in unconfirmed transactions remain in the primary TXO set, and are filtered out of balance and coin selection as before.\r\n\r\nDepends on #27286",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 1,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27865",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27865",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27865.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27865.patch"
          },
          "created_at": "2023-06-12T18:40:10Z",
          "updated_at": "2023-09-03T01:12:20Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "unlabeled",
      "id": 9508471563,
      "node_id": "UNLE_lADOABII585SV7NTzwAAAAI2v8ML",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9508471563",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-12T22:25:17Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1466867248,
      "node_id": "PRR_kwDOABII585Xbp4w",
      "url": null,
      "actor": null,
      "commit_id": "56139fd808250fcb693b5f185e7e510804a33470",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Did a first pass of code review. Overall code looks really good, need to spend more time reviewing the tests though.",
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1466867248",
      "submitted_at": "2023-06-27T07:18:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9682024942,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAJBF_nu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9682024942",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-29T22:03:35Z"
    },
    {
      "event": "reviewed",
      "id": 1506175113,
      "node_id": "PRR_kwDOABII585ZxmiJ",
      "url": null,
      "actor": null,
      "commit_id": "56139fd808250fcb693b5f185e7e510804a33470",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Took one suggestion, will revisit the other tomorrow.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1506175113",
      "submitted_at": "2023-06-29T22:12:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "labeled",
      "id": 9682373785,
      "node_id": "LE_lADOABII585SV7NTzwAAAAJBHUyZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9682373785",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-29T23:13:05Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9690000166,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAJBkasm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9690000166",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-30T17:08:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9690474536,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAJBmOgo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9690474536",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-30T18:08:18Z"
    },
    {
      "event": "reviewed",
      "id": 1507669515,
      "node_id": "PRR_kwDOABII585Z3TYL",
      "url": null,
      "actor": null,
      "commit_id": "43b86e49351b3160c2e39807997a9373cd88e173",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Renamed the functions on the Chain interface to better express their utility. Added a convenience function for accessing bump fees to SelectionResult.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1507669515",
      "submitted_at": "2023-06-30T18:13:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1507761521,
      "node_id": "PRR_kwDOABII585Z3p1x",
      "url": null,
      "actor": null,
      "commit_id": "43b86e49351b3160c2e39807997a9373cd88e173",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1507761521",
      "submitted_at": "2023-06-30T19:26:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1504669255,
      "node_id": "PRR_kwDOABII585Zr25H",
      "url": null,
      "actor": null,
      "commit_id": "43b86e49351b3160c2e39807997a9373cd88e173",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Started reviewing tests, but need more time.",
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1504669255",
      "submitted_at": "2023-07-03T07:59:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1511014531,
      "node_id": "PRR_kwDOABII585aEECD",
      "url": null,
      "actor": null,
      "commit_id": "43b86e49351b3160c2e39807997a9373cd88e173",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I tried to run my own set of external e2e tests against https://github.com/bitcoin/bitcoin/pull/26152/commits/43b86e49351b3160c2e39807997a9373cd88e173 and they all hit the following assertion error:\r\n\r\n```\r\nbitcoind: wallet/coinselection.cpp:495: void wallet::SelectionResult::SetBumpFeeDiscount(CAmount): Assertion `discount >= 0' failed\r\n```\r\n\r\nReading through recent comments, it seems somewhat expected that this version isn't yet fully working, let me know when you want me to run my tests again!",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1511014531",
      "submitted_at": "2023-07-03T11:37:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1511646387,
      "node_id": "PRR_kwDOABII585aGeSz",
      "url": null,
      "actor": null,
      "commit_id": "43b86e49351b3160c2e39807997a9373cd88e173",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Addressed comments by @S3RK and @achow101, and rebased to fix a conflict.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1511646387",
      "submitted_at": "2023-07-03T21:19:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9714060687,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAJDAM2P",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9714060687",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-03T21:19:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9714258545,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAJDA9Jx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9714258545",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-03T21:47:05Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9714348150,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAJDBTB2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9714348150",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-03T21:59:28Z"
    },
    {
      "event": "commented",
      "id": 1619210922,
      "node_id": "IC_kwDOABII585ggzKq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1619210922",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-03T22:19:26Z",
      "updated_at": "2023-07-03T22:19:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Reading through recent comments, it seems somewhat expected that this version isn't yet fully working, let me know when you want me to run my tests again!\r\n\r\nSorry about that, I was a bit in a rush on Friday. I’ve fixed a number of issues, if this latest push’s checks turn up green, it might be more fruitful to try now.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1619210922",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "referenced",
      "id": 9722619870,
      "node_id": "REFE_lADOABII585SV7NTzwAAAAJDg2fe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9722619870",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8215e224a7812182d42e93f349417c4f36693b5b",
      "commit_url": "https://api.github.com/repos/ACINQ/eclair/commits/8215e224a7812182d42e93f349417c4f36693b5b",
      "created_at": "2023-07-04T14:33:22Z"
    },
    {
      "event": "commented",
      "id": 1620368501,
      "node_id": "IC_kwDOABII585glNx1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1620368501",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-04T14:35:06Z",
      "updated_at": "2023-07-04T14:35:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I’ve fixed a number of issues, if this latest push’s checks turn up green, it might be more fruitful to try now.\r\n\r\nI confirm that, I've ran my set of tests against [eclair](https://github.com/ACINQ/eclair) and everything looks good using https://github.com/bitcoin/bitcoin/pull/26152/commits/0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6 :tada: \r\nThe tests I ran can be found in the last two commits of [this branch](https://github.com/ACINQ/eclair/commits/wip-test-ancestor-aware-funding-bitcoind-25).",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1620368501",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "reviewed",
      "id": 1515014286,
      "node_id": "PRR_kwDOABII585aTUiO",
      "url": null,
      "actor": null,
      "commit_id": "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1515014286",
      "submitted_at": "2023-07-05T17:36:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1488907492,
      "node_id": "PRR_kwDOABII585Yvuzk",
      "url": null,
      "actor": null,
      "commit_id": "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1488907492",
      "submitted_at": "2023-07-05T18:05:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1512188451,
      "node_id": "PRR_kwDOABII585aIioj",
      "url": null,
      "actor": null,
      "commit_id": "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Continue tests review",
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1512188451",
      "submitted_at": "2023-07-06T07:37:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "unlabeled",
      "id": 9752166858,
      "node_id": "UNLE_lADOABII585SV7NTzwAAAAJFRkHK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9752166858",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-07T08:26:50Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1537066023,
      "node_id": "PRR_kwDOABII585bncQn",
      "url": null,
      "actor": null,
      "commit_id": "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Light code review ACK for commit 0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6:\r\n\r\nAs I continue familiarizing myself with the code, my understanding is that this PR addresses follow-up nits up to a3b178f3c082453120e816945cea220bc7397ee5. Additionally, it introduces the use of `MiniMiner` to calculate the necessary fees required for fee bumping unconfirmed inputs to a target fee rate. The calculated fee bumps values are then added to the transaction's fee to account for the ancestor fee bump and reach the target fee rate\r\n\r\nBefore this PR, unconfirmed transaction outputs were used as inputs in a new transaction without considering the ancestor fee bump. This could result in the transaction having a lower ancestor fee rate if the unconfirmed ancestor's fee rate is low.  with this PR, we can now ensure that the necessary fees to bump a low-fee ancestor to the target fee rate, if required, are added to the transaction's fee rate.\r\n\r\nThis looks good to me, I just suggest nits and questions",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1537066023",
      "submitted_at": "2023-07-19T14:55:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10072567390,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAJYXy5e",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10072567390",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-11T18:07:58Z"
    },
    {
      "event": "commented",
      "id": 1675183615,
      "node_id": "IC_kwDOABII585j2UX_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1675183615",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-11T18:12:33Z",
      "updated_at": "2023-08-12T19:38:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "Sorry, I still need to squash this, but this should be addressing all the open comments",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1675183615",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10077925677,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAJYsPEt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10077925677",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-12T19:36:39Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10077927005,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAJYsPZd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10077927005",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-12T19:37:33Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10124079445,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAJbcTFV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10124079445",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-17T21:26:20Z"
    },
    {
      "event": "commented",
      "id": 1683003630,
      "node_id": "IC_kwDOABII585kUJju",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1683003630",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-17T21:27:32Z",
      "updated_at": "2023-08-17T21:27:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "I believe that I have now addressed all open feedback. Ready for review",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1683003630",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-18T04:10:20Z",
      "updated_at": "2023-08-18T04:10:20Z",
      "source": {
        "issue": {
          "id": 1700935080,
          "node_id": "PR_kwDOABII585QCV04",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27601",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27601/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27601/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27601/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27601",
          "number": 27601,
          "state": "open",
          "state_reason": null,
          "title": "wallet: don't duplicate change output if already exist",
          "body": "If the transaction includes an output that goes to the custom change\r\naddress (`CoinControl::destChange`), the transaction creation process\r\nshould avoid creating duplicate outputs to the same address.\r\n\r\nInstead, it should reuse the existing output to prevent revealing which\r\naddress is the change address, which could compromise privacy.\r\n\r\nThis will also be useful to make other wallet processes less confusing\r\nand error-prone. For instance, within the bumpfee functionality, we\r\nmanually extract the change recipient from the transaction before calling\r\n'CreateTransaction' to ensure that the change output is not duplicated.\r\n\r\nSide note:\r\nThis is something that will be using for the #26732 rework.",
          "user": {
            "login": "furszy",
            "id": 5377650,
            "node_id": "MDQ6VXNlcjUzNzc2NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/furszy",
            "html_url": "https://github.com/furszy",
            "followers_url": "https://api.github.com/users/furszy/followers",
            "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
            "organizations_url": "https://api.github.com/users/furszy/orgs",
            "repos_url": "https://api.github.com/users/furszy/repos",
            "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/furszy/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27601",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27601",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27601.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27601.patch"
          },
          "created_at": "2023-05-08T21:03:48Z",
          "updated_at": "2023-08-31T01:20:28Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 10128885522,
      "node_id": "LE_lADOABII585SV7NTzwAAAAJbuocS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10128885522",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-18T11:07:21Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10131245223,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAJb3oin",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10131245223",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-18T15:32:16Z"
    },
    {
      "event": "commented",
      "id": 1684150658,
      "node_id": "IC_kwDOABII585kYhmC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1684150658",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-18T16:22:53Z",
      "updated_at": "2023-08-18T16:22:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased to get rid of CI issues.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1684150658",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "unlabeled",
      "id": 10133130407,
      "node_id": "UNLE_lADOABII585SV7NTzwAAAAJb-0yn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10133130407",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-18T19:46:38Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1586335131,
      "node_id": "PRR_kwDOABII585ejY2b",
      "url": null,
      "actor": null,
      "commit_id": "3e4fde6b9a2142191d9be799dbd030f38050c993",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1586335131",
      "submitted_at": "2023-08-21T07:08:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1586340541,
      "node_id": "PRR_kwDOABII585ejaK9",
      "url": null,
      "actor": null,
      "commit_id": "3e4fde6b9a2142191d9be799dbd030f38050c993",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1586340541",
      "submitted_at": "2023-08-21T07:12:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1586344803,
      "node_id": "PRR_kwDOABII585ejbNj",
      "url": null,
      "actor": null,
      "commit_id": "3e4fde6b9a2142191d9be799dbd030f38050c993",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1586344803",
      "submitted_at": "2023-08-21T07:15:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "reviewed",
      "id": 1586346792,
      "node_id": "PRR_kwDOABII585ejbso",
      "url": null,
      "actor": null,
      "commit_id": "3e4fde6b9a2142191d9be799dbd030f38050c993",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1586346792",
      "submitted_at": "2023-08-21T07:16:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-24T07:32:36Z",
      "updated_at": "2023-08-24T07:32:36Z",
      "source": {
        "issue": {
          "id": 1864447692,
          "node_id": "PR_kwDOABII585YqB5K",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28335",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28335/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28335/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28335/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28335",
          "number": 28335,
          "state": "open",
          "state_reason": null,
          "title": "RFC: Remove boost usage from kernel api / headers",
          "body": "Similarly to #28327 I wanted to open this PR to receive some opinions and better approaches.\r\n\r\nThe kernel library is currently at the stage where unwanted headers are removed from its set of headers. In practice, this means we are reducing the number of includes that are required for compiling the experimental `bitcoin-chainstate` binary. This is described in stage 1 step 3 of the [project tracking issue](https://github.com/bitcoin/bitcoin/issues/27587).\r\n\r\nCurrently the mempool is part of the kernel library. The mempool headers include the boost multi index headers. Thus any application wanting to use the kernel library and its headers will have to include the boost headers too. This is not only undesirable because of the sheer size of these headers, but also might lead to conflicts if the including application uses a different boost version.\r\n\r\nIn the approach laid out by this PR, mempool member variables and methods are declared in the header without having to include boost by either wrapping them in a struct and [pimpling](https://en.cppreference.com/w/cpp/language/pimpl) them, or making methods static implementation functions. The boost definitions are gathered into separate header (`mempool_set_definitions.h`) that is only included by implementation files that require definitions of the boost types. This allows us to retain the current architecture with roughly the same interfaces. \r\n\r\nThe approach laid out by this PR also has some, albeit small, compilation speed and size benefits. Averaged over a few of compilation runs I consistently observe faster compilation by a couple of seconds and some smaller pre-processed and compiled object sizes. The main detractor of this method is obviously the number of lines touched. However it also has the benefit of inventorizing all the files that require direct access to the mempool data structures as well getting rid of boost multi index includes in non-kernel implementation files that include the mempool, but don't directly manipulate its data structures (e.g. wallet.cpp).\r\n\r\nA much simpler alternative approach, at least on the surface, would be removing all `txmempool.h` includes from kernel library headers (see [this branch](https://github.com/TheCharlatan/bitcoin/tree/mempoolBoostSimple)). Currently this is only `validation.h`.  Due to the mutex member of `CTxMemPool` and the correspondingly defined lock decorators on the chainstate methods this becomes a bit more complicated though and I am not sure how this might be possible with the current architecture.\r\n\r\nA discussion of how and if to remove the mempool from the kernel library has so far been intentionally punted to the next stage of the kernel library development. Pimpling the mempool itself precludes this discussion, since the library could never be shipped with the `CTxMemPool` headers. Pimpling the mempool members (like done in this PR) might also make a future splitting of block and mempool validation logic into separate compilation units easier.",
          "user": {
            "login": "TheCharlatan",
            "id": 8421793,
            "node_id": "MDQ6VXNlcjg0MjE3OTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TheCharlatan",
            "html_url": "https://github.com/TheCharlatan",
            "followers_url": "https://api.github.com/users/TheCharlatan/followers",
            "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
            "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
            "repos_url": "https://api.github.com/users/TheCharlatan/repos",
            "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28335",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28335",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28335.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28335.patch"
          },
          "created_at": "2023-08-24T05:46:16Z",
          "updated_at": "2023-09-03T10:17:15Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1587699367,
      "node_id": "PRR_kwDOABII585eol6n",
      "url": null,
      "actor": null,
      "commit_id": "3e4fde6b9a2142191d9be799dbd030f38050c993",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Addressed S3RK’s comments, added waste calculation test with bump fees and group discount",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1587699367",
      "submitted_at": "2023-08-29T16:25:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10223447047,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAJhXWwH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10223447047",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-29T16:26:08Z"
    },
    {
      "event": "review_requested",
      "id": 10223468586,
      "node_id": "RRE_lADOABII585SV7NTzwAAAAJhXcAq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10223468586",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-29T16:28:28Z",
      "requested_reviewer": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 10223468907,
      "node_id": "RRE_lADOABII585SV7NTzwAAAAJhXcFr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10223468907",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-29T16:28:30Z",
      "requested_reviewer": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 10223470806,
      "node_id": "RRE_lADOABII585SV7NTzwAAAAJhXcjW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10223470806",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-29T16:28:42Z",
      "requested_reviewer": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 10223471807,
      "node_id": "RRE_lADOABII585SV7NTzwAAAAJhXcy_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10223471807",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-29T16:28:49Z",
      "requested_reviewer": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "labeled",
      "id": 10224467451,
      "node_id": "LE_lADOABII585SV7NTzwAAAAJhbP37",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10224467451",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-29T18:22:31Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-29T22:17:51Z",
      "updated_at": "2023-08-29T22:17:51Z",
      "source": {
        "issue": {
          "id": 1872576431,
          "node_id": "PR_kwDOABII585ZFQ32",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28366",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28366/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28366/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28366/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28366",
          "number": 28366,
          "state": "open",
          "state_reason": null,
          "title": "Fix waste calculation in SelectionResult",
          "body": "PR #26152 moved waste calculation into SelectionResult to be able to correct the waste score on basis of the bump_fee_group_discount for overlapping ancestries. This left two functions with largely overlapping purpose, where one was simply a wrapper of the other. This PR cleans up the overlap, and fixes the double-meaning of `change_cost` where the `GetChange()` function assumed that no change was created when `change_cost` was set to 0. This behavior was exploited in a bunch of tests, but is problematic, because a `change_cost` of 0 is permitted with custom settings for feerate and discard_feerate (i.e. when they’re both 0).\r\n\r\nRequires #26152, only last two commits are new.",
          "user": {
            "login": "murchandamus",
            "id": 4060799,
            "node_id": "MDQ6VXNlcjQwNjA3OTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/murchandamus",
            "html_url": "https://github.com/murchandamus",
            "followers_url": "https://api.github.com/users/murchandamus/followers",
            "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
            "organizations_url": "https://api.github.com/users/murchandamus/orgs",
            "repos_url": "https://api.github.com/users/murchandamus/repos",
            "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/murchandamus/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28366",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28366",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28366.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28366.patch"
          },
          "created_at": "2023-08-29T22:17:50Z",
          "updated_at": "2023-09-03T10:10:33Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFlYjRlZDNjNjlhNTI3OGNiMDU5MTY2OGNkODY3ZGI0MjgzN2Y4OTE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1eb4ed3c69a5278cb0591668cd867db42837f891",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1eb4ed3c69a5278cb0591668cd867db42837f891",
      "tree": {
        "sha": "b5968a18821bad2dd3d650bd4ecc74ef06b1e2e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5968a18821bad2dd3d650bd4ecc74ef06b1e2e1"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree b5968a18821bad2dd3d650bd4ecc74ef06b1e2e1\nparent ab42b2ebdbf61225e636e4c00068fd29b2790d41\nauthor Murch <murch@murch.one> 1684679056 -0400\ncommitter Murch <murch@murch.one> 1693407716 -0400\n\nMatch tx names to index in miniminer overlap test\n\nFollow-up from #27021: In the prior commit, the vector started counting\nat 0, but the transaction names started with 1. This commit matches the\nnames to the transactions’ vector indices for better readability.\n\nCo-authored-by: theStack <sebastian.falbesoner@gmail.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEENfStpiPrn+OjvH72e6A1yluQFxMFAmTvWeQACgkQe6A1yluQ\nFxPIKBAAlAV+rGshPAX2N6Bl3q5PDrLZiyKVEdD0tQrXiKxXencyxifKoU2nAWRD\n9FldgeVkNriakAH18/ZlSUBZgyx3Q9A4/+d82jV95IvBfnJiFMUaVcLatrHFG3vd\ncJuZS7r4CEx9iNZ9Ph6KsfelY5SvDDaOa8j1F9Wq3ACtvZ2iOWsuAt7WCNrH+fjg\num1shkQ1qEoygwfPbfFNDQ9T3jxJK+HjPEc4ORwSHITBQ9hcjIWJDAhCvSMtj5N2\n7Xd/CeWy/OVAeAMcCystUPt39RNOIRJLIxU2WqOx/fLCOBs5dZb3kXoqPBg3u5hg\n2aoNZrAG+fbUIhqCUJC8TgYbJHjfOQXEIBeiXZVXt04J8jElImrwVrNJUkPnXCN+\n6RDTn6RQPZCf5w5xwG7w4xRoHW17fmcAWXWqqUU2cJEtsKGewYpAvUE30cTEjDYC\n7WcHvvIKiSkyHVtaVS6LEdd8Y02cPvWu3fFA8SWqNT72cWgfVWJ794C34ZbI6ve4\nTYmA3ipCmChJqNzChbT89e23b4BCpiz3YTASyhIdyDIK/ph6b8YqigHMulftTQq1\nVs0cRcVLRk4kUOMvjgozsnuFTmyaIf2+yBI0SUksfE3dsvK5rpIeRobXeHan7ZGE\nqyW3X2DJamtj99IRBdgbsgVdami2LsyIqXCUpcbi7EVIXhxUEEI=\n=mOjr\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab42b2ebdbf61225e636e4c00068fd29b2790d41",
          "sha": "ab42b2ebdbf61225e636e4c00068fd29b2790d41",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ab42b2ebdbf61225e636e4c00068fd29b2790d41"
        }
      ],
      "message": "Match tx names to index in miniminer overlap test\n\nFollow-up from #27021: In the prior commit, the vector started counting\nat 0, but the transaction names started with 1. This commit matches the\nnames to the transactions’ vector indices for better readability.\n\nCo-authored-by: theStack <sebastian.falbesoner@gmail.com>",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2023-08-30T15:01:56Z"
      },
      "author": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2023-05-21T14:24:16Z"
      },
      "sha": "1eb4ed3c69a5278cb0591668cd867db42837f891"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDhjYTE1MjMxNjIxZTY3ZjcyYjc3OGIyZDljMTc0OWNjODVjMmYwZjU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ca15231621e67f72b778b2d9c1749cc85c2f0f5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8ca15231621e67f72b778b2d9c1749cc85c2f0f5",
      "tree": {
        "sha": "70c8d31ad7c73c74b3d4a523c35d806d5c2b4228",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70c8d31ad7c73c74b3d4a523c35d806d5c2b4228"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 70c8d31ad7c73c74b3d4a523c35d806d5c2b4228\nparent 1eb4ed3c69a5278cb0591668cd867db42837f891\nauthor Murch <murch@murch.one> 1686600580 -0400\ncommitter Murch <murch@murch.one> 1693407721 -0400\n\nFix calculation of ancestor set feerates in test\n\nFollow-up from #27021.\nAlso included is an ASCII art visualization of the test’s transaction\ntopology by theStack.\n\nCo-authored-by: theStack <sebastian.falbesoner@gmail.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEENfStpiPrn+OjvH72e6A1yluQFxMFAmTvWekACgkQe6A1yluQ\nFxOYLBAAlwWq8kG0l1I6oXZ4zx+Z/6g+XBsE5mz08v+m/bYjpScsO1RdgxmPjgWF\ny5IRKyPqHjDbLfQnu68io9rtZ7ohYUKtBs1WDM9CkygPEtpMW7B1gRUH+jTAkM5N\nDwpUpBgMFa33XnieBZQ+TKNeb3hZfjFSU3W0Coo5xG1FzVXFlejkpXLcxT9wxIAj\njsczHNmM+Bpp7oSYvRnsttj8YbCvKWlRy15pI+7AhIB5PPTBuhK+iGV7BtkfnRCs\nEeMjAEJVu9ye6CB9+OEvGTHWYzLJmrRrjEBT6P0AqzrK+IxWWjFeECgK1GymgIud\nGo5BWP8O+OemV/OZ1lA7/SatCnJ7BEVnHI5wac1qCFD5R2qc4ysf2DakOZMgOWx/\nvLz2KDV8EXXucGH8NZkU59JhPQlzt+pkYvsmPJN6MOVR3EewiRmQg4E1N9ZCInuH\nXayauaFriOqrIO4w7Vd25+zrEs3FPyYxTKnat8bukm9vT0yRY6WEM40tjqPyO1Qe\ndxEAo420aq75GdnsFhhRmsi+243BLc9F7xX/uO2J/MMG836rmOTXLurq+hbvLZLw\nQc+/ouIHCSMtGRZNXcs3EXvOQN4YC7rcASxwgx64Nfng4NeDz9I/8wBRumJBJckp\nlHkwOy4/dt1M1JaOC1Azd8SPuyUo5b5ej8ezLp5kb211y5N6VX4=\n=tE88\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1eb4ed3c69a5278cb0591668cd867db42837f891",
          "sha": "1eb4ed3c69a5278cb0591668cd867db42837f891",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1eb4ed3c69a5278cb0591668cd867db42837f891"
        }
      ],
      "message": "Fix calculation of ancestor set feerates in test\n\nFollow-up from #27021.\nAlso included is an ASCII art visualization of the test’s transaction\ntopology by theStack.\n\nCo-authored-by: theStack <sebastian.falbesoner@gmail.com>",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2023-08-30T15:02:01Z"
      },
      "author": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2023-06-12T20:09:40Z"
      },
      "sha": "8ca15231621e67f72b778b2d9c1749cc85c2f0f5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDc5N2IyNTkxODU1NThiNjFlZDZjNmU0OGUxZjU0ZjRmNGNhZTFhMGU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/797b259185558b61ed6c6e48e1f54f4f4cae1a0e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/797b259185558b61ed6c6e48e1f54f4f4cae1a0e",
      "tree": {
        "sha": "1bbbb3873fcf6944343897f091eebc9159f28caa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1bbbb3873fcf6944343897f091eebc9159f28caa"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1bbbb3873fcf6944343897f091eebc9159f28caa\nparent 8ca15231621e67f72b778b2d9c1749cc85c2f0f5\nauthor Murch <murch@murch.one> 1684680325 -0400\ncommitter Murch <murch@murch.one> 1693407722 -0400\n\nRemove unused imports\n\nFollow-up from #27021\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEENfStpiPrn+OjvH72e6A1yluQFxMFAmTvWeoACgkQe6A1yluQ\nFxPi/hAAyWCdWGxHzCxhZkAudqNBpuS95PQ1AXjIPCG5SCD6tL/sPpvr9jV3n8O4\nAuoIbUsYu0P/rgjnuXDC7urUJLllAEeKYoJu54jwRTeDzCj1ekBZTO1KwTCRRY2E\nd2voi+t/auKoP5mzndnlA3+NGrYHL+0kldXNTmgJ1ASjPk95GLlflNaEq+XSZtOh\nYMx0+b/ozNBd8c4pHtg53MiswUzgr7yDm4r/549a7elM0LuJmG1jFsVMj0emFKqv\nKzTCYbEnnNwGlM0rpfcLDwgJ/0Olf+3JnxJ4x574yIu0ZOEGoveTRMALsqOKFZ72\n8WEVrg2I87pJcuLuNTDSP4PJN6adUXNVRyBPMvaAyGKd5lKvK37CnLeXs0GABkFk\nhdYtI8vR4IOe2d+HvJPSmmaLQh0x4qFeRqNnfmHHFDEU72v2YZtl8gLHqaVgdaeY\nbIG5haT0HfgN3wLK19zcwu+ha8oWSM7vsTBsWXA+vJErTSkgs3bnk8GUPUJGmPzn\nSMeyEFnM0imisckR94hcZRSI6Wrq78yJwoa4UzobYAPhWDo1/vA9uTUhfcSw4YKy\nGm6M1LgjFH8RM8Eskw3dwT0ScSTf74+4/ZXE9BnrDojFfgnt9Iledd7haJBsFQZL\naGgwD3GK0FZSNo+XnCUUwyZo+V6LEDCjdjnAXjiVFKPlrtJoCqY=\n=5h2X\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ca15231621e67f72b778b2d9c1749cc85c2f0f5",
          "sha": "8ca15231621e67f72b778b2d9c1749cc85c2f0f5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8ca15231621e67f72b778b2d9c1749cc85c2f0f5"
        }
      ],
      "message": "Remove unused imports\n\nFollow-up from #27021",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2023-08-30T15:02:02Z"
      },
      "author": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2023-05-21T14:45:25Z"
      },
      "sha": "797b259185558b61ed6c6e48e1f54f4f4cae1a0e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDI5NzA0ZTU2MDFiNjljODZmYzdjNWNkNGQzOGYyMzljNmRhOTNjYTk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29704e5601b69c86fc7c5cd4d38f239c6da93ca9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/29704e5601b69c86fc7c5cd4d38f239c6da93ca9",
      "tree": {
        "sha": "fcaf72061b34cc5b8dc9fca3320ec3bf388886d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fcaf72061b34cc5b8dc9fca3320ec3bf388886d0"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree fcaf72061b34cc5b8dc9fca3320ec3bf388886d0\nparent 797b259185558b61ed6c6e48e1f54f4f4cae1a0e\nauthor Murch <murch@murch.one> 1686582561 -0400\ncommitter Murch <murch@murch.one> 1693407724 -0400\n\nMake MiniMinerMempoolEntry fields private\n\nFollow-up from #27021: accessing of fields in MiniMinerMempoolEntry was\ndone inconsistently. Even though we had a getter, we would directly\nwrite to the fields when we needed to update them.\nThis commits sets the fields to private and introduces a method for\nupdating the ancestor information in transactions using the same method\nname as used for Mempool Entries.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEENfStpiPrn+OjvH72e6A1yluQFxMFAmTvWewACgkQe6A1yluQ\nFxMQkRAAwMOaDTdGpo+60/l7YBRSzJs7MNvcwWdMiOEGtoFQAHZSR4kB0uHr5Hzk\nI9GBwki12bGj4plkPCeFOSiTsMZFfQZ+Bfzwyyoe1rnFECAVGmXLo68kQfa+FCH2\nojyrhB2OVokJnPytSjI3Zf0VH1XwtAEw3qJHTkKKQRde1/HkoCs7TpYjgZirqn42\nM3C2R36TDGNWcWOTYG7KIVmrVCEmz2aNvG2wXylImoCBdvN+oeJk4F34/ACNOPm7\nrAus7lTC4xqZtPUbyVKQefNHehz04OWdl5pq22k3n/PCaFUJIwDLSR8Umpv8/n4l\n+u63hfFgaGEqT3uzPIJX9608OiaYb4eNc75i50rm7ETEBaqPwbaSbHAHawaYcV8u\nkJOW1ixVEopUNxAgb8QvqilahRqx/FrSQqbn5nLzV+ppA4tY/o7/HLRg05AORcAM\nEg4pjcUCSq/yiQQHqFENPdocWGSI9yqxpRPUiF0ZTBuN4eiBgYDSmeMwwElL4IIa\nDqlOy+CkTK2sBOc1lmCIIVt2H7BLvc3F/TTxY7LmeMdqWOC48sfhybtBoW+dhhVU\nNxlDWdPNmpdeCax8mTQ6432zYsQBGaBJiZQVGbafJT2pRugbaMXCnlcQzJTNV8Fr\nhBmMLNGVFS6WHzgRsb3hGskcPyAIFxnoxVQRRiGF1OyfbuqOwXQ=\n=+/Dm\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/797b259185558b61ed6c6e48e1f54f4f4cae1a0e",
          "sha": "797b259185558b61ed6c6e48e1f54f4f4cae1a0e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/797b259185558b61ed6c6e48e1f54f4f4cae1a0e"
        }
      ],
      "message": "Make MiniMinerMempoolEntry fields private\n\nFollow-up from #27021: accessing of fields in MiniMinerMempoolEntry was\ndone inconsistently. Even though we had a getter, we would directly\nwrite to the fields when we needed to update them.\nThis commits sets the fields to private and introduces a method for\nupdating the ancestor information in transactions using the same method\nname as used for Mempool Entries.",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2023-08-30T15:02:04Z"
      },
      "author": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2023-06-12T15:09:21Z"
      },
      "sha": "29704e5601b69c86fc7c5cd4d38f239c6da93ca9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFjYjZhYWVhYzQ5ZGQ0NTQzMjgwNjUzZjE5ZDIzNzdmZmIxNzVjOWU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/acb6aaeac49dd4543280653f19d2377ffb175c9e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/acb6aaeac49dd4543280653f19d2377ffb175c9e",
      "tree": {
        "sha": "c00ff6b76f469fe1b55bc11862ebae8347753139",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c00ff6b76f469fe1b55bc11862ebae8347753139"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c00ff6b76f469fe1b55bc11862ebae8347753139\nparent 29704e5601b69c86fc7c5cd4d38f239c6da93ca9\nauthor glozow <gloriajzhao@gmail.com> 1646825002 +0000\ncommitter Murch <murch@murch.one> 1693407726 -0400\n\n[node] interface to get bump fees\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEENfStpiPrn+OjvH72e6A1yluQFxMFAmTvWe4ACgkQe6A1yluQ\nFxM5bw//Zrdf7DBOmDa28nVra/c5staW6p93mKcXDGu4IUsg2RdfhG4ByN/fNLnp\nZol9xcSoDi44kuZwoziukTlnG7xrBJE/+0A9AXXPu7vPV35YHdZl+r0yYqLaO0lM\nXyakHjPoYcmJBd0fgpEFIlCcAYU2P8uK9Q1AYX1Zrf5xGzccu02W5Sbm+u+CpwPZ\nljU8Wb2IKFcswFGzpLdRLWTpZfKxSO1oXLjWshAJN2GzYrdcWHFYSYuLv/dY4j1b\nmemMQr0wzIjazqX2Sso5ytBQVIxnY0L4J6VKrhuRz8c/CcygdzA2amRcIkShgbat\noFUGv/FjlwlxV0C32fgh1T7y9UKLL1H0vb8xWMLizmXR4irNdtAu3m2R/sGRNFwj\nhDkQpLDidrxa0zMucAdNsac23D4TxkuOhedhJoZzVs2UB4IhbT0Dt3mvp6lLdnV7\nW05MOTv25kt1Bk+LkzjoKPKNL+qcWsL3BE+WVYn3DQgo8ybvjbMVaSNXmmo/KGB/\ntLMGjLEuVX+L6CV25UsoADzLMyXb4SSCFIq6o/5gqHIQZ888/MRo9eHJaW2Q6gg2\n9L9Cgle6YwJiQYPQ/KN0Uhj6n9wOFtrrCNIYytJ2jyFoF5U8X4Rrx+fQmy8eoXQ3\ncF17bgNAca3CxnmvxDwOHJ+OlyhpjNS8pzEx9kXtYT6vryAAySo=\n=0gtP\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29704e5601b69c86fc7c5cd4d38f239c6da93ca9",
          "sha": "29704e5601b69c86fc7c5cd4d38f239c6da93ca9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/29704e5601b69c86fc7c5cd4d38f239c6da93ca9"
        }
      ],
      "message": "[node] interface to get bump fees",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2023-08-30T15:02:06Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-03-09T11:23:22Z"
      },
      "sha": "acb6aaeac49dd4543280653f19d2377ffb175c9e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDhjOWU2MzQyZWFlNzU5YmE3MWZhYjU2YTA3NWZjNTliYzk0MTM4MjE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c9e6342eae759ba71fab56a075fc59bc9413821",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8c9e6342eae759ba71fab56a075fc59bc9413821",
      "tree": {
        "sha": "470ac47c89e44cbfb48716965276138fd21103dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/470ac47c89e44cbfb48716965276138fd21103dc"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 470ac47c89e44cbfb48716965276138fd21103dc\nparent acb6aaeac49dd4543280653f19d2377ffb175c9e\nauthor Andrew Chow <github@achow101.com> 1689801207 -0400\ncommitter Murch <murch@murch.one> 1693407727 -0400\n\ncoinselection: Move GetSelectionWaste into SelectionResult\n\nGetSelectionWaste will need to access more context within a selection\nresult, and so should be a private member function rather than a static\nfunction. It's only use outside of SelectionResult was for tests which\nhave now been updated to just make a SelectionResult.\n\nCo-authored-by: Murch <murch@murch.one>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEENfStpiPrn+OjvH72e6A1yluQFxMFAmTvWe8ACgkQe6A1yluQ\nFxNmWw//XFLxrQMF0hyUrIb1G+62lwpx/3N7fMlSVd0yUann6yX11SzTHN1mI9BX\nC6sjsa5x9Nl/572z0OIwcDgmdGHBQa7HMjpx96CXqMhnL4oFQB9pQygy6utDosHG\nOKlDIYMiXWXcBDQSYDmumrTsIZBvXmmtGd1IYVvHSFOhasnZB40GnSciFTd1sTtX\nJEZ1oN/28ylCFFxfz7iHxGA43SHWjbs458AQKCDqRPKU/2rNV+j2Riv5gHkYa7nf\ndqUIoPWg26Je3HlqHLhoE1IOlFAwk6eEaxtaD7tTKvg+Tqii+IYbegNcFBGUgFlH\n6bbiGmwk2zeyFU8Uqsrd/kSCnLKf9ZSbGRr18YaV0r5jpO4P+qdg9KHD9mDG2PHD\ntECEt0Q1UMZChkywV9K4+DNXeJIw5XxsrmfuuL98mTsnV0loGZAFq5niA3Gs+dg/\nmp+lvGLjLrNNkwtPd2c5Bl9yZhvnrKIiVPwlSdD/yIITLMpRI7uwMgFzNMzs8+dW\nc7c0G2S6114beKPd17ktKAzxgEN7q9kZj6R0vKZGC/Vk3sNvHSuDrsvbr/T0jF/5\nWrMJUK3uIDk8PUv5gWzdejHTK034NHECR1CscGC/smEHTvjzLkPizxIwVtk4ip1W\nmBTvHnnqqc0PMuVVzz85ElG65iU33s6vVMUWO027VIBL2F9osog=\n=0R1w\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/acb6aaeac49dd4543280653f19d2377ffb175c9e",
          "sha": "acb6aaeac49dd4543280653f19d2377ffb175c9e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/acb6aaeac49dd4543280653f19d2377ffb175c9e"
        }
      ],
      "message": "coinselection: Move GetSelectionWaste into SelectionResult\n\nGetSelectionWaste will need to access more context within a selection\nresult, and so should be a private member function rather than a static\nfunction. It's only use outside of SelectionResult was for tests which\nhave now been updated to just make a SelectionResult.\n\nCo-authored-by: Murch <murch@murch.one>",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2023-08-30T15:02:07Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2023-07-19T21:13:27Z"
      },
      "sha": "8c9e6342eae759ba71fab56a075fc59bc9413821"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDM1YTM1ZmE5ODlmMTQ0MDZmODIxOGMyMGM0ZTRlNzMyY2VlMGJkNmM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/35a35fa989f14406f8218c20c4e4e732cee0bd6c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/35a35fa989f14406f8218c20c4e4e732cee0bd6c",
      "tree": {
        "sha": "9c998abcfa54ae4547008dc8341ee6e28d5e4998",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c998abcfa54ae4547008dc8341ee6e28d5e4998"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9c998abcfa54ae4547008dc8341ee6e28d5e4998\nparent 8c9e6342eae759ba71fab56a075fc59bc9413821\nauthor Murch <murch@murch.one> 1667416816 -0400\ncommitter Murch <murch@murch.one> 1693407728 -0400\n\nBump unconfirmed parent txs to target feerate\n\nWhen a transaction uses an unconfirmed input, preceding this commit it\nwould not consider the feerate of the parent transaction. Given a parent\ntransaction with a lower ancestor feerate, this resulted in the new\ntransaction's ancestor feerate undershooting the target feerate.\n\nThis commit changes how we calculate the effective value of unconfirmed UTXOs.\nThe effective value of unconfirmed UTXOs is decreased by the fee\nnecessary to bump its ancestry to the target feerate. This also impacts\nthe calculation of the waste metric: since the estimate for the current\nfee is increased by the bump fees, unconfirmed UTXOs current fees appear less\nfavorable compared to their unchanged long term fees.\n\nThis has one caveat: if multiple UTXOs have overlapping ancestries, each\nof their individual estimates will account for bumping all ancestors.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEENfStpiPrn+OjvH72e6A1yluQFxMFAmTvWfAACgkQe6A1yluQ\nFxMb9BAAp/Xb4AIy8oxePnupsD3gR2wr908+GqBhTNL++jtabMMKcHlglrLmLegp\nKP1O2zmV00HElu8Cslojen01X2CyAXLkjuq+PrXMqfzkL7d+jBQwtyqXgijrKIzb\nAHXOIk+f8rwi7NQarGVjbcwVS54CvICYKNk85/Ca78bzts1mvPbOqV4glPIZ06XQ\nr+zS13PIl8Xm234f9JdnIXEeJL8isRuqnBU8haPntSFwqtrM8DoiqrcReEhLZwaV\nvPJ/UPh7MqiNeq3R/q+C6KUkMZXMpV6zS7vMCk1dwdj8kPDfCLwIwOJlYA361qL1\nXwvz/aMZR9QkFk9ZdnSbDwT8kisNAP3gAdVggZ5p+ar+w1dW0Z2oDJ4IAKYycYH6\nwiHZ2KW5FS4ahtXly7ReAmHQqzx0lqOstnnbk0HsLci/DqHsFTHnvheQZIuKgvqd\nQgC2P/wTsYtNsVufx85bG4Y/RUpKbQCwzw00zt7RM23IwmqTouj9x6Qsayi/oR8P\nnre6yqqEOcKBTPnqx6wSTYF2RJDoPXhABfJxNBIlJKvSX2zXur4x3c5NnQVPUWQt\nzUfI2sECUhN3UbJSjHjsEivIKl1oeHhU6f00w+PuNCsHsk3ZuoVnpXwMbhjrU1J9\nZfaHWmaPEkcJn4N1j2ov0wv1NYYGJlhZ/IVHS7NUyqgkMe9U6xs=\n=m+JU\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c9e6342eae759ba71fab56a075fc59bc9413821",
          "sha": "8c9e6342eae759ba71fab56a075fc59bc9413821",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8c9e6342eae759ba71fab56a075fc59bc9413821"
        }
      ],
      "message": "Bump unconfirmed parent txs to target feerate\n\nWhen a transaction uses an unconfirmed input, preceding this commit it\nwould not consider the feerate of the parent transaction. Given a parent\ntransaction with a lower ancestor feerate, this resulted in the new\ntransaction's ancestor feerate undershooting the target feerate.\n\nThis commit changes how we calculate the effective value of unconfirmed UTXOs.\nThe effective value of unconfirmed UTXOs is decreased by the fee\nnecessary to bump its ancestry to the target feerate. This also impacts\nthe calculation of the waste metric: since the estimate for the current\nfee is increased by the bump fees, unconfirmed UTXOs current fees appear less\nfavorable compared to their unchanged long term fees.\n\nThis has one caveat: if multiple UTXOs have overlapping ancestries, each\nof their individual estimates will account for bumping all ancestors.",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2023-08-30T15:02:08Z"
      },
      "author": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2022-11-02T19:20:16Z"
      },
      "sha": "35a35fa989f14406f8218c20c4e4e732cee0bd6c"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10234279416,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAJiArX4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10234279416",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-30T15:03:19Z"
    },
    {
      "event": "commented",
      "id": 1699355199,
      "node_id": "IC_kwDOABII585lSho_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1699355199",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-30T15:03:40Z",
      "updated_at": "2023-08-30T17:43:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased, and fixed comment to mollify `tidy`. (Ready for review.)",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1699355199",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFiMmZiNTRkNWMxODU3OWUwMTNiMWRmZDA2MWMyYjI5ZDhjZmZkYzI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "tree": {
        "sha": "c9ff91a234f5bab8903b5063d219cb616506e520",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9ff91a234f5bab8903b5063d219cb616506e520"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c9ff91a234f5bab8903b5063d219cb616506e520\nparent 35a35fa989f14406f8218c20c4e4e732cee0bd6c\nauthor Murch <murch@murch.one> 1667841391 -0500\ncommitter Murch <murch@murch.one> 1693417334 -0400\n\nAmend bumpfee for inputs with overlapping ancestry\n\nAt the end of coin selection reduce the fees by the difference between\nthe individual bump fee estimates and the collective bump fee estimate.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEENfStpiPrn+OjvH72e6A1yluQFxMFAmTvf3cACgkQe6A1yluQ\nFxMvrw//XVTfvcNzNJo2m6KUc6EzCdLa53F1RKU1Vw6jiSm8Ia72lBR8ZQfUAfi2\nIkkO1aECgcJSwYrgxkBKvLPtMn1J673JxVTpZj40kV1WJTrbGaz2t29JofdcPYen\nrgMVnPC/BZSU6nQDEgjyc6+8GD1DwRgGKyi6u58ZLeeWn3CRDoVQqZY2RlbjTnEF\npX8rxtVD4GDlNGAh9dKNS2NUCT5gwoStjTpuOby1PmAOhewAI8jSddBSq3GO1AxT\n42STjaWOAhoRcwVrldWlk/ICpkIlCZ9WTZLb1onXhKRKOkkb+MnadslS/GMd4jAp\n1e34dvgpifS6uZS5DZBqhcYSpXYUK8qGL1I7jVb9FDHAcQNv2j7h7DrxBYL1Sqn1\nUxIkIbn8wuKU2yxJ4/jFnvt+4dh+LIBd3xvvqKlgtwBJrfPIEEkL6zKs7zkZkeEb\nnarGRyxdCirYgJMkZv8dEVKz4Uigw+cHcQd5kaJeptQ2B9rxel0FpmFZxVQPAFlK\nmU6eRoOquxf62liL59WG4mOYr2xn7k51dm4dn5PdeSE1rhqE9zhBSJ+FhQ5wRJrF\nxqZ2ywm1xtS5GNE8rdwo/XHzEIqEoXdp+GYyrlJyPzH3oTFq5nIKDcuN+B4WKC8o\nJGWGFJX6CmtSSMYpFOMY6X60Rg3pEzjcy6eEuDh0uy1n3UYyCpw=\n=gEfP\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/35a35fa989f14406f8218c20c4e4e732cee0bd6c",
          "sha": "35a35fa989f14406f8218c20c4e4e732cee0bd6c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/35a35fa989f14406f8218c20c4e4e732cee0bd6c"
        }
      ],
      "message": "Amend bumpfee for inputs with overlapping ancestry\n\nAt the end of coin selection reduce the fees by the difference between\nthe individual bump fee estimates and the collective bump fee estimate.",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2023-08-30T17:42:14Z"
      },
      "author": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2022-11-07T17:16:31Z"
      },
      "sha": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10235797726,
      "node_id": "HRFPE_lADOABII585SV7NTzwAAAAJiGeDe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10235797726",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-30T17:42:34Z"
    },
    {
      "event": "review_requested",
      "id": 10235919367,
      "node_id": "RRE_lADOABII585SV7NTzwAAAAJiG7wH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10235919367",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-30T17:57:16Z",
      "requested_reviewer": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "unlabeled",
      "id": 10238236368,
      "node_id": "UNLE_lADOABII585SV7NTzwAAAAJiPxbQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10238236368",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-30T23:32:01Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1604246030,
      "node_id": "PRR_kwDOABII585fntoO",
      "url": null,
      "actor": null,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK https://github.com/bitcoin/bitcoin/pull/26152/commits/1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2, I ran my e2e lightning tests on top of that branch and everything is looking good :+1: ",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1604246030",
      "submitted_at": "2023-08-31T08:40:18Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
    },
    {
      "event": "review_request_removed",
      "id": 10241746429,
      "node_id": "RRRE_lADOABII585SV7NTzwAAAAJidKX9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10241746429",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-31T08:40:24Z",
      "requested_reviewer": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_request_removed",
      "id": 10241746441,
      "node_id": "RRRE_lADOABII585SV7NTzwAAAAJidKYJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10241746441",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-31T08:40:24Z",
      "requested_reviewer": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 10241746547,
      "node_id": "RRE_lADOABII585SV7NTzwAAAAJidKZz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10241746547",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-31T08:40:25Z",
      "requested_reviewer": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "commented",
      "id": 1701087528,
      "node_id": "IC_kwDOABII585lZIko",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1701087528",
      "actor": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-31T13:55:59Z",
      "updated_at": "2023-08-31T13:55:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "re ACK 1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2\r\n\r\nReviewed up to acb6aaeac49dd4543280653f19d2377ffb175c9e and functional test\r\nAs I am not really familiar with the coinselection part of the PR, I lightly review the commits.\r\nI rebased latest master a4e0bcb6c9a8db5a74c74c5cddbb065ba9182482 on this PR, the tests failed and passed after making the branch.  ",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1701087528",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26152"
    },
    {
      "event": "review_request_removed",
      "id": 10245235152,
      "node_id": "RRRE_lADOABII585SV7NTzwAAAAJiqeHQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10245235152",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-31T13:56:05Z",
      "requested_reviewer": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-02T14:19:41Z",
      "updated_at": "2023-09-02T14:19:41Z",
      "source": {
        "issue": {
          "id": 1878544434,
          "node_id": "PR_kwDOABII585ZZZg8",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28391",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28391/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28391/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28391/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28391",
          "number": 28391,
          "state": "open",
          "state_reason": null,
          "title": "refactor: Simplify CTxMempool/BlockAssembler fields, remove some external mapTx access",
          "body": "Motivation\r\n* It seems preferable to use stdlib data structures instead of boost if they can achieve close to the same thing.\r\n* Code external to mempool should ideally use its public helper methods instead of accessing `mapTx` directly.\r\n* Reduce the number of complex boost multi index type interactions\r\n* Also see #28335 for further context/motivation. This PR together with #28385 simplifies that one.\r\n\r\nOverview of things done in this PR:\r\n* Make `vTxHashes` a vector of transaction references instead of a pair of transaction hash and iterator. The trade off here is that the iterator is retrieved on the fly with `get_iter_from_wtxid` instead of being cached in `vTxHashes`.\r\n* Replace `mapTx` access with `CTxMemPool` helper methods\r\n  * Please note when reviewing that `infoAll` is already in other places that grab all mempool transactions as well, such as in net_processing when responding to bip35 messages.\r\n* Simplify `checkChainLimits` call in `node/interfaces.cpp`\r\n* Make `MiniMinerMempoolEntry` ctor more explicit\r\n* Make `CTxMemPoolEntry`s `lockPoints`mutable such that they can be changed with a const iterator directly instead of going through `mapTx`\r\n* Make `BlockAssembler`'s `inBlock` and `failedTx` sets of transaction hashes.",
          "user": {
            "login": "TheCharlatan",
            "id": 8421793,
            "node_id": "MDQ6VXNlcjg0MjE3OTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TheCharlatan",
            "html_url": "https://github.com/TheCharlatan",
            "followers_url": "https://api.github.com/users/TheCharlatan/followers",
            "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
            "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
            "repos_url": "https://api.github.com/users/TheCharlatan/repos",
            "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 1,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28391",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28391",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28391.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28391.patch"
          },
          "created_at": "2023-09-02T09:47:53Z",
          "updated_at": "2023-09-03T07:54:33Z"
        },
        "type": "issue"
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977356049",
      "pull_request_review_id": 1116611222,
      "id": 977356049,
      "node_id": "PRRC_kwDOABII5846QUUR",
      "diff_hunk": "@@ -0,0 +1,219 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else if (mempool.isSpent(outpoint) || !mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist wihout its ancestor MockMempoolEntry, so these sets won't be invalidated.",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 75,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "54fd46be525961c2fe0e9cc02549584aaaad571b",
      "in_reply_to_id": null,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\r\n```",
      "created_at": "2022-09-22T08:30:02Z",
      "updated_at": "2022-09-22T08:33:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r977356049",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977356049"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977359612",
      "pull_request_review_id": 1116611222,
      "id": 977359612,
      "node_id": "PRRC_kwDOABII5846QVL8",
      "diff_hunk": "@@ -0,0 +1,297 @@\n+#!/usr/bin/env python3",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": 1,
      "original_position": 1,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "54fd46be525961c2fe0e9cc02549584aaaad571b",
      "in_reply_to_id": null,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```bash\r\nFile \"test/functional/wallet_spend_unconfirmed.py\" contains a shebang line, but has the file permission 644 instead of the expected executable permission 755. Do \"chmod 755 test/functional/wallet_spend_unconfirmed.py\" (or remove the shebang line).\r\nERROR: There were 1 failed tests in the lint-files.py lint test. Please resolve the above errors.\r\n```\r\n\r\nThis also needs to be added to the list of tests in `test_runner.py`. Which should deal with:\r\n```bash\r\n�[1mWARNING!�[0m The following scripts are not being run: ['wallet_spend_unconfirmed.py']. Check the test lists in test_runner.py.\r\n```",
      "created_at": "2022-09-22T08:32:06Z",
      "updated_at": "2022-09-22T08:33:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r977359612",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977359612"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978344744",
      "pull_request_review_id": 1118029972,
      "id": 978344744,
      "node_id": "PRRC_kwDOABII5846UFso",
      "diff_hunk": "@@ -1197,3 +1216,58 @@ void CTxMemPool::SetLoadTried(bool load_tried)\n     LOCK(cs);\n     m_load_tried = load_tried;\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {\n+            const auto curr = cluster[i];\n+            for (const CTxMemPoolEntry& parent_entry : curr->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    if (parent_entry.GetCountWithAncestors() == 1 &&\n+                        parent_entry.GetCountWithDescendants() == 1) {\n+                        // We don't need to process this entry. Just add it to the processed\n+                        // transactions and skip.\n+                        std::swap(cluster[i+1], cluster.back());\n+                        cluster[i+1] = parent_it;\n+                        ++i; ",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "26f96f0e13ab801993cd7b95282230d45ee8ce65",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sorry, lint error is my fault here\r\n\r\n```suggestion\r\n                        ++i;\r\n```",
      "created_at": "2022-09-23T07:37:55Z",
      "updated_at": "2022-09-23T07:37:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978344744",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978344744"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1245,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978355993",
      "pull_request_review_id": 1118045668,
      "id": 978355993,
      "node_id": "PRRC_kwDOABII5846UIcZ",
      "diff_hunk": "@@ -1197,3 +1216,58 @@ void CTxMemPool::SetLoadTried(bool load_tried)\n     LOCK(cs);\n     m_load_tried = load_tried;\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {\n+            const auto curr = cluster[i];\n+            for (const CTxMemPoolEntry& parent_entry : curr->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    if (parent_entry.GetCountWithAncestors() == 1 &&\n+                        parent_entry.GetCountWithDescendants() == 1) {\n+                        // We don't need to process this entry. Just add it to the processed\n+                        // transactions and skip.\n+                        std::swap(cluster[i+1], cluster.back());\n+                        cluster[i+1] = parent_it;\n+                        ++i; \n+                    } else {\n+                        cluster.push_back(parent_it);\n+                        // we still need to process this ",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 66,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "whitespace linter\r\n```suggestion\r\n                        // we still need to process this\r\n```\r\n\r\n------\r\n\r\nEdit (you can set up your editor to highlight these or run `test/lint/lint-whitespace.py` as part of your local scripted prechecks before pushing, with clang-format, etc.):\r\n\r\n```diff\r\n--- a/src/txmempool.cpp\r\n+++ b/src/txmempool.cpp\r\n@@ -1242,10 +1242,10 @@ std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<u\r\n                         // transactions and skip.\r\n                         std::swap(cluster[i+1], cluster.back());\r\n                         cluster[i+1] = parent_it;\r\n-                        ++i; \r\n+                        ++i;\r\n                     } else {\r\n                         cluster.push_back(parent_it);\r\n-                        // we still need to process this \r\n+                        // we still need to process this\r\n                         ++unprocessed_count;\r\n                     }\r\n                 }\r\n@@ -1259,10 +1259,10 @@ std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<u\r\n                         // transactions and skip.\r\n                         std::swap(cluster[i+1], cluster.back());\r\n                         cluster[i+1] = child_it;\r\n-                        ++i; \r\n+                        ++i;\r\n                     } else {\r\n                         cluster.push_back(child_it);\r\n-                        // we still need to process this \r\n+                        // we still need to process this\r\n                         ++unprocessed_count;\r\n                     }\r\n                 }\r\n```\r\n",
      "created_at": "2022-09-23T07:52:01Z",
      "updated_at": "2022-09-23T07:58:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978355993",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978355993"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1248,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978380196",
      "pull_request_review_id": 1118076665,
      "id": 978380196,
      "node_id": "PRRC_kwDOABII5846UOWk",
      "diff_hunk": "@@ -0,0 +1,104 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+struct MockMempoolEntry {\n+    CAmount fee_individual;\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    const CTransaction& tx;\n+\n+public:",
      "path": "src/node/mini_miner.h",
      "position": 10,
      "original_position": 24,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "All struct members are public by default, so can either drop `public` here (and removed the getters), or make the struct a class if any of the data members above are intended to be private (for instance, `tx` and `fee_individual` have public getters and could be private, or just be public and drop the getter).\r\n\r\nAt first look it seems some of the data members need to be public, in which case their getters should be used or removed. This builds:\r\n\r\n```diff\r\n-struct MockMempoolEntry {\r\n+class MockMempoolEntry\r\n+{\r\n     CAmount fee_individual;\r\n-    CAmount fee_with_ancestors;\r\n-    int64_t vsize_individual;\r\n-    int64_t vsize_with_ancestors;\r\n     const CTransaction& tx;\r\n \r\n public:\r\n+    CAmount fee_with_ancestors;\r\n+    int64_t vsize_individual;\r\n+    int64_t vsize_with_ancestors;\r\n     explicit MockMempoolEntry(CTxMemPool::txiter entry) :\r\n         fee_individual{entry->GetModifiedFee()},\r\n         fee_with_ancestors{entry->GetModFeesWithAncestors()},\r\n```\r\n",
      "created_at": "2022-09-23T08:16:33Z",
      "updated_at": "2022-09-23T08:16:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978380196",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978380196"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 28,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978402242",
      "pull_request_review_id": 1118109036,
      "id": 978402242,
      "node_id": "PRRC_kwDOABII5846UTvC",
      "diff_hunk": "@@ -205,6 +205,33 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.\n+    //\n+    //  This includes fee-bumping in RBFs. If an outpoint conflicts with another transaction in the\n+    //  mempool, it is assumed that the goal is to replace that transaction. As such, the\n+    //  calculation will exclude the to-be-replaced transaction, but will include the fee-bumping\n+    //  cost. If bump fees of descendants of the to-be-replaced transaction are requested, the value\n+    //  will be 0. Fee-related RBF rules are not included as they are logically distinct.\n+    //\n+    //  Any outpoints that otherwise unavailable from the mempool (e.g. UTXOs from confirmed",
      "path": "src/interfaces/chain.h",
      "position": null,
      "original_position": 22,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "in_reply_to_id": null,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit:\r\n```suggestion\r\n    //  Any outpoints that are otherwise unavailable from the mempool (e.g. UTXOs from confirmed\r\n```",
      "created_at": "2022-09-23T08:42:28Z",
      "updated_at": "2022-09-23T08:47:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978402242",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978402242"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 226,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978403663",
      "pull_request_review_id": 1118109036,
      "id": 978403663,
      "node_id": "PRRC_kwDOABII5846UUFP",
      "diff_hunk": "@@ -205,6 +205,33 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.\n+    //\n+    //  This includes fee-bumping in RBFs. If an outpoint conflicts with another transaction in the\n+    //  mempool, it is assumed that the goal is to replace that transaction. As such, the\n+    //  calculation will exclude the to-be-replaced transaction, but will include the fee-bumping\n+    //  cost. If bump fees of descendants of the to-be-replaced transaction are requested, the value\n+    //  will be 0. Fee-related RBF rules are not included as they are logically distinct.\n+    //\n+    //  Any outpoints that otherwise unavailable from the mempool (e.g. UTXOs from confirmed\n+    //  transactions or transactions not yet broadcast by the wallet) are given a bump fee of 0.\n+    //\n+    //  If multiple outpoints come from the same transaction (this should be very rare because\n+    //  the transaction essentially multiple change outputs or paid the same wallet using multiple",
      "path": "src/interfaces/chain.h",
      "position": null,
      "original_position": 26,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "in_reply_to_id": null,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit:\r\n```suggestion\r\n    //  it means the transaction has multiple change outputs or paid the same wallet using multiple\r\n```",
      "created_at": "2022-09-23T08:43:28Z",
      "updated_at": "2022-09-23T08:47:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978403663",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978403663"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 230,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978501186",
      "pull_request_review_id": 1118249028,
      "id": 978501186,
      "node_id": "PRRC_kwDOABII5846Ur5C",
      "diff_hunk": "@@ -0,0 +1,104 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+struct MockMempoolEntry {\n+    CAmount fee_individual;\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    const CTransaction& tx;\n+\n+public:",
      "path": "src/node/mini_miner.h",
      "position": 10,
      "original_position": 24,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "in_reply_to_id": 978380196,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'd say just remove the getters, it's fine to keep these public. This struct is only used by `MiniMiner`.\r\nFor background, I originally was trying to align the interface with `CTxMemPoolEntry` like `CTxMemPoolModifiedEntry` to reuse the `CompareTxMemPoolEntryByAncestorFee` comparator in a multi index container, but then realized using simple `std::map`s was enough.",
      "created_at": "2022-09-23T10:41:12Z",
      "updated_at": "2022-09-23T10:41:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978501186",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978501186"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 28,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982428810",
      "pull_request_review_id": 1123725020,
      "id": 982428810,
      "node_id": "PRRC_kwDOABII5846jqyK",
      "diff_hunk": "@@ -0,0 +1,105 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors()),\n+        tx{entry->GetTx()}",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 31,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 9b33f5db095c232ac83304c91524f48bf799802f\r\n\r\nThese need to match the order of the members, CI -Wreorder-ctor says",
      "created_at": "2022-09-28T13:45:55Z",
      "updated_at": "2022-09-28T14:24:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r982428810",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982428810"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 27,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982430051",
      "pull_request_review_id": 1123725020,
      "id": 982430051,
      "node_id": "PRRC_kwDOABII5846jrFj",
      "diff_hunk": "@@ -1197,3 +1216,58 @@ void CTxMemPool::SetLoadTried(bool load_tried)\n     LOCK(cs);\n     m_load_tried = load_tried;\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {\n+            const auto curr = cluster[i];\n+            for (const CTxMemPoolEntry& parent_entry : curr->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    if (parent_entry.GetCountWithAncestors() == 1 &&\n+                        parent_entry.GetCountWithDescendants() == 1) {\n+                        // We don't need to process this entry. Just add it to the processed\n+                        // transactions and skip.\n+                        std::swap(cluster[i+1], cluster.back());\n+                        cluster[i+1] = parent_it;\n+                        ++i;",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in f40b9fe6a83b6668a625e28520456350f2cd98f0\r\n\r\nAs discussed offline, this case can be deleted since it will never be hit (and is also incorrect).",
      "created_at": "2022-09-28T13:46:58Z",
      "updated_at": "2022-09-28T14:24:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r982430051",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982430051"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 1239,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1245,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982430211",
      "pull_request_review_id": 1123725020,
      "id": 982430211,
      "node_id": "PRRC_kwDOABII5846jrID",
      "diff_hunk": "@@ -1197,3 +1216,58 @@ void CTxMemPool::SetLoadTried(bool load_tried)\n     LOCK(cs);\n     m_load_tried = load_tried;\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {\n+            const auto curr = cluster[i];\n+            for (const CTxMemPoolEntry& parent_entry : curr->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    if (parent_entry.GetCountWithAncestors() == 1 &&\n+                        parent_entry.GetCountWithDescendants() == 1) {\n+                        // We don't need to process this entry. Just add it to the processed\n+                        // transactions and skip.\n+                        std::swap(cluster[i+1], cluster.back());\n+                        cluster[i+1] = parent_it;\n+                        ++i;\n+                    } else {\n+                        cluster.push_back(parent_it);\n+                        // we still need to process this\n+                        ++unprocessed_count;\n+                    }\n+                }\n+            }\n+            for (const CTxMemPoolEntry& child_entry : curr->GetMemPoolChildrenConst()) {\n+                const auto child_it = mapTx.iterator_to(child_entry);\n+                if (!visited(child_it)) {\n+                    if (child_entry.GetCountWithAncestors() == 1 &&\n+                        child_entry.GetCountWithDescendants() == 1) {\n+                        // We don't need to process this entry. Just add it to the processed\n+                        // transactions and skip.\n+                        std::swap(cluster[i+1], cluster.back());\n+                        cluster[i+1] = child_it;\n+                        ++i;",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this as well in f40b9fe6a83b6668a625e28520456350f2cd98f0",
      "created_at": "2022-09-28T13:47:06Z",
      "updated_at": "2022-09-28T14:24:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r982430211",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982430211"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 1256,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1262,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982470036",
      "pull_request_review_id": 1123725020,
      "id": 982470036,
      "node_id": "PRRC_kwDOABII5846j02U",
      "diff_hunk": "@@ -66,7 +71,10 @@ struct COutput {\n     /** The fee required to spend this output at the consolidation feerate. */\n     CAmount long_term_fee{0};\n \n-    COutput(const COutPoint& outpoint, const CTxOut& txout, int depth, int input_bytes, bool spendable, bool solvable, bool safe, int64_t time, bool from_me, const std::optional<CFeeRate> feerate = std::nullopt)\n+    /** The fee necessary to bump this UTXO's ancestor transactions to the target feerate */\n+    CAmount ancestor_bump_fees{0};\n+\n+    COutput(const COutPoint& outpoint, const CTxOut& txout, int depth, int input_bytes, bool spendable, bool solvable, bool safe, int64_t time, bool from_me, const std::optional<CFeeRate> feerate = std::nullopt, const std::optional<std::reference_wrapper<interfaces::Chain>> chain_interface = std::nullopt)",
      "path": "src/wallet/coinselection.h",
      "position": null,
      "original_position": 38,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I have 2 concerns with this approach, please let me know what you think:\r\n\r\n(1) The `COutput` constructor really shouldn't need to have a reference the chain interface; it smells a bit weird that coinselection (which I interpret to be a relatively well-modularized component thus far since it doesn't even depend on wallet) has a new dependency on interfaces/chain.h. It's unclear to me why `CalculateBumpFees()` needs to be called *inside* the constructor instead of just having `CAmount ancestor_bump_fees` be a parameter?\r\n\r\n(2) This means `CalculateBumpFees()` will be called over and over again for each `COutput` constructed within the `AvailableCoins` loop. There's not a lot of duplicated work if all the outputs are from independent transactions, but it would definitely be faster to call it once with all the outpoints at once.\r\n\r\nApproach-wise, I think it makes more sense to call `CalculateBumpFees()` just once, with the full list of outpoints. It should be fairly straightforward with preset inputs since you have the list already. For `AvailableCoins`, since they're constructed as you iterate through `mapWallet`, you could populate each output's `ancestor_bump_fees` values at the end. If you want to construct them as-is and then not mutate afterwards, then maybe do 2 passes for filtering and constructing?",
      "created_at": "2022-09-28T14:19:24Z",
      "updated_at": "2022-09-28T14:24:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r982470036",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982470036"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982473716",
      "pull_request_review_id": 1123725020,
      "id": 982473716,
      "node_id": "PRRC_kwDOABII5846j1v0",
      "diff_hunk": "@@ -0,0 +1,321 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=100)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)\n+        assert_greater_than(resulting_fee_rate_funding, self.target_fee_rate)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_funding)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_unconfirmed_low(self):\n+        self.log.info(\"Start test with parent and grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=1)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        resulting_fee_rate_grandparent = self.calc_fee_rate(gp_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_grandparent)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        resulting_fee_rate_parent = self.calc_fee_rate(p_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_two_low_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs\")\n+        wallet = self.setup_and_fund_wallet(\"two_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        parent_one_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_one_tx = wallet.gettransaction(txid=parent_one_txid, verbose=True)\n+        resulting_fee_rate_parent_one = self.calc_fee_rate(p_one_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent_one)\n+\n+        parent_two_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_two_tx = wallet.gettransaction(txid=parent_two_txid, verbose=True)\n+        resulting_fee_rate_parent_two = self.calc_fee_rate(p_two_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent_two)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_one_tx, p_two_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_mixed_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs one of which has a higher feerate\")\n+        wallet = self.setup_and_fund_wallet(\"two_mixed_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        high_parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=self.target_fee_rate*2)\n+        p_high_tx = wallet.gettransaction(txid=high_parent_txid, verbose=True)\n+        resulting_fee_rate_high_parent = self.calc_fee_rate(p_high_tx)\n+\n+        # This time the parent is greater than the child\n+        assert_greater_than(resulting_fee_rate_high_parent, self.target_fee_rate)\n+\n+        parent_low_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_low_tx = wallet.gettransaction(txid=parent_low_txid, verbose=True)\n+        resulting_fee_rate_parent_low = self.calc_fee_rate(p_low_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent_low)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_high_tx, p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        resulting_bumped_ancestry_fee_rate = self.calc_set_fee_rate([p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_bumped_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_bumped_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_high_low(self):\n+        self.log.info(\"Start test with low parent and high grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"high_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=self.target_fee_rate * 10)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        resulting_fee_rate_grandparent = self.calc_fee_rate(gp_tx)\n+\n+        # grandparent has higher feerate\n+        assert_greater_than(resulting_fee_rate_grandparent, self.target_fee_rate)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        resulting_fee_rate_parent = self.calc_fee_rate(p_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+        resulting_ancestry_fee_rate_with_high_feerate_gp = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate_with_high_feerate_gp, self.target_fee_rate*1.1)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_high_low_below_target_feerate(self):\n+        self.log.info(\"Start test with low parent and higher low grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"low_and_lower_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=5)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        resulting_fee_rate_grandparent = self.calc_fee_rate(gp_tx)\n+\n+        # grandparent has higher feerate\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_grandparent)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        resulting_fee_rate_parent = self.calc_fee_rate(p_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low_sffo(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input, while subtracting from output\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet_sffo\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_funding)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate, subtractfeefromamount=True)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def run_test(self):\n+        self.log.info(\"Starting UnconfirmedInputTest!\")\n+        self.target_fee_rate = 30\n+        self.def_wallet  = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.generate(self.nodes[0], 110)\n+\n+        # Test that assumptions about meeting feerate and being able to test it hold\n+        self.test_target_feerate_confirmed()\n+\n+        # Spend unconfirmed input with feerate higher than target feerate\n+        self.test_target_feerate_unconfirmed_high()\n+\n+        # Actual test: Spend unconfirmed input with feerate lower than target feerate. Expect that parent gets bumped to target feerate.\n+        self.test_target_feerate_unconfirmed_low()\n+\n+        # Actual test: Spend unconfirmed input with unconfirmed parent both of which have a feerate lower than target feerate. Expect that both ancestors get bumped to target feerate.\n+        self.test_chain_of_unconfirmed_low()\n+\n+        # Actual test: Spend unconfirmed inputs from two parents with low feerates\n+        self.test_two_low_feerate_unconfirmed_parents()\n+\n+        # Actual test: Spend unconfirmed inputs from two parents with mixed feerates\n+        self.test_mixed_feerate_unconfirmed_parents()\n+\n+        # Actual test: Spend chain with high grandparent low parent\n+        self.test_chain_of_high_low()\n+\n+        # Actual test: Spend chain with low grandparent lower parent\n+        self.test_chain_of_high_low_below_target_feerate()\n+\n+        # Actual test: Check that fee is calculated correctly when bumping while subtracting fee from output\n+        self.test_target_feerate_unconfirmed_low_sffo()",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": 491,
      "original_position": 318,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0\r\n\r\nMissing a test for `bumpfee` RPC?",
      "created_at": "2022-09-28T14:22:24Z",
      "updated_at": "2022-09-28T14:24:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r982473716",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982473716"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 491,
      "original_line": 491,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007251469",
      "pull_request_review_id": 1158885486,
      "id": 1007251469,
      "node_id": "PRRC_kwDOABII5848CXAN",
      "diff_hunk": "@@ -66,7 +71,10 @@ struct COutput {\n     /** The fee required to spend this output at the consolidation feerate. */\n     CAmount long_term_fee{0};\n \n-    COutput(const COutPoint& outpoint, const CTxOut& txout, int depth, int input_bytes, bool spendable, bool solvable, bool safe, int64_t time, bool from_me, const std::optional<CFeeRate> feerate = std::nullopt)\n+    /** The fee necessary to bump this UTXO's ancestor transactions to the target feerate */\n+    CAmount ancestor_bump_fees{0};\n+\n+    COutput(const COutPoint& outpoint, const CTxOut& txout, int depth, int input_bytes, bool spendable, bool solvable, bool safe, int64_t time, bool from_me, const std::optional<CFeeRate> feerate = std::nullopt, const std::optional<std::reference_wrapper<interfaces::Chain>> chain_interface = std::nullopt)",
      "path": "src/wallet/coinselection.h",
      "position": null,
      "original_position": 38,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0",
      "in_reply_to_id": 982470036,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Now applying the bumpfees to each output after constructing the output.",
      "created_at": "2022-10-27T18:55:00Z",
      "updated_at": "2022-10-27T18:55:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1007251469",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007251469"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1015784610",
      "pull_request_review_id": 1170926116,
      "id": 1015784610,
      "node_id": "PRRC_kwDOABII5848i6Si",
      "diff_hunk": "@@ -0,0 +1,321 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=100)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)\n+        assert_greater_than(resulting_fee_rate_funding, self.target_fee_rate)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_funding)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_unconfirmed_low(self):\n+        self.log.info(\"Start test with parent and grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=1)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        resulting_fee_rate_grandparent = self.calc_fee_rate(gp_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_grandparent)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        resulting_fee_rate_parent = self.calc_fee_rate(p_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_two_low_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs\")\n+        wallet = self.setup_and_fund_wallet(\"two_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        parent_one_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_one_tx = wallet.gettransaction(txid=parent_one_txid, verbose=True)\n+        resulting_fee_rate_parent_one = self.calc_fee_rate(p_one_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent_one)\n+\n+        parent_two_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_two_tx = wallet.gettransaction(txid=parent_two_txid, verbose=True)\n+        resulting_fee_rate_parent_two = self.calc_fee_rate(p_two_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent_two)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_one_tx, p_two_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_mixed_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs one of which has a higher feerate\")\n+        wallet = self.setup_and_fund_wallet(\"two_mixed_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        high_parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=self.target_fee_rate*2)\n+        p_high_tx = wallet.gettransaction(txid=high_parent_txid, verbose=True)\n+        resulting_fee_rate_high_parent = self.calc_fee_rate(p_high_tx)\n+\n+        # This time the parent is greater than the child\n+        assert_greater_than(resulting_fee_rate_high_parent, self.target_fee_rate)\n+\n+        parent_low_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_low_tx = wallet.gettransaction(txid=parent_low_txid, verbose=True)\n+        resulting_fee_rate_parent_low = self.calc_fee_rate(p_low_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent_low)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_high_tx, p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        resulting_bumped_ancestry_fee_rate = self.calc_set_fee_rate([p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_bumped_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_bumped_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_high_low(self):\n+        self.log.info(\"Start test with low parent and high grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"high_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=self.target_fee_rate * 10)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        resulting_fee_rate_grandparent = self.calc_fee_rate(gp_tx)\n+\n+        # grandparent has higher feerate\n+        assert_greater_than(resulting_fee_rate_grandparent, self.target_fee_rate)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        resulting_fee_rate_parent = self.calc_fee_rate(p_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+        resulting_ancestry_fee_rate_with_high_feerate_gp = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate_with_high_feerate_gp, self.target_fee_rate*1.1)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_high_low_below_target_feerate(self):\n+        self.log.info(\"Start test with low parent and higher low grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"low_and_lower_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=5)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        resulting_fee_rate_grandparent = self.calc_fee_rate(gp_tx)\n+\n+        # grandparent has higher feerate\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_grandparent)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        resulting_fee_rate_parent = self.calc_fee_rate(p_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low_sffo(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input, while subtracting from output\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet_sffo\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_funding)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate, subtractfeefromamount=True)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def run_test(self):\n+        self.log.info(\"Starting UnconfirmedInputTest!\")\n+        self.target_fee_rate = 30\n+        self.def_wallet  = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.generate(self.nodes[0], 110)\n+\n+        # Test that assumptions about meeting feerate and being able to test it hold\n+        self.test_target_feerate_confirmed()\n+\n+        # Spend unconfirmed input with feerate higher than target feerate\n+        self.test_target_feerate_unconfirmed_high()\n+\n+        # Actual test: Spend unconfirmed input with feerate lower than target feerate. Expect that parent gets bumped to target feerate.\n+        self.test_target_feerate_unconfirmed_low()\n+\n+        # Actual test: Spend unconfirmed input with unconfirmed parent both of which have a feerate lower than target feerate. Expect that both ancestors get bumped to target feerate.\n+        self.test_chain_of_unconfirmed_low()\n+\n+        # Actual test: Spend unconfirmed inputs from two parents with low feerates\n+        self.test_two_low_feerate_unconfirmed_parents()\n+\n+        # Actual test: Spend unconfirmed inputs from two parents with mixed feerates\n+        self.test_mixed_feerate_unconfirmed_parents()\n+\n+        # Actual test: Spend chain with high grandparent low parent\n+        self.test_chain_of_high_low()\n+\n+        # Actual test: Spend chain with low grandparent lower parent\n+        self.test_chain_of_high_low_below_target_feerate()\n+\n+        # Actual test: Check that fee is calculated correctly when bumping while subtracting fee from output\n+        self.test_target_feerate_unconfirmed_low_sffo()",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": 491,
      "original_position": 318,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0",
      "in_reply_to_id": 982473716,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added!",
      "created_at": "2022-11-07T18:51:47Z",
      "updated_at": "2022-11-07T18:51:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1015784610",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1015784610"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 491,
      "original_line": 491,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1017405596",
      "pull_request_review_id": 1173244112,
      "id": 1017405596,
      "node_id": "PRRC_kwDOABII5848pGCc",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());\n+            assert(it != descendant_set_by_txid.end());\n+            for (const auto& descendant : it->second) {\n+                descendant->second.vsize_with_ancestors -= anc->second.GetTxSize();\n+                descendant->second.fee_with_ancestors -= anc->second.GetModifiedFee();\n+            }\n+        }\n+        DeleteAncestorPackage(ancestors);\n+        assert(entries.size() == entries_by_txid.size());\n+    }\n+}\n+\n+std::map<COutPoint, CAmount> MiniMiner::CalculateBumpFees(const CFeeRate& target_feerate)\n+{\n+    // Build a block template until the target feerate is hit.\n+    BuildMockTemplate(target_feerate);\n+    assert(in_block.empty() || CFeeRate(total_fees, total_vsize) >= target_feerate);\n+\n+    // Each transaction that \"made it into the block\" has a bumpfee of 0, i.e. they are part of an\n+    // ancestor package that exceeds the target feerate and don't need to be bumped.\n+    for (const auto& txid : in_block) {\n+        // Not all of the block transactions were necessarily requested.\n+        auto it = outpoints_needed_by_txid.find(txid);\n+        if (it != outpoints_needed_by_txid.end()) {\n+            for (const auto& outpoint : it->second) {\n+                bump_fees.emplace(std::make_pair(outpoint, 0));\n+            }\n+            outpoints_needed_by_txid.erase(it);\n+        }\n+    }\n+    // For each transaction that remains, the bumpfee is the cost to raise it and its ancestors\n+    // to the target feerate, target_feerate * ancestor_size - ancestor_fees\n+    for (const auto& [txid, outpoints] : outpoints_needed_by_txid) {\n+        auto it = entries_by_txid.find(txid);\n+        assert(it != entries_by_txid.end());\n+        if (it != entries_by_txid.end()) {\n+            assert(target_feerate.GetFee(it->second.GetSizeWithAncestors()) > it->second.GetModFeesWithAncestors());\n+            const CAmount bump_fee{target_feerate.GetFee(it->second.GetSizeWithAncestors())\n+                                   - it->second.GetModFeesWithAncestors()};\n+            assert(bump_fee >= 0);\n+            for (const auto& outpoint : outpoints) {\n+                bump_fees.emplace(std::make_pair(outpoint, bump_fee));\n+            }\n+        }\n+    }\n+    return this->bump_fees;\n+}\n+\n+CAmount MiniMiner::CalculateTotalBumpFees(const CFeeRate& target_feerate)\n+{\n+    // Build a block template until the target feerate is hit.\n+    BuildMockTemplate(target_feerate);\n+    assert(in_block.empty() || CFeeRate(total_fees, total_vsize) >= target_feerate);\n+\n+    // All remaining ancestors that are not part of in_block must be bumped, but no other relatives (e.g. siblings, niblings, …)\n+    std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+    std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+\n+    for (const auto& outpoint : requested_outpoints) {\n+        const auto& txid = outpoint.hash;\n+        // Skip any ancestors that have a higher minerscore already\n+        if (in_block.find(txid) != in_block.end()) continue;\n+        auto iter = entries_by_txid.find(outpoint.hash);\n+        assert(iter != entries_by_txid.end());",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 237,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 8a474b7675d552a9f2951d7cbc59ca36d3a10f11 \"Add CalculateTotalBumpFee for overlapping ancestry\"\r\nI think the following change might make sense because that way even a `MiniMiner` that was initialized with confirmed outpoints could run `CalculateTotalBumpFees`. I think it would be better if `CalculateTotalBumpFees` could handle unconfirmed outpoints for uniformity with `CalculateBumpFees`.\r\n```suggestion\r\n        if (iter == entries_by_txid.end()) continue;\r\n```",
      "created_at": "2022-11-09T04:04:50Z",
      "updated_at": "2022-11-09T05:11:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1017405596",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1017405596"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1017410299",
      "pull_request_review_id": 1173244112,
      "id": 1017410299,
      "node_id": "PRRC_kwDOABII5848pHL7",
      "diff_hunk": "@@ -0,0 +1,103 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Set once per lifetime, fill in during initialization.\n+    // txids of to-be-replaced transactions\n+    std::set<uint256> to_be_replaced;\n+\n+    // After using the outpoints to figure out which transactions are to be replaced, we can just\n+    // work with txids (each outpoint from a single tx should have the same bumpfee independently).\n+    // Cache which outpoint are needed for each tx so we don't have to look up all the outputs.",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 63,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "in_reply_to_id": null,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit:\r\n```suggestion\r\n    // Cache which outpoints are needed for each tx so we don't have to look up all the outputs.",
      "created_at": "2022-11-09T04:14:32Z",
      "updated_at": "2022-11-09T14:06:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1017410299",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1017410299"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1024976309",
      "pull_request_review_id": 1183993011,
      "id": 1024976309,
      "node_id": "PRRC_kwDOABII5849F-W1",
      "diff_hunk": "@@ -0,0 +1,436 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=100)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_funding)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": null,
      "original_position": 107,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "ad8bffe548a2536f925e6911c7d50c1aaab1a59e",
      "in_reply_to_id": null,
      "user": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Where does the 1.5 come from here (and in later tests e.g. `test_two_low_feerate_unconfirmed_parents()` 1.1)?",
      "created_at": "2022-11-17T09:56:12Z",
      "updated_at": "2022-11-17T09:56:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1024976309",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1024976309"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1026970423",
      "pull_request_review_id": 1186932380,
      "id": 1026970423,
      "node_id": "PRRC_kwDOABII5849NlM3",
      "diff_hunk": "@@ -80,7 +80,18 @@ static feebumper::Result CheckFeeRate(const CWallet& wallet, const CWalletTx& wt\n         return feebumper::Result::WALLET_ERROR;\n     }\n \n-    CAmount new_total_fee = newFeerate.GetFee(maxTxSize);\n+    std::vector<COutPoint> reused_inputs;\n+    for (const CTxIn& txin : wtx.tx->vin) {\n+        reused_inputs.push_back(txin.prevout);\n+    }\n+\n+    std::map<COutPoint, CAmount> bump_fees = wallet.chain().CalculateBumpFees(reused_inputs, newFeerate);",
      "path": "src/wallet/feebumper.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would it maybe make sense to use `CalculateTotalBumpFees()` instead of `CalculateBumpFees()` here, given that all these inputs are from the same transaction and thus most certainly overlap in ancestry?",
      "created_at": "2022-11-18T23:25:19Z",
      "updated_at": "2022-12-06T17:19:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1026970423",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1026970423"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1027113476",
      "pull_request_review_id": 1187092079,
      "id": 1027113476,
      "node_id": "PRRC_kwDOABII5849OIIE",
      "diff_hunk": "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.\n+    //\n+    //  This includes fee-bumping in RBFs. If an outpoint conflicts with another transaction in the",
      "path": "src/interfaces/chain.h",
      "position": null,
      "original_position": 16,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's unclear to me what the first sentence here is saying with `in RBFs`. Perhaps `This includes fee-bumping using RBF for any conflicting transactions.`?",
      "created_at": "2022-11-19T16:40:09Z",
      "updated_at": "2022-11-19T17:45:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1027113476",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1027113476"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 228,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1027114058",
      "pull_request_review_id": 1187092079,
      "id": 1027114058,
      "node_id": "PRRC_kwDOABII5849OIRK",
      "diff_hunk": "@@ -952,6 +953,24 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    std::vector<txiter> ret;",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should this function start with `AssertLockHeld(cs)`?",
      "created_at": "2022-11-19T16:45:33Z",
      "updated_at": "2022-11-19T17:45:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1027114058",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1027114058"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 961,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1027127955",
      "pull_request_review_id": 1187107175,
      "id": 1027127955,
      "node_id": "PRRC_kwDOABII5849OLqT",
      "diff_hunk": "@@ -0,0 +1,436 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=100)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_funding)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": null,
      "original_position": 107,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "ad8bffe548a2536f925e6911c7d50c1aaab1a59e",
      "in_reply_to_id": 1024976309,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's just to check that the fees are at least what was expected, but do not overshoot too far, e.g. because we selected more inputs than expected.",
      "created_at": "2022-11-19T18:46:29Z",
      "updated_at": "2023-01-31T21:48:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1027127955",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1027127955"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028280212",
      "pull_request_review_id": 1188589097,
      "id": 1028280212,
      "node_id": "PRRC_kwDOABII5849Sk-U",
      "diff_hunk": "@@ -952,6 +953,24 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    std::vector<txiter> ret;\n+    ret.reserve(txids.size());\n+    for (const auto& txid : txids) {\n+        const auto it = GetIter(txid);\n+        assert(it);\n+        if (it) {\n+            ret.push_back(*it);\n+        } else {\n+            // return empty vector to let the caller know this failed.\n+            std::vector<txiter> empty_vector;\n+            return empty_vector;\n+        }",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "could be a bit more concise:\r\n```suggestion\r\n        if (!it) return {}; // return empty vector to let the caller know this failed\r\n        ret.push_back(*it);\r\n        }\r\n```\r\n\r\nI would also add a docstring to `assert(it)` that even though we're currently asserting this, the interface is that upon failure an empty vector is returned, so this assertion may be removed in the future without breaking the interface?",
      "created_at": "2022-11-21T16:39:08Z",
      "updated_at": "2022-11-22T01:30:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028280212",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028280212"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 963,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 969,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028283266",
      "pull_request_review_id": 1188589097,
      "id": 1028283266,
      "node_id": "PRRC_kwDOABII5849SluC",
      "diff_hunk": "@@ -952,6 +953,24 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    std::vector<txiter> ret;\n+    ret.reserve(txids.size());\n+    for (const auto& txid : txids) {\n+        const auto it = GetIter(txid);",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit:\r\n```suggestion\r\n        const auto it{GetIter(txid)};\r\n```",
      "created_at": "2022-11-21T16:41:57Z",
      "updated_at": "2022-11-22T01:30:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028283266",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028283266"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 961,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028296326",
      "pull_request_review_id": 1188589097,
      "id": 1028296326,
      "node_id": "PRRC_kwDOABII5849So6G",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 52,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think `it->GetCountWithAncestors()` and `it->GetCountWithDescendants()` both include the current transaction, so in that case this should be decreased with 1?",
      "created_at": "2022-11-21T16:52:47Z",
      "updated_at": "2022-11-22T01:30:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028296326",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028296326"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1224,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028322453",
      "pull_request_review_id": 1188589097,
      "id": 1028322453,
      "node_id": "PRRC_kwDOABII5849SvSV",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: I'm not sure it'd be a wortwhile improvement, but reserving before assigning could be a slight performance improvement so you only need to size the vector once instead of twice?",
      "created_at": "2022-11-21T17:09:26Z",
      "updated_at": "2022-11-22T01:30:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028322453",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028322453"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1169,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028330615",
      "pull_request_review_id": 1188589097,
      "id": 1028330615,
      "node_id": "PRRC_kwDOABII5849SxR3",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 60,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think `unprocessed_count` is incorrect, shouldn't this be e.g. `to_process_count`?\r\n```suggestion\r\n        for (size_t i{0}, to_process_count{txids.size()}; i < to_process_count; ++i) {\r\n```",
      "created_at": "2022-11-21T17:17:46Z",
      "updated_at": "2022-11-22T01:30:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028330615",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028330615"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1232,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028377597",
      "pull_request_review_id": 1188589097,
      "id": 1028377597,
      "node_id": "PRRC_kwDOABII5849S8v9",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 59,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think this is correct?",
      "created_at": "2022-11-21T18:07:29Z",
      "updated_at": "2022-11-22T01:30:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028377597",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028377597"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1231,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028438751",
      "pull_request_review_id": 1188589097,
      "id": 1028438751,
      "node_id": "PRRC_kwDOABII5849TLrf",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {\n+            const auto curr = cluster[i];\n+            for (const CTxMemPoolEntry& parent_entry : curr->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    cluster.push_back(parent_it);\n+                    // we still need to process this\n+                    ++unprocessed_count;\n+                }\n+            }\n+            for (const CTxMemPoolEntry& child_entry : curr->GetMemPoolChildrenConst()) {\n+                const auto child_it = mapTx.iterator_to(child_entry);\n+                if (!visited(child_it)) {\n+                    cluster.push_back(child_it);\n+                    // we still need to process this\n+                    ++unprocessed_count;\n+                }\n+            }",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 77,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This can be deduplicated. Also, I think `curr` is not really more helpful than `cluster[i]`, so I'd just remove that varariable.\r\n```suggestion\r\n            auto family{cluster[i]->GetMemPoolParents()};\r\n            family.merge(cluster[i]->GetMemPoolChildren());\r\n            for (const CTxMemPoolEntry& entry : family) {\r\n                const auto tx_iter = mapTx.iterator_to(entry);\r\n                if (!visited(tx_iter)) {\r\n                    cluster.push_back(tx_iter);\r\n                    // we still need to process this\r\n                    ++unprocessed_count;\r\n                }\r\n            }\r\n```",
      "created_at": "2022-11-21T19:23:31Z",
      "updated_at": "2022-11-22T01:30:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028438751",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028438751"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 1233,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1221,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028440069",
      "pull_request_review_id": 1188589097,
      "id": 1028440069,
      "node_id": "PRRC_kwDOABII5849TMAF",
      "diff_hunk": "@@ -694,6 +701,9 @@ class CTxMemPool\n                                    std::string& errString,\n                                    bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Get entire list of connected transactions for all transactions in txids. */",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 22,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would it be helpful to add a `@pre` indicating that all txids need to be in mempool?",
      "created_at": "2022-11-21T19:25:13Z",
      "updated_at": "2022-11-22T01:30:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028440069",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028440069"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 704,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028446649",
      "pull_request_review_id": 1188589097,
      "id": 1028446649,
      "node_id": "PRRC_kwDOABII5849TNm5",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 24,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "As per https://github.com/bitcoin/bitcoin/pull/23962, perhaps better to make these `int32_t`?",
      "created_at": "2022-11-21T19:33:49Z",
      "updated_at": "2022-11-22T01:30:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028446649",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028446649"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028448913",
      "pull_request_review_id": 1188589097,
      "id": 1028448913,
      "node_id": "PRRC_kwDOABII5849TOKR",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 38,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    const CTransaction& GetTx() const LIFETIMEBOUND { return tx; }\r\n```",
      "created_at": "2022-11-21T19:36:56Z",
      "updated_at": "2022-11-22T01:30:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028448913",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028448913"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028449731",
      "pull_request_review_id": 1188589097,
      "id": 1028449731,
      "node_id": "PRRC_kwDOABII5849TOXD",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 25,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should these be `private` instead?",
      "created_at": "2022-11-21T19:38:07Z",
      "updated_at": "2022-11-22T01:30:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028449731",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028449731"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 23,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028451302",
      "pull_request_review_id": 1188589097,
      "id": 1028451302,
      "node_id": "PRRC_kwDOABII5849TOvm",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 19,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If `tx` is `const` I think this should be too? And same for `vsize_individual`?\r\n```suggestion\r\n    const CAmount fee_individual;\r\n```",
      "created_at": "2022-11-21T19:40:05Z",
      "updated_at": "2022-11-23T16:19:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028451302",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028451302"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028460084",
      "pull_request_review_id": 1188589097,
      "id": 1028460084,
      "node_id": "PRRC_kwDOABII5849TQ40",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;\n+\n+    // Set once per lifetime, fill in during initialization.\n+    // txids of to-be-replaced transactions\n+    std::set<uint256> to_be_replaced;\n+\n+    // After using the outpoints to figure out which transactions are to be replaced, we can just\n+    // work with txids (each outpoint from a single tx should have the same bumpfee independently).\n+    // Cache which outpoint are needed for each tx so we don't have to look up all the outputs.\n+    // Excludes to-be-replaced and unavailable transactions (set to 0).\n+    std::map<uint256, std::vector<COutPoint>> outpoints_needed_by_txid;\n+\n+    // What we're trying to calculate.\n+    std::map<COutPoint, CAmount> bump_fees;\n+\n+    // The constructed block template\n+    std::set<uint256> in_block;\n+\n+    // Information on the current status of the block\n+    CAmount total_fees{0};\n+    int64_t total_vsize{0};\n+\n+    /** Main data structure holding the entries, can be indexed by txid */\n+    std::map<uint256, MockMempoolEntry> entries_by_txid;\n+    using MockEntryMap = decltype(entries_by_txid);",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 82,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since we're only using the `::iterator` attribute, could shorten it a bit more to\r\n```suggestion\r\n    using MockEntryMapIter = decltype(entries_by_txid)::iterator;\r\n```",
      "created_at": "2022-11-21T19:51:38Z",
      "updated_at": "2022-11-22T01:30:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028460084",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028460084"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028461644",
      "pull_request_review_id": 1188589097,
      "id": 1028461644,
      "node_id": "PRRC_kwDOABII5849TRRM",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 55,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Although `MiniMiner` sounds catchier, would `MiniBlockAssembler` be a more appropriate/accurate name?",
      "created_at": "2022-11-21T19:53:42Z",
      "updated_at": "2022-11-22T01:30:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028461644",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028461644"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028482615",
      "pull_request_review_id": 1188589097,
      "id": 1028482615,
      "node_id": "PRRC_kwDOABII5849TWY3",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;\n+\n+    // Set once per lifetime, fill in during initialization.\n+    // txids of to-be-replaced transactions\n+    std::set<uint256> to_be_replaced;\n+\n+    // After using the outpoints to figure out which transactions are to be replaced, we can just\n+    // work with txids (each outpoint from a single tx should have the same bumpfee independently).\n+    // Cache which outpoint are needed for each tx so we don't have to look up all the outputs.\n+    // Excludes to-be-replaced and unavailable transactions (set to 0).\n+    std::map<uint256, std::vector<COutPoint>> outpoints_needed_by_txid;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 68,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "naming consistency\r\n```suggestion\r\n    std::map<uint256, std::vector<COutPoint>> requested_outpoints_by_txid;\r\n```",
      "created_at": "2022-11-21T20:21:18Z",
      "updated_at": "2022-11-22T01:30:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028482615",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028482615"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028491577",
      "pull_request_review_id": 1188589097,
      "id": 1028491577,
      "node_id": "PRRC_kwDOABII5849TYk5",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 58,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps I'll answer my own question as I progress with my review, but do we need `requested_outpoints`? I think this overlaps entirely with the keys of `bump_fees`? Feel free to ignore/keep it very brief if it's a dumb remark, I don't fully understand the PR yet.",
      "created_at": "2022-11-21T20:33:23Z",
      "updated_at": "2022-11-22T01:30:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028491577",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028491577"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029817194",
      "pull_request_review_id": 1190768828,
      "id": 1029817194,
      "node_id": "PRRC_kwDOABII5849YcNq",
      "diff_hunk": "@@ -952,6 +953,24 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    std::vector<txiter> ret;\n+    ret.reserve(txids.size());\n+    for (const auto& txid : txids) {\n+        const auto it = GetIter(txid);\n+        assert(it);\n+        if (it) {\n+            ret.push_back(*it);\n+        } else {\n+            // return empty vector to let the caller know this failed.\n+            std::vector<txiter> empty_vector;\n+            return empty_vector;\n+        }",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028280212,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'd say we should either assert (and document that assumption) or return an empty vector, but not both. In the current form, this seems dangerous  - in the future someone might read the doc for the function, use the generic `GetIter` for some other usecase and introduce a crash bug in the worst case. ",
      "created_at": "2022-11-22T21:02:49Z",
      "updated_at": "2022-11-23T17:57:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1029817194",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029817194"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 963,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 969,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029857746",
      "pull_request_review_id": 1187107175,
      "id": 1029857746,
      "node_id": "PRRC_kwDOABII5849YmHS",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());\n+            assert(it != descendant_set_by_txid.end());\n+            for (const auto& descendant : it->second) {\n+                descendant->second.vsize_with_ancestors -= anc->second.GetTxSize();\n+                descendant->second.fee_with_ancestors -= anc->second.GetModifiedFee();\n+            }\n+        }\n+        DeleteAncestorPackage(ancestors);\n+        assert(entries.size() == entries_by_txid.size());\n+    }\n+}\n+\n+std::map<COutPoint, CAmount> MiniMiner::CalculateBumpFees(const CFeeRate& target_feerate)\n+{\n+    // Build a block template until the target feerate is hit.\n+    BuildMockTemplate(target_feerate);\n+    assert(in_block.empty() || CFeeRate(total_fees, total_vsize) >= target_feerate);\n+\n+    // Each transaction that \"made it into the block\" has a bumpfee of 0, i.e. they are part of an\n+    // ancestor package that exceeds the target feerate and don't need to be bumped.\n+    for (const auto& txid : in_block) {\n+        // Not all of the block transactions were necessarily requested.\n+        auto it = outpoints_needed_by_txid.find(txid);\n+        if (it != outpoints_needed_by_txid.end()) {\n+            for (const auto& outpoint : it->second) {\n+                bump_fees.emplace(std::make_pair(outpoint, 0));\n+            }\n+            outpoints_needed_by_txid.erase(it);\n+        }\n+    }\n+    // For each transaction that remains, the bumpfee is the cost to raise it and its ancestors\n+    // to the target feerate, target_feerate * ancestor_size - ancestor_fees\n+    for (const auto& [txid, outpoints] : outpoints_needed_by_txid) {\n+        auto it = entries_by_txid.find(txid);\n+        assert(it != entries_by_txid.end());\n+        if (it != entries_by_txid.end()) {\n+            assert(target_feerate.GetFee(it->second.GetSizeWithAncestors()) > it->second.GetModFeesWithAncestors());\n+            const CAmount bump_fee{target_feerate.GetFee(it->second.GetSizeWithAncestors())\n+                                   - it->second.GetModFeesWithAncestors()};\n+            assert(bump_fee >= 0);\n+            for (const auto& outpoint : outpoints) {\n+                bump_fees.emplace(std::make_pair(outpoint, bump_fee));\n+            }\n+        }\n+    }\n+    return this->bump_fees;\n+}\n+\n+CAmount MiniMiner::CalculateTotalBumpFees(const CFeeRate& target_feerate)\n+{\n+    // Build a block template until the target feerate is hit.\n+    BuildMockTemplate(target_feerate);\n+    assert(in_block.empty() || CFeeRate(total_fees, total_vsize) >= target_feerate);\n+\n+    // All remaining ancestors that are not part of in_block must be bumped, but no other relatives (e.g. siblings, niblings, …)\n+    std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+    std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+\n+    for (const auto& outpoint : requested_outpoints) {\n+        const auto& txid = outpoint.hash;\n+        // Skip any ancestors that have a higher minerscore already\n+        if (in_block.find(txid) != in_block.end()) continue;\n+        auto iter = entries_by_txid.find(outpoint.hash);\n+        assert(iter != entries_by_txid.end());",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 237,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1017405596,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, that makes sense, thank you",
      "created_at": "2022-11-22T21:56:11Z",
      "updated_at": "2023-01-31T21:48:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1029857746",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029857746"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029858086",
      "pull_request_review_id": 1187107175,
      "id": 1029858086,
      "node_id": "PRRC_kwDOABII5849YmMm",
      "diff_hunk": "@@ -0,0 +1,103 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Set once per lifetime, fill in during initialization.\n+    // txids of to-be-replaced transactions\n+    std::set<uint256> to_be_replaced;\n+\n+    // After using the outpoints to figure out which transactions are to be replaced, we can just\n+    // work with txids (each outpoint from a single tx should have the same bumpfee independently).\n+    // Cache which outpoint are needed for each tx so we don't have to look up all the outputs.",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 63,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "in_reply_to_id": 1017410299,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed, thanks!",
      "created_at": "2022-11-22T21:56:43Z",
      "updated_at": "2023-01-31T21:48:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1029858086",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029858086"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029977800",
      "pull_request_review_id": 1190768828,
      "id": 1029977800,
      "node_id": "PRRC_kwDOABII5849ZDbI",
      "diff_hunk": "@@ -0,0 +1,220 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "is that comment meant to be here? I can't see the relation to this else branch, and mapModifiedTx doesn't exist in the MiniMiner.",
      "created_at": "2022-11-23T02:41:21Z",
      "updated_at": "2022-11-23T17:57:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1029977800",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029977800"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1030671435",
      "pull_request_review_id": 1190768828,
      "id": 1030671435,
      "node_id": "PRRC_kwDOABII5849bsxL",
      "diff_hunk": "@@ -694,6 +701,9 @@ class CTxMemPool\n                                    std::string& errString,\n                                    bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Get entire list of connected transactions for all transactions in txids. */",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 22,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028440069,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agree, this should be part of its documentation. I think it means that the caller must ensure that nothing can get removed from the mempool in between preparing the list of txids and calling this function, which seems important.",
      "created_at": "2022-11-23T16:40:43Z",
      "updated_at": "2022-11-23T17:57:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1030671435",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1030671435"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 704,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035216664",
      "pull_request_review_id": 1198255084,
      "id": 1035216664,
      "node_id": "PRRC_kwDOABII5849tCcY",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n            bump_fees.emplace(outpoint, 0);\r\n```",
      "created_at": "2022-11-29T19:55:00Z",
      "updated_at": "2022-11-29T22:58:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035216664",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035216664"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035217598",
      "pull_request_review_id": 1198255084,
      "id": 1035217598,
      "node_id": "PRRC_kwDOABII5849tCq-",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());\n+            assert(it != descendant_set_by_txid.end());\n+            for (const auto& descendant : it->second) {\n+                descendant->second.vsize_with_ancestors -= anc->second.GetTxSize();\n+                descendant->second.fee_with_ancestors -= anc->second.GetModifiedFee();\n+            }\n+        }\n+        DeleteAncestorPackage(ancestors);\n+        assert(entries.size() == entries_by_txid.size());\n+    }\n+}\n+\n+std::map<COutPoint, CAmount> MiniMiner::CalculateBumpFees(const CFeeRate& target_feerate)\n+{\n+    // Build a block template until the target feerate is hit.\n+    BuildMockTemplate(target_feerate);\n+    assert(in_block.empty() || CFeeRate(total_fees, total_vsize) >= target_feerate);\n+\n+    // Each transaction that \"made it into the block\" has a bumpfee of 0, i.e. they are part of an\n+    // ancestor package that exceeds the target feerate and don't need to be bumped.\n+    for (const auto& txid : in_block) {\n+        // Not all of the block transactions were necessarily requested.\n+        auto it = outpoints_needed_by_txid.find(txid);\n+        if (it != outpoints_needed_by_txid.end()) {\n+            for (const auto& outpoint : it->second) {\n+                bump_fees.emplace(std::make_pair(outpoint, 0));\n+            }\n+            outpoints_needed_by_txid.erase(it);\n+        }\n+    }\n+    // For each transaction that remains, the bumpfee is the cost to raise it and its ancestors\n+    // to the target feerate, target_feerate * ancestor_size - ancestor_fees\n+    for (const auto& [txid, outpoints] : outpoints_needed_by_txid) {\n+        auto it = entries_by_txid.find(txid);\n+        assert(it != entries_by_txid.end());\n+        if (it != entries_by_txid.end()) {\n+            assert(target_feerate.GetFee(it->second.GetSizeWithAncestors()) > it->second.GetModFeesWithAncestors());\n+            const CAmount bump_fee{target_feerate.GetFee(it->second.GetSizeWithAncestors())\n+                                   - it->second.GetModFeesWithAncestors()};\n+            assert(bump_fee >= 0);\n+            for (const auto& outpoint : outpoints) {\n+                bump_fees.emplace(std::make_pair(outpoint, bump_fee));\n+            }\n+        }\n+    }\n+    return this->bump_fees;",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 219,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    return bump_fees;\r\n```",
      "created_at": "2022-11-29T19:56:03Z",
      "updated_at": "2022-11-29T22:58:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035217598",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035217598"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035218401",
      "pull_request_review_id": 1198255084,
      "id": 1035218401,
      "node_id": "PRRC_kwDOABII5849tC3h",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n                outpoints_needed_by_txid.emplace(outpoint.hash, outpoints_of_tx);\r\n```\r\nCan make a similar change elsewhere in this file.",
      "created_at": "2022-11-29T19:56:59Z",
      "updated_at": "2022-11-29T22:58:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035218401",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035218401"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035234823",
      "pull_request_review_id": 1198255084,
      "id": 1035234823,
      "node_id": "PRRC_kwDOABII5849tG4H",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    for (const auto& [txid, outpoints] : outpoints_needed_by_txid) {\r\n        txids_needed.push_back(txid);\r\n    }\r\n```\r\n(nit, simpler)",
      "created_at": "2022-11-29T20:13:21Z",
      "updated_at": "2022-11-29T22:58:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035234823",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035234823"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 53,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035269211",
      "pull_request_review_id": 1198255084,
      "id": 1035269211,
      "node_id": "PRRC_kwDOABII5849tPRb",
      "diff_hunk": "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that",
      "path": "src/interfaces/chain.h",
      "position": null,
      "original_position": 7,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. (10-5) * mempooltx.vsize). If that\r\n```\r\nand / or maybe use 6 instead of 5. (It's slightly unclear as is because 10-5 == 5.)",
      "created_at": "2022-11-29T20:47:21Z",
      "updated_at": "2022-11-29T22:58:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035269211",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035269211"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035318488",
      "pull_request_review_id": 1198255084,
      "id": 1035318488,
      "node_id": "PRRC_kwDOABII5849tbTY",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;\n+\n+    // Set once per lifetime, fill in during initialization.\n+    // txids of to-be-replaced transactions\n+    std::set<uint256> to_be_replaced;\n+\n+    // After using the outpoints to figure out which transactions are to be replaced, we can just\n+    // work with txids (each outpoint from a single tx should have the same bumpfee independently).\n+    // Cache which outpoint are needed for each tx so we don't have to look up all the outputs.\n+    // Excludes to-be-replaced and unavailable transactions (set to 0).",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 67,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    // If multiple argument outpoints correspond to the same transaction, cache them together in\r\n    // a single entry indexed by txid. Then we can just work with txids since all outpoints from\r\n    // the same tx will have the same bumpfee. Excludes non-mempool transactions.\r\n```\r\nThis is how I read the code, but check my understanding!",
      "created_at": "2022-11-29T21:49:19Z",
      "updated_at": "2022-11-29T22:58:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035318488",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035318488"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 64,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035330287",
      "pull_request_review_id": 1198255084,
      "id": 1035330287,
      "node_id": "PRRC_kwDOABII5849teLv",
      "diff_hunk": "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.\n+    //\n+    //  This includes fee-bumping in RBFs. If an outpoint conflicts with another transaction in the\n+    //  mempool, it is assumed that the goal is to replace that transaction. As such, the\n+    //  calculation will exclude the to-be-replaced transaction, but will include the fee-bumping\n+    //  cost. If bump fees of descendants of the to-be-replaced transaction are requested, the value\n+    //  will be 0. Fee-related RBF rules are not included as they are logically distinct.\n+    //\n+    //  Any outpoints that are otherwise unavailable from the mempool (e.g. UTXOs from confirmed\n+    //  transactions or transactions not yet broadcast by the wallet) are given a bump fee of 0.\n+    //\n+    //  If multiple outpoints come from the same transaction (which would be very rare because\n+    //  it means that one transaction has multiple change outputs or paid the same wallet using multiple\n+    //  outputs in the same transaction) or have shared ancestry, the bump fees are calculated\n+    //  independently, i.e. as if only one of them is spent. This may result in double-fee-bumping. This\n+    //  caveat can be rectified per use of the sister-function CalculateTotalBumpFees(…).\n+    virtual std::map<COutPoint, CAmount> CalculateBumpFees(const std::vector<COutPoint>& outpoints, const CFeeRate& target_feerate) = 0;\n+\n+    //! Calculate the shared bump fees for a given set of outpoints per the\n+    //  same strategy as in CalculateBumpFees(…).  Other than the above call,",
      "path": "src/interfaces/chain.h",
      "position": null,
      "original_position": 33,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    //  same strategy as in CalculateBumpFees(…). Unlike the above call,\r\n```",
      "created_at": "2022-11-29T22:05:26Z",
      "updated_at": "2022-11-29T22:58:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035330287",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035330287"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 245,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035335097",
      "pull_request_review_id": 1198255084,
      "id": 1035335097,
      "node_id": "PRRC_kwDOABII5849tfW5",
      "diff_hunk": "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.",
      "path": "src/interfaces/chain.h",
      "position": null,
      "original_position": 14,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> they are not included\r\n\r\nIs this true? IIUC, I don't think it works this way, or it shouldn't. If there are two outpoints sharing the same ancestor transaction, we don't know which of those two outpoints coin selection will choose if it chooses only one. If coin selection chooses the one for which we didn't bump to account for the ancestor, then our fee will be too low. I thought we bump both, and then _after_ coin selection, we make the adjustment.",
      "created_at": "2022-11-29T22:12:05Z",
      "updated_at": "2022-11-29T22:58:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035335097",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035335097"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 226,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035354396",
      "pull_request_review_id": 1198255084,
      "id": 1035354396,
      "node_id": "PRRC_kwDOABII5849tkEc",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 68,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n                for (const auto& outpoint : outpoints_it->second) {\r\n                    bump_fees.emplace(outpoint, 0);\r\n                }\r\n                outpoints_needed_by_txid.erase(outpoints_it);\r\n```\r\nI'm not sure about this, but doing the `erase` here would be consistent with the `!mempool.exists()` case above (an entry for this transaction, none of whose outpoints we will use, is _not_ added to `outpoints_needed_by_txid`).",
      "created_at": "2022-11-29T22:40:11Z",
      "updated_at": "2022-11-29T22:59:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035354396",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035354396"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 66,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035363601",
      "pull_request_review_id": 1198255084,
      "id": 1035363601,
      "node_id": "PRRC_kwDOABII5849tmUR",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 97,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, std::move(cached_descendants)));\r\n```",
      "created_at": "2022-11-29T22:53:50Z",
      "updated_at": "2022-11-29T22:58:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035363601",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035363601"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035575327",
      "pull_request_review_id": 1198749149,
      "id": 1035575327,
      "node_id": "PRRC_kwDOABII5849uaAf",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 16,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "suggest adding:\r\n```\r\n// This class must be constructed while holding mempool.cs. After construction, the object's\r\n// methods can be called without holding that lock.\r\n```\r\nOr maybe a better place for this comment would be just before the constructor itself.",
      "created_at": "2022-11-30T06:32:54Z",
      "updated_at": "2022-12-02T00:08:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035575327",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035575327"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035576612",
      "pull_request_review_id": 1198749149,
      "id": 1035576612,
      "node_id": "PRRC_kwDOABII5849uaUk",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 17,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could a better word than \"Mock\" be used to name this class? I initially thought this class had to do with testing. Since this is the MiniMiner, maybe `MiniMempoolEntry`?",
      "created_at": "2022-11-30T06:35:09Z",
      "updated_at": "2022-12-02T00:08:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035576612",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035576612"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035580146",
      "pull_request_review_id": 1198749149,
      "id": 1035580146,
      "node_id": "PRRC_kwDOABII5849ubLy",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 19,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028451302,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This suggestion makes sense since these two individual fields shouldn't need to change (the ancestor fields do change). Making both `const` does compile.",
      "created_at": "2022-11-30T06:41:26Z",
      "updated_at": "2022-12-02T00:08:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035580146",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035580146"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1037673418",
      "pull_request_review_id": 1198749149,
      "id": 1037673418,
      "node_id": "PRRC_kwDOABII58492aPK",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 20,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not at all sure about this, but this is a reference variable so it's (sort of) a pointer, right? We continue to hold this reference after releasing `mempool.cs` -- is it possible for the transaction to go away (its memory deallocated) if, for example, it gets mined, thereby invalidating our reference? I wonder if this might be better:\r\n```suggestion\r\n    const CTransaction tx;\r\n```\r\nThe debugger shows `sizeof(node::MockMempoolEntry)` is only 40 bytes with `tx` being a reference, and 152 if it's not a reference, which makes sense because `sizeof(CTransaction)` is 120.\r\n\r\nOr, maybe it should be `const CTransactionRef tx;` because then it's a shared pointer, so if the tx gets removed from the mempool, our reference will remain valid until we're done with it. The advantage of this would be we wouldn't be making a full copy of the transaction.",
      "created_at": "2022-12-02T00:08:03Z",
      "updated_at": "2022-12-02T00:08:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1037673418",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1037673418"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038492630",
      "pull_request_review_id": 1203025818,
      "id": 1038492630,
      "node_id": "PRRC_kwDOABII58495iPW",
      "diff_hunk": "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.\n+    //\n+    //  This includes fee-bumping in RBFs. If an outpoint conflicts with another transaction in the\n+    //  mempool, it is assumed that the goal is to replace that transaction. As such, the\n+    //  calculation will exclude the to-be-replaced transaction, but will include the fee-bumping\n+    //  cost. If bump fees of descendants of the to-be-replaced transaction are requested, the value\n+    //  will be 0. Fee-related RBF rules are not included as they are logically distinct.",
      "path": "src/interfaces/chain.h",
      "position": null,
      "original_position": 20,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would it be safer not to make this assumption? The cluster would be larger, but since the algorithms are efficient, the performance difference shouldn't be a problem. The `MiniMiner` constructor would be simpler too. Even if currently we're never given a outpoint that conflicts with a transaction _not_ being replaced, could that possibly change in the future?\r\n\r\nInitially, I thought that was I'm suggesting here wouldn't work, because suppose that the transaction that our outpoint refers to (let's call it the parent) has a low feerate, but the transaction we're replacing (the parent's existing child) has a very high feerate. If, contrary to what the code currently does, we ignore the fact that we're replacing the child (we keep the child in the cluster, as if we're spending a different output of the parent), then we might conclude that we don't need to bump the parent's fee -- _whereas we actually do_, because the child will no longer exist!\r\n\r\nBut I think this won't happen because rule 6 of our [replacement policy](https://github.com/bitcoin/bitcoin/blob/master/doc/policy/mempool-replacements.md) requires the replacement transaction to have a higher feerate than all that it's replacing.\r\n\r\n> 6. The replacement transaction's feerate is greater than the feerates of all directly conflicting transactions.\r\n\r\nSo it seems like even if we (mistakenly) think that the existing child will remain and that it will bump the parent somewhat, it won't bump it enough to meet our requested feerate, so we'll still bump it (as required by our desired feerate).",
      "created_at": "2022-12-02T20:07:42Z",
      "updated_at": "2022-12-02T20:12:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1038492630",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038492630"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 229,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 232,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038495307",
      "pull_request_review_id": 1203025818,
      "id": 1038495307,
      "node_id": "PRRC_kwDOABII58495i5L",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 142,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Simplification, we just asserted that it's not `entries.end()`\r\n```suggestion\r\n        if (ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\r\n```",
      "created_at": "2022-12-02T20:10:10Z",
      "updated_at": "2022-12-02T20:12:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1038495307",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038495307"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040297609",
      "pull_request_review_id": 1205584712,
      "id": 1040297609,
      "node_id": "PRRC_kwDOABII584-Aa6J",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 79,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "898ad9d5904f1b689d18d94f20d92500cf443758 The result of this `find()` could be `entries_by_txid.end()` (not found), because in the previous loop (also over `cluster`), if the transaction is found in `to_be_replaced` (so we take the `else` path), then the transaction is not added to `entries_by_txid`. I think it turns out to be harmless, but I just wanted to point it out because it looks like it may be unintentional.",
      "created_at": "2022-12-06T01:21:07Z",
      "updated_at": "2022-12-06T01:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1040297609",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040297609"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040298956",
      "pull_request_review_id": 1205584712,
      "id": 1040298956,
      "node_id": "PRRC_kwDOABII584-AbPM",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());\n+            assert(it != descendant_set_by_txid.end());\n+            for (const auto& descendant : it->second) {\n+                descendant->second.vsize_with_ancestors -= anc->second.GetTxSize();\n+                descendant->second.fee_with_ancestors -= anc->second.GetModifiedFee();\n+            }\n+        }\n+        DeleteAncestorPackage(ancestors);\n+        assert(entries.size() == entries_by_txid.size());\n+    }\n+}\n+\n+std::map<COutPoint, CAmount> MiniMiner::CalculateBumpFees(const CFeeRate& target_feerate)\n+{\n+    // Build a block template until the target feerate is hit.\n+    BuildMockTemplate(target_feerate);\n+    assert(in_block.empty() || CFeeRate(total_fees, total_vsize) >= target_feerate);\n+\n+    // Each transaction that \"made it into the block\" has a bumpfee of 0, i.e. they are part of an\n+    // ancestor package that exceeds the target feerate and don't need to be bumped.",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 193,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    // ancestor package with at least the target feerate and don't need to be bumped.\r\n```\r\n(if the feerates are equal, no bump is required)",
      "created_at": "2022-12-06T01:24:23Z",
      "updated_at": "2022-12-06T01:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1040298956",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040298956"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 193,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040561129",
      "pull_request_review_id": 1205980356,
      "id": 1040561129,
      "node_id": "PRRC_kwDOABII584-BbPp",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 58,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should all these class variable names have the `m_` prefix?",
      "created_at": "2022-12-06T06:44:47Z",
      "updated_at": "2022-12-06T06:44:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1040561129",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040561129"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040968456",
      "pull_request_review_id": 1206585147,
      "id": 1040968456,
      "node_id": "PRRC_kwDOABII584-C-sI",
      "diff_hunk": "@@ -952,6 +953,24 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    std::vector<txiter> ret;\n+    ret.reserve(txids.size());\n+    for (const auto& txid : txids) {\n+        const auto it = GetIter(txid);\n+        assert(it);",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "995107782a1a512811d54f7abf29249f351a7cbf",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "if `GetIter(txid)` cannot find the txid in `mapTx`, it will return a `std::nullopt`, which will then cause the node to crash. this seems really dangerous. \r\n\r\nwouldn't it be better to remove the assert and just let `GetIterVec` return early with an empty vector if it's passed a txid which isn't in the mempool? based on the comment, that seems to be the intention of this code, so im not sure what good the `assert` is doing here",
      "created_at": "2022-12-06T13:23:34Z",
      "updated_at": "2022-12-06T15:06:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1040968456",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040968456"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 962,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040973653",
      "pull_request_review_id": 1206585147,
      "id": 1040973653,
      "node_id": "PRRC_kwDOABII584-C_9V",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "995107782a1a512811d54f7abf29249f351a7cbf",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "the way `GetIterVec` is written, it will return an empty vector if any of the `txids` are not found in the mempool, so wouldn't it be better to check for an empty vector here and return an error to the user letting them know one of the txids they sent wasn't found in the mempool? the way it's written now, if an empty vector is returned the node will crash",
      "created_at": "2022-12-06T13:28:30Z",
      "updated_at": "2022-12-06T15:06:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1040973653",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040973653"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1222,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040986669",
      "pull_request_review_id": 1206585147,
      "id": 1040986669,
      "node_id": "PRRC_kwDOABII584-DDIt",
      "diff_hunk": "@@ -646,9 +646,16 @@ class CTxMemPool\n     /** Returns an iterator to the given hash, if found */\n     std::optional<txiter> GetIter(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n-    /** Translate a set of hashes into a set of pool iterators to avoid repeated lookups */\n+    /** Translate a set of hashes into a set of pool iterators to avoid repeated lookups.\n+     * Does not require that all of the hashes correspond to actual transactions in the mempool,\n+     * only returns the ones that exist. */\n     setEntries GetIterSet(const std::set<uint256>& hashes) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Translate a list of hashes into a list of mempool iterators to avoid repeated lookups.\n+     * The nth element in txids becomes the nth element in the returned vector. If any of the txids\n+     * don't actually exist in the mempool, returns an empty vector. */\n+    std::vector<txiter> GetIterVec(const std::vector<uint256>& txids) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 14,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "995107782a1a512811d54f7abf29249f351a7cbf",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "with the assert statements in `GetIterVec` and `CalculateCluster`, this is not accurate, unless I am misunderstanding something. if a txid does not exist in the mempool, `GetIter` returns a nullopt, which then causes `GetIterVec` to crash. if we remove that assert, then the assert in `CalculateCluster` checking that `txids.size() == cluster.size()` will crash the node due to `cluster` being an empty vector",
      "created_at": "2022-12-06T13:40:15Z",
      "updated_at": "2022-12-06T15:06:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1040986669",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040986669"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 654,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 533,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041047298",
      "pull_request_review_id": 1206585147,
      "id": 1041047298,
      "node_id": "PRRC_kwDOABII584-DR8C",
      "diff_hunk": "@@ -0,0 +1,220 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It could be my own unfamiliarity with the mempool, but I'm not really sure what is happening here. To check my understanding:\r\n\r\n`outpoints` here refers to a set of unconfirmed UTXOs that our wallet would like to spend, meaning they are tx outputs. `GetConflictTx` checks if the outpoint exists in `mapNextTx`, which means it is the `prevout` (or input) into another tx in the mempool. If there is another transaction in the mempool spending one of these outputs, we put the tx which is spending the outpointt into `to_be_replaced`. This is because we plan to construct a transaction which would then replace the conflicting tx, so we want to ignore doing anything with the conflicting txs for now?\r\n\r\nIt might be helpful to be a little more explicit than just `outpoints` (or write a more detailed comment for the function) as this can refer to either `outputs` or `prevouts`, which in this context makes things confusing to follow.",
      "created_at": "2022-12-06T14:28:37Z",
      "updated_at": "2022-12-06T15:06:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1041047298",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041047298"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 27,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041231862",
      "pull_request_review_id": 1206979066,
      "id": 1041231862,
      "node_id": "PRRC_kwDOABII584-D-_2",
      "diff_hunk": "@@ -0,0 +1,220 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "in_reply_to_id": 1041047298,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> To check my understanding:\r\n\r\n> outpoints here refers to a set of unconfirmed UTXOs that our wallet would like to spend, meaning they are tx outputs. \r\n\r\nThey are not necessarily unconfirmed UTXOs, just some specified outpoints/prevouts. They may refer to confirmed or unconfirmed UTXOs. They may refer to outputs that the node doesn't think exist.\r\n\r\n> GetConflictTx checks if the outpoint exists in mapNextTx, which means it is the prevout (or input) into another tx in the mempool. If there is another transaction in the mempool spending one of these outputs, we put the tx which is spending the outpointt into to_be_replaced.\r\n\r\ncorrect, `GetConflictTx` gives you another mempool transaction that spends the same tx.\r\n\r\n> This is because we plan to construct a transaction which would then replace the conflicting tx, so we want to ignore doing anything with the conflicting txs for now?\r\n\r\nWe want to ensure we provide a bump fee for this UTXO, but ensure we calculate the bump fees *exluding the to-be-replaced transaction(s)*. Once they're replaced, they won't be there to bump their ancestors. So if we're replacing the child of a CPFP (e.g. to increase the bump even more), we want the correct fee to bump that parent *without* the original child there.",
      "created_at": "2022-12-06T17:01:08Z",
      "updated_at": "2022-12-06T17:16:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1041231862",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041231862"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 27,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041233721",
      "pull_request_review_id": 1206979066,
      "id": 1041233721,
      "node_id": "PRRC_kwDOABII584-D_c5",
      "diff_hunk": "@@ -952,6 +953,24 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    std::vector<txiter> ret;\n+    ret.reserve(txids.size());\n+    for (const auto& txid : txids) {\n+        const auto it = GetIter(txid);\n+        assert(it);",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "995107782a1a512811d54f7abf29249f351a7cbf",
      "in_reply_to_id": 1040968456,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah good catch, that `else` branch is dead since the assert would hit.",
      "created_at": "2022-12-06T17:02:49Z",
      "updated_at": "2022-12-06T17:16:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1041233721",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041233721"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 962,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041235267",
      "pull_request_review_id": 1206979066,
      "id": 1041235267,
      "node_id": "PRRC_kwDOABII584-D_1D",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 52,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028296326,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's true, -1 makes sense. Though note this is an approximation rather than an exact reservation. It may overestimate because transactions may share ancestors/descendants, and may underestimate because the cluster may include more than just ancestors and descendants.",
      "created_at": "2022-12-06T17:04:26Z",
      "updated_at": "2022-12-06T17:16:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1041235267",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041235267"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1224,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041237868",
      "pull_request_review_id": 1206979066,
      "id": 1041237868,
      "node_id": "PRRC_kwDOABII584-EAds",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {\n+            const auto curr = cluster[i];\n+            for (const CTxMemPoolEntry& parent_entry : curr->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    cluster.push_back(parent_it);\n+                    // we still need to process this\n+                    ++unprocessed_count;\n+                }\n+            }\n+            for (const CTxMemPoolEntry& child_entry : curr->GetMemPoolChildrenConst()) {\n+                const auto child_it = mapTx.iterator_to(child_entry);\n+                if (!visited(child_it)) {\n+                    cluster.push_back(child_it);\n+                    // we still need to process this\n+                    ++unprocessed_count;\n+                }\n+            }",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 77,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028438751,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is this equivalent, given it's changing from `GetMemPoolChildrenConst` to `GetMemPoolChildren` and getting a mutable reference to `m_parents`?",
      "created_at": "2022-12-06T17:07:05Z",
      "updated_at": "2022-12-06T17:16:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1041237868",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041237868"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 1233,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1221,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041977851",
      "pull_request_review_id": 1208090285,
      "id": 1041977851,
      "node_id": "PRRC_kwDOABII584-G1H7",
      "diff_hunk": "@@ -0,0 +1,220 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "in_reply_to_id": 1041047298,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, this explanation really helps!\r\n\r\n> They are not necessarily unconfirmed UTXOs, just some specified outpoints/prevouts. They may refer to confirmed or unconfirmed UTXOs. They may refer to outputs that the node doesn't think exist.\r\n\r\nIs it correct to say these `outpoints` are intended to be spent in a new transaction, as in the wallet has a set of UTXOs that it wants to spend in `TxB` where `TxB` can be a replacement of an already existing `TxA` or it can be an entirely new tx? From there, these `outpoints` can be a mix of confirmed/unconfirmed, but it's assumed at least one outpoint is unconfirmed\r\n\r\n",
      "created_at": "2022-12-07T09:41:51Z",
      "updated_at": "2022-12-07T09:41:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1041977851",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041977851"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 27,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1042064307",
      "pull_request_review_id": 1208211679,
      "id": 1042064307,
      "node_id": "PRRC_kwDOABII584-HKOz",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 79,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1040297609,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also noticed this and was a bit confused. In the case where `remove` is true, `cache_descendants` never gets added to the `descendants_by_txid` map, which is fine. In the case where `remove` is false, then `txid` should be in `entries_by_txid`, so it will get added to `cache_descendants`, along with all of `descendants`.\r\n\r\nSo what gets added to `descendants_by_txid` is `txidA: [txidA, txidB, txidC...]`, basically the parent + all of its children, which seems incorrect?",
      "created_at": "2022-12-07T10:59:14Z",
      "updated_at": "2022-12-07T10:59:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1042064307",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1042064307"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1042205597",
      "pull_request_review_id": 1208421851,
      "id": 1042205597,
      "node_id": "PRRC_kwDOABII584-Hsud",
      "diff_hunk": "@@ -0,0 +1,220 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "in_reply_to_id": 1041047298,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Another thought I had while looking at this: we check if an `outpoint` has any conflicting spends in the mempool before we check if the outpoint itself is in the mempool. It seems we are inferring that the `outpoint` is in the mempool, otherwise it would not be present in `mapNextTx`. Is this the safest way to do this? Seems fine because `mapNextTx` is updated every time a tx is removed from the mempool, but figured I'd ask anyway in case there is a race condition / code path I'm not seeing which could make this unreliable in an edge case",
      "created_at": "2022-12-07T13:29:45Z",
      "updated_at": "2022-12-07T13:29:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1042205597",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1042205597"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 27,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1042441489",
      "pull_request_review_id": 1208766532,
      "id": 1042441489,
      "node_id": "PRRC_kwDOABII584-ImUR",
      "diff_hunk": "@@ -0,0 +1,220 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "in_reply_to_id": 1041047298,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Is it correct to say these outpoints are intended to be spent in a new transaction, as in the wallet has a set of UTXOs that it wants to spend in TxB where TxB can be a replacement of an already existing TxA or it can be an entirely new tx?\r\n\r\nYes, exactly. If we're constructing `MiniMiner` to `CalculateBumpFees()`, these outpoints are basically all the coins owned by the wallet, i.e. `AvailableCoins`. If we're constructing `MiniMiner` to `CalculateTotalBumpFees()`, these are the outpoints we've decided to use to fund txB.\r\n\r\n> From there, these outpoints can be a mix of confirmed/unconfirmed, but it's assumed at least one outpoint is unconfirmed\r\n\r\nNot exactly. They could all be confirmed / nonexistent - in that case this constructor will end up not constructing any `MockMempoolEntry`s. When you call `CalculateBumpFees()` afterwards, it should just return the already-existing map of all-0 bump fees. This is the first test case in miniminer_tests.cpp.",
      "created_at": "2022-12-07T16:41:17Z",
      "updated_at": "2022-12-07T16:41:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1042441489",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1042441489"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 27,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1042478969",
      "pull_request_review_id": 1208822643,
      "id": 1042478969,
      "node_id": "PRRC_kwDOABII584-Ivd5",
      "diff_hunk": "@@ -0,0 +1,220 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 115,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "in_reply_to_id": null,
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "what is the significance here? why not just have `return a_feerate >= b_feerate` or something like that?",
      "created_at": "2022-12-07T17:16:13Z",
      "updated_at": "2022-12-07T17:16:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1042478969",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1042478969"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049908143",
      "pull_request_review_id": 1187107175,
      "id": 1049908143,
      "node_id": "PRRC_kwDOABII584-lFOv",
      "diff_hunk": "@@ -952,6 +953,24 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    std::vector<txiter> ret;",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1027114058,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, fixed",
      "created_at": "2022-12-15T16:55:14Z",
      "updated_at": "2023-01-31T21:48:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1049908143",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049908143"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 961,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049921123",
      "pull_request_review_id": 1187107175,
      "id": 1049921123,
      "node_id": "PRRC_kwDOABII584-lIZj",
      "diff_hunk": "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.\n+    //\n+    //  This includes fee-bumping in RBFs. If an outpoint conflicts with another transaction in the",
      "path": "src/interfaces/chain.h",
      "position": null,
      "original_position": 16,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1027113476,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, I've updated the comment.",
      "created_at": "2022-12-15T17:04:23Z",
      "updated_at": "2023-01-31T21:48:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1049921123",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049921123"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 228,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049985921",
      "pull_request_review_id": 1187107175,
      "id": 1049985921,
      "node_id": "PRRC_kwDOABII584-lYOB",
      "diff_hunk": "@@ -952,6 +953,24 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    std::vector<txiter> ret;\n+    ret.reserve(txids.size());\n+    for (const auto& txid : txids) {\n+        const auto it = GetIter(txid);\n+        assert(it);\n+        if (it) {\n+            ret.push_back(*it);\n+        } else {\n+            // return empty vector to let the caller know this failed.\n+            std::vector<txiter> empty_vector;\n+            return empty_vector;\n+        }",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028280212,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, removed the assert and simplified as suggested by @stickies-v ",
      "created_at": "2022-12-15T18:06:52Z",
      "updated_at": "2023-01-31T21:48:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1049985921",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049985921"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 963,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 969,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049990387",
      "pull_request_review_id": 1187107175,
      "id": 1049990387,
      "node_id": "PRRC_kwDOABII584-lZTz",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 52,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028296326,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's true, but since this is just allocating enough space for the iterators we are adding to the vector later, I don't think having one slot more than we might need is going to cause any issues.",
      "created_at": "2022-12-15T18:12:08Z",
      "updated_at": "2023-01-31T21:48:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1049990387",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049990387"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1224,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049993532",
      "pull_request_review_id": 1187107175,
      "id": 1049993532,
      "node_id": "PRRC_kwDOABII584-laE8",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028322453,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I do not understand this question. Could you elaborate?",
      "created_at": "2022-12-15T18:15:30Z",
      "updated_at": "2023-01-31T21:48:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1049993532",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049993532"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1169,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049997727",
      "pull_request_review_id": 1187107175,
      "id": 1049997727,
      "node_id": "PRRC_kwDOABII584-lbGf",
      "diff_hunk": "@@ -694,6 +701,9 @@ class CTxMemPool\n                                    std::string& errString,\n                                    bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Get entire list of connected transactions for all transactions in txids. */",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 22,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028440069,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added an `@pre` statement",
      "created_at": "2022-12-15T18:20:17Z",
      "updated_at": "2023-01-31T21:48:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1049997727",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049997727"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 704,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049999464",
      "pull_request_review_id": 1187107175,
      "id": 1049999464,
      "node_id": "PRRC_kwDOABII584-lbho",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 60,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028330615,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Updated the name to your suggestion",
      "created_at": "2022-12-15T18:22:17Z",
      "updated_at": "2023-01-31T21:48:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1049999464",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049999464"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1232,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050001999",
      "pull_request_review_id": 1187107175,
      "id": 1050001999,
      "node_id": "PRRC_kwDOABII584-lcJP",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 59,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028377597,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Updated the comment to correct",
      "created_at": "2022-12-15T18:25:10Z",
      "updated_at": "2023-01-31T21:48:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050001999",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050001999"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1231,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050061256",
      "pull_request_review_id": 1187107175,
      "id": 1050061256,
      "node_id": "PRRC_kwDOABII584-lqnI",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {\n+            const auto curr = cluster[i];\n+            for (const CTxMemPoolEntry& parent_entry : curr->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    cluster.push_back(parent_it);\n+                    // we still need to process this\n+                    ++unprocessed_count;\n+                }\n+            }\n+            for (const CTxMemPoolEntry& child_entry : curr->GetMemPoolChildrenConst()) {\n+                const auto child_it = mapTx.iterator_to(child_entry);\n+                if (!visited(child_it)) {\n+                    cluster.push_back(child_it);\n+                    // we still need to process this\n+                    ++unprocessed_count;\n+                }\n+            }",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 77,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028438751,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "TODO: Tried this, but it broke all sorts of things, gonna revisit later. ",
      "created_at": "2022-12-15T19:36:34Z",
      "updated_at": "2023-01-31T21:48:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050061256",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050061256"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 1233,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1221,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050073812",
      "pull_request_review_id": 1187107175,
      "id": 1050073812,
      "node_id": "PRRC_kwDOABII584-ltrU",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 24,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028446649,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sure, fixed here and in other instances",
      "created_at": "2022-12-15T19:49:20Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050073812",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050073812"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050088372",
      "pull_request_review_id": 1187107175,
      "id": 1050088372,
      "node_id": "PRRC_kwDOABII584-lxO0",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 38,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028448913,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since this is a reference on an object held in mempool, and we have a lock on mempool, I think this is not necessary.",
      "created_at": "2022-12-15T20:07:13Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050088372",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050088372"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050089826",
      "pull_request_review_id": 1187107175,
      "id": 1050089826,
      "node_id": "PRRC_kwDOABII584-lxli",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 25,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028449731,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`fee_with_ancestors` and `vsize_with_ancestors` get set directly in some code of mini_miner.cpp, so I think they cannot be private without also adding setters. I did make `vsize_individual` private",
      "created_at": "2022-12-15T20:08:58Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050089826",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050089826"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 23,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050105884",
      "pull_request_review_id": 1187107175,
      "id": 1050105884,
      "node_id": "PRRC_kwDOABII584-l1gc",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 19,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028451302,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, made the two individuals const",
      "created_at": "2022-12-15T20:27:48Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050105884",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050105884"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050263740",
      "pull_request_review_id": 1220130696,
      "id": 1050263740,
      "node_id": "PRRC_kwDOABII584-mcC8",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 159,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The benchmark (part of [my branch](https://github.com/LarryRuane/bitcoin/commits/2022-11-pr26152-refactor)) experienced a near-infinite loop without this change. The reason is that the benchmark test mempool has such a high degree of fan-out and fan-in that a single transaction could be added to the `to_process` set over and over. Of course, std::set doesn't allow duplicates, but I added some debug logging that shows the same tx being added, removed, processed, then added again, many times. This change fixed the problem completely.\r\n```suggestion\r\n                    if (!ancestors.count(parent_it)) {\r\n                        to_process.insert(parent_it);\r\n                        ancestors.insert(parent_it);\r\n                    }\r\n```",
      "created_at": "2022-12-16T00:36:13Z",
      "updated_at": "2022-12-16T06:31:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050263740",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050263740"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 158,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050281965",
      "pull_request_review_id": 1220130696,
      "id": 1050281965,
      "node_id": "PRRC_kwDOABII584-mgft",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());\n+            assert(it != descendant_set_by_txid.end());\n+            for (const auto& descendant : it->second) {\n+                descendant->second.vsize_with_ancestors -= anc->second.GetTxSize();\n+                descendant->second.fee_with_ancestors -= anc->second.GetModifiedFee();\n+            }\n+        }\n+        DeleteAncestorPackage(ancestors);\n+        assert(entries.size() == entries_by_txid.size());\n+    }\n+}\n+\n+std::map<COutPoint, CAmount> MiniMiner::CalculateBumpFees(const CFeeRate& target_feerate)\n+{\n+    // Build a block template until the target feerate is hit.\n+    BuildMockTemplate(target_feerate);\n+    assert(in_block.empty() || CFeeRate(total_fees, total_vsize) >= target_feerate);\n+\n+    // Each transaction that \"made it into the block\" has a bumpfee of 0, i.e. they are part of an\n+    // ancestor package that exceeds the target feerate and don't need to be bumped.\n+    for (const auto& txid : in_block) {\n+        // Not all of the block transactions were necessarily requested.\n+        auto it = outpoints_needed_by_txid.find(txid);\n+        if (it != outpoints_needed_by_txid.end()) {\n+            for (const auto& outpoint : it->second) {\n+                bump_fees.emplace(std::make_pair(outpoint, 0));\n+            }\n+            outpoints_needed_by_txid.erase(it);\n+        }\n+    }\n+    // For each transaction that remains, the bumpfee is the cost to raise it and its ancestors\n+    // to the target feerate, target_feerate * ancestor_size - ancestor_fees\n+    for (const auto& [txid, outpoints] : outpoints_needed_by_txid) {\n+        auto it = entries_by_txid.find(txid);\n+        assert(it != entries_by_txid.end());\n+        if (it != entries_by_txid.end()) {\n+            assert(target_feerate.GetFee(it->second.GetSizeWithAncestors()) > it->second.GetModFeesWithAncestors());\n+            const CAmount bump_fee{target_feerate.GetFee(it->second.GetSizeWithAncestors())\n+                                   - it->second.GetModFeesWithAncestors()};\n+            assert(bump_fee >= 0);\n+            for (const auto& outpoint : outpoints) {\n+                bump_fees.emplace(std::make_pair(outpoint, bump_fee));\n+            }\n+        }\n+    }\n+    return this->bump_fees;\n+}\n+\n+CAmount MiniMiner::CalculateTotalBumpFees(const CFeeRate& target_feerate)\n+{\n+    // Build a block template until the target feerate is hit.\n+    BuildMockTemplate(target_feerate);\n+    assert(in_block.empty() || CFeeRate(total_fees, total_vsize) >= target_feerate);\n+\n+    // All remaining ancestors that are not part of in_block must be bumped, but no other relatives (e.g. siblings, niblings, …)\n+    std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+    std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+\n+    for (const auto& outpoint : requested_outpoints) {\n+        const auto& txid = outpoint.hash;\n+        // Skip any ancestors that have a higher minerscore already\n+        if (in_block.find(txid) != in_block.end()) continue;\n+        auto iter = entries_by_txid.find(outpoint.hash);\n+        assert(iter != entries_by_txid.end());\n+        to_process.insert(iter);\n+        ancestors.insert(iter);\n+    }\n+\n+    while (!to_process.empty()) {\n+        auto iter = to_process.begin();\n+        assert(iter != to_process.end());\n+        const CTransaction& tx = (*iter)->second.GetTx();\n+        for (const auto& input : tx.vin) {\n+            if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                to_process.insert(parent_it);\n+                ancestors.insert(parent_it);",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 249,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same change as above -- this is _much_ more efficient with a large cluster, for example, running the benchmark.\r\n```suggestion\r\n                if (!ancestors.count(parent_it)) {\r\n                    to_process.insert(parent_it);\r\n                    ancestors.insert(parent_it);\r\n                }\r\n```",
      "created_at": "2022-12-16T01:14:58Z",
      "updated_at": "2022-12-16T06:31:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050281965",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050281965"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 248,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 356,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050360878",
      "pull_request_review_id": 1220130696,
      "id": 1050360878,
      "node_id": "PRRC_kwDOABII584-mzwu",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());\n+            assert(it != descendant_set_by_txid.end());",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 175,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n            // each entry's descendant set includes itself\r\n            assert(it != descendant_set_by_txid.end());\r\n```\r\n(it took me a little while to figure out why this assertion is valid)",
      "created_at": "2022-12-16T04:28:49Z",
      "updated_at": "2022-12-16T06:31:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050360878",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050360878"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050402228",
      "pull_request_review_id": 1220130696,
      "id": 1050402228,
      "node_id": "PRRC_kwDOABII584-m920",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());\n+            assert(it != descendant_set_by_txid.end());\n+            for (const auto& descendant : it->second) {\n+                descendant->second.vsize_with_ancestors -= anc->second.GetTxSize();\n+                descendant->second.fee_with_ancestors -= anc->second.GetModifiedFee();",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 178,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You may want to assert that these don't go negative, I would actually do it before the decrement, like this:\r\n```\r\nassert(descendant->second.vsize_with_ancestors >= anc->second.GetTxSize());\r\ndescendant->second.vsize_with_ancestors -= anc->second.GetTxSize();\r\n```",
      "created_at": "2022-12-16T06:11:42Z",
      "updated_at": "2022-12-16T06:31:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050402228",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050402228"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 177,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050404621",
      "pull_request_review_id": 1220130696,
      "id": 1050404621,
      "node_id": "PRRC_kwDOABII584-m-cN",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 79,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Something more important: this `emplace_back()` shouldn't be here at all, because each mempool entry is a member of its own descendants' list. So this \"main\" transaction gets added to `cached_descendants` below. This was causing the `fee_with_ancestors` and `vsize_with_ancestors` to go negative near the end of `BuildMockTemplate()` below.",
      "created_at": "2022-12-16T06:17:22Z",
      "updated_at": "2022-12-16T06:31:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050404621",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050404621"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050405337",
      "pull_request_review_id": 1220130696,
      "id": 1050405337,
      "node_id": "PRRC_kwDOABII584-m-nZ",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 174,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "simpler:\r\n```suggestion\r\n            auto it = descendant_set_by_txid.find(anc->first);\r\n```",
      "created_at": "2022-12-16T06:19:04Z",
      "updated_at": "2022-12-16T06:31:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050405337",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050405337"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050406026",
      "pull_request_review_id": 1220130696,
      "id": 1050406026,
      "node_id": "PRRC_kwDOABII584-m-yK",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 171,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n            in_block.insert(anc->first);\r\n```\r\n(functionally the same, just simpler)",
      "created_at": "2022-12-16T06:20:37Z",
      "updated_at": "2022-12-16T06:31:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050406026",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050406026"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050420893",
      "pull_request_review_id": 1220353810,
      "id": 1050420893,
      "node_id": "PRRC_kwDOABII584-nCad",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 79,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1040297609,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@josibake \r\n> ... which seems incorrect?\r\n\r\nNo, I think it's a convention in the strange Land of Mempool that a transaction's ancestor and descendant lists both include the transaction itself. This relates directly to my [comment](https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050404621) elsewhere that the `emplace_back()` should be removed; as it's currently written, the list would be: `txidA: [txidA, txidA, txidB, txidC...]`. This later causes a major accounting problem!",
      "created_at": "2022-12-16T06:51:14Z",
      "updated_at": "2022-12-16T06:51:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050420893",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050420893"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1055855643",
      "pull_request_review_id": 1187107175,
      "id": 1055855643,
      "node_id": "PRRC_kwDOABII584-7xQb",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;\n+\n+    // Set once per lifetime, fill in during initialization.\n+    // txids of to-be-replaced transactions\n+    std::set<uint256> to_be_replaced;\n+\n+    // After using the outpoints to figure out which transactions are to be replaced, we can just\n+    // work with txids (each outpoint from a single tx should have the same bumpfee independently).\n+    // Cache which outpoint are needed for each tx so we don't have to look up all the outputs.\n+    // Excludes to-be-replaced and unavailable transactions (set to 0).\n+    std::map<uint256, std::vector<COutPoint>> outpoints_needed_by_txid;\n+\n+    // What we're trying to calculate.\n+    std::map<COutPoint, CAmount> bump_fees;\n+\n+    // The constructed block template\n+    std::set<uint256> in_block;\n+\n+    // Information on the current status of the block\n+    CAmount total_fees{0};\n+    int64_t total_vsize{0};\n+\n+    /** Main data structure holding the entries, can be indexed by txid */\n+    std::map<uint256, MockMempoolEntry> entries_by_txid;\n+    using MockEntryMap = decltype(entries_by_txid);",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 82,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028460084,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I could not get this to work, could you elaborate what you propose?",
      "created_at": "2022-12-22T21:15:24Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1055855643",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1055855643"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1055856418",
      "pull_request_review_id": 1187107175,
      "id": 1055856418,
      "node_id": "PRRC_kwDOABII584-7xci",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 55,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028461644,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Mh, I'll consider it, but it's also an easy change to make later.",
      "created_at": "2022-12-22T21:16:38Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1055856418",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1055856418"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082932473",
      "pull_request_review_id": 1187107175,
      "id": 1082932473,
      "node_id": "PRRC_kwDOABII585AjDz5",
      "diff_hunk": "@@ -952,6 +953,24 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    std::vector<txiter> ret;\n+    ret.reserve(txids.size());\n+    for (const auto& txid : txids) {\n+        const auto it = GetIter(txid);",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028283266,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed, thanks",
      "created_at": "2023-01-20T18:43:18Z",
      "updated_at": "2023-01-31T21:48:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082932473",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082932473"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 961,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082941287",
      "pull_request_review_id": 1187107175,
      "id": 1082941287,
      "node_id": "PRRC_kwDOABII585AjF9n",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;\n+\n+    // Set once per lifetime, fill in during initialization.\n+    // txids of to-be-replaced transactions\n+    std::set<uint256> to_be_replaced;\n+\n+    // After using the outpoints to figure out which transactions are to be replaced, we can just\n+    // work with txids (each outpoint from a single tx should have the same bumpfee independently).\n+    // Cache which outpoint are needed for each tx so we don't have to look up all the outputs.\n+    // Excludes to-be-replaced and unavailable transactions (set to 0).\n+    std::map<uint256, std::vector<COutPoint>> outpoints_needed_by_txid;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 68,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028482615,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, I followed your suggestion",
      "created_at": "2023-01-20T18:54:28Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082941287",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082941287"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082942809",
      "pull_request_review_id": 1187107175,
      "id": 1082942809,
      "node_id": "PRRC_kwDOABII585AjGVZ",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 58,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028491577,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I do not know from the top of my head, I will need to look more into this",
      "created_at": "2023-01-20T18:56:30Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082942809",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082942809"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082947081",
      "pull_request_review_id": 1187107175,
      "id": 1082947081,
      "node_id": "PRRC_kwDOABII585AjHYJ",
      "diff_hunk": "@@ -0,0 +1,220 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "in_reply_to_id": 1029977800,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You are right, I could not place the comment either and removed it.",
      "created_at": "2023-01-20T19:02:15Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082947081",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082947081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082947861",
      "pull_request_review_id": 1187107175,
      "id": 1082947861,
      "node_id": "PRRC_kwDOABII585AjHkV",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1035216664,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, I used your suggestion.",
      "created_at": "2023-01-20T19:03:24Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082947861",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082947861"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082948093",
      "pull_request_review_id": 1187107175,
      "id": 1082948093,
      "node_id": "PRRC_kwDOABII585AjHn9",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());\n+            assert(it != descendant_set_by_txid.end());\n+            for (const auto& descendant : it->second) {\n+                descendant->second.vsize_with_ancestors -= anc->second.GetTxSize();\n+                descendant->second.fee_with_ancestors -= anc->second.GetModifiedFee();\n+            }\n+        }\n+        DeleteAncestorPackage(ancestors);\n+        assert(entries.size() == entries_by_txid.size());\n+    }\n+}\n+\n+std::map<COutPoint, CAmount> MiniMiner::CalculateBumpFees(const CFeeRate& target_feerate)\n+{\n+    // Build a block template until the target feerate is hit.\n+    BuildMockTemplate(target_feerate);\n+    assert(in_block.empty() || CFeeRate(total_fees, total_vsize) >= target_feerate);\n+\n+    // Each transaction that \"made it into the block\" has a bumpfee of 0, i.e. they are part of an\n+    // ancestor package that exceeds the target feerate and don't need to be bumped.\n+    for (const auto& txid : in_block) {\n+        // Not all of the block transactions were necessarily requested.\n+        auto it = outpoints_needed_by_txid.find(txid);\n+        if (it != outpoints_needed_by_txid.end()) {\n+            for (const auto& outpoint : it->second) {\n+                bump_fees.emplace(std::make_pair(outpoint, 0));\n+            }\n+            outpoints_needed_by_txid.erase(it);\n+        }\n+    }\n+    // For each transaction that remains, the bumpfee is the cost to raise it and its ancestors\n+    // to the target feerate, target_feerate * ancestor_size - ancestor_fees\n+    for (const auto& [txid, outpoints] : outpoints_needed_by_txid) {\n+        auto it = entries_by_txid.find(txid);\n+        assert(it != entries_by_txid.end());\n+        if (it != entries_by_txid.end()) {\n+            assert(target_feerate.GetFee(it->second.GetSizeWithAncestors()) > it->second.GetModFeesWithAncestors());\n+            const CAmount bump_fee{target_feerate.GetFee(it->second.GetSizeWithAncestors())\n+                                   - it->second.GetModFeesWithAncestors()};\n+            assert(bump_fee >= 0);\n+            for (const auto& outpoint : outpoints) {\n+                bump_fees.emplace(std::make_pair(outpoint, bump_fee));\n+            }\n+        }\n+    }\n+    return this->bump_fees;",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 219,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1035217598,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2023-01-20T19:03:43Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082948093",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082948093"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082950297",
      "pull_request_review_id": 1187107175,
      "id": 1082950297,
      "node_id": "PRRC_kwDOABII585AjIKZ",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1035218401,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, I removed the unnecessary `std::make_pair` throughout",
      "created_at": "2023-01-20T19:06:51Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082950297",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082950297"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082976081",
      "pull_request_review_id": 1187107175,
      "id": 1082976081,
      "node_id": "PRRC_kwDOABII585AjOdR",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1035234823,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, looks great",
      "created_at": "2023-01-20T19:39:49Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082976081",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082976081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 53,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082977273",
      "pull_request_review_id": 1187107175,
      "id": 1082977273,
      "node_id": "PRRC_kwDOABII585AjOv5",
      "diff_hunk": "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that",
      "path": "src/interfaces/chain.h",
      "position": null,
      "original_position": 7,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1035269211,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good idea, clarified the example",
      "created_at": "2023-01-20T19:41:25Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082977273",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082977273"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082978994",
      "pull_request_review_id": 1187107175,
      "id": 1082978994,
      "node_id": "PRRC_kwDOABII585AjPKy",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;\n+\n+    // Set once per lifetime, fill in during initialization.\n+    // txids of to-be-replaced transactions\n+    std::set<uint256> to_be_replaced;\n+\n+    // After using the outpoints to figure out which transactions are to be replaced, we can just\n+    // work with txids (each outpoint from a single tx should have the same bumpfee independently).\n+    // Cache which outpoint are needed for each tx so we don't have to look up all the outputs.\n+    // Excludes to-be-replaced and unavailable transactions (set to 0).",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 67,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1035318488,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Adopted your phrasing of the comment",
      "created_at": "2023-01-20T19:43:48Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082978994",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082978994"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 64,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082979907",
      "pull_request_review_id": 1187107175,
      "id": 1082979907,
      "node_id": "PRRC_kwDOABII585AjPZD",
      "diff_hunk": "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.\n+    //\n+    //  This includes fee-bumping in RBFs. If an outpoint conflicts with another transaction in the\n+    //  mempool, it is assumed that the goal is to replace that transaction. As such, the\n+    //  calculation will exclude the to-be-replaced transaction, but will include the fee-bumping\n+    //  cost. If bump fees of descendants of the to-be-replaced transaction are requested, the value\n+    //  will be 0. Fee-related RBF rules are not included as they are logically distinct.\n+    //\n+    //  Any outpoints that are otherwise unavailable from the mempool (e.g. UTXOs from confirmed\n+    //  transactions or transactions not yet broadcast by the wallet) are given a bump fee of 0.\n+    //\n+    //  If multiple outpoints come from the same transaction (which would be very rare because\n+    //  it means that one transaction has multiple change outputs or paid the same wallet using multiple\n+    //  outputs in the same transaction) or have shared ancestry, the bump fees are calculated\n+    //  independently, i.e. as if only one of them is spent. This may result in double-fee-bumping. This\n+    //  caveat can be rectified per use of the sister-function CalculateTotalBumpFees(…).\n+    virtual std::map<COutPoint, CAmount> CalculateBumpFees(const std::vector<COutPoint>& outpoints, const CFeeRate& target_feerate) = 0;\n+\n+    //! Calculate the shared bump fees for a given set of outpoints per the\n+    //  same strategy as in CalculateBumpFees(…).  Other than the above call,",
      "path": "src/interfaces/chain.h",
      "position": null,
      "original_position": 33,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1035330287,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sgtm, thanks",
      "created_at": "2023-01-20T19:45:06Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082979907",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082979907"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 245,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082981470",
      "pull_request_review_id": 1187107175,
      "id": 1082981470,
      "node_id": "PRRC_kwDOABII585AjPxe",
      "diff_hunk": "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.",
      "path": "src/interfaces/chain.h",
      "position": null,
      "original_position": 14,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1035335097,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This refers to transactions already bumped by other transactions in our mempool, not bumped by our calculation of bump fees. I've amended the phrase to clarify.",
      "created_at": "2023-01-20T19:47:13Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082981470",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082981470"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 226,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083039335",
      "pull_request_review_id": 1187107175,
      "id": 1083039335,
      "node_id": "PRRC_kwDOABII585Ajd5n",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 68,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1035354396,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sounds right to me",
      "created_at": "2023-01-20T20:52:42Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1083039335",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083039335"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 66,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083039809",
      "pull_request_review_id": 1187107175,
      "id": 1083039809,
      "node_id": "PRRC_kwDOABII585AjeBB",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 97,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1035363601,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good idea",
      "created_at": "2023-01-20T20:53:24Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1083039809",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083039809"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083050607",
      "pull_request_review_id": 1187107175,
      "id": 1083050607,
      "node_id": "PRRC_kwDOABII585Ajgpv",
      "diff_hunk": "@@ -80,7 +80,18 @@ static feebumper::Result CheckFeeRate(const CWallet& wallet, const CWalletTx& wt\n         return feebumper::Result::WALLET_ERROR;\n     }\n \n-    CAmount new_total_fee = newFeerate.GetFee(maxTxSize);\n+    std::vector<COutPoint> reused_inputs;\n+    for (const CTxIn& txin : wtx.tx->vin) {\n+        reused_inputs.push_back(txin.prevout);\n+    }\n+\n+    std::map<COutPoint, CAmount> bump_fees = wallet.chain().CalculateBumpFees(reused_inputs, newFeerate);",
      "path": "src/wallet/feebumper.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1026970423,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, in fact not accounting for overlapping ancestries here might have been a bug.",
      "created_at": "2023-01-20T21:06:56Z",
      "updated_at": "2023-01-31T21:48:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1083050607",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083050607"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083052189",
      "pull_request_review_id": 1187107175,
      "id": 1083052189,
      "node_id": "PRRC_kwDOABII585AjhCd",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 16,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1035575327,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added before the constructor",
      "created_at": "2023-01-20T21:08:35Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1083052189",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083052189"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083055314",
      "pull_request_review_id": 1187107175,
      "id": 1083055314,
      "node_id": "PRRC_kwDOABII585AjhzS",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 17,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1035576612,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Renamed to `MiniMinerMempoolEntry`, although I don't feel strongly about the name.",
      "created_at": "2023-01-20T21:13:11Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1083055314",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083055314"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083073942",
      "pull_request_review_id": 1187107175,
      "id": 1083073942,
      "node_id": "PRRC_kwDOABII585AjmWW",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 20,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1037673418,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for diving in this deeply, that sounds correct to me.",
      "created_at": "2023-01-20T21:38:56Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1083073942",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083073942"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083079136",
      "pull_request_review_id": 1187107175,
      "id": 1083079136,
      "node_id": "PRRC_kwDOABII585Ajnng",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 142,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1038495307,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good catch, fixed",
      "created_at": "2023-01-20T21:47:34Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1083079136",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083079136"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084555371",
      "pull_request_review_id": 1187107175,
      "id": 1084555371,
      "node_id": "PRRC_kwDOABII585ApQBr",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 79,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1040297609,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Note to self: TODO",
      "created_at": "2023-01-23T21:08:54Z",
      "updated_at": "2023-01-31T21:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1084555371",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084555371"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084559378",
      "pull_request_review_id": 1187107175,
      "id": 1084559378,
      "node_id": "PRRC_kwDOABII585ApRAS",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());\n+            assert(it != descendant_set_by_txid.end());\n+            for (const auto& descendant : it->second) {\n+                descendant->second.vsize_with_ancestors -= anc->second.GetTxSize();\n+                descendant->second.fee_with_ancestors -= anc->second.GetModifiedFee();\n+            }\n+        }\n+        DeleteAncestorPackage(ancestors);\n+        assert(entries.size() == entries_by_txid.size());\n+    }\n+}\n+\n+std::map<COutPoint, CAmount> MiniMiner::CalculateBumpFees(const CFeeRate& target_feerate)\n+{\n+    // Build a block template until the target feerate is hit.\n+    BuildMockTemplate(target_feerate);\n+    assert(in_block.empty() || CFeeRate(total_fees, total_vsize) >= target_feerate);\n+\n+    // Each transaction that \"made it into the block\" has a bumpfee of 0, i.e. they are part of an\n+    // ancestor package that exceeds the target feerate and don't need to be bumped.",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 193,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1040298956,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, corrected",
      "created_at": "2023-01-23T21:12:40Z",
      "updated_at": "2023-01-31T21:48:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1084559378",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084559378"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 193,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084646082",
      "pull_request_review_id": 1187107175,
      "id": 1084646082,
      "node_id": "PRRC_kwDOABII585ApmLC",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 58,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1040561129,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, yes, they should.",
      "created_at": "2023-01-23T22:42:59Z",
      "updated_at": "2023-01-31T21:48:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1084646082",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084646082"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1092491521",
      "pull_request_review_id": 1187107175,
      "id": 1092491521,
      "node_id": "PRRC_kwDOABII585BHhkB",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 58,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1040561129,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Renamed all MiniMiner class variables to be prefixed with `m_`",
      "created_at": "2023-01-31T21:18:31Z",
      "updated_at": "2023-01-31T21:48:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1092491521",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1092491521"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1092493616",
      "pull_request_review_id": 1187107175,
      "id": 1092493616,
      "node_id": "PRRC_kwDOABII585BHiEw",
      "diff_hunk": "@@ -952,6 +953,24 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    std::vector<txiter> ret;\n+    ret.reserve(txids.size());\n+    for (const auto& txid : txids) {\n+        const auto it = GetIter(txid);\n+        assert(it);",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "995107782a1a512811d54f7abf29249f351a7cbf",
      "in_reply_to_id": 1040968456,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2023-01-31T21:21:07Z",
      "updated_at": "2023-01-31T21:48:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1092493616",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1092493616"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 962,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1092494674",
      "pull_request_review_id": 1187107175,
      "id": 1092494674,
      "node_id": "PRRC_kwDOABII585BHiVS",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "995107782a1a512811d54f7abf29249f351a7cbf",
      "in_reply_to_id": 1040973653,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2023-01-31T21:22:26Z",
      "updated_at": "2023-01-31T21:48:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1092494674",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1092494674"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1222,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1092496414",
      "pull_request_review_id": 1187107175,
      "id": 1092496414,
      "node_id": "PRRC_kwDOABII585BHiwe",
      "diff_hunk": "@@ -646,9 +646,16 @@ class CTxMemPool\n     /** Returns an iterator to the given hash, if found */\n     std::optional<txiter> GetIter(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n-    /** Translate a set of hashes into a set of pool iterators to avoid repeated lookups */\n+    /** Translate a set of hashes into a set of pool iterators to avoid repeated lookups.\n+     * Does not require that all of the hashes correspond to actual transactions in the mempool,\n+     * only returns the ones that exist. */\n     setEntries GetIterSet(const std::set<uint256>& hashes) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Translate a list of hashes into a list of mempool iterators to avoid repeated lookups.\n+     * The nth element in txids becomes the nth element in the returned vector. If any of the txids\n+     * don't actually exist in the mempool, returns an empty vector. */\n+    std::vector<txiter> GetIterVec(const std::vector<uint256>& txids) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 14,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "995107782a1a512811d54f7abf29249f351a7cbf",
      "in_reply_to_id": 1040986669,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2023-01-31T21:24:31Z",
      "updated_at": "2023-01-31T21:48:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1092496414",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1092496414"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 654,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 533,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093127455",
      "pull_request_review_id": 1278975243,
      "id": 1093127455,
      "node_id": "PRRC_kwDOABII585BJ80f",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {\n+            const auto curr = cluster[i];\n+            for (const CTxMemPoolEntry& parent_entry : curr->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    cluster.push_back(parent_it);\n+                    // we still need to process this\n+                    ++unprocessed_count;\n+                }\n+            }\n+            for (const CTxMemPoolEntry& child_entry : curr->GetMemPoolChildrenConst()) {\n+                const auto child_it = mapTx.iterator_to(child_entry);\n+                if (!visited(child_it)) {\n+                    cluster.push_back(child_it);\n+                    // we still need to process this\n+                    ++unprocessed_count;\n+                }\n+            }",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 77,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028438751,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Mutable reference = the `merge` is modifying the entry's `m_parents` to now include its children as well. You can make a separate set that copies in the iterators from `GetMemPoolParentsConst` and `GetMemPoolChildrenConst`, but I'm not sure that's worth the lines of code reduction.",
      "created_at": "2023-02-01T12:00:45Z",
      "updated_at": "2023-02-01T12:00:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1093127455",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093127455"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 1233,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1221,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093531601",
      "pull_request_review_id": 1279568584,
      "id": 1093531601,
      "node_id": "PRRC_kwDOABII585BLffR",
      "diff_hunk": "@@ -0,0 +1,220 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 115,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "in_reply_to_id": 1042478969,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I expect this to be used to make the sorting order stable without introducing a gameable tie-breaker\r\n",
      "created_at": "2023-02-01T17:30:49Z",
      "updated_at": "2023-02-01T18:01:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1093531601",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093531601"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093563190",
      "pull_request_review_id": 1279568584,
      "id": 1093563190,
      "node_id": "PRRC_kwDOABII585BLnM2",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 159,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1050263740,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Great, thanks",
      "created_at": "2023-02-01T18:01:22Z",
      "updated_at": "2023-02-01T18:01:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1093563190",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093563190"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 158,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093853664",
      "pull_request_review_id": 1280046602,
      "id": 1093853664,
      "node_id": "PRRC_kwDOABII585BMuHg",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {\n+            const auto curr = cluster[i];\n+            for (const CTxMemPoolEntry& parent_entry : curr->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    cluster.push_back(parent_it);\n+                    // we still need to process this\n+                    ++unprocessed_count;\n+                }\n+            }\n+            for (const CTxMemPoolEntry& child_entry : curr->GetMemPoolChildrenConst()) {\n+                const auto child_it = mapTx.iterator_to(child_entry);\n+                if (!visited(child_it)) {\n+                    cluster.push_back(child_it);\n+                    // we still need to process this\n+                    ++unprocessed_count;\n+                }\n+            }",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 77,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028438751,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Gonna skip this for now, unless there is more demand for it",
      "created_at": "2023-02-01T23:39:16Z",
      "updated_at": "2023-02-01T23:39:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1093853664",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093853664"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 1233,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1221,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093864959",
      "pull_request_review_id": 1280061574,
      "id": 1093864959,
      "node_id": "PRRC_kwDOABII585BMw3_",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;",
      "path": "src/node/mini_miner.h",
      "position": null,
      "original_position": 58,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028491577,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removing `requested_outpoints` in favor of the keys of `bump_fees` breaks tests, so I assume they’re not overlapping exactly.",
      "created_at": "2023-02-02T00:01:27Z",
      "updated_at": "2023-02-02T00:01:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1093864959",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093864959"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093871261",
      "pull_request_review_id": 1280071076,
      "id": 1093871261,
      "node_id": "PRRC_kwDOABII585BMyad",
      "diff_hunk": "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.\n+    //\n+    //  This includes fee-bumping in RBFs. If an outpoint conflicts with another transaction in the\n+    //  mempool, it is assumed that the goal is to replace that transaction. As such, the\n+    //  calculation will exclude the to-be-replaced transaction, but will include the fee-bumping\n+    //  cost. If bump fees of descendants of the to-be-replaced transaction are requested, the value\n+    //  will be 0. Fee-related RBF rules are not included as they are logically distinct.",
      "path": "src/interfaces/chain.h",
      "position": null,
      "original_position": 20,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1038492630,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I’m not sure I follow your train of thought here. I think you have since reviewed this further, do you think this still needs to be addressed?",
      "created_at": "2023-02-02T00:14:08Z",
      "updated_at": "2023-02-02T00:14:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1093871261",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093871261"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 229,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 232,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094801361",
      "pull_request_review_id": 1281460983,
      "id": 1094801361,
      "node_id": "PRRC_kwDOABII585BQVfR",
      "diff_hunk": "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1028322453,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We don't know the cluster size before, so this doesn’t allow us to optimize here",
      "created_at": "2023-02-02T16:50:03Z",
      "updated_at": "2023-02-02T16:50:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1094801361",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094801361"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1169,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094806366",
      "pull_request_review_id": 1281467174,
      "id": 1094806366,
      "node_id": "PRRC_kwDOABII585BQWte",
      "diff_hunk": "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.\n+    //\n+    //  This includes fee-bumping in RBFs. If an outpoint conflicts with another transaction in the\n+    //  mempool, it is assumed that the goal is to replace that transaction. As such, the\n+    //  calculation will exclude the to-be-replaced transaction, but will include the fee-bumping\n+    //  cost. If bump fees of descendants of the to-be-replaced transaction are requested, the value\n+    //  will be 0. Fee-related RBF rules are not included as they are logically distinct.",
      "path": "src/interfaces/chain.h",
      "position": null,
      "original_position": 20,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1038492630,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thinking more about this, I think the assumption is valid and I don't expect it to change soon. It is also documented here, so if it changes, people should notice the conflict. We will add a test for this.",
      "created_at": "2023-02-02T16:53:35Z",
      "updated_at": "2023-02-02T16:54:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1094806366",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094806366"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 229,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 232,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1095002769",
      "pull_request_review_id": 1281780867,
      "id": 1095002769,
      "node_id": "PRRC_kwDOABII585BRGqR",
      "diff_hunk": "@@ -0,0 +1,220 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 115,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "in_reply_to_id": 1042478969,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a comment",
      "created_at": "2023-02-02T19:34:08Z",
      "updated_at": "2023-02-02T19:34:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1095002769",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1095002769"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1095009931",
      "pull_request_review_id": 1281789084,
      "id": 1095009931,
      "node_id": "PRRC_kwDOABII585BRIaL",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());\n+            assert(it != descendant_set_by_txid.end());\n+            for (const auto& descendant : it->second) {\n+                descendant->second.vsize_with_ancestors -= anc->second.GetTxSize();\n+                descendant->second.fee_with_ancestors -= anc->second.GetModifiedFee();",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 178,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1050402228,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, I’ve adopted your suggestion, although with an `Assume` instead.",
      "created_at": "2023-02-02T19:40:17Z",
      "updated_at": "2023-02-02T19:40:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1095009931",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1095009931"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 177,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1095018669",
      "pull_request_review_id": 1281798898,
      "id": 1095018669,
      "node_id": "PRRC_kwDOABII585BRKit",
      "diff_hunk": "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));",
      "path": "src/node/mini_miner.cpp",
      "position": null,
      "original_position": 79,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "898ad9d5904f1b689d18d94f20d92500cf443758",
      "in_reply_to_id": 1040297609,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, it would be more correct to gate the `emplace_back()` on `!remove`.",
      "created_at": "2023-02-02T19:48:13Z",
      "updated_at": "2023-02-02T19:48:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1095018669",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1095018669"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1221051466",
      "pull_request_review_id": 1466867248,
      "id": 1221051466,
      "node_id": "PRRC_kwDOABII585Ix8RK",
      "diff_hunk": "@@ -573,6 +573,28 @@ util::Result<SelectionResult> ChooseSelectionResult(const CWallet& wallet, const\n                              \"Please try sending a smaller amount or manually consolidating your wallet's UTXOs\")};\n     }\n \n+    // If the chosen input set has unconfirmed inputs, check for synergies from overlapping ancestry\n+    for (auto& result : eligible_results) {\n+        std::vector<COutPoint> outpoints;\n+        CAmount summed_bump_fees = 0;\n+        std::set<COutput> coins = result.GetInputSet();\n+        for (auto& coin : coins) {\n+            if (coin.depth > 0) continue; // Bump fees only exist for unconfirmed inputs\n+            outpoints.push_back(coin.outpoint);\n+            summed_bump_fees += coin.ancestor_bump_fees;\n+        }\n+        std::optional<CAmount> grouped_bump_fees = wallet.chain().CalculateTotalBumpFees(outpoints, coin_selection_params.m_effective_feerate);\n+        if (!grouped_bump_fees.has_value()) {\n+            return util::Error{_(\"Failed to calculate bump fees, because unconfirmed UTXOs depend on enormous cluster of unconfirmed transactions.\")};\n+        }\n+        CAmount bump_fee_overestimate = summed_bump_fees - grouped_bump_fees.value();\n+        if (bump_fee_overestimate) {\n+            result.SetBumpFeeDiscount(bump_fee_overestimate);\n+            // Update waste\n+            result.ComputeAndSetWaste(coin_selection_params.min_viable_change, coin_selection_params.m_cost_of_change, coin_selection_params.m_change_fee);",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "in_reply_to_id": null,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in \"Amend bumpfee for inputs with overlapping ancestry\" 56139fd808250fcb693b5f185e7e510804a33470\r\n\r\nnit: while you're here, should we drop earlier calls to `ComputeAndSetWaste` and just call it once for all eligible results before selecting the best one?",
      "created_at": "2023-06-07T07:32:15Z",
      "updated_at": "2023-06-27T07:18:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1221051466",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1221051466"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 629,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235753039",
      "pull_request_review_id": 1488907492,
      "id": 1235753039,
      "node_id": "PRRC_kwDOABII585JqBhP",
      "diff_hunk": "@@ -195,6 +196,7 @@ util::Result<PreSelectedInputs> FetchSelectedInputs(const CWallet& wallet, const\n \n         /* Set some defaults for depth, spendable, solvable, safe, time, and from_me as these don't matter for preset inputs since no selection is being done. */\n         COutput output(outpoint, txout, /*depth=*/ 0, input_bytes, /*spendable=*/ true, /*solvable=*/ true, /*safe=*/ true, /*time=*/ 0, /*from_me=*/ false, coin_selection_params.m_effective_feerate);\n+        output.ApplyBumpFee(map_of_bump_fees.at(output.outpoint));",
      "path": "src/wallet/spend.cpp",
      "position": 12,
      "original_position": 12,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "8e3d924f02ee28043e8844a301389915823e5893",
      "in_reply_to_id": null,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It would be good to have a test for the application of ancestor bump fees with external pre-selected inputs.",
      "created_at": "2023-06-20T19:47:05Z",
      "updated_at": "2023-07-05T18:05:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1235753039",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235753039"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 201,
      "original_line": 201,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235758654",
      "pull_request_review_id": 1488907492,
      "id": 1235758654,
      "node_id": "PRRC_kwDOABII585JqC4-",
      "diff_hunk": "@@ -7,6 +7,7 @@\n #include <common/system.h>\n #include <consensus/amount.h>\n #include <consensus/consensus.h>\n+#include <interfaces/chain.h>",
      "path": "src/wallet/coinselection.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "8e3d924f02ee28043e8844a301389915823e5893",
      "in_reply_to_id": null,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 232edb7e5d630d9d687ba3089aa4028f8e0380a4 \" Bump unconfirmed parent txs to target feerate \"\r\n\r\nWhy was this added?",
      "created_at": "2023-06-20T19:53:22Z",
      "updated_at": "2023-07-05T18:05:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1235758654",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235758654"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 10,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238118450",
      "pull_request_review_id": 1466867248,
      "id": 1238118450,
      "node_id": "PRRC_kwDOABII585JzDAy",
      "diff_hunk": "@@ -346,6 +351,18 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n         }\n     }\n \n+    if (feerate.has_value()) {\n+        std::map<COutPoint, CAmount> map_of_bump_fees = wallet.chain().CalculateBumpFees(outpoints, feerate.value());\n+\n+        for (auto& [_, outputs] : result.coins) {",
      "path": "src/wallet/spend.cpp",
      "position": 40,
      "original_position": 40,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "8e3d924f02ee28043e8844a301389915823e5893",
      "in_reply_to_id": null,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in \"Bump unconfirmed parent txs to target feerate\" 8e3d924f02ee28043e8844a301389915823e5893\r\n\r\nnit: suggestion\r\n```cpp\r\nfor (auto& output : result.coins.All()) {\r\n    output.ApplyBumpFee(map_of_bump_fees.at(output.outpoint));\r\n}\r\n```",
      "created_at": "2023-06-22T07:30:08Z",
      "updated_at": "2023-06-27T07:18:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1238118450",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238118450"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 359,
      "original_line": 359,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1241791109",
      "pull_request_review_id": 1466867248,
      "id": 1241791109,
      "node_id": "PRRC_kwDOABII585KBDqF",
      "diff_hunk": "@@ -512,7 +520,12 @@ CAmount SelectionResult::GetSelectedValue() const\n \n CAmount SelectionResult::GetSelectedEffectiveValue() const\n {\n-    return std::accumulate(m_selected_inputs.cbegin(), m_selected_inputs.cend(), CAmount{0}, [](CAmount sum, const auto& coin) { return sum + coin->GetEffectiveValue(); });\n+    return std::accumulate(m_selected_inputs.cbegin(), m_selected_inputs.cend(), CAmount{0}, [](CAmount sum, const auto& coin) { return sum + coin->GetEffectiveValue(); }) + bump_fee_group_discount;\n+}\n+\n+CAmount SelectionResult::GetBumpFeeDiscount() const",
      "path": "src/wallet/coinselection.cpp",
      "position": 74,
      "original_position": 23,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "56139fd808250fcb693b5f185e7e510804a33470",
      "in_reply_to_id": null,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in \"Amend bumpfee for inputs with overlapping ancestry\" 56139fd808250fcb693b5f185e7e510804a33470\r\n\r\nnit: you can drop this method if you decide to have `GetTotalBumpFee()` instead",
      "created_at": "2023-06-26T08:05:31Z",
      "updated_at": "2023-06-27T07:18:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1241791109",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1241791109"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 527,
      "original_line": 527,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1243210309",
      "pull_request_review_id": 1466867248,
      "id": 1243210309,
      "node_id": "PRRC_kwDOABII585KGeJF",
      "diff_hunk": "@@ -148,8 +150,7 @@ util::Result<SelectionResult> AttemptSelection(const CAmount& nTargetValue, Outp\n  *                                                  or (2) an specific error message if there was something particularly wrong (e.g. a selection\n  *                                                  result that surpassed the tx max weight size).\n  */\n-util::Result<SelectionResult> ChooseSelectionResult(const CAmount& nTargetValue, Groups& groups, const CoinSelectionParams& coin_selection_params);\n-\n+util::Result<SelectionResult> ChooseSelectionResult(const CWallet& wallet, const CAmount& nTargetValue, Groups& groups, const CoinSelectionParams& coin_selection_params);",
      "path": "src/wallet/spend.h",
      "position": null,
      "original_position": 31,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "56139fd808250fcb693b5f185e7e510804a33470",
      "in_reply_to_id": null,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in \"Amend bumpfee for inputs with overlapping ancestry\" 56139fd808250fcb693b5f185e7e510804a33470\r\n\r\nnit: we don't really need the whole wallet there, better to pass just chain interface",
      "created_at": "2023-06-27T06:37:47Z",
      "updated_at": "2023-06-27T07:18:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1243210309",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1243210309"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 153,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1243220924",
      "pull_request_review_id": 1466867248,
      "id": 1243220924,
      "node_id": "PRRC_kwDOABII585KGgu8",
      "diff_hunk": "@@ -611,6 +611,28 @@ util::Result<SelectionResult> ChooseSelectionResult(const CAmount& nTargetValue,\n         return errors.empty() ? util::Error() : errors.front();\n     }\n \n+    // If the chosen input set has unconfirmed inputs, check for synergies from overlapping ancestry\n+    for (auto& result : results) {\n+        std::vector<COutPoint> outpoints;\n+        CAmount summed_bump_fees = 0;",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 40,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "56139fd808250fcb693b5f185e7e510804a33470",
      "in_reply_to_id": null,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in \"Amend bumpfee for inputs with overlapping ancestry\" 56139fd808250fcb693b5f185e7e510804a33470\r\n\r\nnit: you can use `SelectionResult::GetTotalBumpFee()` if you decide to introduce it",
      "created_at": "2023-06-27T06:49:27Z",
      "updated_at": "2023-06-27T07:18:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1243220924",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1243220924"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 614,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1243238714",
      "pull_request_review_id": 1466867248,
      "id": 1243238714,
      "node_id": "PRRC_kwDOABII585KGlE6",
      "diff_hunk": "@@ -1008,7 +1025,9 @@ static util::Result<CreatedTransactionResult> CreateTransactionInternal(\n     // and in the spirit of \"smallest possible change from prior\n     // behavior.\"\n     const uint32_t nSequence{coin_control.m_signal_bip125_rbf.value_or(wallet.m_signal_rbf) ? MAX_BIP125_RBF_SEQUENCE : CTxIn::MAX_SEQUENCE_NONFINAL};\n+    CAmount total_bump_fees{0};",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "8e3d924f02ee28043e8844a301389915823e5893",
      "in_reply_to_id": null,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in \"Bump unconfirmed parent txs to target feerate\" 8e3d924f02ee28043e8844a301389915823e5893\r\n\r\nnit: we can encapsulate bump fee calculation within `CoinSelectionResult::GetTotalBumpFee()`. It will come handy in the next commit as well",
      "created_at": "2023-06-27T07:07:23Z",
      "updated_at": "2023-06-27T07:18:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1243238714",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1243238714"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1047,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246199879",
      "pull_request_review_id": 1504669255,
      "id": 1246199879,
      "node_id": "PRRC_kwDOABII585KR4BH",
      "diff_hunk": "@@ -0,0 +1,460 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=100)",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": null,
      "original_position": 75,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "8e3d924f02ee28043e8844a301389915823e5893",
      "in_reply_to_id": null,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in \"Bump unconfirmed parent txs to target feerate\" 8e3d924f02ee28043e8844a301389915823e5893\r\n\r\nnit: better use a multiple of `target_fee_rate`",
      "created_at": "2023-06-29T07:01:41Z",
      "updated_at": "2023-07-03T07:59:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1246199879",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246199879"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246207242",
      "pull_request_review_id": 1504669255,
      "id": 1246207242,
      "node_id": "PRRC_kwDOABII585KR50K",
      "diff_hunk": "@@ -0,0 +1,460 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": 76,
      "original_position": 72,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "8e3d924f02ee28043e8844a301389915823e5893",
      "in_reply_to_id": null,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in \"Bump unconfirmed parent txs to target feerate\" 8e3d924f02ee28043e8844a301389915823e5893\r\n\r\nI think all the tests would be easier to understand if we start with an empty testing wallet and send unconfirmed txs to it from  `def_wallet`.\r\n\r\nNow we start with the testing wallet with already one confirmed input, but why if we test spending mostly unconfirmed txs? Current setup requires reader to do more coin tracking in mind.",
      "created_at": "2023-06-29T07:09:06Z",
      "updated_at": "2023-07-03T07:59:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1246207242",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246207242"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 76,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246215741",
      "pull_request_review_id": 1504669255,
      "id": 1246215741,
      "node_id": "PRRC_kwDOABII585KR749",
      "diff_hunk": "@@ -0,0 +1,460 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=100)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": null,
      "original_position": 85,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "8e3d924f02ee28043e8844a301389915823e5893",
      "in_reply_to_id": null,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "do we want to check naïve ancestry fee rate or the fee_rate at which it will be accepted at a block (i.e. ancestry score)?",
      "created_at": "2023-06-29T07:17:13Z",
      "updated_at": "2023-07-03T07:59:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1246215741",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246215741"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247203795",
      "pull_request_review_id": 1506175113,
      "id": 1247203795,
      "node_id": "PRRC_kwDOABII585KVtHT",
      "diff_hunk": "@@ -346,6 +351,18 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n         }\n     }\n \n+    if (feerate.has_value()) {\n+        std::map<COutPoint, CAmount> map_of_bump_fees = wallet.chain().CalculateBumpFees(outpoints, feerate.value());\n+\n+        for (auto& [_, outputs] : result.coins) {",
      "path": "src/wallet/spend.cpp",
      "position": 40,
      "original_position": 40,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "8e3d924f02ee28043e8844a301389915823e5893",
      "in_reply_to_id": 1238118450,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, went with your suggestion",
      "created_at": "2023-06-29T21:43:30Z",
      "updated_at": "2023-06-29T22:12:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1247203795",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247203795"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 359,
      "original_line": 359,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247221538",
      "pull_request_review_id": 1506175113,
      "id": 1247221538,
      "node_id": "PRRC_kwDOABII585KVxci",
      "diff_hunk": "@@ -1008,7 +1025,9 @@ static util::Result<CreatedTransactionResult> CreateTransactionInternal(\n     // and in the spirit of \"smallest possible change from prior\n     // behavior.\"\n     const uint32_t nSequence{coin_control.m_signal_bip125_rbf.value_or(wallet.m_signal_rbf) ? MAX_BIP125_RBF_SEQUENCE : CTxIn::MAX_SEQUENCE_NONFINAL};\n+    CAmount total_bump_fees{0};",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "8e3d924f02ee28043e8844a301389915823e5893",
      "in_reply_to_id": 1243238714,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I tried this change, and remembered why I put in the \"discount\" in the first place: I think I have incorporated the bump fees in the effective values before, so I need to know whether there is a difference between the sum of the bump fees and the combined inputs’ bump fee. I have an idea how to incorporate your suggestion, but I gotta try tomorrow.",
      "created_at": "2023-06-29T22:12:36Z",
      "updated_at": "2023-06-29T22:12:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1247221538",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247221538"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1047,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248149182",
      "pull_request_review_id": 1507669515,
      "id": 1248149182,
      "node_id": "PRRC_kwDOABII585KZT6-",
      "diff_hunk": "@@ -512,7 +520,12 @@ CAmount SelectionResult::GetSelectedValue() const\n \n CAmount SelectionResult::GetSelectedEffectiveValue() const\n {\n-    return std::accumulate(m_selected_inputs.cbegin(), m_selected_inputs.cend(), CAmount{0}, [](CAmount sum, const auto& coin) { return sum + coin->GetEffectiveValue(); });\n+    return std::accumulate(m_selected_inputs.cbegin(), m_selected_inputs.cend(), CAmount{0}, [](CAmount sum, const auto& coin) { return sum + coin->GetEffectiveValue(); }) + bump_fee_group_discount;\n+}\n+\n+CAmount SelectionResult::GetBumpFeeDiscount() const",
      "path": "src/wallet/coinselection.cpp",
      "position": 74,
      "original_position": 23,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "56139fd808250fcb693b5f185e7e510804a33470",
      "in_reply_to_id": 1241791109,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I added a function `GetSummedBumpFees()`, but I have yet to find a neat way how I can drop the discount. I was experimenting with having both a function `GetSummedBumpFees()` and a function `GetCombinedBumpFee()` on SelectionResult, but it made it more complicated because I now had to get the Chain interface and target feerate into `SelectionResult`. I am tending to leaving it as it is now, unless I come up with a more elegant way to transition.",
      "created_at": "2023-06-30T18:11:30Z",
      "updated_at": "2023-06-30T18:13:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1248149182",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248149182"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 527,
      "original_line": 527,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248149983",
      "pull_request_review_id": 1507669515,
      "id": 1248149983,
      "node_id": "PRRC_kwDOABII585KZUHf",
      "diff_hunk": "@@ -611,6 +611,28 @@ util::Result<SelectionResult> ChooseSelectionResult(const CAmount& nTargetValue,\n         return errors.empty() ? util::Error() : errors.front();\n     }\n \n+    // If the chosen input set has unconfirmed inputs, check for synergies from overlapping ancestry\n+    for (auto& result : results) {\n+        std::vector<COutPoint> outpoints;\n+        CAmount summed_bump_fees = 0;",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 40,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "56139fd808250fcb693b5f185e7e510804a33470",
      "in_reply_to_id": 1243220924,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added `GetSummedBumpFees()`",
      "created_at": "2023-06-30T18:12:01Z",
      "updated_at": "2023-06-30T18:13:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1248149983",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248149983"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 614,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248150186",
      "pull_request_review_id": 1507669515,
      "id": 1248150186,
      "node_id": "PRRC_kwDOABII585KZUKq",
      "diff_hunk": "@@ -573,6 +573,28 @@ util::Result<SelectionResult> ChooseSelectionResult(const CWallet& wallet, const\n                              \"Please try sending a smaller amount or manually consolidating your wallet's UTXOs\")};\n     }\n \n+    // If the chosen input set has unconfirmed inputs, check for synergies from overlapping ancestry\n+    for (auto& result : eligible_results) {\n+        std::vector<COutPoint> outpoints;\n+        CAmount summed_bump_fees = 0;\n+        std::set<COutput> coins = result.GetInputSet();\n+        for (auto& coin : coins) {\n+            if (coin.depth > 0) continue; // Bump fees only exist for unconfirmed inputs\n+            outpoints.push_back(coin.outpoint);\n+            summed_bump_fees += coin.ancestor_bump_fees;\n+        }\n+        std::optional<CAmount> grouped_bump_fees = wallet.chain().CalculateTotalBumpFees(outpoints, coin_selection_params.m_effective_feerate);\n+        if (!grouped_bump_fees.has_value()) {\n+            return util::Error{_(\"Failed to calculate bump fees, because unconfirmed UTXOs depend on enormous cluster of unconfirmed transactions.\")};\n+        }\n+        CAmount bump_fee_overestimate = summed_bump_fees - grouped_bump_fees.value();\n+        if (bump_fee_overestimate) {\n+            result.SetBumpFeeDiscount(bump_fee_overestimate);\n+            // Update waste\n+            result.ComputeAndSetWaste(coin_selection_params.min_viable_change, coin_selection_params.m_cost_of_change, coin_selection_params.m_change_fee);",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "in_reply_to_id": 1221051466,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Still open",
      "created_at": "2023-06-30T18:12:10Z",
      "updated_at": "2023-06-30T18:13:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1248150186",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248150186"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 629,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248205239",
      "pull_request_review_id": 1507761521,
      "id": 1248205239,
      "node_id": "PRRC_kwDOABII585KZhm3",
      "diff_hunk": "@@ -346,6 +351,15 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n         }\n     }\n \n+    if (feerate.has_value()) {\n+        std::map<COutPoint, CAmount> map_of_bump_fees = wallet.chain().CalculateIndividualBumpFees(outpoints, feerate.value());\n+\n+        for (auto& output : result.All()) {\n+            output.ApplyBumpFee(map_of_bump_fees.at(output.outpoint));",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "f2daebf8d1ac3829faa6443425cb97a763e9f780",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In f2daebf8d1ac3829faa6443425cb97a763e9f780 \"Bump unconfirmed parent txs to target feerate\"\r\n\r\nThis doesn't actually apply the bumpfees to all of the outputs in `result`. All()` will return a copy of all of the outputs, not references to them, so this is just applying the bumpfees to a temporary.\r\n\r\nBecause of this, the tests added in this commit fail. The entire PR does not have failing tests because of the adjustment to the fee that is done in the following commit.",
      "created_at": "2023-06-30T19:08:10Z",
      "updated_at": "2023-06-30T19:27:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1248205239",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248205239"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 357,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 358,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248207817",
      "pull_request_review_id": 1507761521,
      "id": 1248207817,
      "node_id": "PRRC_kwDOABII585KZiPJ",
      "diff_hunk": "@@ -0,0 +1,460 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=100)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_funding)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_unconfirmed_low(self):\n+        self.log.info(\"Start test with parent and grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=1)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_two_low_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs\")\n+        wallet = self.setup_and_fund_wallet(\"two_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        parent_one_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_one_tx = wallet.gettransaction(txid=parent_one_txid, verbose=True)\n+        self.assert_undershoots_target(p_one_tx)\n+\n+        parent_two_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_two_tx = wallet.gettransaction(txid=parent_two_txid, verbose=True)\n+        self.assert_undershoots_target(p_two_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_one_tx, p_two_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_mixed_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs one of which has a higher feerate\")\n+        wallet = self.setup_and_fund_wallet(\"two_mixed_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        high_parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=self.target_fee_rate*2)\n+        p_high_tx = wallet.gettransaction(txid=high_parent_txid, verbose=True)\n+        # This time the parent is greater than the child\n+        self.assert_beats_target(p_high_tx)\n+\n+        parent_low_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_low_tx = wallet.gettransaction(txid=parent_low_txid, verbose=True)\n+        # Other parent needs bump\n+        self.assert_undershoots_target(p_low_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_high_tx, p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        resulting_bumped_ancestry_fee_rate = self.calc_set_fee_rate([p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_bumped_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_bumped_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_high_low(self):\n+        self.log.info(\"Start test with low parent and high grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"high_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=self.target_fee_rate * 10)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        # grandparent has higher feerate\n+        self.assert_beats_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        # parent is low feerate\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+        resulting_ancestry_fee_rate_with_high_feerate_gp = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate_with_high_feerate_gp, self.target_fee_rate*1.1)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_high_low_below_target_feerate(self):\n+        self.log.info(\"Start test with low parent and higher low grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"low_and_lower_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=5)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+\n+        # grandparent has higher feerate, but below target\n+        self.assert_undershoots_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        # parent even lower\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low_sffo(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input, while subtracting from output\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet_sffo\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate, subtractfeefromamount=True)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_preset_input_cpfp(self):\n+        self.log.info(\"Start test with preset input from low feerate unconfirmed transaction\")\n+        wallet = self.setup_and_fund_wallet(\"preset_input\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        number_outputs = len(parent_tx[\"decoded\"][\"vout\"])\n+        assert_equal(number_outputs, 2)\n+\n+        # we don't care which of the two outputs we spent, they're both ours\n+        ancestor_aware_txid = wallet.send(outputs=[{self.def_wallet.getnewaddress(): 0.5}], fee_rate=self.target_fee_rate, options={\"add_inputs\": True, \"inputs\": [{\"txid\": parent_txid, \"vout\": 0}]})[\"txid\"]\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_rbf_bumping(self):\n+        self.log.info(\"Start test to rbf a transaction unconfirmed input to bump it\")\n+        wallet = self.setup_and_fund_wallet(\"bump\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        to_be_rbfed_ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate, subtractfeefromamount=True)\n+        ancestor_aware_tx = wallet.gettransaction(txid=to_be_rbfed_ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        bumped_ancestor_aware_txid = wallet.bumpfee(txid=to_be_rbfed_ancestor_aware_txid, options={\"fee_rate\": self.target_fee_rate * 2} )[\"txid\"]\n+        bumped_ancestor_aware_tx = wallet.gettransaction(txid=bumped_ancestor_aware_txid, verbose=True)\n+        self.assert_spends_only_parent(bumped_ancestor_aware_tx, parent_txid)\n+\n+        resulting_bumped_fee_rate = self.calc_fee_rate(bumped_ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_bumped_fee_rate, 2*self.target_fee_rate)\n+        resulting_bumped_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, bumped_ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_bumped_ancestry_fee_rate, 2*self.target_fee_rate)\n+        assert_greater_than_or_equal(2*self.target_fee_rate*1.5, resulting_bumped_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_sibling_tx_gets_ignored(self):\n+        self.log.info(\"Start test where a low-fee sibling tx gets created and check that bumping ignores it\")\n+        wallet = self.setup_and_fund_wallet(\"ignore-sibling\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=2)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        # create sibling tx\n+        sibling_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.9, fee_rate=1)\n+        sibling_tx = wallet.gettransaction(txid=sibling_txid, verbose=True)\n+        self.assert_undershoots_target(sibling_tx)\n+\n+        # spend both outputs from parent transaction\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_sibling_tx_bumps_parent(self):\n+        self.log.info(\"Start test where a high-fee sibling tx bumps the parent\")\n+        wallet = self.setup_and_fund_wallet(\"generous-sibling\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_undershoots_target(parent_tx)\n+\n+        # create sibling tx\n+        sibling_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.9, fee_rate=100)\n+        sibling_tx = wallet.gettransaction(txid=sibling_txid, verbose=True)\n+        self.assert_beats_target(sibling_tx)\n+\n+        # spend both outputs from parent transaction\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        # Child is only paying for itself…\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(1.05 * self.target_fee_rate, resulting_fee_rate)\n+        # …because sibling bumped to parent to ~50 s/vB, while our target is 30 s/vB\n+        resulting_ancestry_fee_rate_sibling = self.calc_set_fee_rate([parent_tx, sibling_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate_sibling, self.target_fee_rate)\n+        # and our resulting \"ancestry feerate\" is therefore BELOW target feerate\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_confirmed_and_unconfirmed_parent(self):\n+        self.log.info(\"Start test with one unconfirmed and one confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_and_unconfirmed_wallet\")\n+        wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=self.target_fee_rate)\n+        self.generate(self.nodes[0], 1) # Wallet has two confirmed UTXOs of ~1BTC each\n+        wallet.sendtoaddress(address=wallet.getnewaddress(), amount=0.5, fee_rate=0.5*self.target_fee_rate)\n+\n+        # wallet has one confirmed UTXO of 1BTC and two unconfirmed UTXOs of ~0.5BTC each\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.4, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+\n+    def run_test(self):\n+        self.log.info(\"Starting UnconfirmedInputTest!\")\n+        self.target_fee_rate = 30\n+        self.def_wallet  = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.generate(self.nodes[0], 110)\n+\n+        # Test that assumptions about meeting feerate and being able to test it hold",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": null,
      "original_position": 416,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "f2daebf8d1ac3829faa6443425cb97a763e9f780",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In f2daebf8d1ac3829faa6443425cb97a763e9f780 \"Bump unconfirmed parent txs to target feerate\"\r\n\r\nnit: I prefer that comments about what a test does are attached to the test implementation itself rather than the caller.",
      "created_at": "2023-06-30T19:11:32Z",
      "updated_at": "2023-06-30T19:26:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1248207817",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248207817"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 416,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248213082",
      "pull_request_review_id": 1507761521,
      "id": 1248213082,
      "node_id": "PRRC_kwDOABII585KZjha",
      "diff_hunk": "@@ -80,7 +80,19 @@ static feebumper::Result CheckFeeRate(const CWallet& wallet, const CFeeRate& new\n         return feebumper::Result::WALLET_ERROR;\n     }\n \n-    CAmount new_total_fee = newFeerate.GetFee(maxTxSize);\n+    std::vector<COutPoint> reused_inputs;\n+    reused_inputs.reserve(mtx.vin.size());\n+    for (const CTxIn& txin : mtx.vin) {\n+        reused_inputs.push_back(txin.prevout);\n+    }\n+\n+    std::map<COutPoint, CAmount> bump_fees = wallet.chain().CalculateBumpFees(reused_inputs, newFeerate);",
      "path": "src/wallet/feebumper.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "f2daebf8d1ac3829faa6443425cb97a763e9f780",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In f2daebf8d1ac3829faa6443425cb97a763e9f780 \"Bump unconfirmed parent txs to target feerate\"\r\n\r\nCompilation failure in this commit.\r\n\r\n```\r\nwallet/feebumper.cpp: In function ‘wallet::feebumper::Result wallet::CheckFeeRate(const CWallet&, const CMutableTransaction&, const CFeeRate&, int64_t, CAmount, std::vector<bilingual_str>&)’:\r\nwallet/feebumper.cpp:89:61: error: ‘class interfaces::Chain’ has no member named ‘CalculateBumpFees’\r\n   89 |     std::map<COutPoint, CAmount> bump_fees = wallet.chain().CalculateBumpFees(reused_inputs, newFeerate);\r\n      |                                                             ^~~~~~~~~~~~~~~~~\r\n```\r\n\r\nThis function was renamed to `CalculateIndividualBumpFees`",
      "created_at": "2023-06-30T19:18:42Z",
      "updated_at": "2023-06-30T19:26:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1248213082",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248213082"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 89,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248219188",
      "pull_request_review_id": 1507784509,
      "id": 1248219188,
      "node_id": "PRRC_kwDOABII585KZlA0",
      "diff_hunk": "@@ -346,6 +351,18 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n         }\n     }\n \n+    if (feerate.has_value()) {\n+        std::map<COutPoint, CAmount> map_of_bump_fees = wallet.chain().CalculateBumpFees(outpoints, feerate.value());\n+\n+        for (auto& [_, outputs] : result.coins) {",
      "path": "src/wallet/spend.cpp",
      "position": 40,
      "original_position": 40,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "8e3d924f02ee28043e8844a301389915823e5893",
      "in_reply_to_id": 1238118450,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is incorrect, see https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1248205239",
      "created_at": "2023-06-30T19:28:24Z",
      "updated_at": "2023-06-30T19:28:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1248219188",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248219188"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 359,
      "original_line": 359,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1250394244",
      "pull_request_review_id": 1504669255,
      "id": 1250394244,
      "node_id": "PRRC_kwDOABII585Kh4CE",
      "diff_hunk": "@@ -346,6 +351,18 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n         }\n     }\n \n+    if (feerate.has_value()) {\n+        std::map<COutPoint, CAmount> map_of_bump_fees = wallet.chain().CalculateBumpFees(outpoints, feerate.value());\n+\n+        for (auto& [_, outputs] : result.coins) {",
      "path": "src/wallet/spend.cpp",
      "position": 40,
      "original_position": 40,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "8e3d924f02ee28043e8844a301389915823e5893",
      "in_reply_to_id": 1238118450,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oops, sorry about misleading you 🙄 ",
      "created_at": "2023-07-03T07:31:30Z",
      "updated_at": "2023-07-03T07:59:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1250394244",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1250394244"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 359,
      "original_line": 359,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1250419037",
      "pull_request_review_id": 1504669255,
      "id": 1250419037,
      "node_id": "PRRC_kwDOABII585Kh-Fd",
      "diff_hunk": "@@ -512,7 +520,12 @@ CAmount SelectionResult::GetSelectedValue() const\n \n CAmount SelectionResult::GetSelectedEffectiveValue() const\n {\n-    return std::accumulate(m_selected_inputs.cbegin(), m_selected_inputs.cend(), CAmount{0}, [](CAmount sum, const auto& coin) { return sum + coin->GetEffectiveValue(); });\n+    return std::accumulate(m_selected_inputs.cbegin(), m_selected_inputs.cend(), CAmount{0}, [](CAmount sum, const auto& coin) { return sum + coin->GetEffectiveValue(); }) + bump_fee_group_discount;\n+}\n+\n+CAmount SelectionResult::GetBumpFeeDiscount() const",
      "path": "src/wallet/coinselection.cpp",
      "position": 74,
      "original_position": 23,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "56139fd808250fcb693b5f185e7e510804a33470",
      "in_reply_to_id": 1241791109,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "My idea was to add `bump_fee_group_discount` within `GetTotalBumpFee()` function. Probably I'm missing something but I don't know what. Why wouldn't it just work?",
      "created_at": "2023-07-03T07:48:26Z",
      "updated_at": "2023-07-03T07:59:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1250419037",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1250419037"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 527,
      "original_line": 527,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1250425745",
      "pull_request_review_id": 1504669255,
      "id": 1250425745,
      "node_id": "PRRC_kwDOABII585Kh_uR",
      "diff_hunk": "@@ -0,0 +1,460 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=100)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": null,
      "original_position": 99,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "f2daebf8d1ac3829faa6443425cb97a763e9f780",
      "in_reply_to_id": null,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "that seems like a duplicate check of `assert_undershoots_target`",
      "created_at": "2023-07-03T07:52:58Z",
      "updated_at": "2023-07-03T07:59:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1250425745",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1250425745"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251179626",
      "pull_request_review_id": 1511623977,
      "id": 1251179626,
      "node_id": "PRRC_kwDOABII585Kk3xq",
      "diff_hunk": "@@ -346,6 +351,18 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n         }\n     }\n \n+    if (feerate.has_value()) {\n+        std::map<COutPoint, CAmount> map_of_bump_fees = wallet.chain().CalculateBumpFees(outpoints, feerate.value());\n+\n+        for (auto& [_, outputs] : result.coins) {",
      "path": "src/wallet/spend.cpp",
      "position": 40,
      "original_position": 40,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "8e3d924f02ee28043e8844a301389915823e5893",
      "in_reply_to_id": 1238118450,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah drats, I did not realize that `CoinsResult.All()` produces a copy. Reverting this.",
      "created_at": "2023-07-03T18:28:47Z",
      "updated_at": "2023-07-03T18:28:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251179626",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251179626"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 359,
      "original_line": 359,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251181072",
      "pull_request_review_id": 1511626170,
      "id": 1251181072,
      "node_id": "PRRC_kwDOABII585Kk4IQ",
      "diff_hunk": "@@ -512,7 +520,12 @@ CAmount SelectionResult::GetSelectedValue() const\n \n CAmount SelectionResult::GetSelectedEffectiveValue() const\n {\n-    return std::accumulate(m_selected_inputs.cbegin(), m_selected_inputs.cend(), CAmount{0}, [](CAmount sum, const auto& coin) { return sum + coin->GetEffectiveValue(); });\n+    return std::accumulate(m_selected_inputs.cbegin(), m_selected_inputs.cend(), CAmount{0}, [](CAmount sum, const auto& coin) { return sum + coin->GetEffectiveValue(); }) + bump_fee_group_discount;\n+}\n+\n+CAmount SelectionResult::GetBumpFeeDiscount() const",
      "path": "src/wallet/coinselection.cpp",
      "position": 74,
      "original_position": 23,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "56139fd808250fcb693b5f185e7e510804a33470",
      "in_reply_to_id": 1241791109,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I would prefer that the method `GetTotalBumpFee()` does not either return the sum of individual bump fees or the combined bump fee for the input set depending on when it is called. I’d be worried that it would be hard to understand later and might be a source of future bugs.",
      "created_at": "2023-07-03T18:31:39Z",
      "updated_at": "2023-07-03T18:31:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251181072",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251181072"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 527,
      "original_line": 527,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251181233",
      "pull_request_review_id": 1511626358,
      "id": 1251181233,
      "node_id": "PRRC_kwDOABII585Kk4Kx",
      "diff_hunk": "@@ -148,8 +150,7 @@ util::Result<SelectionResult> AttemptSelection(const CAmount& nTargetValue, Outp\n  *                                                  or (2) an specific error message if there was something particularly wrong (e.g. a selection\n  *                                                  result that surpassed the tx max weight size).\n  */\n-util::Result<SelectionResult> ChooseSelectionResult(const CAmount& nTargetValue, Groups& groups, const CoinSelectionParams& coin_selection_params);\n-\n+util::Result<SelectionResult> ChooseSelectionResult(const CWallet& wallet, const CAmount& nTargetValue, Groups& groups, const CoinSelectionParams& coin_selection_params);",
      "path": "src/wallet/spend.h",
      "position": null,
      "original_position": 31,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "56139fd808250fcb693b5f185e7e510804a33470",
      "in_reply_to_id": 1243210309,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-07-03T18:31:54Z",
      "updated_at": "2023-07-03T18:31:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251181233",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251181233"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 153,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251192852",
      "pull_request_review_id": 1511646387,
      "id": 1251192852,
      "node_id": "PRRC_kwDOABII585Kk7AU",
      "diff_hunk": "@@ -346,6 +351,15 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n         }\n     }\n \n+    if (feerate.has_value()) {\n+        std::map<COutPoint, CAmount> map_of_bump_fees = wallet.chain().CalculateIndividualBumpFees(outpoints, feerate.value());\n+\n+        for (auto& output : result.All()) {\n+            output.ApplyBumpFee(map_of_bump_fees.at(output.outpoint));",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "f2daebf8d1ac3829faa6443425cb97a763e9f780",
      "in_reply_to_id": 1248205239,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for catching this. Fixed.",
      "created_at": "2023-07-03T18:46:24Z",
      "updated_at": "2023-07-03T21:19:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251192852",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251192852"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": 357,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 358,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251203025",
      "pull_request_review_id": 1511646387,
      "id": 1251203025,
      "node_id": "PRRC_kwDOABII585Kk9fR",
      "diff_hunk": "@@ -0,0 +1,460 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=100)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_funding)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_unconfirmed_low(self):\n+        self.log.info(\"Start test with parent and grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=1)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_two_low_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs\")\n+        wallet = self.setup_and_fund_wallet(\"two_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        parent_one_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_one_tx = wallet.gettransaction(txid=parent_one_txid, verbose=True)\n+        self.assert_undershoots_target(p_one_tx)\n+\n+        parent_two_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_two_tx = wallet.gettransaction(txid=parent_two_txid, verbose=True)\n+        self.assert_undershoots_target(p_two_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_one_tx, p_two_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_mixed_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs one of which has a higher feerate\")\n+        wallet = self.setup_and_fund_wallet(\"two_mixed_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        high_parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=self.target_fee_rate*2)\n+        p_high_tx = wallet.gettransaction(txid=high_parent_txid, verbose=True)\n+        # This time the parent is greater than the child\n+        self.assert_beats_target(p_high_tx)\n+\n+        parent_low_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_low_tx = wallet.gettransaction(txid=parent_low_txid, verbose=True)\n+        # Other parent needs bump\n+        self.assert_undershoots_target(p_low_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_high_tx, p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        resulting_bumped_ancestry_fee_rate = self.calc_set_fee_rate([p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_bumped_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_bumped_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_high_low(self):\n+        self.log.info(\"Start test with low parent and high grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"high_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=self.target_fee_rate * 10)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        # grandparent has higher feerate\n+        self.assert_beats_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        # parent is low feerate\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+        resulting_ancestry_fee_rate_with_high_feerate_gp = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate_with_high_feerate_gp, self.target_fee_rate*1.1)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_high_low_below_target_feerate(self):\n+        self.log.info(\"Start test with low parent and higher low grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"low_and_lower_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=5)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+\n+        # grandparent has higher feerate, but below target\n+        self.assert_undershoots_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        # parent even lower\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low_sffo(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input, while subtracting from output\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet_sffo\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate, subtractfeefromamount=True)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_preset_input_cpfp(self):\n+        self.log.info(\"Start test with preset input from low feerate unconfirmed transaction\")\n+        wallet = self.setup_and_fund_wallet(\"preset_input\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        number_outputs = len(parent_tx[\"decoded\"][\"vout\"])\n+        assert_equal(number_outputs, 2)\n+\n+        # we don't care which of the two outputs we spent, they're both ours\n+        ancestor_aware_txid = wallet.send(outputs=[{self.def_wallet.getnewaddress(): 0.5}], fee_rate=self.target_fee_rate, options={\"add_inputs\": True, \"inputs\": [{\"txid\": parent_txid, \"vout\": 0}]})[\"txid\"]\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_rbf_bumping(self):\n+        self.log.info(\"Start test to rbf a transaction unconfirmed input to bump it\")\n+        wallet = self.setup_and_fund_wallet(\"bump\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        to_be_rbfed_ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate, subtractfeefromamount=True)\n+        ancestor_aware_tx = wallet.gettransaction(txid=to_be_rbfed_ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        bumped_ancestor_aware_txid = wallet.bumpfee(txid=to_be_rbfed_ancestor_aware_txid, options={\"fee_rate\": self.target_fee_rate * 2} )[\"txid\"]\n+        bumped_ancestor_aware_tx = wallet.gettransaction(txid=bumped_ancestor_aware_txid, verbose=True)\n+        self.assert_spends_only_parent(bumped_ancestor_aware_tx, parent_txid)\n+\n+        resulting_bumped_fee_rate = self.calc_fee_rate(bumped_ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_bumped_fee_rate, 2*self.target_fee_rate)\n+        resulting_bumped_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, bumped_ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_bumped_ancestry_fee_rate, 2*self.target_fee_rate)\n+        assert_greater_than_or_equal(2*self.target_fee_rate*1.5, resulting_bumped_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_sibling_tx_gets_ignored(self):\n+        self.log.info(\"Start test where a low-fee sibling tx gets created and check that bumping ignores it\")\n+        wallet = self.setup_and_fund_wallet(\"ignore-sibling\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=2)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        # create sibling tx\n+        sibling_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.9, fee_rate=1)\n+        sibling_tx = wallet.gettransaction(txid=sibling_txid, verbose=True)\n+        self.assert_undershoots_target(sibling_tx)\n+\n+        # spend both outputs from parent transaction\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_sibling_tx_bumps_parent(self):\n+        self.log.info(\"Start test where a high-fee sibling tx bumps the parent\")\n+        wallet = self.setup_and_fund_wallet(\"generous-sibling\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_undershoots_target(parent_tx)\n+\n+        # create sibling tx\n+        sibling_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.9, fee_rate=100)\n+        sibling_tx = wallet.gettransaction(txid=sibling_txid, verbose=True)\n+        self.assert_beats_target(sibling_tx)\n+\n+        # spend both outputs from parent transaction\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        # Child is only paying for itself…\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(1.05 * self.target_fee_rate, resulting_fee_rate)\n+        # …because sibling bumped to parent to ~50 s/vB, while our target is 30 s/vB\n+        resulting_ancestry_fee_rate_sibling = self.calc_set_fee_rate([parent_tx, sibling_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate_sibling, self.target_fee_rate)\n+        # and our resulting \"ancestry feerate\" is therefore BELOW target feerate\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_confirmed_and_unconfirmed_parent(self):\n+        self.log.info(\"Start test with one unconfirmed and one confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_and_unconfirmed_wallet\")\n+        wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=self.target_fee_rate)\n+        self.generate(self.nodes[0], 1) # Wallet has two confirmed UTXOs of ~1BTC each\n+        wallet.sendtoaddress(address=wallet.getnewaddress(), amount=0.5, fee_rate=0.5*self.target_fee_rate)\n+\n+        # wallet has one confirmed UTXO of 1BTC and two unconfirmed UTXOs of ~0.5BTC each\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.4, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+\n+    def run_test(self):\n+        self.log.info(\"Starting UnconfirmedInputTest!\")\n+        self.target_fee_rate = 30\n+        self.def_wallet  = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.generate(self.nodes[0], 110)\n+\n+        # Test that assumptions about meeting feerate and being able to test it hold",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": null,
      "original_position": 416,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "f2daebf8d1ac3829faa6443425cb97a763e9f780",
      "in_reply_to_id": 1248207817,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Moved all comments about what the tests do to the implementations of the tests",
      "created_at": "2023-07-03T19:03:02Z",
      "updated_at": "2023-07-03T21:19:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251203025",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251203025"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 416,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251204807",
      "pull_request_review_id": 1511646387,
      "id": 1251204807,
      "node_id": "PRRC_kwDOABII585Kk97H",
      "diff_hunk": "@@ -0,0 +1,460 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=100)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": null,
      "original_position": 99,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "f2daebf8d1ac3829faa6443425cb97a763e9f780",
      "in_reply_to_id": 1250425745,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, you’re right. Removed duplicate check.",
      "created_at": "2023-07-03T19:06:21Z",
      "updated_at": "2023-07-03T21:19:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251204807",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251204807"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251210983",
      "pull_request_review_id": 1511646387,
      "id": 1251210983,
      "node_id": "PRRC_kwDOABII585Kk_bn",
      "diff_hunk": "@@ -0,0 +1,460 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=100)",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": null,
      "original_position": 75,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "8e3d924f02ee28043e8844a301389915823e5893",
      "in_reply_to_id": 1246199879,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Used 3×target_fee_rate instead",
      "created_at": "2023-07-03T19:14:38Z",
      "updated_at": "2023-07-03T21:19:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251210983",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251210983"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251230645",
      "pull_request_review_id": 1511646387,
      "id": 1251230645,
      "node_id": "PRRC_kwDOABII585KlEO1",
      "diff_hunk": "@@ -80,7 +80,19 @@ static feebumper::Result CheckFeeRate(const CWallet& wallet, const CFeeRate& new\n         return feebumper::Result::WALLET_ERROR;\n     }\n \n-    CAmount new_total_fee = newFeerate.GetFee(maxTxSize);\n+    std::vector<COutPoint> reused_inputs;\n+    reused_inputs.reserve(mtx.vin.size());\n+    for (const CTxIn& txin : mtx.vin) {\n+        reused_inputs.push_back(txin.prevout);\n+    }\n+\n+    std::map<COutPoint, CAmount> bump_fees = wallet.chain().CalculateBumpFees(reused_inputs, newFeerate);",
      "path": "src/wallet/feebumper.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "f2daebf8d1ac3829faa6443425cb97a763e9f780",
      "in_reply_to_id": 1248213082,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oops, I only fixed the rename in the next commit. Fixing.",
      "created_at": "2023-07-03T19:49:44Z",
      "updated_at": "2023-07-03T21:19:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251230645",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251230645"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 89,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251243230",
      "pull_request_review_id": 1511646387,
      "id": 1251243230,
      "node_id": "PRRC_kwDOABII585KlHTe",
      "diff_hunk": "@@ -0,0 +1,460 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": 76,
      "original_position": 72,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "8e3d924f02ee28043e8844a301389915823e5893",
      "in_reply_to_id": 1246207242,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I’m not sure I see a big difference between setting up the wallet with a confirmed UTXO from which I send an unconfirmed transaction with a varying feerate, or setting up the wallet to have an unconfirmed UTXO with varying feerate. The former may have the advantage that when I need multiple UTXOs, it’s easier to understand what’s different.\r\n\r\nCurrently expecting to keep it this way",
      "created_at": "2023-07-03T20:05:00Z",
      "updated_at": "2023-07-03T21:19:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251243230",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251243230"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 76,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251248054",
      "pull_request_review_id": 1511646387,
      "id": 1251248054,
      "node_id": "PRRC_kwDOABII585KlIe2",
      "diff_hunk": "@@ -0,0 +1,460 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=100)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": null,
      "original_position": 85,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "8e3d924f02ee28043e8844a301389915823e5893",
      "in_reply_to_id": 1246215741,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, that check doesn’t make sense, I’ve removed it.",
      "created_at": "2023-07-03T20:08:53Z",
      "updated_at": "2023-07-03T21:19:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251248054",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251248054"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251261058",
      "pull_request_review_id": 1511646387,
      "id": 1251261058,
      "node_id": "PRRC_kwDOABII585KlLqC",
      "diff_hunk": "@@ -573,6 +573,28 @@ util::Result<SelectionResult> ChooseSelectionResult(const CWallet& wallet, const\n                              \"Please try sending a smaller amount or manually consolidating your wallet's UTXOs\")};\n     }\n \n+    // If the chosen input set has unconfirmed inputs, check for synergies from overlapping ancestry\n+    for (auto& result : eligible_results) {\n+        std::vector<COutPoint> outpoints;\n+        CAmount summed_bump_fees = 0;\n+        std::set<COutput> coins = result.GetInputSet();\n+        for (auto& coin : coins) {\n+            if (coin.depth > 0) continue; // Bump fees only exist for unconfirmed inputs\n+            outpoints.push_back(coin.outpoint);\n+            summed_bump_fees += coin.ancestor_bump_fees;\n+        }\n+        std::optional<CAmount> grouped_bump_fees = wallet.chain().CalculateTotalBumpFees(outpoints, coin_selection_params.m_effective_feerate);\n+        if (!grouped_bump_fees.has_value()) {\n+            return util::Error{_(\"Failed to calculate bump fees, because unconfirmed UTXOs depend on enormous cluster of unconfirmed transactions.\")};\n+        }\n+        CAmount bump_fee_overestimate = summed_bump_fees - grouped_bump_fees.value();\n+        if (bump_fee_overestimate) {\n+            result.SetBumpFeeDiscount(bump_fee_overestimate);\n+            // Update waste\n+            result.ComputeAndSetWaste(coin_selection_params.min_viable_change, coin_selection_params.m_cost_of_change, coin_selection_params.m_change_fee);",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "in_reply_to_id": 1221051466,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Staring more at this, I am starting to wonder whether this would produce the same waste score for all possible BnB solutions, since BnB calculates the waste score with different parameters at the end of `SelectCoinsBnB()`. It does pass the coin selection tests. (I’ll let the fuzzer run over night to see whether that finds something else.)",
      "created_at": "2023-07-03T20:27:27Z",
      "updated_at": "2023-07-03T21:19:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251261058",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251261058"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 629,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251575760",
      "pull_request_review_id": 1512188451,
      "id": 1251575760,
      "node_id": "PRRC_kwDOABII585KmYfQ",
      "diff_hunk": "@@ -0,0 +1,458 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    # Meta-Test: try feerate testing function on confirmed UTXO\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": null,
      "original_position": 67,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "in_reply_to_id": null,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: since you create new wallet for every test and never reuse any addresses do you really need to generate blocks? I tried to delete and the tests pass",
      "created_at": "2023-07-04T06:54:29Z",
      "updated_at": "2023-07-06T07:37:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251575760",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251575760"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251588782",
      "pull_request_review_id": 1512188451,
      "id": 1251588782,
      "node_id": "PRRC_kwDOABII585Kmbqu",
      "diff_hunk": "@@ -0,0 +1,458 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    # Meta-Test: try feerate testing function on confirmed UTXO\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from high-feerate parent\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=3*self.target_fee_rate)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from low-feerate parent. Expect that parent gets\n+    # bumped to target feerate.\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend UTXO with unconfirmed low feerate parent and grandparent\n+    # txs. Expect that both ancestors get bumped to target feerate.\n+    def test_chain_of_unconfirmed_low(self):\n+        self.log.info(\"Start test with parent and grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=1)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(p_tx)",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": 129,
      "original_position": 128,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "in_reply_to_id": null,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: here and other tests add `self.assert_spends_only_parent`",
      "created_at": "2023-07-04T07:07:39Z",
      "updated_at": "2023-07-06T07:37:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251588782",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251588782"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 129,
      "original_line": 129,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251589066",
      "pull_request_review_id": 1512188451,
      "id": 1251589066,
      "node_id": "PRRC_kwDOABII585KmbvK",
      "diff_hunk": "@@ -0,0 +1,458 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    # Meta-Test: try feerate testing function on confirmed UTXO\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from high-feerate parent\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=3*self.target_fee_rate)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from low-feerate parent. Expect that parent gets\n+    # bumped to target feerate.\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend UTXO with unconfirmed low feerate parent and grandparent\n+    # txs. Expect that both ancestors get bumped to target feerate.\n+    def test_chain_of_unconfirmed_low(self):\n+        self.log.info(\"Start test with parent and grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=1)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": 135,
      "original_position": 133,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "in_reply_to_id": null,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: add `self.assert_spends_only_parent`",
      "created_at": "2023-07-04T07:07:57Z",
      "updated_at": "2023-07-06T07:37:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251589066",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251589066"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 135,
      "original_line": 135,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251595920",
      "pull_request_review_id": 1512188451,
      "id": 1251595920,
      "node_id": "PRRC_kwDOABII585KmdaQ",
      "diff_hunk": "@@ -0,0 +1,458 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    # Meta-Test: try feerate testing function on confirmed UTXO\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from high-feerate parent\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=3*self.target_fee_rate)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from low-feerate parent. Expect that parent gets\n+    # bumped to target feerate.\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend UTXO with unconfirmed low feerate parent and grandparent\n+    # txs. Expect that both ancestors get bumped to target feerate.\n+    def test_chain_of_unconfirmed_low(self):\n+        self.log.info(\"Start test with parent and grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=1)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": null,
      "original_position": 136,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "in_reply_to_id": null,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Here and other tests.I'm not sure the magic number is needed. I tried setting the multiplier to 1 and the tests still pass. Maybe just check that resulting fee rate is exactly equal to target fee rate?",
      "created_at": "2023-07-04T07:13:17Z",
      "updated_at": "2023-07-06T07:37:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251595920",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251595920"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253422291",
      "pull_request_review_id": 1515014286,
      "id": 1253422291,
      "node_id": "PRRC_kwDOABII585KtbTT",
      "diff_hunk": "@@ -86,37 +86,35 @@ static feebumper::Result CheckFeeRate(const CWallet& wallet, const CMutableTrans\n         reused_inputs.push_back(txin.prevout);\n     }\n \n-    std::map<COutPoint, CAmount> bump_fees = wallet.chain().CalculateIndividualBumpFees(reused_inputs, newFeerate);\n-    CAmount total_bump_fees = 0;\n-    for (auto& [_, bump_fee] : bump_fees) {\n-        total_bump_fees += bump_fee;\n+    std::optional<CAmount> combined_bump_fee = wallet.chain().CalculateCombinedBumpFee(reused_inputs, newFeerate);\n+    if (!combined_bump_fee.has_value()) {\n+        errors.push_back(strprintf(Untranslated(\"Failed to calculate bump fees, because unconfirmed UTXOs depend on enormous cluster of unconfirmed transactions.\")));\n     }\n-\n-    CAmount new_total_fee = newFeerate.GetFee(maxTxSize) + total_bump_fees;\n+    CAmount fees_including_bump_fees = newFeerate.GetFee(maxTxSize) + combined_bump_fee.value();",
      "path": "src/wallet/feebumper.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6 \"Amend bumpfee for inputs with overlapping ancestry\"\r\n\r\nnit: I'd prefer if variables were not renamed if they don't need to be, it makes review of this commit slightly harder and unnecessarily breaks git blame. `new_total_fee` is still a valid description of what this variable contains.",
      "created_at": "2023-07-05T17:28:41Z",
      "updated_at": "2023-07-05T17:36:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1253422291",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253422291"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 93,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253424884",
      "pull_request_review_id": 1515014286,
      "id": 1253424884,
      "node_id": "PRRC_kwDOABII585Ktb70",
      "diff_hunk": "@@ -1034,7 +1052,7 @@ static util::Result<CreatedTransactionResult> CreateTransactionInternal(\n     if (nBytes == -1) {\n         return util::Error{_(\"Missing solving data for estimating transaction size\")};\n     }\n-    CAmount fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes) + result.GetSummedBumpFees();\n+    CAmount fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes) + result.GetSummedBumpFees() - result.GetBumpFeeDiscount();",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6 \"Amend bumpfee for inputs with overlapping ancestry\"\r\n\r\n`GetBumpFeeDiscount` is only used here. It doesn't seem like it's useful to require the caller to calculate the final bumpfee rather than having `SelectionResult` just do that when the the discount is applied and have a single method to return the bumpfees required for a particular selection.",
      "created_at": "2023-07-05T17:31:24Z",
      "updated_at": "2023-07-05T17:36:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1253424884",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253424884"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1054,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253427785",
      "pull_request_review_id": 1515014286,
      "id": 1253427785,
      "node_id": "PRRC_kwDOABII585KtcpJ",
      "diff_hunk": "@@ -609,6 +607,26 @@ util::Result<SelectionResult> ChooseSelectionResult(const CAmount& nTargetValue,\n         return errors.empty() ? util::Error() : errors.front();\n     }\n \n+    // If the chosen input set has unconfirmed inputs, check for synergies from overlapping ancestry\n+    for (auto& result : results) {\n+        std::vector<COutPoint> outpoints;\n+        std::set<std::shared_ptr<COutput>> coins = result.GetInputSet();\n+        for (auto& coin : coins) {\n+            if (coin->depth > 0) continue; // Bump fees only exist for unconfirmed inputs\n+            outpoints.push_back(coin->outpoint);\n+        }\n+        std::optional<CAmount> combined_bump_fee = chain.CalculateCombinedBumpFee(outpoints, coin_selection_params.m_effective_feerate);\n+        if (!combined_bump_fee.has_value()) {\n+            return util::Error{_(\"Failed to calculate bump fees, because unconfirmed UTXOs depend on enormous cluster of unconfirmed transactions.\")};\n+        }\n+        CAmount bump_fee_overestimate = result.GetSummedBumpFees() - combined_bump_fee.value();\n+        if (bump_fee_overestimate) {\n+            result.SetBumpFeeDiscount(bump_fee_overestimate);\n+            // Update waste",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 65,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6 \"Amend bumpfee for inputs with overlapping ancestry\"\r\n\r\nnit: this comment seems to be misplaced?",
      "created_at": "2023-07-05T17:34:33Z",
      "updated_at": "2023-07-05T17:36:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1253427785",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253427785"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 625,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253447995",
      "pull_request_review_id": 1488907492,
      "id": 1253447995,
      "node_id": "PRRC_kwDOABII585Kthk7",
      "diff_hunk": "@@ -71,6 +72,9 @@ struct COutput {\n     /** The fee required to spend this output at the consolidation feerate. */\n     CAmount long_term_fee{0};\n \n+    /** The fee necessary to bump this UTXO's ancestor transactions to the target feerate */\n+    CAmount ancestor_bump_fees{0};\n+\n     COutput(const COutPoint& outpoint, const CTxOut& txout, int depth, int input_bytes, bool spendable, bool solvable, bool safe, int64_t time, bool from_me, const std::optional<CFeeRate> feerate = std::nullopt)",
      "path": "src/wallet/coinselection.h",
      "position": 28,
      "original_position": 28,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "in_reply_to_id": null,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 232edb7e5d630d9d687ba3089aa4028f8e0380a4 \" Bump unconfirmed parent txs to target feerate \"\r\n\r\nNot directly related to this PR, but it would be helpful to write a comment about how the second `COutput` constructor (beneath this one) is only used in tests.",
      "created_at": "2023-07-05T17:55:15Z",
      "updated_at": "2023-07-05T18:05:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1253447995",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253447995"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 78,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253452419",
      "pull_request_review_id": 1515060542,
      "id": 1253452419,
      "node_id": "PRRC_kwDOABII585KtiqD",
      "diff_hunk": "@@ -86,37 +86,35 @@ static feebumper::Result CheckFeeRate(const CWallet& wallet, const CMutableTrans\n         reused_inputs.push_back(txin.prevout);\n     }\n \n-    std::map<COutPoint, CAmount> bump_fees = wallet.chain().CalculateIndividualBumpFees(reused_inputs, newFeerate);\n-    CAmount total_bump_fees = 0;\n-    for (auto& [_, bump_fee] : bump_fees) {\n-        total_bump_fees += bump_fee;\n+    std::optional<CAmount> combined_bump_fee = wallet.chain().CalculateCombinedBumpFee(reused_inputs, newFeerate);\n+    if (!combined_bump_fee.has_value()) {\n+        errors.push_back(strprintf(Untranslated(\"Failed to calculate bump fees, because unconfirmed UTXOs depend on enormous cluster of unconfirmed transactions.\")));\n     }\n-\n-    CAmount new_total_fee = newFeerate.GetFee(maxTxSize) + total_bump_fees;\n+    CAmount fees_including_bump_fees = newFeerate.GetFee(maxTxSize) + combined_bump_fee.value();",
      "path": "src/wallet/feebumper.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "in_reply_to_id": 1253422291,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Okay, will be reverting to `new_total_fee`",
      "created_at": "2023-07-05T17:59:49Z",
      "updated_at": "2023-07-05T20:43:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1253452419",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253452419"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 93,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253454337",
      "pull_request_review_id": 1515060542,
      "id": 1253454337,
      "node_id": "PRRC_kwDOABII585KtjIB",
      "diff_hunk": "@@ -609,6 +607,26 @@ util::Result<SelectionResult> ChooseSelectionResult(const CAmount& nTargetValue,\n         return errors.empty() ? util::Error() : errors.front();\n     }\n \n+    // If the chosen input set has unconfirmed inputs, check for synergies from overlapping ancestry\n+    for (auto& result : results) {\n+        std::vector<COutPoint> outpoints;\n+        std::set<std::shared_ptr<COutput>> coins = result.GetInputSet();\n+        for (auto& coin : coins) {\n+            if (coin->depth > 0) continue; // Bump fees only exist for unconfirmed inputs\n+            outpoints.push_back(coin->outpoint);\n+        }\n+        std::optional<CAmount> combined_bump_fee = chain.CalculateCombinedBumpFee(outpoints, coin_selection_params.m_effective_feerate);\n+        if (!combined_bump_fee.has_value()) {\n+            return util::Error{_(\"Failed to calculate bump fees, because unconfirmed UTXOs depend on enormous cluster of unconfirmed transactions.\")};\n+        }\n+        CAmount bump_fee_overestimate = result.GetSummedBumpFees() - combined_bump_fee.value();\n+        if (bump_fee_overestimate) {\n+            result.SetBumpFeeDiscount(bump_fee_overestimate);\n+            // Update waste",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 65,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "in_reply_to_id": 1253427785,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, thanks, I removed the earlier instances of ComputeAndSetWaste where the results get returned from the various coin selection algorithms and instead of selectively updating here, always calculate it here now. I just forgot to remove the comment.",
      "created_at": "2023-07-05T18:02:06Z",
      "updated_at": "2023-07-05T20:43:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1253454337",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253454337"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 625,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253624315",
      "pull_request_review_id": 1515060542,
      "id": 1253624315,
      "node_id": "PRRC_kwDOABII585KuMn7",
      "diff_hunk": "@@ -1034,7 +1052,7 @@ static util::Result<CreatedTransactionResult> CreateTransactionInternal(\n     if (nBytes == -1) {\n         return util::Error{_(\"Missing solving data for estimating transaction size\")};\n     }\n-    CAmount fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes) + result.GetSummedBumpFees();\n+    CAmount fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes) + result.GetSummedBumpFees() - result.GetBumpFeeDiscount();",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "in_reply_to_id": 1253424884,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I’ve been doing some staring at this today. It seems to me that the waste score of finished input sets should also be adjusted according to the bump fee discount. Gotta do more pondering, will get back to this.",
      "created_at": "2023-07-05T20:42:35Z",
      "updated_at": "2023-07-05T20:43:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1253624315",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253624315"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1054,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254028212",
      "pull_request_review_id": 1512188451,
      "id": 1254028212,
      "node_id": "PRRC_kwDOABII585KvvO0",
      "diff_hunk": "@@ -0,0 +1,458 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": null,
      "original_position": 44,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "in_reply_to_id": null,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This could be extended to a set of parent txs to verify cases with multiple parents",
      "created_at": "2023-07-06T07:10:44Z",
      "updated_at": "2023-07-06T07:37:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1254028212",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254028212"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254037039",
      "pull_request_review_id": 1512188451,
      "id": 1254037039,
      "node_id": "PRRC_kwDOABII585KvxYv",
      "diff_hunk": "@@ -0,0 +1,458 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    # Meta-Test: try feerate testing function on confirmed UTXO\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from high-feerate parent\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=3*self.target_fee_rate)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from low-feerate parent. Expect that parent gets\n+    # bumped to target feerate.\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend UTXO with unconfirmed low feerate parent and grandparent\n+    # txs. Expect that both ancestors get bumped to target feerate.\n+    def test_chain_of_unconfirmed_low(self):\n+        self.log.info(\"Start test with parent and grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=1)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXOs from two low feerate parent txs.\n+    def test_two_low_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs\")\n+        wallet = self.setup_and_fund_wallet(\"two_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        parent_one_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_one_tx = wallet.gettransaction(txid=parent_one_txid, verbose=True)\n+        self.assert_undershoots_target(p_one_tx)\n+\n+        parent_two_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_two_tx = wallet.gettransaction(txid=parent_two_txid, verbose=True)\n+        self.assert_undershoots_target(p_two_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_one_tx, p_two_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend two unconfirmed inputs, one each from low and high feerate parents\n+    def test_mixed_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs one of which has a higher feerate\")\n+        wallet = self.setup_and_fund_wallet(\"two_mixed_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        high_parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=self.target_fee_rate*2)\n+        p_high_tx = wallet.gettransaction(txid=high_parent_txid, verbose=True)\n+        # This time the parent is greater than the child\n+        self.assert_beats_target(p_high_tx)\n+\n+        parent_low_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_low_tx = wallet.gettransaction(txid=parent_low_txid, verbose=True)\n+        # Other parent needs bump\n+        self.assert_undershoots_target(p_low_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_high_tx, p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        resulting_bumped_ancestry_fee_rate = self.calc_set_fee_rate([p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_bumped_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_bumped_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend from chain with high feerate grandparent and low feerate parent\n+    def test_chain_of_high_low(self):\n+        self.log.info(\"Start test with low parent and high grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"high_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=self.target_fee_rate * 10)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        # grandparent has higher feerate\n+        self.assert_beats_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        # parent is low feerate\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+        resulting_ancestry_fee_rate_with_high_feerate_gp = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate_with_high_feerate_gp, self.target_fee_rate*1.1)",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": 228,
      "original_position": 225,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "in_reply_to_id": null,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: why there is a multiplier here?",
      "created_at": "2023-07-06T07:19:26Z",
      "updated_at": "2023-07-06T07:37:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1254037039",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254037039"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 228,
      "original_line": 228,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254044504",
      "pull_request_review_id": 1512188451,
      "id": 1254044504,
      "node_id": "PRRC_kwDOABII585KvzNY",
      "diff_hunk": "@@ -195,6 +196,7 @@ util::Result<PreSelectedInputs> FetchSelectedInputs(const CWallet& wallet, const\n \n         /* Set some defaults for depth, spendable, solvable, safe, time, and from_me as these don't matter for preset inputs since no selection is being done. */\n         COutput output(outpoint, txout, /*depth=*/ 0, input_bytes, /*spendable=*/ true, /*solvable=*/ true, /*safe=*/ true, /*time=*/ 0, /*from_me=*/ false, coin_selection_params.m_effective_feerate);\n+        output.ApplyBumpFee(map_of_bump_fees.at(output.outpoint));",
      "path": "src/wallet/spend.cpp",
      "position": 12,
      "original_position": 12,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "8e3d924f02ee28043e8844a301389915823e5893",
      "in_reply_to_id": 1235753039,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Isn't `test_preset_input_cpfp` testing this?",
      "created_at": "2023-07-06T07:26:41Z",
      "updated_at": "2023-07-06T07:37:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1254044504",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254044504"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 201,
      "original_line": 201,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254048054",
      "pull_request_review_id": 1512188451,
      "id": 1254048054,
      "node_id": "PRRC_kwDOABII585Kv0E2",
      "diff_hunk": "@@ -0,0 +1,458 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    # Meta-Test: try feerate testing function on confirmed UTXO\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from high-feerate parent\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=3*self.target_fee_rate)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from low-feerate parent. Expect that parent gets\n+    # bumped to target feerate.\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend UTXO with unconfirmed low feerate parent and grandparent\n+    # txs. Expect that both ancestors get bumped to target feerate.\n+    def test_chain_of_unconfirmed_low(self):\n+        self.log.info(\"Start test with parent and grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=1)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXOs from two low feerate parent txs.\n+    def test_two_low_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs\")\n+        wallet = self.setup_and_fund_wallet(\"two_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        parent_one_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_one_tx = wallet.gettransaction(txid=parent_one_txid, verbose=True)\n+        self.assert_undershoots_target(p_one_tx)\n+\n+        parent_two_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_two_tx = wallet.gettransaction(txid=parent_two_txid, verbose=True)\n+        self.assert_undershoots_target(p_two_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_one_tx, p_two_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend two unconfirmed inputs, one each from low and high feerate parents\n+    def test_mixed_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs one of which has a higher feerate\")\n+        wallet = self.setup_and_fund_wallet(\"two_mixed_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        high_parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=self.target_fee_rate*2)\n+        p_high_tx = wallet.gettransaction(txid=high_parent_txid, verbose=True)\n+        # This time the parent is greater than the child\n+        self.assert_beats_target(p_high_tx)\n+\n+        parent_low_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_low_tx = wallet.gettransaction(txid=parent_low_txid, verbose=True)\n+        # Other parent needs bump\n+        self.assert_undershoots_target(p_low_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_high_tx, p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        resulting_bumped_ancestry_fee_rate = self.calc_set_fee_rate([p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_bumped_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_bumped_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend from chain with high feerate grandparent and low feerate parent\n+    def test_chain_of_high_low(self):\n+        self.log.info(\"Start test with low parent and high grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"high_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=self.target_fee_rate * 10)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        # grandparent has higher feerate\n+        self.assert_beats_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        # parent is low feerate\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+        resulting_ancestry_fee_rate_with_high_feerate_gp = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate_with_high_feerate_gp, self.target_fee_rate*1.1)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend UTXO from chain of unconfirmed transactions with low feerate\n+    # grandparent and even lower feerate parent\n+    def test_chain_of_high_low_below_target_feerate(self):\n+        self.log.info(\"Start test with low parent and higher low grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"low_and_lower_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=5)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+\n+        # grandparent has higher feerate, but below target\n+        self.assert_undershoots_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        # parent even lower\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Test fee calculation when bumping while using subtract fee from output (SFFO)\n+    def test_target_feerate_unconfirmed_low_sffo(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input, while subtracting from output\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet_sffo\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate, subtractfeefromamount=True)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Test that parents of preset unconfirmed inputs get cpfp'ed\n+    def test_preset_input_cpfp(self):\n+        self.log.info(\"Start test with preset input from low feerate unconfirmed transaction\")\n+        wallet = self.setup_and_fund_wallet(\"preset_input\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        number_outputs = len(parent_tx[\"decoded\"][\"vout\"])\n+        assert_equal(number_outputs, 2)\n+\n+        # we don't care which of the two outputs we spent, they're both ours\n+        ancestor_aware_txid = wallet.send(outputs=[{self.def_wallet.getnewaddress(): 0.5}], fee_rate=self.target_fee_rate, options={\"add_inputs\": True, \"inputs\": [{\"txid\": parent_txid, \"vout\": 0}]})[\"txid\"]\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Test that RBFing a transaction with unconfirmed input gets the right feerate\n+    def test_rbf_bumping(self):\n+        self.log.info(\"Start test to rbf a transaction unconfirmed input to bump it\")\n+        wallet = self.setup_and_fund_wallet(\"bump\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        to_be_rbfed_ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate, subtractfeefromamount=True)",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": null,
      "original_position": 318,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "in_reply_to_id": null,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: sffo is not needed",
      "created_at": "2023-07-06T07:30:04Z",
      "updated_at": "2023-07-06T07:37:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1254048054",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254048054"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 318,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254378046",
      "pull_request_review_id": 1516450673,
      "id": 1254378046,
      "node_id": "PRRC_kwDOABII585KxEo-",
      "diff_hunk": "@@ -195,6 +196,7 @@ util::Result<PreSelectedInputs> FetchSelectedInputs(const CWallet& wallet, const\n \n         /* Set some defaults for depth, spendable, solvable, safe, time, and from_me as these don't matter for preset inputs since no selection is being done. */\n         COutput output(outpoint, txout, /*depth=*/ 0, input_bytes, /*spendable=*/ true, /*solvable=*/ true, /*safe=*/ true, /*time=*/ 0, /*from_me=*/ false, coin_selection_params.m_effective_feerate);\n+        output.ApplyBumpFee(map_of_bump_fees.at(output.outpoint));",
      "path": "src/wallet/spend.cpp",
      "position": 12,
      "original_position": 12,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "8e3d924f02ee28043e8844a301389915823e5893",
      "in_reply_to_id": 1235753039,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In that test don't all of the pre-selected inputs belong to the wallet?",
      "created_at": "2023-07-06T12:38:31Z",
      "updated_at": "2023-07-06T12:38:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1254378046",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254378046"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 201,
      "original_line": 201,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254760855",
      "pull_request_review_id": 1517059378,
      "id": 1254760855,
      "node_id": "PRRC_kwDOABII585KyiGX",
      "diff_hunk": "@@ -573,6 +573,28 @@ util::Result<SelectionResult> ChooseSelectionResult(const CWallet& wallet, const\n                              \"Please try sending a smaller amount or manually consolidating your wallet's UTXOs\")};\n     }\n \n+    // If the chosen input set has unconfirmed inputs, check for synergies from overlapping ancestry\n+    for (auto& result : eligible_results) {\n+        std::vector<COutPoint> outpoints;\n+        CAmount summed_bump_fees = 0;\n+        std::set<COutput> coins = result.GetInputSet();\n+        for (auto& coin : coins) {\n+            if (coin.depth > 0) continue; // Bump fees only exist for unconfirmed inputs\n+            outpoints.push_back(coin.outpoint);\n+            summed_bump_fees += coin.ancestor_bump_fees;\n+        }\n+        std::optional<CAmount> grouped_bump_fees = wallet.chain().CalculateTotalBumpFees(outpoints, coin_selection_params.m_effective_feerate);\n+        if (!grouped_bump_fees.has_value()) {\n+            return util::Error{_(\"Failed to calculate bump fees, because unconfirmed UTXOs depend on enormous cluster of unconfirmed transactions.\")};\n+        }\n+        CAmount bump_fee_overestimate = summed_bump_fees - grouped_bump_fees.value();\n+        if (bump_fee_overestimate) {\n+            result.SetBumpFeeDiscount(bump_fee_overestimate);\n+            // Update waste\n+            result.ComputeAndSetWaste(coin_selection_params.min_viable_change, coin_selection_params.m_cost_of_change, coin_selection_params.m_change_fee);",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "in_reply_to_id": 1221051466,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Did about 40M executions, and no issues! Gonna calculate the Waste score below here as discussed.",
      "created_at": "2023-07-06T18:01:12Z",
      "updated_at": "2023-07-06T18:01:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1254760855",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254760855"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 629,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1257771285",
      "pull_request_review_id": 1521321873,
      "id": 1257771285,
      "node_id": "PRRC_kwDOABII585K-BEV",
      "diff_hunk": "@@ -195,6 +196,7 @@ util::Result<PreSelectedInputs> FetchSelectedInputs(const CWallet& wallet, const\n \n         /* Set some defaults for depth, spendable, solvable, safe, time, and from_me as these don't matter for preset inputs since no selection is being done. */\n         COutput output(outpoint, txout, /*depth=*/ 0, input_bytes, /*spendable=*/ true, /*solvable=*/ true, /*safe=*/ true, /*time=*/ 0, /*from_me=*/ false, coin_selection_params.m_effective_feerate);\n+        output.ApplyBumpFee(map_of_bump_fees.at(output.outpoint));",
      "path": "src/wallet/spend.cpp",
      "position": 12,
      "original_position": 12,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "8e3d924f02ee28043e8844a301389915823e5893",
      "in_reply_to_id": 1235753039,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ah, yes, you're right",
      "created_at": "2023-07-10T06:29:50Z",
      "updated_at": "2023-07-10T06:29:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1257771285",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1257771285"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 201,
      "original_line": 201,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1259300260",
      "pull_request_review_id": 1523593341,
      "id": 1259300260,
      "node_id": "PRRC_kwDOABII585LD2Wk",
      "diff_hunk": "@@ -573,6 +573,28 @@ util::Result<SelectionResult> ChooseSelectionResult(const CWallet& wallet, const\n                              \"Please try sending a smaller amount or manually consolidating your wallet's UTXOs\")};\n     }\n \n+    // If the chosen input set has unconfirmed inputs, check for synergies from overlapping ancestry\n+    for (auto& result : eligible_results) {\n+        std::vector<COutPoint> outpoints;\n+        CAmount summed_bump_fees = 0;\n+        std::set<COutput> coins = result.GetInputSet();\n+        for (auto& coin : coins) {\n+            if (coin.depth > 0) continue; // Bump fees only exist for unconfirmed inputs\n+            outpoints.push_back(coin.outpoint);\n+            summed_bump_fees += coin.ancestor_bump_fees;\n+        }\n+        std::optional<CAmount> grouped_bump_fees = wallet.chain().CalculateTotalBumpFees(outpoints, coin_selection_params.m_effective_feerate);\n+        if (!grouped_bump_fees.has_value()) {\n+            return util::Error{_(\"Failed to calculate bump fees, because unconfirmed UTXOs depend on enormous cluster of unconfirmed transactions.\")};\n+        }\n+        CAmount bump_fee_overestimate = summed_bump_fees - grouped_bump_fees.value();\n+        if (bump_fee_overestimate) {\n+            result.SetBumpFeeDiscount(bump_fee_overestimate);\n+            // Update waste\n+            result.ComputeAndSetWaste(coin_selection_params.min_viable_change, coin_selection_params.m_cost_of_change, coin_selection_params.m_change_fee);",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "in_reply_to_id": 1221051466,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In theory the waste score should be the same.\r\n\r\nBecause not all of the params are available within BnB we call\r\n`result.ComputeAndSetWaste(cost_of_change, cost_of_change, 0);`\r\ninstead of\r\n`result.ComputeAndSetWaste(min_viable_change, cost_of_change, change_fee);`\r\n\r\nI believe this should be fine as BnB will not produce results with more than `cost_of_change` excess and therefore `GetChange()` will always return 0 and then `change_fee` doesn't matter.",
      "created_at": "2023-07-11T07:22:31Z",
      "updated_at": "2023-07-11T07:22:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1259300260",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1259300260"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 629,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1260665410",
      "pull_request_review_id": 1525610270,
      "id": 1260665410,
      "node_id": "PRRC_kwDOABII585LJDpC",
      "diff_hunk": "@@ -1034,7 +1052,7 @@ static util::Result<CreatedTransactionResult> CreateTransactionInternal(\n     if (nBytes == -1) {\n         return util::Error{_(\"Missing solving data for estimating transaction size\")};\n     }\n-    CAmount fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes) + result.GetSummedBumpFees();\n+    CAmount fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes) + result.GetSummedBumpFees() - result.GetBumpFeeDiscount();",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "in_reply_to_id": 1253424884,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, the discount value is a function of the effective fee rate, therefore it has to be taken into account in waste calculation. The problem is that GetSelectionWaste doesn't use SelectionResult.GetEffectiveValue() which already accounts for bump fee discoun",
      "created_at": "2023-07-12T06:32:26Z",
      "updated_at": "2023-07-12T06:32:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1260665410",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1260665410"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1054,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268057988",
      "pull_request_review_id": 1537066023,
      "id": 1268057988,
      "node_id": "PRRC_kwDOABII585LlQeE",
      "diff_hunk": "@@ -280,141 +280,141 @@ BOOST_FIXTURE_TEST_CASE(miniminer_overlap, TestChain100Setup)\n     LOCK2(::cs_main, pool.cs);\n     TestMemPoolEntryHelper entry;\n ",
      "path": "src/test/miniminer_tests.cpp",
      "position": 278,
      "original_position": 3,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "0c4ff4921087baf4ee00995be910241c3595cbe9",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 0c4ff4921087baf4ee00995be910241c3595cbe9 \r\n>  This commit matches the\r\nnames to the transactions’ vector indices for better readability\r\n\r\nThis only applies to `miniminer_overlap` \r\n`miniminer_1p1c`  test case transactions name still starts at 1.",
      "created_at": "2023-07-19T13:14:27Z",
      "updated_at": "2023-07-19T14:55:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1268057988",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268057988"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 310,
      "original_line": 310,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268063062",
      "pull_request_review_id": 1537066023,
      "id": 1268063062,
      "node_id": "PRRC_kwDOABII585LlRtW",
      "diff_hunk": "@@ -327,10 +354,16 @@ BOOST_FIXTURE_TEST_CASE(miniminer_overlap, TestChain100Setup)\n     const auto tx3_feerate = CFeeRate(high_fee, tx_vsizes[3]);\n     // tx3's feerate is lower than tx2's. same fee, different weight.\n     BOOST_CHECK(tx2_feerate > tx3_feerate);\n-    const auto tx3_anc_feerate = CFeeRate(low_fee + med_fee + high_fee, tx_vsizes[0] + tx_vsizes[1] + tx_vsizes[3]);\n+    const auto tx3_anc_feerate = CFeeRate(low_fee + med_fee + high_fee + high_fee, tx_vsizes[0] + tx_vsizes[1] + tx_vsizes[2] + tx_vsizes[3]);\n+    const auto tx3_iter = pool.GetIter(tx3->GetHash());\n+    BOOST_CHECK(tx3_anc_feerate == CFeeRate(tx3_iter.value()->GetModFeesWithAncestors(), tx3_iter.value()->GetSizeWithAncestors()));\n     const auto tx4_feerate = CFeeRate(high_fee, tx_vsizes[4]);\n-    const auto tx6_anc_feerate = CFeeRate(low_fee + med_fee, tx_vsizes[5] + tx_vsizes[6]);\n-    const auto tx7_anc_feerate = CFeeRate(low_fee + high_fee, tx_vsizes[5] + tx_vsizes[7]);\n+    const auto tx6_anc_feerate = CFeeRate(high_fee + low_fee + med_fee, tx_vsizes[4] + tx_vsizes[5] + tx_vsizes[6]);\n+    const auto tx6_iter = pool.GetIter(tx6->GetHash());\n+    BOOST_CHECK(tx6_anc_feerate == CFeeRate(tx6_iter.value()->GetModFeesWithAncestors(), tx6_iter.value()->GetSizeWithAncestors()));",
      "path": "src/test/miniminer_tests.cpp",
      "position": 370,
      "original_position": 47,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "3016245bab453cc52744ac8fc6820e431315dbde",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We can use `CFeeRate(transaction_iter.value()->GetModFeesWithAncestors(), transaction_iter.value()->GetSizeWithAncestors())` to get the ancestor fee rate why are we calculating manually?\r\nLike here ```tx6_anc_feerate = CFeeRate(high_fee + low_fee + med_fee, tx_vsizes[4] + tx_vsizes[5] + tx_vsizes[6]);``` and other places?",
      "created_at": "2023-07-19T13:18:21Z",
      "updated_at": "2023-07-19T14:55:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1268063062",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268063062"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 364,
      "original_line": 364,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268085294",
      "pull_request_review_id": 1537066023,
      "id": 1268085294,
      "node_id": "PRRC_kwDOABII585LlXIu",
      "diff_hunk": "@@ -38,6 +39,10 @@ class MiniMinerMempoolEntry\n     int64_t GetTxSize() const { return vsize_individual; }\n     int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n     const CTransaction& GetTx() const LIFETIMEBOUND { return *tx; }\n+    void UpdateAncestorState(int64_t vsize_change, CAmount fee_change) {",
      "path": "src/node/mini_miner.h",
      "position": 20,
      "original_position": 20,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "a3b178f3c082453120e816945cea220bc7397ee5",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: feel free to ignore\r\nslightly more code and less compact,  but I think it is better to have a separate function for decrement and increment, its clear and more explicit and you don't have to negate.",
      "created_at": "2023-07-19T13:33:54Z",
      "updated_at": "2023-07-19T14:55:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1268085294",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268085294"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268094484",
      "pull_request_review_id": 1537066023,
      "id": 1268094484,
      "node_id": "PRRC_kwDOABII585LlZYU",
      "diff_hunk": "@@ -104,6 +109,15 @@ struct COutput {\n         return outpoint < rhs.outpoint;\n     }\n \n+    void ApplyBumpFee(CAmount bump_fee)\n+    {\n+        assert(bump_fee >= 0);\n+        ancestor_bump_fees = bump_fee;\n+        *fee += bump_fee;",
      "path": "src/wallet/coinselection.h",
      "position": 48,
      "original_position": 47,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`fee` is an optional variable, is it safe to just increment it, as it may be `nullptr`\r\n```\r\nif (num) {\r\n    *num += bump_fee;\r\n}\r\n```",
      "created_at": "2023-07-19T13:40:36Z",
      "updated_at": "2023-07-19T14:55:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1268094484",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268094484"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 117,
      "original_line": 117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268098822",
      "pull_request_review_id": 1537066023,
      "id": 1268098822,
      "node_id": "PRRC_kwDOABII585LlacG",
      "diff_hunk": "@@ -0,0 +1,458 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": null,
      "original_position": 44,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "in_reply_to_id": 1254028212,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We can have something like\r\n```python\r\n\r\n    def assert_spends_only_parents(self, tx, parent_txids):\r\n        number_inputs = len(tx[\"decoded\"][\"vin\"])\r\n        assert_equal(number_inputs, len(parent_txids))\r\n        for i in range(number_inputs):\r\n            txid_of_input = tx[\"decoded\"][\"vin\"][i][\"txid\"]\r\n            assert txid_of_input in parent_txids\r\n``` ",
      "created_at": "2023-07-19T13:43:48Z",
      "updated_at": "2023-07-19T14:55:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1268098822",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268098822"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268667959",
      "pull_request_review_id": 1538028271,
      "id": 1268667959,
      "node_id": "PRRC_kwDOABII585LnlY3",
      "diff_hunk": "@@ -7,6 +7,7 @@\n #include <common/system.h>\n #include <consensus/amount.h>\n #include <consensus/consensus.h>\n+#include <interfaces/chain.h>",
      "path": "src/wallet/coinselection.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "8e3d924f02ee28043e8844a301389915823e5893",
      "in_reply_to_id": 1235758654,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah thanks, that belongs to the commit one later, where we need the chain interface to amend the bump fees in case of overlapping ancestries.",
      "created_at": "2023-07-19T21:09:22Z",
      "updated_at": "2023-07-19T21:09:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1268667959",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268667959"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 10,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291449745",
      "pull_request_review_id": 1573849093,
      "id": 1291449745,
      "node_id": "PRRC_kwDOABII585M-fWR",
      "diff_hunk": "@@ -71,6 +72,9 @@ struct COutput {\n     /** The fee required to spend this output at the consolidation feerate. */\n     CAmount long_term_fee{0};\n \n+    /** The fee necessary to bump this UTXO's ancestor transactions to the target feerate */\n+    CAmount ancestor_bump_fees{0};\n+\n     COutput(const COutPoint& outpoint, const CTxOut& txout, int depth, int input_bytes, bool spendable, bool solvable, bool safe, int64_t time, bool from_me, const std::optional<CFeeRate> feerate = std::nullopt)",
      "path": "src/wallet/coinselection.h",
      "position": 28,
      "original_position": 28,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "in_reply_to_id": 1253447995,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That seems a bit out of place in this PR.",
      "created_at": "2023-08-11T15:01:53Z",
      "updated_at": "2023-08-11T15:01:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1291449745",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291449745"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 78,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291453343",
      "pull_request_review_id": 1573855226,
      "id": 1291453343,
      "node_id": "PRRC_kwDOABII585M-gOf",
      "diff_hunk": "@@ -0,0 +1,458 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    # Meta-Test: try feerate testing function on confirmed UTXO\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": null,
      "original_position": 67,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "in_reply_to_id": 1251575760,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That’s right, I’ll remove the unnecessary block generation",
      "created_at": "2023-08-11T15:05:14Z",
      "updated_at": "2023-08-11T15:05:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1291453343",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291453343"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291490820",
      "pull_request_review_id": 1573913249,
      "id": 1291490820,
      "node_id": "PRRC_kwDOABII585M-pYE",
      "diff_hunk": "@@ -0,0 +1,458 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    # Meta-Test: try feerate testing function on confirmed UTXO\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from high-feerate parent\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=3*self.target_fee_rate)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from low-feerate parent. Expect that parent gets\n+    # bumped to target feerate.\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend UTXO with unconfirmed low feerate parent and grandparent\n+    # txs. Expect that both ancestors get bumped to target feerate.\n+    def test_chain_of_unconfirmed_low(self):\n+        self.log.info(\"Start test with parent and grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=1)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": null,
      "original_position": 136,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "in_reply_to_id": 1251595920,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Every once in a while we’ll get a signature that’s gonna be one byte smaller, so a little bit of a buffer will prevent intermittent failures. I reduced the buffers to 1%, though.",
      "created_at": "2023-08-11T15:19:39Z",
      "updated_at": "2023-08-11T15:19:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1291490820",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291490820"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291528300",
      "pull_request_review_id": 1573975175,
      "id": 1291528300,
      "node_id": "PRRC_kwDOABII585M-yhs",
      "diff_hunk": "@@ -0,0 +1,458 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": null,
      "original_position": 44,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "in_reply_to_id": 1254028212,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, good idea. I went with:\r\n\r\n```python\r\n    def assert_spends_only_parents(self, tx, parent_txids):\r\n        parent_checklist = parent_txids.copy()\r\n        number_inputs = len(tx[\"decoded\"][\"vin\"])\r\n        assert_equal(number_inputs, len(parent_txids))\r\n        for i in range(number_inputs):\r\n            txid_of_input = tx[\"decoded\"][\"vin\"][i][\"txid\"]\r\n            assert txid_of_input in parent_checklist\r\n            parent_checklist.remove(txid_of_input)\r\n```",
      "created_at": "2023-08-11T15:49:19Z",
      "updated_at": "2023-08-11T15:49:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1291528300",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291528300"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291532701",
      "pull_request_review_id": 1573982194,
      "id": 1291532701,
      "node_id": "PRRC_kwDOABII585M-zmd",
      "diff_hunk": "@@ -0,0 +1,458 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    # Meta-Test: try feerate testing function on confirmed UTXO\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from high-feerate parent\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=3*self.target_fee_rate)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from low-feerate parent. Expect that parent gets\n+    # bumped to target feerate.\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend UTXO with unconfirmed low feerate parent and grandparent\n+    # txs. Expect that both ancestors get bumped to target feerate.\n+    def test_chain_of_unconfirmed_low(self):\n+        self.log.info(\"Start test with parent and grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=1)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXOs from two low feerate parent txs.\n+    def test_two_low_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs\")\n+        wallet = self.setup_and_fund_wallet(\"two_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        parent_one_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_one_tx = wallet.gettransaction(txid=parent_one_txid, verbose=True)\n+        self.assert_undershoots_target(p_one_tx)\n+\n+        parent_two_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_two_tx = wallet.gettransaction(txid=parent_two_txid, verbose=True)\n+        self.assert_undershoots_target(p_two_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_one_tx, p_two_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend two unconfirmed inputs, one each from low and high feerate parents\n+    def test_mixed_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs one of which has a higher feerate\")\n+        wallet = self.setup_and_fund_wallet(\"two_mixed_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        high_parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=self.target_fee_rate*2)\n+        p_high_tx = wallet.gettransaction(txid=high_parent_txid, verbose=True)\n+        # This time the parent is greater than the child\n+        self.assert_beats_target(p_high_tx)\n+\n+        parent_low_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_low_tx = wallet.gettransaction(txid=parent_low_txid, verbose=True)\n+        # Other parent needs bump\n+        self.assert_undershoots_target(p_low_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_high_tx, p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        resulting_bumped_ancestry_fee_rate = self.calc_set_fee_rate([p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_bumped_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_bumped_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend from chain with high feerate grandparent and low feerate parent\n+    def test_chain_of_high_low(self):\n+        self.log.info(\"Start test with low parent and high grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"high_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=self.target_fee_rate * 10)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        # grandparent has higher feerate\n+        self.assert_beats_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        # parent is low feerate\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+        resulting_ancestry_fee_rate_with_high_feerate_gp = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate_with_high_feerate_gp, self.target_fee_rate*1.1)",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": 228,
      "original_position": 225,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "in_reply_to_id": 1254037039,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The grandparent transaction has a higher feerate, so we only need to bump the parent. We check that if we get the complete chain of unconfirmed transactions, that the resulting feerate is above our target.",
      "created_at": "2023-08-11T15:53:39Z",
      "updated_at": "2023-08-11T15:53:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1291532701",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291532701"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 228,
      "original_line": 228,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291548464",
      "pull_request_review_id": 1574007772,
      "id": 1291548464,
      "node_id": "PRRC_kwDOABII585M-3cw",
      "diff_hunk": "@@ -280,141 +280,141 @@ BOOST_FIXTURE_TEST_CASE(miniminer_overlap, TestChain100Setup)\n     LOCK2(::cs_main, pool.cs);\n     TestMemPoolEntryHelper entry;\n ",
      "path": "src/test/miniminer_tests.cpp",
      "position": 278,
      "original_position": 3,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "0c4ff4921087baf4ee00995be910241c3595cbe9",
      "in_reply_to_id": 1268057988,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I also updated the `miniminer_1p1c` test to match the transaction numbers to the indices",
      "created_at": "2023-08-11T16:09:45Z",
      "updated_at": "2023-08-11T16:09:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1291548464",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291548464"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 310,
      "original_line": 310,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291565216",
      "pull_request_review_id": 1574035854,
      "id": 1291565216,
      "node_id": "PRRC_kwDOABII585M-7ig",
      "diff_hunk": "@@ -38,6 +39,10 @@ class MiniMinerMempoolEntry\n     int64_t GetTxSize() const { return vsize_individual; }\n     int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n     const CTransaction& GetTx() const LIFETIMEBOUND { return *tx; }\n+    void UpdateAncestorState(int64_t vsize_change, CAmount fee_change) {",
      "path": "src/node/mini_miner.h",
      "position": 20,
      "original_position": 20,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "a3b178f3c082453120e816945cea220bc7397ee5",
      "in_reply_to_id": 1268085294,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That’s a good idea, but I’m gonna leave this, because this matches how we interact with the mempool entries.",
      "created_at": "2023-08-11T16:29:42Z",
      "updated_at": "2023-08-11T16:29:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1291565216",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291565216"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291575150",
      "pull_request_review_id": 1574051878,
      "id": 1291575150,
      "node_id": "PRRC_kwDOABII585M-99u",
      "diff_hunk": "@@ -327,10 +354,16 @@ BOOST_FIXTURE_TEST_CASE(miniminer_overlap, TestChain100Setup)\n     const auto tx3_feerate = CFeeRate(high_fee, tx_vsizes[3]);\n     // tx3's feerate is lower than tx2's. same fee, different weight.\n     BOOST_CHECK(tx2_feerate > tx3_feerate);\n-    const auto tx3_anc_feerate = CFeeRate(low_fee + med_fee + high_fee, tx_vsizes[0] + tx_vsizes[1] + tx_vsizes[3]);\n+    const auto tx3_anc_feerate = CFeeRate(low_fee + med_fee + high_fee + high_fee, tx_vsizes[0] + tx_vsizes[1] + tx_vsizes[2] + tx_vsizes[3]);\n+    const auto tx3_iter = pool.GetIter(tx3->GetHash());\n+    BOOST_CHECK(tx3_anc_feerate == CFeeRate(tx3_iter.value()->GetModFeesWithAncestors(), tx3_iter.value()->GetSizeWithAncestors()));\n     const auto tx4_feerate = CFeeRate(high_fee, tx_vsizes[4]);\n-    const auto tx6_anc_feerate = CFeeRate(low_fee + med_fee, tx_vsizes[5] + tx_vsizes[6]);\n-    const auto tx7_anc_feerate = CFeeRate(low_fee + high_fee, tx_vsizes[5] + tx_vsizes[7]);\n+    const auto tx6_anc_feerate = CFeeRate(high_fee + low_fee + med_fee, tx_vsizes[4] + tx_vsizes[5] + tx_vsizes[6]);\n+    const auto tx6_iter = pool.GetIter(tx6->GetHash());\n+    BOOST_CHECK(tx6_anc_feerate == CFeeRate(tx6_iter.value()->GetModFeesWithAncestors(), tx6_iter.value()->GetSizeWithAncestors()));",
      "path": "src/test/miniminer_tests.cpp",
      "position": 370,
      "original_position": 47,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "3016245bab453cc52744ac8fc6820e431315dbde",
      "in_reply_to_id": 1268063062,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, we are doing it manually, because we also compare it against what the mempool thinks it is.",
      "created_at": "2023-08-11T16:40:56Z",
      "updated_at": "2023-08-11T16:40:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1291575150",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291575150"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 364,
      "original_line": 364,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291575841",
      "pull_request_review_id": 1574053062,
      "id": 1291575841,
      "node_id": "PRRC_kwDOABII585M--Ih",
      "diff_hunk": "@@ -104,6 +109,15 @@ struct COutput {\n         return outpoint < rhs.outpoint;\n     }\n \n+    void ApplyBumpFee(CAmount bump_fee)\n+    {\n+        assert(bump_fee >= 0);\n+        ancestor_bump_fees = bump_fee;\n+        *fee += bump_fee;",
      "path": "src/wallet/coinselection.h",
      "position": 48,
      "original_position": 47,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "in_reply_to_id": 1268094484,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I added an `assert(fee);` right before.",
      "created_at": "2023-08-11T16:41:52Z",
      "updated_at": "2023-08-11T16:41:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1291575841",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291575841"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 117,
      "original_line": 117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1297760127",
      "pull_request_review_id": 1583506192,
      "id": 1297760127,
      "node_id": "PRRC_kwDOABII585NWj9_",
      "diff_hunk": "@@ -1034,7 +1052,7 @@ static util::Result<CreatedTransactionResult> CreateTransactionInternal(\n     if (nBytes == -1) {\n         return util::Error{_(\"Missing solving data for estimating transaction size\")};\n     }\n-    CAmount fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes) + result.GetSummedBumpFees();\n+    CAmount fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes) + result.GetSummedBumpFees() - result.GetBumpFeeDiscount();",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "in_reply_to_id": 1253424884,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Okay, I replaced `GetSummedBumpFees()` with `GetTotalBumpFees()` which deducts the `bump_fee_discount` if it has been set.",
      "created_at": "2023-08-17T21:15:26Z",
      "updated_at": "2023-08-17T21:15:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1297760127",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1297760127"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1054,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1297768542",
      "pull_request_review_id": 1583519756,
      "id": 1297768542,
      "node_id": "PRRC_kwDOABII585NWmBe",
      "diff_hunk": "@@ -0,0 +1,458 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    # Meta-Test: try feerate testing function on confirmed UTXO\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from high-feerate parent\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=3*self.target_fee_rate)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from low-feerate parent. Expect that parent gets\n+    # bumped to target feerate.\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend UTXO with unconfirmed low feerate parent and grandparent\n+    # txs. Expect that both ancestors get bumped to target feerate.\n+    def test_chain_of_unconfirmed_low(self):\n+        self.log.info(\"Start test with parent and grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=1)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXOs from two low feerate parent txs.\n+    def test_two_low_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs\")\n+        wallet = self.setup_and_fund_wallet(\"two_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        parent_one_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_one_tx = wallet.gettransaction(txid=parent_one_txid, verbose=True)\n+        self.assert_undershoots_target(p_one_tx)\n+\n+        parent_two_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_two_tx = wallet.gettransaction(txid=parent_two_txid, verbose=True)\n+        self.assert_undershoots_target(p_two_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_one_tx, p_two_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend two unconfirmed inputs, one each from low and high feerate parents\n+    def test_mixed_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs one of which has a higher feerate\")\n+        wallet = self.setup_and_fund_wallet(\"two_mixed_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        high_parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=self.target_fee_rate*2)\n+        p_high_tx = wallet.gettransaction(txid=high_parent_txid, verbose=True)\n+        # This time the parent is greater than the child\n+        self.assert_beats_target(p_high_tx)\n+\n+        parent_low_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_low_tx = wallet.gettransaction(txid=parent_low_txid, verbose=True)\n+        # Other parent needs bump\n+        self.assert_undershoots_target(p_low_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_high_tx, p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        resulting_bumped_ancestry_fee_rate = self.calc_set_fee_rate([p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_bumped_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_bumped_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend from chain with high feerate grandparent and low feerate parent\n+    def test_chain_of_high_low(self):\n+        self.log.info(\"Start test with low parent and high grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"high_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=self.target_fee_rate * 10)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        # grandparent has higher feerate\n+        self.assert_beats_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        # parent is low feerate\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+        resulting_ancestry_fee_rate_with_high_feerate_gp = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate_with_high_feerate_gp, self.target_fee_rate*1.1)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend UTXO from chain of unconfirmed transactions with low feerate\n+    # grandparent and even lower feerate parent\n+    def test_chain_of_high_low_below_target_feerate(self):\n+        self.log.info(\"Start test with low parent and higher low grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"low_and_lower_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=5)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+\n+        # grandparent has higher feerate, but below target\n+        self.assert_undershoots_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        # parent even lower\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Test fee calculation when bumping while using subtract fee from output (SFFO)\n+    def test_target_feerate_unconfirmed_low_sffo(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input, while subtracting from output\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet_sffo\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate, subtractfeefromamount=True)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Test that parents of preset unconfirmed inputs get cpfp'ed\n+    def test_preset_input_cpfp(self):\n+        self.log.info(\"Start test with preset input from low feerate unconfirmed transaction\")\n+        wallet = self.setup_and_fund_wallet(\"preset_input\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        number_outputs = len(parent_tx[\"decoded\"][\"vout\"])\n+        assert_equal(number_outputs, 2)\n+\n+        # we don't care which of the two outputs we spent, they're both ours\n+        ancestor_aware_txid = wallet.send(outputs=[{self.def_wallet.getnewaddress(): 0.5}], fee_rate=self.target_fee_rate, options={\"add_inputs\": True, \"inputs\": [{\"txid\": parent_txid, \"vout\": 0}]})[\"txid\"]\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Test that RBFing a transaction with unconfirmed input gets the right feerate\n+    def test_rbf_bumping(self):\n+        self.log.info(\"Start test to rbf a transaction unconfirmed input to bump it\")\n+        wallet = self.setup_and_fund_wallet(\"bump\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        to_be_rbfed_ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate, subtractfeefromamount=True)",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": null,
      "original_position": 318,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "in_reply_to_id": 1254048054,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed SSFO from this test",
      "created_at": "2023-08-17T21:25:27Z",
      "updated_at": "2023-08-17T21:25:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1297768542",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1297768542"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 318,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1298590709",
      "pull_request_review_id": 1584793368,
      "id": 1298590709,
      "node_id": "PRRC_kwDOABII585NZuv1",
      "diff_hunk": "@@ -0,0 +1,458 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    # Meta-Test: try feerate testing function on confirmed UTXO\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from high-feerate parent\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=3*self.target_fee_rate)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from low-feerate parent. Expect that parent gets\n+    # bumped to target feerate.\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend UTXO with unconfirmed low feerate parent and grandparent\n+    # txs. Expect that both ancestors get bumped to target feerate.\n+    def test_chain_of_unconfirmed_low(self):\n+        self.log.info(\"Start test with parent and grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=1)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(p_tx)",
      "path": "test/functional/wallet_spend_unconfirmed.py",
      "position": 129,
      "original_position": 128,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "in_reply_to_id": 1251588782,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added",
      "created_at": "2023-08-18T15:33:01Z",
      "updated_at": "2023-08-18T15:33:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1298590709",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1298590709"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 129,
      "original_line": 129,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1299694118",
      "pull_request_review_id": 1586335131,
      "id": 1299694118,
      "node_id": "PRRC_kwDOABII585Nd8Im",
      "diff_hunk": "@@ -488,14 +491,22 @@ CAmount GenerateChangeTarget(const CAmount payment_value, const CAmount change_f\n     }\n }\n \n+void SelectionResult::SetBumpFeeDiscount(const CAmount discount)\n+{\n+    // Overlapping ancestry can only lower the fees, not increase them\n+    assert (discount >= 0);\n+    bump_fee_group_discount = discount;\n+}\n+\n+\n void SelectionResult::ComputeAndSetWaste(const CAmount min_viable_change, const CAmount change_cost, const CAmount change_fee)\n {\n     const CAmount change = GetChange(min_viable_change, change_fee);\n \n     if (change > 0) {",
      "path": "src/wallet/coinselection.cpp",
      "position": 57,
      "original_position": 50,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "3e4fde6b9a2142191d9be799dbd030f38050c993",
      "in_reply_to_id": null,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: this `if` can be removed and instead we can check if change exist directly in `GetChange()` ",
      "created_at": "2023-08-21T07:08:24Z",
      "updated_at": "2023-08-21T07:08:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1299694118",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1299694118"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 505,
      "original_line": 505,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1299697466",
      "pull_request_review_id": 1586340541,
      "id": 1299697466,
      "node_id": "PRRC_kwDOABII585Nd886",
      "diff_hunk": "@@ -449,19 +450,21 @@ void OutputGroupTypeMap::Push(const OutputGroup& group, OutputType type, bool in\n     }\n }\n \n-CAmount GetSelectionWaste(const std::set<std::shared_ptr<COutput>>& inputs, CAmount change_cost, CAmount target, bool use_effective_value)\n+CAmount SelectionResult::GetSelectionWaste(CAmount change_cost, CAmount target, bool use_effective_value)",
      "path": "src/wallet/coinselection.cpp",
      "position": 13,
      "original_position": 13,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "3e4fde6b9a2142191d9be799dbd030f38050c993",
      "in_reply_to_id": null,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "we need tests for waste calculation with bumpfee and especially for bumpfee discount",
      "created_at": "2023-08-21T07:12:13Z",
      "updated_at": "2023-08-21T07:12:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1299697466",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1299697466"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 453,
      "original_line": 453,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1299699934",
      "pull_request_review_id": 1586344803,
      "id": 1299699934,
      "node_id": "PRRC_kwDOABII585Nd9je",
      "diff_hunk": "@@ -449,19 +450,21 @@ void OutputGroupTypeMap::Push(const OutputGroup& group, OutputType type, bool in\n     }\n }\n \n-CAmount GetSelectionWaste(const std::set<std::shared_ptr<COutput>>& inputs, CAmount change_cost, CAmount target, bool use_effective_value)\n+CAmount SelectionResult::GetSelectionWaste(CAmount change_cost, CAmount target, bool use_effective_value)\n {\n     // This function should not be called with empty inputs as that would mean the selection failed\n-    assert(!inputs.empty());\n+    assert(!m_selected_inputs.empty());\n \n     // Always consider the cost of spending an input now vs in the future.\n     CAmount waste = 0;\n     CAmount selected_effective_value = 0;\n-    for (const auto& coin_ptr : inputs) {\n+    for (const auto& coin_ptr : m_selected_inputs) {\n         const COutput& coin = *coin_ptr;\n         waste += coin.GetFee() - coin.long_term_fee;\n-        selected_effective_value += use_effective_value ? coin.GetEffectiveValue() : coin.txout.nValue;\n     }\n+    // Bump fee of whole selection may diverge from sum of individual bump fees\n+    waste += GetTotalBumpFees();",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "3e4fde6b9a2142191d9be799dbd030f38050c993",
      "in_reply_to_id": null,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You only need to detract the discount, because `coin.GetFee()` already accounts for initial bump",
      "created_at": "2023-08-21T07:15:03Z",
      "updated_at": "2023-08-21T07:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1299699934",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1299699934"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 466,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1299701172",
      "pull_request_review_id": 1586346792,
      "id": 1299701172,
      "node_id": "PRRC_kwDOABII585Nd920",
      "diff_hunk": "@@ -449,19 +450,21 @@ void OutputGroupTypeMap::Push(const OutputGroup& group, OutputType type, bool in\n     }\n }\n \n-CAmount GetSelectionWaste(const std::set<std::shared_ptr<COutput>>& inputs, CAmount change_cost, CAmount target, bool use_effective_value)\n+CAmount SelectionResult::GetSelectionWaste(CAmount change_cost, CAmount target, bool use_effective_value)\n {\n     // This function should not be called with empty inputs as that would mean the selection failed\n-    assert(!inputs.empty());\n+    assert(!m_selected_inputs.empty());\n \n     // Always consider the cost of spending an input now vs in the future.\n     CAmount waste = 0;\n     CAmount selected_effective_value = 0;\n-    for (const auto& coin_ptr : inputs) {\n+    for (const auto& coin_ptr : m_selected_inputs) {\n         const COutput& coin = *coin_ptr;\n         waste += coin.GetFee() - coin.long_term_fee;\n-        selected_effective_value += use_effective_value ? coin.GetEffectiveValue() : coin.txout.nValue;\n     }\n+    // Bump fee of whole selection may diverge from sum of individual bump fees\n+    waste += GetTotalBumpFees();\n+    selected_effective_value += use_effective_value ? GetSelectedEffectiveValue() : GetSelectedValue();",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "3e4fde6b9a2142191d9be799dbd030f38050c993",
      "in_reply_to_id": null,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: move the `selected_effective_value` var and the operation under the `else` below",
      "created_at": "2023-08-21T07:16:29Z",
      "updated_at": "2023-08-21T07:16:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1299701172",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1299701172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 467,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1300543865",
      "pull_request_review_id": 1587699367,
      "id": 1300543865,
      "node_id": "PRRC_kwDOABII585NhLl5",
      "diff_hunk": "@@ -488,14 +491,22 @@ CAmount GenerateChangeTarget(const CAmount payment_value, const CAmount change_f\n     }\n }\n \n+void SelectionResult::SetBumpFeeDiscount(const CAmount discount)\n+{\n+    // Overlapping ancestry can only lower the fees, not increase them\n+    assert (discount >= 0);\n+    bump_fee_group_discount = discount;\n+}\n+\n+\n void SelectionResult::ComputeAndSetWaste(const CAmount min_viable_change, const CAmount change_cost, const CAmount change_fee)\n {\n     const CAmount change = GetChange(min_viable_change, change_fee);\n \n     if (change > 0) {",
      "path": "src/wallet/coinselection.cpp",
      "position": 57,
      "original_position": 50,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "3e4fde6b9a2142191d9be799dbd030f38050c993",
      "in_reply_to_id": 1299694118,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I was actually only touching this because moving the function `GetSelectionWaste(…)` into `SelectionResult` made it have direct access to the input set. Your comment made me realize that we never use the amount that’s returned, and `GetChange(…)` already returns 0 if there is no change.\r\n\r\nWhat do you think about:\r\n\r\n```diff\r\n void SelectionResult::ComputeAndSetWaste(const CAmount min_viable_change, const CAmount change_cost, const CAmount change_fee)\r\n {\r\n-    const CAmount change = GetChange(min_viable_change, change_fee);\r\n-\r\n-    if (change > 0) {\r\n-        m_waste = GetSelectionWaste(change_cost, m_target, m_use_effective);\r\n-    } else {\r\n-        m_waste = GetSelectionWaste(0, m_target, m_use_effective);\r\n-    }\r\n+    bool makes_change = (0 != GetChange(min_viable_change, change_fee));\r\n+    m_waste = GetSelectionWaste(makes_change ? change_cost : 0, m_target, m_use_effective);\r\n }\r\n```",
      "created_at": "2023-08-21T19:14:52Z",
      "updated_at": "2023-08-29T16:25:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1300543865",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1300543865"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 505,
      "original_line": 505,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1300550693",
      "pull_request_review_id": 1587699367,
      "id": 1300550693,
      "node_id": "PRRC_kwDOABII585NhNQl",
      "diff_hunk": "@@ -449,19 +450,21 @@ void OutputGroupTypeMap::Push(const OutputGroup& group, OutputType type, bool in\n     }\n }\n \n-CAmount GetSelectionWaste(const std::set<std::shared_ptr<COutput>>& inputs, CAmount change_cost, CAmount target, bool use_effective_value)\n+CAmount SelectionResult::GetSelectionWaste(CAmount change_cost, CAmount target, bool use_effective_value)\n {\n     // This function should not be called with empty inputs as that would mean the selection failed\n-    assert(!inputs.empty());\n+    assert(!m_selected_inputs.empty());\n \n     // Always consider the cost of spending an input now vs in the future.\n     CAmount waste = 0;\n     CAmount selected_effective_value = 0;\n-    for (const auto& coin_ptr : inputs) {\n+    for (const auto& coin_ptr : m_selected_inputs) {\n         const COutput& coin = *coin_ptr;\n         waste += coin.GetFee() - coin.long_term_fee;\n-        selected_effective_value += use_effective_value ? coin.GetEffectiveValue() : coin.txout.nValue;\n     }\n+    // Bump fee of whole selection may diverge from sum of individual bump fees\n+    waste += GetTotalBumpFees();",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "3e4fde6b9a2142191d9be799dbd030f38050c993",
      "in_reply_to_id": 1299699934,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Uff, good catch.",
      "created_at": "2023-08-21T19:22:04Z",
      "updated_at": "2023-08-29T16:25:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1300550693",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1300550693"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 466,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1302144936",
      "pull_request_review_id": 1587699367,
      "id": 1302144936,
      "node_id": "PRRC_kwDOABII585NnSeo",
      "diff_hunk": "@@ -449,19 +450,21 @@ void OutputGroupTypeMap::Push(const OutputGroup& group, OutputType type, bool in\n     }\n }\n \n-CAmount GetSelectionWaste(const std::set<std::shared_ptr<COutput>>& inputs, CAmount change_cost, CAmount target, bool use_effective_value)\n+CAmount SelectionResult::GetSelectionWaste(CAmount change_cost, CAmount target, bool use_effective_value)\n {\n     // This function should not be called with empty inputs as that would mean the selection failed\n-    assert(!inputs.empty());\n+    assert(!m_selected_inputs.empty());\n \n     // Always consider the cost of spending an input now vs in the future.\n     CAmount waste = 0;\n     CAmount selected_effective_value = 0;\n-    for (const auto& coin_ptr : inputs) {\n+    for (const auto& coin_ptr : m_selected_inputs) {\n         const COutput& coin = *coin_ptr;\n         waste += coin.GetFee() - coin.long_term_fee;\n-        selected_effective_value += use_effective_value ? coin.GetEffectiveValue() : coin.txout.nValue;\n     }\n+    // Bump fee of whole selection may diverge from sum of individual bump fees\n+    waste += GetTotalBumpFees();\n+    selected_effective_value += use_effective_value ? GetSelectedEffectiveValue() : GetSelectedValue();",
      "path": "src/wallet/coinselection.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "3e4fde6b9a2142191d9be799dbd030f38050c993",
      "in_reply_to_id": 1299701172,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-08-22T20:11:18Z",
      "updated_at": "2023-08-29T16:25:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1302144936",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1302144936"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 467,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309079327",
      "pull_request_review_id": 1587699367,
      "id": 1309079327,
      "node_id": "PRRC_kwDOABII585OBvcf",
      "diff_hunk": "@@ -488,14 +491,22 @@ CAmount GenerateChangeTarget(const CAmount payment_value, const CAmount change_f\n     }\n }\n \n+void SelectionResult::SetBumpFeeDiscount(const CAmount discount)\n+{\n+    // Overlapping ancestry can only lower the fees, not increase them\n+    assert (discount >= 0);\n+    bump_fee_group_discount = discount;\n+}\n+\n+\n void SelectionResult::ComputeAndSetWaste(const CAmount min_viable_change, const CAmount change_cost, const CAmount change_fee)\n {\n     const CAmount change = GetChange(min_viable_change, change_fee);\n \n     if (change > 0) {",
      "path": "src/wallet/coinselection.cpp",
      "position": 57,
      "original_position": 50,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "3e4fde6b9a2142191d9be799dbd030f38050c993",
      "in_reply_to_id": 1299694118,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I started with that, and then realized that `ComputeAndSetWaste` and `GetSelectionWaste` now live in the same class, so the former essentially wrapping the latter doesn’t make sense anymore. Then I cleaned that up, but that broke a bunch of the waste calculation tests. So, finally, I propose to clean all this up in a follow-up PR, which I will open shortly.",
      "created_at": "2023-08-29T16:24:26Z",
      "updated_at": "2023-08-29T16:25:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1309079327",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309079327"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 505,
      "original_line": 505,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309291527",
      "pull_request_review_id": 1601177797,
      "id": 1309291527,
      "node_id": "PRRC_kwDOABII585OCjQH",
      "diff_hunk": "@@ -488,14 +491,22 @@ CAmount GenerateChangeTarget(const CAmount payment_value, const CAmount change_f\n     }\n }\n \n+void SelectionResult::SetBumpFeeDiscount(const CAmount discount)\n+{\n+    // Overlapping ancestry can only lower the fees, not increase them\n+    assert (discount >= 0);\n+    bump_fee_group_discount = discount;\n+}\n+\n+\n void SelectionResult::ComputeAndSetWaste(const CAmount min_viable_change, const CAmount change_cost, const CAmount change_fee)\n {\n     const CAmount change = GetChange(min_viable_change, change_fee);\n \n     if (change > 0) {",
      "path": "src/wallet/coinselection.cpp",
      "position": 57,
      "original_position": 50,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "3e4fde6b9a2142191d9be799dbd030f38050c993",
      "in_reply_to_id": 1299694118,
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "sure, that's definitely cosmetics and can wait for a follow up 👍 ",
      "created_at": "2023-08-29T19:55:32Z",
      "updated_at": "2023-08-29T19:55:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1309291527",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309291527"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 505,
      "original_line": 505,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1310446691",
      "pull_request_review_id": 1602960735,
      "id": 1310446691,
      "node_id": "PRRC_kwDOABII585OG9Rj",
      "diff_hunk": "@@ -449,19 +450,21 @@ void OutputGroupTypeMap::Push(const OutputGroup& group, OutputType type, bool in\n     }\n }\n \n-CAmount GetSelectionWaste(const std::set<std::shared_ptr<COutput>>& inputs, CAmount change_cost, CAmount target, bool use_effective_value)\n+CAmount SelectionResult::GetSelectionWaste(CAmount change_cost, CAmount target, bool use_effective_value)",
      "path": "src/wallet/coinselection.cpp",
      "position": 13,
      "original_position": 13,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "3e4fde6b9a2142191d9be799dbd030f38050c993",
      "in_reply_to_id": 1299697466,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a test for waste calculation with bumpfee and bumpfee discount.",
      "created_at": "2023-08-30T15:20:10Z",
      "updated_at": "2023-08-30T15:20:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1310446691",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1310446691"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 453,
      "original_line": 453,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1310447495",
      "pull_request_review_id": 1602961893,
      "id": 1310447495,
      "node_id": "PRRC_kwDOABII585OG9eH",
      "diff_hunk": "@@ -488,14 +491,22 @@ CAmount GenerateChangeTarget(const CAmount payment_value, const CAmount change_f\n     }\n }\n \n+void SelectionResult::SetBumpFeeDiscount(const CAmount discount)\n+{\n+    // Overlapping ancestry can only lower the fees, not increase them\n+    assert (discount >= 0);\n+    bump_fee_group_discount = discount;\n+}\n+\n+\n void SelectionResult::ComputeAndSetWaste(const CAmount min_viable_change, const CAmount change_cost, const CAmount change_fee)\n {\n     const CAmount change = GetChange(min_viable_change, change_fee);\n \n     if (change > 0) {",
      "path": "src/wallet/coinselection.cpp",
      "position": 57,
      "original_position": 50,
      "commit_id": "1b2fb54d5c18579e013b1dfd061c2b29d8cffdc2",
      "original_commit_id": "3e4fde6b9a2142191d9be799dbd030f38050c993",
      "in_reply_to_id": 1299694118,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I’ve opened https://github.com/bitcoin/bitcoin/pull/28366 to collect these changes",
      "created_at": "2023-08-30T15:20:46Z",
      "updated_at": "2023-08-30T15:20:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1310447495",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1310447495"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 505,
      "original_line": 505,
      "side": "RIGHT"
    }
  ]
}