{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
    "id": 1618181311,
    "node_id": "PR_kwDOABII585gc3y_",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/28948",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/28948.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/28948.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/f3d4916eacfbcef61bc4d460294657fae006d2aa",
    "number": 28948,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "v3 transaction policy for anti-pinning",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "See #27463 for overall package relay tracking.\r\n\r\nDelving Bitcoin discussion thread: https://delvingbitcoin.org/t/v3-transaction-policy-for-anti-pinning/340\r\n\r\nRationale:\r\n- There are various pinning problems with RBF and our general ancestor/descendant limits. These policies help mitigate many pinning attacks and make package RBF feasible (see #28984 which implements package RBF on top of this). I would focus the most here on Rule 3 pinning. [1][2]\r\n- Switching to a cluster-based mempool (see #27677 and #28676) requires the removal of CPFP carve out, which applications depend on. V3 + package RBF + ephemeral anchors + 1-parent-1-child package relay provides an intermediate solution.\r\n\r\nV3 policy is for \"Priority Transactions.\" [3][4] It allows users to opt in to more restrictive topological limits for shared transactions, in exchange for the more robust fee-bumping abilities that offers. Even though we don't have cluster limits, we are able to treat these transactions as having as having a maximum cluster size of 2.\r\n\r\nImmediate benefits:\r\n\r\n- You can presign a transaction with 0 fees (not just 1sat/vB!) and add a fee-bump later.\r\n- Rule 3 pinning is reduced by a significant amount, since the attacker can only attach a maximum of 1000vB to your shared transaction.\r\n \r\nThis also enables some other cool things (again see #27463 for overall roadmap):\r\n- Ephemeral Anchors\r\n- Package RBF for these 1-parent-1-child packages. That means e.g. a commitment tx + child can replace another commitment tx using the child's fees.\r\n- We can transition to a \"single anchor\" universe without worrying about package limit pinning. So current users of CPFP carve out would have something else to use.\r\n- We can switch to a cluster-based mempool [5] (#27677 #28676), which removes CPFP carve out [6].\r\n\r\n[1]: Original mailing list post and discussion about RBF pinning problems https://gist.github.com/glozow/25d9662c52453bd08b4b4b1d3783b9ff, https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019817.html\r\n[2]: A FAQ is \"we need this for cluster mempool, but is this still necessary afterwards?\" There are some pinning issues that are fixed here and not fully fixed in cluster mempool, so we will still want this or something similar afterward.\r\n[3]: Mailing list post for v3 https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020937.html\r\n[4]: Original PR #25038 also contains a lot of the discussion\r\n[5]: https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393/7\r\n[6]: https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393#the-cpfp-carveout-rule-can-no-longer-be-supported-12",
    "labels": [
      {
        "id": 82428251,
        "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
        "name": "TX fees and policy",
        "color": "5319e7",
        "default": false
      },
      {
        "id": 164208572,
        "node_id": "MDU6TGFiZWwxNjQyMDg1NzI=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool",
        "name": "Mempool",
        "color": "fef2c0",
        "default": false
      }
    ],
    "created_at": "2023-11-27T15:17:11Z",
    "updated_at": "2024-01-22T09:19:23Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "f16ae00576325d5a3884607ec4b8b469c1752845",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "glozow:v3-policy",
      "ref": "v3-policy",
      "sha": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 244262754,
        "node_id": "MDEwOlJlcG9zaXRvcnkyNDQyNjI3NTQ=",
        "name": "bitcoin",
        "full_name": "glozow/bitcoin",
        "owner": {
          "login": "glozow",
          "id": 25183001,
          "node_id": "MDQ6VXNlcjI1MTgzMDAx",
          "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/glozow",
          "html_url": "https://github.com/glozow",
          "followers_url": "https://api.github.com/users/glozow/followers",
          "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
          "organizations_url": "https://api.github.com/users/glozow/orgs",
          "repos_url": "https://api.github.com/users/glozow/repos",
          "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/glozow/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/glozow/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/glozow/bitcoin",
        "archive_url": "https://api.github.com/repos/glozow/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/glozow/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/glozow/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/glozow/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/glozow/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/glozow/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/glozow/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/glozow/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/glozow/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/glozow/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/glozow/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/glozow/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/glozow/bitcoin/events",
        "forks_url": "https://api.github.com/repos/glozow/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/glozow/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/glozow/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/glozow/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/glozow/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/glozow/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/glozow/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/glozow/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/glozow/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/glozow/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/glozow/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/glozow/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/glozow/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/glozow/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/glozow/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/glozow/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:glozow/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/glozow/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/glozow/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/glozow/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/glozow/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/glozow/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/glozow/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/glozow/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/glozow/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/glozow/bitcoin/hooks",
        "svn_url": "https://github.com/glozow/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 3,
        "stargazers_count": 10,
        "watchers_count": 10,
        "size": 238962,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-01-19T16:15:21Z",
        "created_at": "2020-03-02T02:31:56Z",
        "updated_at": "2023-08-30T16:39:28Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "03c5b0064d4f766bc8dc6508773c7579e9ad39bc",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36562,
        "stargazers_count": 73469,
        "watchers_count": 73469,
        "size": 247659,
        "default_branch": "master",
        "open_issues_count": 695,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-01-22T09:40:38Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-01-22T09:06:08Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 1304,
    "deletions": 59,
    "changed_files": 28,
    "commits": 10,
    "review_comments": 158,
    "comments": 61
  },
  "events": [
    {
      "event": "labeled",
      "id": 11072393786,
      "node_id": "LE_lADOABII58539HF9zwAAAAKT91I6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11072393786",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-27T15:17:11Z",
      "label": {
        "name": "TX fees and policy",
        "color": "5319e7"
      }
    },
    {
      "event": "labeled",
      "id": 11072393793,
      "node_id": "LE_lADOABII58539HF9zwAAAAKT91JB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11072393793",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-27T15:17:11Z",
      "label": {
        "name": "Mempool",
        "color": "fef2c0"
      }
    },
    {
      "event": "commented",
      "id": 1828035445,
      "node_id": "IC_kwDOABII585s9Zt1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1828035445",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-27T15:17:15Z",
      "updated_at": "2024-01-18T00:27:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/28948).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept NACK | [petertodd](https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1873518209) |\n| Concept ACK | [sdaftuar](https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1832669087), [ismaelsadeeq](https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1842795172) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#29242](https://github.com/bitcoin/bitcoin/pull/29242) (Mempool util: Add RBF diagram checks for single chunks against clusters of size 2 by instagibbs)\n* [#28984](https://github.com/bitcoin/bitcoin/pull/28984) (Cluster size 2 package rbf by instagibbs)\n* [#28960](https://github.com/bitcoin/bitcoin/pull/28960) (kernel: Remove dependency on CScheduler by TheCharlatan)\n* [#28886](https://github.com/bitcoin/bitcoin/pull/28886) (refactor: Replace sets of txiter with CTxMemPoolEntryRefs by TheCharlatan)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1828035445",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11072750512,
      "node_id": "HRFPE_lADOABII58539HF9zwAAAAKT_MOw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11072750512",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-27T15:46:09Z"
    },
    {
      "event": "labeled",
      "id": 11072751480,
      "node_id": "LE_lADOABII58539HF9zwAAAAKT_Md4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11072751480",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-27T15:46:14Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-27T15:47:23Z",
      "updated_at": "2023-11-27T15:47:23Z",
      "source": {
        "issue": {
          "id": 1668056618,
          "node_id": "I_kwDOABII585jbIYq",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27463",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27463/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27463/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27463/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/27463",
          "number": 27463,
          "state": "open",
          "state_reason": null,
          "title": "Package Relay Project Tracking",
          "body": "This issue will be edited frequently to reflect the current status of the project.\r\n\r\n**What should I review now?**\r\n:point_down: :point_down: :point_down: :point_down: :point_down: :point_down: :point_down:\r\n#28948 and #28950\r\n:point_up: :point_up: :point_up: :point_up: :point_up: :point_up: :point_up:\r\n\r\n**(1) multi-parent-1-child package validation**\r\n\r\nWhat we get: the ability to validate multiple transactions, including CPFP of transactions below the mempool minimum feerate. An RPC to submit things locally.\r\n\r\n- Enable validation of multiple transactions in MemPoolAccept\r\n  - [x] Dependency: #21062\r\n  - [x] Dependency: #23381\r\n  - [x] Main feature 1/2: #20833\r\n  - [x] Main feature 2/2: #21800\r\n  - [x] Followup: #22084\r\n- Enable package CPFP\r\n  - [x] Main feature 1/2: #22674\r\n  - [x] Followup: #24310\r\n  - [x] Followup: #23804\r\n  - [x] Main feature 2/2: #24152\r\n  - [x] short term bug fix: avoid the risk of below-minrelaytxfee transactions hanging around forever in the mempool  #26933\r\n- RPC access\r\n  - [x] #24836\r\n  - [x] #26646\r\n  - [x] #27609\r\n  - [x] #28848\r\n  - [ ] #28950\r\n- Fuzzing\r\n  - [x] #28450\r\n  - [x] #28764\r\n  - [x] #28825 \r\n  - [x] Bug fix: #28251\r\n  - [x] Bug fix: #28471\r\n  - [x] Bug fix: #28472\r\n\r\n**(2) 1-parent-1-child package relay**\r\n\r\nWhat we get: package relay of 1-parent-1-child packages.\r\nProtocols like LN can use this to create 0-fee presigned transactions with a single, 0-value anchor output; 0-fee commitment transactions can replace each other using the fees of the child attached to the anchor.\r\nThis makes CPFP carve out unnecessary, so we can remove that and switch from ancestor/descendant package limits to cluster limits (see next step).\r\n\r\n- Add v3 rules that make transactions/packages easier to work with\r\n  - [ ] Main feature: #28948\r\n- Enable Package RBF for 1-parent-1-child situations. Enables things like LN to sign things 0-fee, add fees at broadcast, and avoid some pinning attacks (assuming package relay is available)\r\n   - [x] Dependency: #22796 \r\n   - [x] Dependency: #22675 \r\n   - [x] Dependency: #22855\r\n   - [ ] Main feature: #28984\r\n- Add Ephemeral Anchors rules for v3 transactions.\r\n  - [ ] Main feature: #29001\r\n- Opportunistically submit 1-parent-1-child packages\r\n  - [x] Dependency: #28785\r\n  - [ ] WIP #28970\r\n- Try multiple peers for orphan resolution, make orphanage more robust\r\n  - [x] Dependency: #28785\r\n  - [x] Dependency: #28199\r\n  - [x] Dependency: #28364\r\n  - [ ] Main feature: #28031 \r\n  - [ ] WIP: token bucket orphanage protection\r\n\r\n**(3) cluster mempool**\r\n\r\nWhat we get: the ability to quickly assess the incentive compatibility of transactions, safer eviction, more incentive-compatible and pinning-free RBF rules.\r\n\r\n- [ ] Cluster Mempool #27677\r\n  - [ ] Dependency: Remove CPFP carve out\r\n  - [ ] See #28676\r\n\r\n**(4) TBD / other parts of package relay**\r\n\r\nGoals: propagate incentive-compatible packages that are more compelx than 1p1c, safely evaluate replacements within packages, handle orphans better.\r\n\r\n- WIP: Package RBF\r\n- WIP: Package validation of less restrictive topologies\r\n- [ ] use BIP 331 ancestor package relay for orphan-handling\r\n  - [ ] bitcoin/bips/pull/1382\r\n  - [ ] #27742 \r\n- [ ] Some sender-initiated protocol using chunks (?)\r\n\r\n<details><summary>See also:</summary>\r\n\r\nSuperseded/Deferred Work\r\n- Sub-package evaluation with ancestor packages\r\n- [x] #28758\r\n  - [x] #28808\r\n  - #26711 \r\n  - #28813\r\n- #27018\r\n- #25038\r\n- #26403\r\n\r\nPrehistory\r\n- [x] #16400 \r\n- #16401 \r\n- #14895 \r\n- #19621 \r\n- https://gist.github.com/sdaftuar/8756699bfcad4d3806ba9f3396d4e66a\r\n</details>",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 64584,
              "node_id": "MDU6TGFiZWw2NDU4NA==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming",
              "name": "Brainstorming",
              "color": "ebd775",
              "default": false
            },
            {
              "id": 82428251,
              "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
              "name": "TX fees and policy",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 15,
          "created_at": "2023-04-14T11:14:50Z",
          "updated_at": "2024-01-16T10:03:05Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1750753834,
      "node_id": "PRR_kwDOABII585oWmIq",
      "url": null,
      "actor": null,
      "commit_id": "f82c9fdfce0a299654c51001575aeb703ead3393",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Would be good to have some fuzzing for the new policy rules. Maybe amending the existing fuzz targets (tx_pool, tx_package_eval) to include v3 txs is enough? A standalone harness for the new rules would probably also be good regardless.",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#pullrequestreview-1750753834",
      "submitted_at": "2023-11-27T15:52:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
    },
    {
      "event": "unlabeled",
      "id": 11073249486,
      "node_id": "UNLE_lADOABII58539HF9zwAAAAKUBGDO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11073249486",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-27T16:25:11Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11073409752,
      "node_id": "HRFPE_lADOABII58539HF9zwAAAAKUBtLY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11073409752",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-27T16:38:05Z"
    },
    {
      "event": "commented",
      "id": 1828199453,
      "node_id": "IC_kwDOABII585s-Bwd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1828199453",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-27T16:38:53Z",
      "updated_at": "2023-11-27T16:56:43Z",
      "author_association": "MEMBER",
      "body": "Changed tx_pool and tx_package_eval fuzzer to sometimes create v3 transactions, and check v3 invariants at the end of each iteration.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1828199453",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-27T16:42:26Z",
      "updated_at": "2023-11-27T16:42:26Z",
      "source": {
        "issue": {
          "id": 1221671479,
          "node_id": "PR_kwDOABII5843Gzwx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25038",
          "number": 25038,
          "state": "closed",
          "state_reason": null,
          "title": "policy: nVersion=3 and Package RBF",
          "body": "**Note: this PR has been superseded by #28948 (v3) and #28984 (package RBF)**\r\n\r\nSee #27463 for overall package relay tracking.\r\n\r\nThis PR contains 2 projects: v3 policy and package RBF. Mailing list posts: [package RBF 1](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-September/019464.html) and [V3 + package RBF 2](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020937.html). It stems from a long discussion about RBF pinning, across a [mailing list thread](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019817.html) and [gist](https://gist.github.com/glozow/25d9662c52453bd08b4b4b1d3783b9ff).\r\n\r\nV3 Policy: A set of policy rules applied to transactions with their `nVersion` field set to 3. Namely, it allows users to opt in to more restrictive descendant limits for shared transactions. If adopted by many nodes in the network, V3 mitigates various RBF pinning attacks. See doc/policy/version3_transactions.md for the exact rules and rationale, and [these review club notes](bitcoincore.reviews/25038) for more background and discussion.\r\n\r\nPackage RBF: In addition to allowing a child to pay for its parents within the package, also allow the child to pay for replacing the parent's conflicts. For example, this allows LN users to replace commitment transactions existing in the mempool, simply by broadcasting their respective commitment transactions with a high-fee child. The commitment transactions can be signed with 0 fees, which means no overpaying.\r\n\r\nFAQ: is v3 still helpful even with cluster mempool (#27677) ?\r\n\r\n- Rule 3 pinning: This is addressed with v3 but not really with cluster mempool (descendant allowance is still too permissive).\r\n- Package RBF and ACP pinning: This PR allows for package RBF with v3 packages. V3 has an effective \"cluster limit\" of 2 which makes it very cheap to calculate the mining score of a v3 transaction. With cluster mempool, which also makes it easier to calculate mining score, we could have package RBF for non-v3 transactions.\r\n- Allowing 0fee transactions: This PR allows v3 transactions to be below minimum relay feerate, provided they are CPFP'd. This is because the simplified topology allows us to avoid situations like the ones described in #26933. With cluster mempool, we can allow this for non-v3 transactions.",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 82428251,
              "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
              "name": "TX fees and policy",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            },
            {
              "id": 1392286103,
              "node_id": "MDU6TGFiZWwxMzkyMjg2MTAz",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20Conceptual%20Review",
              "name": "Needs Conceptual Review",
              "description": "",
              "color": "fef2c0",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 33,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25038",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25038.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25038.patch"
          },
          "closed_at": "2023-12-11T15:18:12Z",
          "created_at": "2022-04-30T00:24:31Z",
          "updated_at": "2023-12-11T15:18:12Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11073619330,
      "node_id": "HRFPE_lADOABII58539HF9zwAAAAKUCgWC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11073619330",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-27T16:56:14Z"
    },
    {
      "event": "labeled",
      "id": 11073620119,
      "node_id": "LE_lADOABII58539HF9zwAAAAKUCgiX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11073620119",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-27T16:56:18Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11073885848,
      "node_id": "HRFPE_lADOABII58539HF9zwAAAAKUDhaY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11073885848",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-27T17:21:40Z"
    },
    {
      "event": "commented",
      "id": 1828351782,
      "node_id": "IC_kwDOABII585s-m8m",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1828351782",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-27T18:02:37Z",
      "updated_at": "2023-11-27T18:02:37Z",
      "author_association": "MEMBER",
      "body": "```\r\n$ echo \"ACVL/gA+Pj4+Pj4+3D4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAPT09//8AAP/8AAAAigAAAAAAAAAAAAAAAAAAAAAAAAD6AAAAAAAIAQk9AAAAAAAAAAAAAAAAAAAAABMA9wAAAAYiACkAAAAAAAAAAAD///8AAPkAAAAkAAAAAACiAGxpbWl0YW739/f3Y2VzdG9yc2lSemUAAAAmAKMAAP9kZQBi4nUxZ2xvZ2ZpbGUAJgD/AA==\" | base64 --decode > tx_pool-bbe7bc3c2a6d0cb1a21c48506cd16fdb807ae3cf.crash\r\n$ FUZZ=tx_pool ./src/test/fuzz/fuzz tx_pool-bbe7bc3c2a6d0cb1a21c48506cd16fdb807ae3cf.crash\r\nINFO: Running with entropic power schedule (0xFF, 100).\r\nINFO: Seed: 1136977254\r\nINFO: Loaded 1 modules   (572973 inline 8-bit counters): 572973 [0x563877bfae70, 0x563877c86c9d), \r\nINFO: Loaded 1 PC tables (572973 PCs): 572973 [0x563877c86ca0,0x563878544f70), \r\n/workdir/fuzz_bins/fuzz_libfuzzer: Running 1 inputs 1 time(s) each.\r\nRunning: /workdir/crashes/crash-bbe7bc3c2a6d0cb1a21c48506cd16fdb807ae3cf\r\ntest/fuzz/tx_pool.cpp:114 Finish: Assertion `entry.GetModFeesWithDescendants() > 0' failed.\r\n==1877== ERROR: libFuzzer: deadly signal\r\n    #0 0x5638764b4c88 in __sanitizer_print_stack_trace (/workdir/fuzz_bins/fuzz_libfuzzer+0x14b4c88) (BuildId: 7fbfcc32a58adde3cb3dcfe8229731b5bb30d71d)\r\n    #1 0x56387648c04c in fuzzer::PrintStackTrace() crtstuff.c\r\n    #2 0x563876471e67 in fuzzer::Fuzzer::CrashCallback() crtstuff.c\r\n    #3 0x7f168cc0850f  (/lib/x86_64-linux-gnu/libc.so.6+0x3c50f) (BuildId: 8a1bf172e710f8ca0c1576912c057b45f90d90d8)\r\n    #4 0x7f168cc560fb  (/lib/x86_64-linux-gnu/libc.so.6+0x8a0fb) (BuildId: 8a1bf172e710f8ca0c1576912c057b45f90d90d8)\r\n    #5 0x7f168cc08471 in raise (/lib/x86_64-linux-gnu/libc.so.6+0x3c471) (BuildId: 8a1bf172e710f8ca0c1576912c057b45f90d90d8)\r\n    #6 0x7f168cbf24b1 in abort (/lib/x86_64-linux-gnu/libc.so.6+0x264b1) (BuildId: 8a1bf172e710f8ca0c1576912c057b45f90d90d8)\r\n    #7 0x5638778c6167 in assertion_fail(std::basic_string_view<char, std::char_traits<char>>, int, std::basic_string_view<char, std::char_traits<char>>, std::basic_string_view<char, std::char_traits<char>>) check.cpp\r\n    #8 0x56387682def1 in (anonymous namespace)::Finish(FuzzedDataProvider&, (anonymous namespace)::MockedTxPool&, Chainstate&) tx_pool.cpp\r\n    #9 0x563876832e79 in (anonymous namespace)::tx_pool_fuzz_target(Span<unsigned char const>) tx_pool.cpp\r\n    #10 0x5638768972c7 in LLVMFuzzerTestOneInput fuzz.cpp\r\n    #11 0x563876473334 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) crtstuff.c\r\n    #12 0x56387645c263 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) crtstuff.c\r\n    #13 0x563876461e86 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) crtstuff.c\r\n    #14 0x56387648c9d6 in main crtstuff.c\r\n    #15 0x7f168cbf36c9  (/lib/x86_64-linux-gnu/libc.so.6+0x276c9) (BuildId: 8a1bf172e710f8ca0c1576912c057b45f90d90d8)\r\n    #16 0x7f168cbf3784 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x27784) (BuildId: 8a1bf172e710f8ca0c1576912c057b45f90d90d8)\r\n    #17 0x563876456cd0 in _start (/workdir/fuzz_bins/fuzz_libfuzzer+0x1456cd0) (BuildId: 7fbfcc32a58adde3cb3dcfe8229731b5bb30d71d)\r\n\r\nNOTE: libFuzzer has rudimentary signal handlers.\r\n      Combine libFuzzer with AddressSanitizer or similar for better crash reports.\r\nSUMMARY: libFuzzer: deadly signal\r\n```",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1828351782",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-27T21:21:50Z",
      "updated_at": "2023-11-27T21:21:50Z",
      "source": {
        "issue": {
          "id": 1995651017,
          "node_id": "PR_kwDOABII585fkNjm",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28886",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28886/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28886/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28886/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28886",
          "number": 28886,
          "state": "open",
          "state_reason": null,
          "title": "refactor: Replace sets of txiter with CTxMemPoolEntryRefs",
          "body": "Currently the mempool returns and consumes sets of multiindex iterators in its public API. A likely motivation for this over working with references to the actual values is that the multi index interface works with these iterators and not with pointers or references to the actual values.\r\n\r\nHowever, using the iterator type in the `setEntries` set provides little benefit in practice as applied currently. Its purpose, ownership, and safety semantics often remain ambiguous, and it is hardly used for actually iterating through the data structures. So replace it where possible with `CTxMemPoolEntryRef`s.\r\n\r\nSince `CTxMemPoolEntry` itself refers to its Parents and Children by `CTxMemPoolEntryRef` and not `txiter`, this allowed for an overall reduction of calls to `iterator_to`. See the [docs](https://www.boost.org/doc/libs/1_83_0/libs/multi_index/doc/tutorial/indices.html#iterator_to) on `iterator_to` for more guidance.\r\n\r\nNo change in the performance of the mempool code was observed in my benchmarks.\r\n\r\nThis also makes the goal of eliminating boost types from the headers as done in https://github.com/bitcoin/bitcoin/pull/28335 more feasible.\r\n",
          "user": {
            "login": "TheCharlatan",
            "id": 8421793,
            "node_id": "MDQ6VXNlcjg0MjE3OTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TheCharlatan",
            "html_url": "https://github.com/TheCharlatan",
            "followers_url": "https://api.github.com/users/TheCharlatan/followers",
            "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
            "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
            "repos_url": "https://api.github.com/users/TheCharlatan/repos",
            "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 13,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28886",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28886",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28886.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28886.patch"
          },
          "created_at": "2023-11-15T22:07:32Z",
          "updated_at": "2024-01-20T04:21:33Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-27T21:53:19Z",
      "updated_at": "2023-11-27T21:53:19Z",
      "source": {
        "issue": {
          "id": 1954053513,
          "node_id": "PR_kwDOABII585dXq6y",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28690",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28690/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28690/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28690/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28690",
          "number": 28690,
          "state": "open",
          "state_reason": null,
          "title": "build: Introduce internal kernel library",
          "body": "This PR introduces a new `libbitcoin_kernel` internal library. It completes the internal library design as laid out in [doc/design/libraries.md](https://github.com/bitcoin/bitcoin/blob/master/doc/design/libraries.md). The external `libbitcoinkernel` library now uses the source lists of the internal library for its compilation.\r\n\r\nShould also address https://github.com/bitcoin/bitcoin/issues/28548.",
          "user": {
            "login": "TheCharlatan",
            "id": 8421793,
            "node_id": "MDQ6VXNlcjg0MjE3OTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TheCharlatan",
            "html_url": "https://github.com/TheCharlatan",
            "followers_url": "https://api.github.com/users/TheCharlatan/followers",
            "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
            "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
            "repos_url": "https://api.github.com/users/TheCharlatan/repos",
            "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 24,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28690",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28690",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28690.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28690.patch"
          },
          "created_at": "2023-10-20T11:01:03Z",
          "updated_at": "2023-12-13T13:55:18Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-27T22:31:20Z",
      "updated_at": "2023-11-27T22:31:20Z",
      "source": {
        "issue": {
          "id": 1864447692,
          "node_id": "PR_kwDOABII585YqB5K",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28335",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28335/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28335/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28335/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28335",
          "number": 28335,
          "state": "open",
          "state_reason": null,
          "title": "RFC: Remove boost usage from kernel api / headers",
          "body": "Similarly to #28327 I wanted to open this PR to receive some opinions and better approaches.\r\n\r\nThe kernel library is currently at the stage where unwanted headers are removed from its set of headers. In practice, this means we are reducing the number of includes that are required for compiling the experimental `bitcoin-chainstate` binary. This is described in stage 1 step 3 of the [project tracking issue](https://github.com/bitcoin/bitcoin/issues/27587).\r\n\r\nCurrently the mempool is part of the kernel library. The mempool headers include the boost multi index headers. Thus any application wanting to use the kernel library and its headers will have to include the boost headers too. This is not only undesirable because of the sheer size of these headers, but also might lead to conflicts if the including application uses a different boost version.\r\n\r\nIn the approach laid out by this PR, mempool member variables and methods are declared in the header without having to include boost by either wrapping them in a struct and [pimpling](https://en.cppreference.com/w/cpp/language/pimpl) them, or making methods static implementation functions. The boost definitions are gathered into separate header (`mempool_set_definitions.h`) that is only included by implementation files that require definitions of the boost types. This allows us to retain the current architecture with roughly the same interfaces. \r\n\r\nThe approach laid out by this PR also has some, albeit small, compilation speed and size benefits. Averaged over a few of compilation runs I consistently observe faster compilation by a couple of seconds and some smaller pre-processed and compiled object sizes. The main detractor of this method is obviously the number of lines touched. However it also has the benefit of inventorizing all the files that require direct access to the mempool data structures as well getting rid of boost multi index includes in non-kernel implementation files that include the mempool, but don't directly manipulate its data structures (e.g. wallet.cpp).\r\n\r\nA much simpler alternative approach, at least on the surface, would be removing all `txmempool.h` includes from kernel library headers (see [this branch](https://github.com/TheCharlatan/bitcoin/tree/mempoolBoostSimple)). Currently this is only `validation.h`.  Due to the mutex member of `CTxMemPool` and the correspondingly defined lock decorators on the chainstate methods this becomes a bit more complicated though and I am not sure how this might be possible with the current architecture.\r\n\r\nA discussion of how and if to remove the mempool from the kernel library has so far been intentionally punted to the next stage of the kernel library development. Pimpling the mempool itself precludes this discussion, since the library could never be shipped with the `CTxMemPool` headers. Pimpling the mempool members (like done in this PR) might also make a future splitting of block and mempool validation logic into separate compilation units easier.",
          "user": {
            "login": "TheCharlatan",
            "id": 8421793,
            "node_id": "MDQ6VXNlcjg0MjE3OTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TheCharlatan",
            "html_url": "https://github.com/TheCharlatan",
            "followers_url": "https://api.github.com/users/TheCharlatan/followers",
            "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
            "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
            "repos_url": "https://api.github.com/users/TheCharlatan/repos",
            "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 12,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28335",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28335",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28335.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28335.patch"
          },
          "created_at": "2023-08-24T05:46:16Z",
          "updated_at": "2023-12-01T21:17:09Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1828842996,
      "node_id": "IC_kwDOABII585tAe30",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1828842996",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-28T00:07:13Z",
      "updated_at": "2023-11-28T00:07:13Z",
      "author_association": "MEMBER",
      "body": "> Even though we don't have cluster limits, we are able to treat these transactions as having as having a maximum cluster size of 2. \r\n\r\nI don’t think adopting cluster limits instead of max ancestors / descendants limits change anything for V3 packages. What matters is the overall weight limit of the package (4000 WU for a child), as this limit draws an anti-pinning security bound on the lowest off-chain payment that one can afford to burn as an absolute fee . Limit to be evaluated in function of network mempools congestion. Removing the absolute fee replacement rules I think would simplify current pinning analysis - though sounds this is beyond the scope of this proposal.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1828842996",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11086372593,
      "node_id": "HRFPE_lADOABII58539HF9zwAAAAKUzJ7x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11086372593",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-28T17:01:37Z"
    },
    {
      "event": "reviewed",
      "id": 1753556814,
      "node_id": "PRR_kwDOABII585ohSdO",
      "url": null,
      "actor": null,
      "commit_id": "d79f36b1ecb2f26e3dd199e2bf1a0346627994ba",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#pullrequestreview-1753556814",
      "submitted_at": "2023-11-28T18:02:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
    },
    {
      "event": "reviewed",
      "id": 1753714068,
      "node_id": "PRR_kwDOABII585oh42U",
      "url": null,
      "actor": null,
      "commit_id": "8ae62c58cf53792b4fb87d6eec4d6f224e7c2571",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#pullrequestreview-1753714068",
      "submitted_at": "2023-11-28T19:19:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-29T03:28:20Z",
      "updated_at": "2023-11-29T03:28:20Z",
      "source": {
        "issue": {
          "id": 1958204865,
          "node_id": "PR_kwDOABII585dlfBo",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28710",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28710/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28710/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28710/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28710",
          "number": 28710,
          "state": "open",
          "state_reason": null,
          "title": "Remove the legacy wallet and BDB dependency",
          "body": "The final step of #20160.\r\n\r\nA bare minimum of legacy wallet code is kept in order to perform wallet migration. Migration of legacy wallets uses the independent BDB parser and a minimal `LegacyDataSPKM` that allows the legacy data to be loaded so that the migration can be completed.\r\n\r\nAll tests which tested legacy wallet behavior have been removed. The `--descriptors` and `--legacy-wallet` options are removed from the functional tests.\r\n\r\nBDB has been removed as a dependency and documentation have been updated to reflect that.\r\n\r\nDepends on #26596",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28710",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28710",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28710.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28710.patch"
          },
          "created_at": "2023-10-23T23:36:07Z",
          "updated_at": "2024-01-17T16:50:19Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11094965004,
      "node_id": "HRFPE_lADOABII58539HF9zwAAAAKVT7sM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11094965004",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-29T11:12:07Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11095534697,
      "node_id": "HRFPE_lADOABII58539HF9zwAAAAKVWGxp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11095534697",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-29T12:07:59Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11096399343,
      "node_id": "HRFPE_lADOABII58539HF9zwAAAAKVZZ3v",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11096399343",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-29T13:26:20Z"
    },
    {
      "event": "unlabeled",
      "id": 11097038242,
      "node_id": "UNLE_lADOABII58539HF9zwAAAAKVb12i",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11097038242",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-29T14:17:06Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1832044826,
      "node_id": "IC_kwDOABII585tMska",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1832044826",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-29T14:51:35Z",
      "updated_at": "2023-11-29T14:51:35Z",
      "author_association": "MEMBER",
      "body": "CI is green. I've added a rule for maximum sigops and updated the doc.\r\n(cc @sdaftuar)",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1832044826",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "mentioned",
      "id": 11097497748,
      "node_id": "MEE_lADOABII58539HF9zwAAAAKVdmCU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11097497748",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-29T14:51:36Z"
    },
    {
      "event": "subscribed",
      "id": 11097497769,
      "node_id": "SE_lADOABII58539HF9zwAAAAKVdmCp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11097497769",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-29T14:51:36Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-29T15:19:42Z",
      "updated_at": "2023-11-29T15:19:42Z",
      "source": {
        "issue": {
          "id": 2014832404,
          "node_id": "PR_kwDOABII585gk1DX",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28960",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28960/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28960/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28960/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28960",
          "number": 28960,
          "state": "open",
          "state_reason": null,
          "title": "kernel: Remove dependency on CScheduler",
          "body": "By defining a virtual interface class for the scheduler client, users of the kernel can now define their own event consuming infrastructure, without having to spawn threads or rely on the scheduler design.\r\n\r\nRemoving `CScheduler` also allows removing the thread and exception modules from the kernel library. \r\n\r\nTo make the `CMainSignals` class easier to use from a kernel library perspective, remove its global instantiation and adopt RAII practices.\r\n\r\n---\r\n\r\nThis PR is part of the [libbitcoinkernel project](https://github.com/bitcoin/bitcoin/issues/27587). It improves the kernel API and removes two modules from the kernel library.",
          "user": {
            "login": "TheCharlatan",
            "id": 8421793,
            "node_id": "MDQ6VXNlcjg0MjE3OTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TheCharlatan",
            "html_url": "https://github.com/TheCharlatan",
            "followers_url": "https://api.github.com/users/TheCharlatan/followers",
            "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
            "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
            "repos_url": "https://api.github.com/users/TheCharlatan/repos",
            "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 18,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28960",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28960",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28960.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28960.patch"
          },
          "created_at": "2023-11-28T16:27:42Z",
          "updated_at": "2024-01-20T12:30:45Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1756044862,
      "node_id": "PRR_kwDOABII585oqx4-",
      "url": null,
      "actor": null,
      "commit_id": "fc62757320f216a8adf45726eeca121e13d6c39e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#pullrequestreview-1756044862",
      "submitted_at": "2023-11-29T19:21:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
    },
    {
      "event": "reviewed",
      "id": 1756063055,
      "node_id": "PRR_kwDOABII585oq2VP",
      "url": null,
      "actor": null,
      "commit_id": "fc62757320f216a8adf45726eeca121e13d6c39e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#pullrequestreview-1756063055",
      "submitted_at": "2023-11-29T19:32:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
    },
    {
      "event": "reviewed",
      "id": 1756128156,
      "node_id": "PRR_kwDOABII585orGOc",
      "url": null,
      "actor": null,
      "commit_id": "22ce995d0b4fbf697596738503a429de5a057c0e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#pullrequestreview-1756128156",
      "submitted_at": "2023-11-29T20:09:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
    },
    {
      "event": "reviewed",
      "id": 1756038415,
      "node_id": "PRR_kwDOABII585oqwUP",
      "url": null,
      "actor": null,
      "commit_id": "d9ebb11fe28e761df585c38d600bb0c4453a0e86",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#pullrequestreview-1756038415",
      "submitted_at": "2023-11-29T20:10:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
    },
    {
      "event": "commented",
      "id": 1832669087,
      "node_id": "IC_kwDOABII585tPE-f",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1832669087",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-29T20:41:29Z",
      "updated_at": "2023-11-29T20:41:29Z",
      "author_association": "MEMBER",
      "body": "Did a first pass review -- concept ACK.  \r\n\r\nAlso I think we should resurrect #27018 so that we will mine everything in the mempool, but that doesn't need to be in this PR (and probably isn't strictly necessary either).",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1832669087",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "reviewed",
      "id": 1756174839,
      "node_id": "PRR_kwDOABII585orRn3",
      "url": null,
      "actor": null,
      "commit_id": "fc62757320f216a8adf45726eeca121e13d6c39e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#pullrequestreview-1756174839",
      "submitted_at": "2023-11-29T20:42:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-30T15:19:26Z",
      "updated_at": "2023-11-30T15:19:26Z",
      "source": {
        "issue": {
          "id": 2018896655,
          "node_id": "PR_kwDOA6aTl85gyu0m",
          "url": "https://api.github.com/repos/pinheadmz/bitcoin/issues/3",
          "repository_url": "https://api.github.com/repos/pinheadmz/bitcoin",
          "labels_url": "https://api.github.com/repos/pinheadmz/bitcoin/issues/3/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/pinheadmz/bitcoin/issues/3/comments",
          "events_url": "https://api.github.com/repos/pinheadmz/bitcoin/issues/3/events",
          "html_url": "https://github.com/pinheadmz/bitcoin/pull/3",
          "number": 3,
          "state": "closed",
          "state_reason": null,
          "title": "V3 policy",
          "body": "see https://github.com/bitcoin/bitcoin/pull/28948",
          "user": {
            "login": "pinheadmz",
            "id": 2084648,
            "node_id": "MDQ6VXNlcjIwODQ2NDg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pinheadmz",
            "html_url": "https://github.com/pinheadmz",
            "followers_url": "https://api.github.com/users/pinheadmz/followers",
            "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
            "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
            "repos_url": "https://api.github.com/users/pinheadmz/repos",
            "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "OWNER",
          "locked": false,
          "comments": 0,
          "pull_request": {
            "url": "https://api.github.com/repos/pinheadmz/bitcoin/pulls/3",
            "html_url": "https://github.com/pinheadmz/bitcoin/pull/3",
            "diff_url": "https://github.com/pinheadmz/bitcoin/pull/3.diff",
            "patch_url": "https://github.com/pinheadmz/bitcoin/pull/3.patch"
          },
          "closed_at": "2023-12-05T15:03:56Z",
          "created_at": "2023-11-30T15:19:25Z",
          "updated_at": "2023-12-05T15:03:56Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-30T19:30:15Z",
      "updated_at": "2023-11-30T19:30:15Z",
      "source": {
        "issue": {
          "id": 2018689496,
          "node_id": "PR_kwDOABII585gyBK5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28972",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28972/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28972/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28972/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28972",
          "number": 28972,
          "state": "open",
          "state_reason": null,
          "title": "test: Add and use option for tx-version in MiniWallet methods",
          "body": "Fixes https://github.com/bitcoin/bitcoin/pull/26657#discussion_r1071362636 by adding a `version` keyword-argument to `create_self_transfer_multi`, and by passing it via `kwargs` from all other methods.",
          "user": {
            "login": "maflcko",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maflcko",
            "html_url": "https://github.com/maflcko",
            "followers_url": "https://api.github.com/users/maflcko/followers",
            "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
            "organizations_url": "https://api.github.com/users/maflcko/orgs",
            "repos_url": "https://api.github.com/users/maflcko/repos",
            "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/maflcko/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28972",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28972",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28972.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28972.patch"
          },
          "created_at": "2023-11-30T13:37:17Z",
          "updated_at": "2024-01-16T18:54:49Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1835850051,
      "node_id": "IC_kwDOABII585tbNlD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1835850051",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-01T10:30:49Z",
      "updated_at": "2023-12-01T10:30:49Z",
      "author_association": "MEMBER",
      "body": "```\r\n$ echo \"jtHRO///YED/AAD/AAABCQAAgQAN/wAAAQAALAEB/QAAAAAJAAAAAAAAAAAAAAAA+GwAAPAV/v8BkAEicG9vcyYANwAAAAEBADsBAQHo/v7+bv4RAQEBkQABAQE3CTsBIQEBAQEBAAEBATcAACYKAAQBAf8BAQEBAQEBCAABAQEBfgEAAQEBCgAAADsBAQEBAQEB/v8BJgABQQE3AAAAAAFBATcAAAAA8AAAAQEBAQEBAQEBCAABLgEBAX4BAAE=\" | base64 --decode > tx_package_eval-81b8ec0e06b86811790d61f69fe27701ca0c8305.crash\r\n$ FUZZ=tx_package_eval ./src/test/fuzz/fuzz tx_package_eval-81b8ec0e06b86811790d61f69fe27701ca0c8305.crash\r\ntest/fuzz/package_eval.cpp:320 tx_package_eval_fuzz_target: Assertion `entry.GetModFeesWithDescendants() > 0' \r\n```",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1835850051",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-02T01:14:48Z",
      "updated_at": "2023-12-02T01:14:48Z",
      "source": {
        "issue": {
          "id": 2021654832,
          "node_id": "PR_kwDOABII585g8KkU",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28984",
          "number": 28984,
          "state": "open",
          "state_reason": null,
          "title": "Cluster size 2 package rbf",
          "body": "Allows any 2 transaction package with no in-mempool ancestors to do package RBF when directly conflicting with other mempool clusters of size two or less.\r\n\r\n\r\nProposed validation steps:\r\n1) If the transaction package is of size 1, legacy rbf rules apply.\r\n2) Otherwise the transaction package consists of a (parent, child) pair with no other in-mempool ancestors (or descendants, obviously), so it is also going to create a cluster of size 2). If larger, fail.\r\n3) The package rbf may not evict more than 100 transactions from the mempool(bip125 rule 5)\r\n4) The package's child tx has greater feerate than the parent tx (otherwise the parent should have RBF'd on its own at step 0)\r\n5) Every directly conflicted mempool transaction is connected to at most 1 other in-mempool transaction (ie the cluster size of the conflict is at most 2).\r\n6) Diagram check: We ensure that the replacement is strictly superior at all points, improving the mempool (which includes bip125 rule 3)\r\n7) The total fee of the package, minus the total fee of what is being evicted, is at least the minrelayfee * size of the package (equivalent to bip125 rule 3 and 4)\r\n\r\nPost-cluster mempool this will likely be expanded to general package rbf, but this is what we can safely support today.\r\n",
          "user": {
            "login": "instagibbs",
            "id": 5767891,
            "node_id": "MDQ6VXNlcjU3Njc4OTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/instagibbs",
            "html_url": "https://github.com/instagibbs",
            "followers_url": "https://api.github.com/users/instagibbs/followers",
            "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
            "organizations_url": "https://api.github.com/users/instagibbs/orgs",
            "repos_url": "https://api.github.com/users/instagibbs/repos",
            "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/instagibbs/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 82428251,
              "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
              "name": "TX fees and policy",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 14,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28984",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28984.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28984.patch"
          },
          "created_at": "2023-12-01T22:12:06Z",
          "updated_at": "2024-01-18T00:10:11Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1837780398,
      "node_id": "IC_kwDOABII585tik2u",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1837780398",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-04T03:26:01Z",
      "updated_at": "2023-12-04T03:32:56Z",
      "author_association": "MEMBER",
      "body": "> Also I think we should resurrect https://github.com/bitcoin/bitcoin/pull/27018 so that we will mine everything in the mempool, but that doesn't need to be in this PR (and probably isn't strictly necessary either).\r\n\r\nI don’t know about automatically flushing out <= 0 fees even when the local mempool is empty. One could add significant computing payload on its mining competitors by throwing buffy packages with 0 fees parent and then replace the high-fee child (in a cycle). A more robust approach can be to let those 0 fees parent sleep in the local non-full mempool, and only evict them when you have non-0 fees transactions showing up. The asymmetry between the additional computational cost to flush out automatically and the rbf penalty paid sounds to be at the advantage of a potential denial-of-service attacker (edited).",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1837780398",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "commented",
      "id": 1838855510,
      "node_id": "IC_kwDOABII585tmrVW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1838855510",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-04T15:14:07Z",
      "updated_at": "2023-12-04T15:14:07Z",
      "author_association": "MEMBER",
      "body": "> I don’t know about automatically flushing out <= 0 fees even when the local mempool is empty. One could add significant computing payload on its mining competitors by throwing buffy packages with 0 fees parent and then replace the high-fee child (in a cycle). \r\n\r\nThe replacements are paying for those CPU cycles and bandwidth via \"incremental feerate\", it's equivalent to an entire package simply being RBF'd like normal. Keeping 0-fee parents hanging around in mempool would also allow new entries into the mempool that will never be mined. See https://github.com/bitcoin/bitcoin/pull/26933 for historical discussion. Post-cluster mempool maybe that isn't the case anymore.\r\n\r\nIt also neatly allows ephemeral anchors to be ejected from the mempool if it has no children.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1838855510",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "reviewed",
      "id": 1763610776,
      "node_id": "PRR_kwDOABII585pHpCY",
      "url": null,
      "actor": null,
      "commit_id": "d9ebb11fe28e761df585c38d600bb0c4453a0e86",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "[Edit]: Got confused about something yesterday, removed this point.\r\n\r\nAs a side effect, I think this will allow users to remove select entries from their non-full mempool by prioritizing to large negative values (so basically a poor man's  [removemempoolentry](https://github.com/bitcoin/bitcoin/pull/15873)).",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#pullrequestreview-1763610776",
      "submitted_at": "2023-12-04T23:09:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11148020860,
      "node_id": "HRFPE_lADOABII58539HF9zwAAAAKYeUx8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11148020860",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-05T05:26:04Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-05T16:30:47Z",
      "updated_at": "2023-12-05T16:30:47Z",
      "source": {
        "issue": {
          "id": 2026622135,
          "node_id": "PR_kwDOABII585hM4GJ",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29001",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29001/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29001/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29001/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29001",
          "number": 29001,
          "state": "open",
          "state_reason": null,
          "title": "Ephemeral Anchors",
          "body": "Depends on https://github.com/bitcoin/bitcoin/pull/28948 and https://github.com/bitcoin/bitcoin/pull/28984\r\n\r\nReplaces https://github.com/bitcoin/bitcoin/pull/26403 to refresh the conversation.\r\n\r\nBIP text here: https://github.com/instagibbs/bips/blob/ephemeral_anchor/bip-ephemeralanchors.mediawiki\r\n\r\nExample usage:\r\nhttps://github.com/instagibbs/bolts/commits/zero_fee_commitment\r\nhttps://github.com/instagibbs/lightning/commits/commit_zero_fees\r\n\r\nTODO:\r\n1) figure out what precisely to do in a reorg when ephemeral transactions are trying to enter the mempool(and write a test)",
          "user": {
            "login": "instagibbs",
            "id": 5767891,
            "node_id": "MDQ6VXNlcjU3Njc4OTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/instagibbs",
            "html_url": "https://github.com/instagibbs",
            "followers_url": "https://api.github.com/users/instagibbs/followers",
            "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
            "organizations_url": "https://api.github.com/users/instagibbs/orgs",
            "repos_url": "https://api.github.com/users/instagibbs/repos",
            "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/instagibbs/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 82428251,
              "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
              "name": "TX fees and policy",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29001",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29001",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29001.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29001.patch"
          },
          "created_at": "2023-12-05T16:30:46Z",
          "updated_at": "2023-12-26T06:16:06Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1842795172,
      "node_id": "IC_kwDOABII585t1tKk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1842795172",
      "actor": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-06T12:44:41Z",
      "updated_at": "2023-12-06T12:44:41Z",
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1842795172",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "commented",
      "id": 1845689097,
      "node_id": "IC_kwDOABII585uAvsJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1845689097",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-07T16:49:10Z",
      "updated_at": "2023-12-07T16:49:10Z",
      "author_association": "MEMBER",
      "body": "re: https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1835850051\r\n\r\n`LimitMempoolSize` is only called upon successful transaction inclusions, so a v3 tx that is negatively prioritized later may not be evicted yet.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1845689097",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-07T21:11:33Z",
      "updated_at": "2023-12-07T21:11:33Z",
      "source": {
        "issue": {
          "id": 1950437953,
          "node_id": "PR_kwDOABII585dLamZ",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28676",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28676/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28676/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28676/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28676",
          "number": 28676,
          "state": "open",
          "state_reason": null,
          "title": "[WIP] Cluster mempool implementation",
          "body": "This is a draft implementation of the cluster mempool design described in #27677.  I'm opening this as a draft PR now to share the branch I'm working on with others, so that we can start to think about in-progress projects (like package relay, package validation, and package rbf) in the context of this design.  Also, I can use some help from others for parts of this work, including the interaction between the mempool and the wallet, and also reworking some of our existing test cases to fit a cluster-mempool world.\r\n\r\nNote that the design of this implementation is subject to change as I continue to iterate on the code (to make the code more hygienic and robust, in particular). At this point though I think the performance is pretty reasonable and I'm not currently aware of any bugs.  There are some microbenchmarks added here, and some improved fuzz tests; it would be great if others ran both of those on their own hardware as well and reported back on any findings.\r\n\r\nThis branch implements the following observable behavior changes:\r\n\r\n- Maintains a partitioning of the mempool into connected clusters\r\n- Each cluster is sorted (\"linearized\") either using an optimal sort, or an ancestor-feerate-based one, depending on the size of the cluster (thanks to @sipa for this logic)\r\n- Transaction selection for mining is updated to use the cluster linearizations\r\n- Mempool eviction is updated to use the cluster linearizations\r\n- The RBF rules are updated to drop the requirement that no new inputs are introduced, and to change the feerate requirement to instead check that the mining score of a replacement transaction exceed the mining score of the conflicted transactions\r\n- The CPFP carveout rule is eliminated (it doesn't make sense in a cluster-limited mempool)\r\n- The ancestor and descendant limits are no longer enforced.\r\n- New cluster count/cluster vsize limits are now enforced instead.\r\n\r\nSome less observable behavior changes:\r\n- The cached ancestor and descendant data are dropped from the mempool, along with the multi_index indices that were maintained to sort the mempool by ancestor and descendant feerates. For compatibility (eg with wallet behavior or RPCs exposing this), this information is now calculated dynamically instead.\r\n- The ancestor and descendant walking algorithms are now implemented using `epoch`s (resulting in a significant performance improvement, according to the benchmarks I've looked at)\r\n\r\nStill to do:\r\n\r\n- [ ] More comparisons between this branch and master on historical data to compare validation speed (accepting loose transactions, processing RBF transactions, validating a block/postprocessing, updating the mempool for a reorg).\r\n- [ ] More historical data analysis to try to evaluate the likely impact of setting the cluster size limits to varying values (to motivate what values we should ultimately pick)\r\n- [ ] Updating wallet code to be cluster-aware (including mini_miner and coin selection)\r\n- [ ] Rework many of our functional tests to be cluster-aware\r\n- [ ] Figure out what package validation and package RBF rules should be in this design\r\n- [ ] Rework the `partially_downloaded_block` fuzz target to not add mempool transactions in a topologically-invalid way.\r\n- [ ] Update RBF logic to ensure that replacements always strictly improve the mempool.\r\n- [ ] Figure out how we want to document our RBF policy (preserve historical references to BIP 125 or previous Bitcoin Core behaviors vs clean slate documentation?)\r\n\r\nFor discussion/feedback:\r\n\r\n - How significant is it to be dropping the CPFP carveout rule?  Does that affect how we will ultimately want to stage new mempool deployment?\r\n - How well do the proposed RBF rules meet everyone's use cases?\r\n - What design improvements can we make to the cluster tracking implementation?\r\n - The ZMQ callbacks that occur when a block is found will happen in a slightly different order, because we now will fully remove all transactions occurring in a block from the mempool before removing any conflicts. Is this a problem?",
          "user": {
            "login": "sdaftuar",
            "id": 7463573,
            "node_id": "MDQ6VXNlcjc0NjM1NzM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sdaftuar",
            "html_url": "https://github.com/sdaftuar",
            "followers_url": "https://api.github.com/users/sdaftuar/followers",
            "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
            "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
            "repos_url": "https://api.github.com/users/sdaftuar/repos",
            "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 164208572,
              "node_id": "MDU6TGFiZWwxNjQyMDg1NzI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool",
              "name": "Mempool",
              "color": "fef2c0",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28676",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28676",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28676.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28676.patch"
          },
          "created_at": "2023-10-18T18:59:37Z",
          "updated_at": "2023-12-18T17:38:39Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1773907154,
      "node_id": "PRR_kwDOABII585pu6zS",
      "url": null,
      "actor": null,
      "commit_id": "4fce51680cef5b2cde751bc088d2ff6085f1cf29",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#pullrequestreview-1773907154",
      "submitted_at": "2023-12-10T00:46:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
    },
    {
      "event": "reviewed",
      "id": 1774659127,
      "node_id": "PRR_kwDOABII585pxyY3",
      "url": null,
      "actor": null,
      "commit_id": "4fce51680cef5b2cde751bc088d2ff6085f1cf29",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": ">There are some pinning issues that are fixed here and not fully fixed in cluster mempool, so we will continue to use this or something similar afterward.\r\n\r\nIf IIUC the pinning issues that are fixed by this new v3 rules are \r\n1. Rule 3 Absolute fee pinning.\r\n2. Rule 5 pinning vector.\r\n\r\n\r\n~I looked at the proposal of cluster mempool the v3 proposals but fail to understand how the addition of cluster mempool might revert the pinning vectors solved by this new policy rules specifically of the above pinning issues.  ~\r\nEdit thanks to @instagibbs for insights\r\n\r\nI believe what you meant is that certain pinning attacks, such as rule 3 pinning, aren't resolved by introducing a cluster mempool.\r\n\r\nTo address rule 3 pinning post cluster mempool, we'll need policy rules similar to the ones in the current v3 transactions policy. For instance, enforcing a cluster size limit of two transactions, and the child size restriction.\r\n\r\nBecause cluster mempool will require these policy rules in the future as such cluster mempool and v3 transactions do not conflict with one another, after v3 transaction policy is added cluster mempool will just likely fit in.\r\n\r\nPost v3, rule 3 and rule 5 pinning are eliminated. If a cluster mempool is added after v3 transactions, the cluster limit remains at 2. This means rule 3 is still eliminated, and with a cluster limit of 2, we won't encounter rule 5 package limit pinning during package rbf of lightning commitment transactions since we are rbfing a single cluster of size two.\r\n\r\n\r\nReviewed to b39cdfbd4c88adc2060841f49a6caaf7e5202c82 so far.\r\n",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#pullrequestreview-1774659127",
      "submitted_at": "2023-12-11T14:17:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
    },
    {
      "event": "reviewed",
      "id": 1775478745,
      "node_id": "PRR_kwDOABII585p06fZ",
      "url": null,
      "actor": null,
      "commit_id": "104b3d39f416d20ab496d753afbe7e4d31902065",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#pullrequestreview-1775478745",
      "submitted_at": "2023-12-11T15:47:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11223454417,
      "node_id": "HRFPE_lADOABII58539HF9zwAAAAKc-FLR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11223454417",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-12T13:18:29Z"
    },
    {
      "event": "commented",
      "id": 1852028059,
      "node_id": "IC_kwDOABII585uY7Sb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1852028059",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-12T13:23:44Z",
      "updated_at": "2023-12-12T13:23:44Z",
      "author_association": "MEMBER",
      "body": "> As a side effect, I think this will allow users to remove select entries from their non-full mempool by prioritizing to large negative values (so basically a poor man's https://github.com/bitcoin/bitcoin/pull/15873).\r\n\r\nThis was discussed as part of #27018, also see the discussion on irc that day: https://bitcoin-irc.chaincode.com/bitcoin-core-dev/2023-02-01. I think the general idea is \"this is good, and will help avoid unspent ephemeral anchors.\"",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1852028059",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "commented",
      "id": 1852030780,
      "node_id": "IC_kwDOABII585uY788",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1852030780",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-12T13:25:31Z",
      "updated_at": "2023-12-12T13:25:31Z",
      "author_association": "MEMBER",
      "body": "Last push fixed issues and addressed most comments, I'm also working on adding more tests.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1852030780",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-12T14:18:54Z",
      "updated_at": "2023-12-12T14:18:54Z",
      "source": {
        "issue": {
          "id": 1566660823,
          "node_id": "PR_kwDOABII585JCXFm",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27018",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27018/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27018/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27018/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27018",
          "number": 27018,
          "state": "closed",
          "state_reason": null,
          "title": "mempool / miner: regularly flush <=0-fee entries and mine everything in the mempool",
          "body": "This was suggested in https://github.com/bitcoin/bitcoin/pull/26933#issuecomment-1412320818.\r\n\r\n**The Problem**\r\nPackage CPFP (only accessible through regtest-only RPC submitpackage) allows 0-fee (or otherwise below min relay feerate) transactions if they are bumped by a child. We need to know what to do with these transactions if they lose their sponsor, e.g. due to a replacement that removed the input spending this 0-fee transaction.\r\n\r\nThis is made slightly more complicated by the fact that our \"selection scoring\" (BlockAssembler) is different from our \"eviction scoring.\" Roughly, we select based on ancestor feerate and evict based on descendant feerate. This may lead to [evicting things we would actually want to mine](https://github.com/bitcoin/bitcoin/pull/27018#issuecomment-1424742766) and [not evicting things that we will never mine](https://github.com/bitcoin/bitcoin/pull/26933#issuecomment-1400143991).\r\n\r\nThis PR's approach is to remove the 1sat/vB `-blockmintxfee` and have BlockAssembler select anything in the mempool (still based on ancestor packages, but not stopping at 1sat/vB). It also adds logic to `TrimToSize()` to evict anything paying <=0 fees. The idea is, if we're getting to the bottom of our mempool, we scrape up all the sats we can. Anything that pays *some* fee is worth adding to the block template.\r\n\r\nA major advantage of this approach is that 0-fee, non-v3 transactions can be bumped in package CPFP.\r\n\r\nA few observations which may or may not be problematic:\r\n- This increases the potential work after a reorg, since we add an extra step of removing the below-minrelayfeerate entries.\r\n- This increases the number of transactions that may be evicted in a replacement (from the worst case scenario we discussed before, it's up to 2500 entries).\r\n- This means you can remove a transaction from your own mempool by calling prioritisetransaction with a negative value.\r\n",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 118378960,
              "node_id": "MDU6TGFiZWwxMTgzNzg5NjA=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mining",
              "name": "Mining",
              "color": "c7def8",
              "default": false
            },
            {
              "id": 164208572,
              "node_id": "MDU6TGFiZWwxNjQyMDg1NzI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool",
              "name": "Mempool",
              "color": "fef2c0",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 13,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27018",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27018",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27018.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27018.patch"
          },
          "closed_at": "2023-08-09T09:12:06Z",
          "created_at": "2023-02-01T19:11:35Z",
          "updated_at": "2023-12-12T14:18:55Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1777677456,
      "node_id": "PRR_kwDOABII585p9TSQ",
      "url": null,
      "actor": null,
      "commit_id": "e649551b120da0597668941d8b72e8a3fb33f087",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#pullrequestreview-1777677456",
      "submitted_at": "2023-12-12T14:53:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11225580093,
      "node_id": "HRFPE_lADOABII58539HF9zwAAAAKdGMI9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11225580093",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-12T15:51:23Z"
    },
    {
      "event": "commented",
      "id": 1852315761,
      "node_id": "IC_kwDOABII585uaBhx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1852315761",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-12T15:53:31Z",
      "updated_at": "2023-12-12T15:53:31Z",
      "author_association": "MEMBER",
      "body": "Fixed the fuzzer crashes in  https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1828351782 and https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1835850051 (thanks)",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1852315761",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "commented",
      "id": 1852439055,
      "node_id": "IC_kwDOABII585uafoP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1852439055",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-12T16:58:44Z",
      "updated_at": "2023-12-12T16:58:44Z",
      "author_association": "MEMBER",
      "body": "```\r\n$ echo \"/v//tk/aAYxsz8/Pz8/PAAAAAAB2AAYAAADPz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz88AAABAAgAAAL35AAAABwIBAIwAAABA0gH5ACMAAAAAAAAAAAAAAAAAAAAADgAAAAAAAAAAAAFBWwAACD/gPp66urq6uro=\" | base64 --decode > tx_package_eval-e9f61e34e32c669558b51daaec0c5c3780377b37.crash\r\n$ FUZZ=tx_package_eval ./src/test/fuzz/fuzz tx_package_eval-e9f61e34e32c669558b51daaec0c5c3780377b37.crash\r\ntest/util/txmempool.cpp:132 CheckMempoolV3Invariants: Assertion `entry.GetTxSize() <= V3_CHILD_MAX_VSIZE' failed.\r\n```",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1852439055",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "reviewed",
      "id": 1777711045,
      "node_id": "PRR_kwDOABII585p9bfF",
      "url": null,
      "actor": null,
      "commit_id": "f7a3e96eee6a848b22f92a9167e47841642eba2c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "`test_v3_ancestors_package` checked two failing conditions, which allowed the one condition(too heavy child) to slip through\r\n\r\n```\r\ndiff --git a/test/functional/mempool_accept_v3.py b/test/functional/mempool_accept_v3.py\r\nindex 837846970f..ee3cdd4cd4 100755\r\n--- a/test/functional/mempool_accept_v3.py\r\n+++ b/test/functional/mempool_accept_v3.py\r\n@@ -222,58 +222,69 @@ class MempoolAcceptV3(BitcoinTestFramework):\r\n         node = self.nodes[0]\r\n         self.log.info(\"Test that below-min-relay-feerate transactions are removed in RBF\")\r\n         tx_0fee_parent = self.wallet.create_self_transfer(fee=0, fee_rate=0, version=3)\r\n         utxo_confirmed = self.wallet.get_utxo()\r\n         tx_child_replacee = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx_0fee_parent[\"new_utxo\"], utxo_confirmed], version=3)\r\n         node.submitpackage([tx_0fee_parent[\"hex\"], tx_child_replacee[\"hex\"]])\r\n         self.check_mempool([tx_0fee_parent[\"txid\"], tx_child_replacee[\"txid\"]])\r\n         tx_replacer = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo_confirmed, fee_rate=DEFAULT_FEE * 10)\r\n         self.check_mempool([tx_replacer[\"txid\"]])\r\n \r\n     @cleanup\r\n     def test_v3_ancestors_package(self):\r\n         self.log.info(\"Test that v3 ancestor limits are checked within the package\")\r\n         node = self.nodes[0]\r\n         self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\r\n         tx_v3_parent_normal = self.wallet.create_self_transfer(\r\n             fee_rate=0,\r\n             target_weight=4004,\r\n             version=3\r\n         )\r\n         tx_v3_parent_2_normal = self.wallet.create_self_transfer(\r\n             fee_rate=0,\r\n             target_weight=4004,\r\n             version=3\r\n         )\r\n-        tx_v3_child_heavy = self.wallet.create_self_transfer_multi(\r\n+        tx_v3_child_multiparent = self.wallet.create_self_transfer_multi(\r\n             utxos_to_spend=[tx_v3_parent_normal[\"new_utxo\"], tx_v3_parent_2_normal[\"new_utxo\"]],\r\n+            target_weight=4000,\r\n+            fee_per_output=10000,\r\n+            version=3\r\n+        )\r\n+        tx_v3_child_heavy = self.wallet.create_self_transfer_multi(\r\n+            utxos_to_spend=[tx_v3_parent_normal[\"new_utxo\"]],\r\n             target_weight=4004,\r\n             fee_per_output=10000,\r\n             version=3\r\n         )\r\n+\r\n         assert_equal(node.getrawmempool(), [])\r\n-        result = node.submitpackage([tx_v3_parent_normal[\"hex\"], tx_v3_parent_2_normal[\"hex\"], tx_v3_child_heavy[\"hex\"]])\r\n+        result = node.submitpackage([tx_v3_parent_normal[\"hex\"], tx_v3_parent_2_normal[\"hex\"], tx_v3_child_multiparent[\"hex\"]])\r\n+        assert result['package_msg'] != 'success'\r\n+        self.check_mempool([])\r\n+\r\n+        result = node.submitpackage([tx_v3_parent_normal[\"hex\"], tx_v3_child_heavy[\"hex\"]])\r\n         assert result['package_msg'] != 'success'\r\n         self.check_mempool([])\r\n \r\n     @cleanup\r\n     def test_v3_ancestors_package_and_mempool(self):\r\n         \"\"\"\r\n         A v3 transaction in a package cannot have 2 v3 parents.\r\n         Test that if we have a transaction graph A -> B -> C, where A, B, C are\r\n         all v3 transactions, that we cannot use submitpackage to get the\r\n         transactions all into the mempool.\r\n \r\n         Verify, in particular, that if A is already in the mempool, then\r\n         submitpackage(B, C) will fail.\r\n         \"\"\"\r\n         node = self.nodes[0]\r\n         self.log.info(\"Test that v3 ancestor limits include transactions within the package and all in-mempool ancestors\")\r\n         # This is our transaction \"A\":\r\n         tx_in_mempool = self.wallet.send_self_transfer(from_node=node, version=3)\r\n \r\n         # Verify that A is in the mempool\r\n         self.check_mempool([tx_in_mempool[\"txid\"]])\r\n \r\n         # tx_0fee_parent is our transaction \"B\"; just create it.\r\n         tx_0fee_parent = self.wallet.create_self_transfer(utxo_to_spend=tx_in_mempool[\"new_utxo\"], fee=0, fee_rate=0, version=3)\r\n ```",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#pullrequestreview-1777711045",
      "submitted_at": "2023-12-12T17:01:34Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11234584628,
      "node_id": "HRFPE_lADOABII58539HF9zwAAAAKdoig0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11234584628",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-13T11:16:40Z"
    },
    {
      "event": "commented",
      "id": 1853734787,
      "node_id": "IC_kwDOABII585ufb-D",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1853734787",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-13T11:22:05Z",
      "updated_at": "2023-12-14T10:00:40Z",
      "author_association": "MEMBER",
      "body": "https://github.com/bitcoin/bitcoin/pull/28948#pullrequestreview-1777711045\r\n\r\nAdded this test ~but changed the `tx_v3_child_heavy` test assuming that it wasn't supposed to be submitted with `tx_v3_parent_2_normal` (it fails package topo checks then), lmk if you had something else in mind?~ EDIT: nvm I misread the diff",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1853734787",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "reviewed",
      "id": 1779430003,
      "node_id": "PRR_kwDOABII585qD_Jz",
      "url": null,
      "actor": null,
      "commit_id": "925a5080dd6c65a62016e576433d7aad61e92e91",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "ilimtv",
        "id": 151948456,
        "node_id": "U_kgDOCQ6MqA",
        "avatar_url": "https://avatars.githubusercontent.com/u/151948456?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ilimtv",
        "html_url": "https://github.com/ilimtv",
        "followers_url": "https://api.github.com/users/ilimtv/followers",
        "following_url": "https://api.github.com/users/ilimtv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ilimtv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ilimtv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ilimtv/subscriptions",
        "organizations_url": "https://api.github.com/users/ilimtv/orgs",
        "repos_url": "https://api.github.com/users/ilimtv/repos",
        "events_url": "https://api.github.com/users/ilimtv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ilimtv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#pullrequestreview-1779430003",
      "submitted_at": "2023-12-13T11:28:50Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11234832636,
      "node_id": "HRFPE_lADOABII58539HF9zwAAAAKdpfD8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11234832636",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-13T11:41:17Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11234850099,
      "node_id": "HRFPE_lADOABII58539HF9zwAAAAKdpjUz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11234850099",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-13T11:43:07Z"
    },
    {
      "event": "labeled",
      "id": 11235950895,
      "node_id": "LE_lADOABII58539HF9zwAAAAKdtwEv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11235950895",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-13T13:26:54Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-13T13:59:00Z",
      "updated_at": "2023-12-13T13:59:00Z",
      "source": {
        "issue": {
          "id": 2016966837,
          "node_id": "PR_kwDOABII585gsIyD",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28970",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28970/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28970/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28970/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28970",
          "number": 28970,
          "state": "open",
          "state_reason": null,
          "title": "[WIP] p2p: opportunistically accept 1-parent-1-child packages",
          "body": "Enable 1-parent-1-child package relay :rocket: (just using the existing protocol messages).\r\n\r\nSee https://github.com/bitcoin/bitcoin/issues/27463 for overall package relay tracking.\r\n\r\nRationale:\r\n- Package relay is nice [1]. Relaying 1-parent-1-child CPFP when mempool min feerate is high would be a subset of the use cases, but a pretty significant improvement over what we have today.\r\n- Switching to a cluster-based mempool (see\r\nhttps://github.com/bitcoin/bitcoin/issues/27677 and https://github.com/bitcoin/bitcoin/pull/28676) requires the removal of CPFP carve out, which applications depend on. V3 + package RBF + ephemeral anchors + 1-parent-1-child package relay provides an intermediate solution.\r\n- The majority of this code is useful for building e.g. #27742.\r\n\r\nThis means 1p1c packages propagate in the \"happy case\" where nobody is deliberately withholding packages.\r\n\r\nTo make this more robust, we need receiver-side logic to retry orphan resolution with multiple peers. Also, since we rely on the orphanage to remember the child while waiting for the parent, peers may cause us to drop packages by sending lots of orphans. To make this robust, we need to make efforts to protect some amount of orphans from eviction.\r\n\r\n[1]: see this writeup and its links https://github.com/bitcoin/bips/blob/02ec218c7857ef60914e9a3d383b68caf987f70b/bip-0331.mediawiki#propagate-high-feerate-transactions",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28970",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28970.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28970.patch"
          },
          "created_at": "2023-11-29T16:25:29Z",
          "updated_at": "2024-01-16T14:23:45Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1780045798,
      "node_id": "PRR_kwDOABII585qGVfm",
      "url": null,
      "actor": null,
      "commit_id": "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#pullrequestreview-1780045798",
      "submitted_at": "2023-12-13T16:31:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
    },
    {
      "event": "reviewed",
      "id": 1780186265,
      "node_id": "PRR_kwDOABII585qG3yZ",
      "url": null,
      "actor": null,
      "commit_id": "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "more plausibly correct now, fuzzer is passing if the fee check is disabled",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#pullrequestreview-1780186265",
      "submitted_at": "2023-12-13T18:06:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11245904219,
      "node_id": "HRFPE_lADOABII58539HF9zwAAAAKeTuFb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11245904219",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-14T09:51:40Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11246310268,
      "node_id": "HRFPE_lADOABII58539HF9zwAAAAKeVRN8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11246310268",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-14T10:28:33Z"
    },
    {
      "event": "unlabeled",
      "id": 11246893794,
      "node_id": "UNLE_lADOABII58539HF9zwAAAAKeXfri",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11246893794",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-14T11:25:23Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1780409781,
      "node_id": "PRR_kwDOABII585qHuW1",
      "url": null,
      "actor": null,
      "commit_id": "53c6871dfd88dcd921ce8938cdf2c45b0cf2f662",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#pullrequestreview-1780409781",
      "submitted_at": "2023-12-14T14:30:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
    },
    {
      "event": "reviewed",
      "id": 1782155752,
      "node_id": "PRR_kwDOABII585qOYno",
      "url": null,
      "actor": null,
      "commit_id": "53c6871dfd88dcd921ce8938cdf2c45b0cf2f662",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#pullrequestreview-1782155752",
      "submitted_at": "2023-12-14T16:04:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
    },
    {
      "event": "reviewed",
      "id": 1782917582,
      "node_id": "PRR_kwDOABII585qRSnO",
      "url": null,
      "actor": null,
      "commit_id": "aef21d97b30d40665994bb514fb28b6599ddd8b8",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#pullrequestreview-1782917582",
      "submitted_at": "2023-12-14T23:47:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
    },
    {
      "event": "comment_deleted",
      "id": 11255734464,
      "node_id": "CDE_lADOABII58539HF9zwAAAAKe5ODA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11255734464",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-15T05:55:27Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-15T07:08:15Z",
      "updated_at": "2023-12-15T07:08:15Z",
      "source": {
        "issue": {
          "id": 2042832766,
          "node_id": "PR_kwDOABII585iEBHC",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29086",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29086/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29086/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29086/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29086",
          "number": 29086,
          "state": "open",
          "state_reason": null,
          "title": "refactor: Simply include CTxMemPool::Options in CTxMemPool directly rather than duplicating definition",
          "body": "Instead of duplicating mempool options two places, just include the Options struct directly on the CTxMemPool",
          "user": {
            "login": "luke-jr",
            "id": 1095675,
            "node_id": "MDQ6VXNlcjEwOTU2NzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/luke-jr",
            "html_url": "https://github.com/luke-jr",
            "followers_url": "https://api.github.com/users/luke-jr/followers",
            "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
            "organizations_url": "https://api.github.com/users/luke-jr/orgs",
            "repos_url": "https://api.github.com/users/luke-jr/repos",
            "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/luke-jr/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29086",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29086",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29086.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29086.patch"
          },
          "created_at": "2023-12-15T03:33:59Z",
          "updated_at": "2023-12-18T17:34:57Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11259093027,
      "node_id": "HRFPE_lADOABII58539HF9zwAAAAKfGCAj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11259093027",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-15T12:26:09Z"
    },
    {
      "event": "labeled",
      "id": 11259634205,
      "node_id": "LE_lADOABII58539HF9zwAAAAKfIGId",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11259634205",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-15T13:26:16Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11260687111,
      "node_id": "HRFPE_lADOABII58539HF9zwAAAAKfMHMH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11260687111",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-15T15:11:19Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11260689752,
      "node_id": "HRFPE_lADOABII58539HF9zwAAAAKfMH1Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11260689752",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-15T15:11:36Z"
    },
    {
      "event": "unlabeled",
      "id": 11261190603,
      "node_id": "UNLE_lADOABII58539HF9zwAAAAKfOCHL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11261190603",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-15T16:01:18Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1784369989,
      "node_id": "PRR_kwDOABII585qW1NF",
      "url": null,
      "actor": null,
      "commit_id": "2e2ea9b4ca1f742459db51c83e3f935e48a679ff",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#pullrequestreview-1784369989",
      "submitted_at": "2023-12-15T17:22:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11262358814,
      "node_id": "HRFPE_lADOABII58539HF9zwAAAAKfSfUe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11262358814",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-15T18:12:31Z"
    },
    {
      "event": "reviewed",
      "id": 1784694138,
      "node_id": "PRR_kwDOABII585qYEV6",
      "url": null,
      "actor": null,
      "commit_id": "1a2f7253cfdff03cae5ac6c537e7b6540b0632f8",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#pullrequestreview-1784694138",
      "submitted_at": "2023-12-15T18:14:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
    },
    {
      "event": "commented",
      "id": 1858463698,
      "node_id": "IC_kwDOABII585uxefS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1858463698",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-15T20:44:31Z",
      "updated_at": "2023-12-15T20:44:31Z",
      "author_association": "MEMBER",
      "body": "Here's a small patch to add sigops-adjusted coverage for v3 children, with an intentional bug added to ensure it could be hit.\r\n\r\nhttps://gist.github.com/instagibbs/c5cb0796ceec81f0374ae614f8cdab7f",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1858463698",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11274054370,
      "node_id": "HRFPE_lADOABII58539HF9zwAAAAKf_Gri",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11274054370",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-18T09:33:31Z"
    },
    {
      "event": "commented",
      "id": 1859928729,
      "node_id": "IC_kwDOABII585u3EKZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1859928729",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-18T09:33:43Z",
      "updated_at": "2023-12-18T09:33:43Z",
      "author_association": "MEMBER",
      "body": "> Here's a small patch to add sigops-adjusted coverage for v3 children\r\n\r\nNice, taken",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1859928729",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-18T16:03:42Z",
      "updated_at": "2023-12-18T16:03:42Z",
      "source": {
        "issue": {
          "id": 2046645275,
          "node_id": "PR_kwDOABII585iQ0Qg",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29107",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29107/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29107/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29107/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29107",
          "number": 29107,
          "state": "closed",
          "state_reason": null,
          "title": "Fix spelling errors",
          "body": "Found these when running lint tests locally.\r\n\r\n```\r\nsrc/rpc/util.h:405: falsy ==> falsely, false\r\nsrc/rpc/util.h:408: falsy ==> falsely, false\r\nsrc/test/fuzz/package_eval.cpp:214: non-existant ==> non-existent\r\nsrc/test/span_tests.cpp:56: memeber ==> member\r\n^ Warning: codespell identified likely spelling errors. Any false positives? Add them to the list of ignored words in test/lint/spelling.ignore-words.txt\r\n```\r\n\r\nGuess it's because I'm having different version of codespell?\r\n\r\nIn any case, these aren't false positives and should be fixed.",
          "user": {
            "login": "kristapsk",
            "id": 4500994,
            "node_id": "MDQ6VXNlcjQ1MDA5OTQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4500994?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kristapsk",
            "html_url": "https://github.com/kristapsk",
            "followers_url": "https://api.github.com/users/kristapsk/followers",
            "following_url": "https://api.github.com/users/kristapsk/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/kristapsk/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/kristapsk/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/kristapsk/subscriptions",
            "organizations_url": "https://api.github.com/users/kristapsk/orgs",
            "repos_url": "https://api.github.com/users/kristapsk/repos",
            "events_url": "https://api.github.com/users/kristapsk/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/kristapsk/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29107",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29107",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29107.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29107.patch"
          },
          "closed_at": "2023-12-21T11:21:10Z",
          "created_at": "2023-12-18T13:16:03Z",
          "updated_at": "2023-12-21T12:01:58Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1791012290,
      "node_id": "PRR_kwDOABII585qwK3C",
      "url": null,
      "actor": null,
      "commit_id": "1dd62c3df4856c36bfc610f700684852772dd9f7",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#pullrequestreview-1791012290",
      "submitted_at": "2023-12-21T14:23:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
    },
    {
      "event": "commented",
      "id": 1873422305,
      "node_id": "IC_kwDOABII585vqifh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1873422305",
      "actor": {
        "login": "pox",
        "id": 47615825,
        "node_id": "MDQ6VXNlcjQ3NjE1ODI1",
        "avatar_url": "https://avatars.githubusercontent.com/u/47615825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pox",
        "html_url": "https://github.com/pox",
        "followers_url": "https://api.github.com/users/pox/followers",
        "following_url": "https://api.github.com/users/pox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pox/subscriptions",
        "organizations_url": "https://api.github.com/users/pox/orgs",
        "repos_url": "https://api.github.com/users/pox/repos",
        "events_url": "https://api.github.com/users/pox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-01T18:05:18Z",
      "updated_at": "2024-01-01T18:05:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "Peter Todd [wrote in length](https://petertodd.org/2023/v3-transactions-review) about this proposal. It would be helpful if his points could be addressed (not necessarily in this github issue of course). Specifically his point about the effect on mining centralization ought to be addressed IMHO.",
      "user": {
        "login": "pox",
        "id": 47615825,
        "node_id": "MDQ6VXNlcjQ3NjE1ODI1",
        "avatar_url": "https://avatars.githubusercontent.com/u/47615825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pox",
        "html_url": "https://github.com/pox",
        "followers_url": "https://api.github.com/users/pox/followers",
        "following_url": "https://api.github.com/users/pox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pox/subscriptions",
        "organizations_url": "https://api.github.com/users/pox/orgs",
        "repos_url": "https://api.github.com/users/pox/repos",
        "events_url": "https://api.github.com/users/pox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pox/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1873422305",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "commented",
      "id": 1873490509,
      "node_id": "IC_kwDOABII585vqzJN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1873490509",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-01T21:38:49Z",
      "updated_at": "2024-01-01T21:38:49Z",
      "author_association": "MEMBER",
      "body": "@pox in the post you link Peter Todd argues against v3 transactions in 3 points:\r\n1. [v3 does not fix all pinning vectors](https://petertodd.org/2023/v3-transactions-review#v3-transactions);\r\n2. Using CPFP is [less optimal than using RBF](https://petertodd.org/2023/v3-transactions-review#replace-by-fee);\r\n3. [\"Anchor Outputs Are a Danger to Mining Decentralization\"](https://petertodd.org/2023/v3-transactions-review#anchor-outputs-are-a-danger-to-mining-decentralization) :tm:\r\n\r\nIf we tune down the sensational part of the third point to \"a non-incentive compatible relay policy is bad for mining decentralization\" then all these 3 points are trivially true statements. Only, the conclusion of the blog post that \"V3 transactions should not be be shipped at the moment\" does not follow from these.\r\n\r\n## v3 does not fix all pinning vectors\r\n\r\nv3 aims to fix what's commonly referred to as \"[Rule 3](https://github.com/bitcoin/bitcoin/blob/master/doc/policy/mempool-replacements.md) pinning\". That is, currently an attacker can make their victim pay up to 500x the required fees to replace an attacker's low feerate transaction (more [here](https://bitcoin.stackexchange.com/a/117747/101498)). By limiting the size of child of unconfirmed transactions from the current `100,000` to `1000` vbytes the \"v3\" proposal effectively decreases the harm of performing this attack by a 100x factor. It's well known this still leaves room for an attacker to increase the fees paid by their victim by at most a 5x factor. For instance, [the motivations section of the ephemeral anchors BIP](https://github.com/instagibbs/bips/blob/ephemeral_anchor/bip-ephemeralanchors.mediawiki#motivation) touches on this:\r\n> v3 transactions, which this proposal is built on, greatly mitigates [RBF] pinning vectors, where an adversary can vastly increase the required fees to replace a transaction that will not be mined quickly, or disallow replacement altogether. Depending on certain factors, this economic value can reach over 500 times increase in required fees to replace the attacker's transaction. V3 transactions end up reducing this attack surface by 100 times, resulting in 5 times increase in fees using the same running example.\r\n\r\nIn his post Peter explains how an attacker can make their channel partner pay 1.5x the fees necessary for inclusion of their commitment transaction in a block. Sure, it's known already: v3 *mitigates* this, it doesn't solve it. It's also disingenuous to point out the remaining 1.5x factor left under v3 without putting it in perspective to the 100x improvement v3 brings.\r\n\r\nThe v3 relay regime isn't perfect, it's just 100x better for this application than the current one. This is not a reason not to do v3.\r\n\r\n## Using CPFP is less optimal than using RBF\r\n\r\nSure. But making RBF actually incentive compatible is a much larger undertaking (see https://github.com/bitcoin/bitcoin/issues/27677) than proposing a new opt-in relay regime with more constrained rules. v3 already helps closing a number of pinning vectors without having to first fix RBF.\r\n\r\nThe whole point of fee-bumping is to not have to rely on previously-agreed-upon feerates, because you can't predict what the next block feerate will be by the time you *need* to broadcast your transaction. At the moment, it's not possible in an adversarial scenario to solely rely on RBF for this. One *has* to use CPFP (along with the carve-out).\r\n\r\nTo avoid the use of CPFP Peter suggests in his blog post to get rid of this requirement and instead pre-sign a bunch of commitment + HTLC transactions in advance. This is [less crazy](https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-October/004175.html) than it sounds at first, but it does mean you are back to have to guess a feerate in advance above which your channel won't be enforceable.\r\n\r\nIt's not clear that it's a valid reason not to ship v3, which does not make this compromise.\r\n\r\n## \"Danger to decentralization\"\r\n\r\nThe post then goes on to explain how using the more expensive CPFP instead of the more efficient (but at the moment not incentive compatible) RBF is a \"threat to mining decentralization\" because it incentivizes Lightning users and big miners to cut an out-of-band deal. (Miner only includes the parent, gets paid out of band: cheaper for the Lightning user, more room to include other transactions in place of the child for the miner.)\r\n\r\nThis is extremely misleading. Because it's true, but the blame is incorrectly assigned to the v3 proposal. Truth is: it's the status quo which provides an enormous incentive to cut out-of-band deals with miners. Not only because such tiny optimisations are already possible, but especially because of pinning vectors! If anything, the status quo is more a *handwave handwave* \"threat to mining decentralization\" than a post v3 world.\r\n\r\nBy closing some pinning vectors, v3 is actually reducing the incentive for Lightning users to reach out to big miners directly. Therefore, this is not a reason not to ship v3. Rather the opposite.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1873490509",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "mentioned",
      "id": 11366188337,
      "node_id": "MEE_lADOABII58539HF9zwAAAAKlekUx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11366188337",
      "actor": {
        "login": "pox",
        "id": 47615825,
        "node_id": "MDQ6VXNlcjQ3NjE1ODI1",
        "avatar_url": "https://avatars.githubusercontent.com/u/47615825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pox",
        "html_url": "https://github.com/pox",
        "followers_url": "https://api.github.com/users/pox/followers",
        "following_url": "https://api.github.com/users/pox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pox/subscriptions",
        "organizations_url": "https://api.github.com/users/pox/orgs",
        "repos_url": "https://api.github.com/users/pox/repos",
        "events_url": "https://api.github.com/users/pox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-01T21:38:49Z"
    },
    {
      "event": "subscribed",
      "id": 11366188339,
      "node_id": "SE_lADOABII58539HF9zwAAAAKlekUz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11366188339",
      "actor": {
        "login": "pox",
        "id": 47615825,
        "node_id": "MDQ6VXNlcjQ3NjE1ODI1",
        "avatar_url": "https://avatars.githubusercontent.com/u/47615825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pox",
        "html_url": "https://github.com/pox",
        "followers_url": "https://api.github.com/users/pox/followers",
        "following_url": "https://api.github.com/users/pox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pox/subscriptions",
        "organizations_url": "https://api.github.com/users/pox/orgs",
        "repos_url": "https://api.github.com/users/pox/repos",
        "events_url": "https://api.github.com/users/pox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-01T21:38:49Z"
    },
    {
      "event": "commented",
      "id": 1873500161,
      "node_id": "IC_kwDOABII585vq1gB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1873500161",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-01T22:09:38Z",
      "updated_at": "2024-01-01T22:09:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "@darosior You keep on saying that RBF is not incentive compatible.\r\n\r\nQuestion: in my article, in the context of replace-by-fee for lightning commitment transactions, are you claiming that *those* replacements are not incentive compatible?",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1873500161",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "mentioned",
      "id": 11366245064,
      "node_id": "MEE_lADOABII58539HF9zwAAAAKleyLI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11366245064",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-01T22:09:38Z"
    },
    {
      "event": "subscribed",
      "id": 11366245066,
      "node_id": "SE_lADOABII58539HF9zwAAAAKleyLK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11366245066",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-01T22:09:38Z"
    },
    {
      "event": "commented",
      "id": 1873503767,
      "node_id": "IC_kwDOABII585vq2YX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1873503767",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-01T22:20:51Z",
      "updated_at": "2024-01-01T22:20:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "@darosior\r\n\r\n> The v3 relay regime isn't perfect, it's just 100x better for this application than the current one. This is not a reason not to do v3.\r\n\r\nAre you claiming that the anchor outputs in existing Lightning anchor channels are subject to transaction pinning?",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1873503767",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "mentioned",
      "id": 11366265354,
      "node_id": "MEE_lADOABII58539HF9zwAAAAKle3IK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11366265354",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-01T22:20:51Z"
    },
    {
      "event": "subscribed",
      "id": 11366265356,
      "node_id": "SE_lADOABII58539HF9zwAAAAKle3IM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11366265356",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-01T22:20:51Z"
    },
    {
      "event": "commented",
      "id": 1873508568,
      "node_id": "IC_kwDOABII585vq3jY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1873508568",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-01T22:37:14Z",
      "updated_at": "2024-01-01T22:37:14Z",
      "author_association": "MEMBER",
      "body": "> @darosior You keep on saying that RBF is not incentive compatible.\r\n> Question: in my article, in the context of replace-by-fee for lightning commitment transactions, are you claiming that those replacements are not incentive compatible?\r\n\r\nI think there's been much confused talk about \"incentive compatibility\" in the past. It depends \"what for\" and \"compared to what\".\r\n\r\nI'm not claiming that your proposal to pre-sign a bunch of transactions at different feerates is not incentive-compatible, just that it conveniently ignores one of the requirements which v3 fulfills: that you don't have to choose a feerate in advance above which your channel isn't enforceable. There are other cases where the current RBF rules would not be incentive compatible. [For instance when another party can attach inputs to your transaction](https://github.com/bitcoin/bitcoin/pull/23121#issuecomment-929475999) (`ANYONECANPAY`, `ANYPREVOUT`).\r\n\r\n> Are you claiming that the anchor outputs in existing Lightning anchor channels are subject to transaction pinning?\r\n\r\nNo, but that's only because of the Lightning-specific CPFP carve-out. See also the second point of OP:\r\n> Switching to a cluster-based mempool (see https://github.com/bitcoin/bitcoin/issues/27677 and https://github.com/bitcoin/bitcoin/pull/28676) requires the removal of CPFP carve out, which applications depend on. V3 + package RBF + ephemeral anchors + 1-parent-1-child package relay provides an intermediate solution.\r\n\r\n\r\n---\r\n\r\nI feel like it's not the right place to continue discussing the v3 proposal at a high-level. How about moving this discussion to https://delvingbitcoin.org/?",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1873508568",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "mentioned",
      "id": 11366296165,
      "node_id": "MEE_lADOABII58539HF9zwAAAAKle-pl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11366296165",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-01T22:37:14Z"
    },
    {
      "event": "subscribed",
      "id": 11366296167,
      "node_id": "SE_lADOABII58539HF9zwAAAAKle-pn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11366296167",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-01T22:37:14Z"
    },
    {
      "event": "commented",
      "id": 1873517708,
      "node_id": "IC_kwDOABII585vq5yM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1873517708",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-01T23:08:04Z",
      "updated_at": "2024-01-01T23:08:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > @darosior You keep on saying that RBF is not incentive compatible.\r\n> > Question: in my article, in the context of replace-by-fee for lightning commitment transactions, are you claiming that those replacements are not incentive compatible?\r\n> \r\n> I think there's been much confused talk about \"incentive compatibility\" in the past. It depends \"what for\" and \"compared to what\".\r\n> \r\n> I'm not claiming that your proposal to pre-sign a bunch of transactions at different feerates is not incentive-compatible, just that it conveniently ignores one of the requirements which v3 fulfills: that you don't have to choose a feerate in advance above which your channel isn't enforceable. There are other cases where the current RBF rules would not be incentive compatible. [For instance when another party can attach inputs to your transaction](https://github.com/bitcoin/bitcoin/pull/23121#issuecomment-929475999) (`ANYONECANPAY`, `ANYPREVOUT`).\r\n\r\nLet me ask you a simple question: are we proposing to remove RBF? Because what you said above was: \"But making RBF actually incentive compatible is a much larger undertaking (see https://github.com/bitcoin/bitcoin/issues/27677) than proposing a new opt-in relay regime with more constrained rules.\" I suspect you're not proposing to remove RBF, which makes the incentive compatibility of it in niche situations entirely irrelevant to my point that RBF is the better solution for this very simple problem of replacing a single transaction with another one of higher fees. Remember, that we can easily avoid all pinning problems by using the anchor channels trick of making all outputs unspendable.\r\n\r\nNow, as for the choosing a feerate in advance problem, I explained fully in my article, showing how it's quite easy to pre-sign every conceivable feerate because there just aren't that many of them. In fact, you could easily pre-sign feerates all the way to making the channel uneconomical to close, because you've spent every cent towards fees. This is not a problem.\r\n\r\nThe largest lightning channels out there are about 5BTC. *Even if* you were willing to bump fees, all the way to spending the entire 5BTC towards fees, you'd need just 68 different fee variants to go all the way from 1sat/vbyte to spending the full 5BTC on fees, with a 25% increase for each each fee variant.\r\n\r\nFinally, as I explained, you can always design the protocol to fallback to existing anchor channels at the very highest fee rate. You only need to get to the point where you've met the minimum relay fee after all.\r\n\r\n> > Are you claiming that the anchor outputs in existing Lightning anchor channels are subject to transaction pinning?\r\n> \r\n> No, but that's only because of the Lightning-specific CPFP carve-out. See also the second point of OP:\r\n\r\nSo why did you mention it? What you said was \"The v3 relay regime isn't perfect, it's just 100x better [regarding transaction pinning] for this application than the current one.\"\r\n\r\nBut as you admit, that's not true: the v3 relay regime is *worse* than the current one for Lightning channels with regard to transaction pinning, as unlike the existing regime, it's vulnerable to transaction pinning. You're claim that v3 is 100x better simply is not true for the topic at hand.\r\n\r\nNow, if V3 had some *specific* examples of proposed contracting protocols other than lightning that would use it, and are valuable for bitcoin, maybe it'd be worth considering. But at the moment, it does not.",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1873517708",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "mentioned",
      "id": 11366350854,
      "node_id": "MEE_lADOABII58539HF9zwAAAAKlfMAG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11366350854",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-01T23:08:04Z"
    },
    {
      "event": "subscribed",
      "id": 11366350856,
      "node_id": "SE_lADOABII58539HF9zwAAAAKlfMAI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11366350856",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-01T23:08:04Z"
    },
    {
      "event": "commented",
      "id": 1873518209,
      "node_id": "IC_kwDOABII585vq56B",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1873518209",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-01T23:09:53Z",
      "updated_at": "2024-01-01T23:09:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "While I'm at it, Concept NACK, due to the problems outlined in https://petertodd.org/2023/v3-transactions-review and https://petertodd.org/2023/v3-txs-pinning-vulnerability",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1873518209",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "commented",
      "id": 1873789701,
      "node_id": "IC_kwDOABII585vr8MF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1873789701",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-02T09:34:18Z",
      "updated_at": "2024-01-02T09:34:18Z",
      "author_association": "MEMBER",
      "body": "> The largest lightning channels out there are about 5BTC. Even if you were willing to bump fees, all the way to spending the entire 5BTC towards fees, you'd need just 68 different fee variants to go all the way from 1sat/vbyte to spending the full 5BTC on fees, with a 25% increase for each each fee variant.\r\n\r\nSo you'd potentially hand to your supposedly untrusted channel partner a signature for a transaction burning your whole 4.95BTC balance to fees? This trivially opens a blackmail vector: \"sign a transaction which pays us both 2.5BTC or i burn your whole balance\".\r\n\r\nPre-signing versions of a transaction at various feerates necessarily presents a tension between:\r\n1. A feerate above which the contract won't be enforceable.\r\n2. A maximum amount of fees a malicious counterparty could force you to burn.\r\n\r\nIn fact i think if you want to reasonably set (1) you'd have (2) such as a malicious can almost always make you burn more fees than the 1.5x factor you raised with v3?\r\n\r\n---\r\n\r\nI've opened https://delvingbitcoin.org/t/v3-transaction-policy-for-anti-pinning to continue discussing v3 at a higher level and keep this PR focused on code review.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1873789701",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "commented",
      "id": 1873793179,
      "node_id": "IC_kwDOABII585vr9Cb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1873793179",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-02T09:37:47Z",
      "updated_at": "2024-01-02T09:38:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Now, as for the choosing a feerate in advance problem, I explained fully in my article, showing how it's quite easy to pre-sign every conceivable feerate because there just aren't that many of them. In fact, you could easily pre-sign feerates all the way to making the channel uneconomical to close, because you've spent every cent towards fees. This is not a problem.\r\n\r\nThat proposal ignores important drawbacks on the lightning side. I'm actually quite surprised that you don't even mention those drawbacks (which are known since [I proposed a while ago something similar to what you're advocating for](https://github.com/lightning/bolts/pull/1036) and [we already discussed them in the past](https://x.com/realtbast/status/1660912113039147008)).\r\n\r\nThe main drawback in my opinion is: if you pre-sign commitment transactions at various feerates, the actual balance that you can use off-chain is the balance of the commitment with the highest feerate. That is quite an inefficient use of your liquidity, as you'll always be locking a large amount of your lightning balance to pay the worst-case feerate! This shouldn't be an issue with eltoo, where you bring new inputs to pay the fees instead of taking them from your off-chain balance, but since we don't know whether we'll get an eltoo-enabling soft fork, we have to work without it.\r\n\r\n> Finally, as I explained, you can always design the protocol to fallback to existing anchor channels at the very highest fee rate. You only need to get to the point where you've met the minimum relay fee after all.\r\n\r\nIf you do that, you're just adding complexity without fundamentally fixing anything?\r\n\r\n> I feel like it's not the right place to continue discussing the v3 proposal at a high-level. How about moving this discussion to https://delvingbitcoin.org/?\r\n\r\nAgreed!",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1873793179",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "commented",
      "id": 1873916162,
      "node_id": "IC_kwDOABII585vsbEC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1873916162",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-02T11:34:36Z",
      "updated_at": "2024-01-02T11:34:36Z",
      "author_association": "MEMBER",
      "body": "Responding to [https://petertodd.org/2023/v3-transactions-review](https://petertodd.org/2023/v3-transactions-review)\r\n\r\nIn general, I agree that RBF is a great fee-bumping mechanism. The entire point of v3 and EA is to make RBF more useful and less prone to pinning, and to enable us to use it in conjunction with CPFP while eliminating some of the inefficiency.\r\n\r\nWe seem to have entirely different perspectives about what RBF's limitations are today. Pointing out limitations in RBF is not intended as a personal attack. There is no intention to remove RBF. We're only trying to remove its limitations, many of which are fundamental to how mempool is currently structured.\r\n\r\nAs you can see by the timeline of posts, we started this journey by gathering information on all the limitations and grievances with RBF and going through existing proposed solutions. Please give it a read as it may help your understanding here. It lists some ideas that have been brought up and discussed multiple times (including some that you suggested) that are insufficient or not feasible in a pre-cluster-mempool world.\r\n\r\nI'd suggest particularly focusing on these limitations and their implications:\r\n- Absolute fees / Rule 3 pinning: RBF rules require the replacement transaction pay a higher absolute fee than the aggregate fees paid by all original transactions.\r\n- Replacements don't need to be more incentive compatible: it's possible for a replacement transaction to confirm slower than the replaced one, leading to ACP pinning problems.\r\n- Transactions must meet RBF rules using only their own fees: i.e. there is no package RBF; CPFPing a transaction doesn't help it replace conflicts in mempools.\r\n\r\nIf we agree that these issues need to be fixed, then the plan here (and laid out in #27463) might make more sense. It includes:\r\n- 1-parent-1-child package relay, enabling (non-batched) CPFPs below min feerate to propagate\r\n- v3: a way to opt in to stricter package limits to avoid Rule 3 + 4 pinning. Enabling EA + the next few steps\r\n- package RBF: a way for these 1-parent-1-child packages to replace each other. This allows us to remove CPFP carveout while still providing protocols with presigned transactions with a robust fee-bumping option. One of the primary goals of v3 was to make package RBF possible before cluster mempool.\r\n- cluster mempool: address the problem of assess incentive compatibility, fixing the majority of RBF problems, as well as other fundamental limitations caused by the current mempool data structures\r\n- more complete package relay, including features and fixes that are simplified or enabled by cluster mempool\r\n\r\nThis is an improvement by itself and is a stepping stone in a long-term solution to fix a number of problems. You suggested package relay as a solution; please propose an alternative implementation/timeline if you don't think this is a correct approach.\r\n\r\nI addressed [the \"V3 Transactions are still vulnerable\" article](https://petertodd.org/2023/v3-transactions-review) in my [response on the mailing list](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-December/022216.html). I just mailed an update to the math this morning using the number you provided. I think the math there, as well as some basic intuition on the descendant limit restriction, shows the 100x reduction that you are denying. Not sure how to make that point more clear :shrug: happy to speak in a more synchronous fashion if you'd like.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1873916162",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "commented",
      "id": 1874336752,
      "node_id": "IC_kwDOABII585vuBvw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1874336752",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-02T17:38:16Z",
      "updated_at": "2024-01-02T17:38:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "@darosior \r\n\r\n> > The largest lightning channels out there are about 5BTC. Even if you were willing to bump fees, all the way to spending the entire 5BTC towards fees, you'd need just 68 different fee variants to go all the way from 1sat/vbyte to spending the full 5BTC on fees, with a 25% increase for each each fee variant.\r\n> \r\n> So you'd potentially hand to your supposedly untrusted channel partner a signature for a transaction burning your whole 4.95BTC balance to fees? This trivially opens a blackmail vector: \"sign a transaction which pays us both 2.5BTC or i burn your whole balance\".\r\n\r\nYou've misunderstood how Lightning works. While simplified explanations often talk about *the* commitment transaction, in fact Lightning channels actually have *two* slightly different commitment transactions, a local and remote transaction. Each party has a signature from the *other* side on *their* version of the commitment transaction, so broadcasting their commitment involves counter-signing it first.\r\n\r\nIn the context of RBF using channels — while there may be special circumstances requiring a different allocation — the most obvious way to allocate fees is to take the fees from the balance on each respective side. So if Alice wants to broadcast a commitment transaction, her version of the fee variants all take the funds for the fees from her balance, and Bob has given Alice a set of signatures for each fee variant. Conversely, if Bob wants to broadcast, the funds for the fees are taken from his balance. \r\n\r\nThus this blackmail attack simply is not possible as neither side has any way to spend the funds of their counterparty to fees.\r\n\r\nI've added another section to my post to make this point clear: https://petertodd.org/2023/v3-transactions-review#fee-allocation",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1874336752",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "mentioned",
      "id": 11372428017,
      "node_id": "MEE_lADOABII58539HF9zwAAAAKl2Xrx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11372428017",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-02T17:38:17Z"
    },
    {
      "event": "subscribed",
      "id": 11372428024,
      "node_id": "SE_lADOABII58539HF9zwAAAAKl2Xr4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11372428024",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-02T17:38:17Z"
    },
    {
      "event": "commented",
      "id": 1874400590,
      "node_id": "IC_kwDOABII585vuRVO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1874400590",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-02T18:37:39Z",
      "updated_at": "2024-01-02T18:37:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > Now, as for the choosing a feerate in advance problem, I explained fully in my article, showing how it's quite easy to pre-sign every conceivable feerate because there just aren't that many of them. In fact, you could easily pre-sign feerates all the way to making the channel uneconomical to close, because you've spent every cent towards fees. This is not a problem.\r\n> \r\n> That proposal ignores important drawbacks on the lightning side. I'm actually quite surprised that you don't even mention those drawbacks (which are known since [I proposed a while ago something similar to what you're advocating for](https://github.com/lightning/bolts/pull/1036) and [we already discussed them in the past](https://x.com/realtbast/status/1660912113039147008)).\r\n\r\nI'm aware. Those proposed drawbacks are incorrect.\r\n \r\n> The main drawback in my opinion is: if you pre-sign commitment transactions at various feerates, the actual balance that you can use off-chain is the balance of the commitment with the highest feerate. That is quite an inefficient use of your liquidity, as you'll always be locking a large amount of your lightning balance to pay the worst-case feerate! This shouldn't be an issue with eltoo, where you bring new inputs to pay the fees instead of taking them from your off-chain balance, but since we don't know whether we'll get an eltoo-enabling soft fork, we have to work without it.\r\n\r\nThat \"drawback\" is a misunderstanding of economics and accounting.\r\n\r\nThe true value of your balance in a Lightning channel is always potentially reduced by the fees it would take to (force-)close the channel. CPFP or RBF does not change this: either way, if you need to (force-)close the channel, you will recover less funds than the apparent balance.\r\n\r\nSecondly, even in a naive analysis, the liquidity is not substantially reduced by RBF fees in circumstances where the Lightning channel is profitable: if potential fees are a substantial percentage of the channel balance, you're not going to make money on routing. Meanwhile, the money you make on routing is proportional to balance. So let's suppose that you pre-allocate 10% of your channel balance to paying closing fees, leaving the other 90% to route. If you earn 10% per year routing, you've only made 9% return on capital per year. Meanwhile, if you have to close that channel after a year, you've lost money. On the other hand, if you could allocate 100% to fees, your return on capital was just 10%, a 1% difference... and you've still lost money.\r\n\r\nBut *even that* is actually incorrect: the highest feerate you could ever possibly need is the one where all of your balance in the channel goes to fees. Feerates beyond that are simply pointless: you might as well just wait for fees to decrease, to abandon the funds, as you're not recovering any value. CPFP/anchor channels does allow you to pay even higher fee rates. But doing so doesn't make any sense. Thus there is no liquidity wasted with RBF: you can spend 100% of the available channel balance on your side at any time. Of course, at some point the fee rate required implies that the channel reserve is probably too low. But that's a problem we already have in existing Lightning channels; CPFP/anchors doesn't change that.\r\n\r\n> > Finally, as I explained, you can always design the protocol to fallback to existing anchor channels at the very highest fee rate. You only need to get to the point where you've met the minimum relay fee after all.\r\n> \r\n> If you do that, you're just adding complexity without fundamentally fixing anything?\r\n\r\nNope. In the usual case where RBF works you'll spend ~50% on fees, while avoiding the creation of large incentives for pools to centralize to offer out-of-band fees.",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1874400590",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "commented",
      "id": 1874428462,
      "node_id": "IC_kwDOABII585vuYIu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1874428462",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-02T19:04:56Z",
      "updated_at": "2024-01-02T19:04:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Responding to https://petertodd.org/2023/v3-transactions-review\r\n> \r\n> In general, I agree that RBF is a great fee-bumping mechanism. The entire point of v3 and EA is to make RBF more useful and less prone to pinning, and to enable us to use it in conjunction with CPFP while eliminating some of the inefficiency.\r\n> \r\n> We seem to have entirely different perspectives about what RBF's limitations are today. Pointing out limitations in RBF is not intended as a personal attack. There is no intention to remove RBF. We're only trying to remove its limitations, many of which are fundamental to how mempool is currently structured.\r\n\r\nNone of this discussion has anything to do with \"personal attacks\". The question is if V3 transactions fixes a problem that exists in *actual* protocols, not hypothetical situations. Bringing up issues with RBF that are not relevant to the actual protocols being discussed is misleading.\r\n\r\nFurthermore, what I'm showing is that V3 transactions, as proposed, fails to improve the situation for Lightning channels. The claimed tx pinning vector is not relevant, and V3 doubles down on a serious design flaw with regard to out-of-band fee payments. We should fix that design flaw, and RBF almost certainly the best solution possible.\r\n\r\nWhat you need to do now, if you wish to progress further on V3 transactions, is show how it will fix *actual* problems in existing or proposed contracting systems such as Lightning. Once we have identified those problems, we can discuss solutions, and see if V3 can fix those actual problems.\r\n\r\nThe root problem here is we have done this backwards: we have a rough idea of what some problems could be, V3 was proposed, and people have gotten excited that it seems to fix these hypothetical problems.\r\n\r\n> I'd suggest particularly focusing on these limitations and their implications:\r\n> \r\n>     * Absolute fees / Rule 3 pinning: RBF rules require the replacement transaction pay a higher absolute fee than the aggregate fees paid by all original transactions.\r\n> \r\n>     * Replacements don't need to be more incentive compatible: it's possible for a replacement transaction to confirm slower than the replaced one, leading to ACP pinning problems.\r\n> \r\n>     * Transactions must meet RBF rules using only their own fees: i.e. there is no package RBF; CPFPing a transaction doesn't help it replace conflicts in mempools.\r\n\r\nThis kind of thinking is precisely the problem: you've listed a bunch of potential problems, without any discussion of how actual protocols are impacted by those problems. This is bad design: you should focus on the actual problems real protocols run into, and then figure out how to solve those problems.\r\n \r\n> I addressed [the \"V3 Transactions are still vulnerable\" article](https://petertodd.org/2023/v3-transactions-review) in my [response on the mailing list](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-December/022216.html). I just mailed an update to the math this morning using the number you provided. I think the math there, as well as some basic intuition on the descendant limit restriction, shows the 100x reduction that you are denying. Not sure how to make that point more clear 🤷 happy to speak in a more synchronous fashion if you'd like.\r\n\r\nAgain, I am not denying that there is a 100x reduction in the hypothetical situation of transaction pinning. What I am pointing out is that Lightning already fixed that transaction pinning problem with the design of anchor channels, making your 100x reduction irrelevant.\r\n\r\nThis entire discussion is similar to installing a lift kit on a Honda Civic mainly used to pick up groceries, and bragging about how you've increased ground clearance to 1m. It's a cool engineering challenge. But if our actual problem is high gas prices, not low ground clearance, why are we adding the extra weight and complexity of the lift kit?",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1874428462",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "commented",
      "id": 1874445551,
      "node_id": "IC_kwDOABII585vucTv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1874445551",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-02T19:21:39Z",
      "updated_at": "2024-01-02T19:31:21Z",
      "author_association": "MEMBER",
      "body": "moving to delving thread as we're essentially debating an LN spec at this point: https://delvingbitcoin.org/t/v3-transaction-policy-for-anti-pinning/340/4",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1874445551",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "commented",
      "id": 1874451089,
      "node_id": "IC_kwDOABII585vudqR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1874451089",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-02T19:26:59Z",
      "updated_at": "2024-01-02T19:26:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "> moving to delving thread as we're essentially debating an LN spec at this point: https://delvingbitcoin.org/t/v3-transaction-policy-for-anti-pinning/340/3\r\n\r\nWe are not debating the LN spec.\r\n\r\nThe LN spec doesn't use V3 transactions, and as of anchor channels, is not vulnerable to the problems V3 transactions aims to solve. As I mentioned in my post, package relay would be helpful to anchor channels. But of course, package relay does not depend on V3.\r\n\r\nThis discussion is not about general Bitcoin protocol design. The question is if V3 transactions actually solves a real problem in a real protocol, thus making it a worthwhile addition to Bitcoin Core.",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1874451089",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "commented",
      "id": 1874472046,
      "node_id": "IC_kwDOABII585vuixu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1874472046",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-02T19:47:58Z",
      "updated_at": "2024-01-02T19:48:19Z",
      "author_association": "MEMBER",
      "body": "As noted in delving, pinning is not solved for anchor channels(even if we assume package relay/rbf is implemented): If an adversary splits the view of which commitment transaction is broadcasted, the remote copy can become the pin since the defender is unable to propagate their spend of the remote commit tx anchor.\r\n",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1874472046",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "commented",
      "id": 1874485977,
      "node_id": "IC_kwDOABII585vumLZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1874485977",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-02T20:01:47Z",
      "updated_at": "2024-01-02T20:06:18Z",
      "author_association": "MEMBER",
      "body": "> This discussion is not about general Bitcoin protocol design. The question is if V3 transactions actually solves a real problem in a real protocol, thus making it a worthwhile addition to Bitcoin Core.\r\n\r\nV3 is useful for any transactions where you don't want to be RBF-pinned for sending to arbitrary scripts. For example in splicing, rather than requiring each address being sent to including a `1 OP_CSV` clause over each spending condition, it can now be arbitrary scriptPubKeys. More generally, it allows this relaxation for any payment where you want to RBF the payment.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1874485977",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "commented",
      "id": 1874508653,
      "node_id": "IC_kwDOABII585vurtt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1874508653",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-02T20:24:42Z",
      "updated_at": "2024-01-02T20:24:42Z",
      "author_association": "MEMBER",
      "body": "> You've misunderstood how Lightning works. While simplified explanations often talk about [...]\r\n\r\nI see how a superficial understanding of Lightning and pinning issues could lead you to think that. However your hot fix to your proposal does not patch all its flaws.\r\n \r\n> In the context of RBF using channels — while there may be special circumstances requiring a different allocation — the most obvious way to allocate fees is to take the fees from the balance on each respective side. So if Alice wants to broadcast a commitment transaction, her version of the fee variants all take the funds for the fees from her balance, and Bob has given Alice a set of signatures for each fee variant. Conversely, if Bob wants to broadcast, the funds for the fees are taken from his balance.\r\n\r\nYou don't only need fees for your established balance, but also for your in-flight balance. Alice may only have the reserve as her balance in the channel (or no balance at all, for instance right after Bob opened a channel to her) and have to resolve an incoming HTLC as soon as possible. Here Bob could trivially pin her attempt to resolve the HTLC by broadcasting the first version of his commit tx which Alice won't be able to replace. She would have to broadcast a pair <Alice's commit tx, htlc success with fees> to replace Bob's commit tx, but for this you need package RBF which needs v3.\r\n\r\nLast thing i'll say here, v3 (+EA) is not only useful for current Lightning channels. You can think about it as a better carve-out. The CPFP carve-out is a very Lightning-specific hack to the mempool validation rules. v3 is a more general way of achieving the same, and more, for any protocol.\r\n\r\n---\r\n\r\nThat's my last message on this topic here. I don't want to further derail this pull request.\r\n\r\nI'm happy to continue discussing v3 [at Delving](https://delvingbitcoin.org/t/v3-transaction-policy-for-anti-pinning/340) as long as we keep the discussion intellectually honest. I'm not interested in this little game of arguing to appear smart (or try to, at least) instead of arguing to make progress toward a better and technically sound proposal.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1874508653",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "commented",
      "id": 1874723441,
      "node_id": "IC_kwDOABII585vvgJx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1874723441",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-03T00:32:47Z",
      "updated_at": "2024-01-03T00:32:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "> As noted in delving, pinning is not solved for anchor channels(even if we assume package relay/rbf is implemented): If an adversary splits the view of which commitment transaction is broadcasted, the remote copy can become the pin since the defender is unable to propagate their spend of the remote commit tx anchor.\r\n\r\nYou're really describing a form of MITM attack. If the target learns about the existence of the other commitment transaction, be it a revoked transaction or the remote's version of the current one, they can easily get that transaction mined by spending their anchor output (or other outputs if it's a revoked state).\r\n\r\nSecondly, V3 transactions doesn't fully fix this either. For channels that can have large numbers of HTLCs in flight, an adversary can pin with a revoked commitment from a point in the channel's lifetime where the # of HTLCs in flight towards them was large.\r\n\r\nNotably, this kind of circumstance shows why concerns about RBF with all the funds on one side of the channel are a little silly... Lightning is broken in a lot of ways when you get into that circumstance.\r\n\r\n> V3 is useful for any transactions where you don't want to be RBF-pinned for sending to arbitrary scripts. For example in splicing, rather than requiring each address being sent to including a 1 OP_CSV clause over each spending condition, it can now be arbitrary scriptPubKeys. More generally, it allows this relaxation for any payment where you want to RBF the payment.\r\n\r\nYou're splicing example is one where V3 is not clearly incentive compatible, and you're encouraging wallets to degrade privacy by making transactions from different wallets clearly distinct. It's a good thing that, eg, Phoenix has shipped with splicing and without that restriction.\r\n\r\nNow, if the OP wanted to argue for those kinds of detailed tradeoffs, the correct way to do so would be with detailed design documents. But that hasn't happened. There's not even a BIP for this.",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1874723441",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "commented",
      "id": 1874749479,
      "node_id": "IC_kwDOABII585vvmgn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1874749479",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-03T01:25:56Z",
      "updated_at": "2024-01-03T01:25:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > You've misunderstood how Lightning works. While simplified explanations often talk about [...]\r\n> \r\n> I see how a superficial understanding of Lightning and pinning issues could lead you to think that. However your hot fix to your proposal does not patch all its flaws.\r\n\r\nIt's not a \"hot fix\", it's the only way it could have ever worked. The remote and local transactions are fundamental to Lightning; I didn't mention that explicitly because I thought it would be obvious to anyone familiar with the protocol in depth.\r\n \r\n> > In the context of RBF using channels — while there may be special circumstances requiring a different allocation — the most obvious way to allocate fees is to take the fees from the balance on each respective side. So if Alice wants to broadcast a commitment transaction, her version of the fee variants all take the funds for the fees from her balance, and Bob has given Alice a set of signatures for each fee variant. Conversely, if Bob wants to broadcast, the funds for the fees are taken from his balance.\r\n> \r\n> You don't only need fees for your established balance, but also for your in-flight balance. Alice may only have the reserve as her balance in the channel (or no balance at all, for instance right after Bob opened a channel to her) and have to resolve an incoming HTLC as soon as possible. Here Bob could trivially pin her attempt to resolve the HTLC by broadcasting the first version of his commit tx which Alice won't be able to replace. She would have to broadcast a pair <Alice's commit tx, htlc success with fees> to replace Bob's commit tx, but for this you need package RBF which needs v3.\r\n\r\nIf Bob broadcasts his *first* version of his commit tx, he's broadcasting a revoked state and Alice can simply take his funds.\r\n\r\nNow, if you mean that Bob is broadcasting his *current* version of his remote tx, that situation was already discussed on Twitter. That situation is kinda busted in general, as Lightning's incentives are a bit dubious unless both parties have funds in the channel. Using a signed anchor output that only Alice can spend is a perfectly reasonable approach, as it's rare enough that it won't be a substantial threat to mining decentralization via out-of-band fees. It's probably also reasonable to consider limiting HTLC size in general during initial channel startup until a reasonable channel reserve is reached.\r\n\r\n> Last thing i'll say here, v3 (+EA) is not only useful for current Lightning channels. You can think about it as a better carve-out. The CPFP carve-out is a very Lightning-specific hack to the mempool validation rules. v3 is a more general way of achieving the same, and more, for any protocol.\r\n\r\nAs I keep saying, that's nice to speculate about. But these potential protocols need to be discussed in detail so costs and benefits can be worked out. It is disappointing that I seem to have been the first person to point out how dangerous anchor outputs are to mining decentralization; CPFP usage in general has this potential problem, and we should be careful not to encourage more of it.\r\n\r\n> I'm happy to continue discussing v3 [at Delving](https://delvingbitcoin.org/t/v3-transaction-policy-for-anti-pinning/340) as long as we keep the discussion intellectually honest. I'm not interested in this little game of arguing to appear smart (or try to, at least) instead of arguing to make progress toward a better and technically sound proposal.\r\n\r\nI'm not on delving and I have no intent of doing so at the moment. Putting critical protocol discussion on infrastructure that is not cryptographically signed, and under the centralized control of parties with a direct interest in the discussion, is not a good idea. The email list remains a much better alternative as email is signed via both DKIM and, in some cases, PGP. GitHub second best, as at least the infrastructure is run by people entirely independent of Bitcoin Core.\r\n\r\nIncidentally, I've already had a few people tell me privately that your personal attacks here, like attempting to claim I have a \"superficial understanding of Lightning\", and writing this off as a \"little game of arguing to appear smart\", makes you look \"butthurt\" and \"petty\".",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1874749479",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "commented",
      "id": 1875122594,
      "node_id": "IC_kwDOABII585vxBmi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1875122594",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-03T10:10:08Z",
      "updated_at": "2024-01-03T10:51:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for your answers @petertodd.\r\n\r\nI think we may be talking a bit past each other in some of those comments, because most of this is too vague and ignores important low-level details. I'll try to highlight the most important high-level points below.\r\n\r\n> So if Alice wants to broadcast a commitment transaction, her version of the fee variants all take the funds for the fees from her balance, and Bob has given Alice a set of signatures for each fee variant. Conversely, if Bob wants to broadcast, the funds for the fees are taken from his balance.\r\n\r\nI'm a bit lost, that's not at all how lightning works today? The fees are always taken from the balance of the channel initiator, regardless of whether it's Alice's or Bob's commitment transaction.\r\n\r\nThat's a design decision that could potentially be revisited, and it has been evaluated a few times already, but doing so creates other drawbacks.\r\n\r\n> The true value of your balance in a Lightning channel is always potentially reduced by the fees it would take to (force-)close the channel. CPFP or RBF does not change this: either way, if you need to (force-)close the channel, you will recover less funds than the apparent balance.\r\n\r\nI think you didn't understand my point (or maybe you are thinking about something that works differently than lightning today, but I'm not sure how exactly it would work). What I was saying is that pre-signing multiple versions of the commitment at various feerates forces your lightning balance (and other lightning constraints) to use **the most restrictive variant of the commitment**.\r\n\r\nThat means using RBF is much more restrictive than CPFP: with CPFP, you are only constrained by whatever fee you want to pay at broadcast time, while with RBF you are constrained by the _highest_ feerate you may be willing to pay. The difference between those values is going to be large most of the time, which is quite inefficient.\r\n\r\nThe balance you can actually use in your lightning channel (if you're the initiator) is `to_local - channel_reserve - commit_tx_fees`.\r\nIf you're pre-signing N commitment transactions at feerates `[f1; ...; fN]`, the balance you can actually use is `to_local - channel_reserve - max(commit_tx_fees1, ..., commit_tx_feesN)`.\r\nOtherwise you wouldn't be able to really offer a commitment transaction at all the chosen feerates.\r\n\r\nPre-signing multiple feerates creates other complex subtleties on the lightning side, as was detailed in comments on [my spec PR](https://github.com/lightning/bolts/pull/1036). Making the commitment transaction pay no on-chain fees greatly simplifies the lightning protocol, and provides a better decoupling from on-chain fees, ensuring that you only care about them at broadcast time and they don't interfere while you're transacting on lightning. Since force-closing is exceptional, I believe this is a design choice that makes a lot of sense, by optimizing for the most common case.\r\n\r\n> That \"drawback\" is a misunderstanding of economics and accounting.\r\n\r\nWhile your point may be an arguable trade-off for routing nodes, it ignores end users, who really want to maximize their liquidity usage. And the vast majority of channels will be with end users, so it's an important case to optimize for IMHO.\r\n",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1875122594",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "mentioned",
      "id": 11377533495,
      "node_id": "MEE_lADOABII58539HF9zwAAAAKmJ2I3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11377533495",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-03T10:10:09Z"
    },
    {
      "event": "subscribed",
      "id": 11377533509,
      "node_id": "SE_lADOABII58539HF9zwAAAAKmJ2JF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11377533509",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-03T10:10:09Z"
    },
    {
      "event": "commented",
      "id": 1875164441,
      "node_id": "IC_kwDOABII585vxL0Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1875164441",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-03T10:42:32Z",
      "updated_at": "2024-01-03T12:04:13Z",
      "author_association": "MEMBER",
      "body": "> This kind of thinking is precisely the problem: you've listed a bunch of potential problems, without any discussion of how actual protocols are impacted by those problems.\r\n\r\nPeter, please read the [RBF improvements mailing list thread](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019817.html) to get up to date on users' problems with RBF.\r\n\r\nYes, v3 makes no sense if you think RBF is perfect today. I agree that we cannot have a productive discussion about how to solve problems if we don't agree on what they are. Given that thread is dedicated to discussing RBF issues, feel free to respond there. Let's work on coming to an agreement on RBF first, otherwise we will continue to talk in circles here.\r\n\r\n> Now, if the OP wanted to argue for those kinds of detailed tradeoffs, the correct way to do so would be with detailed design documents. But that hasn't happened.\r\n\r\nDocumentation is included with this pull request, along with links to the discussions about the problems it solves and alternatives considered. Feel free to browse discussions that happened over the last few years, including\r\n- the RBF improvements thread https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019817.html\r\n- the gist https://gist.github.com/glozow/25d9662c52453bd08b4b4b1d3783b9ff\r\n- the v3 thread https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020937.html\r\n- the 250 comments on #25038\r\n- recall that you were there for some of the in-person discussions about RBF and package relay.\r\n\r\nI completely disagree with the statements about there being no real identified problems or exploration of the rest of the solution space. There is of course no concrete threshold of \"enough discussion,\" and I am happy to discuss further if it means coming up with a better solution. But please keep the discussion on this PR in scope. Again, there is a RBF limitations / improvements thread. Pages of comments about LN commitment tx design makes it difficult for collaborators to follow the discussion and see review comments about the code itself, while accomplishing very little to improve the code here.\r\n\r\n> There's not even a BIP for this.\r\n\r\nThis is a mempool policy proposal; I see no precedent that such a change requires a BIP.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1875164441",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "commented",
      "id": 1876316575,
      "node_id": "IC_kwDOABII585v1lGf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1876316575",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-04T05:04:50Z",
      "updated_at": "2024-01-04T05:04:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "On Wed, Jan 03, 2024 at 02:42:45AM -0800, Gloria Zhao wrote:\n> > This kind of thinking is precisely the problem: you've listed a bunch of potential problems, without any discussion of how actual protocols are impacted by those problems.\n> \n> Peter, please read the [RBF improvements mailing list thread](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019817.html) to get up to date on users' problems with RBF.\n> \n> Yes, v3 makes no sense if you think RBF is perfect today. I agree that we cannot have a productive discussion about how to solve problems if we don't agree on what they are. Given that thread is dedicated to discussing RBF issues, feel free to respond there. Let's work on coming to an agreement on RBF first, otherwise we will continue to talk in circles here.\n\nAs you know, I don't believe RBF is perfect. I even relatively recently, after\nthat RBF improvements thread, proposed my own improvement to RBF rules, the\nalways-replaceable invariant:\n\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-November/021175.html\n\nYou and I have discussed RBF's flaws in person multiple times, as you have\nadmitted below.\n\nThe question at hand here is not whether or not RBF is perfect in all\nhypothetical scenarios. It's whether or not V3 is actually succeeding at\nsolving real problems, without introducing new ones, without doubling down on\nexisting mistakes, and without adding too much technical debt.\n\nNotably, the fact that anchor outputs pose a significant risk of making large\nminers significantly more profitable is a big problem. We should not be\nencouraging more usage of them.\n\n> > Now, if the OP wanted to argue for those kinds of detailed tradeoffs, the correct way to do so would be with detailed design documents. But that hasn't happened.\n> \n> Documentation is included with this pull request, along with links to the discussions about the problems it solves and alternatives considered. Feel free to browse discussions that happened over the last few years, including\n> - the RBF improvements thread https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019817.html\n> - the gist https://gist.github.com/glozow/25d9662c52453bd08b4b4b1d3783b9ff\n\nBoth of these documents are conceptual overview documents, not in-depth\nengineering documents. Not once do you actually work out concrete scenarios\nwith real numbers from real protocols.\n\nBy contrast, my very short\nhttps://petertodd.org/2023/v3-txs-pinning-vulnerability actually does work out\na real scenario in a real protocol, with real transaction sizes, while figuring\nout exactly what an attacker can do and calculating the advantage the attacker\nhas.\n\nIt's notable that in spite of all your above conceptual overview documents, you\nnever actually did that, and as you have admitted, the numbers you guessed in\nyour claims about how well V3 works did not reflect real world usage of\nLightning.\n\n> - the 250 comments on #25038\n> - recall that you were there for some of the in-person discussions about RBF and package relay.\n>\n> I completely disagree with the statements about there being no real identified problems or exploration of the rest of the solution space. There is of course no concrete threshold of \"enough discussion,\" and I am happy to discuss further if it means coming up with a better solution. But please keep the discussion on this PR in scope. Again, there is a RBF limitations / improvements thread. Pages of comments about LN commitment tx design makes it difficult for collaborators to follow the discussion and see review comments about the code itself, while accomplishing very little to improve the code here.\n> \n> > There's not even a BIP for this.\n> \n> This is a mempool policy proposal; I see no precedent that such a change requires a BIP.\n\nBIP-125 Replace-By-Fee comes to mind... which was written just over 8 years\nago, when Lightning didn't even exist, and RBF's intended purpose was just to\nlet people fee bump their own on-chain transactions. It was a much simpler\ntime, and even then it got a BIP.\n\nObviously, now that we're having to deal with much more complex contracting\nprotocols with multiple parties, and much more complex tradeoffs, we need to\nstep up our game and properly document our proposed changes and do proper\nanalysis of pros and cons with respect to real protocols and future upgrade\nscenarios.\n",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1876316575",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "commented",
      "id": 1876380772,
      "node_id": "IC_kwDOABII585v10xk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1876380772",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-04T05:44:32Z",
      "updated_at": "2024-01-04T05:44:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "On Wed, Jan 03, 2024 at 02:10:22AM -0800, Bastien Teinturier wrote:\n> Thanks for your answers @petertodd.\n> \n> I think we may be talking a bit past each other in some of those comments, because most of this is too vague and ignores important low-level details.\n> I'll try to highlight the most important high-level points below.\n> \n> > So if Alice wants to broadcast a commitment transaction, her version of the fee variants all take the funds for the fees from her balance, and Bob has given Alice a set of signatures for each fee variant. Conversely, if Bob wants to broadcast, the funds for the fees are taken from his balance.\n> \n> I'm a bit lost, that's not at all how lightning works today? The fees are always taken from the balance of the channel initiator, regardless of whether it's Alice's or Bob's commitment transaction.\n> \n> That's a design decision that could potentially be revisited, and it has been evaluated a few times already, but doing so creates other drawbacks.\n\nNo, that is not how Lightning works. With anchor outputs, beyond the basic fee\nlevel, fees are paid by whichever side wants to pay them, potentially both\nparties at once. Furthermore, people are proposing (via ephemeral anchors and\npackage relay) that fees always be paid this way, with the commitment\ntransaction itself having no fee at all.\n\nEconomically speaking, what I'm proposing with RBF channels is very close to\nthe status quo.\n\n> > The true value of your balance in a Lightning channel is always potentially reduced by the fees it would take to (force-)close the channel. CPFP or RBF does not change this: either way, if you need to (force-)close the channel, you will recover less funds than the apparent balance.\n> \n> I think you didn't understand my point\n\nI understand your point. I'm talking about the true economics of a lightning\nchannel, not the raw numbers.\n\n> (or maybe you are thinking about something that works differently than lightning today, but I'm not sure how exactly it would work). What I was saying is that pre-signing multiple versions of the commitment at various feerates forces your lightning balance (and other lightning constraints) to use **the most restrictive variant of the commitment**.\n> \n> That means using RBF is much more restrictive than CPFP: with CPFP, you are only constrained by whatever fee you want to pay at broadcast time, while with RBF you are constrained by the highest feerate you may be willing to pay. The difference between those values is going to be large most of the time, which is quite inefficient.\n\nAgain, what I showed in my post, and explained multiple times above, was that:\n\n1. Any conceivable feerate, at very fine granularity, is feasible to pre-sign. Computers are fast, and signatures are small, so signing a few dozen variants to cover everything is not hard.\n2. It is pointless to pay more money in fees than you can recover from the channel.\n\nThe only nuance anyone has identified with #2 is when large in-flight HTLC's\nexist, and the channel balance is smaller than the fee you might want to pay.\n\n> The balance you can actually use in your lightning channel (if you're the initiator) is `to_local - channel_reserve - commit_tx_fees`.\n> If you're pre-signing N commitment transactions at feerates `[f1; ...; fN]`, the balance you can actually use is `to_local - channel_reserve - max(commit_tx_fees1, ..., commit_tx_feesN)`.\n> Otherwise you wouldn't be able to really offer a commitment transaction at all the chosen feerates.\n\nI've already demonstrated in a message above how in profitable routing node\nscenarios, for actual economical usage of the channel with reasonable revenue\nestimates, reserving funds for pay fees is an insignificant percentage of the\nchannel balance. I would suggest you read that and actually work through a real\nexample. Also, I would stress that you think about what the economics of the\nchannel reserve actually means: if fees are significant in relation to it, it\nisn't high enough to represent a real incentive.\n\nAs for end user wallets, keep reading.\n\n> Pre-signing multiple feerates creates other complex subtleties on the lightning side, as was detailed in comments on [my spec PR](https://github.com/lightning/bolts/pull/1036). Making the commitment transaction pay no on-chain fees greatly simplifies the lightning protocol, and provides a better decoupling from on-chain fees, ensuring that you only care about them at broadcast time and they don't interfere while you're transacting on lightning. Since force-closing is exceptional, I believe this is a design choice that makes a lot of sense, by optimizing for the common case.\n\nNo, force-closing is main the limiting factor in Lightning safety engineering:\nthe need to tolerate large numbers of force closes at once, without running out\nof block space, limits how much we can possible scale lightning. It is very\nimportant to keep force closing efficient to allow as many lightning users as\npossible.\n\n> > That \"drawback\" is a misunderstanding of economics and accounting.\n> \n> While your point may be an arguable trade-off for routing nodes, it ignores end users, who really want to maximize their liquidity usage.\n> And the vast majority of channels will be with end users, so it's an important case to optimize for IMHO.\n\nQuite the opposite: to maximize liquidity usage you want to get rid of the very\ninconvenient fact that anchor outputs forces you to have UTXO's lying around\nwith sufficient funds to pay fees in all circumstances.  As I explained in my\nV3 Transactions Review post, anchor channels are particularly harmful for end\nuser wallets. In fact, what's probably the most common non-custodial end-user\nimplementation out there, Phoenix, recently added limited RBF channel support.\nAnd they _don't_ keep around extra UTXO's to spend via anchors, because of\ncourse, that impacts liquidity!\n",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1876380772",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "mentioned",
      "id": 11385686169,
      "node_id": "MEE_lADOABII58539HF9zwAAAAKmo8iZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11385686169",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-04T05:44:32Z"
    },
    {
      "event": "subscribed",
      "id": 11385686180,
      "node_id": "SE_lADOABII58539HF9zwAAAAKmo8ik",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11385686180",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-04T05:44:32Z"
    },
    {
      "event": "commented",
      "id": 1876742224,
      "node_id": "IC_kwDOABII585v3NBQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1876742224",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-04T09:06:07Z",
      "updated_at": "2024-01-04T09:06:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "> No, that is not how Lightning works. With anchor outputs, beyond the basic fee level, fees are paid by whichever side wants to pay them, potentially both parties at once. \r\n\r\nYou're confusing fees paid directly by the commitment transaction (which are always paid by the channel initiator, regardless of whose commitment transaction it is) and fees paid by CPFP-ing the anchor output. Which doesn't make any sense to me since you're advocating for removing the CPFP part! I guess we're just talking past each other here, probably not worth digging more into that.\r\n\r\n> I understand your point. I'm talking about the true economics of a lightning channel, not the raw numbers.\r\n\r\nI believe you still haven't understood my point about the restrictions on the usable lightning balance, but since you're not actually proposing a detailed protocol change to use pre-signed transactions it's impossible to really make progress ¯\\_ (ツ)_/¯\r\n\r\n> In fact, what's probably the most common non-custodial end-user implementation out there, Phoenix, recently added limited RBF channel support. And they _don't_ keep around extra UTXO's to spend via anchors, because of course, that impacts liquidity!\r\n\r\nYup, I know, I wrote that code.",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1876742224",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "commented",
      "id": 1876929590,
      "node_id": "IC_kwDOABII585v36w2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1876929590",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-04T11:19:38Z",
      "updated_at": "2024-01-04T11:19:38Z",
      "author_association": "MEMBER",
      "body": ">>  This is a mempool policy proposal; I see no precedent that such a change requires a BIP.\r\n\r\n> BIP-125 Replace-By-Fee comes to mind... which was written just over 8 years\r\nago, when Lightning didn't even exist, and RBF's intended purpose was just to\r\nlet people fee bump their own on-chain transactions. It was a much simpler\r\ntime, and even then it got a BIP.\r\n\r\nA BIP was not required for RBF to be considered or merged. PR #6871 was merged on Nov 27, 2015.\r\nAfter [discussion about adding documentation on December 3, 2015](https://www.erisian.com.au/meetbot/bitcoin-dev/2015/bitcoin-dev.2015-12-03-18.59.log.html#l-160), PR https://github.com/bitcoin/bips/pull/261 for BIP125 was opened on Dec 11, 2015 and merged on January 8, 2016.\r\n\r\nI think it's fine to follow this example, if putting the documentation in the BIP repository is what we want. However, while we are still reviewing the code and considering changes to it, I think it is much more sensible for the code and docs to live next to each other. Afterwards, we can copy it to a BIP.\r\n\r\nDocumentation exists and serves its purpose of explaining what the code does. We can copy it to a BIP or some other format if we want to, but a BIP is not a prerequisite or an indication of the quality of this proposal.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1876929590",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "commented",
      "id": 1876973577,
      "node_id": "IC_kwDOABII585v4FgJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1876973577",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-04T11:54:17Z",
      "updated_at": "2024-01-04T11:54:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "On Thu, Jan 04, 2024 at 01:06:19AM -0800, Bastien Teinturier wrote:\n> > No, that is not how Lightning works. With anchor outputs, beyond the basic fee level, fees are paid by whichever side wants to pay them, potentially both parties at once. \n> \n> You're confusing fees paid directly by the commitment transaction (which are always paid by the channel initiator, regardless of whose commitment transaction it is) and fees paid by CPFP-ing the anchor output. Which doesn't make any sense to me since you're advocating for removing the CPFP part! I guess we're just talking past each other here, probably not worth digging more into that.\n\n\"confusing\"? What do you think I meant by \"beyond the basic fee level\"? I am well aware of\nhow Lightning works.\n",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1876973577",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "commented",
      "id": 1876988120,
      "node_id": "IC_kwDOABII585v4JDY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1876988120",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-04T12:05:11Z",
      "updated_at": "2024-01-04T12:05:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "On Thu, Jan 04, 2024 at 03:19:50AM -0800, Gloria Zhao wrote:\n> >>  This is a mempool policy proposal; I see no precedent that such a change requires a BIP.\n> \n> > BIP-125 Replace-By-Fee comes to mind... which was written just over 8 years\n> ago, when Lightning didn't even exist, and RBF's intended purpose was just to\n> let people fee bump their own on-chain transactions. It was a much simpler\n> time, and even then it got a BIP.\n> \n> A BIP was not required for RBF to be considered or merged. PR #6871 was merged on Nov 27, 2015.\n> After [discussion about adding documentation on December 3, 2015](https://www.erisian.com.au/meetbot/bitcoin-dev/2015/bitcoin-dev.2015-12-03-18.59.log.html#l-160), PR https://github.com/bitcoin/bips/pull/261 for BIP125 was opened on Dec 11, 2015 and merged on January 8, 2016.\n\nYes, as I said, standards change. The BIP was written prior to releasing the\ncode in a public Bitcoin Core release.\n\n> I think it's fine to follow this example, if putting the documentation in the BIP repository is what we want. However, while we are still reviewing the code and considering changes to it, I think it is much more sensible for the code and docs to live next to each other. Afterwards, we can copy it to a BIP.\n\nLook, I don't care if the BIP-type documentation is actually in the BIP repo.\nWhat I care is that you've gone through that analysis process in a carefully\nconsidered way. You're welcome to put that analysis in this pull-req for now.\nBut you have to actually do it.\n\n> Documentation exists and serves its purpose of explaining what the code does. We can copy it to a BIP or some other format if we want to, but a BIP is not a prerequisite or an indication of the quality of this proposal.\n\nBitcoin's market cap has incresed by a factor of 100x since RBF was released,\nand what we do with Bitcoin has become far more complicated. The care and\nattention needed to make a good proposal has gone up.\n\nDocumentation does not merely explain was the code does. It also allows us to\ndo a real engineering evaluation to figure out if what the code does is\nworthwhile. That why it's not enough to give vague examples of problems V3 is\ntrying to fix. You have to actually work out examples, in detail, and do proper\nengineering analysis on that.\n\nYou haven't done that, which is exactly how we had the V3 ephemeral anchor\npinning vector debacle.\n",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1876988120",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11403599678,
      "node_id": "HRFPE_lADOABII58539HF9zwAAAAKntR8-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11403599678",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-05T17:34:07Z"
    },
    {
      "event": "labeled",
      "id": 11404867109,
      "node_id": "LE_lADOABII58539HF9zwAAAAKnyHYl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11404867109",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-05T20:20:25Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-05T22:13:43Z",
      "updated_at": "2024-01-05T22:13:43Z",
      "source": {
        "issue": {
          "id": 2067738656,
          "node_id": "PR_kwDOABII585jVVNL",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29191",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29191/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29191/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29191/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29191",
          "number": 29191,
          "state": "closed",
          "state_reason": null,
          "title": "refactor(tidy): Use C++20 contains method",
          "body": "C++20 introduced the `contains` method on containers to check if an element is in the container. It can be used instead of the `count` method now.\r\nI believe it is easier to understand, as `contains` directly returns a `bool` indicating whether the element exists, while `count` returns the number of occurrences of the element, which then often needs to be compared against 0.\r\nAlso, it is slightly more efficient than count for this use-case.\r\n\r\nThis pull request introduces the clang-tidy check `readability-container-contains` and fixes the instances where `count` is being used where `contains` could be used instead. I used the clang-tidy -fix option to do it automatically.",
          "user": {
            "login": "aureleoules",
            "id": 22493292,
            "node_id": "MDQ6VXNlcjIyNDkzMjky",
            "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aureleoules",
            "html_url": "https://github.com/aureleoules",
            "followers_url": "https://api.github.com/users/aureleoules/followers",
            "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
            "organizations_url": "https://api.github.com/users/aureleoules/orgs",
            "repos_url": "https://api.github.com/users/aureleoules/repos",
            "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/aureleoules/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 11,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29191",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29191",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29191.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29191.patch"
          },
          "closed_at": "2024-01-16T22:19:25Z",
          "created_at": "2024-01-05T17:22:15Z",
          "updated_at": "2024-01-16T22:19:25Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11415278502,
      "node_id": "HRFPE_lADOABII58539HF9zwAAAAKoZ1Om",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11415278502",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-08T09:44:09Z"
    },
    {
      "event": "unlabeled",
      "id": 11415844114,
      "node_id": "UNLE_lADOABII58539HF9zwAAAAKob_US",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11415844114",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-08T10:33:45Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1809900246,
      "node_id": "PRR_kwDOABII585r4OLW",
      "url": null,
      "actor": null,
      "commit_id": "9850222469d031f85868050e53a2add03d7e300c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#pullrequestreview-1809900246",
      "submitted_at": "2024-01-08T21:20:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
    },
    {
      "event": "commented",
      "id": 1886085872,
      "node_id": "IC_kwDOABII585wa2Lw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1886085872",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-11T02:11:55Z",
      "updated_at": "2024-01-11T02:11:55Z",
      "author_association": "MEMBER",
      "body": "I think this is correct to say that nversion=3 is a weak pinning mitigation.\r\nOne can always use a revoked state with max outgoing HTLC outputs=483 to pin.\r\nSo 483 * 33 + 1000, you have ~18k vbytes state, mempool backlog at 20 sat/vb, you can steal ~100 USD payments.\r\nYes `max_offered_htlc` chan policy param can be introduced at the LN-level to bound more commitment size.\r\nHowever mempool backlog will always make the level of pin exposure dynamic, a bad thing.\r\n(Let's be nice and not introduce cunning adversaries who has mastered both pinning and replacement cycling).\r\nAnd yes it sucks if nversion=3 introduces non-null mining income asymmetries.\r\nBetter thing if we go back to the whiteboard about pinning mitigations imho.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1886085872",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "commented",
      "id": 1887170261,
      "node_id": "IC_kwDOABII585we-7V",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1887170261",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-11T13:31:38Z",
      "updated_at": "2024-01-11T13:32:32Z",
      "author_association": "MEMBER",
      "body": "> One can always use a revoked state with max outgoing HTLC outputs=483 to pin.\r\n> So 483 * 33 + 1000, you have ~18k vbytes state, mempool backlog at 20 sat/vb, you can steal ~100 USD payments.\r\n\r\nOk @instagibbs helped me parse what you're trying to say here (thanks) and IIUC you're talking about a scenario in which:\r\n- The counterparties in a channel have negotiated a very high number of maximum in-flight HTLCS, so they have at some point signed a commitment transaction that was 18KvB in size.\r\n- This is a revoked state now, but if published, means that the honest party may need to pay 18KvB*20sat/vB = 360,000sat in fees to replace it. Since that might be much higher than what the honest party wants to pay for a CPFP of their more recent channel state.\r\n- The honest party is able to grab those funds with the revocation key if this tx confirms, but it might just sit in the mempool and be hard to replace.\r\n- You're saying that since this is still possible in a v3 world, v3 is not effective in pinning prevention.\r\n\r\nIs this a pinning issue or a problem with how they negotiated the max htlcs? It's one thing for an attacker to attach descendants to the shared transaction and take advantage of the permissive limit. It's another thing to willingly sign a huge transaction with somebody and be surprised later if they broadcast it.\r\n\r\n> Yes `max_offered_htlc` chan policy param can be introduced at the LN-level to bound more commitment size.\r\n\r\nIs that different from `max_accepted_htlcs`? Or do you mean a hard limit within the protocol?\r\nhttps://github.com/lightning/bolts/blob/8a64c6a1cef979b3f0cecb00ba7a48c2d28b3588/02-peer-protocol.md?plain=1#L159-L162\r\n\r\nThat seems to be the solution. There isn't anything we can do at the mempool policy level to prevent conflicting transactions from being very different sizes, except to decrease the maximum standard transaction size.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1887170261",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "mentioned",
      "id": 11456659342,
      "node_id": "MEE_lADOABII58539HF9zwAAAAKq3r-O",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11456659342",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-11T13:31:38Z"
    },
    {
      "event": "subscribed",
      "id": 11456659364,
      "node_id": "SE_lADOABII58539HF9zwAAAAKq3r-k",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11456659364",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-11T13:31:38Z"
    },
    {
      "event": "commented",
      "id": 1887226712,
      "node_id": "IC_kwDOABII585wfMtY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1887226712",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-11T14:04:20Z",
      "updated_at": "2024-01-11T14:04:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "Another thing to note about this attack is that the attacker would be losing funds in the process if the attacked node simply spends the revoked commitments outputs (instead of trying to replace it). Whenever one side publishes a revoked commitment, they will lose any funds that they had in the channel (which is at least their channel reserve, thus 1% of the channel). So the attacked node would pay a large on-chain fee, but would also earn the funds that the attacker loses. In the worst case scenario, it means that both sides lose money if the fee is larger than the attacker's channel balance (which may be an acceptable scorched earth strategy).\r\n\r\nLightning node operators should use sensible values for their channel parameters (such as `max_accepted_htlcs`) to ensure that the attacker has more to lose if they publish a revoked commitment (that's why eclair's default value for `max_accepted_htlcs` has been `30` for years, which is much lower than `483`).",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1887226712",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "commented",
      "id": 1888377830,
      "node_id": "IC_kwDOABII585wjlvm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1888377830",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T03:30:05Z",
      "updated_at": "2024-01-12T03:30:05Z",
      "author_association": "MEMBER",
      "body": "I realized after posting the quick thoughts yesterday that some replacement tactic alters significantly the anti-v3 pinning mitigation at the advantage of an adversary economics, so here one of the most adversarial pinning scenario I can come with.\r\n\r\nAssume the attacker strategy is a rule-3 based pinning targeting the double-spend of forwaded HTLC over a target LN routing node. Let's call them Alice and Mallory. Assume the channel is 1_000_000 sats, `max_htlc_value_in_flight`=50% (i.e 500_000 sats), `cltv_expiry_delta`=144, all liquidity balance is on Alice-side, Mallory's `channel_reserve` is non-existent (inbound liquidity channel out-of-band buy). Mallory's topology setup cost has been 1000 sats in period of low-fees. Assume nversion=3 with 1 child 1k limit and its support at the LN-level.\r\n\r\nHere the sequence of actions:\r\n1. Mallory routes over Alice 483 HTLCs, gets local revoked state of size 21k vbytes at 20 sats/vbyte\r\n2. Mallory waits for a mempool backlog of depth 144 blocks with the feerate superior at 20 sat/vbytes\r\n3. Network mempool rolling min fee is at 5 sat/vbytes, assuming default `maxmempool` size\r\n4. Mallory routes a HTLC over Alice from a puppet inbound node of amount 440_000 satoshis\r\n5. Mallory broadcasts in network mempools revoked state 21k at 20 sats/vbyte + child 1k at 20 sats/vbyte\r\n6. Alice cannot over-pay in absolute fees to replace Mallory state due to \"max at stake\" 440k sats\r\n7. The mempool backlog of 144 blocks is swallowed by blocks confirmations ; The inbound HTLC is expired\r\n8. Mallory replaces first her malicious state with a commitment tx 1k vbyte at 10 sats/vbytes + child 1k vbytes at 400 sats/vbyte (+ RBF penalty)\r\n9. Mallory replaces this high-fee CPFP on a \"parallel\" pinning state and repeat the \"parallel-CPFP\" trick N times\r\n10. Mallory double-spend the inbound HTLC with a commitment_tx + HTLC-timeout of package size 1k at 20 sat/vbytes\r\n\r\nThe per-channel attacking cost for Mallory are the following:\r\na) chan topology setup = 1000 sats\r\nb) inbound chan double-spend package cost = 20k sats\r\nc) outbound chan commitment tx cost = 10k cost\r\n\r\nPer-channel total cost: 31k.\r\n\r\nThere is an overall CPFP cost of 440k sats + N * rbf_penalty * 1k.\r\nAssuming N = 10 and RBF penalty = 1 sat/vbyte, the overall CPFP cost is 450k sats.\r\n\r\nThe per-channel attacker gain for Mallory is 440k sats.\r\n\r\nThe total gain for Mallory is the following equation: `440_000 * 10 - (31_000 * 10 + 450_000)`, i.e `3'640k sats.\r\n\r\nAssuming the above demonstration is correct, in reason of \"parallel\" pinning against an uncoordinated set of target LN routing nodes, an attacker can realize a substantial gain incentivizig the attempt of pinning attack at scale, even in a nversion=3 transaction-relay network of nodes world.\r\n\r\nI think an alternative solution like \"replace-by-feerate\" suffers from the same type of \"parallel\" package tampering weakness, where an adversary can \"adaptatively\" plug high-feerate malicious package, then dismembers them to block the confirmation of a LN routing node aiming to HTLC-timeout offered outputs on its commitment transaction.\r\n\r\nI believe the most-robust pinning solution is taking the long-term direction of consensus changes, where a) commitment transaction weight should be constant - all HTLC encapsulated in a covenant-tree and b) feerate set  by an IN_OUT_AMOUNT opcode where the fee value is self-contained from spending commitment transaction input. Fee\r\nbidding among a set of trust-minimized off-chain counterparties would be a monotonically increasing process happening in public network mempools. This would remove package malleability and preventing pinning / replacement cycling kind of attack games. While this is yet to be demonstrated, I think it's generalizing well to all time-sensitive L2s.\r\n\r\nI think the concern of mining income asymmetries favored by generalized CPFP usage is valid. However, whatever we're finally doing as protocol devs in Bitcoin Core or any base-layer implementation, this does not prevent each mining pool to deploy on their own \"anti pinning nversion=3\" service, as we're seeing with \"transaction accelerator”. I can see LN node operators adopting such new service as implemented correctly by mining pools / miners (this is  a big assumption), it would provide minimal protection in face of naive pinning adversaries. (I.e the ones who don’t have the domain expertise to execute the variation of the attack exposed above). As a historical note, we weighted mining-level pinning mitigations years ago and we disregarded them due to concerns on mining decentralization and incentives misalignment, if you’re LN counterparty is a miner too.\r\n\r\nFinally, I'm ~0 on continuing or not to implement and deploy nversion=3 as a default mempool policy rules over the network.\r\nI just fear LN folks will go for years-long of integrating a frail mechanism in their software, while at the meantime hitting\r\na wormhole of issues related to heterogeneity of nodes policies / ressources and use-case incentives, like we have seen with full-rbf.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1888377830",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "commented",
      "id": 1888389377,
      "node_id": "IC_kwDOABII585wjokB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1888389377",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T03:47:35Z",
      "updated_at": "2024-01-12T03:47:35Z",
      "author_association": "MEMBER",
      "body": "> Is this a pinning issue or a problem with how they negotiated the max htlcs? It's one thing for an attacker to attach\r\n> descendants to the shared transaction and take advantage of the permissive limit. It's another thing to willingly sign a\r\n> huge transaction with somebody and be surprised later if they broadcast it.\r\n\r\nSee the attack scenario laid out more clearly.\r\n\r\n> Is that different from max_accepted_htlcs? Or do you mean a hard limit within the protocol?\r\n> https://github.com/lightning/bolts/blob/8a64c6a1cef979b3f0cecb00ba7a48c2d28b3588/02-peer-protocol.md?\r\n> plain=1#L159-L162\r\n\r\n`max_accepted_htlcs` is a limit on the number of inbound HTLCs. `max_offered_htlc` would be some new BOLT-channel policy parameter to limit the number of outbound HTLCs, the idea has floated few times among LN folks to bind max commitment transaction size.\r\n\r\n> That seems to be the solution. There isn't anything we can do at the mempool policy level to prevent conflicting > transactions from being very different sizes, except to decrease the maximum standard transaction size.\r\n\r\nYes there is nothing at mempool policy level we can do to limit conflicting transaction sizes, and this level of “package malleability\" being exploited by the adversary. I think this one of the key issue. \r\n\r\n> Another thing to note about this attack is that the attacker would be losing funds in the process if the attacked node  > simply spends the revoked commitments outputs (instead of trying to replace it). Whenever one side publishes a revoked > commitment, they will lose any funds that they had in the channel (which is at least their channel reserve, thus 1% of the > channel). So the attacked node would pay a large on-chain fee, but would also earn the funds that the attacker loses. In > the worst case scenario, it means that both sides lose money if the fee is larger than the attacker's channel balance > (which may be an acceptable scorched earth strategy).\r\n\r\nSee the math above, works with latest valid commitment routing at `max_accepted_htlc` / hyptothetical `max_offered_htlc` and I think you can arrange to have a 0 `channel_reserve` thanks to inbound liquidity buy (though non-standardized mechanism). Bounding more LN package weight, payment throughput trade-off and at the end an adversary can “batch” the attack to be “break-even”.\r\n\r\nYes, you can adopt nversion=3 parameters and chan policy parameters so restrictive to have a single HTLC output and a single CPFP of the minimal size, though a) adversary can still “jump” the CPFP over many “parallel” pinning attacks assume adversary have superior mempool views than targets and can choose when to forward HTLC and have them `cltv_expiry_delta` locks over a path and b) breaks every time we would upgrade channel type for new segwit versions or whatever and corresponding witness size.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1888389377",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "commented",
      "id": 1888673524,
      "node_id": "IC_kwDOABII585wkt70",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1888673524",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T08:47:55Z",
      "updated_at": "2024-01-12T08:49:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "> max_accepted_htlcs is a limit on the number of inbound HTLCs. max_offered_htlc would be some new BOLT-channel policy parameter to limit the number of outbound HTLCs, the idea has floated few times among LN folks to bind max commitment transaction size.\r\n\r\nThis new `max_offered_htlc` parameter is unnecessary. An HTLC sender unilaterally decides whether they send HTLCs or not, and can ensure that they never send more outgoing HTLCs than their `max_accepted_htlcs`. That has always been eclair's behavior by the way: our default is `max_accepted_htlcs = 30`, we have many peers that set their `max_accepted_htlcs = 483`, but we never offer them more than 30 HTLCs.\r\n\r\n> I believe the most-robust pinning solution is taking the long-term direction of consensus changes, where a) commitment transaction weight should be constant - all HTLC encapsulated in a covenant-tree and b) feerate set by an IN_OUT_AMOUNT opcode where the fee value is self-contained from spending commitment transaction input.\r\n\r\nThis would indeed be a potential longer term solution (I believe that Eltoo does something similar), but as it requires a soft-fork, this is much longer term than mitigating this issue now (and I still believe v3/EA does improve this issue, because the attack you're describing most likely also works without v3 and costs even more for the attacked node).\r\n\r\n> 4. Mallory routes a HTLC over Alice from a puppet inbound node of amount 440_000 satoshis\r\n\r\nI don't understand in which direction this HTLC is flowing (the `from` and `inbound` seem contradictory), and I'm not sure whether the HTLCs you described in step 1 were fulfilled or failed. I'm failing to understand your attack scenario: many details are missing in my opinion (which HTLCs are failed/fulfilled, and at what step?). Can you provide a more thorough description of every step so that we can analyze this better?",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1888673524",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-13T00:25:43Z",
      "updated_at": "2024-01-13T00:25:43Z",
      "source": {
        "issue": {
          "id": 2079415940,
          "node_id": "PR_kwDOABII585j9MBq",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29242",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29242/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29242/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29242/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29242",
          "number": 29242,
          "state": "open",
          "state_reason": null,
          "title": "Mempool util: Add RBF diagram checks for single chunks against clusters of size 2",
          "body": "This is a smaller piece of https://github.com/bitcoin/bitcoin/pull/28984 broken off for easier review.\r\n\r\nUp to date explanation of diagram checks are here: https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393\r\n\r\nThis infrastructure has two near term applications prior to cluster mempool:\r\n1) Limited Package RBF(https://github.com/bitcoin/bitcoin/pull/28984): We want to allow package RBF only when we know it improves the mempool. This narrowly scoped functionality allows use with v3-like topologies, and will be expanded at some point post-cluster mempool when diagram checks can be done efficiently against bounded cluster sizes.\r\n2) Replacement for single tx RBF(in a cluster size of up to two) against conflicts of up to cluster size two. `ImprovesFeerateDiagram` interface will have to change for this use-case, which is a future direction to solve certain pins and improve mempool incentive compatibility: https://delvingbitcoin.org/t/ephemeral-anchors-and-mev/383#diagram-checks-fix-this-3\r\n\r\nAnd longer-term, this would be the proposed way we would compute incentive compatibility for all conflicts, post-cluster mempool.\r\n\r\n",
          "user": {
            "login": "instagibbs",
            "id": 5767891,
            "node_id": "MDQ6VXNlcjU3Njc4OTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/instagibbs",
            "html_url": "https://github.com/instagibbs",
            "followers_url": "https://api.github.com/users/instagibbs/followers",
            "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
            "organizations_url": "https://api.github.com/users/instagibbs/orgs",
            "repos_url": "https://api.github.com/users/instagibbs/repos",
            "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/instagibbs/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29242",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29242.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29242.patch"
          },
          "created_at": "2024-01-12T18:07:44Z",
          "updated_at": "2024-01-21T14:00:31Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDE1ODYyM2I4ZTA3MjZkZmY3ZWFlNDI4ODEzOGYxNzEwZTcyN2RiOWM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/158623b8e0726dff7eae4288138f1710e727db9c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/158623b8e0726dff7eae4288138f1710e727db9c",
      "tree": {
        "sha": "ce03ea05579138e8f2aa5a8241a73703a9df51d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce03ea05579138e8f2aa5a8241a73703a9df51d6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/60f677375e52832536a599afae3226f8e2155d88",
          "sha": "60f677375e52832536a599afae3226f8e2155d88",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/60f677375e52832536a599afae3226f8e2155d88"
        }
      ],
      "message": "[refactor] change Workspace::m_conflicts and adjacent funcs/structs to use Txid\n\nIt's preferable to use type-safe transaction identifiers to avoid\nconfusing txid and wtxid. The next commit will add a reference to this\nset; we use this opportunity to change it to Txid ahead of time instead\nof adding new uses of uint256.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-01-16T14:20:33Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-11-27T16:29:59Z"
      },
      "sha": "158623b8e0726dff7eae4288138f1710e727db9c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDNlM2MzNzhiMDIzNTA2Y2ZmZGRhMDI5NzE3ZmQ4ZDdlZjhkMDQ5NGM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e3c378b023506cffdda029717fd8d7ef8d0494c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3e3c378b023506cffdda029717fd8d7ef8d0494c",
      "tree": {
        "sha": "b81b50a79eaeb306abaff19e6d8b5a8da4c76143",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b81b50a79eaeb306abaff19e6d8b5a8da4c76143"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/158623b8e0726dff7eae4288138f1710e727db9c",
          "sha": "158623b8e0726dff7eae4288138f1710e727db9c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/158623b8e0726dff7eae4288138f1710e727db9c"
        }
      ],
      "message": "[rpc] return full string for package_msg",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-01-16T14:20:41Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-12-15T18:04:01Z"
      },
      "sha": "3e3c378b023506cffdda029717fd8d7ef8d0494c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGE0NmU4MDM2Y2UyODMzZDE4NWY5N2M1MTY2YjgyZjk0ZjUzN2JlNjg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a46e8036ce2833d185f97c5166b82f94f537be68",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a46e8036ce2833d185f97c5166b82f94f537be68",
      "tree": {
        "sha": "43e019cac6d95624c704b08c514e4be595b42458",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43e019cac6d95624c704b08c514e4be595b42458"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e3c378b023506cffdda029717fd8d7ef8d0494c",
          "sha": "3e3c378b023506cffdda029717fd8d7ef8d0494c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3e3c378b023506cffdda029717fd8d7ef8d0494c"
        }
      ],
      "message": "[policy] add v3 policy rules",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-01-16T14:20:48Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-12-15T12:17:23Z"
      },
      "sha": "a46e8036ce2833d185f97c5166b82f94f537be68"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGU3MjFmNGNhZDQ4MzczM2M4Njk5ZTJhYzNhMDVkZDMwZWEwNzQxYTA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e721f4cad483733c8699e2ac3a05dd30ea0741a0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e721f4cad483733c8699e2ac3a05dd30ea0741a0",
      "tree": {
        "sha": "7d950683df74141d84144b75daa6974c9303adf2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d950683df74141d84144b75daa6974c9303adf2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a46e8036ce2833d185f97c5166b82f94f537be68",
          "sha": "a46e8036ce2833d185f97c5166b82f94f537be68",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a46e8036ce2833d185f97c5166b82f94f537be68"
        }
      ],
      "message": "[policy/validation] allow v3 transactions with certain restrictions",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-01-16T14:20:57Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-12-15T12:17:44Z"
      },
      "sha": "e721f4cad483733c8699e2ac3a05dd30ea0741a0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDc0ODI4Njk0MThhODUyMjM5MzNkNTk4ZGU3ZDk1ZTYwNTM5ZjEyYjg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7482869418a85223933d598de7d95e60539f12b8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7482869418a85223933d598de7d95e60539f12b8",
      "tree": {
        "sha": "1c76bc75e37f9b5a6a69484fd716a688a61f073e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c76bc75e37f9b5a6a69484fd716a688a61f073e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e721f4cad483733c8699e2ac3a05dd30ea0741a0",
          "sha": "e721f4cad483733c8699e2ac3a05dd30ea0741a0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e721f4cad483733c8699e2ac3a05dd30ea0741a0"
        }
      ],
      "message": "test: Add and use option for tx-version in MiniWallet methods",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-01-16T14:21:04Z"
      },
      "author": {
        "name": "MarcoFalke",
        "email": "*~=`'#}+{/-|&$^_@721217.xyz",
        "date": "2023-11-30T14:00:05Z"
      },
      "sha": "7482869418a85223933d598de7d95e60539f12b8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGViZWQ0ODE1NjM1ODVmN2ZkMGVjZTg2MDlkM2NlNWY1ZDMzZjkyM2E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ebed481563585f7fd0ece8609d3ce5f5d33f923a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ebed481563585f7fd0ece8609d3ce5f5d33f923a",
      "tree": {
        "sha": "1dbcb658b743e9baf7f8dceae82e8866e5f66cf9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1dbcb658b743e9baf7f8dceae82e8866e5f66cf9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7482869418a85223933d598de7d95e60539f12b8",
          "sha": "7482869418a85223933d598de7d95e60539f12b8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7482869418a85223933d598de7d95e60539f12b8"
        }
      ],
      "message": "[functional test] v3 transaction submission\n\nCo-authored-by: Suhas Daftuar <sdaftuar@gmail.com>\nCo-authored-by: Gregory Sanders <gsanders87@gmail.com>",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-01-16T14:21:15Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-08-31T14:38:42Z"
      },
      "sha": "ebed481563585f7fd0ece8609d3ce5f5d33f923a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGIyNzViMmNiOTU1ZTE2NmJlNWJlNzZkN2Q5MjU4MDQzYjdiYTFjZjA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b275b2cb955e166be5be76d7d9258043b7ba1cf0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b275b2cb955e166be5be76d7d9258043b7ba1cf0",
      "tree": {
        "sha": "f2e1823540389611d44d1aa940728d39235f7ba4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2e1823540389611d44d1aa940728d39235f7ba4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ebed481563585f7fd0ece8609d3ce5f5d33f923a",
          "sha": "ebed481563585f7fd0ece8609d3ce5f5d33f923a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ebed481563585f7fd0ece8609d3ce5f5d33f923a"
        }
      ],
      "message": "[doc] v3 policy",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-01-16T14:21:24Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-04-29T23:42:18Z"
      },
      "sha": "b275b2cb955e166be5be76d7d9258043b7ba1cf0"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11499673362,
      "node_id": "HRFPE_lADOABII58539HF9zwAAAAKtbxcS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11499673362",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-16T14:28:06Z"
    },
    {
      "event": "labeled",
      "id": 11501198620,
      "node_id": "LE_lADOABII58539HF9zwAAAAKthl0c",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11501198620",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-16T16:28:23Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1897647775,
      "node_id": "IC_kwDOABII585xG86f",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1897647775",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-18T02:06:06Z",
      "updated_at": "2024-01-18T02:06:06Z",
      "author_association": "MEMBER",
      "body": "> This new max_offered_htlc parameter is unnecessary. An HTLC sender unilaterally decides whether they send HTLCs or\r\n> not, and can ensure that they never send more outgoing HTLCs than their max_accepted_htlcs. That has always been\r\n> eclair's behavior by the way: our default is max_accepted_htlcs = 30, we have many peers that set their\r\n> max_accepted_htlcs = 483, but we never offer them more than 30 HTLCs.\r\n\r\nGood if eclair is already limiting the number of outgoing HTLCs. I dont know if all other implementations are doing it.\r\n\r\n> This would indeed be a potential longer term solution (I believe that Eltoo does something similar), but as it requires a soft-> fork, this is much longer term than mitigating this issue now (and I still believe v3/EA does improve this issue, because the > attack you're describing most likely also works without v3 and costs even more for the attacked node)\r\n\r\nI know. I just think we’re not able to give precise anti-pinning safety bounds to v3 because of  a) `cltv_expiry_delta` selection and b) uncertainty on the mempool backlog. See my next analysis comment. \r\n\r\n> I don't understand in which direction this HTLC is flowing (the from and inbound seem contradictory), and I'm not sure\r\n> whether the HTLCs you described in step 1 were fulfilled or failed. I'm failing to understand your attack scenario: many\r\n> details are missing in my opinion (which HTLCs are failed/fulfilled, and at what step?). Can you provide a more thorough\r\n> description of every step so that we can analyze this better?\r\n\r\nThat topology Mallet - Alice - Mallory, where Mallet is the puppet inbound node. HTLC on Alice-Mallory link is fulfilled after pinning success. HTLC on Mallet-Alice link is failed, thus double-spend. There is a first wave of routed HTLCs to get a max size commitment tx, then only 1 routed HTLC, as a revoked state is used to pin. Note, you can use a valid commitment state, with 482 dust threshold HTLC+1 and one HTLC at 440k sats you'll double-spend.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1897647775",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "commented",
      "id": 1897677061,
      "node_id": "IC_kwDOABII585xHEEF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1897677061",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-18T02:39:17Z",
      "updated_at": "2024-01-18T02:39:41Z",
      "author_association": "MEMBER",
      "body": "Let's do the anti-pinning analysis with the most restrictve package vbyte size:\r\n- 1 commitment tx 268 bytes\r\n- 1 child 1kb\r\n\r\nPackage size: 1268 bytes.\r\n\r\nThis is assuming a commitment tx with only 1 HTLC output at max.\r\n\r\nWith mempool backlog superior to 20 sat/byte and depth=`cltv_expiry_delta`, one can pin 25k sats payment.\r\nAdversary cost: 5360 (commitment tx fee) + 1000 (child rbf-penalty) + 43 (channel opening output)\r\nAdversary gain (per-channel): 18597 satoshis.\r\n\r\nIf we reduce the size of v3 CPFP to 200 bytes, we have adversary gain (per-channel): 3000 sats.\r\n\r\nThe main issue with v3 is a node operator stay always exposed to high-fee mempool backlog creating opportunistic pinning exploitations for an adverdary. With a mempool depth superior to X (the sat/vbyte) and Y (the MB depth of transaction superior to X - must be superior to target `cltv_expiry_delta`), the remaining pinning exposure stay \"max package size\" * X. E.g if `cltv_expiry_delt`=144, mempool backlog of depth block_size * 144 superior to 20 sat/byte and max package size 4k byte, your pinning exposure is ~80k sats.\r\n\r\nAs liquidity is a scarce resource, LN node ops have an incentive to scale down 144, or at least keep it bounded in case the channel goes-to-chain. This lowers the likeliness of mempool environment fulfilling opportunistic conditions of backlog for pinning attackers to target LN nodes. Bounding the numbers of HTLCs per-channel reduces the LN node payment throughput, while max_accepted_htlc of dozens of HTLCs are rarely reached in practice, this will be less certain in the future.\r\n\r\nOf course, a LN node operator might run mempool backlog predictions, and from this statically or dynamically adapt its max pinning exposure (by playing on the `max_accepted_htlc` and `cltv_expiry_delta`). However, if the prediction fails and once you have HTLCs locked paymnent paths, you're irremediably exposed to pinning attacks, potentially overriding your max acceptable \"pinning exposure\" (like we have for dust with `max_dust_htlc_exposure`).\r\n\r\nSo yes v3 reduces pinning exposure (in the absolute). However no, it doesn't solve all the pinning scenarios in my opinion, and it's a weak solution if you have medium to advanced attackers that can predict mempool backlogs and opportunistic conditions of pinning exploitation better than the average LN node. I’m neutral on v3 deployment, I just fear this is not a pinning mitigation which is going to age well...",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1897677061",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "commented",
      "id": 1897791032,
      "node_id": "IC_kwDOABII585xHf44",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1897791032",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-18T04:48:28Z",
      "updated_at": "2024-01-18T16:53:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "> However no, it doesn't solve all the pinning scenarios in my opinion\r\n\r\nNotably, from [the discussion I see on delvingbitcoin](https://delvingbitcoin.org/t/v3-transaction-policy-for-anti-pinning/340/32), it appears that V3 transactions are *not* intended to be used for HTLC-x transactions. Which means they'll remain pinnable, due to the `SIGHASH_ANYONECANPAY` signatures, allowing anyone to turn them into large, pinned, high fee/low fee-rate transactions by adding additional inputs (and outputs).",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1897791032",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-18T14:01:13Z",
      "updated_at": "2024-01-18T14:01:13Z",
      "source": {
        "issue": {
          "id": 2088353364,
          "node_id": "PR_kwDOAN28mc5kbayA",
          "url": "https://api.github.com/repos/bitcoin/bips/issues/1541",
          "repository_url": "https://api.github.com/repos/bitcoin/bips",
          "labels_url": "https://api.github.com/repos/bitcoin/bips/issues/1541/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1541/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bips/issues/1541/events",
          "html_url": "https://github.com/bitcoin/bips/pull/1541",
          "number": 1541,
          "state": "open",
          "state_reason": null,
          "title": "Opt-In Policy For More Robust Fee-bumping",
          "body": "A specification is useful for coordination between node impls that want to implement the same policy and applications that want to use it. For those that are not interested in the details of v3 policy, this also serves as a writeup of the specific pinning problems we aim to address. There has been discussion of using this in other protocol design and multiple requests for its documentation to exist in the BIPs repository, so I'm opening a PR here.\r\n\r\nImplementation:\r\n- https://github.com/bitcoin/bitcoin/pull/28948\r\n\r\nExample usage and things built on top:\r\n- Package RBF\r\n  - https://github.com/bitcoin/bitcoin/pull/28984\r\n- Ephemeral Anchors\r\n  - https://github.com/bitcoin/bitcoin/pull/29001\r\n  - https://github.com/bitcoin/bips/pull/1524\r\n- LN commitment transactions\r\n  - https://delvingbitcoin.org/t/lightning-transactions-with-v3-and-ephemeral-anchors/418\r\n  - https://github.com/instagibbs/bolts/commits/zero_fee_commitment\r\n- LN-Symmetry\r\n  - https://delvingbitcoin.org/t/ln-symmetry-project-recap/359\r\n  - https://github.com/instagibbs/lightning/tree/eltoo_support\r\n\r\nDiscussion and history:\r\n- https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019817.html\r\n- https://gist.github.com/glozow/25d9662c52453bd08b4b4b1d3783b9ff\r\n- https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020937.html\r\n- https://delvingbitcoin.org/t/v3-transaction-policy-for-anti-pinning/340\r\n- https://github.com/bitcoin/bitcoin/pull/25038",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 1,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bips/pulls/1541",
            "html_url": "https://github.com/bitcoin/bips/pull/1541",
            "diff_url": "https://github.com/bitcoin/bips/pull/1541.diff",
            "patch_url": "https://github.com/bitcoin/bips/pull/1541.patch"
          },
          "created_at": "2024-01-18T14:01:13Z",
          "updated_at": "2024-01-19T18:09:14Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1898606641,
      "node_id": "IC_kwDOABII585xKnAx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1898606641",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-18T14:39:43Z",
      "updated_at": "2024-01-18T14:39:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Which means they'll remain pinnable, due to the SIGHASH_ANYONECANPAY signatures, allowing anyone to turn them into large, pinned, high fee/low fee-rate transactions by adding additional inputs (and outputs).\r\n\r\nI may be missing something here, can you describe in more details how *anyone* could turn them into large pinning txs? They do require signatures from _both_ participants, and one of them is going to be `SIGHASH_ALL`. So the only participant that may play pinning games is the owner of the HTLC-x transaction. The only issue I could see with that is if they're doing this with HTLC-success txs while eclipsing their peer to prevent them from learning the preimage. As detailed [here](https://delvingbitcoin.org/t/lightning-transactions-with-v3-and-ephemeral-anchors/418/17?u=t-bast), that can be mitigated by various mechanisms and the attacker has a risk of losing funds, so I don't think this should be related in any way to v3?",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1898606641",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGM2YzIwNjM5NjM1ZGQyZmE1ZjczODNkYzMxMjFiZTAyZDljZDYzNzE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6c20639635dd2fa5f7383dc3121be02d9cd6371",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c6c20639635dd2fa5f7383dc3121be02d9cd6371",
      "tree": {
        "sha": "3539086093201f36930355ad9d33f2d4ebcfef1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3539086093201f36930355ad9d33f2d4ebcfef1a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b275b2cb955e166be5be76d7d9258043b7ba1cf0",
          "sha": "b275b2cb955e166be5be76d7d9258043b7ba1cf0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b275b2cb955e166be5be76d7d9258043b7ba1cf0"
        }
      ],
      "message": "[mempool] evict everything paying 0 fees in TrimToSize()\n\nAt this point it's not expected that there are any such transactions,\nexcept from reorgs.\n\nfeature_bip68_sequence.py needs to be updated because it assumes that\ndeprioritising tx2 would cause it to stay in the mempool but not be\nselected by BlockAssembler.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-01-18T14:48:37Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-11-10T13:51:39Z"
      },
      "sha": "c6c20639635dd2fa5f7383dc3121be02d9cd6371"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ2ZmMzYjcyYjg2MzRkZDE0YjliZWJjYjQyZDcyMmI1NDVhMGU2OWU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6fc3b72b8634dd14b9bebcb42d722b545a0e69e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d6fc3b72b8634dd14b9bebcb42d722b545a0e69e",
      "tree": {
        "sha": "2b11c1fa5331988c0b606df6a7fb369d904afc87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b11c1fa5331988c0b606df6a7fb369d904afc87"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6c20639635dd2fa5f7383dc3121be02d9cd6371",
          "sha": "c6c20639635dd2fa5f7383dc3121be02d9cd6371",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c6c20639635dd2fa5f7383dc3121be02d9cd6371"
        }
      ],
      "message": "[test] transactions with fee <=0 are not kept in mempool\n\nSuch transactions are only expected if:\n- They came from a disconnected block (requires PoW to trigger).\n- They have a modified fee via prioritisetransaction (only privileged\n  client has access).\n- They were submitted in a v3 package and have since lost their\n  fee-bumping child due to replacement (topology is bounded).",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-01-18T14:48:37Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-02-01T17:23:24Z"
      },
      "sha": "d6fc3b72b8634dd14b9bebcb42d722b545a0e69e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGYzZDQ5MTZlYWNmYmNlZjYxYmM0ZDQ2MDI5NDY1N2ZhZTAwNmQyYWE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "tree": {
        "sha": "9b38bfc0874490f342659f139de01ad19bf80fac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b38bfc0874490f342659f139de01ad19bf80fac"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6fc3b72b8634dd14b9bebcb42d722b545a0e69e",
          "sha": "d6fc3b72b8634dd14b9bebcb42d722b545a0e69e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d6fc3b72b8634dd14b9bebcb42d722b545a0e69e"
        }
      ],
      "message": "[fuzz] v3 transactions and sigop-adjusted vsize\n\nEnsure we are checking sigop-adjusted virtual size by creating setups\nand packages where sigop cost is larger than bip141 vsize.\n\nCo-authored-by: Gregory Sanders <gsanders87@gmail.com>",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-01-18T14:48:37Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-11-27T16:13:33Z"
      },
      "sha": "f3d4916eacfbcef61bc4d460294657fae006d2aa"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11526233378,
      "node_id": "HRFPE_lADOABII58539HF9zwAAAAKvBF0i",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11526233378",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-18T14:49:24Z"
    },
    {
      "event": "commented",
      "id": 1898641197,
      "node_id": "IC_kwDOABII585xKvct",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1898641197",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-18T14:58:29Z",
      "updated_at": "2024-01-18T14:58:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the clarification @ariard, I think I understand your scenario better. But there's one point I don't understand: in step 6 (`Alice cannot over-pay in absolute fees to replace Mallory state due to \"max at stake\" 440k sats`), Alice doesn't want to replace Mallory's revoked commitment, she wants it to confirm to spend all the output to herself?\r\n\r\nIt's easy for Alice to make the revoked commitment confirm, she can use any output of that transaction to CPFP and she doesn't need to add any of her wallet inputs, she can just use the channel funds for that.\r\n\r\nAlice can then use a low feerate to spend all the HTLC outputs of the confirmed revoked commitment, because to get them back, Mallory would have to get her HTLC-x transaction confirmed (which costs fees to Mallory) and wait the `to_self_delay` to broadcast her 3rd-stage tx (at which point Alice would simply spend the output of the HTLC-x transaction to herself through the revocation path).\r\n\r\nSo the only issue I see here is that it may be uneconomical to sweep funds from a commitment transaction that has many small HTLC outputs, but that's a more general trade-off of lightning and is why node operators should tweak their `max_accepted_htlcs` accordingly?",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1898641197",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "mentioned",
      "id": 11526361206,
      "node_id": "MEE_lADOABII58539HF9zwAAAAKvBlB2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11526361206",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-18T14:58:29Z"
    },
    {
      "event": "subscribed",
      "id": 11526361230,
      "node_id": "SE_lADOABII58539HF9zwAAAAKvBlCO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11526361230",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-18T14:58:29Z"
    },
    {
      "event": "unlabeled",
      "id": 11527801775,
      "node_id": "UNLE_lADOABII58539HF9zwAAAAKvHEuv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11527801775",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-18T16:54:09Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1898859416,
      "node_id": "IC_kwDOABII585xLkuY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1898859416",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-18T16:54:20Z",
      "updated_at": "2024-01-18T17:10:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I may be missing something here, can you describe in more details how _anyone_ could turn them into large pinning txs? They do require signatures from _both_ participants, and one of them is going to be `SIGHASH_ALL`.\r\n\r\nThanks. Yes, that's a mistake on my part and you are correct. I hid my comment as \"outdated\" to reflect that.",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1898859416",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "commented",
      "id": 1898959237,
      "node_id": "IC_kwDOABII585xL9GF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1898959237",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-18T17:58:08Z",
      "updated_at": "2024-01-18T17:58:08Z",
      "author_association": "MEMBER",
      "body": "> It's easy for Alice to make the revoked commitment confirm, she can use any output of that transaction to CPFP and she doesn't need to add any of her wallet inputs, she can just use the channel funds for that.\r\n\r\nNo you can’t spend in-mempool htlc outputs 1 CSV post-anchor. Assuming no 1 CSV, yes in my scenario. However attacker can construct revoked or valid pinning state to have the 483 outputs as inbound HTLC to inflate. Alice no preimage to spend them. Only anchor output available and liquidity has to be brought from fee-bumping reserves to replace max at stake 440k sats. Yes, you can honest blind CPFP at max at stake and no more pinning issues. If a) you maintain that level of fee-bumping reserves and b) you have a wormholes of fee griefing issues. Fee griefing no good if counterparties are miners or concurrent LSPs that wish to push you out of market. ",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1898959237",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-18T18:11:51Z",
      "updated_at": "2024-01-18T18:11:51Z",
      "source": {
        "issue": {
          "id": 2070227517,
          "node_id": "I_kwDOBGUq2857ZSo9",
          "url": "https://api.github.com/repos/lightning/bolts/issues/1127",
          "repository_url": "https://api.github.com/repos/lightning/bolts",
          "labels_url": "https://api.github.com/repos/lightning/bolts/issues/1127/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/lightning/bolts/issues/1127/comments",
          "events_url": "https://api.github.com/repos/lightning/bolts/issues/1127/events",
          "html_url": "https://github.com/lightning/bolts/issues/1127",
          "number": 1127,
          "state": "open",
          "state_reason": null,
          "title": "Lightning Specification Meeting 2024/01/15",
          "body": "The meeting will take place on Monday 2024/01/15 at 7pm UTC (5:30am Adelaide time) on Libera Chat IRC [#lightning-dev](irc://irc.libera.chat/lightning-dev). It is open to the public.\r\n\r\nA video link is available for higher bandwidth communication: https://meet.jit.si/Lightning-Spec-Meeting\r\n\r\n## Special topics\r\n\r\n- [x] Mailing list host ending support in 2023, did that really happen?\r\n- [x] [v3 transactions and ephemeral anchors](https://delvingbitcoin.org/t/v3-transaction-policy-for-anti-pinning/340/24) support in lightning\r\n\r\n## Recently Updated Proposals / Seeking Review\r\n\r\nThis section contains changes that have been opened or updated recently and need feedback from the meeting participants.\r\n\r\n- [ ] ~Dual funding #851~\r\n- [x] Simplified mutual close #1096 \r\n- [x] Trampoline routing #829 and #836 (2024 is going to be the year of trampoline :tada:)\r\n- [ ] ~Liquidity ads #878~\r\n- [ ] ~Quiescence #869~\r\n- [ ] ~Offers #798~\r\n- [ ] ~Taproot #995~\r\n- [ ] ~Taproot gossip #1059~\r\n- [ ] ~Attributable errors #1044~\r\n- [ ] ~Channel jamming #1043 #1071~\r\n- [ ] ~Splicing #863 vs Dynamic Commitments #1117 vs Upgrade on reestablish #868~\r\n- [ ] ~Peer storage backup #881 or #1110~\r\n- [ ] ~Clarify `channel_reestablish` requirements #1049 or #1051~\r\n\r\n## Stale Proposals\r\n\r\nThis section contains pending changes that may not need feedback from the meeting participants, unless someone explicitly asks for it during the meeting. These changes are usually waiting for implementation work to happen to drive more feedback.\r\n\r\n- [ ] ~Inbound fees https://github.com/lightning/blips/pull/18 and https://github.com/lightning/blips/pull/22~\r\n\r\n## Waiting for interop\r\n\r\nThis section contains changes that have been conceptually ACKed and are waiting for at least two implementations to fully interoperate.\r\nThey most likely don't need to be covered during the meeting, unless someone asks for updates.\r\n\r\n- [ ] ~Spec clean-up #1092~\r\n- [ ] ~Don't force close until error is received after `channel_reestablish` #934~\r\n\r\n## Long Term Updates\r\n\r\nThis section contains long-term changes that need review, but require a substantial implementation effort.\r\n\r\n- [ ] ~Simplified commitment #867~\r\n- [ ] ~Hold htlcs before forwarding #989~\r\n- [ ] ~lnprototest (https://github.com/rustyrussell/lnprototest)~",
          "user": {
            "login": "t-bast",
            "id": 31281497,
            "node_id": "MDQ6VXNlcjMxMjgxNDk3",
            "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/t-bast",
            "html_url": "https://github.com/t-bast",
            "followers_url": "https://api.github.com/users/t-bast/followers",
            "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
            "organizations_url": "https://api.github.com/users/t-bast/orgs",
            "repos_url": "https://api.github.com/users/t-bast/repos",
            "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/t-bast/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "COLLABORATOR",
          "locked": false,
          "comments": 4,
          "created_at": "2024-01-08T11:09:58Z",
          "updated_at": "2024-01-18T18:11:51Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1900036446,
      "node_id": "IC_kwDOABII585xQEFe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1900036446",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-19T09:17:17Z",
      "updated_at": "2024-01-19T09:17:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "> No you can’t spend in-mempool htlc outputs 1 CSV post-anchor. Assuming no 1 CSV, yes in my scenario.\r\n\r\nYes, I'm analyzing this with the changes related to v3 in mind, in which we will remove the `CSV 1`.\r\n\r\n> However attacker can construct revoked or valid pinning state to have the 483 outputs as inbound HTLC to inflate. Alice no preimage to spend them. \r\n\r\nBut Alice doesn't need the preimage to spend them, this is a revoked commitment, she spends through the revocation path. Unless you're thinking of a different scenario this time? If that's the case, please elaborate the scenario precisely, otherwise we can't really assess whether it's a real issue or not...",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1900036446",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "commented",
      "id": 1900781426,
      "node_id": "IC_kwDOABII585xS59y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1900781426",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-19T17:08:49Z",
      "updated_at": "2024-01-19T17:08:49Z",
      "author_association": "MEMBER",
      "body": "CI is green btw :green_circle: ",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1900781426",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948"
    },
    {
      "event": "reviewed",
      "id": 1835540987,
      "node_id": "PRR_kwDOABII585taCH7",
      "url": null,
      "actor": null,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I find myself continually forgetting what the v3 rules are (particularly vs the ephemeral anchor rules, package relay rules, cluster mempool rules, or potential v4+ rules). It would be nice to have a really concise reference, that leaves the rationales/comparisons to an appendix or something. I think when stripped of historical baggage, it only needs to be:\r\n\r\nunconfirmed v3 transactions:\r\n * are always subject to rbf rules\r\n * can have at most one unconfirmed v3 ancestor or one unconfirmed v3 descendent, but not both (may have many confirmed ancestors, may not have any uncofirmed v2 ancestors or descendents)\r\n * a v3 descendent is limited to 1000vb\r\n * if the tx has a descendent, only the combination is subject to mempool minfee rules\r\n\r\n(which is only really 4 rules, rather than 7, since it combines 2/3/4/6 into a single rule)",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#pullrequestreview-1835540987",
      "submitted_at": "2024-01-22T02:25:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
    },
    {
      "event": "reviewed",
      "id": 1835622004,
      "node_id": "PRR_kwDOABII585taV50",
      "url": null,
      "actor": null,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#pullrequestreview-1835622004",
      "submitted_at": "2024-01-22T04:26:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1406359885",
      "pull_request_review_id": 1750753834,
      "id": 1406359885,
      "node_id": "PRRC_kwDOABII585T01lN",
      "diff_hunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+// V3 only allows 1 parent and 1 child.\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+/** Maximum number of transactions including a V3 tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{2};\n+\n+/** Maximum weight of a tx which spends from an unconfirmed V3 transaction. */\n+static constexpr int64_t V3_CHILD_MAX_WEIGHT{4000};\n+// Since these limits are within the default ancestor/descendant limits, there is no need to\n+// additionally check ancestor/descendant limits for V3 transactions.\n+static_assert(V3_CHILD_MAX_WEIGHT + MAX_STANDARD_TX_WEIGHT <= DEFAULT_ANCESTOR_SIZE_LIMIT_KVB * WITNESS_SCALE_FACTOR * 1000);\n+static_assert(V3_CHILD_MAX_WEIGHT + MAX_STANDARD_TX_WEIGHT <= DEFAULT_DESCENDANT_SIZE_LIMIT_KVB * WITNESS_SCALE_FACTOR * 1000);\n+\n+/** Any two unconfirmed transactions with a dependency relationship must either both be V3 or both\n+ * non-V3. Check this rule for any list of unconfirmed transactions.\n+ * @returns a tuple (parent wtxid, child wtxid, bool) where one is V3 but the other is not, if at\n+ * least one such pair exists. The bool represents whether the child is v3 or not. There may be\n+ * other such pairs that are not returned.\n+ * Otherwise std::nullopt.\n+ */\n+std::optional<std::tuple<uint256, uint256, bool>> CheckV3Inheritance(const Package& package);",
      "path": "src/policy/v3_policy.h",
      "position": null,
      "original_position": 39,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "18406ecbd5080864154c6a2fc756e6b96ff4caf0",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Use `Wtxid`?",
      "created_at": "2023-11-27T15:41:52Z",
      "updated_at": "2023-11-27T15:52:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1406359885",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1406359885"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1406361767",
      "pull_request_review_id": 1750753834,
      "id": 1406361767,
      "node_id": "PRRC_kwDOABII585T02Cn",
      "diff_hunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+// V3 only allows 1 parent and 1 child.\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+/** Maximum number of transactions including a V3 tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{2};\n+\n+/** Maximum weight of a tx which spends from an unconfirmed V3 transaction. */\n+static constexpr int64_t V3_CHILD_MAX_WEIGHT{4000};\n+// Since these limits are within the default ancestor/descendant limits, there is no need to\n+// additionally check ancestor/descendant limits for V3 transactions.\n+static_assert(V3_CHILD_MAX_WEIGHT + MAX_STANDARD_TX_WEIGHT <= DEFAULT_ANCESTOR_SIZE_LIMIT_KVB * WITNESS_SCALE_FACTOR * 1000);\n+static_assert(V3_CHILD_MAX_WEIGHT + MAX_STANDARD_TX_WEIGHT <= DEFAULT_DESCENDANT_SIZE_LIMIT_KVB * WITNESS_SCALE_FACTOR * 1000);\n+\n+/** Any two unconfirmed transactions with a dependency relationship must either both be V3 or both\n+ * non-V3. Check this rule for any list of unconfirmed transactions.\n+ * @returns a tuple (parent wtxid, child wtxid, bool) where one is V3 but the other is not, if at\n+ * least one such pair exists. The bool represents whether the child is v3 or not. There may be\n+ * other such pairs that are not returned.\n+ * Otherwise std::nullopt.\n+ */\n+std::optional<std::tuple<uint256, uint256, bool>> CheckV3Inheritance(const Package& package);\n+\n+/** Every transaction that spends an unconfirmed V3 transaction must also be V3. */\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors);\n+\n+/** The following rules apply to V3 transactions:\n+ * 1. Tx with all of its ancestors (including non-nVersion=3) must be within V3_ANCESTOR_SIZE_LIMIT_KVB.\n+ * 2. Tx with all of its ancestors must be within V3_ANCESTOR_LIMIT.\n+ *\n+ * If a V3 tx has V3 ancestors,\n+ * 1. Each V3 ancestor and its descendants must be within V3_DESCENDANT_LIMIT.\n+ * 2. The tx must be within V3_CHILD_MAX_SIZE.\n+ *\n+ * @returns an error string if any V3 rule was violated, otherwise std::nullopt.\n+ */\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<uint256>& direct_conflicts);",
      "path": "src/policy/v3_policy.h",
      "position": null,
      "original_position": 57,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "18406ecbd5080864154c6a2fc756e6b96ff4caf0",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Are these txids/wtxids?",
      "created_at": "2023-11-27T15:42:53Z",
      "updated_at": "2023-11-27T15:52:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1406361767",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1406361767"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1406442920",
      "pull_request_review_id": 1750885461,
      "id": 1406442920,
      "node_id": "PRRC_kwDOABII585T1J2o",
      "diff_hunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+// V3 only allows 1 parent and 1 child.\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+/** Maximum number of transactions including a V3 tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{2};\n+\n+/** Maximum weight of a tx which spends from an unconfirmed V3 transaction. */\n+static constexpr int64_t V3_CHILD_MAX_WEIGHT{4000};\n+// Since these limits are within the default ancestor/descendant limits, there is no need to\n+// additionally check ancestor/descendant limits for V3 transactions.\n+static_assert(V3_CHILD_MAX_WEIGHT + MAX_STANDARD_TX_WEIGHT <= DEFAULT_ANCESTOR_SIZE_LIMIT_KVB * WITNESS_SCALE_FACTOR * 1000);\n+static_assert(V3_CHILD_MAX_WEIGHT + MAX_STANDARD_TX_WEIGHT <= DEFAULT_DESCENDANT_SIZE_LIMIT_KVB * WITNESS_SCALE_FACTOR * 1000);\n+\n+/** Any two unconfirmed transactions with a dependency relationship must either both be V3 or both\n+ * non-V3. Check this rule for any list of unconfirmed transactions.\n+ * @returns a tuple (parent wtxid, child wtxid, bool) where one is V3 but the other is not, if at\n+ * least one such pair exists. The bool represents whether the child is v3 or not. There may be\n+ * other such pairs that are not returned.\n+ * Otherwise std::nullopt.\n+ */\n+std::optional<std::tuple<uint256, uint256, bool>> CheckV3Inheritance(const Package& package);\n+\n+/** Every transaction that spends an unconfirmed V3 transaction must also be V3. */\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors);\n+\n+/** The following rules apply to V3 transactions:\n+ * 1. Tx with all of its ancestors (including non-nVersion=3) must be within V3_ANCESTOR_SIZE_LIMIT_KVB.\n+ * 2. Tx with all of its ancestors must be within V3_ANCESTOR_LIMIT.\n+ *\n+ * If a V3 tx has V3 ancestors,\n+ * 1. Each V3 ancestor and its descendants must be within V3_DESCENDANT_LIMIT.\n+ * 2. The tx must be within V3_CHILD_MAX_SIZE.\n+ *\n+ * @returns an error string if any V3 rule was violated, otherwise std::nullopt.\n+ */\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<uint256>& direct_conflicts);",
      "path": "src/policy/v3_policy.h",
      "position": null,
      "original_position": 57,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "18406ecbd5080864154c6a2fc756e6b96ff4caf0",
      "in_reply_to_id": 1406361767,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed to specify `Txid`. I assume we want a \"update as we touch these lines\" kind of thing so I added a preceding commit to make `m_conflicts` a `std::set<Txid>` instead of uint256, and updated other places as necessary to compile.",
      "created_at": "2023-11-27T16:38:28Z",
      "updated_at": "2023-11-27T16:38:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1406442920",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1406442920"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1406442992",
      "pull_request_review_id": 1750885588,
      "id": 1406442992,
      "node_id": "PRRC_kwDOABII585T1J3w",
      "diff_hunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+// V3 only allows 1 parent and 1 child.\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+/** Maximum number of transactions including a V3 tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{2};\n+\n+/** Maximum weight of a tx which spends from an unconfirmed V3 transaction. */\n+static constexpr int64_t V3_CHILD_MAX_WEIGHT{4000};\n+// Since these limits are within the default ancestor/descendant limits, there is no need to\n+// additionally check ancestor/descendant limits for V3 transactions.\n+static_assert(V3_CHILD_MAX_WEIGHT + MAX_STANDARD_TX_WEIGHT <= DEFAULT_ANCESTOR_SIZE_LIMIT_KVB * WITNESS_SCALE_FACTOR * 1000);\n+static_assert(V3_CHILD_MAX_WEIGHT + MAX_STANDARD_TX_WEIGHT <= DEFAULT_DESCENDANT_SIZE_LIMIT_KVB * WITNESS_SCALE_FACTOR * 1000);\n+\n+/** Any two unconfirmed transactions with a dependency relationship must either both be V3 or both\n+ * non-V3. Check this rule for any list of unconfirmed transactions.\n+ * @returns a tuple (parent wtxid, child wtxid, bool) where one is V3 but the other is not, if at\n+ * least one such pair exists. The bool represents whether the child is v3 or not. There may be\n+ * other such pairs that are not returned.\n+ * Otherwise std::nullopt.\n+ */\n+std::optional<std::tuple<uint256, uint256, bool>> CheckV3Inheritance(const Package& package);",
      "path": "src/policy/v3_policy.h",
      "position": null,
      "original_position": 39,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "18406ecbd5080864154c6a2fc756e6b96ff4caf0",
      "in_reply_to_id": 1406359885,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Updated this file to use `Txid`/`Wtxid` instead of uint256 everywhere.",
      "created_at": "2023-11-27T16:38:31Z",
      "updated_at": "2023-11-27T16:38:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1406442992",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1406442992"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1408171165",
      "pull_request_review_id": 1753556814,
      "id": 1408171165,
      "node_id": "PRRC_kwDOABII585T7vyd",
      "diff_hunk": "@@ -301,5 +302,21 @@ FUZZ_TARGET(tx_package_eval, .init = initialize_tx_pool)\n     UnregisterSharedValidationInterface(outpoints_updater);\n \n     WITH_LOCK(::cs_main, tx_pool.check(chainstate.CoinsTip(), chainstate.m_chain.Height() + 1));\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {\n+        const auto& entry = *Assert(tx_pool.GetEntry(tx_info.tx->GetHash()));\n+        if (tx_info.tx->nVersion == 3) {\n+            // Check that special v3 ancestor/descendant limits and rules are always respected\n+            Assert(entry.GetCountWithDescendants() <= V3_DESCENDANT_LIMIT);\n+            Assert(entry.GetCountWithAncestors() <= V3_ANCESTOR_LIMIT);\n+            if (entry.GetCountWithAncestors() > 1) {\n+                Assert(entry.GetTxWeight() <= V3_CHILD_MAX_WEIGHT);\n+            }\n+        }\n+        // Transactions with fees of 0 or lower should be proactively trimmed.\n+        if (tx_pool.m_min_relay_feerate.GetFeePerK() > 0) {\n+            Assert(entry.GetModFeesWithDescendants() > 0);",
      "path": "src/test/fuzz/package_eval.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "d79f36b1ecb2f26e3dd199e2bf1a0346627994ba",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If `bypass_limits` is set for a single submission, this can fail since no trimming is done after that.",
      "created_at": "2023-11-28T18:02:18Z",
      "updated_at": "2023-11-28T18:02:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1408171165",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1408171165"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 319,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1408277869",
      "pull_request_review_id": 1753714068,
      "id": 1408277869,
      "node_id": "PRRC_kwDOABII585T8J1t",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<Txid>& direct_conflicts)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx %s would have too many ancestors\", ptx->GetWitnessHash().ToString());\n+    }\n+    if (ancestors.empty()) {\n+        return std::nullopt;\n+    } else {\n+        const auto tx_weight{GetTransactionWeight(*ptx)};\n+        // If this transaction spends V3 parents, it cannot be too large.\n+        if (tx_weight > V3_CHILD_MAX_WEIGHT) {",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "8ae62c58cf53792b4fb87d6eec4d6f224e7c2571",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We need to limit the sigops-adjusted size of the child, since that effects the effectiveness of a potential pin. This difference can be up to 20x for really strange scripts.\r\n\r\nSimplest but perhaps controversial would be to disallow v3 transactions to have sigops-adjusted size different than bip141 vsize, Other solution would be to directly feed in the adjusted vsize and check against that instead of weight.",
      "created_at": "2023-11-28T19:19:45Z",
      "updated_at": "2023-11-28T19:19:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1408277869",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1408277869"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1408287424",
      "pull_request_review_id": 1753729645,
      "id": 1408287424,
      "node_id": "PRRC_kwDOABII585T8MLA",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<Txid>& direct_conflicts)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx %s would have too many ancestors\", ptx->GetWitnessHash().ToString());\n+    }\n+    if (ancestors.empty()) {\n+        return std::nullopt;\n+    } else {\n+        const auto tx_weight{GetTransactionWeight(*ptx)};\n+        // If this transaction spends V3 parents, it cannot be too large.\n+        if (tx_weight > V3_CHILD_MAX_WEIGHT) {",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "8ae62c58cf53792b4fb87d6eec4d6f224e7c2571",
      "in_reply_to_id": 1408277869,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes definitely\r\n\r\n> disallow v3 transactions to have sigops-adjusted size different than bip141 vsize\r\n\r\nI actually think this is more complicated than adding a sigop limit, since we'd need to define what sigop-adjusted size is. Or just word it as \"number of sigops times this constant cannot be larger than the weight\" I guess.",
      "created_at": "2023-11-28T19:29:24Z",
      "updated_at": "2023-11-28T19:29:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1408287424",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1408287424"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1408289426",
      "pull_request_review_id": 1753732264,
      "id": 1408289426,
      "node_id": "PRRC_kwDOABII585T8MqS",
      "diff_hunk": "@@ -301,5 +302,21 @@ FUZZ_TARGET(tx_package_eval, .init = initialize_tx_pool)\n     UnregisterSharedValidationInterface(outpoints_updater);\n \n     WITH_LOCK(::cs_main, tx_pool.check(chainstate.CoinsTip(), chainstate.m_chain.Height() + 1));\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {\n+        const auto& entry = *Assert(tx_pool.GetEntry(tx_info.tx->GetHash()));\n+        if (tx_info.tx->nVersion == 3) {\n+            // Check that special v3 ancestor/descendant limits and rules are always respected\n+            Assert(entry.GetCountWithDescendants() <= V3_DESCENDANT_LIMIT);\n+            Assert(entry.GetCountWithAncestors() <= V3_ANCESTOR_LIMIT);\n+            if (entry.GetCountWithAncestors() > 1) {\n+                Assert(entry.GetTxWeight() <= V3_CHILD_MAX_WEIGHT);\n+            }\n+        }\n+        // Transactions with fees of 0 or lower should be proactively trimmed.\n+        if (tx_pool.m_min_relay_feerate.GetFeePerK() > 0) {\n+            Assert(entry.GetModFeesWithDescendants() > 0);",
      "path": "src/test/fuzz/package_eval.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "d79f36b1ecb2f26e3dd199e2bf1a0346627994ba",
      "in_reply_to_id": 1408171165,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah true. I forgot that we do an atmp here too. I don't think we should do `bypass_limits` though - couldn't that cause the result to deviate from the package eval result?",
      "created_at": "2023-11-28T19:31:03Z",
      "updated_at": "2023-11-28T19:31:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1408289426",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1408289426"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 319,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1408290515",
      "pull_request_review_id": 1753734001,
      "id": 1408290515,
      "node_id": "PRRC_kwDOABII585T8M7T",
      "diff_hunk": "@@ -301,5 +302,21 @@ FUZZ_TARGET(tx_package_eval, .init = initialize_tx_pool)\n     UnregisterSharedValidationInterface(outpoints_updater);\n \n     WITH_LOCK(::cs_main, tx_pool.check(chainstate.CoinsTip(), chainstate.m_chain.Height() + 1));\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {\n+        const auto& entry = *Assert(tx_pool.GetEntry(tx_info.tx->GetHash()));\n+        if (tx_info.tx->nVersion == 3) {\n+            // Check that special v3 ancestor/descendant limits and rules are always respected\n+            Assert(entry.GetCountWithDescendants() <= V3_DESCENDANT_LIMIT);\n+            Assert(entry.GetCountWithAncestors() <= V3_ANCESTOR_LIMIT);\n+            if (entry.GetCountWithAncestors() > 1) {\n+                Assert(entry.GetTxWeight() <= V3_CHILD_MAX_WEIGHT);\n+            }\n+        }\n+        // Transactions with fees of 0 or lower should be proactively trimmed.\n+        if (tx_pool.m_min_relay_feerate.GetFeePerK() > 0) {\n+            Assert(entry.GetModFeesWithDescendants() > 0);",
      "path": "src/test/fuzz/package_eval.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "d79f36b1ecb2f26e3dd199e2bf1a0346627994ba",
      "in_reply_to_id": 1408171165,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yeah I don't think we need to ever",
      "created_at": "2023-11-28T19:32:13Z",
      "updated_at": "2023-11-28T19:32:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1408290515",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1408290515"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 319,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409129842",
      "pull_request_review_id": 1755016347,
      "id": 1409129842,
      "node_id": "PRRC_kwDOABII585T_Z1y",
      "diff_hunk": "@@ -301,5 +302,21 @@ FUZZ_TARGET(tx_package_eval, .init = initialize_tx_pool)\n     UnregisterSharedValidationInterface(outpoints_updater);\n \n     WITH_LOCK(::cs_main, tx_pool.check(chainstate.CoinsTip(), chainstate.m_chain.Height() + 1));\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {\n+        const auto& entry = *Assert(tx_pool.GetEntry(tx_info.tx->GetHash()));\n+        if (tx_info.tx->nVersion == 3) {\n+            // Check that special v3 ancestor/descendant limits and rules are always respected\n+            Assert(entry.GetCountWithDescendants() <= V3_DESCENDANT_LIMIT);\n+            Assert(entry.GetCountWithAncestors() <= V3_ANCESTOR_LIMIT);\n+            if (entry.GetCountWithAncestors() > 1) {\n+                Assert(entry.GetTxWeight() <= V3_CHILD_MAX_WEIGHT);\n+            }\n+        }\n+        // Transactions with fees of 0 or lower should be proactively trimmed.\n+        if (tx_pool.m_min_relay_feerate.GetFeePerK() > 0) {\n+            Assert(entry.GetModFeesWithDescendants() > 0);",
      "path": "src/test/fuzz/package_eval.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "d79f36b1ecb2f26e3dd199e2bf1a0346627994ba",
      "in_reply_to_id": 1408171165,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Made bypass_limits always false",
      "created_at": "2023-11-29T11:12:39Z",
      "updated_at": "2023-11-29T11:12:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409129842",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409129842"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 319,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409130981",
      "pull_request_review_id": 1755018211,
      "id": 1409130981,
      "node_id": "PRRC_kwDOABII585T_aHl",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<Txid>& direct_conflicts)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx %s would have too many ancestors\", ptx->GetWitnessHash().ToString());\n+    }\n+    if (ancestors.empty()) {\n+        return std::nullopt;\n+    } else {\n+        const auto tx_weight{GetTransactionWeight(*ptx)};\n+        // If this transaction spends V3 parents, it cannot be too large.\n+        if (tx_weight > V3_CHILD_MAX_WEIGHT) {",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "8ae62c58cf53792b4fb87d6eec4d6f224e7c2571",
      "in_reply_to_id": 1408277869,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a 50-sigop limit, with a p2sh test.",
      "created_at": "2023-11-29T11:13:40Z",
      "updated_at": "2023-11-29T11:13:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409130981",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409130981"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409750171",
      "pull_request_review_id": 1756015917,
      "id": 1409750171,
      "node_id": "PRRC_kwDOABII585UBxSb",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<Txid>& direct_conflicts)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx %s would have too many ancestors\", ptx->GetWitnessHash().ToString());\n+    }\n+    if (ancestors.empty()) {\n+        return std::nullopt;\n+    } else {\n+        const auto tx_weight{GetTransactionWeight(*ptx)};\n+        // If this transaction spends V3 parents, it cannot be too large.\n+        if (tx_weight > V3_CHILD_MAX_WEIGHT) {",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "8ae62c58cf53792b4fb87d6eec4d6f224e7c2571",
      "in_reply_to_id": 1408277869,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What's the issue with using the transaction's vsize, which is already the value used everywhere else in the mempool?  It seems like that is simpler than introducing a second limit, and exactly captures how we apply the RBF rules anyway.",
      "created_at": "2023-11-29T19:07:43Z",
      "updated_at": "2023-11-29T19:07:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409750171",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409750171"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409753009",
      "pull_request_review_id": 1755493640,
      "id": 1409753009,
      "node_id": "PRRC_kwDOABII585UBx-x",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<Txid>& direct_conflicts)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx %s would have too many ancestors\", ptx->GetWitnessHash().ToString());\n+    }\n+    if (ancestors.empty()) {\n+        return std::nullopt;\n+    } else {\n+        const auto tx_weight{GetTransactionWeight(*ptx)};\n+        // If this transaction spends V3 parents, it cannot be too large.\n+        if (tx_weight > V3_CHILD_MAX_WEIGHT) {",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "8ae62c58cf53792b4fb87d6eec4d6f224e7c2571",
      "in_reply_to_id": 1408277869,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, I think the thing we're actually trying to protect against, sigops-adjusted vsize, is what should be used.",
      "created_at": "2023-11-29T19:10:19Z",
      "updated_at": "2023-11-29T19:10:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409753009",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409753009"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409761071",
      "pull_request_review_id": 1756038415,
      "id": 1409761071,
      "node_id": "PRRC_kwDOABII585UBz8v",
      "diff_hunk": "@@ -0,0 +1,111 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<Txid>& direct_conflicts,\n+                                        int64_t sigops)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx %s would have too many ancestors\", ptx->GetWitnessHash().ToString());\n+    }\n+    if (ancestors.empty()) {\n+        return std::nullopt;\n+    } else {",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 82,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "fc62757320f216a8adf45726eeca121e13d6c39e",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "you can remove this level of nesting since the 3 checks above all end early",
      "created_at": "2023-11-29T19:17:33Z",
      "updated_at": "2023-11-29T20:10:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409761071",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409761071"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409765502",
      "pull_request_review_id": 1756044862,
      "id": 1409765502,
      "node_id": "PRRC_kwDOABII585UB1B-",
      "diff_hunk": "@@ -0,0 +1,111 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<Txid>& direct_conflicts,\n+                                        int64_t sigops)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx %s would have too many ancestors\", ptx->GetWitnessHash().ToString());\n+    }\n+    if (ancestors.empty()) {\n+        return std::nullopt;\n+    } else {\n+        const auto tx_weight{GetTransactionWeight(*ptx)};\n+        // If this transaction spends V3 parents, it cannot be too large.\n+        if (tx_weight > V3_CHILD_MAX_WEIGHT) {\n+            return strprintf(\"v3 child tx is too big: %u > %u weight units\", tx_weight, V3_CHILD_MAX_WEIGHT);\n+        }\n+        if (sigops > V3_CHILD_MAX_SIGOPS) {\n+            return strprintf(\"v3 child tx has too many sigops: %u > %u sigops\", sigops, V3_CHILD_MAX_SIGOPS);\n+        }\n+        // Any ancestor of a V3 transaction must also be V3.\n+        const auto& parent_entry = *ancestors.begin();",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 92,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "fc62757320f216a8adf45726eeca121e13d6c39e",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This logic only works if `V3_ANCESTOR_LIMIT <= 2`, I think?  Having a constant would imply that you could consider changing the value, but if the logic breaks with higher values then I think we should `static_assert` that the constant is in the range we expect.",
      "created_at": "2023-11-29T19:21:48Z",
      "updated_at": "2023-11-29T19:21:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409765502",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409765502"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409768985",
      "pull_request_review_id": 1756038415,
      "id": 1409768985,
      "node_id": "PRRC_kwDOABII585UB14Z",
      "diff_hunk": "@@ -0,0 +1,111 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<Txid>& direct_conflicts,\n+                                        int64_t sigops)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx %s would have too many ancestors\", ptx->GetWitnessHash().ToString());\n+    }\n+    if (ancestors.empty()) {\n+        return std::nullopt;",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 81,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "fc62757320f216a8adf45726eeca121e13d6c39e",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```Suggestion\r\n        // This is a v3 parent; no additional constraints\r\n        return std::nullopt;\r\n```",
      "created_at": "2023-11-29T19:25:25Z",
      "updated_at": "2023-11-29T20:10:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409768985",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409768985"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409775820",
      "pull_request_review_id": 1756063055,
      "id": 1409775820,
      "node_id": "PRRC_kwDOABII585UB3jM",
      "diff_hunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+// V3 only allows 1 parent and 1 child.\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+/** Maximum number of transactions including a V3 tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{2};\n+\n+/** Maximum weight of a tx which spends from an unconfirmed v3 transaction. */\n+static constexpr int64_t V3_CHILD_MAX_WEIGHT{4000};\n+// Since these limits are within the default ancestor/descendant limits, there is no need to\n+// additionally check ancestor/descendant limits for V3 transactions.\n+static_assert(V3_CHILD_MAX_WEIGHT + MAX_STANDARD_TX_WEIGHT <= DEFAULT_ANCESTOR_SIZE_LIMIT_KVB * WITNESS_SCALE_FACTOR * 1000);\n+static_assert(V3_CHILD_MAX_WEIGHT + MAX_STANDARD_TX_WEIGHT <= DEFAULT_DESCENDANT_SIZE_LIMIT_KVB * WITNESS_SCALE_FACTOR * 1000);\n+/** Maximum sigops cost of a tx which spends from an unconfirmed v3 transaction. */\n+static constexpr int64_t V3_CHILD_MAX_SIGOPS{50};\n+// The maximum weight and sigops cost are the equivalent limit in virtual bytes (when calculated using default -bytespersigop).\n+static_assert(V3_CHILD_MAX_SIGOPS * DEFAULT_BYTES_PER_SIGOP == V3_CHILD_MAX_WEIGHT / WITNESS_SCALE_FACTOR);\n+\n+/** Any two unconfirmed transactions with a dependency relationship must either both be V3 or both\n+ * non-V3. Check this rule for any list of unconfirmed transactions.\n+ * @returns a tuple (parent wtxid, child wtxid, bool) where one is V3 but the other is not, if at\n+ * least one such pair exists. The bool represents whether the child is v3 or not. There may be\n+ * other such pairs that are not returned.\n+ * Otherwise std::nullopt.\n+ */\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package);\n+\n+/** Every transaction that spends an unconfirmed V3 transaction must also be V3. */\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors);\n+\n+/** The following rules apply to V3 transactions:\n+ * 1. Tx with all of its ancestors (including non-nVersion=3) must be within V3_ANCESTOR_SIZE_LIMIT_KVB.",
      "path": "src/policy/v3_policy.h",
      "position": null,
      "original_position": 50,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "fc62757320f216a8adf45726eeca121e13d6c39e",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think a v3 transaction is not permitted to have non-v3 unconfirmed ancestors -- so this comment seems confusing?",
      "created_at": "2023-11-29T19:31:59Z",
      "updated_at": "2023-11-29T19:32:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409775820",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409775820"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409812453",
      "pull_request_review_id": 1756128156,
      "id": 1409812453,
      "node_id": "PRRC_kwDOABII585UCAfl",
      "diff_hunk": "@@ -372,11 +375,16 @@ void Chainstate::MaybeUpdateMempoolForReorg(\n             }\n         }\n         // Transaction is still valid and cached LockPoints are updated.\n+        auto ancestors{m_mempool->AssumeCalculateMemPoolAncestors(func, *it, CTxMemPool::Limits::NoLimits(),",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "22ce995d0b4fbf697596738503a429de5a057c0e",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "1) This strikes me as a very expensive operation to perform in order to update the mempool for a reorg.  I think we could probably do better by only calculating ancestors or descendants for transactions that are themselves v3, if we decide we need to enforce the v3 rules after a reorg.\r\n\r\n2) With the logic as written, if a v3 parent-child pair (A, B) were to be reorged out and added back to the mempool, and A has some other spend C already in the mempool, then when `ApplyV3Rules()` is invoked on B, it would be selected for removal.  This in turn would prevent A from being mined, if we assume that B's feerate was the reason it was mined in the first place?  This strikes me as unfortunate.\r\n\r\nInstead, I'd suggest that we not bother enforcing the v3 rules on a reorg.  That seems safer than potentially evicting the fee-paying transaction, less CPU work (so reorgs won't be further slowed down by additional processing), and shouldn't materially affect pinning (if miners are reorging out your transactions, trying to minimize RBF pinning with v3 policy isn't really going to help you!).",
      "created_at": "2023-11-29T20:09:41Z",
      "updated_at": "2023-11-29T20:09:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409812453",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409812453"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 378,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409842026",
      "pull_request_review_id": 1756174839,
      "id": 1409842026,
      "node_id": "PRRC_kwDOABII585UCHtq",
      "diff_hunk": "@@ -0,0 +1,111 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,",
      "path": "src/policy/v3_policy.cpp",
      "position": 134,
      "original_position": 69,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "fc62757320f216a8adf45726eeca121e13d6c39e",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This only seems to run useful checks on v3 children when the ancestor is already in the mempool, not when the ancestor is something new in a package. I suspect we want a parallel `ApplyV3Rules` that looks at the packages only, just like `CheckV3Inheritance`\r\n\r\nAs-is you can get large children and muiltiple ancestors in currently.\r\n\r\n(also, mempool_v3_accept.py needs tests covering this case for each situation)\r\n\r\n```\r\ndiff --git a/test/functional/mempool_accept_v3.py b/test/functional/mempool_accept_v3.py\r\nindex 5b72cca6b9..3a4b822a90 100755\r\n--- a/test/functional/mempool_accept_v3.py\r\n+++ b/test/functional/mempool_accept_v3.py\r\n@@ -22,57 +22,73 @@ def cleanup(func):\r\n         try:\r\n             func(self)\r\n         finally:\r\n             # Clear mempool\r\n             self.generate(self.nodes[0], 1)\r\n             # Reset config options\r\n             self.restart_node(0)\r\n     return wrapper\r\n \r\n class MempoolAcceptV3(BitcoinTestFramework):\r\n     def set_test_params(self):\r\n         self.num_nodes = 1\r\n         self.setup_clean_chain = True\r\n \r\n     def check_mempool(self, txids):\r\n         \"\"\"Assert exact contents of the node's mempool (by txid).\"\"\"\r\n         mempool_contents = self.nodes[0].getrawmempool()\r\n         assert_equal(len(txids), len(mempool_contents))\r\n         assert all([txid in txids for txid in mempool_contents])\r\n \r\n     @cleanup\r\n     def test_v3_acceptance(self):\r\n         node = self.nodes[0]\r\n         self.log.info(\"Test a child of a V3 transaction cannot be more than 1000vB\")\r\n         self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\r\n-        tx_v3_parent_normal = self.wallet.send_self_transfer(from_node=node, version=3)\r\n-        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\r\n-        tx_v3_child_heavy = self.wallet.create_self_transfer(\r\n-            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\r\n+        tx_v3_parent_normal = self.wallet.create_self_transfer(\r\n+            fee_rate=0,\r\n+            target_weight=4004,\r\n+            version=3\r\n+        )\r\n+        tx_v3_parent_2_normal = self.wallet.create_self_transfer(\r\n+            fee_rate=0,\r\n             target_weight=4004,\r\n             version=3\r\n         )\r\n+        tx_v3_child_heavy = self.wallet.create_self_transfer_multi(\r\n+            utxos_to_spend=[tx_v3_parent_normal[\"new_utxo\"], tx_v3_parent_2_normal[\"new_utxo\"]],\r\n+            target_weight=4004,\r\n+            fee_per_output=10000,\r\n+            version=3\r\n+        )\r\n+\r\n+        assert_equal(node.getrawmempool(), [])\r\n+        node.submitpackage([tx_v3_parent_normal[\"hex\"], tx_v3_parent_2_normal[\"hex\"], tx_v3_child_heavy[\"hex\"]])\r\n+        # !!! Oversize child and multiple (in-package) ancestors\r\n+        assert_equal(len(node.getrawmempool()), 3)\r\n+        assert False\r\n+\r\n```",
      "created_at": "2023-11-29T20:42:14Z",
      "updated_at": "2023-11-29T20:42:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409842026",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409842026"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 134,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1410643071",
      "pull_request_review_id": 1757418889,
      "id": 1410643071,
      "node_id": "PRRC_kwDOABII585UFLR_",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<Txid>& direct_conflicts)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx %s would have too many ancestors\", ptx->GetWitnessHash().ToString());\n+    }\n+    if (ancestors.empty()) {\n+        return std::nullopt;\n+    } else {\n+        const auto tx_weight{GetTransactionWeight(*ptx)};\n+        // If this transaction spends V3 parents, it cannot be too large.\n+        if (tx_weight > V3_CHILD_MAX_WEIGHT) {",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "8ae62c58cf53792b4fb87d6eec4d6f224e7c2571",
      "in_reply_to_id": 1408277869,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> What's the issue with using the transaction's vsize\r\n\r\nMy reasons were:\r\n- I wanted to specify a value of sigops that wouldn't depend on the node's `-bytespersigop` setting, and similarly didn't want it to be bypassable locally this way\r\n- People expressed confusion at what sigops-adjusted vsize was, so I wanted to make it clearer\r\n\r\nHappy to change though, if it's preferred?",
      "created_at": "2023-11-30T13:02:15Z",
      "updated_at": "2023-11-30T13:02:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1410643071",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1410643071"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1410653204",
      "pull_request_review_id": 1757435436,
      "id": 1410653204,
      "node_id": "PRRC_kwDOABII585UFNwU",
      "diff_hunk": "@@ -372,11 +375,16 @@ void Chainstate::MaybeUpdateMempoolForReorg(\n             }\n         }\n         // Transaction is still valid and cached LockPoints are updated.\n+        auto ancestors{m_mempool->AssumeCalculateMemPoolAncestors(func, *it, CTxMemPool::Limits::NoLimits(),",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "22ce995d0b4fbf697596738503a429de5a057c0e",
      "in_reply_to_id": 1409812453,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Instead, I'd suggest that we not bother enforcing the v3 rules on a reorg.\r\n\r\nI'm a fan of this approach. I want to spend a little bit of time thinking about what the possibilities are - I guess we can have some incorrect assumptions about transactions (resulting in e.g. incorect MinerScores) but it wouldn't be problematic if a reorg is the only way to get there, as you say.",
      "created_at": "2023-11-30T13:11:42Z",
      "updated_at": "2023-11-30T13:11:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1410653204",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1410653204"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 378,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1410793961",
      "pull_request_review_id": 1757665254,
      "id": 1410793961,
      "node_id": "PRRC_kwDOABII585UFwHp",
      "diff_hunk": "@@ -0,0 +1,111 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,",
      "path": "src/policy/v3_policy.cpp",
      "position": 134,
      "original_position": 69,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "fc62757320f216a8adf45726eeca121e13d6c39e",
      "in_reply_to_id": 1409842026,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "good news: this issue was discovered in less than a minute on a single core with the package fuzzer",
      "created_at": "2023-11-30T14:53:13Z",
      "updated_at": "2023-11-30T14:53:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1410793961",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1410793961"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 134,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1410816950",
      "pull_request_review_id": 1757702879,
      "id": 1410816950,
      "node_id": "PRRC_kwDOABII585UF1u2",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<Txid>& direct_conflicts)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx %s would have too many ancestors\", ptx->GetWitnessHash().ToString());\n+    }\n+    if (ancestors.empty()) {\n+        return std::nullopt;\n+    } else {\n+        const auto tx_weight{GetTransactionWeight(*ptx)};\n+        // If this transaction spends V3 parents, it cannot be too large.\n+        if (tx_weight > V3_CHILD_MAX_WEIGHT) {",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "8ae62c58cf53792b4fb87d6eec4d6f224e7c2571",
      "in_reply_to_id": 1408277869,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I just think that the point of the policy rule is not to enforce a particular sigops limit, but instead to ensure that the total fee required to replace a child transaction is only high if the child itself has a high feerate, which is defined as `fee / sigops_adjusted_vsize`.  So there doesn't seem to me to be a benefit to thinking about two different limits.",
      "created_at": "2023-11-30T15:09:24Z",
      "updated_at": "2023-11-30T15:09:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1410816950",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1410816950"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1412155613",
      "pull_request_review_id": 1759897764,
      "id": 1412155613,
      "node_id": "PRRC_kwDOABII585UK8jd",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<Txid>& direct_conflicts)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx %s would have too many ancestors\", ptx->GetWitnessHash().ToString());\n+    }\n+    if (ancestors.empty()) {\n+        return std::nullopt;\n+    } else {\n+        const auto tx_weight{GetTransactionWeight(*ptx)};\n+        // If this transaction spends V3 parents, it cannot be too large.\n+        if (tx_weight > V3_CHILD_MAX_WEIGHT) {",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "8ae62c58cf53792b4fb87d6eec4d6f224e7c2571",
      "in_reply_to_id": 1408277869,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Will change 👍 ",
      "created_at": "2023-12-01T14:15:35Z",
      "updated_at": "2023-12-01T14:15:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1412155613",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1412155613"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414612161",
      "pull_request_review_id": 1763610776,
      "id": 1414612161,
      "node_id": "PRRC_kwDOABII585UUUTB",
      "diff_hunk": "@@ -1157,17 +1157,25 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpends\n \n     unsigned nTxnRemoved = 0;\n     CFeeRate maxFeeRateRemoved(0);\n-    while (!mapTx.empty() && DynamicMemoryUsage() > sizelimit) {\n+    while (!mapTx.empty()) {\n         indexed_transaction_set::index<descendant_score>::type::iterator it = mapTx.get<descendant_score>().begin();\n \n+        // Keep trimming as long as memory is above the maximum.\n+        // Also, unless min relay feerate allows it, skim away everything paying <=0 fees.\n+        const bool keep_trimming{DynamicMemoryUsage() > sizelimit ||\n+            (m_min_relay_feerate.GetFeePerK() > 0 && it->GetModFeesWithDescendants() <= 0)};\n+        if (!keep_trimming) break;",
      "path": "src/txmempool.cpp",
      "position": 30,
      "original_position": 12,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "f6a382af7ba3378539af6375a51b3798cc1fea76",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This could lead to confusing log messages when removing 0-fee (or deprioritized) transactions: Such a tx could be removed due to \"size limit\" even if the mempool was almost empty.",
      "created_at": "2023-12-04T23:06:01Z",
      "updated_at": "2023-12-04T23:10:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1414612161",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414612161"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1154,
      "original_line": 1154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421613674",
      "pull_request_review_id": 1773907154,
      "id": 1421613674,
      "node_id": "PRRC_kwDOABII585UvBpq",
      "diff_hunk": "@@ -328,11 +329,12 @@ void Chainstate::MaybeUpdateMempoolForReorg(\n     m_mempool->UpdateTransactionsFromBlock(vHashUpdate);\n \n     // Predicate to use for filtering transactions in removeForReorg.\n+    // Checks whether a non-v3 transaction spends v3 and or vice versa.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "4557e54c90b8544b9d071f4353468fdea1ea64e3",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Leftover comment?",
      "created_at": "2023-12-10T00:28:52Z",
      "updated_at": "2023-12-10T00:46:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1421613674",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421613674"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 332,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421614259",
      "pull_request_review_id": 1773907154,
      "id": 1421614259,
      "node_id": "PRRC_kwDOABII585UvByz",
      "diff_hunk": "@@ -946,6 +948,16 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }\n \n     ws.m_ancestors = *ancestors;\n+    if (const auto err_string{CheckV3Inheritance(ws.m_ptx, ws.m_ancestors)}) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 55,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "4557e54c90b8544b9d071f4353468fdea1ea64e3",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is an aside -- in the cluster mempool branch, I think I'd like to change this to just look at direct parents rather than ancestors (I believe that in the normal course of transaction validation, we should no longer need to calculate ancestor sets when we're not worried about ancestor limits or updating cached ancestor state anymore).  Can you think of any reason it would be problematic to replace ancestors with just an entry's direct parents here? ",
      "created_at": "2023-12-10T00:34:09Z",
      "updated_at": "2023-12-10T00:46:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1421614259",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421614259"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 960,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421615040",
      "pull_request_review_id": 1773907154,
      "id": 1421615040,
      "node_id": "PRRC_kwDOABII585UvB_A",
      "diff_hunk": "@@ -1288,6 +1300,31 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n                    [](const auto& tx) { return Workspace(tx); });\n     std::map<uint256, MempoolAcceptResult> results;\n \n+    if (const auto v3_violation{CheckV3Inheritance(txns)}) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "4557e54c90b8544b9d071f4353468fdea1ea64e3",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure if I'm missing something, but this only checks that the v3 inheritance rules are enforced among transactions in the package.  What if someone sent a package of 2 v3 transactions, but the child transaction also spent a transaction that was already in the mempool?  I think the `CheckV3Inheritance()` needs to be able to pull parents from both the mempool and from the package, perhaps? ",
      "created_at": "2023-12-10T00:44:11Z",
      "updated_at": "2023-12-10T00:46:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1421615040",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1421615040"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1303,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422166975",
      "pull_request_review_id": 1774659127,
      "id": 1422166975,
      "node_id": "PRRC_kwDOABII585UxIu_",
      "diff_hunk": "@@ -1144,17 +1144,25 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpends\n \n     unsigned nTxnRemoved = 0;\n     CFeeRate maxFeeRateRemoved(0);\n-    while (!mapTx.empty() && DynamicMemoryUsage() > sizelimit) {\n+    while (!mapTx.empty()) {\n         indexed_transaction_set::index<descendant_score>::type::iterator it = mapTx.get<descendant_score>().begin();\n \n+        // Keep trimming as long as memory is above the maximum.\n+        // Also, unless min relay feerate allows it, skim away everything paying <=0 fees.\n+        const bool keep_trimming{DynamicMemoryUsage() > sizelimit ||\n+            (m_min_relay_feerate.GetFeePerK() > 0 && it->GetModFeesWithDescendants() <= 0)};\n+        if (!keep_trimming) break;\n+\n         // We set the new mempool min fee to the feerate of the removed set, plus the\n         // \"minimum reasonable fee rate\" (ie some value under which we consider txn\n         // to have 0 fee). This way, we don't allow txn to enter mempool with feerate\n         // equal to txn which were removed with no block in between.\n         CFeeRate removed(it->GetModFeesWithDescendants(), it->GetSizeWithDescendants());\n-        removed += m_incremental_relay_feerate;\n-        trackPackageRemoved(removed);\n-        maxFeeRateRemoved = std::max(maxFeeRateRemoved, removed);\n+        if (removed >= m_min_relay_feerate) {\n+            removed += m_incremental_relay_feerate;\n+            trackPackageRemoved(removed);",
      "path": "src/txmempool.cpp",
      "position": 42,
      "original_position": 24,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "bb979f4c76f4f4f4357a08674df833a5cc6dcf82",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "why move this to the if statement?",
      "created_at": "2023-12-11T09:26:53Z",
      "updated_at": "2023-12-11T14:17:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422166975",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422166975"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1163,
      "original_line": 1163,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422364536",
      "pull_request_review_id": 1774659127,
      "id": 1422364536,
      "node_id": "PRRC_kwDOABII585Ux494",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+",
      "path": "src/policy/v3_policy.cpp",
      "position": 12,
      "original_position": 11,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "b39cdfbd4c88adc2060841f49a6caaf7e5202c82",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n#include <algorithm>\r\n```",
      "created_at": "2023-12-11T11:57:46Z",
      "updated_at": "2023-12-11T14:17:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422364536",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422364536"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 12,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422369475",
      "pull_request_review_id": 1774987315,
      "id": 1422369475,
      "node_id": "PRRC_kwDOABII585Ux6LD",
      "diff_hunk": "@@ -946,6 +948,16 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }\n \n     ws.m_ancestors = *ancestors;\n+    if (const auto err_string{CheckV3Inheritance(ws.m_ptx, ws.m_ancestors)}) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 55,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "4557e54c90b8544b9d071f4353468fdea1ea64e3",
      "in_reply_to_id": 1421614259,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think just direct parents should be fine - presumably any further generations should have the same version anyway.\r\nI'll continue using `m_ancestors` here since it's what we have access to, but will leave a comment about this.",
      "created_at": "2023-12-11T12:02:40Z",
      "updated_at": "2023-12-11T12:02:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422369475",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422369475"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 960,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422429402",
      "pull_request_review_id": 1774659127,
      "id": 1422429402,
      "node_id": "PRRC_kwDOABII585UyIza",
      "diff_hunk": "@@ -0,0 +1,60 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+// V3 only allows 1 parent and 1 child.\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+/** Maximum number of transactions including a V3 tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{2};\n+\n+/** Maximum sigop-adjusted virtual size of a tx which spends from an unconfirmed v3 transaction. */\n+static constexpr int64_t V3_CHILD_MAX_VSIZE{1000};\n+// Since these limits are within the default ancestor/descendant limits, there is no need to\n+// additionally check ancestor/descendant limits for V3 transactions.\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_ANCESTOR_SIZE_LIMIT_KVB * 1000);\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_DESCENDANT_SIZE_LIMIT_KVB * 1000);\n+\n+/** Any two unconfirmed transactions with a dependency relationship must either both be V3 or both\n+ * non-V3. Check this rule for any list of unconfirmed transactions.",
      "path": "src/policy/v3_policy.h",
      "position": null,
      "original_position": 33,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "b39cdfbd4c88adc2060841f49a6caaf7e5202c82",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\r\nIs it worth adding a comment saying `Package` does not refer to a child and all of its unconfirmed parents?  The `Package` in  param can contain unrelated transaction.\r\nuntill I saw the test, I had the assumption of otherwise.",
      "created_at": "2023-12-11T12:54:20Z",
      "updated_at": "2023-12-11T14:17:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422429402",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422429402"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422485145",
      "pull_request_review_id": 1775168195,
      "id": 1422485145,
      "node_id": "PRRC_kwDOABII585UyWaZ",
      "diff_hunk": "@@ -1288,6 +1300,31 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n                    [](const auto& tx) { return Workspace(tx); });\n     std::map<uint256, MempoolAcceptResult> results;\n \n+    if (const auto v3_violation{CheckV3Inheritance(txns)}) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "4557e54c90b8544b9d071f4353468fdea1ea64e3",
      "in_reply_to_id": 1421615040,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "the other variant you're referring to here https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1421614259 should cover that case.",
      "created_at": "2023-12-11T13:42:24Z",
      "updated_at": "2023-12-11T13:42:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422485145",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422485145"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1303,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422494963",
      "pull_request_review_id": 1774659127,
      "id": 1422494963,
      "node_id": "PRRC_kwDOABII585UyYzz",
      "diff_hunk": "@@ -266,22 +266,23 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=False)\n \n         # Now mine some blocks, but make sure tx2 doesn't get mined.\n-        # Use prioritisetransaction to lower the effective feerate to 0\n+        # Use prioritisetransaction to lower the effective feerate to 0, removing it from mempool.\n         self.nodes[0].prioritisetransaction(txid=tx2.hash, fee_delta=int(-self.relayfee*COIN))\n+        self.wallet.send_self_transfer(from_node=self.nodes[0])\n         cur_time = int(time.time())\n         for _ in range(10):\n             self.nodes[0].setmocktime(cur_time + 600)\n             self.generate(self.wallet, 1, sync_fun=self.no_op)\n             cur_time += 600\n \n-        assert tx2.hash in self.nodes[0].getrawmempool()\n+        assert tx2.hash not in self.nodes[0].getrawmempool()",
      "path": "test/functional/feature_bip68_sequence.py",
      "position": 16,
      "original_position": 15,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "bb979f4c76f4f4f4357a08674df833a5cc6dcf82",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree with @mzumsande  https://github.com/bitcoin/bitcoin/pull/28948/commits/bb979f4c76f4f4f4357a08674df833a5cc6dcf82#r1414612161.\r\nI think it will generally be better to remove the transaction when it was deprioritized and its fee reduced to <= 0 to clear the ambiguity?\r\n\r\ntx2 is evicted for having 0 fees but its when we are trimming mempool that its evicted, it should not be in the mempool the moment it's deprioritized not at a later time.",
      "created_at": "2023-12-11T13:50:24Z",
      "updated_at": "2023-12-11T14:17:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422494963",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422494963"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 279,
      "original_line": 279,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422497121",
      "pull_request_review_id": 1774659127,
      "id": 1422497121,
      "node_id": "PRRC_kwDOABII585UyZVh",
      "diff_hunk": "@@ -0,0 +1,111 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<Txid>& direct_conflicts,\n+                                        int64_t sigops)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx %s would have too many ancestors\", ptx->GetWitnessHash().ToString());\n+    }\n+    if (ancestors.empty()) {\n+        return std::nullopt;",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 81,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "fc62757320f216a8adf45726eeca121e13d6c39e",
      "in_reply_to_id": 1409768985,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "   ```cpp\r\n   if (ancestors.empty()) {\r\n        return std::nullopt;\r\n    }\r\n```\r\nshould be checked before we check this size?",
      "created_at": "2023-12-11T13:52:14Z",
      "updated_at": "2023-12-11T14:17:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422497121",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422497121"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422654904",
      "pull_request_review_id": 1775436538,
      "id": 1422654904,
      "node_id": "PRRC_kwDOABII585Uy_24",
      "diff_hunk": "@@ -1144,17 +1144,25 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpends\n \n     unsigned nTxnRemoved = 0;\n     CFeeRate maxFeeRateRemoved(0);\n-    while (!mapTx.empty() && DynamicMemoryUsage() > sizelimit) {\n+    while (!mapTx.empty()) {\n         indexed_transaction_set::index<descendant_score>::type::iterator it = mapTx.get<descendant_score>().begin();\n \n+        // Keep trimming as long as memory is above the maximum.\n+        // Also, unless min relay feerate allows it, skim away everything paying <=0 fees.\n+        const bool keep_trimming{DynamicMemoryUsage() > sizelimit ||\n+            (m_min_relay_feerate.GetFeePerK() > 0 && it->GetModFeesWithDescendants() <= 0)};\n+        if (!keep_trimming) break;\n+\n         // We set the new mempool min fee to the feerate of the removed set, plus the\n         // \"minimum reasonable fee rate\" (ie some value under which we consider txn\n         // to have 0 fee). This way, we don't allow txn to enter mempool with feerate\n         // equal to txn which were removed with no block in between.\n         CFeeRate removed(it->GetModFeesWithDescendants(), it->GetSizeWithDescendants());\n-        removed += m_incremental_relay_feerate;\n-        trackPackageRemoved(removed);\n-        maxFeeRateRemoved = std::max(maxFeeRateRemoved, removed);\n+        if (removed >= m_min_relay_feerate) {\n+            removed += m_incremental_relay_feerate;\n+            trackPackageRemoved(removed);",
      "path": "src/txmempool.cpp",
      "position": 42,
      "original_position": 24,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "bb979f4c76f4f4f4357a08674df833a5cc6dcf82",
      "in_reply_to_id": 1422166975,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removal of things below minimum relay feerate shouldn't impact the dynamic mempool minimum",
      "created_at": "2023-12-11T15:30:23Z",
      "updated_at": "2023-12-11T15:30:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422654904",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422654904"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1163,
      "original_line": 1163,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422657588",
      "pull_request_review_id": 1775440706,
      "id": 1422657588,
      "node_id": "PRRC_kwDOABII585UzAg0",
      "diff_hunk": "@@ -266,22 +266,23 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=False)\n \n         # Now mine some blocks, but make sure tx2 doesn't get mined.\n-        # Use prioritisetransaction to lower the effective feerate to 0\n+        # Use prioritisetransaction to lower the effective feerate to 0, removing it from mempool.\n         self.nodes[0].prioritisetransaction(txid=tx2.hash, fee_delta=int(-self.relayfee*COIN))\n+        self.wallet.send_self_transfer(from_node=self.nodes[0])\n         cur_time = int(time.time())\n         for _ in range(10):\n             self.nodes[0].setmocktime(cur_time + 600)\n             self.generate(self.wallet, 1, sync_fun=self.no_op)\n             cur_time += 600\n \n-        assert tx2.hash in self.nodes[0].getrawmempool()\n+        assert tx2.hash not in self.nodes[0].getrawmempool()",
      "path": "test/functional/feature_bip68_sequence.py",
      "position": 16,
      "original_position": 15,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "bb979f4c76f4f4f4357a08674df833a5cc6dcf82",
      "in_reply_to_id": 1422494963,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sorry I'm having trouble parsing this suggestion, are you saying we should call `TrimToSize` whenever a transaction is prioritised?",
      "created_at": "2023-12-11T15:32:14Z",
      "updated_at": "2023-12-11T15:32:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422657588",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422657588"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 279,
      "original_line": 279,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422670830",
      "pull_request_review_id": 1775461249,
      "id": 1422670830,
      "node_id": "PRRC_kwDOABII585UzDvu",
      "diff_hunk": "@@ -266,22 +266,23 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=False)\n \n         # Now mine some blocks, but make sure tx2 doesn't get mined.\n-        # Use prioritisetransaction to lower the effective feerate to 0\n+        # Use prioritisetransaction to lower the effective feerate to 0, removing it from mempool.\n         self.nodes[0].prioritisetransaction(txid=tx2.hash, fee_delta=int(-self.relayfee*COIN))\n+        self.wallet.send_self_transfer(from_node=self.nodes[0])\n         cur_time = int(time.time())\n         for _ in range(10):\n             self.nodes[0].setmocktime(cur_time + 600)\n             self.generate(self.wallet, 1, sync_fun=self.no_op)\n             cur_time += 600\n \n-        assert tx2.hash in self.nodes[0].getrawmempool()\n+        assert tx2.hash not in self.nodes[0].getrawmempool()",
      "path": "test/functional/feature_bip68_sequence.py",
      "position": 16,
      "original_position": 15,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "bb979f4c76f4f4f4357a08674df833a5cc6dcf82",
      "in_reply_to_id": 1422494963,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No what I am suggesting is to remove the transaction from mempool when it was deprioritized and its fee reduced to <= 0, not call `TrimToSize`",
      "created_at": "2023-12-11T15:40:11Z",
      "updated_at": "2023-12-11T15:40:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422670830",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422670830"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 279,
      "original_line": 279,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422682244",
      "pull_request_review_id": 1775478745,
      "id": 1422682244,
      "node_id": "PRRC_kwDOABII585UzGiE",
      "diff_hunk": "@@ -290,7 +290,8 @@ def create_self_transfer_multi(\n         sequence=0,\n         fee_per_output=1000,\n         target_weight=0,\n-        confirmed_only=False\n+        confirmed_only=False,\n+        version=2",
      "path": "test/functional/test_framework/wallet.py",
      "position": null,
      "original_position": 6,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "104b3d39f416d20ab496d753afbe7e4d31902065",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit in 104b3d39f416d20ab496d753afbe7e4d31902065:\r\n\r\nThis only allows the `version` option for `create*` calls. I think it would be better to allow the option for any MiniWallet method. In python this can be achieved by passing keyword-args down a call chain. See https://github.com/bitcoin/bitcoin/pull/28972. Feel free to cherry-pick that here (replacing this commit), or review it, or ignore it.",
      "created_at": "2023-12-11T15:47:20Z",
      "updated_at": "2023-12-11T15:47:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1422682244",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1422682244"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 294,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423035255",
      "pull_request_review_id": 1776025246,
      "id": 1423035255,
      "node_id": "PRRC_kwDOABII585U0ct3",
      "diff_hunk": "@@ -290,7 +290,8 @@ def create_self_transfer_multi(\n         sequence=0,\n         fee_per_output=1000,\n         target_weight=0,\n-        confirmed_only=False\n+        confirmed_only=False,\n+        version=2",
      "path": "test/functional/test_framework/wallet.py",
      "position": null,
      "original_position": 6,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "104b3d39f416d20ab496d753afbe7e4d31902065",
      "in_reply_to_id": 1422682244,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "thanks :+1: ",
      "created_at": "2023-12-11T19:36:56Z",
      "updated_at": "2023-12-11T19:36:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423035255",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423035255"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 294,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423076943",
      "pull_request_review_id": 1776090512,
      "id": 1423076943,
      "node_id": "PRRC_kwDOABII585U0m5P",
      "diff_hunk": "@@ -1288,6 +1300,31 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n                    [](const auto& tx) { return Workspace(tx); });\n     std::map<uint256, MempoolAcceptResult> results;\n \n+    if (const auto v3_violation{CheckV3Inheritance(txns)}) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "4557e54c90b8544b9d071f4353468fdea1ea64e3",
      "in_reply_to_id": 1421615040,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Looks like it's broken, see this test (here the parent transaction is spending an in-mempool output, rather than the child transaction):\r\n```\r\ndiff --git a/test/functional/mempool_accept_v3.py b/test/functional/mempool_accept_v3.py\r\nindex 769b177cf523..713a8cb7406b 100755\r\n--- a/test/functional/mempool_accept_v3.py\r\n+++ b/test/functional/mempool_accept_v3.py\r\n@@ -229,11 +229,42 @@ class MempoolAcceptV3(BitcoinTestFramework):\r\n         tx_replacer = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo_confirmed, fee_rate=DEFAULT_FEE * 10)\r\n         self.check_mempool([tx_replacer[\"txid\"]])\r\n \r\n+    @cleanup\r\n+    def test_package_v3_inheritance(self):\r\n+        \"\"\"\r\n+        A v3 transaction in a package cannot have 2 v3 parents.\r\n+        Test that if we have a transaction graph A -> B -> C, where A, B, C are\r\n+        all v3 transactions, that we cannot use submitpackage to get the\r\n+        transactions all into the mempool.\r\n+\r\n+        Verify, in particular, that if A is already in the mempool, then\r\n+        submitpackage(B, C) will fail.\r\n+        \"\"\"\r\n+        node = self.nodes[0]\r\n+        self.log.info(\"Test that submitpackage won't allow v3 topology rules to be violated\")\r\n+        # This is our transaction \"A\":\r\n+        tx_in_mempool = self.wallet.send_self_transfer(from_node=node, version=3)\r\n+\r\n+        # Verify that A is in the mempool\r\n+        self.check_mempool([tx_in_mempool[\"txid\"]])\r\n+\r\n+        # tx_0fee_parent is our transaction \"B\"; just create it.\r\n+        tx_0fee_parent = self.wallet.create_self_transfer(utxo_to_spend=tx_in_mempool[\"new_utxo\"], fee=0, fee_rate=0, version=3)\r\n+\r\n+        # tx_child_violator is our transaction \"C\"; create it:\r\n+        tx_child_violator = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx_0fee_parent[\"new_utxo\"]], version=3)\r\n+\r\n+        # submitpackage(B, C) should fail\r\n+        result = node.submitpackage([tx_0fee_parent[\"hex\"], tx_child_violator[\"hex\"]])\r\n+        assert(result['package_msg'] != 'success')\r\n+        #self.check_mempool([tx_in_mempool[\"txid\"], tx_0fee_parent[\"txid\"], tx_child_violator[\"txid\"]])\r\n+\r\n     def run_test(self):\r\n         self.log.info(\"Generate blocks to create UTXOs\")\r\n         node = self.nodes[0]\r\n         self.wallet = MiniWallet(node)\r\n         self.generate(self.wallet, 110)\r\n+        self.test_package_v3_inheritance()\r\n         self.test_v3_acceptance()\r\n         self.test_v3_replacement()\r\n         self.test_v3_bip125()\r\n```",
      "created_at": "2023-12-11T20:16:55Z",
      "updated_at": "2023-12-11T20:17:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423076943",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423076943"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1303,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423081068",
      "pull_request_review_id": 1776096637,
      "id": 1423081068,
      "node_id": "PRRC_kwDOABII585U0n5s",
      "diff_hunk": "@@ -1288,6 +1300,31 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n                    [](const auto& tx) { return Workspace(tx); });\n     std::map<uint256, MempoolAcceptResult> results;\n \n+    if (const auto v3_violation{CheckV3Inheritance(txns)}) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "4557e54c90b8544b9d071f4353468fdea1ea64e3",
      "in_reply_to_id": 1421615040,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "that's the known topology issue IIUC: https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1409842026",
      "created_at": "2023-12-11T20:20:18Z",
      "updated_at": "2023-12-11T20:20:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423081068",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423081068"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1303,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423116594",
      "pull_request_review_id": 1776152202,
      "id": 1423116594,
      "node_id": "PRRC_kwDOABII585U0wky",
      "diff_hunk": "@@ -1288,6 +1300,31 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n                    [](const auto& tx) { return Workspace(tx); });\n     std::map<uint256, MempoolAcceptResult> results;\n \n+    if (const auto v3_violation{CheckV3Inheritance(txns)}) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "4557e54c90b8544b9d071f4353468fdea1ea64e3",
      "in_reply_to_id": 1421615040,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah,  I see.  I think this is a different set of checks that fail, but I'm not sure exactly what the fix is so maybe both of these can be fixed at the same time...",
      "created_at": "2023-12-11T20:54:14Z",
      "updated_at": "2023-12-11T20:54:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423116594",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423116594"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1303,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423981108",
      "pull_request_review_id": 1777451209,
      "id": 1423981108,
      "node_id": "PRRC_kwDOABII585U4Do0",
      "diff_hunk": "@@ -290,7 +290,8 @@ def create_self_transfer_multi(\n         sequence=0,\n         fee_per_output=1000,\n         target_weight=0,\n-        confirmed_only=False\n+        confirmed_only=False,\n+        version=2",
      "path": "test/functional/test_framework/wallet.py",
      "position": null,
      "original_position": 6,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "104b3d39f416d20ab496d753afbe7e4d31902065",
      "in_reply_to_id": 1422682244,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "taken",
      "created_at": "2023-12-12T13:18:45Z",
      "updated_at": "2023-12-12T13:18:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423981108",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423981108"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 294,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423981481",
      "pull_request_review_id": 1777451829,
      "id": 1423981481,
      "node_id": "PRRC_kwDOABII585U4Dup",
      "diff_hunk": "@@ -0,0 +1,60 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+// V3 only allows 1 parent and 1 child.\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+/** Maximum number of transactions including a V3 tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{2};\n+\n+/** Maximum sigop-adjusted virtual size of a tx which spends from an unconfirmed v3 transaction. */\n+static constexpr int64_t V3_CHILD_MAX_VSIZE{1000};\n+// Since these limits are within the default ancestor/descendant limits, there is no need to\n+// additionally check ancestor/descendant limits for V3 transactions.\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_ANCESTOR_SIZE_LIMIT_KVB * 1000);\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_DESCENDANT_SIZE_LIMIT_KVB * 1000);\n+\n+/** Any two unconfirmed transactions with a dependency relationship must either both be V3 or both\n+ * non-V3. Check this rule for any list of unconfirmed transactions.",
      "path": "src/policy/v3_policy.h",
      "position": null,
      "original_position": 33,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "b39cdfbd4c88adc2060841f49a6caaf7e5202c82",
      "in_reply_to_id": 1422429402,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added mention of no topological restrictions to the comment",
      "created_at": "2023-12-12T13:19:04Z",
      "updated_at": "2023-12-12T13:19:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423981481",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423981481"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423981578",
      "pull_request_review_id": 1777451998,
      "id": 1423981578,
      "node_id": "PRRC_kwDOABII585U4DwK",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+",
      "path": "src/policy/v3_policy.cpp",
      "position": 12,
      "original_position": 11,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "b39cdfbd4c88adc2060841f49a6caaf7e5202c82",
      "in_reply_to_id": 1422364536,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "added",
      "created_at": "2023-12-12T13:19:09Z",
      "updated_at": "2023-12-12T13:19:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423981578",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423981578"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 12,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423982889",
      "pull_request_review_id": 1777453998,
      "id": 1423982889,
      "node_id": "PRRC_kwDOABII585U4EEp",
      "diff_hunk": "@@ -1288,6 +1300,31 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n                    [](const auto& tx) { return Workspace(tx); });\n     std::map<uint256, MempoolAcceptResult> results;\n \n+    if (const auto v3_violation{CheckV3Inheritance(txns)}) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "4557e54c90b8544b9d071f4353468fdea1ea64e3",
      "in_reply_to_id": 1421615040,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a check for in-package + mempool ancestors, and both of your tests.",
      "created_at": "2023-12-12T13:20:09Z",
      "updated_at": "2023-12-12T13:20:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423982889",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423982889"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1303,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423983165",
      "pull_request_review_id": 1777454378,
      "id": 1423983165,
      "node_id": "PRRC_kwDOABII585U4EI9",
      "diff_hunk": "@@ -328,11 +329,12 @@ void Chainstate::MaybeUpdateMempoolForReorg(\n     m_mempool->UpdateTransactionsFromBlock(vHashUpdate);\n \n     // Predicate to use for filtering transactions in removeForReorg.\n+    // Checks whether a non-v3 transaction spends v3 and or vice versa.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "4557e54c90b8544b9d071f4353468fdea1ea64e3",
      "in_reply_to_id": 1421613674,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "removed",
      "created_at": "2023-12-12T13:20:20Z",
      "updated_at": "2023-12-12T13:20:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423983165",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423983165"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 332,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423983892",
      "pull_request_review_id": 1777455477,
      "id": 1423983892,
      "node_id": "PRRC_kwDOABII585U4EUU",
      "diff_hunk": "@@ -1157,17 +1157,25 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpends\n \n     unsigned nTxnRemoved = 0;\n     CFeeRate maxFeeRateRemoved(0);\n-    while (!mapTx.empty() && DynamicMemoryUsage() > sizelimit) {\n+    while (!mapTx.empty()) {\n         indexed_transaction_set::index<descendant_score>::type::iterator it = mapTx.get<descendant_score>().begin();\n \n+        // Keep trimming as long as memory is above the maximum.\n+        // Also, unless min relay feerate allows it, skim away everything paying <=0 fees.\n+        const bool keep_trimming{DynamicMemoryUsage() > sizelimit ||\n+            (m_min_relay_feerate.GetFeePerK() > 0 && it->GetModFeesWithDescendants() <= 0)};\n+        if (!keep_trimming) break;",
      "path": "src/txmempool.cpp",
      "position": 30,
      "original_position": 12,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "f6a382af7ba3378539af6375a51b3798cc1fea76",
      "in_reply_to_id": 1414612161,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've changed the `RemovalReasonToString` to be \"sizelimit or <=0 fee\". Alternatively, we can add another reason?",
      "created_at": "2023-12-12T13:20:54Z",
      "updated_at": "2023-12-12T13:20:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423983892",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423983892"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1154,
      "original_line": 1154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423987772",
      "pull_request_review_id": 1777461631,
      "id": 1423987772,
      "node_id": "PRRC_kwDOABII585U4FQ8",
      "diff_hunk": "@@ -0,0 +1,111 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,",
      "path": "src/policy/v3_policy.cpp",
      "position": 134,
      "original_position": 69,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "fc62757320f216a8adf45726eeca121e13d6c39e",
      "in_reply_to_id": 1409842026,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "added this test",
      "created_at": "2023-12-12T13:24:01Z",
      "updated_at": "2023-12-12T13:24:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1423987772",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423987772"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 134,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424116143",
      "pull_request_review_id": 1777677456,
      "id": 1424116143,
      "node_id": "PRRC_kwDOABII585U4kmv",
      "diff_hunk": "@@ -300,5 +303,21 @@ FUZZ_TARGET(tx_package_eval, .init = initialize_tx_pool)\n     UnregisterSharedValidationInterface(outpoints_updater);\n \n     WITH_LOCK(::cs_main, tx_pool.check(chainstate.CoinsTip(), chainstate.m_chain.Height() + 1));\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {",
      "path": "src/test/fuzz/package_eval.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "e649551b120da0597668941d8b72e8a3fb33f087",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "did you want to use `CheckMempoolInvariants` here as well?",
      "created_at": "2023-12-12T14:53:30Z",
      "updated_at": "2023-12-12T14:53:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424116143",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424116143"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 307,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424133256",
      "pull_request_review_id": 1777711045,
      "id": 1424133256,
      "node_id": "PRRC_kwDOABII585U4oyI",
      "diff_hunk": "@@ -1014,6 +1035,7 @@ bool MemPoolAccept::ReplacementChecks(Workspace& ws)\n }\n \n bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txns,\n+                                         const std::vector<Workspace>& workspaces,",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 97,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "91e83bc0fb8ba6d11d3f645047e7f00aa3247f2b",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "unused addition?",
      "created_at": "2023-12-12T15:01:56Z",
      "updated_at": "2023-12-12T17:01:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424133256",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424133256"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1038,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424133394",
      "pull_request_review_id": 1777711045,
      "id": 1424133394,
      "node_id": "PRRC_kwDOABII585U4o0S",
      "diff_hunk": "@@ -1029,6 +1051,7 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", err_string);\n     }\n+",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 105,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "91e83bc0fb8ba6d11d3f645047e7f00aa3247f2b",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "extra line",
      "created_at": "2023-12-12T15:02:01Z",
      "updated_at": "2023-12-12T17:01:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424133394",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424133394"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1054,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424137225",
      "pull_request_review_id": 1777711045,
      "id": 1424137225,
      "node_id": "PRRC_kwDOABII585U4pwJ",
      "diff_hunk": "@@ -0,0 +1,136 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            // If duplicate txids exist, this function will still detect violations, but it\n+            // will return the earlier transaction's wtxid.\n+            Assume(v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        } else {\n+            Assume(non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> PackageV3SanityChecks(const Package& package)\n+{\n+    // Check inheritance rules within package.\n+    if (const auto inheritance_error{CheckV3Inheritance(package)}) {\n+        const auto [parent_wtxid, child_wtxid, child_v3] = inheritance_error.value();\n+        if (child_v3) {\n+            return strprintf(\"v3 tx %s cannot spend from non-v3 %s\", child_wtxid.ToString(), parent_wtxid.ToString());\n+        } else {\n+            return strprintf(\"non-v3 tx %s cannot spend from v3 %s\", child_wtxid.ToString(), parent_wtxid.ToString());\n+        }\n+    }\n+\n+    // Sanity check that package itself obeys ancestor/descendant limits. This is not a complete\n+    // check, but we can exit early if it fails.\n+    if (!package.empty() && package.size() > V3_CHILD_MAX_VSIZE && package.back()->nVersion == 3) {\n+        const auto& child_wtxid = package.back()->GetWitnessHash();\n+        return strprintf(\"tx %s would have too many ancestors\", child_wtxid.ToString());\n+    }\n+\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<Txid>& direct_conflicts,\n+                                        int64_t vsize)\n+{\n+    // This function is specialized for these limits, and must be reimplemented if they ever change.\n+    static_assert(V3_ANCESTOR_LIMIT == 2);\n+    static_assert(V3_DESCENDANT_LIMIT == 2);\n+\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx %s would have too many ancestors\", ptx->GetWitnessHash().ToString());\n+    }\n+    if (ancestors.empty()) {\n+        return std::nullopt;\n+    }\n+    // If this transaction spends V3 parents, it cannot be too large.\n+    if (vsize > V3_CHILD_MAX_VSIZE) {\n+        return strprintf(\"v3 child tx is too big: %u > %u virtual bytes\", vsize, V3_CHILD_MAX_VSIZE);\n+    }\n+    // Any ancestor of a V3 transaction must also be V3.\n+    const auto& parent_entry = *ancestors.begin();",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 118,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "91e83bc0fb8ba6d11d3f645047e7f00aa3247f2b",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "isn't this already covered by CheckV3Inheritence?",
      "created_at": "2023-12-12T15:03:38Z",
      "updated_at": "2023-12-12T17:01:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424137225",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424137225"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424141970",
      "pull_request_review_id": 1777711045,
      "id": 1424141970,
      "node_id": "PRRC_kwDOABII585U4q6S",
      "diff_hunk": "@@ -1332,11 +1362,24 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n             MempoolAcceptResult::FeeFailure(placeholder_state, CFeeRate(m_total_modified_fees, m_total_vsize), all_package_wtxids)}});\n     }\n \n+    // Check the last transaction's v3 ancestor limits again, assuming that all transactions\n+    // are in the ancestor set of the last tx (which is the case when a package IsChildWithParents)",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 142,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "91e83bc0fb8ba6d11d3f645047e7f00aa3247f2b",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`Assume(IsChildWithParents())` here makes sense",
      "created_at": "2023-12-12T15:07:07Z",
      "updated_at": "2023-12-12T17:01:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424141970",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424141970"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1366,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424169715",
      "pull_request_review_id": 1777771980,
      "id": 1424169715,
      "node_id": "PRRC_kwDOABII585U4xrz",
      "diff_hunk": "@@ -0,0 +1,111 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<Txid>& direct_conflicts,\n+                                        int64_t sigops)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx %s would have too many ancestors\", ptx->GetWitnessHash().ToString());\n+    }\n+    if (ancestors.empty()) {\n+        return std::nullopt;\n+    } else {",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 82,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "fc62757320f216a8adf45726eeca121e13d6c39e",
      "in_reply_to_id": 1409761071,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Taken",
      "created_at": "2023-12-12T15:23:27Z",
      "updated_at": "2023-12-12T15:23:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424169715",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424169715"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424176890",
      "pull_request_review_id": 1777784569,
      "id": 1424176890,
      "node_id": "PRRC_kwDOABII585U4zb6",
      "diff_hunk": "@@ -266,22 +266,23 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=False)\n \n         # Now mine some blocks, but make sure tx2 doesn't get mined.\n-        # Use prioritisetransaction to lower the effective feerate to 0\n+        # Use prioritisetransaction to lower the effective feerate to 0, removing it from mempool.\n         self.nodes[0].prioritisetransaction(txid=tx2.hash, fee_delta=int(-self.relayfee*COIN))\n+        self.wallet.send_self_transfer(from_node=self.nodes[0])\n         cur_time = int(time.time())\n         for _ in range(10):\n             self.nodes[0].setmocktime(cur_time + 600)\n             self.generate(self.wallet, 1, sync_fun=self.no_op)\n             cur_time += 600\n \n-        assert tx2.hash in self.nodes[0].getrawmempool()\n+        assert tx2.hash not in self.nodes[0].getrawmempool()",
      "path": "test/functional/feature_bip68_sequence.py",
      "position": 16,
      "original_position": 15,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "bb979f4c76f4f4f4357a08674df833a5cc6dcf82",
      "in_reply_to_id": 1422494963,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think we should do that; we'd want to look at the impact on all related transaction's descendant scores. This transaction's modified fee might be negative, but it could have high-feerate descendants.",
      "created_at": "2023-12-12T15:27:57Z",
      "updated_at": "2023-12-12T15:27:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424176890",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424176890"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 279,
      "original_line": 279,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424190533",
      "pull_request_review_id": 1777711045,
      "id": 1424190533,
      "node_id": "PRRC_kwDOABII585U42xF",
      "diff_hunk": "@@ -0,0 +1,305 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            # Reset config options\n+            self.restart_node(0)\n+    return wrapper\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def check_mempool(self, txids):\n+        \"\"\"Assert exact contents of the node's mempool (by txid).\"\"\"\n+        mempool_contents = self.nodes[0].getrawmempool()\n+        assert_equal(len(txids), len(mempool_contents))\n+        assert all([txid in txids for txid in mempool_contents])\n+\n+    @cleanup\n+    def test_v3_acceptance(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test a child of a V3 transaction cannot be more than 1000vB\")\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        tx_v3_child_heavy = self.wallet.create_self_transfer(\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=4004,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_heavy[\"tx\"].get_vsize(), 1000)\n+        assert_raises_rpc_error(-26, \"v3-tx-nonstandard, v3 child tx is too big\", node.sendrawtransaction, tx_v3_child_heavy[\"hex\"])\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        # tx has no descendants\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 1)\n+\n+        self.log.info(\"Test that, during replacements, only the new transaction counts for V3 descendant limit\")\n+        tx_v3_child_almost_heavy = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3987,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(1000, tx_v3_child_almost_heavy[\"tx\"].get_vsize())\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+        tx_v3_child_almost_heavy_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3500,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_almost_heavy[\"tx\"].get_vsize() + tx_v3_child_almost_heavy_rbf[\"tx\"].get_vsize(), 1000)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy_rbf[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+\n+    @cleanup\n+    def test_v3_replacement(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")\n+        utxo_v3_bip125 = self.wallet.get_utxo()\n+        tx_v3_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125[\"txid\"]])\n+\n+        tx_v3_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf[\"txid\"]])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 3,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"]])\n+\n+        self.log.info(\"Test that replacements cannot cause violation of inherited V3\")\n+        utxo_v3_parent = self.wallet.get_utxo()\n+        tx_v3_parent = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_parent,\n+            version=3\n+        )\n+        tx_v3_child = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+        tx_v3_child_rbf_v2 = self.wallet.create_self_transfer(\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=2\n+        )\n+        assert_raises_rpc_error(-26, \"non-v3-tx-spends-v3\", node.sendrawtransaction, tx_v3_child_rbf_v2[\"hex\"])\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+\n+    @cleanup\n+    def test_v3_bip125(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions that don't signal BIP125 are replaceable\")\n+        assert_equal(node.getmempoolinfo()[\"fullrbf\"], False)\n+        utxo_v3_no_bip125 = self.wallet.get_utxo()\n+        tx_v3_no_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE + 1,\n+            version=3\n+        )\n+\n+        self.check_mempool([tx_v3_no_bip125[\"txid\"]])\n+        assert not node.getmempoolentry(tx_v3_no_bip125[\"txid\"])[\"bip125-replaceable\"]\n+        tx_v3_no_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_no_bip125_rbf[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_reorg(self):\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=40000\"])\n+        self.log.info(\"Test that, during a reorg, v3 rules are not enforced\")\n+        tx_v2_block = self.wallet.send_self_transfer(from_node=node, version=2)\n+        tx_v3_block = self.wallet.send_self_transfer(from_node=node, version=3)\n+        tx_v3_block2 = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"]]))\n+\n+        block = self.generate(node, 1)\n+        assert_equal(node.getrawmempool(), [])\n+        tx_v2_from_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block[\"new_utxo\"], version=2)\n+        tx_v3_from_v2 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v2_block[\"new_utxo\"], version=3)\n+        tx_v3_child_large = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block2[\"new_utxo\"], target_weight=5000, version=3)\n+        assert_greater_than(node.getmempoolentry(tx_v3_child_large[\"txid\"])[\"vsize\"], 1000)\n+        assert_equal(set(node.getrawmempool()), set([tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        node.invalidateblock(block[0])\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"], tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        # This is needed because generate() will create the exact same block again.\n+        node.reconsiderblock(block[0])\n+\n+\n+    @cleanup\n+    def test_nondefault_package_limits(self):\n+        \"\"\"\n+        Max standard tx size + V3 rules imply the ancestor/descendant rules (at their default\n+        values), but those checks must not be skipped. Ensure both sets of checks are done by\n+        changing the ancestor/descendant limit configurations.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that a decreased limitdescendantsize also applies to V3 child\")\n+        self.restart_node(0, extra_args=[\"-limitdescendantsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large1 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large1 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large1[\"new_utxo\"], version=3)\n+        # Child is within V3 limits\n+        assert_greater_than(1000, tx_v3_child_large1[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", node.sendrawtransaction,\n+                tx_v3_child_large1[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large1[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_large1[\"txid\"])[\"descendantcount\"], 1)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Test that a decreased limitancestorsize also applies to V3 parent\")\n+        self.restart_node(0, extra_args=[\"-limitancestorsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large2 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large2[\"new_utxo\"], version=3)\n+        # Child is within V3 limits\n+        assert_greater_than_or_equal(1000, tx_v3_child_large2[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", node.sendrawtransaction,\n+                tx_v3_child_large2[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large2[\"txid\"]])\n+\n+    @cleanup\n+    def test_fee_dependency_replacements(self):\n+        \"\"\"\n+        Since v3 introduces the possibility of 0-fee (i.e. below min relay feerate) transactions in\n+        the mempool, it's possible for these transactions' sponsors to disappear due to RBF. In\n+        those situations, the 0-fee transaction must be evicted along with the replacements.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that below-min-relay-feerate transactions are removed in RBF\")\n+        tx_0fee_parent = self.wallet.create_self_transfer(fee=0, fee_rate=0, version=3)\n+        utxo_confirmed = self.wallet.get_utxo()\n+        tx_child_replacee = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx_0fee_parent[\"new_utxo\"], utxo_confirmed], version=3)\n+        node.submitpackage([tx_0fee_parent[\"hex\"], tx_child_replacee[\"hex\"]])\n+        self.check_mempool([tx_0fee_parent[\"txid\"], tx_child_replacee[\"txid\"]])\n+        tx_replacer = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo_confirmed, fee_rate=DEFAULT_FEE * 10)\n+        self.check_mempool([tx_replacer[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_ancestors_package(self):\n+        self.log.info(\"Test that v3 ancestor limits are checked within the package\")\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_parent_2_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_child_heavy = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[tx_v3_parent_normal[\"new_utxo\"], tx_v3_parent_2_normal[\"new_utxo\"]],\n+            target_weight=4004,\n+            fee_per_output=10000,\n+            version=3\n+        )\n+        assert_equal(node.getrawmempool(), [])\n+        result = node.submitpackage([tx_v3_parent_normal[\"hex\"], tx_v3_parent_2_normal[\"hex\"], tx_v3_child_heavy[\"hex\"]])\n+        assert result['package_msg'] != 'success'",
      "path": "test/functional/mempool_accept_v3.py",
      "position": null,
      "original_position": 255,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "e649551b120da0597668941d8b72e8a3fb33f087",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "let's check the error messages here and elsewhere to prevent test regressions:\r\n`'error': 'v3-nonstandard, tx 1399d1fad241d2da8057b0eb29524e75b8415dedc26a536d8a0cfa72f49f9747 would have too many ancestors'}`\r\n",
      "created_at": "2023-12-12T15:35:56Z",
      "updated_at": "2023-12-12T17:01:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424190533",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424190533"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 255,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424191480",
      "pull_request_review_id": 1777711045,
      "id": 1424191480,
      "node_id": "PRRC_kwDOABII585U42_4",
      "diff_hunk": "@@ -0,0 +1,305 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            # Reset config options\n+            self.restart_node(0)\n+    return wrapper\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def check_mempool(self, txids):\n+        \"\"\"Assert exact contents of the node's mempool (by txid).\"\"\"\n+        mempool_contents = self.nodes[0].getrawmempool()\n+        assert_equal(len(txids), len(mempool_contents))\n+        assert all([txid in txids for txid in mempool_contents])\n+\n+    @cleanup\n+    def test_v3_acceptance(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test a child of a V3 transaction cannot be more than 1000vB\")\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        tx_v3_child_heavy = self.wallet.create_self_transfer(\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=4004,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_heavy[\"tx\"].get_vsize(), 1000)\n+        assert_raises_rpc_error(-26, \"v3-tx-nonstandard, v3 child tx is too big\", node.sendrawtransaction, tx_v3_child_heavy[\"hex\"])\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        # tx has no descendants\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 1)\n+\n+        self.log.info(\"Test that, during replacements, only the new transaction counts for V3 descendant limit\")\n+        tx_v3_child_almost_heavy = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3987,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(1000, tx_v3_child_almost_heavy[\"tx\"].get_vsize())\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+        tx_v3_child_almost_heavy_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3500,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_almost_heavy[\"tx\"].get_vsize() + tx_v3_child_almost_heavy_rbf[\"tx\"].get_vsize(), 1000)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy_rbf[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+\n+    @cleanup\n+    def test_v3_replacement(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")\n+        utxo_v3_bip125 = self.wallet.get_utxo()\n+        tx_v3_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125[\"txid\"]])\n+\n+        tx_v3_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf[\"txid\"]])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 3,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"]])\n+\n+        self.log.info(\"Test that replacements cannot cause violation of inherited V3\")\n+        utxo_v3_parent = self.wallet.get_utxo()\n+        tx_v3_parent = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_parent,\n+            version=3\n+        )\n+        tx_v3_child = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+        tx_v3_child_rbf_v2 = self.wallet.create_self_transfer(\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=2\n+        )\n+        assert_raises_rpc_error(-26, \"non-v3-tx-spends-v3\", node.sendrawtransaction, tx_v3_child_rbf_v2[\"hex\"])\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+\n+    @cleanup\n+    def test_v3_bip125(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions that don't signal BIP125 are replaceable\")\n+        assert_equal(node.getmempoolinfo()[\"fullrbf\"], False)\n+        utxo_v3_no_bip125 = self.wallet.get_utxo()\n+        tx_v3_no_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE + 1,\n+            version=3\n+        )\n+\n+        self.check_mempool([tx_v3_no_bip125[\"txid\"]])\n+        assert not node.getmempoolentry(tx_v3_no_bip125[\"txid\"])[\"bip125-replaceable\"]\n+        tx_v3_no_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_no_bip125_rbf[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_reorg(self):\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=40000\"])\n+        self.log.info(\"Test that, during a reorg, v3 rules are not enforced\")\n+        tx_v2_block = self.wallet.send_self_transfer(from_node=node, version=2)\n+        tx_v3_block = self.wallet.send_self_transfer(from_node=node, version=3)\n+        tx_v3_block2 = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"]]))\n+\n+        block = self.generate(node, 1)\n+        assert_equal(node.getrawmempool(), [])\n+        tx_v2_from_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block[\"new_utxo\"], version=2)\n+        tx_v3_from_v2 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v2_block[\"new_utxo\"], version=3)\n+        tx_v3_child_large = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block2[\"new_utxo\"], target_weight=5000, version=3)\n+        assert_greater_than(node.getmempoolentry(tx_v3_child_large[\"txid\"])[\"vsize\"], 1000)\n+        assert_equal(set(node.getrawmempool()), set([tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        node.invalidateblock(block[0])\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"], tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        # This is needed because generate() will create the exact same block again.\n+        node.reconsiderblock(block[0])\n+\n+\n+    @cleanup\n+    def test_nondefault_package_limits(self):\n+        \"\"\"\n+        Max standard tx size + V3 rules imply the ancestor/descendant rules (at their default\n+        values), but those checks must not be skipped. Ensure both sets of checks are done by\n+        changing the ancestor/descendant limit configurations.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that a decreased limitdescendantsize also applies to V3 child\")\n+        self.restart_node(0, extra_args=[\"-limitdescendantsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large1 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large1 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large1[\"new_utxo\"], version=3)\n+        # Child is within V3 limits\n+        assert_greater_than(1000, tx_v3_child_large1[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", node.sendrawtransaction,\n+                tx_v3_child_large1[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large1[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_large1[\"txid\"])[\"descendantcount\"], 1)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Test that a decreased limitancestorsize also applies to V3 parent\")\n+        self.restart_node(0, extra_args=[\"-limitancestorsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large2 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large2[\"new_utxo\"], version=3)\n+        # Child is within V3 limits\n+        assert_greater_than_or_equal(1000, tx_v3_child_large2[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", node.sendrawtransaction,\n+                tx_v3_child_large2[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large2[\"txid\"]])\n+\n+    @cleanup\n+    def test_fee_dependency_replacements(self):\n+        \"\"\"\n+        Since v3 introduces the possibility of 0-fee (i.e. below min relay feerate) transactions in\n+        the mempool, it's possible for these transactions' sponsors to disappear due to RBF. In\n+        those situations, the 0-fee transaction must be evicted along with the replacements.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that below-min-relay-feerate transactions are removed in RBF\")\n+        tx_0fee_parent = self.wallet.create_self_transfer(fee=0, fee_rate=0, version=3)\n+        utxo_confirmed = self.wallet.get_utxo()\n+        tx_child_replacee = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx_0fee_parent[\"new_utxo\"], utxo_confirmed], version=3)\n+        node.submitpackage([tx_0fee_parent[\"hex\"], tx_child_replacee[\"hex\"]])\n+        self.check_mempool([tx_0fee_parent[\"txid\"], tx_child_replacee[\"txid\"]])\n+        tx_replacer = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo_confirmed, fee_rate=DEFAULT_FEE * 10)\n+        self.check_mempool([tx_replacer[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_ancestors_package(self):\n+        self.log.info(\"Test that v3 ancestor limits are checked within the package\")\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_parent_2_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_child_heavy = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[tx_v3_parent_normal[\"new_utxo\"], tx_v3_parent_2_normal[\"new_utxo\"]],\n+            target_weight=4004,\n+            fee_per_output=10000,\n+            version=3\n+        )\n+        assert_equal(node.getrawmempool(), [])\n+        result = node.submitpackage([tx_v3_parent_normal[\"hex\"], tx_v3_parent_2_normal[\"hex\"], tx_v3_child_heavy[\"hex\"]])\n+        assert result['package_msg'] != 'success'\n+        self.check_mempool([])\n+\n+    @cleanup\n+    def test_v3_ancestors_package_and_mempool(self):\n+        \"\"\"\n+        A v3 transaction in a package cannot have 2 v3 parents.\n+        Test that if we have a transaction graph A -> B -> C, where A, B, C are\n+        all v3 transactions, that we cannot use submitpackage to get the\n+        transactions all into the mempool.\n+\n+        Verify, in particular, that if A is already in the mempool, then\n+        submitpackage(B, C) will fail.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that v3 ancestor limits include transactions within the package and all in-mempool ancestors\")\n+        # This is our transaction \"A\":\n+        tx_in_mempool = self.wallet.send_self_transfer(from_node=node, version=3)\n+\n+        # Verify that A is in the mempool\n+        self.check_mempool([tx_in_mempool[\"txid\"]])\n+\n+        # tx_0fee_parent is our transaction \"B\"; just create it.\n+        tx_0fee_parent = self.wallet.create_self_transfer(utxo_to_spend=tx_in_mempool[\"new_utxo\"], fee=0, fee_rate=0, version=3)\n+\n+        # tx_child_violator is our transaction \"C\"; create it:\n+        tx_child_violator = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx_0fee_parent[\"new_utxo\"]], version=3)\n+\n+        # submitpackage(B, C) should fail\n+        result = node.submitpackage([tx_0fee_parent[\"hex\"], tx_child_violator[\"hex\"]])\n+        assert result['package_msg'] != 'success'",
      "path": "test/functional/mempool_accept_v3.py",
      "position": null,
      "original_position": 285,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "e649551b120da0597668941d8b72e8a3fb33f087",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "let's check the error messages here and elsewhere to prevent test regressions",
      "created_at": "2023-12-12T15:36:37Z",
      "updated_at": "2023-12-12T17:01:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424191480",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424191480"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 285,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424215142",
      "pull_request_review_id": 1777858477,
      "id": 1424215142,
      "node_id": "PRRC_kwDOABII585U48xm",
      "diff_hunk": "@@ -0,0 +1,111 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<Txid>& direct_conflicts,\n+                                        int64_t sigops)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx %s would have too many ancestors\", ptx->GetWitnessHash().ToString());\n+    }\n+    if (ancestors.empty()) {\n+        return std::nullopt;",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 81,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "fc62757320f216a8adf45726eeca121e13d6c39e",
      "in_reply_to_id": 1409768985,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've nested this part of the function inside `!ancestors.empty()` to make this clearer (and safer imo).",
      "created_at": "2023-12-12T15:52:26Z",
      "updated_at": "2023-12-12T15:52:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424215142",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424215142"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424216465",
      "pull_request_review_id": 1777860603,
      "id": 1424216465,
      "node_id": "PRRC_kwDOABII585U49GR",
      "diff_hunk": "@@ -300,5 +303,21 @@ FUZZ_TARGET(tx_package_eval, .init = initialize_tx_pool)\n     UnregisterSharedValidationInterface(outpoints_updater);\n \n     WITH_LOCK(::cs_main, tx_pool.check(chainstate.CoinsTip(), chainstate.m_chain.Height() + 1));\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {",
      "path": "src/test/fuzz/package_eval.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "e649551b120da0597668941d8b72e8a3fb33f087",
      "in_reply_to_id": 1424116143,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Pulled into a helper function and reused :+1: ",
      "created_at": "2023-12-12T15:53:23Z",
      "updated_at": "2023-12-12T15:53:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424216465",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424216465"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 307,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424237443",
      "pull_request_review_id": 1777711045,
      "id": 1424237443,
      "node_id": "PRRC_kwDOABII585U5COD",
      "diff_hunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+// V3 only allows 1 parent and 1 child.\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+/** Maximum number of transactions including a V3 tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{2};\n+\n+/** Maximum sigop-adjusted virtual size of a tx which spends from an unconfirmed v3 transaction. */\n+static constexpr int64_t V3_CHILD_MAX_VSIZE{1000};\n+// Since these limits are within the default ancestor/descendant limits, there is no need to\n+// additionally check ancestor/descendant limits for V3 transactions.\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_ANCESTOR_SIZE_LIMIT_KVB * 1000);\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_DESCENDANT_SIZE_LIMIT_KVB * 1000);\n+\n+/** Should be called for every transaction.\n+ * The following rules apply to V3 transactions:\n+ * 1. Tx with all of its ancestors must be within V3_ANCESTOR_LIMIT.\n+ * 2. Tx with all of its descendants must be within V3_DESCENDANT_LIMIT.\n+ *\n+ * If a V3 tx has V3 ancestors,\n+ * 1. The tx vsize must be within V3_CHILD_MAX_VSIZE.\n+ *\n+ * @returns an error string if any V3 rule was violated, otherwise std::nullopt.\n+ */\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,",
      "path": "src/policy/v3_policy.h",
      "position": 58,
      "original_position": 42,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "f7a3e96eee6a848b22f92a9167e47841642eba2c",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Now that V3 checks are split into 4 different areas, I think we need to brainstorm a better way of naming this function, and describing exactly what it's *not* covering. Encapsulating the final check with something very similar will probably help with my pattern matching, ala `CheckV3Inheritence`?\r\n\r\n",
      "created_at": "2023-12-12T16:08:42Z",
      "updated_at": "2023-12-12T17:01:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424237443",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424237443"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 58,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424302431",
      "pull_request_review_id": 1777711045,
      "id": 1424302431,
      "node_id": "PRRC_kwDOABII585U5SFf",
      "diff_hunk": "@@ -0,0 +1,137 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            // If duplicate txids exist, this function will still detect violations, but it\n+            // will return the earlier transaction's wtxid.\n+            Assume(v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        } else {\n+            Assume(non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> PackageV3SanityChecks(const Package& package)\n+{\n+    // Check inheritance rules within package.\n+    if (const auto inheritance_error{CheckV3Inheritance(package)}) {\n+        const auto [parent_wtxid, child_wtxid, child_v3] = inheritance_error.value();\n+        if (child_v3) {\n+            return strprintf(\"v3 tx %s cannot spend from non-v3 %s\", child_wtxid.ToString(), parent_wtxid.ToString());\n+        } else {\n+            return strprintf(\"non-v3 tx %s cannot spend from v3 %s\", child_wtxid.ToString(), parent_wtxid.ToString());\n+        }\n+    }\n+\n+    // Sanity check that package itself obeys ancestor/descendant limits. Assumes that this is\n+    // ancestor package-shaped.\n+    if (!package.empty() && package.size() > V3_CHILD_MAX_VSIZE && package.back()->nVersion == 3) {",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "f7a3e96eee6a848b22f92a9167e47841642eba2c",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`V3_CHILD_MAX_VSIZE` is the wrong thing, obviously, but it does need to be checked, otherwise a package size two doesn't  fail when the child is too big ala https://github.com/bitcoin/bitcoin/pull/28948#issuecomment-1852439055",
      "created_at": "2023-12-12T16:52:22Z",
      "updated_at": "2023-12-12T17:02:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1424302431",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424302431"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425084623",
      "pull_request_review_id": 1779209175,
      "id": 1425084623,
      "node_id": "PRRC_kwDOABII585U8RDP",
      "diff_hunk": "@@ -1332,11 +1362,24 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n             MempoolAcceptResult::FeeFailure(placeholder_state, CFeeRate(m_total_modified_fees, m_total_vsize), all_package_wtxids)}});\n     }\n \n+    // Check the last transaction's v3 ancestor limits again, assuming that all transactions\n+    // are in the ancestor set of the last tx (which is the case when a package IsChildWithParents)",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 142,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "91e83bc0fb8ba6d11d3f645047e7f00aa3247f2b",
      "in_reply_to_id": 1424141970,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok the lazy way clearly doesn't work; I think what we have to do is calculate in-package ancestors and feed that to `ApplyV3Rules` when we call it. This will also have the effect of consolidating our v3 checks so that it's cleaner. Pushing soon...",
      "created_at": "2023-12-13T09:31:52Z",
      "updated_at": "2023-12-13T09:31:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425084623",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425084623"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1366,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425180669",
      "pull_request_review_id": 1779359870,
      "id": 1425180669,
      "node_id": "PRRC_kwDOABII585U8of9",
      "diff_hunk": "@@ -0,0 +1,137 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            // If duplicate txids exist, this function will still detect violations, but it\n+            // will return the earlier transaction's wtxid.\n+            Assume(v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        } else {\n+            Assume(non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> PackageV3SanityChecks(const Package& package)\n+{\n+    // Check inheritance rules within package.\n+    if (const auto inheritance_error{CheckV3Inheritance(package)}) {\n+        const auto [parent_wtxid, child_wtxid, child_v3] = inheritance_error.value();\n+        if (child_v3) {\n+            return strprintf(\"v3 tx %s cannot spend from non-v3 %s\", child_wtxid.ToString(), parent_wtxid.ToString());\n+        } else {\n+            return strprintf(\"non-v3 tx %s cannot spend from v3 %s\", child_wtxid.ToString(), parent_wtxid.ToString());\n+        }\n+    }\n+\n+    // Sanity check that package itself obeys ancestor/descendant limits. Assumes that this is\n+    // ancestor package-shaped.\n+    if (!package.empty() && package.size() > V3_CHILD_MAX_VSIZE && package.back()->nVersion == 3) {",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "f7a3e96eee6a848b22f92a9167e47841642eba2c",
      "in_reply_to_id": 1424302431,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yikes, fixed",
      "created_at": "2023-12-13T10:50:42Z",
      "updated_at": "2023-12-13T11:19:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425180669",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425180669"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425181145",
      "pull_request_review_id": 1779359870,
      "id": 1425181145,
      "node_id": "PRRC_kwDOABII585U8onZ",
      "diff_hunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+// V3 only allows 1 parent and 1 child.\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+/** Maximum number of transactions including a V3 tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{2};\n+\n+/** Maximum sigop-adjusted virtual size of a tx which spends from an unconfirmed v3 transaction. */\n+static constexpr int64_t V3_CHILD_MAX_VSIZE{1000};\n+// Since these limits are within the default ancestor/descendant limits, there is no need to\n+// additionally check ancestor/descendant limits for V3 transactions.\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_ANCESTOR_SIZE_LIMIT_KVB * 1000);\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_DESCENDANT_SIZE_LIMIT_KVB * 1000);\n+\n+/** Should be called for every transaction.\n+ * The following rules apply to V3 transactions:\n+ * 1. Tx with all of its ancestors must be within V3_ANCESTOR_LIMIT.\n+ * 2. Tx with all of its descendants must be within V3_DESCENDANT_LIMIT.\n+ *\n+ * If a V3 tx has V3 ancestors,\n+ * 1. The tx vsize must be within V3_CHILD_MAX_VSIZE.\n+ *\n+ * @returns an error string if any V3 rule was violated, otherwise std::nullopt.\n+ */\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,",
      "path": "src/policy/v3_policy.h",
      "position": 58,
      "original_position": 42,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "f7a3e96eee6a848b22f92a9167e47841642eba2c",
      "in_reply_to_id": 1424237443,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok there are now only 2 places where v3 is checked: package sanity checks, and then `ApplyV3Rules` for each tx. I think the sanity check is very useful, as there is some heavy-ish computation done to calculate each transaction's ancestor set (including in-package and their mempool ancestors) to pass on to `ApplyV3Rules`. I've moved inheritance checks into `ApplyV3Rules` and made all errors \"v3-rule-violation\" with more details in the debug string.",
      "created_at": "2023-12-13T10:51:08Z",
      "updated_at": "2023-12-13T11:19:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425181145",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425181145"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 58,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425181660",
      "pull_request_review_id": 1779359870,
      "id": 1425181660,
      "node_id": "PRRC_kwDOABII585U8ovc",
      "diff_hunk": "@@ -1014,6 +1035,7 @@ bool MemPoolAccept::ReplacementChecks(Workspace& ws)\n }\n \n bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txns,\n+                                         const std::vector<Workspace>& workspaces,",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 97,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "91e83bc0fb8ba6d11d3f645047e7f00aa3247f2b",
      "in_reply_to_id": 1424133256,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "deleted",
      "created_at": "2023-12-13T10:51:34Z",
      "updated_at": "2023-12-13T11:19:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425181660",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425181660"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1038,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425181714",
      "pull_request_review_id": 1779359870,
      "id": 1425181714,
      "node_id": "PRRC_kwDOABII585U8owS",
      "diff_hunk": "@@ -1029,6 +1051,7 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", err_string);\n     }\n+",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 105,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "91e83bc0fb8ba6d11d3f645047e7f00aa3247f2b",
      "in_reply_to_id": 1424133394,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "deleted",
      "created_at": "2023-12-13T10:51:37Z",
      "updated_at": "2023-12-13T11:19:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425181714",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425181714"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1054,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425182035",
      "pull_request_review_id": 1779359870,
      "id": 1425182035,
      "node_id": "PRRC_kwDOABII585U8o1T",
      "diff_hunk": "@@ -0,0 +1,305 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            # Reset config options\n+            self.restart_node(0)\n+    return wrapper\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def check_mempool(self, txids):\n+        \"\"\"Assert exact contents of the node's mempool (by txid).\"\"\"\n+        mempool_contents = self.nodes[0].getrawmempool()\n+        assert_equal(len(txids), len(mempool_contents))\n+        assert all([txid in txids for txid in mempool_contents])\n+\n+    @cleanup\n+    def test_v3_acceptance(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test a child of a V3 transaction cannot be more than 1000vB\")\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        tx_v3_child_heavy = self.wallet.create_self_transfer(\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=4004,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_heavy[\"tx\"].get_vsize(), 1000)\n+        assert_raises_rpc_error(-26, \"v3-tx-nonstandard, v3 child tx is too big\", node.sendrawtransaction, tx_v3_child_heavy[\"hex\"])\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        # tx has no descendants\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 1)\n+\n+        self.log.info(\"Test that, during replacements, only the new transaction counts for V3 descendant limit\")\n+        tx_v3_child_almost_heavy = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3987,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(1000, tx_v3_child_almost_heavy[\"tx\"].get_vsize())\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+        tx_v3_child_almost_heavy_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3500,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_almost_heavy[\"tx\"].get_vsize() + tx_v3_child_almost_heavy_rbf[\"tx\"].get_vsize(), 1000)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy_rbf[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+\n+    @cleanup\n+    def test_v3_replacement(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")\n+        utxo_v3_bip125 = self.wallet.get_utxo()\n+        tx_v3_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125[\"txid\"]])\n+\n+        tx_v3_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf[\"txid\"]])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 3,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"]])\n+\n+        self.log.info(\"Test that replacements cannot cause violation of inherited V3\")\n+        utxo_v3_parent = self.wallet.get_utxo()\n+        tx_v3_parent = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_parent,\n+            version=3\n+        )\n+        tx_v3_child = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+        tx_v3_child_rbf_v2 = self.wallet.create_self_transfer(\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=2\n+        )\n+        assert_raises_rpc_error(-26, \"non-v3-tx-spends-v3\", node.sendrawtransaction, tx_v3_child_rbf_v2[\"hex\"])\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+\n+    @cleanup\n+    def test_v3_bip125(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions that don't signal BIP125 are replaceable\")\n+        assert_equal(node.getmempoolinfo()[\"fullrbf\"], False)\n+        utxo_v3_no_bip125 = self.wallet.get_utxo()\n+        tx_v3_no_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE + 1,\n+            version=3\n+        )\n+\n+        self.check_mempool([tx_v3_no_bip125[\"txid\"]])\n+        assert not node.getmempoolentry(tx_v3_no_bip125[\"txid\"])[\"bip125-replaceable\"]\n+        tx_v3_no_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_no_bip125_rbf[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_reorg(self):\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=40000\"])\n+        self.log.info(\"Test that, during a reorg, v3 rules are not enforced\")\n+        tx_v2_block = self.wallet.send_self_transfer(from_node=node, version=2)\n+        tx_v3_block = self.wallet.send_self_transfer(from_node=node, version=3)\n+        tx_v3_block2 = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"]]))\n+\n+        block = self.generate(node, 1)\n+        assert_equal(node.getrawmempool(), [])\n+        tx_v2_from_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block[\"new_utxo\"], version=2)\n+        tx_v3_from_v2 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v2_block[\"new_utxo\"], version=3)\n+        tx_v3_child_large = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block2[\"new_utxo\"], target_weight=5000, version=3)\n+        assert_greater_than(node.getmempoolentry(tx_v3_child_large[\"txid\"])[\"vsize\"], 1000)\n+        assert_equal(set(node.getrawmempool()), set([tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        node.invalidateblock(block[0])\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"], tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        # This is needed because generate() will create the exact same block again.\n+        node.reconsiderblock(block[0])\n+\n+\n+    @cleanup\n+    def test_nondefault_package_limits(self):\n+        \"\"\"\n+        Max standard tx size + V3 rules imply the ancestor/descendant rules (at their default\n+        values), but those checks must not be skipped. Ensure both sets of checks are done by\n+        changing the ancestor/descendant limit configurations.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that a decreased limitdescendantsize also applies to V3 child\")\n+        self.restart_node(0, extra_args=[\"-limitdescendantsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large1 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large1 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large1[\"new_utxo\"], version=3)\n+        # Child is within V3 limits\n+        assert_greater_than(1000, tx_v3_child_large1[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", node.sendrawtransaction,\n+                tx_v3_child_large1[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large1[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_large1[\"txid\"])[\"descendantcount\"], 1)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Test that a decreased limitancestorsize also applies to V3 parent\")\n+        self.restart_node(0, extra_args=[\"-limitancestorsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large2 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large2[\"new_utxo\"], version=3)\n+        # Child is within V3 limits\n+        assert_greater_than_or_equal(1000, tx_v3_child_large2[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", node.sendrawtransaction,\n+                tx_v3_child_large2[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large2[\"txid\"]])\n+\n+    @cleanup\n+    def test_fee_dependency_replacements(self):\n+        \"\"\"\n+        Since v3 introduces the possibility of 0-fee (i.e. below min relay feerate) transactions in\n+        the mempool, it's possible for these transactions' sponsors to disappear due to RBF. In\n+        those situations, the 0-fee transaction must be evicted along with the replacements.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that below-min-relay-feerate transactions are removed in RBF\")\n+        tx_0fee_parent = self.wallet.create_self_transfer(fee=0, fee_rate=0, version=3)\n+        utxo_confirmed = self.wallet.get_utxo()\n+        tx_child_replacee = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx_0fee_parent[\"new_utxo\"], utxo_confirmed], version=3)\n+        node.submitpackage([tx_0fee_parent[\"hex\"], tx_child_replacee[\"hex\"]])\n+        self.check_mempool([tx_0fee_parent[\"txid\"], tx_child_replacee[\"txid\"]])\n+        tx_replacer = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo_confirmed, fee_rate=DEFAULT_FEE * 10)\n+        self.check_mempool([tx_replacer[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_ancestors_package(self):\n+        self.log.info(\"Test that v3 ancestor limits are checked within the package\")\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_parent_2_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_child_heavy = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[tx_v3_parent_normal[\"new_utxo\"], tx_v3_parent_2_normal[\"new_utxo\"]],\n+            target_weight=4004,\n+            fee_per_output=10000,\n+            version=3\n+        )\n+        assert_equal(node.getrawmempool(), [])\n+        result = node.submitpackage([tx_v3_parent_normal[\"hex\"], tx_v3_parent_2_normal[\"hex\"], tx_v3_child_heavy[\"hex\"]])\n+        assert result['package_msg'] != 'success'",
      "path": "test/functional/mempool_accept_v3.py",
      "position": null,
      "original_position": 255,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "e649551b120da0597668941d8b72e8a3fb33f087",
      "in_reply_to_id": 1424190533,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "added error string checks everywhere",
      "created_at": "2023-12-13T10:51:53Z",
      "updated_at": "2023-12-13T11:19:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425182035",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425182035"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 255,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425182152",
      "pull_request_review_id": 1779359870,
      "id": 1425182152,
      "node_id": "PRRC_kwDOABII585U8o3I",
      "diff_hunk": "@@ -0,0 +1,305 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            # Reset config options\n+            self.restart_node(0)\n+    return wrapper\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def check_mempool(self, txids):\n+        \"\"\"Assert exact contents of the node's mempool (by txid).\"\"\"\n+        mempool_contents = self.nodes[0].getrawmempool()\n+        assert_equal(len(txids), len(mempool_contents))\n+        assert all([txid in txids for txid in mempool_contents])\n+\n+    @cleanup\n+    def test_v3_acceptance(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test a child of a V3 transaction cannot be more than 1000vB\")\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        tx_v3_child_heavy = self.wallet.create_self_transfer(\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=4004,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_heavy[\"tx\"].get_vsize(), 1000)\n+        assert_raises_rpc_error(-26, \"v3-tx-nonstandard, v3 child tx is too big\", node.sendrawtransaction, tx_v3_child_heavy[\"hex\"])\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        # tx has no descendants\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 1)\n+\n+        self.log.info(\"Test that, during replacements, only the new transaction counts for V3 descendant limit\")\n+        tx_v3_child_almost_heavy = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3987,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(1000, tx_v3_child_almost_heavy[\"tx\"].get_vsize())\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+        tx_v3_child_almost_heavy_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3500,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_almost_heavy[\"tx\"].get_vsize() + tx_v3_child_almost_heavy_rbf[\"tx\"].get_vsize(), 1000)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy_rbf[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+\n+    @cleanup\n+    def test_v3_replacement(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")\n+        utxo_v3_bip125 = self.wallet.get_utxo()\n+        tx_v3_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125[\"txid\"]])\n+\n+        tx_v3_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf[\"txid\"]])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 3,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"]])\n+\n+        self.log.info(\"Test that replacements cannot cause violation of inherited V3\")\n+        utxo_v3_parent = self.wallet.get_utxo()\n+        tx_v3_parent = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_parent,\n+            version=3\n+        )\n+        tx_v3_child = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+        tx_v3_child_rbf_v2 = self.wallet.create_self_transfer(\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=2\n+        )\n+        assert_raises_rpc_error(-26, \"non-v3-tx-spends-v3\", node.sendrawtransaction, tx_v3_child_rbf_v2[\"hex\"])\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+\n+    @cleanup\n+    def test_v3_bip125(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions that don't signal BIP125 are replaceable\")\n+        assert_equal(node.getmempoolinfo()[\"fullrbf\"], False)\n+        utxo_v3_no_bip125 = self.wallet.get_utxo()\n+        tx_v3_no_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE + 1,\n+            version=3\n+        )\n+\n+        self.check_mempool([tx_v3_no_bip125[\"txid\"]])\n+        assert not node.getmempoolentry(tx_v3_no_bip125[\"txid\"])[\"bip125-replaceable\"]\n+        tx_v3_no_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_no_bip125_rbf[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_reorg(self):\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=40000\"])\n+        self.log.info(\"Test that, during a reorg, v3 rules are not enforced\")\n+        tx_v2_block = self.wallet.send_self_transfer(from_node=node, version=2)\n+        tx_v3_block = self.wallet.send_self_transfer(from_node=node, version=3)\n+        tx_v3_block2 = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"]]))\n+\n+        block = self.generate(node, 1)\n+        assert_equal(node.getrawmempool(), [])\n+        tx_v2_from_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block[\"new_utxo\"], version=2)\n+        tx_v3_from_v2 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v2_block[\"new_utxo\"], version=3)\n+        tx_v3_child_large = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block2[\"new_utxo\"], target_weight=5000, version=3)\n+        assert_greater_than(node.getmempoolentry(tx_v3_child_large[\"txid\"])[\"vsize\"], 1000)\n+        assert_equal(set(node.getrawmempool()), set([tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        node.invalidateblock(block[0])\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"], tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        # This is needed because generate() will create the exact same block again.\n+        node.reconsiderblock(block[0])\n+\n+\n+    @cleanup\n+    def test_nondefault_package_limits(self):\n+        \"\"\"\n+        Max standard tx size + V3 rules imply the ancestor/descendant rules (at their default\n+        values), but those checks must not be skipped. Ensure both sets of checks are done by\n+        changing the ancestor/descendant limit configurations.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that a decreased limitdescendantsize also applies to V3 child\")\n+        self.restart_node(0, extra_args=[\"-limitdescendantsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large1 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large1 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large1[\"new_utxo\"], version=3)\n+        # Child is within V3 limits\n+        assert_greater_than(1000, tx_v3_child_large1[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", node.sendrawtransaction,\n+                tx_v3_child_large1[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large1[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_large1[\"txid\"])[\"descendantcount\"], 1)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Test that a decreased limitancestorsize also applies to V3 parent\")\n+        self.restart_node(0, extra_args=[\"-limitancestorsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large2 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large2[\"new_utxo\"], version=3)\n+        # Child is within V3 limits\n+        assert_greater_than_or_equal(1000, tx_v3_child_large2[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", node.sendrawtransaction,\n+                tx_v3_child_large2[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large2[\"txid\"]])\n+\n+    @cleanup\n+    def test_fee_dependency_replacements(self):\n+        \"\"\"\n+        Since v3 introduces the possibility of 0-fee (i.e. below min relay feerate) transactions in\n+        the mempool, it's possible for these transactions' sponsors to disappear due to RBF. In\n+        those situations, the 0-fee transaction must be evicted along with the replacements.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that below-min-relay-feerate transactions are removed in RBF\")\n+        tx_0fee_parent = self.wallet.create_self_transfer(fee=0, fee_rate=0, version=3)\n+        utxo_confirmed = self.wallet.get_utxo()\n+        tx_child_replacee = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx_0fee_parent[\"new_utxo\"], utxo_confirmed], version=3)\n+        node.submitpackage([tx_0fee_parent[\"hex\"], tx_child_replacee[\"hex\"]])\n+        self.check_mempool([tx_0fee_parent[\"txid\"], tx_child_replacee[\"txid\"]])\n+        tx_replacer = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo_confirmed, fee_rate=DEFAULT_FEE * 10)\n+        self.check_mempool([tx_replacer[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_ancestors_package(self):\n+        self.log.info(\"Test that v3 ancestor limits are checked within the package\")\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_parent_2_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_child_heavy = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[tx_v3_parent_normal[\"new_utxo\"], tx_v3_parent_2_normal[\"new_utxo\"]],\n+            target_weight=4004,\n+            fee_per_output=10000,\n+            version=3\n+        )\n+        assert_equal(node.getrawmempool(), [])\n+        result = node.submitpackage([tx_v3_parent_normal[\"hex\"], tx_v3_parent_2_normal[\"hex\"], tx_v3_child_heavy[\"hex\"]])\n+        assert result['package_msg'] != 'success'\n+        self.check_mempool([])\n+\n+    @cleanup\n+    def test_v3_ancestors_package_and_mempool(self):\n+        \"\"\"\n+        A v3 transaction in a package cannot have 2 v3 parents.\n+        Test that if we have a transaction graph A -> B -> C, where A, B, C are\n+        all v3 transactions, that we cannot use submitpackage to get the\n+        transactions all into the mempool.\n+\n+        Verify, in particular, that if A is already in the mempool, then\n+        submitpackage(B, C) will fail.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that v3 ancestor limits include transactions within the package and all in-mempool ancestors\")\n+        # This is our transaction \"A\":\n+        tx_in_mempool = self.wallet.send_self_transfer(from_node=node, version=3)\n+\n+        # Verify that A is in the mempool\n+        self.check_mempool([tx_in_mempool[\"txid\"]])\n+\n+        # tx_0fee_parent is our transaction \"B\"; just create it.\n+        tx_0fee_parent = self.wallet.create_self_transfer(utxo_to_spend=tx_in_mempool[\"new_utxo\"], fee=0, fee_rate=0, version=3)\n+\n+        # tx_child_violator is our transaction \"C\"; create it:\n+        tx_child_violator = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx_0fee_parent[\"new_utxo\"]], version=3)\n+\n+        # submitpackage(B, C) should fail\n+        result = node.submitpackage([tx_0fee_parent[\"hex\"], tx_child_violator[\"hex\"]])\n+        assert result['package_msg'] != 'success'",
      "path": "test/functional/mempool_accept_v3.py",
      "position": null,
      "original_position": 285,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "e649551b120da0597668941d8b72e8a3fb33f087",
      "in_reply_to_id": 1424191480,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2023-12-13T10:52:00Z",
      "updated_at": "2023-12-13T11:19:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425182152",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425182152"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 285,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425606237",
      "pull_request_review_id": 1780045798,
      "id": 1425606237,
      "node_id": "PRRC_kwDOABII585U-QZd",
      "diff_hunk": "@@ -116,3 +117,24 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n     }\n     return std::nullopt;\n }\n+\n+void CheckMempoolV3Invariants(const CTxMemPool& tx_pool, bool check_fees)\n+{\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {\n+        const auto& entry = *Assert(tx_pool.GetEntry(tx_info.tx->GetHash()));\n+        if (tx_info.tx->nVersion == 3) {\n+            // Check that special v3 ancestor/descendant limits and rules are always respected\n+            Assert(entry.GetCountWithDescendants() <= V3_DESCENDANT_LIMIT);\n+            Assert(entry.GetCountWithAncestors() <= V3_ANCESTOR_LIMIT);\n+            // If this transaction has at least 1 ancestor, it's a \"child\" and has restricted weight.\n+            if (entry.GetCountWithAncestors() > 1) {\n+                Assert(entry.GetTxSize() <= V3_CHILD_MAX_VSIZE);\n+            }\n+        }\n+        // Transactions with fees of 0 or lower should be proactively trimmed.",
      "path": "src/test/util/txmempool.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this only works if prioritization happens before mempool acceptance\r\n\r\nI'd just set `check_fees` to false if Prio had just been called before calling this, to stay simple.",
      "created_at": "2023-12-13T16:31:39Z",
      "updated_at": "2023-12-13T16:39:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425606237",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425606237"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 135,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425695018",
      "pull_request_review_id": 1780186265,
      "id": 1425695018,
      "node_id": "PRRC_kwDOABII585U-mEq",
      "diff_hunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+// V3 only allows 1 parent and 1 child.\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+/** Maximum number of transactions including a V3 tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{2};\n+\n+/** Maximum sigop-adjusted virtual size of a tx which spends from an unconfirmed v3 transaction. */\n+static constexpr int64_t V3_CHILD_MAX_VSIZE{1000};\n+// Since these limits are within the default ancestor/descendant limits, there is no need to\n+// additionally check ancestor/descendant limits for V3 transactions.\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_ANCESTOR_SIZE_LIMIT_KVB * 1000);\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_DESCENDANT_SIZE_LIMIT_KVB * 1000);\n+\n+/** Should be called for every transaction.\n+ * \n+ * The following rules apply to V3 transactions:\n+ * 1. A v3 tx must only have v3 unconfirmed ancestors.\n+ * 2. A non-v3 tx must only have non-v3 unconfirmed ancestors.\n+ * 3. Tx with all of its ancestors must be within V3_ANCESTOR_LIMIT.\n+ * 4. Tx with all of its descendants must be within V3_DESCENDANT_LIMIT.\n+ * 5. If a V3 tx has any ancestors, the tx vsize must be within V3_CHILD_MAX_VSIZE.\n+ *\n+ * @returns an error string if any v3 rule was violated, otherwise std::nullopt.\n+ */\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        unsigned int num_other_ancestors,\n+                                        const std::set<Txid>& direct_conflicts,\n+                                        int64_t vsize);\n+\n+/** Helper function for PackageV3SanityChecks below.\n+ * Any two unconfirmed transactions with a dependency relationship must either both be v3 or both\n+ * be non-v3. Check this rule for any list of unconfirmed transactions (no topology requirements).\n+ *\n+ * @returns a tuple (parent wtxid, child wtxid, bool) where one is V3 but the other is not, if at\n+ * least one such pair exists. The bool represents whether the child is v3 or not. There may be\n+ * other such pairs that are not returned.\n+ * Otherwise std::nullopt.\n+ */\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package);\n+\n+/** Check inheritance of v3 and ancestor/descendant limits within a package (this assumes that all\n+ * transactions are in the ancestor set of the last tx, which is true if IsChildWithParents). This\n+ * check does not fully check all v3 rules, but allows us to quit early before accessing mempool.  */\n+std::optional<std::string> PackageV3SanityChecks(const Package& package);",
      "path": "src/policy/v3_policy.h",
      "position": null,
      "original_position": 63,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Might be worth stressing that this is the only place where in-package inheritance is checked\r\n\r\n\"Necessary but insufficient\"",
      "created_at": "2023-12-13T17:48:40Z",
      "updated_at": "2023-12-13T18:06:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425695018",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425695018"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425701016",
      "pull_request_review_id": 1780186265,
      "id": 1425701016,
      "node_id": "PRRC_kwDOABII585U-niY",
      "diff_hunk": "@@ -116,3 +117,24 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n     }\n     return std::nullopt;\n }\n+\n+void CheckMempoolV3Invariants(const CTxMemPool& tx_pool, bool check_fees)\n+{\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {\n+        const auto& entry = *Assert(tx_pool.GetEntry(tx_info.tx->GetHash()));\n+        if (tx_info.tx->nVersion == 3) {\n+            // Check that special v3 ancestor/descendant limits and rules are always respected\n+            Assert(entry.GetCountWithDescendants() <= V3_DESCENDANT_LIMIT);\n+            Assert(entry.GetCountWithAncestors() <= V3_ANCESTOR_LIMIT);\n+            // If this transaction has at least 1 ancestor, it's a \"child\" and has restricted weight.\n+            if (entry.GetCountWithAncestors() > 1) {\n+                Assert(entry.GetTxSize() <= V3_CHILD_MAX_VSIZE);\n+            }",
      "path": "src/test/util/txmempool.cpp",
      "position": 28,
      "original_position": 25,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n                const auto& parents = entry.GetMemPoolParentsConst();\r\n                Assert(parents.begin()->get().GetTx().nVersion == 3);\r\n            }\r\n            if (entry.GetCountWithDescendants() > 1) {\r\n                const auto& children = entry.GetMemPoolChildrenConst();\r\n                Assert(children.begin()->get().GetTx().nVersion == 3);\r\n            }\r\n```\r\nto catch inheritance failures",
      "created_at": "2023-12-13T17:54:43Z",
      "updated_at": "2023-12-13T19:17:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425701016",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425701016"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 136,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425704039",
      "pull_request_review_id": 1780186265,
      "id": 1425704039,
      "node_id": "PRRC_kwDOABII585U-oRn",
      "diff_hunk": "@@ -0,0 +1,316 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            # Reset config options\n+            self.restart_node(0)\n+    return wrapper\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def check_mempool(self, txids):\n+        \"\"\"Assert exact contents of the node's mempool (by txid).\"\"\"\n+        mempool_contents = self.nodes[0].getrawmempool()\n+        assert_equal(len(txids), len(mempool_contents))\n+        assert all([txid in txids for txid in mempool_contents])\n+\n+    @cleanup\n+    def test_v3_acceptance(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test a child of a V3 transaction cannot be more than 1000vB\")\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        tx_v3_child_heavy = self.wallet.create_self_transfer(\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=4004,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_heavy[\"tx\"].get_vsize(), 1000)\n+        assert_raises_rpc_error(-26, \"v3-rule-violation, v3 child tx is too big\", node.sendrawtransaction, tx_v3_child_heavy[\"hex\"])\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        # tx has no descendants\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 1)\n+\n+        self.log.info(\"Test that, during replacements, only the new transaction counts for V3 descendant limit\")\n+        tx_v3_child_almost_heavy = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3987,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(1000, tx_v3_child_almost_heavy[\"tx\"].get_vsize())\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+        tx_v3_child_almost_heavy_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3500,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_almost_heavy[\"tx\"].get_vsize() + tx_v3_child_almost_heavy_rbf[\"tx\"].get_vsize(), 1000)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy_rbf[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+\n+    @cleanup\n+    def test_v3_replacement(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")\n+        utxo_v3_bip125 = self.wallet.get_utxo()\n+        tx_v3_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125[\"txid\"]])\n+\n+        tx_v3_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf[\"txid\"]])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 3,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"]])\n+\n+        self.log.info(\"Test that replacements cannot cause violation of inherited V3\")\n+        utxo_v3_parent = self.wallet.get_utxo()\n+        tx_v3_parent = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_parent,\n+            version=3\n+        )\n+        tx_v3_child = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+        tx_v3_child_rbf_v2 = self.wallet.create_self_transfer(\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=2\n+        )\n+        assert_raises_rpc_error(-26, f\"v3-rule-violation, non-v3 tx {tx_v3_child_rbf_v2['wtxid']} cannot spend from v3 tx {tx_v3_parent['wtxid']}\", node.sendrawtransaction, tx_v3_child_rbf_v2[\"hex\"])\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+\n+    @cleanup\n+    def test_v3_bip125(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions that don't signal BIP125 are replaceable\")\n+        assert_equal(node.getmempoolinfo()[\"fullrbf\"], False)\n+        utxo_v3_no_bip125 = self.wallet.get_utxo()\n+        tx_v3_no_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE + 1,\n+            version=3\n+        )\n+\n+        self.check_mempool([tx_v3_no_bip125[\"txid\"]])\n+        assert not node.getmempoolentry(tx_v3_no_bip125[\"txid\"])[\"bip125-replaceable\"]\n+        tx_v3_no_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_no_bip125_rbf[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_reorg(self):\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=40000\"])\n+        self.log.info(\"Test that, during a reorg, v3 rules are not enforced\")\n+        tx_v2_block = self.wallet.send_self_transfer(from_node=node, version=2)\n+        tx_v3_block = self.wallet.send_self_transfer(from_node=node, version=3)\n+        tx_v3_block2 = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"]]))\n+\n+        block = self.generate(node, 1)\n+        assert_equal(node.getrawmempool(), [])\n+        tx_v2_from_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block[\"new_utxo\"], version=2)\n+        tx_v3_from_v2 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v2_block[\"new_utxo\"], version=3)\n+        tx_v3_child_large = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block2[\"new_utxo\"], target_weight=5000, version=3)\n+        assert_greater_than(node.getmempoolentry(tx_v3_child_large[\"txid\"])[\"vsize\"], 1000)\n+        assert_equal(set(node.getrawmempool()), set([tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        node.invalidateblock(block[0])\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"], tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        # This is needed because generate() will create the exact same block again.\n+        node.reconsiderblock(block[0])\n+\n+\n+    @cleanup\n+    def test_nondefault_package_limits(self):\n+        \"\"\"\n+        Max standard tx size + V3 rules imply the ancestor/descendant rules (at their default\n+        values), but those checks must not be skipped. Ensure both sets of checks are done by\n+        changing the ancestor/descendant limit configurations.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that a decreased limitdescendantsize also applies to V3 child\")\n+        self.restart_node(0, extra_args=[\"-limitdescendantsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large1 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large1 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large1[\"new_utxo\"], version=3)\n+        # Child is within V3 limits, but parent's descendant limit is exceeded\n+        assert_greater_than(1000, tx_v3_child_large1[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, f\"too-long-mempool-chain, exceeds descendant size limit for tx {tx_v3_parent_large1['txid']}\", node.sendrawtransaction, tx_v3_child_large1[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large1[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_large1[\"txid\"])[\"descendantcount\"], 1)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Test that a decreased limitancestorsize also applies to V3 parent\")\n+        self.restart_node(0, extra_args=[\"-limitancestorsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large2 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large2[\"new_utxo\"], version=3)\n+        # Child is within V3 limits\n+        assert_greater_than_or_equal(1000, tx_v3_child_large2[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, f\"too-long-mempool-chain, exceeds ancestor size limit\", node.sendrawtransaction, tx_v3_child_large2[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large2[\"txid\"]])\n+\n+    @cleanup\n+    def test_fee_dependency_replacements(self):\n+        \"\"\"\n+        Since v3 introduces the possibility of 0-fee (i.e. below min relay feerate) transactions in\n+        the mempool, it's possible for these transactions' sponsors to disappear due to RBF. In\n+        those situations, the 0-fee transaction must be evicted along with the replacements.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that below-min-relay-feerate transactions are removed in RBF\")\n+        tx_0fee_parent = self.wallet.create_self_transfer(fee=0, fee_rate=0, version=3)\n+        utxo_confirmed = self.wallet.get_utxo()\n+        tx_child_replacee = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx_0fee_parent[\"new_utxo\"], utxo_confirmed], version=3)\n+        node.submitpackage([tx_0fee_parent[\"hex\"], tx_child_replacee[\"hex\"]])\n+        self.check_mempool([tx_0fee_parent[\"txid\"], tx_child_replacee[\"txid\"]])\n+        tx_replacer = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo_confirmed, fee_rate=DEFAULT_FEE * 10)\n+        self.check_mempool([tx_replacer[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_ancestors_package(self):\n+        self.log.info(\"Test that v3 ancestor limits are checked within the package\")\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_parent_2_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_child_multiparent = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[tx_v3_parent_normal[\"new_utxo\"], tx_v3_parent_2_normal[\"new_utxo\"]],\n+            target_weight=4000,\n+            fee_per_output=10000,\n+            version=3\n+        )\n+        tx_v3_child_heavy = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[tx_v3_parent_normal[\"new_utxo\"]],\n+            target_weight=4004,\n+            fee_per_output=10000,\n+            version=3\n+        )\n+\n+        assert_equal(node.getrawmempool(), [])\n+        result = node.submitpackage([tx_v3_parent_normal[\"hex\"], tx_v3_parent_2_normal[\"hex\"], tx_v3_child_multiparent[\"hex\"]])\n+        assert_equal(result['package_msg'], \"v3-violation\")\n+        self.check_mempool([])\n+\n+        assert_equal(node.getrawmempool(), [])\n+        result = node.submitpackage([tx_v3_parent_normal[\"hex\"], tx_v3_child_heavy[\"hex\"]])\n+        assert_equal(result['package_msg'], \"v3-violation\")\n+        self.check_mempool([])\n+\n+    @cleanup\n+    def test_v3_ancestors_package_and_mempool(self):\n+        \"\"\"\n+        A v3 transaction in a package cannot have 2 v3 parents.\n+        Test that if we have a transaction graph A -> B -> C, where A, B, C are\n+        all v3 transactions, that we cannot use submitpackage to get the\n+        transactions all into the mempool.\n+\n+        Verify, in particular, that if A is already in the mempool, then\n+        submitpackage(B, C) will fail.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that v3 ancestor limits include transactions within the package and all in-mempool ancestors\")\n+        # This is our transaction \"A\":\n+        tx_in_mempool = self.wallet.send_self_transfer(from_node=node, version=3)\n+\n+        # Verify that A is in the mempool\n+        self.check_mempool([tx_in_mempool[\"txid\"]])\n+\n+        # tx_0fee_parent is our transaction \"B\"; just create it.\n+        tx_0fee_parent = self.wallet.create_self_transfer(utxo_to_spend=tx_in_mempool[\"new_utxo\"], fee=0, fee_rate=0, version=3)\n+\n+        # tx_child_violator is our transaction \"C\"; create it:\n+        tx_child_violator = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx_0fee_parent[\"new_utxo\"]], version=3)\n+\n+        # submitpackage(B, C) should fail\n+        result = node.submitpackage([tx_0fee_parent[\"hex\"], tx_child_violator[\"hex\"]])\n+        assert_equal(result['package_msg'], \"transaction failed\")\n+        assert_equal(result['tx-results'][tx_child_violator['wtxid']]['error'], f\"v3-rule-violation, tx {tx_child_violator['wtxid']} would have too many ancestors\")\n+        self.check_mempool([tx_in_mempool[\"txid\"]])\n+",
      "path": "test/functional/mempool_accept_v3.py",
      "position": 298,
      "original_position": 298,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "no straight forward coverage of this I think, so:\r\n\r\n```suggestion\r\n\r\n    @cleanup\r\n    def test_v3_package_inheritence(self):\r\n        self.log.info(\"Test that v3 inheritence is checked within package\")\r\n        node = self.nodes[0]\r\n        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\r\n        tx_v3_parent = self.wallet.create_self_transfer(\r\n            fee_rate=0,\r\n            version=3\r\n        )\r\n        tx_v2_child = self.wallet.create_self_transfer(\r\n            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\r\n            fee=10000,\r\n            version=2\r\n        )\r\n\r\n        assert_equal(node.getrawmempool(), [])\r\n        result = node.submitpackage([tx_v3_parent[\"hex\"], tx_v2_child[\"hex\"]])\r\n        assert_equal(result['package_msg'], \"v3-violation\")\r\n        self.check_mempool([])\r\n\r\n```",
      "created_at": "2023-12-13T17:57:40Z",
      "updated_at": "2023-12-13T18:10:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425704039",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425704039"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 298,
      "original_line": 298,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425705028",
      "pull_request_review_id": 1780186265,
      "id": 1425705028,
      "node_id": "PRRC_kwDOABII585U-ohE",
      "diff_hunk": "@@ -0,0 +1,316 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            # Reset config options\n+            self.restart_node(0)\n+    return wrapper\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def check_mempool(self, txids):\n+        \"\"\"Assert exact contents of the node's mempool (by txid).\"\"\"\n+        mempool_contents = self.nodes[0].getrawmempool()\n+        assert_equal(len(txids), len(mempool_contents))\n+        assert all([txid in txids for txid in mempool_contents])\n+\n+    @cleanup\n+    def test_v3_acceptance(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test a child of a V3 transaction cannot be more than 1000vB\")\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        tx_v3_child_heavy = self.wallet.create_self_transfer(\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=4004,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_heavy[\"tx\"].get_vsize(), 1000)\n+        assert_raises_rpc_error(-26, \"v3-rule-violation, v3 child tx is too big\", node.sendrawtransaction, tx_v3_child_heavy[\"hex\"])\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        # tx has no descendants\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 1)\n+\n+        self.log.info(\"Test that, during replacements, only the new transaction counts for V3 descendant limit\")\n+        tx_v3_child_almost_heavy = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3987,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(1000, tx_v3_child_almost_heavy[\"tx\"].get_vsize())\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+        tx_v3_child_almost_heavy_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3500,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_almost_heavy[\"tx\"].get_vsize() + tx_v3_child_almost_heavy_rbf[\"tx\"].get_vsize(), 1000)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy_rbf[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+\n+    @cleanup\n+    def test_v3_replacement(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")\n+        utxo_v3_bip125 = self.wallet.get_utxo()\n+        tx_v3_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125[\"txid\"]])\n+\n+        tx_v3_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf[\"txid\"]])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 3,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"]])\n+\n+        self.log.info(\"Test that replacements cannot cause violation of inherited V3\")\n+        utxo_v3_parent = self.wallet.get_utxo()\n+        tx_v3_parent = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_parent,\n+            version=3\n+        )\n+        tx_v3_child = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+        tx_v3_child_rbf_v2 = self.wallet.create_self_transfer(\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=2\n+        )\n+        assert_raises_rpc_error(-26, f\"v3-rule-violation, non-v3 tx {tx_v3_child_rbf_v2['wtxid']} cannot spend from v3 tx {tx_v3_parent['wtxid']}\", node.sendrawtransaction, tx_v3_child_rbf_v2[\"hex\"])\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+\n+    @cleanup\n+    def test_v3_bip125(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions that don't signal BIP125 are replaceable\")\n+        assert_equal(node.getmempoolinfo()[\"fullrbf\"], False)\n+        utxo_v3_no_bip125 = self.wallet.get_utxo()\n+        tx_v3_no_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE + 1,\n+            version=3\n+        )\n+\n+        self.check_mempool([tx_v3_no_bip125[\"txid\"]])\n+        assert not node.getmempoolentry(tx_v3_no_bip125[\"txid\"])[\"bip125-replaceable\"]\n+        tx_v3_no_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_no_bip125_rbf[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_reorg(self):\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=40000\"])\n+        self.log.info(\"Test that, during a reorg, v3 rules are not enforced\")\n+        tx_v2_block = self.wallet.send_self_transfer(from_node=node, version=2)\n+        tx_v3_block = self.wallet.send_self_transfer(from_node=node, version=3)\n+        tx_v3_block2 = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"]]))\n+\n+        block = self.generate(node, 1)\n+        assert_equal(node.getrawmempool(), [])\n+        tx_v2_from_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block[\"new_utxo\"], version=2)\n+        tx_v3_from_v2 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v2_block[\"new_utxo\"], version=3)\n+        tx_v3_child_large = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block2[\"new_utxo\"], target_weight=5000, version=3)\n+        assert_greater_than(node.getmempoolentry(tx_v3_child_large[\"txid\"])[\"vsize\"], 1000)\n+        assert_equal(set(node.getrawmempool()), set([tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        node.invalidateblock(block[0])\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"], tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        # This is needed because generate() will create the exact same block again.\n+        node.reconsiderblock(block[0])\n+\n+\n+    @cleanup\n+    def test_nondefault_package_limits(self):\n+        \"\"\"\n+        Max standard tx size + V3 rules imply the ancestor/descendant rules (at their default\n+        values), but those checks must not be skipped. Ensure both sets of checks are done by\n+        changing the ancestor/descendant limit configurations.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that a decreased limitdescendantsize also applies to V3 child\")\n+        self.restart_node(0, extra_args=[\"-limitdescendantsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large1 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large1 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large1[\"new_utxo\"], version=3)\n+        # Child is within V3 limits, but parent's descendant limit is exceeded\n+        assert_greater_than(1000, tx_v3_child_large1[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, f\"too-long-mempool-chain, exceeds descendant size limit for tx {tx_v3_parent_large1['txid']}\", node.sendrawtransaction, tx_v3_child_large1[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large1[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_large1[\"txid\"])[\"descendantcount\"], 1)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Test that a decreased limitancestorsize also applies to V3 parent\")\n+        self.restart_node(0, extra_args=[\"-limitancestorsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large2 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large2[\"new_utxo\"], version=3)\n+        # Child is within V3 limits\n+        assert_greater_than_or_equal(1000, tx_v3_child_large2[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, f\"too-long-mempool-chain, exceeds ancestor size limit\", node.sendrawtransaction, tx_v3_child_large2[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large2[\"txid\"]])\n+\n+    @cleanup\n+    def test_fee_dependency_replacements(self):\n+        \"\"\"\n+        Since v3 introduces the possibility of 0-fee (i.e. below min relay feerate) transactions in\n+        the mempool, it's possible for these transactions' sponsors to disappear due to RBF. In\n+        those situations, the 0-fee transaction must be evicted along with the replacements.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that below-min-relay-feerate transactions are removed in RBF\")\n+        tx_0fee_parent = self.wallet.create_self_transfer(fee=0, fee_rate=0, version=3)\n+        utxo_confirmed = self.wallet.get_utxo()\n+        tx_child_replacee = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx_0fee_parent[\"new_utxo\"], utxo_confirmed], version=3)\n+        node.submitpackage([tx_0fee_parent[\"hex\"], tx_child_replacee[\"hex\"]])\n+        self.check_mempool([tx_0fee_parent[\"txid\"], tx_child_replacee[\"txid\"]])\n+        tx_replacer = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo_confirmed, fee_rate=DEFAULT_FEE * 10)\n+        self.check_mempool([tx_replacer[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_ancestors_package(self):\n+        self.log.info(\"Test that v3 ancestor limits are checked within the package\")\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_parent_2_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_child_multiparent = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[tx_v3_parent_normal[\"new_utxo\"], tx_v3_parent_2_normal[\"new_utxo\"]],\n+            target_weight=4000,\n+            fee_per_output=10000,\n+            version=3\n+        )\n+        tx_v3_child_heavy = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[tx_v3_parent_normal[\"new_utxo\"]],\n+            target_weight=4004,\n+            fee_per_output=10000,\n+            version=3\n+        )\n+\n+        assert_equal(node.getrawmempool(), [])\n+        result = node.submitpackage([tx_v3_parent_normal[\"hex\"], tx_v3_parent_2_normal[\"hex\"], tx_v3_child_multiparent[\"hex\"]])\n+        assert_equal(result['package_msg'], \"v3-violation\")\n+        self.check_mempool([])\n+\n+        assert_equal(node.getrawmempool(), [])\n+        result = node.submitpackage([tx_v3_parent_normal[\"hex\"], tx_v3_child_heavy[\"hex\"]])\n+        assert_equal(result['package_msg'], \"v3-violation\")\n+        self.check_mempool([])\n+\n+    @cleanup\n+    def test_v3_ancestors_package_and_mempool(self):\n+        \"\"\"\n+        A v3 transaction in a package cannot have 2 v3 parents.\n+        Test that if we have a transaction graph A -> B -> C, where A, B, C are\n+        all v3 transactions, that we cannot use submitpackage to get the\n+        transactions all into the mempool.\n+\n+        Verify, in particular, that if A is already in the mempool, then\n+        submitpackage(B, C) will fail.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that v3 ancestor limits include transactions within the package and all in-mempool ancestors\")\n+        # This is our transaction \"A\":\n+        tx_in_mempool = self.wallet.send_self_transfer(from_node=node, version=3)\n+\n+        # Verify that A is in the mempool\n+        self.check_mempool([tx_in_mempool[\"txid\"]])\n+\n+        # tx_0fee_parent is our transaction \"B\"; just create it.\n+        tx_0fee_parent = self.wallet.create_self_transfer(utxo_to_spend=tx_in_mempool[\"new_utxo\"], fee=0, fee_rate=0, version=3)\n+\n+        # tx_child_violator is our transaction \"C\"; create it:\n+        tx_child_violator = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx_0fee_parent[\"new_utxo\"]], version=3)\n+\n+        # submitpackage(B, C) should fail\n+        result = node.submitpackage([tx_0fee_parent[\"hex\"], tx_child_violator[\"hex\"]])\n+        assert_equal(result['package_msg'], \"transaction failed\")\n+        assert_equal(result['tx-results'][tx_child_violator['wtxid']]['error'], f\"v3-rule-violation, tx {tx_child_violator['wtxid']} would have too many ancestors\")\n+        self.check_mempool([tx_in_mempool[\"txid\"]])\n+\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 110)\n+        self.test_v3_acceptance()\n+        self.test_v3_replacement()\n+        self.test_v3_bip125()\n+        self.test_v3_reorg()\n+        self.test_nondefault_package_limits()\n+        self.test_fee_dependency_replacements()\n+        self.test_v3_ancestors_package()\n+        self.test_v3_ancestors_package_and_mempool()",
      "path": "test/functional/mempool_accept_v3.py",
      "position": 372,
      "original_position": 312,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        self.test_v3_ancestors_package_and_mempool()\r\n        self.test_v3_package_inheritence()\r\n```",
      "created_at": "2023-12-13T17:58:38Z",
      "updated_at": "2023-12-13T18:06:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425705028",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425705028"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 372,
      "original_line": 372,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425836162",
      "pull_request_review_id": 1780409781,
      "id": 1425836162,
      "node_id": "PRRC_kwDOABII585U_IiC",
      "diff_hunk": "@@ -0,0 +1,144 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            // If duplicate txids exist, this function will still detect violations, but it\n+            // will return the earlier transaction's wtxid.\n+            Assume(v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        } else {\n+            Assume(non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> PackageV3SanityChecks(const Package& package)\n+{\n+    // Check inheritance rules within package.\n+    if (const auto inheritance_error{CheckV3Inheritance(package)}) {",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 61,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "6724b08988f8792fed448b56d01abc66c523fbd3",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "can't we toss `CheckV3Inheritance` entirely and just use `std::all_of` check, since we've already checked that there exists one v3 already?\r\n\r\ne.g.,\r\n\r\n```\r\n    const bool all_v3{std::all_of(package.cbegin(), package.cend(), [](const auto& tx){ return tx->nVersion == 3; })};\r\n    // Check inheritance rules within package.\r\n    if (!all_v3) {\r\n        // We already checked there was one at least\r\n        Assume(std::any_of(package.cbegin(), package.cend(), [](const auto& tx){ return tx->nVersion == 3; }));\r\n        return strprintf(\"txs in package are not all v3\");\r\n    }\r\n```\r\n\r\n",
      "created_at": "2023-12-13T20:11:09Z",
      "updated_at": "2023-12-14T14:30:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425836162",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425836162"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425837509",
      "pull_request_review_id": 1780409781,
      "id": 1425837509,
      "node_id": "PRRC_kwDOABII585U_I3F",
      "diff_hunk": "@@ -0,0 +1,144 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            // If duplicate txids exist, this function will still detect violations, but it\n+            // will return the earlier transaction's wtxid.\n+            Assume(v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        } else {\n+            Assume(non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> PackageV3SanityChecks(const Package& package)\n+{\n+    // Check inheritance rules within package.\n+    if (const auto inheritance_error{CheckV3Inheritance(package)}) {\n+        const auto [parent_wtxid, child_wtxid, child_v3] = inheritance_error.value();\n+        if (child_v3) {\n+            return strprintf(\"v3 tx %s cannot spend from non-v3 tx %s\", child_wtxid.ToString(), parent_wtxid.ToString());\n+        } else {\n+            return strprintf(\"non-v3 tx %s cannot spend from v3 tx %s\", child_wtxid.ToString(), parent_wtxid.ToString());\n+        }\n+    }\n+\n+    // Sanity check that package itself obeys ancestor/descendant limits. Assumes that this is\n+    // ancestor package-shaped. This check is not complete as we have not seen in-mempool ancestors yet.\n+    if (!package.empty() && package.size() > V3_ANCESTOR_LIMIT && package.back()->nVersion == 3) {",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "6724b08988f8792fed448b56d01abc66c523fbd3",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```Suggestion\r\n    if (package.size() > V3_ANCESTOR_LIMIT) {\r\n```\r\nsince we already know the whole package is v3",
      "created_at": "2023-12-13T20:12:44Z",
      "updated_at": "2023-12-14T14:30:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1425837509",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425837509"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426435808",
      "pull_request_review_id": 1781356473,
      "id": 1426435808,
      "node_id": "PRRC_kwDOABII585VBa7g",
      "diff_hunk": "@@ -116,3 +117,24 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n     }\n     return std::nullopt;\n }\n+\n+void CheckMempoolV3Invariants(const CTxMemPool& tx_pool, bool check_fees)\n+{\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {\n+        const auto& entry = *Assert(tx_pool.GetEntry(tx_info.tx->GetHash()));\n+        if (tx_info.tx->nVersion == 3) {\n+            // Check that special v3 ancestor/descendant limits and rules are always respected\n+            Assert(entry.GetCountWithDescendants() <= V3_DESCENDANT_LIMIT);\n+            Assert(entry.GetCountWithAncestors() <= V3_ANCESTOR_LIMIT);\n+            // If this transaction has at least 1 ancestor, it's a \"child\" and has restricted weight.\n+            if (entry.GetCountWithAncestors() > 1) {\n+                Assert(entry.GetTxSize() <= V3_CHILD_MAX_VSIZE);\n+            }\n+        }\n+        // Transactions with fees of 0 or lower should be proactively trimmed.",
      "path": "src/test/util/txmempool.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "in_reply_to_id": 1425606237,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah... slightly annoying that we can't check this until we're sure a trim happened.",
      "created_at": "2023-12-14T09:08:13Z",
      "updated_at": "2023-12-14T09:08:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1426435808",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426435808"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 135,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426489158",
      "pull_request_review_id": 1781441551,
      "id": 1426489158,
      "node_id": "PRRC_kwDOABII585VBn9G",
      "diff_hunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+// V3 only allows 1 parent and 1 child.\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+/** Maximum number of transactions including a V3 tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{2};\n+\n+/** Maximum sigop-adjusted virtual size of a tx which spends from an unconfirmed v3 transaction. */\n+static constexpr int64_t V3_CHILD_MAX_VSIZE{1000};\n+// Since these limits are within the default ancestor/descendant limits, there is no need to\n+// additionally check ancestor/descendant limits for V3 transactions.\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_ANCESTOR_SIZE_LIMIT_KVB * 1000);\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_DESCENDANT_SIZE_LIMIT_KVB * 1000);\n+\n+/** Should be called for every transaction.\n+ * \n+ * The following rules apply to V3 transactions:\n+ * 1. A v3 tx must only have v3 unconfirmed ancestors.\n+ * 2. A non-v3 tx must only have non-v3 unconfirmed ancestors.\n+ * 3. Tx with all of its ancestors must be within V3_ANCESTOR_LIMIT.\n+ * 4. Tx with all of its descendants must be within V3_DESCENDANT_LIMIT.\n+ * 5. If a V3 tx has any ancestors, the tx vsize must be within V3_CHILD_MAX_VSIZE.\n+ *\n+ * @returns an error string if any v3 rule was violated, otherwise std::nullopt.\n+ */\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        unsigned int num_other_ancestors,\n+                                        const std::set<Txid>& direct_conflicts,\n+                                        int64_t vsize);\n+\n+/** Helper function for PackageV3SanityChecks below.\n+ * Any two unconfirmed transactions with a dependency relationship must either both be v3 or both\n+ * be non-v3. Check this rule for any list of unconfirmed transactions (no topology requirements).\n+ *\n+ * @returns a tuple (parent wtxid, child wtxid, bool) where one is V3 but the other is not, if at\n+ * least one such pair exists. The bool represents whether the child is v3 or not. There may be\n+ * other such pairs that are not returned.\n+ * Otherwise std::nullopt.\n+ */\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package);\n+\n+/** Check inheritance of v3 and ancestor/descendant limits within a package (this assumes that all\n+ * transactions are in the ancestor set of the last tx, which is true if IsChildWithParents). This\n+ * check does not fully check all v3 rules, but allows us to quit early before accessing mempool.  */\n+std::optional<std::string> PackageV3SanityChecks(const Package& package);",
      "path": "src/policy/v3_policy.h",
      "position": null,
      "original_position": 63,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "in_reply_to_id": 1425695018,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Rewrote the docs in this file, I think it's much more clear now",
      "created_at": "2023-12-14T09:53:12Z",
      "updated_at": "2023-12-14T09:53:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1426489158",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426489158"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426489285",
      "pull_request_review_id": 1781441743,
      "id": 1426489285,
      "node_id": "PRRC_kwDOABII585VBn_F",
      "diff_hunk": "@@ -116,3 +117,24 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n     }\n     return std::nullopt;\n }\n+\n+void CheckMempoolV3Invariants(const CTxMemPool& tx_pool, bool check_fees)\n+{\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {\n+        const auto& entry = *Assert(tx_pool.GetEntry(tx_info.tx->GetHash()));\n+        if (tx_info.tx->nVersion == 3) {\n+            // Check that special v3 ancestor/descendant limits and rules are always respected\n+            Assert(entry.GetCountWithDescendants() <= V3_DESCENDANT_LIMIT);\n+            Assert(entry.GetCountWithAncestors() <= V3_ANCESTOR_LIMIT);\n+            // If this transaction has at least 1 ancestor, it's a \"child\" and has restricted weight.\n+            if (entry.GetCountWithAncestors() > 1) {\n+                Assert(entry.GetTxSize() <= V3_CHILD_MAX_VSIZE);\n+            }",
      "path": "src/test/util/txmempool.cpp",
      "position": 28,
      "original_position": 25,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "in_reply_to_id": 1425701016,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added the inheritance check, but the second half is redundant with when we check the child, no?",
      "created_at": "2023-12-14T09:53:18Z",
      "updated_at": "2023-12-14T09:53:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1426489285",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426489285"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 136,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426489422",
      "pull_request_review_id": 1781441975,
      "id": 1426489422,
      "node_id": "PRRC_kwDOABII585VBoBO",
      "diff_hunk": "@@ -0,0 +1,316 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            # Reset config options\n+            self.restart_node(0)\n+    return wrapper\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def check_mempool(self, txids):\n+        \"\"\"Assert exact contents of the node's mempool (by txid).\"\"\"\n+        mempool_contents = self.nodes[0].getrawmempool()\n+        assert_equal(len(txids), len(mempool_contents))\n+        assert all([txid in txids for txid in mempool_contents])\n+\n+    @cleanup\n+    def test_v3_acceptance(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test a child of a V3 transaction cannot be more than 1000vB\")\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        tx_v3_child_heavy = self.wallet.create_self_transfer(\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=4004,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_heavy[\"tx\"].get_vsize(), 1000)\n+        assert_raises_rpc_error(-26, \"v3-rule-violation, v3 child tx is too big\", node.sendrawtransaction, tx_v3_child_heavy[\"hex\"])\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        # tx has no descendants\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 1)\n+\n+        self.log.info(\"Test that, during replacements, only the new transaction counts for V3 descendant limit\")\n+        tx_v3_child_almost_heavy = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3987,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(1000, tx_v3_child_almost_heavy[\"tx\"].get_vsize())\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+        tx_v3_child_almost_heavy_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3500,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_almost_heavy[\"tx\"].get_vsize() + tx_v3_child_almost_heavy_rbf[\"tx\"].get_vsize(), 1000)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy_rbf[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+\n+    @cleanup\n+    def test_v3_replacement(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")\n+        utxo_v3_bip125 = self.wallet.get_utxo()\n+        tx_v3_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125[\"txid\"]])\n+\n+        tx_v3_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf[\"txid\"]])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 3,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"]])\n+\n+        self.log.info(\"Test that replacements cannot cause violation of inherited V3\")\n+        utxo_v3_parent = self.wallet.get_utxo()\n+        tx_v3_parent = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_parent,\n+            version=3\n+        )\n+        tx_v3_child = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+        tx_v3_child_rbf_v2 = self.wallet.create_self_transfer(\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=2\n+        )\n+        assert_raises_rpc_error(-26, f\"v3-rule-violation, non-v3 tx {tx_v3_child_rbf_v2['wtxid']} cannot spend from v3 tx {tx_v3_parent['wtxid']}\", node.sendrawtransaction, tx_v3_child_rbf_v2[\"hex\"])\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+\n+    @cleanup\n+    def test_v3_bip125(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions that don't signal BIP125 are replaceable\")\n+        assert_equal(node.getmempoolinfo()[\"fullrbf\"], False)\n+        utxo_v3_no_bip125 = self.wallet.get_utxo()\n+        tx_v3_no_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE + 1,\n+            version=3\n+        )\n+\n+        self.check_mempool([tx_v3_no_bip125[\"txid\"]])\n+        assert not node.getmempoolentry(tx_v3_no_bip125[\"txid\"])[\"bip125-replaceable\"]\n+        tx_v3_no_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_no_bip125_rbf[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_reorg(self):\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=40000\"])\n+        self.log.info(\"Test that, during a reorg, v3 rules are not enforced\")\n+        tx_v2_block = self.wallet.send_self_transfer(from_node=node, version=2)\n+        tx_v3_block = self.wallet.send_self_transfer(from_node=node, version=3)\n+        tx_v3_block2 = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"]]))\n+\n+        block = self.generate(node, 1)\n+        assert_equal(node.getrawmempool(), [])\n+        tx_v2_from_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block[\"new_utxo\"], version=2)\n+        tx_v3_from_v2 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v2_block[\"new_utxo\"], version=3)\n+        tx_v3_child_large = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block2[\"new_utxo\"], target_weight=5000, version=3)\n+        assert_greater_than(node.getmempoolentry(tx_v3_child_large[\"txid\"])[\"vsize\"], 1000)\n+        assert_equal(set(node.getrawmempool()), set([tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        node.invalidateblock(block[0])\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"], tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        # This is needed because generate() will create the exact same block again.\n+        node.reconsiderblock(block[0])\n+\n+\n+    @cleanup\n+    def test_nondefault_package_limits(self):\n+        \"\"\"\n+        Max standard tx size + V3 rules imply the ancestor/descendant rules (at their default\n+        values), but those checks must not be skipped. Ensure both sets of checks are done by\n+        changing the ancestor/descendant limit configurations.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that a decreased limitdescendantsize also applies to V3 child\")\n+        self.restart_node(0, extra_args=[\"-limitdescendantsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large1 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large1 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large1[\"new_utxo\"], version=3)\n+        # Child is within V3 limits, but parent's descendant limit is exceeded\n+        assert_greater_than(1000, tx_v3_child_large1[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, f\"too-long-mempool-chain, exceeds descendant size limit for tx {tx_v3_parent_large1['txid']}\", node.sendrawtransaction, tx_v3_child_large1[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large1[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_large1[\"txid\"])[\"descendantcount\"], 1)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Test that a decreased limitancestorsize also applies to V3 parent\")\n+        self.restart_node(0, extra_args=[\"-limitancestorsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large2 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large2[\"new_utxo\"], version=3)\n+        # Child is within V3 limits\n+        assert_greater_than_or_equal(1000, tx_v3_child_large2[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, f\"too-long-mempool-chain, exceeds ancestor size limit\", node.sendrawtransaction, tx_v3_child_large2[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large2[\"txid\"]])\n+\n+    @cleanup\n+    def test_fee_dependency_replacements(self):\n+        \"\"\"\n+        Since v3 introduces the possibility of 0-fee (i.e. below min relay feerate) transactions in\n+        the mempool, it's possible for these transactions' sponsors to disappear due to RBF. In\n+        those situations, the 0-fee transaction must be evicted along with the replacements.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that below-min-relay-feerate transactions are removed in RBF\")\n+        tx_0fee_parent = self.wallet.create_self_transfer(fee=0, fee_rate=0, version=3)\n+        utxo_confirmed = self.wallet.get_utxo()\n+        tx_child_replacee = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx_0fee_parent[\"new_utxo\"], utxo_confirmed], version=3)\n+        node.submitpackage([tx_0fee_parent[\"hex\"], tx_child_replacee[\"hex\"]])\n+        self.check_mempool([tx_0fee_parent[\"txid\"], tx_child_replacee[\"txid\"]])\n+        tx_replacer = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo_confirmed, fee_rate=DEFAULT_FEE * 10)\n+        self.check_mempool([tx_replacer[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_ancestors_package(self):\n+        self.log.info(\"Test that v3 ancestor limits are checked within the package\")\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_parent_2_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_child_multiparent = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[tx_v3_parent_normal[\"new_utxo\"], tx_v3_parent_2_normal[\"new_utxo\"]],\n+            target_weight=4000,\n+            fee_per_output=10000,\n+            version=3\n+        )\n+        tx_v3_child_heavy = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[tx_v3_parent_normal[\"new_utxo\"]],\n+            target_weight=4004,\n+            fee_per_output=10000,\n+            version=3\n+        )\n+\n+        assert_equal(node.getrawmempool(), [])\n+        result = node.submitpackage([tx_v3_parent_normal[\"hex\"], tx_v3_parent_2_normal[\"hex\"], tx_v3_child_multiparent[\"hex\"]])\n+        assert_equal(result['package_msg'], \"v3-violation\")\n+        self.check_mempool([])\n+\n+        assert_equal(node.getrawmempool(), [])\n+        result = node.submitpackage([tx_v3_parent_normal[\"hex\"], tx_v3_child_heavy[\"hex\"]])\n+        assert_equal(result['package_msg'], \"v3-violation\")\n+        self.check_mempool([])\n+\n+    @cleanup\n+    def test_v3_ancestors_package_and_mempool(self):\n+        \"\"\"\n+        A v3 transaction in a package cannot have 2 v3 parents.\n+        Test that if we have a transaction graph A -> B -> C, where A, B, C are\n+        all v3 transactions, that we cannot use submitpackage to get the\n+        transactions all into the mempool.\n+\n+        Verify, in particular, that if A is already in the mempool, then\n+        submitpackage(B, C) will fail.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that v3 ancestor limits include transactions within the package and all in-mempool ancestors\")\n+        # This is our transaction \"A\":\n+        tx_in_mempool = self.wallet.send_self_transfer(from_node=node, version=3)\n+\n+        # Verify that A is in the mempool\n+        self.check_mempool([tx_in_mempool[\"txid\"]])\n+\n+        # tx_0fee_parent is our transaction \"B\"; just create it.\n+        tx_0fee_parent = self.wallet.create_self_transfer(utxo_to_spend=tx_in_mempool[\"new_utxo\"], fee=0, fee_rate=0, version=3)\n+\n+        # tx_child_violator is our transaction \"C\"; create it:\n+        tx_child_violator = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx_0fee_parent[\"new_utxo\"]], version=3)\n+\n+        # submitpackage(B, C) should fail\n+        result = node.submitpackage([tx_0fee_parent[\"hex\"], tx_child_violator[\"hex\"]])\n+        assert_equal(result['package_msg'], \"transaction failed\")\n+        assert_equal(result['tx-results'][tx_child_violator['wtxid']]['error'], f\"v3-rule-violation, tx {tx_child_violator['wtxid']} would have too many ancestors\")\n+        self.check_mempool([tx_in_mempool[\"txid\"]])\n+",
      "path": "test/functional/mempool_accept_v3.py",
      "position": 298,
      "original_position": 298,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "in_reply_to_id": 1425704039,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added, thanks",
      "created_at": "2023-12-14T09:53:25Z",
      "updated_at": "2023-12-14T09:53:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1426489422",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426489422"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 298,
      "original_line": 298,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426534962",
      "pull_request_review_id": 1781514056,
      "id": 1426534962,
      "node_id": "PRRC_kwDOABII585VBzIy",
      "diff_hunk": "@@ -266,22 +266,23 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=False)\n \n         # Now mine some blocks, but make sure tx2 doesn't get mined.\n-        # Use prioritisetransaction to lower the effective feerate to 0\n+        # Use prioritisetransaction to lower the effective feerate to 0, removing it from mempool.\n         self.nodes[0].prioritisetransaction(txid=tx2.hash, fee_delta=int(-self.relayfee*COIN))\n+        self.wallet.send_self_transfer(from_node=self.nodes[0])\n         cur_time = int(time.time())\n         for _ in range(10):\n             self.nodes[0].setmocktime(cur_time + 600)\n             self.generate(self.wallet, 1, sync_fun=self.no_op)\n             cur_time += 600\n \n-        assert tx2.hash in self.nodes[0].getrawmempool()\n+        assert tx2.hash not in self.nodes[0].getrawmempool()",
      "path": "test/functional/feature_bip68_sequence.py",
      "position": 16,
      "original_position": 15,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "bb979f4c76f4f4f4357a08674df833a5cc6dcf82",
      "in_reply_to_id": 1422494963,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I understand your point.\r\n`TrimToSize` docstring says \r\n```cpp\r\n/** Remove transactions from the mempool until its dynamic size is <= sizelimit.\r\n```\r\nNow `TrimToSize`removes transaction even if the mempool is not full if their are 0 fee transactions.\r\nthe docstring should be updated to reflect the operation and maybe the name?\r\n",
      "created_at": "2023-12-14T10:31:18Z",
      "updated_at": "2023-12-14T10:31:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1426534962",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426534962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 279,
      "original_line": 279,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426780572",
      "pull_request_review_id": 1781917627,
      "id": 1426780572,
      "node_id": "PRRC_kwDOABII585VCvGc",
      "diff_hunk": "@@ -116,3 +117,24 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n     }\n     return std::nullopt;\n }\n+\n+void CheckMempoolV3Invariants(const CTxMemPool& tx_pool, bool check_fees)\n+{\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {\n+        const auto& entry = *Assert(tx_pool.GetEntry(tx_info.tx->GetHash()));\n+        if (tx_info.tx->nVersion == 3) {\n+            // Check that special v3 ancestor/descendant limits and rules are always respected\n+            Assert(entry.GetCountWithDescendants() <= V3_DESCENDANT_LIMIT);\n+            Assert(entry.GetCountWithAncestors() <= V3_ANCESTOR_LIMIT);\n+            // If this transaction has at least 1 ancestor, it's a \"child\" and has restricted weight.\n+            if (entry.GetCountWithAncestors() > 1) {\n+                Assert(entry.GetTxSize() <= V3_CHILD_MAX_VSIZE);\n+            }\n+        }\n+        // Transactions with fees of 0 or lower should be proactively trimmed.",
      "path": "src/test/util/txmempool.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "in_reply_to_id": 1425606237,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Just saw your edit\r\n\r\n> I'd just set check_fees to false if Prio had just been called before calling this, to stay simple.\r\n\r\nI'm not sure if this helps. When debugging some previous fuzzer crashes, it would often be that a prioritisation (or a bypass_limits) happened in a previous iteration, and then nothing was submitted in this iteration.\r\n\r\nfwiw my local fuzzer seems happy right now, with only calling `CheckMempoolV3Invariants` when accepted.",
      "created_at": "2023-12-14T14:18:58Z",
      "updated_at": "2023-12-14T14:19:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1426780572",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426780572"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 135,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426795358",
      "pull_request_review_id": 1780409781,
      "id": 1426795358,
      "node_id": "PRRC_kwDOABII585VCyte",
      "diff_hunk": "@@ -116,3 +117,24 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n     }\n     return std::nullopt;\n }\n+\n+void CheckMempoolV3Invariants(const CTxMemPool& tx_pool, bool check_fees)\n+{\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {\n+        const auto& entry = *Assert(tx_pool.GetEntry(tx_info.tx->GetHash()));\n+        if (tx_info.tx->nVersion == 3) {\n+            // Check that special v3 ancestor/descendant limits and rules are always respected\n+            Assert(entry.GetCountWithDescendants() <= V3_DESCENDANT_LIMIT);\n+            Assert(entry.GetCountWithAncestors() <= V3_ANCESTOR_LIMIT);\n+            // If this transaction has at least 1 ancestor, it's a \"child\" and has restricted weight.\n+            if (entry.GetCountWithAncestors() > 1) {\n+                Assert(entry.GetTxSize() <= V3_CHILD_MAX_VSIZE);\n+            }",
      "path": "src/test/util/txmempool.cpp",
      "position": 28,
      "original_position": 25,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "in_reply_to_id": 1425701016,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If parent is v3 but child v2, we wouldn't check, but you added the extra `else if` which catches that. lgtm",
      "created_at": "2023-12-14T14:30:30Z",
      "updated_at": "2023-12-14T14:30:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1426795358",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426795358"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 136,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426925744",
      "pull_request_review_id": 1782155752,
      "id": 1426925744,
      "node_id": "PRRC_kwDOABII585VDSiw",
      "diff_hunk": "@@ -1288,10 +1311,54 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n                    [](const auto& tx) { return Workspace(tx); });\n     std::map<uint256, MempoolAcceptResult> results;\n \n+    // Not a complete check of v3 rules, helps us detect failures early.\n+    // Some data structures are only necessary if we are checking v3 rules; skip this work if those\n+    // rules are not applicable.\n+    const bool check_v3_rules{std::any_of(txns.cbegin(), txns.cend(), [](const auto& tx){ return tx->nVersion == 3; })};\n+    if (check_v3_rules) {\n+        if (const auto err_string{PackageV3SanityChecks(txns)}) {\n+            package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"v3-violation\", err_string.value());\n+            return PackageMempoolAcceptResult(package_state, std::move(results));\n+        }\n+    }\n+\n+    // Map from txid of a transaction to its in-package ancestor set. Not MemPoolAccept-wide\n+    // because ancestor sets may change between multiple calls to AcceptMultipleTransactions, i.e.\n+    // due to something being accepted.\n+    const auto in_package_ancestors{CalculateInPackageAncestors(txns)};\n+\n     LOCK(m_pool.cs);\n \n     // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n     for (Workspace& ws : workspaces) {\n+        // This process is O(n^2) in the number of transactions, so only do it when v3 rules are",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 112,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "53c6871dfd88dcd921ce8938cdf2c45b0cf2f662",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this block is worth encapsulating and adding unit tests to ensure the populated sets `ws.m_num_in_package_ancestors` and `ws.m_ancestors_of_in_package_ancestors` match expected",
      "created_at": "2023-12-14T16:04:24Z",
      "updated_at": "2023-12-14T16:04:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1426925744",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426925744"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1337,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426942102",
      "pull_request_review_id": 1782182180,
      "id": 1426942102,
      "node_id": "PRRC_kwDOABII585VDWiW",
      "diff_hunk": "@@ -0,0 +1,144 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            // If duplicate txids exist, this function will still detect violations, but it\n+            // will return the earlier transaction's wtxid.\n+            Assume(v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        } else {\n+            Assume(non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> PackageV3SanityChecks(const Package& package)\n+{\n+    // Check inheritance rules within package.\n+    if (const auto inheritance_error{CheckV3Inheritance(package)}) {",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 61,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "6724b08988f8792fed448b56d01abc66c523fbd3",
      "in_reply_to_id": 1425836162,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Er, the ugly thing is testmempoolaccept... since `AcceptMultipleTransactions` doesn't actually enforce the child-with-parents thing, we can have this right now:\r\n\r\n```python\r\n    @cleanup\r\n    def test_v3_in_testmempoolaccept(self):\r\n        node = self.nodes[0]\r\n\r\n        self.log.info(\"Test that v3 inheritance is accurately assessed in testmempoolaccept\")\r\n        tx_v2 = self.wallet.create_self_transfer(version=2)\r\n        tx_v2_from_v2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v2[\"new_utxo\"], version=2)\r\n        tx_v3_from_v2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v2[\"new_utxo\"], version=3)\r\n        tx_v3 = self.wallet.create_self_transfer(version=3)\r\n        tx_v2_from_v3 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3[\"new_utxo\"], version=2)\r\n        tx_v3_from_v3 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3[\"new_utxo\"], version=3)\r\n\r\n        # testmempoolaccept paths don't require child-with-parents topology. Ensure that topology\r\n        # assumptions aren't made in inheritance checks.\r\n        test_accept_v2_and_v3 = node.testmempoolaccept([tx_v2[\"hex\"], tx_v3[\"hex\"]])\r\n        assert all([result[\"allowed\"] for result in test_accept_v2_and_v3])\r\n\r\n        test_accept_v3_from_v2 = node.testmempoolaccept([tx_v2[\"hex\"], tx_v3_from_v2[\"hex\"]])\r\n        assert all([result[\"package-error\"] == \"v3-violation\" for result in test_accept_v3_from_v2])\r\n\r\n        test_accept_v2_from_v3 = node.testmempoolaccept([tx_v3[\"hex\"], tx_v2_from_v3[\"hex\"]])\r\n        assert all([result[\"package-error\"] == \"v3-violation\" for result in test_accept_v2_from_v3])\r\n\r\n        # Submit the 2 parents, and the children should pass.\r\n        node.sendrawtransaction(tx_v2[\"hex\"])\r\n        node.sendrawtransaction(tx_v3[\"hex\"])\r\n        test_accept_v2_and_v3_children = node.testmempoolaccept([tx_v2_from_v2[\"hex\"], tx_v3_from_v3[\"hex\"]])\r\n        assert all([result[\"allowed\"] for result in test_accept_v2_and_v3_children])\r\n```\r\n\r\nBut it does blindly check the number of transactions in the package, so maybe you're right and we should just do the simple inheritance check?",
      "created_at": "2023-12-14T16:17:33Z",
      "updated_at": "2023-12-14T16:17:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1426942102",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426942102"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1427351949",
      "pull_request_review_id": 1782840672,
      "id": 1427351949,
      "node_id": "PRRC_kwDOABII585VE6mN",
      "diff_hunk": "@@ -0,0 +1,144 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            // If duplicate txids exist, this function will still detect violations, but it\n+            // will return the earlier transaction's wtxid.\n+            Assume(v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        } else {\n+            Assume(non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> PackageV3SanityChecks(const Package& package)\n+{\n+    // Check inheritance rules within package.\n+    if (const auto inheritance_error{CheckV3Inheritance(package)}) {",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 61,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "6724b08988f8792fed448b56d01abc66c523fbd3",
      "in_reply_to_id": 1425836162,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this looks like a good test to add to tease out the differences in code paths",
      "created_at": "2023-12-14T22:07:24Z",
      "updated_at": "2023-12-14T22:07:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1427351949",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1427351949"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1427403296",
      "pull_request_review_id": 1782917582,
      "id": 1427403296,
      "node_id": "PRRC_kwDOABII585VFHIg",
      "diff_hunk": "@@ -88,4 +88,8 @@ bool IsChildWithParents(const Package& package);\n  * other (the package is a \"tree\").\n  */\n bool IsChildWithParentsTree(const Package& package);\n+\n+/** Construct a map from the txid of a transaction to the txids of its in-package ancestor set,\n+ * including itself. Input must be IsConsistentPackage, otherwise this returns an empty map. */",
      "path": "src/policy/packages.h",
      "position": null,
      "original_position": 6,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "da18612d686b6558449fbf673f26b4c811f3cb8c",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`IsConsistentPackage` in param is Package?\r\n```suggestion\r\n/** Construct a map from the txid of a transaction to the txids of its in-package ancestor set,\r\n * including itself. Package must be IsConsistentPackage, otherwise this\r\n * this returns an empty map. Package  */\r\n```",
      "created_at": "2023-12-14T23:26:35Z",
      "updated_at": "2023-12-14T23:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1427403296",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1427403296"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": 92,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 93,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1427408824",
      "pull_request_review_id": 1782917582,
      "id": 1427408824,
      "node_id": "PRRC_kwDOABII585VFIe4",
      "diff_hunk": "@@ -147,3 +147,78 @@ bool IsChildWithParentsTree(const Package& package)\n         return true;\n     });\n }\n+\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were already checked, so this won't recurse infinitely.  After this\n+// function returns, curr_tx's entry in ancestor_set_map is guaranteed to contain a non-empty\n+// ancestor_subset.\n+void visit(const CTransactionRef& curr_tx,\n+           const std::map<Txid, CTransactionRef>& txid_to_tx,\n+           std::map<Txid, std::set<Txid>>& ancestor_set_map)\n+{\n+    const Txid& curr_txid = curr_tx->GetHash();\n+    // Already visited? Return now.\n+    auto curr_result_iter = ancestor_set_map.find(curr_txid);\n+    if (curr_result_iter == ancestor_set_map.end()) return;",
      "path": "src/policy/packages.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "da18612d686b6558449fbf673f26b4c811f3cb8c",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`if (curr_result_iter == ancestor_set_map.end()) return;` is redundant the map has already been populated with all package transactions, the statement will always be false.\r\nSo assert for that.\r\nAnd return early when the transaction in-package ancestor set is not empty, that means its has been visited\r\n```suggestion\r\n    auto curr_result_iter = ancestor_set_map.find(curr_txid);\r\n    // All transactions were populated to ancestor_set_map this should never happen\r\n    assert(curr_result_iter != ancestor_set_map.end());\r\n    // Already visited? Return now.\r\n    if (!curr_result_iter->second.empty()) return;\r\n```",
      "created_at": "2023-12-14T23:38:01Z",
      "updated_at": "2023-12-14T23:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1427408824",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1427408824"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": 162,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1427410801",
      "pull_request_review_id": 1782917582,
      "id": 1427410801,
      "node_id": "PRRC_kwDOABII585VFI9x",
      "diff_hunk": "@@ -147,3 +147,78 @@ bool IsChildWithParentsTree(const Package& package)\n         return true;\n     });\n }\n+\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were already checked, so this won't recurse infinitely.  After this\n+// function returns, curr_tx's entry in ancestor_set_map is guaranteed to contain a non-empty\n+// ancestor_subset.\n+void visit(const CTransactionRef& curr_tx,\n+           const std::map<Txid, CTransactionRef>& txid_to_tx,\n+           std::map<Txid, std::set<Txid>>& ancestor_set_map)\n+{\n+    const Txid& curr_txid = curr_tx->GetHash();\n+    // Already visited? Return now.\n+    auto curr_result_iter = ancestor_set_map.find(curr_txid);\n+    if (curr_result_iter == ancestor_set_map.end()) return;\n+\n+    std::set<Txid> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+\n+    // Look up in-package parents via prevouts.\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = Txid::FromUint256(input.prevout.hash);\n+\n+        // Not a package tx? Skip.\n+        auto iter_parent_in_map = ancestor_set_map.find(parent_txid);\n+        if (iter_parent_in_map == ancestor_set_map.end()) continue;\n+\n+        // Recursively populate the parent first.\n+        if (iter_parent_in_map->second.empty()) {\n+            visit(txid_to_tx.at(parent_txid), txid_to_tx, ancestor_set_map);\n+        }\n+\n+        // The ancestors of my parents are also my ancestors.\n+        const auto& parent_ancestor_set = ancestor_set_map.at(parent_txid);\n+        Assume(!parent_ancestor_set.empty());\n+        // This recursive call should not have included ourselves; it should be impossible for this\n+        // tx to be both an ancestor and a descendant of us.\n+        Assume(ancestor_set_map.at(curr_txid).empty());\n+        my_ancestors.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+    }\n+    curr_result_iter->second = std::move(my_ancestors);\n+}\n+\n+std::map<Txid, std::set<Txid>> CalculateInPackageAncestors(const Package& package)\n+{\n+    // Txid to tx for quick lookup\n+    std::map<Txid, CTransactionRef> txid_to_tx;\n+    // Results we will return\n+    std::map<Txid, std::set<Txid>> result;\n+\n+    // We cannot deal with duplicates and conflicts. Return an empty map.\n+    if (!IsConsistentPackage(package)) return result;\n+\n+    // Populate m_txid_to_entry for quick lookup.\n+    for (const auto& tx : package) {\n+        // If duplicate Txids exist, we cannot continue. Just return an empty map.\n+        if (!Assume(txid_to_tx.emplace(tx->GetHash(), tx).second)) return result;\n+    }\n+\n+    // Add an empty set for each transaction to the results map.\n+    for (const auto& tx : package) {\n+        std::set<Txid> empty;\n+        result.emplace(tx->GetHash(), empty);\n+    }\n+\n+    // For each tx from beginning to end, populate the ancestor set map. This does a recursive DFS\n+    // by tracing input prevouts; best-case runtime is when the list is already sorted.",
      "path": "src/policy/packages.cpp",
      "position": null,
      "original_position": 70,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "da18612d686b6558449fbf673f26b4c811f3cb8c",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Package are always topologically sorted, so am assuming this will always be best case no?",
      "created_at": "2023-12-14T23:41:57Z",
      "updated_at": "2023-12-14T23:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1427410801",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1427410801"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 216,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1427921363",
      "pull_request_review_id": 1783836777,
      "id": 1427921363,
      "node_id": "PRRC_kwDOABII585VHFnT",
      "diff_hunk": "@@ -147,3 +147,78 @@ bool IsChildWithParentsTree(const Package& package)\n         return true;\n     });\n }\n+\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were already checked, so this won't recurse infinitely.  After this\n+// function returns, curr_tx's entry in ancestor_set_map is guaranteed to contain a non-empty\n+// ancestor_subset.\n+void visit(const CTransactionRef& curr_tx,\n+           const std::map<Txid, CTransactionRef>& txid_to_tx,\n+           std::map<Txid, std::set<Txid>>& ancestor_set_map)\n+{\n+    const Txid& curr_txid = curr_tx->GetHash();\n+    // Already visited? Return now.\n+    auto curr_result_iter = ancestor_set_map.find(curr_txid);\n+    if (curr_result_iter == ancestor_set_map.end()) return;",
      "path": "src/policy/packages.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "da18612d686b6558449fbf673f26b4c811f3cb8c",
      "in_reply_to_id": 1427408824,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yep good catch! I've now built this into `PackageV3Checks` instead of a separate function, so marking this as resolved.",
      "created_at": "2023-12-15T12:27:22Z",
      "updated_at": "2023-12-15T12:27:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1427921363",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1427921363"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": 162,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1427921992",
      "pull_request_review_id": 1783838947,
      "id": 1427921992,
      "node_id": "PRRC_kwDOABII585VHFxI",
      "diff_hunk": "@@ -0,0 +1,144 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            // If duplicate txids exist, this function will still detect violations, but it\n+            // will return the earlier transaction's wtxid.\n+            Assume(v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        } else {\n+            Assume(non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> PackageV3SanityChecks(const Package& package)\n+{\n+    // Check inheritance rules within package.\n+    if (const auto inheritance_error{CheckV3Inheritance(package)}) {\n+        const auto [parent_wtxid, child_wtxid, child_v3] = inheritance_error.value();\n+        if (child_v3) {\n+            return strprintf(\"v3 tx %s cannot spend from non-v3 tx %s\", child_wtxid.ToString(), parent_wtxid.ToString());\n+        } else {\n+            return strprintf(\"non-v3 tx %s cannot spend from v3 tx %s\", child_wtxid.ToString(), parent_wtxid.ToString());\n+        }\n+    }\n+\n+    // Sanity check that package itself obeys ancestor/descendant limits. Assumes that this is\n+    // ancestor package-shaped. This check is not complete as we have not seen in-mempool ancestors yet.\n+    if (!package.empty() && package.size() > V3_ANCESTOR_LIMIT && package.back()->nVersion == 3) {",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "6724b08988f8792fed448b56d01abc66c523fbd3",
      "in_reply_to_id": 1425837509,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This line ended up going away since I wrote slightly smarter ancestor limit checking in `PackageV3Checks`, marking as resolved",
      "created_at": "2023-12-15T12:28:07Z",
      "updated_at": "2023-12-15T12:28:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1427921992",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1427921992"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1427922624",
      "pull_request_review_id": 1783840959,
      "id": 1427922624,
      "node_id": "PRRC_kwDOABII585VHF7A",
      "diff_hunk": "@@ -0,0 +1,144 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<Wtxid, Wtxid, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            // If duplicate txids exist, this function will still detect violations, but it\n+            // will return the earlier transaction's wtxid.\n+            Assume(v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        } else {\n+            Assume(non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> PackageV3SanityChecks(const Package& package)\n+{\n+    // Check inheritance rules within package.\n+    if (const auto inheritance_error{CheckV3Inheritance(package)}) {",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 61,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "6724b08988f8792fed448b56d01abc66c523fbd3",
      "in_reply_to_id": 1425836162,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed `PackageV3Checks` to properly look at ancestor and descendant sets within package, so it handles packages within testmempoolaccepts now",
      "created_at": "2023-12-15T12:28:48Z",
      "updated_at": "2023-12-15T12:28:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1427922624",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1427922624"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1427923115",
      "pull_request_review_id": 1783842334,
      "id": 1427923115,
      "node_id": "PRRC_kwDOABII585VHGCr",
      "diff_hunk": "@@ -147,3 +147,78 @@ bool IsChildWithParentsTree(const Package& package)\n         return true;\n     });\n }\n+\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were already checked, so this won't recurse infinitely.  After this\n+// function returns, curr_tx's entry in ancestor_set_map is guaranteed to contain a non-empty\n+// ancestor_subset.\n+void visit(const CTransactionRef& curr_tx,\n+           const std::map<Txid, CTransactionRef>& txid_to_tx,\n+           std::map<Txid, std::set<Txid>>& ancestor_set_map)\n+{\n+    const Txid& curr_txid = curr_tx->GetHash();\n+    // Already visited? Return now.\n+    auto curr_result_iter = ancestor_set_map.find(curr_txid);\n+    if (curr_result_iter == ancestor_set_map.end()) return;\n+\n+    std::set<Txid> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+\n+    // Look up in-package parents via prevouts.\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = Txid::FromUint256(input.prevout.hash);\n+\n+        // Not a package tx? Skip.\n+        auto iter_parent_in_map = ancestor_set_map.find(parent_txid);\n+        if (iter_parent_in_map == ancestor_set_map.end()) continue;\n+\n+        // Recursively populate the parent first.\n+        if (iter_parent_in_map->second.empty()) {\n+            visit(txid_to_tx.at(parent_txid), txid_to_tx, ancestor_set_map);\n+        }\n+\n+        // The ancestors of my parents are also my ancestors.\n+        const auto& parent_ancestor_set = ancestor_set_map.at(parent_txid);\n+        Assume(!parent_ancestor_set.empty());\n+        // This recursive call should not have included ourselves; it should be impossible for this\n+        // tx to be both an ancestor and a descendant of us.\n+        Assume(ancestor_set_map.at(curr_txid).empty());\n+        my_ancestors.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+    }\n+    curr_result_iter->second = std::move(my_ancestors);\n+}\n+\n+std::map<Txid, std::set<Txid>> CalculateInPackageAncestors(const Package& package)\n+{\n+    // Txid to tx for quick lookup\n+    std::map<Txid, CTransactionRef> txid_to_tx;\n+    // Results we will return\n+    std::map<Txid, std::set<Txid>> result;\n+\n+    // We cannot deal with duplicates and conflicts. Return an empty map.\n+    if (!IsConsistentPackage(package)) return result;\n+\n+    // Populate m_txid_to_entry for quick lookup.\n+    for (const auto& tx : package) {\n+        // If duplicate Txids exist, we cannot continue. Just return an empty map.\n+        if (!Assume(txid_to_tx.emplace(tx->GetHash(), tx).second)) return result;\n+    }\n+\n+    // Add an empty set for each transaction to the results map.\n+    for (const auto& tx : package) {\n+        std::set<Txid> empty;\n+        result.emplace(tx->GetHash(), empty);\n+    }\n+\n+    // For each tx from beginning to end, populate the ancestor set map. This does a recursive DFS\n+    // by tracing input prevouts; best-case runtime is when the list is already sorted.",
      "path": "src/policy/packages.cpp",
      "position": null,
      "original_position": 70,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "da18612d686b6558449fbf673f26b4c811f3cb8c",
      "in_reply_to_id": 1427410801,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes. In the new function I've added an `Assume(IsTopoSortedPackage(package))`",
      "created_at": "2023-12-15T12:29:17Z",
      "updated_at": "2023-12-15T12:29:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1427923115",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1427923115"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 216,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1427923287",
      "pull_request_review_id": 1783842945,
      "id": 1427923287,
      "node_id": "PRRC_kwDOABII585VHGFX",
      "diff_hunk": "@@ -88,4 +88,8 @@ bool IsChildWithParents(const Package& package);\n  * other (the package is a \"tree\").\n  */\n bool IsChildWithParentsTree(const Package& package);\n+\n+/** Construct a map from the txid of a transaction to the txids of its in-package ancestor set,\n+ * including itself. Input must be IsConsistentPackage, otherwise this returns an empty map. */",
      "path": "src/policy/packages.h",
      "position": null,
      "original_position": 6,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "da18612d686b6558449fbf673f26b4c811f3cb8c",
      "in_reply_to_id": 1427403296,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is gone now so marking as resolved",
      "created_at": "2023-12-15T12:29:29Z",
      "updated_at": "2023-12-15T12:29:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1427923287",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1427923287"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": 92,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 93,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1427996156",
      "pull_request_review_id": 1784077622,
      "id": 1427996156,
      "node_id": "PRRC_kwDOABII585VHX38",
      "diff_hunk": "@@ -116,3 +117,24 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n     }\n     return std::nullopt;\n }\n+\n+void CheckMempoolV3Invariants(const CTxMemPool& tx_pool, bool check_fees)\n+{\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {\n+        const auto& entry = *Assert(tx_pool.GetEntry(tx_info.tx->GetHash()));\n+        if (tx_info.tx->nVersion == 3) {\n+            // Check that special v3 ancestor/descendant limits and rules are always respected\n+            Assert(entry.GetCountWithDescendants() <= V3_DESCENDANT_LIMIT);\n+            Assert(entry.GetCountWithAncestors() <= V3_ANCESTOR_LIMIT);\n+            // If this transaction has at least 1 ancestor, it's a \"child\" and has restricted weight.\n+            if (entry.GetCountWithAncestors() > 1) {\n+                Assert(entry.GetTxSize() <= V3_CHILD_MAX_VSIZE);\n+            }\n+        }\n+        // Transactions with fees of 0 or lower should be proactively trimmed.",
      "path": "src/test/util/txmempool.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "a864ce33b0774a933bce3ab76cd8f7a4c8a118c5",
      "in_reply_to_id": 1425606237,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "^We figured this out offline (see passed vs accepted), thanks",
      "created_at": "2023-12-15T13:49:32Z",
      "updated_at": "2023-12-15T13:49:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1427996156",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1427996156"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 135,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428100898",
      "pull_request_review_id": 1784369989,
      "id": 1428100898,
      "node_id": "PRRC_kwDOABII585VHxci",
      "diff_hunk": "@@ -1288,10 +1311,56 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n                    [](const auto& tx) { return Workspace(tx); });\n     std::map<uint256, MempoolAcceptResult> results;\n \n+    // Not a complete check of v3 rules, helps us detect failures early.\n+    // Some data structures are only necessary if we are checking v3 rules; skip this work if those\n+    // rules are not applicable.\n+    const bool check_v3_rules{std::any_of(txns.cbegin(), txns.cend(), [](const auto& tx){ return tx->nVersion == 3; })};\n+\n+    // Map from txid of a transaction to its in-package ancestor set. Not MemPoolAccept-wide\n+    // because ancestor sets may change between multiple calls to AcceptMultipleTransactions, i.e.\n+    // due to something being accepted. Populated for v3 transactions within PackageV3Checks.\n+    std::map<Txid, std::set<Txid>> in_package_ancestors;\n+    if (check_v3_rules) {\n+        const auto result{PackageV3Checks(txns)};\n+        if (result) {\n+            in_package_ancestors = *result;\n+        } else {\n+            package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"v3-violation\", util::ErrorString(result).original);\n+            return PackageMempoolAcceptResult(package_state, std::move(results));\n+        }\n+    }\n+\n     LOCK(m_pool.cs);\n \n     // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n     for (Workspace& ws : workspaces) {\n+        // This process is O(n^2) in the number of transactions, so only do it when v3 rules are\n+        // applicable. PackageV3Checks helps significantly limit the computation here.\n+        if (check_v3_rules && ws.m_ptx->nVersion == 3) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 117,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "2e2ea9b4ca1f742459db51c83e3f935e48a679ff",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        if (ws.m_ptx->nVersion == 3) {\r\n```",
      "created_at": "2023-12-15T15:24:38Z",
      "updated_at": "2023-12-15T17:22:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1428100898",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428100898"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1339,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428101927",
      "pull_request_review_id": 1784369989,
      "id": 1428101927,
      "node_id": "PRRC_kwDOABII585VHxsn",
      "diff_hunk": "@@ -1288,10 +1311,54 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n                    [](const auto& tx) { return Workspace(tx); });\n     std::map<uint256, MempoolAcceptResult> results;\n \n+    // Not a complete check of v3 rules, helps us detect failures early.\n+    // Some data structures are only necessary if we are checking v3 rules; skip this work if those\n+    // rules are not applicable.\n+    const bool check_v3_rules{std::any_of(txns.cbegin(), txns.cend(), [](const auto& tx){ return tx->nVersion == 3; })};\n+    if (check_v3_rules) {\n+        if (const auto err_string{PackageV3SanityChecks(txns)}) {\n+            package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"v3-violation\", err_string.value());\n+            return PackageMempoolAcceptResult(package_state, std::move(results));\n+        }\n+    }\n+\n+    // Map from txid of a transaction to its in-package ancestor set. Not MemPoolAccept-wide\n+    // because ancestor sets may change between multiple calls to AcceptMultipleTransactions, i.e.\n+    // due to something being accepted.\n+    const auto in_package_ancestors{CalculateInPackageAncestors(txns)};\n+\n     LOCK(m_pool.cs);\n \n     // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n     for (Workspace& ws : workspaces) {\n+        // This process is O(n^2) in the number of transactions, so only do it when v3 rules are",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 112,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "53c6871dfd88dcd921ce8938cdf2c45b0cf2f662",
      "in_reply_to_id": 1426925744,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "comment is misleading: computational cost is reduced when the package a connected component, i.e., up to 2 v3 transactions total\r\n\r\nit's less restrained for some testmempoolaccept use-cases",
      "created_at": "2023-12-15T15:25:30Z",
      "updated_at": "2023-12-15T17:22:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1428101927",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428101927"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1337,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428105177",
      "pull_request_review_id": 1784369989,
      "id": 1428105177,
      "node_id": "PRRC_kwDOABII585VHyfZ",
      "diff_hunk": "@@ -0,0 +1,174 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+util::Result<std::map<Txid, std::set<Txid>>> PackageV3Checks(const Package& package)\n+{\n+    // Keep track of in-package ancestors and descendants as we find them so we can catch topology violations.",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "2e2ea9b4ca1f742459db51c83e3f935e48a679ff",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "would be nice to explain if the key a v3 tx or the ancestor set is, for name reading purposes",
      "created_at": "2023-12-15T15:28:45Z",
      "updated_at": "2023-12-15T17:22:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1428105177",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428105177"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428129715",
      "pull_request_review_id": 1784369989,
      "id": 1428129715,
      "node_id": "PRRC_kwDOABII585VH4ez",
      "diff_hunk": "@@ -0,0 +1,174 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+util::Result<std::map<Txid, std::set<Txid>>> PackageV3Checks(const Package& package)\n+{\n+    // Keep track of in-package ancestors and descendants as we find them so we can catch topology violations.\n+    std::map<Txid, std::set<Txid>> v3_ancestor_sets;\n+    std::map<Txid, std::set<Txid>> v3_descendant_sets;\n+\n+    // Build a map from txid to wtxid for quick lookup; we'll use the wtxid for error strings.\n+    // Map from txid to wtxid for v3 txns in the package.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    // Map from txid to wtxid for non-v3 txns in the package.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    // Populate these maps.\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            // Transactions should have unique txids. If duplicate txids exist, this function\n+            // will still detect violations, but it will return the earlier transaction's wtxid.\n+            Assume(v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+            // Ancestor and descendant sets are inclusive of oneself.\n+            std::set<Txid> txid_self{tx->GetHash()};\n+            Assume(v3_ancestor_sets.emplace(tx->GetHash(), txid_self).second);\n+            Assume(v3_descendant_sets.emplace(tx->GetHash(), txid_self).second);\n+        } else {\n+            Assume(non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        }\n+    }\n+\n+    // For each tx, look for in-package parents. Ancestor sets are built in one pass, which means\n+    // the package must be sorted beforehand.\n+    Assume(IsTopoSortedPackage(package));\n+    for (const auto& tx : package) {\n+        const Txid& my_txid{tx->GetHash()};\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                const Txid& parent_txid = input.prevout.hash;\n+                // Look for a non-v3 in-package parent\n+                if (auto it_nonv3_package_parent = non_v3_txid_to_wtxid.find(parent_txid); it_nonv3_package_parent != non_v3_txid_to_wtxid.end()) {\n+                    return util::Error{Untranslated(strprintf(\"v3 tx %s cannot spend from non-v3 tx %s\",\n+                        tx->GetWitnessHash().ToString(), it_nonv3_package_parent->second.ToString()))};\n+                }\n+\n+                // Look for a v3 in-package parent. The ancestor set cannot exceed V3_ANCESTOR_LIMIT.\n+                if (auto it_v3_package_parent = v3_txid_to_wtxid.find(parent_txid); it_v3_package_parent != v3_txid_to_wtxid.end()) {\n+                    auto& my_ancestor_set = v3_ancestor_sets.at(my_txid);\n+                    Assume(my_ancestor_set.size() >= 1);\n+                    // Skip if we've already processed this parent, i.e. because we spend multiple outputs from this tx.\n+                    if (my_ancestor_set.count(parent_txid) == 0) {\n+                        // My parent's ancestors are also my ancestors.\n+                        const auto& parent_ancestor_set = v3_ancestor_sets.at(parent_txid);\n+                        Assume(parent_ancestor_set.size() >= 1);\n+                        my_ancestor_set.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+\n+                        // Check that we do not have too many ancestors.\n+                        if (my_ancestor_set.size() > V3_ANCESTOR_LIMIT) {\n+                            return util::Error{Untranslated(strprintf(\"tx %s would have too many ancestors\", tx->GetWitnessHash().ToString()))};\n+                        }\n+\n+                        // A v3 transaction with unconfirmed ancestors must be within\n+                        // V3_CHILD_MAX_VSIZE. This check is not complete as we have not calculated\n+                        // the sigop cost, which can increase the virtual size.\n+                        const int64_t vsize = GetVirtualTransactionSize(*tx);",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "2e2ea9b4ca1f742459db51c83e3f935e48a679ff",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n                        const int64_t vsize = GetVirtualTransactionSize(*tx, /*nSigOpCost=*/0, /*bytes_per_sigop=*/0);\r\n```",
      "created_at": "2023-12-15T15:49:11Z",
      "updated_at": "2023-12-15T17:22:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1428129715",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428129715"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428144170",
      "pull_request_review_id": 1784369989,
      "id": 1428144170,
      "node_id": "PRRC_kwDOABII585VH8Aq",
      "diff_hunk": "@@ -1288,10 +1311,56 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n                    [](const auto& tx) { return Workspace(tx); });\n     std::map<uint256, MempoolAcceptResult> results;\n \n+    // Not a complete check of v3 rules, helps us detect failures early.\n+    // Some data structures are only necessary if we are checking v3 rules; skip this work if those\n+    // rules are not applicable.\n+    const bool check_v3_rules{std::any_of(txns.cbegin(), txns.cend(), [](const auto& tx){ return tx->nVersion == 3; })};\n+\n+    // Map from txid of a transaction to its in-package ancestor set. Not MemPoolAccept-wide",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 97,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "2e2ea9b4ca1f742459db51c83e3f935e48a679ff",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    // Map from txid of a V3 transaction to its in-package ancestor set. Not MemPoolAccept-wide\r\n```",
      "created_at": "2023-12-15T16:00:17Z",
      "updated_at": "2023-12-15T17:22:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1428144170",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428144170"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1319,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428162185",
      "pull_request_review_id": 1784369989,
      "id": 1428162185,
      "node_id": "PRRC_kwDOABII585VIAaJ",
      "diff_hunk": "@@ -1288,10 +1311,56 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n                    [](const auto& tx) { return Workspace(tx); });\n     std::map<uint256, MempoolAcceptResult> results;\n \n+    // Not a complete check of v3 rules, helps us detect failures early.\n+    // Some data structures are only necessary if we are checking v3 rules; skip this work if those\n+    // rules are not applicable.\n+    const bool check_v3_rules{std::any_of(txns.cbegin(), txns.cend(), [](const auto& tx){ return tx->nVersion == 3; })};\n+\n+    // Map from txid of a transaction to its in-package ancestor set. Not MemPoolAccept-wide\n+    // because ancestor sets may change between multiple calls to AcceptMultipleTransactions, i.e.\n+    // due to something being accepted. Populated for v3 transactions within PackageV3Checks.\n+    std::map<Txid, std::set<Txid>> in_package_ancestors;\n+    if (check_v3_rules) {\n+        const auto result{PackageV3Checks(txns)};\n+        if (result) {\n+            in_package_ancestors = *result;\n+        } else {\n+            package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"v3-violation\", util::ErrorString(result).original);\n+            return PackageMempoolAcceptResult(package_state, std::move(results));\n+        }\n+    }\n+\n     LOCK(m_pool.cs);\n \n     // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n     for (Workspace& ws : workspaces) {\n+        // This process is O(n^2) in the number of transactions, so only do it when v3 rules are\n+        // applicable. PackageV3Checks helps significantly limit the computation here.\n+        if (check_v3_rules && ws.m_ptx->nVersion == 3) {\n+            // Populate Workspace::m_num_in_package_ancestors if applicable.\n+            auto ancestor_set_iter = in_package_ancestors.find(ws.m_ptx->GetHash());\n+            const bool have_ancestor_set{ancestor_set_iter != in_package_ancestors.end() && ancestor_set_iter->second.size() >= 1};\n+            if (Assume(have_ancestor_set)) {\n+                // If there are in-package ancestors, update m_num_in_package_ancestors.\n+                // Sets in in_package_ancestors include the tx itself, so subtract 1.\n+                ws.m_num_in_package_ancestors = ancestor_set_iter->second.size() - 1;\n+            } else if (!txns.empty()) {\n+                // If we fail to find this transaction's ancestor set, we use a safe (over)estimate\n+                // that it is the entire list of txns.\n+                ws.m_num_in_package_ancestors = txns.size() - 1;\n+            }\n+\n+            // If this tx is one of our ancestors, add all of its in-mempool ancestors to ours.\n+            // If we are treating all transactions as our ancestor, always add.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 132,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "2e2ea9b4ca1f742459db51c83e3f935e48a679ff",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Anything that's not-already `PreCheck`'ed will necessarily have empty `Workspace::m_ancestors` sets, so there will be a mismatch in the over-estimates. \r\n\r\n(not sure it matters, just noting)",
      "created_at": "2023-12-15T16:16:10Z",
      "updated_at": "2023-12-15T17:22:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1428162185",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428162185"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1354,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428172941",
      "pull_request_review_id": 1784369989,
      "id": 1428172941,
      "node_id": "PRRC_kwDOABII585VIDCN",
      "diff_hunk": "@@ -1288,10 +1311,56 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n                    [](const auto& tx) { return Workspace(tx); });\n     std::map<uint256, MempoolAcceptResult> results;\n \n+    // Not a complete check of v3 rules, helps us detect failures early.\n+    // Some data structures are only necessary if we are checking v3 rules; skip this work if those\n+    // rules are not applicable.\n+    const bool check_v3_rules{std::any_of(txns.cbegin(), txns.cend(), [](const auto& tx){ return tx->nVersion == 3; })};\n+\n+    // Map from txid of a transaction to its in-package ancestor set. Not MemPoolAccept-wide\n+    // because ancestor sets may change between multiple calls to AcceptMultipleTransactions, i.e.\n+    // due to something being accepted. Populated for v3 transactions within PackageV3Checks.\n+    std::map<Txid, std::set<Txid>> in_package_ancestors;\n+    if (check_v3_rules) {\n+        const auto result{PackageV3Checks(txns)};\n+        if (result) {\n+            in_package_ancestors = *result;\n+        } else {\n+            package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"v3-violation\", util::ErrorString(result).original);\n+            return PackageMempoolAcceptResult(package_state, std::move(results));\n+        }\n+    }\n+\n     LOCK(m_pool.cs);\n \n     // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n     for (Workspace& ws : workspaces) {\n+        // This process is O(n^2) in the number of transactions, so only do it when v3 rules are\n+        // applicable. PackageV3Checks helps significantly limit the computation here.\n+        if (check_v3_rules && ws.m_ptx->nVersion == 3) {\n+            // Populate Workspace::m_num_in_package_ancestors if applicable.\n+            auto ancestor_set_iter = in_package_ancestors.find(ws.m_ptx->GetHash());\n+            const bool have_ancestor_set{ancestor_set_iter != in_package_ancestors.end() && ancestor_set_iter->second.size() >= 1};\n+            if (Assume(have_ancestor_set)) {\n+                // If there are in-package ancestors, update m_num_in_package_ancestors.\n+                // Sets in in_package_ancestors include the tx itself, so subtract 1.\n+                ws.m_num_in_package_ancestors = ancestor_set_iter->second.size() - 1;\n+            } else if (!txns.empty()) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 125,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "2e2ea9b4ca1f742459db51c83e3f935e48a679ff",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "txns can not be empty",
      "created_at": "2023-12-15T16:25:09Z",
      "updated_at": "2023-12-15T17:22:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1428172941",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428172941"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1347,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428181463",
      "pull_request_review_id": 1784369989,
      "id": 1428181463,
      "node_id": "PRRC_kwDOABII585VIFHX",
      "diff_hunk": "@@ -0,0 +1,84 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+#include <util/result.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+// V3 only allows 1 parent and 1 child.\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+/** Maximum number of transactions including a V3 tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{2};\n+\n+/** Maximum sigop-adjusted virtual size of a tx which spends from an unconfirmed v3 transaction. */\n+static constexpr int64_t V3_CHILD_MAX_VSIZE{1000};\n+// Since these limits are within the default ancestor/descendant limits, there is no need to\n+// additionally check ancestor/descendant limits for V3 transactions.\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_ANCESTOR_SIZE_LIMIT_KVB * 1000);\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_DESCENDANT_SIZE_LIMIT_KVB * 1000);\n+\n+/** Must be called for every transaction, even if not v3.\n+ *\n+ * Checks the following rules:\n+ * 1. A v3 tx must only have v3 unconfirmed ancestors.\n+ * 2. A non-v3 tx must only have non-v3 unconfirmed ancestors.\n+ * 3. A v3's ancestor set, including itself, must be within V3_ANCESTOR_LIMIT.\n+ * 4. A v3's descendant set, including itself, must be within V3_DESCENDANT_LIMIT.\n+ * 5. If a v3 tx has any unconfirmed ancestors, the tx's sigop-adjusted vsize must be within\n+ * V3_CHILD_MAX_VSIZE.\n+ *\n+ *\n+ * @param[in]   ancestors           The in-mempool ancestors of ptx, including any that are only\n+ *                                  direct ancestors of its in-package ancestors.\n+ * @param[in]   num_other_ancestors The number of ancestors not accounted for in ancestors, i.e.\n+ *                                  in-package parents that have not been submitted to the mempool yet.\n+ * @param[in]   direct_conflicts    In-mempool transactions this tx conflicts with. These conflicts\n+ *                                  are used to more accurately calculate the resulting descendant\n+ *                                  count of in-mempool ancestors.  While V3_ANCESTOR_LIMIT is 2, it\n+ *                                  is unnecessary to include the conflicts of in-package ancestors\n+ *                                  because the presence of both in-mempool and in-package ancestors\n+ *                                  would already be a violation of V3_ANCESTOR_LIMIT.\n+ * @param[in]   vsize               The sigop-adjusted virtual size of ptx.\n+ * @returns an error string if any v3 rule was violated, otherwise std::nullopt.\n+ */\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        unsigned int num_other_ancestors,",
      "path": "src/policy/v3_policy.h",
      "position": null,
      "original_position": 59,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "2e2ea9b4ca1f742459db51c83e3f935e48a679ff",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n                                        unsigned int num_in_pkg_ancestors,\r\n```",
      "created_at": "2023-12-15T16:32:44Z",
      "updated_at": "2023-12-15T17:22:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1428181463",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428181463"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428181640",
      "pull_request_review_id": 1784369989,
      "id": 1428181640,
      "node_id": "PRRC_kwDOABII585VIFKI",
      "diff_hunk": "@@ -0,0 +1,84 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+#include <util/result.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+// V3 only allows 1 parent and 1 child.\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+/** Maximum number of transactions including a V3 tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{2};\n+\n+/** Maximum sigop-adjusted virtual size of a tx which spends from an unconfirmed v3 transaction. */\n+static constexpr int64_t V3_CHILD_MAX_VSIZE{1000};\n+// Since these limits are within the default ancestor/descendant limits, there is no need to\n+// additionally check ancestor/descendant limits for V3 transactions.\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_ANCESTOR_SIZE_LIMIT_KVB * 1000);\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_DESCENDANT_SIZE_LIMIT_KVB * 1000);\n+\n+/** Must be called for every transaction, even if not v3.\n+ *\n+ * Checks the following rules:\n+ * 1. A v3 tx must only have v3 unconfirmed ancestors.\n+ * 2. A non-v3 tx must only have non-v3 unconfirmed ancestors.\n+ * 3. A v3's ancestor set, including itself, must be within V3_ANCESTOR_LIMIT.\n+ * 4. A v3's descendant set, including itself, must be within V3_DESCENDANT_LIMIT.\n+ * 5. If a v3 tx has any unconfirmed ancestors, the tx's sigop-adjusted vsize must be within\n+ * V3_CHILD_MAX_VSIZE.\n+ *\n+ *\n+ * @param[in]   ancestors           The in-mempool ancestors of ptx, including any that are only\n+ *                                  direct ancestors of its in-package ancestors.\n+ * @param[in]   num_other_ancestors The number of ancestors not accounted for in ancestors, i.e.\n+ *                                  in-package parents that have not been submitted to the mempool yet.\n+ * @param[in]   direct_conflicts    In-mempool transactions this tx conflicts with. These conflicts\n+ *                                  are used to more accurately calculate the resulting descendant\n+ *                                  count of in-mempool ancestors.  While V3_ANCESTOR_LIMIT is 2, it\n+ *                                  is unnecessary to include the conflicts of in-package ancestors\n+ *                                  because the presence of both in-mempool and in-package ancestors\n+ *                                  would already be a violation of V3_ANCESTOR_LIMIT.\n+ * @param[in]   vsize               The sigop-adjusted virtual size of ptx.\n+ * @returns an error string if any v3 rule was violated, otherwise std::nullopt.\n+ */\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,",
      "path": "src/policy/v3_policy.h",
      "position": null,
      "original_position": 58,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "2e2ea9b4ca1f742459db51c83e3f935e48a679ff",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n                                        const CTxMemPool::setEntries& mempoool_ancestors,\r\n```",
      "created_at": "2023-12-15T16:32:55Z",
      "updated_at": "2023-12-15T17:22:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1428181640",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428181640"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428198917",
      "pull_request_review_id": 1784369989,
      "id": 1428198917,
      "node_id": "PRRC_kwDOABII585VIJYF",
      "diff_hunk": "@@ -0,0 +1,84 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+#include <util/result.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+// V3 only allows 1 parent and 1 child.\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+/** Maximum number of transactions including a V3 tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{2};\n+\n+/** Maximum sigop-adjusted virtual size of a tx which spends from an unconfirmed v3 transaction. */\n+static constexpr int64_t V3_CHILD_MAX_VSIZE{1000};\n+// Since these limits are within the default ancestor/descendant limits, there is no need to\n+// additionally check ancestor/descendant limits for V3 transactions.\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_ANCESTOR_SIZE_LIMIT_KVB * 1000);\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_DESCENDANT_SIZE_LIMIT_KVB * 1000);\n+\n+/** Must be called for every transaction, even if not v3.\n+ *\n+ * Checks the following rules:\n+ * 1. A v3 tx must only have v3 unconfirmed ancestors.\n+ * 2. A non-v3 tx must only have non-v3 unconfirmed ancestors.\n+ * 3. A v3's ancestor set, including itself, must be within V3_ANCESTOR_LIMIT.\n+ * 4. A v3's descendant set, including itself, must be within V3_DESCENDANT_LIMIT.\n+ * 5. If a v3 tx has any unconfirmed ancestors, the tx's sigop-adjusted vsize must be within\n+ * V3_CHILD_MAX_VSIZE.\n+ *\n+ *\n+ * @param[in]   ancestors           The in-mempool ancestors of ptx, including any that are only\n+ *                                  direct ancestors of its in-package ancestors.\n+ * @param[in]   num_other_ancestors The number of ancestors not accounted for in ancestors, i.e.\n+ *                                  in-package parents that have not been submitted to the mempool yet.\n+ * @param[in]   direct_conflicts    In-mempool transactions this tx conflicts with. These conflicts\n+ *                                  are used to more accurately calculate the resulting descendant\n+ *                                  count of in-mempool ancestors.  While V3_ANCESTOR_LIMIT is 2, it\n+ *                                  is unnecessary to include the conflicts of in-package ancestors\n+ *                                  because the presence of both in-mempool and in-package ancestors\n+ *                                  would already be a violation of V3_ANCESTOR_LIMIT.\n+ * @param[in]   vsize               The sigop-adjusted virtual size of ptx.\n+ * @returns an error string if any v3 rule was violated, otherwise std::nullopt.\n+ */\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        unsigned int num_other_ancestors,\n+                                        const std::set<Txid>& direct_conflicts,\n+                                        int64_t vsize);\n+\n+/** Must be called for every package containing any v3 transaction. Should not be called for non-v3 packages.\n+ *\n+ * Check the following rules for transactions within the package:\n+ * 1. A v3 tx must only have v3 unconfirmed ancestors.\n+ * 2. A non-v3 tx must only have non-v3 unconfirmed ancestors.\n+ * 3. A v3's ancestor set, including itself, must be within V3_ANCESTOR_LIMIT.\n+ * 4. A v3's descendant set, including itself, must be within V3_DESCENDANT_LIMIT.\n+ * 5. If a v3 tx has any unconfirmed ancestors, the tx's sigop-adjusted vsize must be within",
      "path": "src/policy/v3_policy.h",
      "position": null,
      "original_position": 70,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "2e2ea9b4ca1f742459db51c83e3f935e48a679ff",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this function explicitly doesn't check sigops adjusted vsize\r\n\r\n",
      "created_at": "2023-12-15T16:48:49Z",
      "updated_at": "2023-12-15T17:22:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1428198917",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428198917"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428201477",
      "pull_request_review_id": 1784369989,
      "id": 1428201477,
      "node_id": "PRRC_kwDOABII585VIKAF",
      "diff_hunk": "@@ -0,0 +1,84 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+#include <util/result.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+// V3 only allows 1 parent and 1 child.\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+/** Maximum number of transactions including a V3 tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{2};\n+\n+/** Maximum sigop-adjusted virtual size of a tx which spends from an unconfirmed v3 transaction. */\n+static constexpr int64_t V3_CHILD_MAX_VSIZE{1000};\n+// Since these limits are within the default ancestor/descendant limits, there is no need to\n+// additionally check ancestor/descendant limits for V3 transactions.\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_ANCESTOR_SIZE_LIMIT_KVB * 1000);\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_DESCENDANT_SIZE_LIMIT_KVB * 1000);\n+\n+/** Must be called for every transaction, even if not v3.\n+ *\n+ * Checks the following rules:\n+ * 1. A v3 tx must only have v3 unconfirmed ancestors.\n+ * 2. A non-v3 tx must only have non-v3 unconfirmed ancestors.\n+ * 3. A v3's ancestor set, including itself, must be within V3_ANCESTOR_LIMIT.\n+ * 4. A v3's descendant set, including itself, must be within V3_DESCENDANT_LIMIT.\n+ * 5. If a v3 tx has any unconfirmed ancestors, the tx's sigop-adjusted vsize must be within\n+ * V3_CHILD_MAX_VSIZE.\n+ *\n+ *\n+ * @param[in]   ancestors           The in-mempool ancestors of ptx, including any that are only\n+ *                                  direct ancestors of its in-package ancestors.\n+ * @param[in]   num_other_ancestors The number of ancestors not accounted for in ancestors, i.e.\n+ *                                  in-package parents that have not been submitted to the mempool yet.\n+ * @param[in]   direct_conflicts    In-mempool transactions this tx conflicts with. These conflicts\n+ *                                  are used to more accurately calculate the resulting descendant\n+ *                                  count of in-mempool ancestors.  While V3_ANCESTOR_LIMIT is 2, it\n+ *                                  is unnecessary to include the conflicts of in-package ancestors\n+ *                                  because the presence of both in-mempool and in-package ancestors\n+ *                                  would already be a violation of V3_ANCESTOR_LIMIT.\n+ * @param[in]   vsize               The sigop-adjusted virtual size of ptx.\n+ * @returns an error string if any v3 rule was violated, otherwise std::nullopt.\n+ */\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        unsigned int num_other_ancestors,\n+                                        const std::set<Txid>& direct_conflicts,\n+                                        int64_t vsize);\n+\n+/** Must be called for every package containing any v3 transaction. Should not be called for non-v3 packages.\n+ *\n+ * Check the following rules for transactions within the package:\n+ * 1. A v3 tx must only have v3 unconfirmed ancestors.\n+ * 2. A non-v3 tx must only have non-v3 unconfirmed ancestors.\n+ * 3. A v3's ancestor set, including itself, must be within V3_ANCESTOR_LIMIT.\n+ * 4. A v3's descendant set, including itself, must be within V3_DESCENDANT_LIMIT.\n+ * 5. If a v3 tx has any unconfirmed ancestors, the tx's sigop-adjusted vsize must be within\n+ * V3_CHILD_MAX_VSIZE.\n+ *\n+ * Important: this function is necessary but insufficient to enforce these rules.  ApplyV3Rules must",
      "path": "src/policy/v3_policy.h",
      "position": null,
      "original_position": 73,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "2e2ea9b4ca1f742459db51c83e3f935e48a679ff",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'd *really* like it to be crystal clear what part of this function is necessary versus optimization.\r\n\r\ni.e., can we say something like this:\r\n\r\n\" If `PackageV3Checks()` passes we know that each connected component does not violate V3 inheritance or topology constraints within the package itself.\"",
      "created_at": "2023-12-15T16:50:43Z",
      "updated_at": "2023-12-15T17:22:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1428201477",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428201477"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428212191",
      "pull_request_review_id": 1784369989,
      "id": 1428212191,
      "node_id": "PRRC_kwDOABII585VIMnf",
      "diff_hunk": "@@ -0,0 +1,379 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            # Reset config options\n+            self.restart_node(0)\n+    return wrapper\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def check_mempool(self, txids):\n+        \"\"\"Assert exact contents of the node's mempool (by txid).\"\"\"\n+        mempool_contents = self.nodes[0].getrawmempool()\n+        assert_equal(len(txids), len(mempool_contents))\n+        assert all([txid in txids for txid in mempool_contents])\n+\n+    @cleanup\n+    def test_v3_acceptance(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test a child of a V3 transaction cannot be more than 1000vB\")\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        tx_v3_child_heavy = self.wallet.create_self_transfer(\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=4004,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_heavy[\"tx\"].get_vsize(), 1000)\n+        assert_raises_rpc_error(-26, f\"v3-rule-violation, v3 child tx {tx_v3_child_heavy['wtxid']} is too big\", node.sendrawtransaction, tx_v3_child_heavy[\"hex\"])\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        # tx has no descendants\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 1)\n+\n+        self.log.info(\"Test that, during replacements, only the new transaction counts for V3 descendant limit\")\n+        tx_v3_child_almost_heavy = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3987,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(1000, tx_v3_child_almost_heavy[\"tx\"].get_vsize())\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+        tx_v3_child_almost_heavy_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3500,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_almost_heavy[\"tx\"].get_vsize() + tx_v3_child_almost_heavy_rbf[\"tx\"].get_vsize(), 1000)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy_rbf[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+\n+    @cleanup\n+    def test_v3_replacement(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")\n+        utxo_v3_bip125 = self.wallet.get_utxo()\n+        tx_v3_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125[\"txid\"]])\n+\n+        tx_v3_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf[\"txid\"]])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 3,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"]])\n+\n+        self.log.info(\"Test that replacements cannot cause violation of inherited V3\")\n+        utxo_v3_parent = self.wallet.get_utxo()\n+        tx_v3_parent = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_parent,\n+            version=3\n+        )\n+        tx_v3_child = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+        tx_v3_child_rbf_v2 = self.wallet.create_self_transfer(\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=2\n+        )\n+        assert_raises_rpc_error(-26, f\"v3-rule-violation, non-v3 tx {tx_v3_child_rbf_v2['wtxid']} cannot spend from v3 tx {tx_v3_parent['wtxid']}\", node.sendrawtransaction, tx_v3_child_rbf_v2[\"hex\"])\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+\n+    @cleanup\n+    def test_v3_bip125(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions that don't signal BIP125 are replaceable\")\n+        assert_equal(node.getmempoolinfo()[\"fullrbf\"], False)\n+        utxo_v3_no_bip125 = self.wallet.get_utxo()\n+        tx_v3_no_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE + 1,\n+            version=3\n+        )\n+\n+        self.check_mempool([tx_v3_no_bip125[\"txid\"]])\n+        assert not node.getmempoolentry(tx_v3_no_bip125[\"txid\"])[\"bip125-replaceable\"]\n+        tx_v3_no_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_no_bip125_rbf[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_reorg(self):\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=40000\"])\n+        self.log.info(\"Test that, during a reorg, v3 rules are not enforced\")\n+        tx_v2_block = self.wallet.send_self_transfer(from_node=node, version=2)\n+        tx_v3_block = self.wallet.send_self_transfer(from_node=node, version=3)\n+        tx_v3_block2 = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"]]))\n+\n+        block = self.generate(node, 1)\n+        assert_equal(node.getrawmempool(), [])\n+        tx_v2_from_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block[\"new_utxo\"], version=2)\n+        tx_v3_from_v2 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v2_block[\"new_utxo\"], version=3)\n+        tx_v3_child_large = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block2[\"new_utxo\"], target_weight=5000, version=3)\n+        assert_greater_than(node.getmempoolentry(tx_v3_child_large[\"txid\"])[\"vsize\"], 1000)\n+        assert_equal(set(node.getrawmempool()), set([tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        node.invalidateblock(block[0])\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"], tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        # This is needed because generate() will create the exact same block again.\n+        node.reconsiderblock(block[0])\n+\n+\n+    @cleanup\n+    def test_nondefault_package_limits(self):\n+        \"\"\"\n+        Max standard tx size + V3 rules imply the ancestor/descendant rules (at their default\n+        values), but those checks must not be skipped. Ensure both sets of checks are done by\n+        changing the ancestor/descendant limit configurations.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that a decreased limitdescendantsize also applies to V3 child\")\n+        self.restart_node(0, extra_args=[\"-limitdescendantsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large1 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large1 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large1[\"new_utxo\"], version=3)\n+        # Child is within V3 limits, but parent's descendant limit is exceeded\n+        assert_greater_than(1000, tx_v3_child_large1[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, f\"too-long-mempool-chain, exceeds descendant size limit for tx {tx_v3_parent_large1['txid']}\", node.sendrawtransaction, tx_v3_child_large1[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large1[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_large1[\"txid\"])[\"descendantcount\"], 1)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Test that a decreased limitancestorsize also applies to V3 parent\")\n+        self.restart_node(0, extra_args=[\"-limitancestorsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large2 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large2[\"new_utxo\"], version=3)\n+        # Child is within V3 limits\n+        assert_greater_than_or_equal(1000, tx_v3_child_large2[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, f\"too-long-mempool-chain, exceeds ancestor size limit\", node.sendrawtransaction, tx_v3_child_large2[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large2[\"txid\"]])\n+\n+    @cleanup\n+    def test_fee_dependency_replacements(self):\n+        \"\"\"\n+        Since v3 introduces the possibility of 0-fee (i.e. below min relay feerate) transactions in\n+        the mempool, it's possible for these transactions' sponsors to disappear due to RBF. In\n+        those situations, the 0-fee transaction must be evicted along with the replacements.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that below-min-relay-feerate transactions are removed in RBF\")\n+        tx_0fee_parent = self.wallet.create_self_transfer(fee=0, fee_rate=0, version=3)\n+        utxo_confirmed = self.wallet.get_utxo()\n+        tx_child_replacee = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx_0fee_parent[\"new_utxo\"], utxo_confirmed], version=3)\n+        node.submitpackage([tx_0fee_parent[\"hex\"], tx_child_replacee[\"hex\"]])\n+        self.check_mempool([tx_0fee_parent[\"txid\"], tx_child_replacee[\"txid\"]])\n+        tx_replacer = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo_confirmed, fee_rate=DEFAULT_FEE * 10)\n+        self.check_mempool([tx_replacer[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_ancestors_package(self):\n+        self.log.info(\"Test that v3 ancestor limits are checked within the package\")\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_parent_2_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_child_multiparent = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[tx_v3_parent_normal[\"new_utxo\"], tx_v3_parent_2_normal[\"new_utxo\"]],\n+            target_weight=4000,",
      "path": "test/functional/mempool_accept_v3.py",
      "position": null,
      "original_position": 247,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "2e2ea9b4ca1f742459db51c83e3f935e48a679ff",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think sometimes this can over-shoot, meaning we might hide the actual check we're shooting for\r\n```suggestion\r\n```\r\nwe don't get a great error here either so it's hard to check precisely; should we pass the whole reason back in results?",
      "created_at": "2023-12-15T16:59:22Z",
      "updated_at": "2023-12-15T17:22:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1428212191",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428212191"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 247,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428218062",
      "pull_request_review_id": 1784547201,
      "id": 1428218062,
      "node_id": "PRRC_kwDOABII585VIODO",
      "diff_hunk": "@@ -1288,10 +1311,54 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n                    [](const auto& tx) { return Workspace(tx); });\n     std::map<uint256, MempoolAcceptResult> results;\n \n+    // Not a complete check of v3 rules, helps us detect failures early.\n+    // Some data structures are only necessary if we are checking v3 rules; skip this work if those\n+    // rules are not applicable.\n+    const bool check_v3_rules{std::any_of(txns.cbegin(), txns.cend(), [](const auto& tx){ return tx->nVersion == 3; })};\n+    if (check_v3_rules) {\n+        if (const auto err_string{PackageV3SanityChecks(txns)}) {\n+            package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"v3-violation\", err_string.value());\n+            return PackageMempoolAcceptResult(package_state, std::move(results));\n+        }\n+    }\n+\n+    // Map from txid of a transaction to its in-package ancestor set. Not MemPoolAccept-wide\n+    // because ancestor sets may change between multiple calls to AcceptMultipleTransactions, i.e.\n+    // due to something being accepted.\n+    const auto in_package_ancestors{CalculateInPackageAncestors(txns)};\n+\n     LOCK(m_pool.cs);\n \n     // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n     for (Workspace& ws : workspaces) {\n+        // This process is O(n^2) in the number of transactions, so only do it when v3 rules are",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 112,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "53c6871dfd88dcd921ce8938cdf2c45b0cf2f662",
      "in_reply_to_id": 1426925744,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not 100% sure how to encapsulate this exactly since Workspace is private to MemPoolAccept, which is private to validation. We have some tests that the ancestor sets are correctly calculated. Maybe we add a helper function? Or I can add some more assumes.",
      "created_at": "2023-12-15T17:04:45Z",
      "updated_at": "2023-12-15T17:04:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1428218062",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428218062"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1337,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428319820",
      "pull_request_review_id": 1784684341,
      "id": 1428319820,
      "node_id": "PRRC_kwDOABII585VIm5M",
      "diff_hunk": "@@ -1288,10 +1311,54 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n                    [](const auto& tx) { return Workspace(tx); });\n     std::map<uint256, MempoolAcceptResult> results;\n \n+    // Not a complete check of v3 rules, helps us detect failures early.\n+    // Some data structures are only necessary if we are checking v3 rules; skip this work if those\n+    // rules are not applicable.\n+    const bool check_v3_rules{std::any_of(txns.cbegin(), txns.cend(), [](const auto& tx){ return tx->nVersion == 3; })};\n+    if (check_v3_rules) {\n+        if (const auto err_string{PackageV3SanityChecks(txns)}) {\n+            package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"v3-violation\", err_string.value());\n+            return PackageMempoolAcceptResult(package_state, std::move(results));\n+        }\n+    }\n+\n+    // Map from txid of a transaction to its in-package ancestor set. Not MemPoolAccept-wide\n+    // because ancestor sets may change between multiple calls to AcceptMultipleTransactions, i.e.\n+    // due to something being accepted.\n+    const auto in_package_ancestors{CalculateInPackageAncestors(txns)};\n+\n     LOCK(m_pool.cs);\n \n     // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n     for (Workspace& ws : workspaces) {\n+        // This process is O(n^2) in the number of transactions, so only do it when v3 rules are",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 112,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "53c6871dfd88dcd921ce8938cdf2c45b0cf2f662",
      "in_reply_to_id": 1426925744,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Edited comment",
      "created_at": "2023-12-15T18:06:25Z",
      "updated_at": "2023-12-15T18:12:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1428319820",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428319820"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1337,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428319924",
      "pull_request_review_id": 1784684341,
      "id": 1428319924,
      "node_id": "PRRC_kwDOABII585VIm60",
      "diff_hunk": "@@ -1288,10 +1311,56 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n                    [](const auto& tx) { return Workspace(tx); });\n     std::map<uint256, MempoolAcceptResult> results;\n \n+    // Not a complete check of v3 rules, helps us detect failures early.\n+    // Some data structures are only necessary if we are checking v3 rules; skip this work if those\n+    // rules are not applicable.\n+    const bool check_v3_rules{std::any_of(txns.cbegin(), txns.cend(), [](const auto& tx){ return tx->nVersion == 3; })};\n+\n+    // Map from txid of a transaction to its in-package ancestor set. Not MemPoolAccept-wide\n+    // because ancestor sets may change between multiple calls to AcceptMultipleTransactions, i.e.\n+    // due to something being accepted. Populated for v3 transactions within PackageV3Checks.\n+    std::map<Txid, std::set<Txid>> in_package_ancestors;\n+    if (check_v3_rules) {\n+        const auto result{PackageV3Checks(txns)};\n+        if (result) {\n+            in_package_ancestors = *result;\n+        } else {\n+            package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"v3-violation\", util::ErrorString(result).original);\n+            return PackageMempoolAcceptResult(package_state, std::move(results));\n+        }\n+    }\n+\n     LOCK(m_pool.cs);\n \n     // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n     for (Workspace& ws : workspaces) {\n+        // This process is O(n^2) in the number of transactions, so only do it when v3 rules are\n+        // applicable. PackageV3Checks helps significantly limit the computation here.\n+        if (check_v3_rules && ws.m_ptx->nVersion == 3) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 117,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "2e2ea9b4ca1f742459db51c83e3f935e48a679ff",
      "in_reply_to_id": 1428100898,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "taken",
      "created_at": "2023-12-15T18:06:31Z",
      "updated_at": "2023-12-15T18:12:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1428319924",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428319924"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1339,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428320034",
      "pull_request_review_id": 1784684341,
      "id": 1428320034,
      "node_id": "PRRC_kwDOABII585VIm8i",
      "diff_hunk": "@@ -1288,10 +1311,56 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n                    [](const auto& tx) { return Workspace(tx); });\n     std::map<uint256, MempoolAcceptResult> results;\n \n+    // Not a complete check of v3 rules, helps us detect failures early.\n+    // Some data structures are only necessary if we are checking v3 rules; skip this work if those\n+    // rules are not applicable.\n+    const bool check_v3_rules{std::any_of(txns.cbegin(), txns.cend(), [](const auto& tx){ return tx->nVersion == 3; })};\n+\n+    // Map from txid of a transaction to its in-package ancestor set. Not MemPoolAccept-wide\n+    // because ancestor sets may change between multiple calls to AcceptMultipleTransactions, i.e.\n+    // due to something being accepted. Populated for v3 transactions within PackageV3Checks.\n+    std::map<Txid, std::set<Txid>> in_package_ancestors;\n+    if (check_v3_rules) {\n+        const auto result{PackageV3Checks(txns)};\n+        if (result) {\n+            in_package_ancestors = *result;\n+        } else {\n+            package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"v3-violation\", util::ErrorString(result).original);\n+            return PackageMempoolAcceptResult(package_state, std::move(results));\n+        }\n+    }\n+\n     LOCK(m_pool.cs);\n \n     // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n     for (Workspace& ws : workspaces) {\n+        // This process is O(n^2) in the number of transactions, so only do it when v3 rules are\n+        // applicable. PackageV3Checks helps significantly limit the computation here.\n+        if (check_v3_rules && ws.m_ptx->nVersion == 3) {\n+            // Populate Workspace::m_num_in_package_ancestors if applicable.\n+            auto ancestor_set_iter = in_package_ancestors.find(ws.m_ptx->GetHash());\n+            const bool have_ancestor_set{ancestor_set_iter != in_package_ancestors.end() && ancestor_set_iter->second.size() >= 1};\n+            if (Assume(have_ancestor_set)) {\n+                // If there are in-package ancestors, update m_num_in_package_ancestors.\n+                // Sets in in_package_ancestors include the tx itself, so subtract 1.\n+                ws.m_num_in_package_ancestors = ancestor_set_iter->second.size() - 1;\n+            } else if (!txns.empty()) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 125,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "2e2ea9b4ca1f742459db51c83e3f935e48a679ff",
      "in_reply_to_id": 1428172941,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "paranoia deleted",
      "created_at": "2023-12-15T18:06:38Z",
      "updated_at": "2023-12-15T18:12:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1428320034",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428320034"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1347,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428320528",
      "pull_request_review_id": 1784684341,
      "id": 1428320528,
      "node_id": "PRRC_kwDOABII585VInEQ",
      "diff_hunk": "@@ -1288,10 +1311,56 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n                    [](const auto& tx) { return Workspace(tx); });\n     std::map<uint256, MempoolAcceptResult> results;\n \n+    // Not a complete check of v3 rules, helps us detect failures early.\n+    // Some data structures are only necessary if we are checking v3 rules; skip this work if those\n+    // rules are not applicable.\n+    const bool check_v3_rules{std::any_of(txns.cbegin(), txns.cend(), [](const auto& tx){ return tx->nVersion == 3; })};\n+\n+    // Map from txid of a transaction to its in-package ancestor set. Not MemPoolAccept-wide\n+    // because ancestor sets may change between multiple calls to AcceptMultipleTransactions, i.e.\n+    // due to something being accepted. Populated for v3 transactions within PackageV3Checks.\n+    std::map<Txid, std::set<Txid>> in_package_ancestors;\n+    if (check_v3_rules) {\n+        const auto result{PackageV3Checks(txns)};\n+        if (result) {\n+            in_package_ancestors = *result;\n+        } else {\n+            package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"v3-violation\", util::ErrorString(result).original);\n+            return PackageMempoolAcceptResult(package_state, std::move(results));\n+        }\n+    }\n+\n     LOCK(m_pool.cs);\n \n     // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n     for (Workspace& ws : workspaces) {\n+        // This process is O(n^2) in the number of transactions, so only do it when v3 rules are\n+        // applicable. PackageV3Checks helps significantly limit the computation here.\n+        if (check_v3_rules && ws.m_ptx->nVersion == 3) {\n+            // Populate Workspace::m_num_in_package_ancestors if applicable.\n+            auto ancestor_set_iter = in_package_ancestors.find(ws.m_ptx->GetHash());\n+            const bool have_ancestor_set{ancestor_set_iter != in_package_ancestors.end() && ancestor_set_iter->second.size() >= 1};\n+            if (Assume(have_ancestor_set)) {\n+                // If there are in-package ancestors, update m_num_in_package_ancestors.\n+                // Sets in in_package_ancestors include the tx itself, so subtract 1.\n+                ws.m_num_in_package_ancestors = ancestor_set_iter->second.size() - 1;\n+            } else if (!txns.empty()) {\n+                // If we fail to find this transaction's ancestor set, we use a safe (over)estimate\n+                // that it is the entire list of txns.\n+                ws.m_num_in_package_ancestors = txns.size() - 1;\n+            }\n+\n+            // If this tx is one of our ancestors, add all of its in-mempool ancestors to ours.\n+            // If we are treating all transactions as our ancestor, always add.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 132,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "2e2ea9b4ca1f742459db51c83e3f935e48a679ff",
      "in_reply_to_id": 1428162185,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've changed this to just be preceding transactions instead of all of them, which also matches with this behavior. Added a comment",
      "created_at": "2023-12-15T18:07:07Z",
      "updated_at": "2023-12-15T18:12:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1428320528",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428320528"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1354,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428321924",
      "pull_request_review_id": 1784684341,
      "id": 1428321924,
      "node_id": "PRRC_kwDOABII585VInaE",
      "diff_hunk": "@@ -266,22 +266,23 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=False)\n \n         # Now mine some blocks, but make sure tx2 doesn't get mined.\n-        # Use prioritisetransaction to lower the effective feerate to 0\n+        # Use prioritisetransaction to lower the effective feerate to 0, removing it from mempool.\n         self.nodes[0].prioritisetransaction(txid=tx2.hash, fee_delta=int(-self.relayfee*COIN))\n+        self.wallet.send_self_transfer(from_node=self.nodes[0])\n         cur_time = int(time.time())\n         for _ in range(10):\n             self.nodes[0].setmocktime(cur_time + 600)\n             self.generate(self.wallet, 1, sync_fun=self.no_op)\n             cur_time += 600\n \n-        assert tx2.hash in self.nodes[0].getrawmempool()\n+        assert tx2.hash not in self.nodes[0].getrawmempool()",
      "path": "test/functional/feature_bip68_sequence.py",
      "position": 16,
      "original_position": 15,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "bb979f4c76f4f4f4357a08674df833a5cc6dcf82",
      "in_reply_to_id": 1422494963,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Updated the docstring",
      "created_at": "2023-12-15T18:08:38Z",
      "updated_at": "2023-12-15T18:12:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1428321924",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428321924"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 279,
      "original_line": 279,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428322312",
      "pull_request_review_id": 1784684341,
      "id": 1428322312,
      "node_id": "PRRC_kwDOABII585VIngI",
      "diff_hunk": "@@ -0,0 +1,379 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            # Reset config options\n+            self.restart_node(0)\n+    return wrapper\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def check_mempool(self, txids):\n+        \"\"\"Assert exact contents of the node's mempool (by txid).\"\"\"\n+        mempool_contents = self.nodes[0].getrawmempool()\n+        assert_equal(len(txids), len(mempool_contents))\n+        assert all([txid in txids for txid in mempool_contents])\n+\n+    @cleanup\n+    def test_v3_acceptance(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test a child of a V3 transaction cannot be more than 1000vB\")\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        tx_v3_child_heavy = self.wallet.create_self_transfer(\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=4004,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_heavy[\"tx\"].get_vsize(), 1000)\n+        assert_raises_rpc_error(-26, f\"v3-rule-violation, v3 child tx {tx_v3_child_heavy['wtxid']} is too big\", node.sendrawtransaction, tx_v3_child_heavy[\"hex\"])\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        # tx has no descendants\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 1)\n+\n+        self.log.info(\"Test that, during replacements, only the new transaction counts for V3 descendant limit\")\n+        tx_v3_child_almost_heavy = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3987,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(1000, tx_v3_child_almost_heavy[\"tx\"].get_vsize())\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+        tx_v3_child_almost_heavy_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3500,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_almost_heavy[\"tx\"].get_vsize() + tx_v3_child_almost_heavy_rbf[\"tx\"].get_vsize(), 1000)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy_rbf[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+\n+    @cleanup\n+    def test_v3_replacement(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")\n+        utxo_v3_bip125 = self.wallet.get_utxo()\n+        tx_v3_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125[\"txid\"]])\n+\n+        tx_v3_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf[\"txid\"]])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 3,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"]])\n+\n+        self.log.info(\"Test that replacements cannot cause violation of inherited V3\")\n+        utxo_v3_parent = self.wallet.get_utxo()\n+        tx_v3_parent = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_parent,\n+            version=3\n+        )\n+        tx_v3_child = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+        tx_v3_child_rbf_v2 = self.wallet.create_self_transfer(\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=2\n+        )\n+        assert_raises_rpc_error(-26, f\"v3-rule-violation, non-v3 tx {tx_v3_child_rbf_v2['wtxid']} cannot spend from v3 tx {tx_v3_parent['wtxid']}\", node.sendrawtransaction, tx_v3_child_rbf_v2[\"hex\"])\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+\n+    @cleanup\n+    def test_v3_bip125(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions that don't signal BIP125 are replaceable\")\n+        assert_equal(node.getmempoolinfo()[\"fullrbf\"], False)\n+        utxo_v3_no_bip125 = self.wallet.get_utxo()\n+        tx_v3_no_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE + 1,\n+            version=3\n+        )\n+\n+        self.check_mempool([tx_v3_no_bip125[\"txid\"]])\n+        assert not node.getmempoolentry(tx_v3_no_bip125[\"txid\"])[\"bip125-replaceable\"]\n+        tx_v3_no_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_no_bip125_rbf[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_reorg(self):\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=40000\"])\n+        self.log.info(\"Test that, during a reorg, v3 rules are not enforced\")\n+        tx_v2_block = self.wallet.send_self_transfer(from_node=node, version=2)\n+        tx_v3_block = self.wallet.send_self_transfer(from_node=node, version=3)\n+        tx_v3_block2 = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"]]))\n+\n+        block = self.generate(node, 1)\n+        assert_equal(node.getrawmempool(), [])\n+        tx_v2_from_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block[\"new_utxo\"], version=2)\n+        tx_v3_from_v2 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v2_block[\"new_utxo\"], version=3)\n+        tx_v3_child_large = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block2[\"new_utxo\"], target_weight=5000, version=3)\n+        assert_greater_than(node.getmempoolentry(tx_v3_child_large[\"txid\"])[\"vsize\"], 1000)\n+        assert_equal(set(node.getrawmempool()), set([tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        node.invalidateblock(block[0])\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"], tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))\n+        # This is needed because generate() will create the exact same block again.\n+        node.reconsiderblock(block[0])\n+\n+\n+    @cleanup\n+    def test_nondefault_package_limits(self):\n+        \"\"\"\n+        Max standard tx size + V3 rules imply the ancestor/descendant rules (at their default\n+        values), but those checks must not be skipped. Ensure both sets of checks are done by\n+        changing the ancestor/descendant limit configurations.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that a decreased limitdescendantsize also applies to V3 child\")\n+        self.restart_node(0, extra_args=[\"-limitdescendantsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large1 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large1 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large1[\"new_utxo\"], version=3)\n+        # Child is within V3 limits, but parent's descendant limit is exceeded\n+        assert_greater_than(1000, tx_v3_child_large1[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, f\"too-long-mempool-chain, exceeds descendant size limit for tx {tx_v3_parent_large1['txid']}\", node.sendrawtransaction, tx_v3_child_large1[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large1[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_large1[\"txid\"])[\"descendantcount\"], 1)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Test that a decreased limitancestorsize also applies to V3 parent\")\n+        self.restart_node(0, extra_args=[\"-limitancestorsize=10\", \"-datacarriersize=40000\"])\n+        tx_v3_parent_large2 = self.wallet.send_self_transfer(from_node=node, target_weight=99900, version=3)\n+        tx_v3_child_large2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_parent_large2[\"new_utxo\"], version=3)\n+        # Child is within V3 limits\n+        assert_greater_than_or_equal(1000, tx_v3_child_large2[\"tx\"].get_vsize())\n+        assert_raises_rpc_error(-26, f\"too-long-mempool-chain, exceeds ancestor size limit\", node.sendrawtransaction, tx_v3_child_large2[\"hex\"])\n+        self.check_mempool([tx_v3_parent_large2[\"txid\"]])\n+\n+    @cleanup\n+    def test_fee_dependency_replacements(self):\n+        \"\"\"\n+        Since v3 introduces the possibility of 0-fee (i.e. below min relay feerate) transactions in\n+        the mempool, it's possible for these transactions' sponsors to disappear due to RBF. In\n+        those situations, the 0-fee transaction must be evicted along with the replacements.\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Test that below-min-relay-feerate transactions are removed in RBF\")\n+        tx_0fee_parent = self.wallet.create_self_transfer(fee=0, fee_rate=0, version=3)\n+        utxo_confirmed = self.wallet.get_utxo()\n+        tx_child_replacee = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx_0fee_parent[\"new_utxo\"], utxo_confirmed], version=3)\n+        node.submitpackage([tx_0fee_parent[\"hex\"], tx_child_replacee[\"hex\"]])\n+        self.check_mempool([tx_0fee_parent[\"txid\"], tx_child_replacee[\"txid\"]])\n+        tx_replacer = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=utxo_confirmed, fee_rate=DEFAULT_FEE * 10)\n+        self.check_mempool([tx_replacer[\"txid\"]])\n+\n+    @cleanup\n+    def test_v3_ancestors_package(self):\n+        self.log.info(\"Test that v3 ancestor limits are checked within the package\")\n+        node = self.nodes[0]\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_parent_2_normal = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            target_weight=4004,\n+            version=3\n+        )\n+        tx_v3_child_multiparent = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[tx_v3_parent_normal[\"new_utxo\"], tx_v3_parent_2_normal[\"new_utxo\"]],\n+            target_weight=4000,",
      "path": "test/functional/mempool_accept_v3.py",
      "position": null,
      "original_position": 247,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "2e2ea9b4ca1f742459db51c83e3f935e48a679ff",
      "in_reply_to_id": 1428212191,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed. Now using `package_state.ToString()` for \"package_msg\" result",
      "created_at": "2023-12-15T18:09:00Z",
      "updated_at": "2023-12-15T18:12:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1428322312",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428322312"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 247,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428327034",
      "pull_request_review_id": 1784694138,
      "id": 1428327034,
      "node_id": "PRRC_kwDOABII585VIop6",
      "diff_hunk": "@@ -0,0 +1,84 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+#include <util/result.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+// V3 only allows 1 parent and 1 child.\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+/** Maximum number of transactions including a V3 tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{2};\n+\n+/** Maximum sigop-adjusted virtual size of a tx which spends from an unconfirmed v3 transaction. */\n+static constexpr int64_t V3_CHILD_MAX_VSIZE{1000};\n+// Since these limits are within the default ancestor/descendant limits, there is no need to\n+// additionally check ancestor/descendant limits for V3 transactions.\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_ANCESTOR_SIZE_LIMIT_KVB * 1000);\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_DESCENDANT_SIZE_LIMIT_KVB * 1000);\n+\n+/** Must be called for every transaction, even if not v3.\n+ *\n+ * Checks the following rules:\n+ * 1. A v3 tx must only have v3 unconfirmed ancestors.\n+ * 2. A non-v3 tx must only have non-v3 unconfirmed ancestors.\n+ * 3. A v3's ancestor set, including itself, must be within V3_ANCESTOR_LIMIT.\n+ * 4. A v3's descendant set, including itself, must be within V3_DESCENDANT_LIMIT.\n+ * 5. If a v3 tx has any unconfirmed ancestors, the tx's sigop-adjusted vsize must be within\n+ * V3_CHILD_MAX_VSIZE.\n+ *\n+ *\n+ * @param[in]   mempool_ancestors       The in-mempool ancestors of ptx, including any that are only\n+ *                                      direct ancestors of its in-package ancestors.\n+ * @param[in]   num_in_pkg_ancestors    The number of ancestors not accounted for in ancestors, i.e.\n+ *                                      in-package parents that have not been submitted to the mempool yet.\n+ * @param[in]   direct_conflicts        In-mempool transactions this tx conflicts with. These conflicts\n+ *                                      are used to more accurately calculate the resulting descendant\n+ *                                      count of in-mempool ancestors.  While V3_ANCESTOR_LIMIT is 2, it\n+ *                                      is unnecessary to include the conflicts of in-package ancestors\n+ *                                      because the presence of both in-mempool and in-package ancestors\n+ *                                      would already be a violation of V3_ANCESTOR_LIMIT.\n+ * @param[in]   vsize                   The sigop-adjusted virtual size of ptx.\n+ * @returns an error string if any v3 rule was violated, otherwise std::nullopt.\n+ */\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& mempool_ancestors,\n+                                        unsigned int num_in_pkg_ancestors,\n+                                        const std::set<Txid>& direct_conflicts,\n+                                        int64_t vsize);\n+\n+/** Must be called for every package containing any v3 transaction. Should not be called for non-v3 packages.\n+ *\n+ * Check the following rules for transactions within the package:\n+ * 1. A v3 tx must only have v3 unconfirmed ancestors.\n+ * 2. A non-v3 tx must only have non-v3 unconfirmed ancestors.\n+ * 3. A v3's ancestor set, including itself, must be within V3_ANCESTOR_LIMIT.\n+ * 4. A v3's descendant set, including itself, must be within V3_DESCENDANT_LIMIT.\n+ * 5. If a v3 tx has any unconfirmed ancestors, its vsize must be within V3_CHILD_MAX_VSIZE.\n+ *\n+ * Important: this function is necessary but insufficient to enforce these rules. ApplyV3Rules must\n+ * be called for each individual transaction, after in-mempool ancestors, virtual sizes, and\n+ * in-package ancestors have been calculated. This function serves as a way to quit early on\n+ * packages in which those calculations may be expensive.\n+ *\n+ * @returns If all checks pass, a map from each v3 transaction, by txid, to the txids of its\n+ * in-package ancestor set. Every ancestor set includes the tx itself. If this passed, we know that\n+ * each connected component does not violate V3 inheritance or topology constraints within the\n+ * package itself. If any checks fail, an error string detailing what failed.\n+ * */\n+util::Result<std::map<Txid, std::set<Txid>>> PackageV3Checks(const Package& package);",
      "path": "src/policy/v3_policy.h",
      "position": 83,
      "original_position": 82,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "1a2f7253cfdff03cae5ac6c537e7b6540b0632f8",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Tbh since the limit is 1 ancestor, we could just make this a `std::map<Txid, Txid>` and save some space.",
      "created_at": "2023-12-15T18:14:07Z",
      "updated_at": "2023-12-15T18:14:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1428327034",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428327034"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 83,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1429782917",
      "pull_request_review_id": 1786320375,
      "id": 1429782917,
      "node_id": "PRRC_kwDOABII585VOMGF",
      "diff_hunk": "@@ -0,0 +1,174 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+util::Result<std::map<Txid, std::set<Txid>>> PackageV3Checks(const Package& package)\n+{\n+    // Keep track of in-package ancestors and descendants as we find them so we can catch topology violations.\n+    std::map<Txid, std::set<Txid>> v3_ancestor_sets;\n+    std::map<Txid, std::set<Txid>> v3_descendant_sets;\n+\n+    // Build a map from txid to wtxid for quick lookup; we'll use the wtxid for error strings.\n+    // Map from txid to wtxid for v3 txns in the package.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    // Map from txid to wtxid for non-v3 txns in the package.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    // Populate these maps.\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            // Transactions should have unique txids. If duplicate txids exist, this function\n+            // will still detect violations, but it will return the earlier transaction's wtxid.\n+            Assume(v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+            // Ancestor and descendant sets are inclusive of oneself.\n+            std::set<Txid> txid_self{tx->GetHash()};\n+            Assume(v3_ancestor_sets.emplace(tx->GetHash(), txid_self).second);\n+            Assume(v3_descendant_sets.emplace(tx->GetHash(), txid_self).second);\n+        } else {\n+            Assume(non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        }\n+    }\n+\n+    // For each tx, look for in-package parents. Ancestor sets are built in one pass, which means\n+    // the package must be sorted beforehand.\n+    Assume(IsTopoSortedPackage(package));\n+    for (const auto& tx : package) {\n+        const Txid& my_txid{tx->GetHash()};\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                const Txid& parent_txid = input.prevout.hash;\n+                // Look for a non-v3 in-package parent\n+                if (auto it_nonv3_package_parent = non_v3_txid_to_wtxid.find(parent_txid); it_nonv3_package_parent != non_v3_txid_to_wtxid.end()) {\n+                    return util::Error{Untranslated(strprintf(\"v3 tx %s cannot spend from non-v3 tx %s\",\n+                        tx->GetWitnessHash().ToString(), it_nonv3_package_parent->second.ToString()))};\n+                }\n+\n+                // Look for a v3 in-package parent. The ancestor set cannot exceed V3_ANCESTOR_LIMIT.\n+                if (auto it_v3_package_parent = v3_txid_to_wtxid.find(parent_txid); it_v3_package_parent != v3_txid_to_wtxid.end()) {\n+                    auto& my_ancestor_set = v3_ancestor_sets.at(my_txid);\n+                    Assume(my_ancestor_set.size() >= 1);\n+                    // Skip if we've already processed this parent, i.e. because we spend multiple outputs from this tx.\n+                    if (my_ancestor_set.count(parent_txid) == 0) {\n+                        // My parent's ancestors are also my ancestors.\n+                        const auto& parent_ancestor_set = v3_ancestor_sets.at(parent_txid);\n+                        Assume(parent_ancestor_set.size() >= 1);\n+                        my_ancestor_set.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+\n+                        // Check that we do not have too many ancestors.\n+                        if (my_ancestor_set.size() > V3_ANCESTOR_LIMIT) {\n+                            return util::Error{Untranslated(strprintf(\"tx %s would have too many ancestors\", tx->GetWitnessHash().ToString()))};\n+                        }\n+\n+                        // A v3 transaction with unconfirmed ancestors must be within\n+                        // V3_CHILD_MAX_VSIZE. This check is not complete as we have not calculated\n+                        // the sigop cost, which can increase the virtual size.\n+                        const int64_t vsize = GetVirtualTransactionSize(*tx);",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "2e2ea9b4ca1f742459db51c83e3f935e48a679ff",
      "in_reply_to_id": 1428129715,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nice :+1: ",
      "created_at": "2023-12-18T09:33:05Z",
      "updated_at": "2023-12-18T09:33:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1429782917",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1429782917"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1432787931",
      "pull_request_review_id": 1791012290,
      "id": 1432787931,
      "node_id": "PRRC_kwDOABII585VZpvb",
      "diff_hunk": "@@ -0,0 +1,84 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+#include <util/result.h>\n+",
      "path": "src/policy/v3_policy.h",
      "position": 14,
      "original_position": 14,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "de230512e6a50b14f0cc3bc21412f1d19be2fe9b",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "iwyu\r\n```suggestion\r\n#include <set>\r\n```",
      "created_at": "2023-12-20T14:30:07Z",
      "updated_at": "2023-12-21T14:23:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1432787931",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1432787931"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 14,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1432797027",
      "pull_request_review_id": 1791012290,
      "id": 1432797027,
      "node_id": "PRRC_kwDOABII585VZr9j",
      "diff_hunk": "@@ -0,0 +1,84 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+#include <util/result.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+// V3 only allows 1 parent and 1 child.\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+/** Maximum number of transactions including a V3 tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{2};\n+\n+/** Maximum sigop-adjusted virtual size of a tx which spends from an unconfirmed v3 transaction. */\n+static constexpr int64_t V3_CHILD_MAX_VSIZE{1000};\n+// Since these limits are within the default ancestor/descendant limits, there is no need to\n+// additionally check ancestor/descendant limits for V3 transactions.\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_ANCESTOR_SIZE_LIMIT_KVB * 1000);\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_DESCENDANT_SIZE_LIMIT_KVB * 1000);\n+\n+/** Must be called for every transaction, even if not v3.\n+ *\n+ * Checks the following rules:\n+ * 1. A v3 tx must only have v3 unconfirmed ancestors.\n+ * 2. A non-v3 tx must only have non-v3 unconfirmed ancestors.\n+ * 3. A v3's ancestor set, including itself, must be within V3_ANCESTOR_LIMIT.\n+ * 4. A v3's descendant set, including itself, must be within V3_DESCENDANT_LIMIT.\n+ * 5. If a v3 tx has any unconfirmed ancestors, the tx's sigop-adjusted vsize must be within\n+ * V3_CHILD_MAX_VSIZE.\n+ *\n+ *\n+ * @param[in]   mempool_ancestors       The in-mempool ancestors of ptx, including any that are only\n+ *                                      direct ancestors of its in-package ancestors.\n+ * @param[in]   num_in_pkg_ancestors    The number of ancestors not accounted for in ancestors, i.e.\n+ *                                      in-package parents that have not been submitted to the mempool yet.\n+ * @param[in]   direct_conflicts        In-mempool transactions this tx conflicts with. These conflicts\n+ *                                      are used to more accurately calculate the resulting descendant\n+ *                                      count of in-mempool ancestors.  While V3_ANCESTOR_LIMIT is 2, it\n+ *                                      is unnecessary to include the conflicts of in-package ancestors\n+ *                                      because the presence of both in-mempool and in-package ancestors\n+ *                                      would already be a violation of V3_ANCESTOR_LIMIT.\n+ * @param[in]   vsize                   The sigop-adjusted virtual size of ptx.\n+ * @returns an error string if any v3 rule was violated, otherwise std::nullopt.\n+ */\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& mempool_ancestors,\n+                                        unsigned int num_in_pkg_ancestors,\n+                                        const std::set<Txid>& direct_conflicts,\n+                                        int64_t vsize);\n+\n+/** Must be called for every package containing any v3 transaction. Should not be called for non-v3 packages.\n+ *\n+ * Check the following rules for transactions within the package:\n+ * 1. A v3 tx must only have v3 unconfirmed ancestors.\n+ * 2. A non-v3 tx must only have non-v3 unconfirmed ancestors.\n+ * 3. A v3's ancestor set, including itself, must be within V3_ANCESTOR_LIMIT.\n+ * 4. A v3's descendant set, including itself, must be within V3_DESCENDANT_LIMIT.\n+ * 5. If a v3 tx has any unconfirmed ancestors, its vsize must be within V3_CHILD_MAX_VSIZE.",
      "path": "src/policy/v3_policy.h",
      "position": 71,
      "original_position": 70,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "de230512e6a50b14f0cc3bc21412f1d19be2fe9b",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Rule 5 is not accurately checked here.\r\nIMO its better to remove it completely and depend on `ApplyV3Rules` for an accurate child size limit check.\r\nThe method might even be removed completely in the future cc #28345",
      "created_at": "2023-12-20T14:37:23Z",
      "updated_at": "2023-12-21T14:23:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1432797027",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1432797027"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1432801208",
      "pull_request_review_id": 1791012290,
      "id": 1432801208,
      "node_id": "PRRC_kwDOABII585VZs-4",
      "diff_hunk": "@@ -0,0 +1,178 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+util::Result<std::map<Txid, std::set<Txid>>> PackageV3Checks(const Package& package)\n+{\n+    // Map from txid of a v3 transaction to its ancestor set, including itself.\n+    // Since we enforce v3 inheritance rules as we build this set, sets should consist exclusively\n+    // of v3 transactions.\n+    std::map<Txid, std::set<Txid>> v3_ancestor_sets;\n+    // Map from txid of a v3 transaction to its descendant set, including itself.\n+    std::map<Txid, std::set<Txid>> v3_descendant_sets;\n+",
      "path": "src/policy/v3_policy.cpp",
      "position": 25,
      "original_position": 25,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "de230512e6a50b14f0cc3bc21412f1d19be2fe9b",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We can just return early if all the transactions are not v3\r\n```suggestion\r\n    const auto any_v3 = std::any_of(package.begin(), package.end(), [](const auto& tx){ return tx->nVersion == 3;});\r\n    if (!any_v3) { return v3_ancestor_sets;}\r\n```",
      "created_at": "2023-12-20T14:40:51Z",
      "updated_at": "2023-12-21T14:23:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1432801208",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1432801208"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 25,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1432807598",
      "pull_request_review_id": 1791012290,
      "id": 1432807598,
      "node_id": "PRRC_kwDOABII585VZuiu",
      "diff_hunk": "@@ -0,0 +1,178 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+util::Result<std::map<Txid, std::set<Txid>>> PackageV3Checks(const Package& package)\n+{\n+    // Map from txid of a v3 transaction to its ancestor set, including itself.\n+    // Since we enforce v3 inheritance rules as we build this set, sets should consist exclusively\n+    // of v3 transactions.\n+    std::map<Txid, std::set<Txid>> v3_ancestor_sets;\n+    // Map from txid of a v3 transaction to its descendant set, including itself.\n+    std::map<Txid, std::set<Txid>> v3_descendant_sets;\n+\n+    // Build a map from txid to wtxid for quick lookup; we'll use the wtxid for error strings.\n+    // Map from txid to wtxid for v3 txns in the package.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    // Map from txid to wtxid for non-v3 txns in the package.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    // Populate these maps.\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            // Transactions should have unique txids. If duplicate txids exist, this function\n+            // will still detect violations, but it will return the earlier transaction's wtxid.\n+            Assume(v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+            // Ancestor and descendant sets are inclusive of oneself.\n+            std::set<Txid> txid_self{tx->GetHash()};\n+            Assume(v3_ancestor_sets.emplace(tx->GetHash(), txid_self).second);\n+            Assume(v3_descendant_sets.emplace(tx->GetHash(), txid_self).second);\n+        } else {\n+            Assume(non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        }\n+    }\n+\n+    // For each tx, look for in-package parents. Ancestor sets are built in one pass, which means\n+    // the package must be sorted beforehand.\n+    Assume(IsTopoSortedPackage(package));\n+    for (const auto& tx : package) {\n+        const Txid& my_txid{tx->GetHash()};\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                const Txid& parent_txid = input.prevout.hash;\n+                // Look for a non-v3 in-package parent\n+                if (auto it_nonv3_package_parent = non_v3_txid_to_wtxid.find(parent_txid); it_nonv3_package_parent != non_v3_txid_to_wtxid.end()) {\n+                    return util::Error{Untranslated(strprintf(\"v3 tx %s cannot spend from non-v3 tx %s\",\n+                        tx->GetWitnessHash().ToString(), it_nonv3_package_parent->second.ToString()))};\n+                }\n+\n+                // Look for a v3 in-package parent. The ancestor set cannot exceed V3_ANCESTOR_LIMIT.\n+                if (auto it_v3_package_parent = v3_txid_to_wtxid.find(parent_txid); it_v3_package_parent != v3_txid_to_wtxid.end()) {\n+                    auto& my_ancestor_set = v3_ancestor_sets.at(my_txid);\n+                    Assume(my_ancestor_set.size() >= 1);\n+                    // Skip if we've already processed this parent, i.e. because we spend multiple outputs from this tx.\n+                    if (my_ancestor_set.count(parent_txid) == 0) {\n+                        // My parent's ancestors are also my ancestors.\n+                        const auto& parent_ancestor_set = v3_ancestor_sets.at(parent_txid);\n+                        Assume(parent_ancestor_set.size() >= 1);\n+                        my_ancestor_set.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+\n+                        // Check that we do not have too many ancestors.\n+                        if (my_ancestor_set.size() > V3_ANCESTOR_LIMIT) {\n+                            return util::Error{Untranslated(strprintf(\"tx %s would have too many ancestors\", tx->GetWitnessHash().ToString()))};\n+                        }\n+\n+                        // A v3 transaction with unconfirmed ancestors must be within\n+                        // V3_CHILD_MAX_VSIZE. This check is not complete as we have not calculated\n+                        // the sigop cost, which can increase the virtual size.\n+                        const int64_t vsize = GetVirtualTransactionSize(*tx, /*nSigOpCost=*/0, /*bytes_per_sigop=*/0);\n+                        if (vsize > V3_CHILD_MAX_VSIZE) {\n+                            return util::Error{Untranslated(strprintf(\"v3 child tx %s is too big: %u > %u virtual bytes\",\n+                                tx->GetWitnessHash().ToString(), vsize, V3_CHILD_MAX_VSIZE))};\n+                        }\n+                    }\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return util::Error{Untranslated(strprintf(\"non-v3 tx %s cannot spend from v3 tx %s\",\n+                                                              tx->GetWitnessHash().ToString(), it->second.ToString()))};\n+                }\n+            }\n+        }\n+    }\n+\n+    // Find violations of descendant limits. When a package is sorted, it's most efficient to build\n+    // descendant sets by iterating in reverse order.\n+    for (auto package_iter = package.rbegin(); package_iter != package.rend(); ++package_iter) {",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 99,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "de230512e6a50b14f0cc3bc21412f1d19be2fe9b",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: I find `tx_iter` more readable than `package_iter`, since its a transaction iterator not package iterator\r\n```suggestion\r\n    for (auto tx_iter = package.rbegin(); tx_iter != package.rend(); ++tx_iter) {\r\n\r\n```",
      "created_at": "2023-12-20T14:45:58Z",
      "updated_at": "2023-12-21T14:23:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1432807598",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1432807598"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1432811937",
      "pull_request_review_id": 1791012290,
      "id": 1432811937,
      "node_id": "PRRC_kwDOABII585VZvmh",
      "diff_hunk": "@@ -0,0 +1,178 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+util::Result<std::map<Txid, std::set<Txid>>> PackageV3Checks(const Package& package)\n+{\n+    // Map from txid of a v3 transaction to its ancestor set, including itself.\n+    // Since we enforce v3 inheritance rules as we build this set, sets should consist exclusively\n+    // of v3 transactions.\n+    std::map<Txid, std::set<Txid>> v3_ancestor_sets;\n+    // Map from txid of a v3 transaction to its descendant set, including itself.\n+    std::map<Txid, std::set<Txid>> v3_descendant_sets;\n+\n+    // Build a map from txid to wtxid for quick lookup; we'll use the wtxid for error strings.\n+    // Map from txid to wtxid for v3 txns in the package.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    // Map from txid to wtxid for non-v3 txns in the package.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    // Populate these maps.\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            // Transactions should have unique txids. If duplicate txids exist, this function\n+            // will still detect violations, but it will return the earlier transaction's wtxid.\n+            Assume(v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+            // Ancestor and descendant sets are inclusive of oneself.\n+            std::set<Txid> txid_self{tx->GetHash()};\n+            Assume(v3_ancestor_sets.emplace(tx->GetHash(), txid_self).second);\n+            Assume(v3_descendant_sets.emplace(tx->GetHash(), txid_self).second);\n+        } else {\n+            Assume(non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        }\n+    }\n+\n+    // For each tx, look for in-package parents. Ancestor sets are built in one pass, which means\n+    // the package must be sorted beforehand.\n+    Assume(IsTopoSortedPackage(package));\n+    for (const auto& tx : package) {\n+        const Txid& my_txid{tx->GetHash()};\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                const Txid& parent_txid = input.prevout.hash;\n+                // Look for a non-v3 in-package parent\n+                if (auto it_nonv3_package_parent = non_v3_txid_to_wtxid.find(parent_txid); it_nonv3_package_parent != non_v3_txid_to_wtxid.end()) {\n+                    return util::Error{Untranslated(strprintf(\"v3 tx %s cannot spend from non-v3 tx %s\",\n+                        tx->GetWitnessHash().ToString(), it_nonv3_package_parent->second.ToString()))};\n+                }\n+\n+                // Look for a v3 in-package parent. The ancestor set cannot exceed V3_ANCESTOR_LIMIT.\n+                if (auto it_v3_package_parent = v3_txid_to_wtxid.find(parent_txid); it_v3_package_parent != v3_txid_to_wtxid.end()) {\n+                    auto& my_ancestor_set = v3_ancestor_sets.at(my_txid);\n+                    Assume(my_ancestor_set.size() >= 1);\n+                    // Skip if we've already processed this parent, i.e. because we spend multiple outputs from this tx.\n+                    if (my_ancestor_set.count(parent_txid) == 0) {\n+                        // My parent's ancestors are also my ancestors.\n+                        const auto& parent_ancestor_set = v3_ancestor_sets.at(parent_txid);\n+                        Assume(parent_ancestor_set.size() >= 1);\n+                        my_ancestor_set.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+\n+                        // Check that we do not have too many ancestors.\n+                        if (my_ancestor_set.size() > V3_ANCESTOR_LIMIT) {\n+                            return util::Error{Untranslated(strprintf(\"tx %s would have too many ancestors\", tx->GetWitnessHash().ToString()))};\n+                        }\n+\n+                        // A v3 transaction with unconfirmed ancestors must be within\n+                        // V3_CHILD_MAX_VSIZE. This check is not complete as we have not calculated\n+                        // the sigop cost, which can increase the virtual size.\n+                        const int64_t vsize = GetVirtualTransactionSize(*tx, /*nSigOpCost=*/0, /*bytes_per_sigop=*/0);\n+                        if (vsize > V3_CHILD_MAX_VSIZE) {\n+                            return util::Error{Untranslated(strprintf(\"v3 child tx %s is too big: %u > %u virtual bytes\",\n+                                tx->GetWitnessHash().ToString(), vsize, V3_CHILD_MAX_VSIZE))};\n+                        }\n+                    }\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return util::Error{Untranslated(strprintf(\"non-v3 tx %s cannot spend from v3 tx %s\",\n+                                                              tx->GetWitnessHash().ToString(), it->second.ToString()))};\n+                }\n+            }\n+        }\n+    }\n+\n+    // Find violations of descendant limits. When a package is sorted, it's most efficient to build\n+    // descendant sets by iterating in reverse order.\n+    for (auto package_iter = package.rbegin(); package_iter != package.rend(); ++package_iter) {\n+        if ((*package_iter)->nVersion == 3) {",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "de230512e6a50b14f0cc3bc21412f1d19be2fe9b",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: IMO its more readable to define an intermediate txid variable here also just like its done in the for loop above\r\n```suggestion\r\n     const Txid& my_txid{(*package_iter)->GetHash()};\r\n     if ((*package_iter)->nVersion == 3) {\r\n```",
      "created_at": "2023-12-20T14:49:22Z",
      "updated_at": "2023-12-21T14:23:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1432811937",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1432811937"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 100,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1432824698",
      "pull_request_review_id": 1791012290,
      "id": 1432824698,
      "node_id": "PRRC_kwDOABII585VZyt6",
      "diff_hunk": "@@ -0,0 +1,178 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+util::Result<std::map<Txid, std::set<Txid>>> PackageV3Checks(const Package& package)\n+{\n+    // Map from txid of a v3 transaction to its ancestor set, including itself.\n+    // Since we enforce v3 inheritance rules as we build this set, sets should consist exclusively\n+    // of v3 transactions.\n+    std::map<Txid, std::set<Txid>> v3_ancestor_sets;\n+    // Map from txid of a v3 transaction to its descendant set, including itself.\n+    std::map<Txid, std::set<Txid>> v3_descendant_sets;\n+\n+    // Build a map from txid to wtxid for quick lookup; we'll use the wtxid for error strings.\n+    // Map from txid to wtxid for v3 txns in the package.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    // Map from txid to wtxid for non-v3 txns in the package.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    // Populate these maps.\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            // Transactions should have unique txids. If duplicate txids exist, this function\n+            // will still detect violations, but it will return the earlier transaction's wtxid.\n+            Assume(v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+            // Ancestor and descendant sets are inclusive of oneself.\n+            std::set<Txid> txid_self{tx->GetHash()};\n+            Assume(v3_ancestor_sets.emplace(tx->GetHash(), txid_self).second);\n+            Assume(v3_descendant_sets.emplace(tx->GetHash(), txid_self).second);\n+        } else {\n+            Assume(non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        }\n+    }\n+\n+    // For each tx, look for in-package parents. Ancestor sets are built in one pass, which means\n+    // the package must be sorted beforehand.\n+    Assume(IsTopoSortedPackage(package));\n+    for (const auto& tx : package) {\n+        const Txid& my_txid{tx->GetHash()};\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                const Txid& parent_txid = input.prevout.hash;\n+                // Look for a non-v3 in-package parent\n+                if (auto it_nonv3_package_parent = non_v3_txid_to_wtxid.find(parent_txid); it_nonv3_package_parent != non_v3_txid_to_wtxid.end()) {\n+                    return util::Error{Untranslated(strprintf(\"v3 tx %s cannot spend from non-v3 tx %s\",\n+                        tx->GetWitnessHash().ToString(), it_nonv3_package_parent->second.ToString()))};\n+                }\n+\n+                // Look for a v3 in-package parent. The ancestor set cannot exceed V3_ANCESTOR_LIMIT.\n+                if (auto it_v3_package_parent = v3_txid_to_wtxid.find(parent_txid); it_v3_package_parent != v3_txid_to_wtxid.end()) {\n+                    auto& my_ancestor_set = v3_ancestor_sets.at(my_txid);\n+                    Assume(my_ancestor_set.size() >= 1);\n+                    // Skip if we've already processed this parent, i.e. because we spend multiple outputs from this tx.\n+                    if (my_ancestor_set.count(parent_txid) == 0) {\n+                        // My parent's ancestors are also my ancestors.\n+                        const auto& parent_ancestor_set = v3_ancestor_sets.at(parent_txid);\n+                        Assume(parent_ancestor_set.size() >= 1);\n+                        my_ancestor_set.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+\n+                        // Check that we do not have too many ancestors.\n+                        if (my_ancestor_set.size() > V3_ANCESTOR_LIMIT) {\n+                            return util::Error{Untranslated(strprintf(\"tx %s would have too many ancestors\", tx->GetWitnessHash().ToString()))};\n+                        }\n+\n+                        // A v3 transaction with unconfirmed ancestors must be within\n+                        // V3_CHILD_MAX_VSIZE. This check is not complete as we have not calculated\n+                        // the sigop cost, which can increase the virtual size.\n+                        const int64_t vsize = GetVirtualTransactionSize(*tx, /*nSigOpCost=*/0, /*bytes_per_sigop=*/0);\n+                        if (vsize > V3_CHILD_MAX_VSIZE) {\n+                            return util::Error{Untranslated(strprintf(\"v3 child tx %s is too big: %u > %u virtual bytes\",\n+                                tx->GetWitnessHash().ToString(), vsize, V3_CHILD_MAX_VSIZE))};\n+                        }\n+                    }\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return util::Error{Untranslated(strprintf(\"non-v3 tx %s cannot spend from v3 tx %s\",\n+                                                              tx->GetWitnessHash().ToString(), it->second.ToString()))};\n+                }\n+            }\n+        }\n+    }\n+\n+    // Find violations of descendant limits. When a package is sorted, it's most efficient to build\n+    // descendant sets by iterating in reverse order.\n+    for (auto package_iter = package.rbegin(); package_iter != package.rend(); ++package_iter) {\n+        if ((*package_iter)->nVersion == 3) {\n+            const auto& my_ancestor_set = v3_ancestor_sets.at((*package_iter)->GetHash());\n+            const auto& my_descendant_set = v3_descendant_sets.at((*package_iter)->GetHash());\n+            Assume(my_ancestor_set.size() >= 1);\n+            Assume(my_descendant_set.size() >= 1);\n+\n+            for (const auto& ancestor_txid : my_ancestor_set) {\n+                // My descendants are also my ancestor's descendants.\n+                auto& ancestors_descendant_set = v3_descendant_sets.at(ancestor_txid);\n+                ancestors_descendant_set.insert(my_descendant_set.cbegin(), my_descendant_set.cend());",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 109,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "de230512e6a50b14f0cc3bc21412f1d19be2fe9b",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We can just skip if the ancestor has the transaction in it's descendant set?\r\n```suggestion\r\n                if (ancestors_descendant_set.count((*tx_iter)->GetHash()) == 0 ) {\r\n                    ancestors_descendant_set.insert(my_descendant_set.cbegin(), my_descendant_set.cend());\r\n```",
      "created_at": "2023-12-20T14:59:10Z",
      "updated_at": "2023-12-21T14:23:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1432824698",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1432824698"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1434122383",
      "pull_request_review_id": 1791012290,
      "id": 1434122383,
      "node_id": "PRRC_kwDOABII585VeviP",
      "diff_hunk": "@@ -116,3 +117,32 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n     }\n     return std::nullopt;\n }\n+\n+void CheckMempoolV3Invariants(const CTxMemPool& tx_pool, bool check_fees)\n+{\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {\n+        const auto& entry = *Assert(tx_pool.GetEntry(tx_info.tx->GetHash()));\n+        if (tx_info.tx->nVersion == 3) {\n+            // Check that special v3 ancestor/descendant limits and rules are always respected\n+            Assert(entry.GetCountWithDescendants() <= V3_DESCENDANT_LIMIT);\n+            Assert(entry.GetCountWithAncestors() <= V3_ANCESTOR_LIMIT);\n+            // If this transaction has at least 1 ancestor, it's a \"child\" and has restricted weight.\n+            if (entry.GetCountWithAncestors() > 1) {\n+                Assert(entry.GetTxSize() <= V3_CHILD_MAX_VSIZE);\n+                // All v3 transactions must only have v3 unconfirmed parents.\n+                const auto& parents = entry.GetMemPoolParentsConst();\n+                Assert(parents.begin()->get().GetSharedTx()->nVersion == 3);\n+            }\n+        } else if (entry.GetCountWithAncestors() > 1) {\n+            // All non-v3 transactions must only have non-v3 unconfirmed parents.\n+            const auto& parents = entry.GetMemPoolParentsConst();\n+            Assert(parents.begin()->get().GetSharedTx()->nVersion != 3);",
      "path": "src/test/util/txmempool.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "1dd62c3df4856c36bfc610f700684852772dd9f7",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`CheckMempoolV3Invariants` docstring says we would verify\r\n>any non-v3 tx must only have non-v3 ancestors\r\n\r\nWe are only getting parents and checking the first parent?",
      "created_at": "2023-12-21T14:08:03Z",
      "updated_at": "2023-12-21T14:23:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1434122383",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1434122383"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": 138,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1434137263",
      "pull_request_review_id": 1791012290,
      "id": 1434137263,
      "node_id": "PRRC_kwDOABII585VezKv",
      "diff_hunk": "@@ -0,0 +1,378 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            # Reset config options\n+            self.restart_node(0)",
      "path": "test/functional/mempool_accept_v3.py",
      "position": null,
      "original_position": 28,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "7159f5383cf6df4bf9abe9ffc3f0bde29f62e839",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "After restarting here, we are restarting at the beginning of the test again with extra args\r\nDev notes says\r\n> [Avoid stop-starting the nodes multiple times during the test if possible. A stop-start takes several seconds, so doing it several times blows up the runtime of the test.](https://github.com/bitcoin/bitcoin/blob/master/test/functional/README.md#general-test-writing-advice)\r\n\r\nThe wrapper can accept the extra args as argument and restart at the beginning only ?\r\n<details>\r\n\r\n```python\r\ndef cleanup(extra_args=None):\r\n    def decorator(func):\r\n        def wrapper(self):\r\n            try:\r\n                if extra_args is not None:\r\n                    self.restart_node(0, extra_args=extra_args)\r\n                func(self)\r\n            finally:\r\n                # Clear mempool again after test\r\n                self.generate(self.nodes[0], 1)\r\n        return wrapper\r\n    return decorator\r\n\r\n      ........\r\n\r\n    @cleanup(extra_args=[\"-datacarriersize=1000\"])\r\n    def test_v3_acceptance(self):\r\n```\r\n</details>",
      "created_at": "2023-12-21T14:21:18Z",
      "updated_at": "2023-12-21T15:11:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1434137263",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1434137263"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1434138603",
      "pull_request_review_id": 1791012290,
      "id": 1434138603,
      "node_id": "PRRC_kwDOABII585Vezfr",
      "diff_hunk": "@@ -1304,6 +1374,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         // updated if package replace-by-fee is allowed in the future.\n         assert(!args.m_allow_replacement);\n         m_viewmempool.PackageAddTransaction(ws.m_ptx);\n+        ++num_prechecks_passed;",
      "path": "src/validation.cpp",
      "position": 145,
      "original_position": 141,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "bb3c27665101d2a7161d0d2c88db355de6845af9",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "why increment `num_prechecks_passed` here ?",
      "created_at": "2023-12-21T14:22:31Z",
      "updated_at": "2023-12-21T14:23:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1434138603",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1434138603"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1376,
      "original_line": 1376,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1434150244",
      "pull_request_review_id": 1793090073,
      "id": 1434150244,
      "node_id": "PRRC_kwDOABII585Ve2Vk",
      "diff_hunk": "@@ -0,0 +1,84 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+#include <util/result.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+// V3 only allows 1 parent and 1 child.\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+/** Maximum number of transactions including a V3 tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{2};\n+\n+/** Maximum sigop-adjusted virtual size of a tx which spends from an unconfirmed v3 transaction. */\n+static constexpr int64_t V3_CHILD_MAX_VSIZE{1000};\n+// Since these limits are within the default ancestor/descendant limits, there is no need to\n+// additionally check ancestor/descendant limits for V3 transactions.\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_ANCESTOR_SIZE_LIMIT_KVB * 1000);\n+static_assert(V3_CHILD_MAX_VSIZE + MAX_STANDARD_TX_WEIGHT / WITNESS_SCALE_FACTOR <= DEFAULT_DESCENDANT_SIZE_LIMIT_KVB * 1000);\n+\n+/** Must be called for every transaction, even if not v3.\n+ *\n+ * Checks the following rules:\n+ * 1. A v3 tx must only have v3 unconfirmed ancestors.\n+ * 2. A non-v3 tx must only have non-v3 unconfirmed ancestors.\n+ * 3. A v3's ancestor set, including itself, must be within V3_ANCESTOR_LIMIT.\n+ * 4. A v3's descendant set, including itself, must be within V3_DESCENDANT_LIMIT.\n+ * 5. If a v3 tx has any unconfirmed ancestors, the tx's sigop-adjusted vsize must be within\n+ * V3_CHILD_MAX_VSIZE.\n+ *\n+ *\n+ * @param[in]   mempool_ancestors       The in-mempool ancestors of ptx, including any that are only\n+ *                                      direct ancestors of its in-package ancestors.\n+ * @param[in]   num_in_pkg_ancestors    The number of ancestors not accounted for in ancestors, i.e.\n+ *                                      in-package parents that have not been submitted to the mempool yet.\n+ * @param[in]   direct_conflicts        In-mempool transactions this tx conflicts with. These conflicts\n+ *                                      are used to more accurately calculate the resulting descendant\n+ *                                      count of in-mempool ancestors.  While V3_ANCESTOR_LIMIT is 2, it\n+ *                                      is unnecessary to include the conflicts of in-package ancestors\n+ *                                      because the presence of both in-mempool and in-package ancestors\n+ *                                      would already be a violation of V3_ANCESTOR_LIMIT.\n+ * @param[in]   vsize                   The sigop-adjusted virtual size of ptx.\n+ * @returns an error string if any v3 rule was violated, otherwise std::nullopt.\n+ */\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& mempool_ancestors,\n+                                        unsigned int num_in_pkg_ancestors,\n+                                        const std::set<Txid>& direct_conflicts,\n+                                        int64_t vsize);\n+\n+/** Must be called for every package containing any v3 transaction. Should not be called for non-v3 packages.\n+ *\n+ * Check the following rules for transactions within the package:\n+ * 1. A v3 tx must only have v3 unconfirmed ancestors.\n+ * 2. A non-v3 tx must only have non-v3 unconfirmed ancestors.\n+ * 3. A v3's ancestor set, including itself, must be within V3_ANCESTOR_LIMIT.\n+ * 4. A v3's descendant set, including itself, must be within V3_DESCENDANT_LIMIT.\n+ * 5. If a v3 tx has any unconfirmed ancestors, its vsize must be within V3_CHILD_MAX_VSIZE.",
      "path": "src/policy/v3_policy.h",
      "position": 71,
      "original_position": 70,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "de230512e6a50b14f0cc3bc21412f1d19be2fe9b",
      "in_reply_to_id": 1432797027,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I disagree, I think we should exit as early as possible when something is too big and avoid needing to do expensive things like load a bunch of UTXOs from disk. The next line says \"Important: this function is insufficient to enforce\" etc.",
      "created_at": "2023-12-21T14:32:49Z",
      "updated_at": "2023-12-21T14:32:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1434150244",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1434150244"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1434152018",
      "pull_request_review_id": 1793092992,
      "id": 1434152018,
      "node_id": "PRRC_kwDOABII585Ve2xS",
      "diff_hunk": "@@ -0,0 +1,178 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+util::Result<std::map<Txid, std::set<Txid>>> PackageV3Checks(const Package& package)\n+{\n+    // Map from txid of a v3 transaction to its ancestor set, including itself.\n+    // Since we enforce v3 inheritance rules as we build this set, sets should consist exclusively\n+    // of v3 transactions.\n+    std::map<Txid, std::set<Txid>> v3_ancestor_sets;\n+    // Map from txid of a v3 transaction to its descendant set, including itself.\n+    std::map<Txid, std::set<Txid>> v3_descendant_sets;\n+",
      "path": "src/policy/v3_policy.cpp",
      "position": 25,
      "original_position": 25,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "de230512e6a50b14f0cc3bc21412f1d19be2fe9b",
      "in_reply_to_id": 1432801208,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This function is documented as \"Should not be called for non-v3 packages.\"",
      "created_at": "2023-12-21T14:34:29Z",
      "updated_at": "2023-12-21T14:34:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1434152018",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1434152018"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 25,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1434154836",
      "pull_request_review_id": 1793098628,
      "id": 1434154836,
      "node_id": "PRRC_kwDOABII585Ve3dU",
      "diff_hunk": "@@ -116,3 +117,32 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n     }\n     return std::nullopt;\n }\n+\n+void CheckMempoolV3Invariants(const CTxMemPool& tx_pool, bool check_fees)\n+{\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {\n+        const auto& entry = *Assert(tx_pool.GetEntry(tx_info.tx->GetHash()));\n+        if (tx_info.tx->nVersion == 3) {\n+            // Check that special v3 ancestor/descendant limits and rules are always respected\n+            Assert(entry.GetCountWithDescendants() <= V3_DESCENDANT_LIMIT);\n+            Assert(entry.GetCountWithAncestors() <= V3_ANCESTOR_LIMIT);\n+            // If this transaction has at least 1 ancestor, it's a \"child\" and has restricted weight.\n+            if (entry.GetCountWithAncestors() > 1) {\n+                Assert(entry.GetTxSize() <= V3_CHILD_MAX_VSIZE);\n+                // All v3 transactions must only have v3 unconfirmed parents.\n+                const auto& parents = entry.GetMemPoolParentsConst();\n+                Assert(parents.begin()->get().GetSharedTx()->nVersion == 3);\n+            }\n+        } else if (entry.GetCountWithAncestors() > 1) {\n+            // All non-v3 transactions must only have non-v3 unconfirmed parents.\n+            const auto& parents = entry.GetMemPoolParentsConst();\n+            Assert(parents.begin()->get().GetSharedTx()->nVersion != 3);",
      "path": "src/test/util/txmempool.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "1dd62c3df4856c36bfc610f700684852772dd9f7",
      "in_reply_to_id": 1434122383,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah you're right, fixing",
      "created_at": "2023-12-21T14:37:11Z",
      "updated_at": "2023-12-21T14:37:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1434154836",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1434154836"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": 138,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444359148",
      "pull_request_review_id": 1808532964,
      "id": 1444359148,
      "node_id": "PRRC_kwDOABII585WFyvs",
      "diff_hunk": "@@ -0,0 +1,84 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+#include <util/result.h>\n+",
      "path": "src/policy/v3_policy.h",
      "position": 14,
      "original_position": 14,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "de230512e6a50b14f0cc3bc21412f1d19be2fe9b",
      "in_reply_to_id": 1432787931,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "taken",
      "created_at": "2024-01-08T09:45:17Z",
      "updated_at": "2024-01-08T09:45:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1444359148",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444359148"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 14,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444359693",
      "pull_request_review_id": 1808534285,
      "id": 1444359693,
      "node_id": "PRRC_kwDOABII585WFy4N",
      "diff_hunk": "@@ -0,0 +1,178 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+util::Result<std::map<Txid, std::set<Txid>>> PackageV3Checks(const Package& package)\n+{\n+    // Map from txid of a v3 transaction to its ancestor set, including itself.\n+    // Since we enforce v3 inheritance rules as we build this set, sets should consist exclusively\n+    // of v3 transactions.\n+    std::map<Txid, std::set<Txid>> v3_ancestor_sets;\n+    // Map from txid of a v3 transaction to its descendant set, including itself.\n+    std::map<Txid, std::set<Txid>> v3_descendant_sets;\n+",
      "path": "src/policy/v3_policy.cpp",
      "position": 25,
      "original_position": 25,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "de230512e6a50b14f0cc3bc21412f1d19be2fe9b",
      "in_reply_to_id": 1432801208,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've added an `Assume` checking that there is a v3 tx in the package and exiting early if not",
      "created_at": "2024-01-08T09:45:43Z",
      "updated_at": "2024-01-08T09:45:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1444359693",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444359693"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 25,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444359794",
      "pull_request_review_id": 1808534590,
      "id": 1444359794,
      "node_id": "PRRC_kwDOABII585WFy5y",
      "diff_hunk": "@@ -0,0 +1,178 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+util::Result<std::map<Txid, std::set<Txid>>> PackageV3Checks(const Package& package)\n+{\n+    // Map from txid of a v3 transaction to its ancestor set, including itself.\n+    // Since we enforce v3 inheritance rules as we build this set, sets should consist exclusively\n+    // of v3 transactions.\n+    std::map<Txid, std::set<Txid>> v3_ancestor_sets;\n+    // Map from txid of a v3 transaction to its descendant set, including itself.\n+    std::map<Txid, std::set<Txid>> v3_descendant_sets;\n+\n+    // Build a map from txid to wtxid for quick lookup; we'll use the wtxid for error strings.\n+    // Map from txid to wtxid for v3 txns in the package.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    // Map from txid to wtxid for non-v3 txns in the package.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    // Populate these maps.\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            // Transactions should have unique txids. If duplicate txids exist, this function\n+            // will still detect violations, but it will return the earlier transaction's wtxid.\n+            Assume(v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+            // Ancestor and descendant sets are inclusive of oneself.\n+            std::set<Txid> txid_self{tx->GetHash()};\n+            Assume(v3_ancestor_sets.emplace(tx->GetHash(), txid_self).second);\n+            Assume(v3_descendant_sets.emplace(tx->GetHash(), txid_self).second);\n+        } else {\n+            Assume(non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        }\n+    }\n+\n+    // For each tx, look for in-package parents. Ancestor sets are built in one pass, which means\n+    // the package must be sorted beforehand.\n+    Assume(IsTopoSortedPackage(package));\n+    for (const auto& tx : package) {\n+        const Txid& my_txid{tx->GetHash()};\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                const Txid& parent_txid = input.prevout.hash;\n+                // Look for a non-v3 in-package parent\n+                if (auto it_nonv3_package_parent = non_v3_txid_to_wtxid.find(parent_txid); it_nonv3_package_parent != non_v3_txid_to_wtxid.end()) {\n+                    return util::Error{Untranslated(strprintf(\"v3 tx %s cannot spend from non-v3 tx %s\",\n+                        tx->GetWitnessHash().ToString(), it_nonv3_package_parent->second.ToString()))};\n+                }\n+\n+                // Look for a v3 in-package parent. The ancestor set cannot exceed V3_ANCESTOR_LIMIT.\n+                if (auto it_v3_package_parent = v3_txid_to_wtxid.find(parent_txid); it_v3_package_parent != v3_txid_to_wtxid.end()) {\n+                    auto& my_ancestor_set = v3_ancestor_sets.at(my_txid);\n+                    Assume(my_ancestor_set.size() >= 1);\n+                    // Skip if we've already processed this parent, i.e. because we spend multiple outputs from this tx.\n+                    if (my_ancestor_set.count(parent_txid) == 0) {\n+                        // My parent's ancestors are also my ancestors.\n+                        const auto& parent_ancestor_set = v3_ancestor_sets.at(parent_txid);\n+                        Assume(parent_ancestor_set.size() >= 1);\n+                        my_ancestor_set.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+\n+                        // Check that we do not have too many ancestors.\n+                        if (my_ancestor_set.size() > V3_ANCESTOR_LIMIT) {\n+                            return util::Error{Untranslated(strprintf(\"tx %s would have too many ancestors\", tx->GetWitnessHash().ToString()))};\n+                        }\n+\n+                        // A v3 transaction with unconfirmed ancestors must be within\n+                        // V3_CHILD_MAX_VSIZE. This check is not complete as we have not calculated\n+                        // the sigop cost, which can increase the virtual size.\n+                        const int64_t vsize = GetVirtualTransactionSize(*tx, /*nSigOpCost=*/0, /*bytes_per_sigop=*/0);\n+                        if (vsize > V3_CHILD_MAX_VSIZE) {\n+                            return util::Error{Untranslated(strprintf(\"v3 child tx %s is too big: %u > %u virtual bytes\",\n+                                tx->GetWitnessHash().ToString(), vsize, V3_CHILD_MAX_VSIZE))};\n+                        }\n+                    }\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return util::Error{Untranslated(strprintf(\"non-v3 tx %s cannot spend from v3 tx %s\",\n+                                                              tx->GetWitnessHash().ToString(), it->second.ToString()))};\n+                }\n+            }\n+        }\n+    }\n+\n+    // Find violations of descendant limits. When a package is sorted, it's most efficient to build\n+    // descendant sets by iterating in reverse order.\n+    for (auto package_iter = package.rbegin(); package_iter != package.rend(); ++package_iter) {",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 99,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "de230512e6a50b14f0cc3bc21412f1d19be2fe9b",
      "in_reply_to_id": 1432807598,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "taken",
      "created_at": "2024-01-08T09:45:49Z",
      "updated_at": "2024-01-08T09:45:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1444359794",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444359794"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444359931",
      "pull_request_review_id": 1808535036,
      "id": 1444359931,
      "node_id": "PRRC_kwDOABII585WFy77",
      "diff_hunk": "@@ -0,0 +1,178 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+util::Result<std::map<Txid, std::set<Txid>>> PackageV3Checks(const Package& package)\n+{\n+    // Map from txid of a v3 transaction to its ancestor set, including itself.\n+    // Since we enforce v3 inheritance rules as we build this set, sets should consist exclusively\n+    // of v3 transactions.\n+    std::map<Txid, std::set<Txid>> v3_ancestor_sets;\n+    // Map from txid of a v3 transaction to its descendant set, including itself.\n+    std::map<Txid, std::set<Txid>> v3_descendant_sets;\n+\n+    // Build a map from txid to wtxid for quick lookup; we'll use the wtxid for error strings.\n+    // Map from txid to wtxid for v3 txns in the package.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    // Map from txid to wtxid for non-v3 txns in the package.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    // Populate these maps.\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            // Transactions should have unique txids. If duplicate txids exist, this function\n+            // will still detect violations, but it will return the earlier transaction's wtxid.\n+            Assume(v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+            // Ancestor and descendant sets are inclusive of oneself.\n+            std::set<Txid> txid_self{tx->GetHash()};\n+            Assume(v3_ancestor_sets.emplace(tx->GetHash(), txid_self).second);\n+            Assume(v3_descendant_sets.emplace(tx->GetHash(), txid_self).second);\n+        } else {\n+            Assume(non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        }\n+    }\n+\n+    // For each tx, look for in-package parents. Ancestor sets are built in one pass, which means\n+    // the package must be sorted beforehand.\n+    Assume(IsTopoSortedPackage(package));\n+    for (const auto& tx : package) {\n+        const Txid& my_txid{tx->GetHash()};\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                const Txid& parent_txid = input.prevout.hash;\n+                // Look for a non-v3 in-package parent\n+                if (auto it_nonv3_package_parent = non_v3_txid_to_wtxid.find(parent_txid); it_nonv3_package_parent != non_v3_txid_to_wtxid.end()) {\n+                    return util::Error{Untranslated(strprintf(\"v3 tx %s cannot spend from non-v3 tx %s\",\n+                        tx->GetWitnessHash().ToString(), it_nonv3_package_parent->second.ToString()))};\n+                }\n+\n+                // Look for a v3 in-package parent. The ancestor set cannot exceed V3_ANCESTOR_LIMIT.\n+                if (auto it_v3_package_parent = v3_txid_to_wtxid.find(parent_txid); it_v3_package_parent != v3_txid_to_wtxid.end()) {\n+                    auto& my_ancestor_set = v3_ancestor_sets.at(my_txid);\n+                    Assume(my_ancestor_set.size() >= 1);\n+                    // Skip if we've already processed this parent, i.e. because we spend multiple outputs from this tx.\n+                    if (my_ancestor_set.count(parent_txid) == 0) {\n+                        // My parent's ancestors are also my ancestors.\n+                        const auto& parent_ancestor_set = v3_ancestor_sets.at(parent_txid);\n+                        Assume(parent_ancestor_set.size() >= 1);\n+                        my_ancestor_set.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+\n+                        // Check that we do not have too many ancestors.\n+                        if (my_ancestor_set.size() > V3_ANCESTOR_LIMIT) {\n+                            return util::Error{Untranslated(strprintf(\"tx %s would have too many ancestors\", tx->GetWitnessHash().ToString()))};\n+                        }\n+\n+                        // A v3 transaction with unconfirmed ancestors must be within\n+                        // V3_CHILD_MAX_VSIZE. This check is not complete as we have not calculated\n+                        // the sigop cost, which can increase the virtual size.\n+                        const int64_t vsize = GetVirtualTransactionSize(*tx, /*nSigOpCost=*/0, /*bytes_per_sigop=*/0);\n+                        if (vsize > V3_CHILD_MAX_VSIZE) {\n+                            return util::Error{Untranslated(strprintf(\"v3 child tx %s is too big: %u > %u virtual bytes\",\n+                                tx->GetWitnessHash().ToString(), vsize, V3_CHILD_MAX_VSIZE))};\n+                        }\n+                    }\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return util::Error{Untranslated(strprintf(\"non-v3 tx %s cannot spend from v3 tx %s\",\n+                                                              tx->GetWitnessHash().ToString(), it->second.ToString()))};\n+                }\n+            }\n+        }\n+    }\n+\n+    // Find violations of descendant limits. When a package is sorted, it's most efficient to build\n+    // descendant sets by iterating in reverse order.\n+    for (auto package_iter = package.rbegin(); package_iter != package.rend(); ++package_iter) {\n+        if ((*package_iter)->nVersion == 3) {\n+            const auto& my_ancestor_set = v3_ancestor_sets.at((*package_iter)->GetHash());\n+            const auto& my_descendant_set = v3_descendant_sets.at((*package_iter)->GetHash());\n+            Assume(my_ancestor_set.size() >= 1);\n+            Assume(my_descendant_set.size() >= 1);\n+\n+            for (const auto& ancestor_txid : my_ancestor_set) {\n+                // My descendants are also my ancestor's descendants.\n+                auto& ancestors_descendant_set = v3_descendant_sets.at(ancestor_txid);\n+                ancestors_descendant_set.insert(my_descendant_set.cbegin(), my_descendant_set.cend());",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 109,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "de230512e6a50b14f0cc3bc21412f1d19be2fe9b",
      "in_reply_to_id": 1432824698,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "taken",
      "created_at": "2024-01-08T09:45:58Z",
      "updated_at": "2024-01-08T09:45:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1444359931",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444359931"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444360019",
      "pull_request_review_id": 1808535298,
      "id": 1444360019,
      "node_id": "PRRC_kwDOABII585WFy9T",
      "diff_hunk": "@@ -116,3 +117,32 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n     }\n     return std::nullopt;\n }\n+\n+void CheckMempoolV3Invariants(const CTxMemPool& tx_pool, bool check_fees)\n+{\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {\n+        const auto& entry = *Assert(tx_pool.GetEntry(tx_info.tx->GetHash()));\n+        if (tx_info.tx->nVersion == 3) {\n+            // Check that special v3 ancestor/descendant limits and rules are always respected\n+            Assert(entry.GetCountWithDescendants() <= V3_DESCENDANT_LIMIT);\n+            Assert(entry.GetCountWithAncestors() <= V3_ANCESTOR_LIMIT);\n+            // If this transaction has at least 1 ancestor, it's a \"child\" and has restricted weight.\n+            if (entry.GetCountWithAncestors() > 1) {\n+                Assert(entry.GetTxSize() <= V3_CHILD_MAX_VSIZE);\n+                // All v3 transactions must only have v3 unconfirmed parents.\n+                const auto& parents = entry.GetMemPoolParentsConst();\n+                Assert(parents.begin()->get().GetSharedTx()->nVersion == 3);\n+            }\n+        } else if (entry.GetCountWithAncestors() > 1) {\n+            // All non-v3 transactions must only have non-v3 unconfirmed parents.\n+            const auto& parents = entry.GetMemPoolParentsConst();\n+            Assert(parents.begin()->get().GetSharedTx()->nVersion != 3);",
      "path": "src/test/util/txmempool.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "1dd62c3df4856c36bfc610f700684852772dd9f7",
      "in_reply_to_id": 1434122383,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2024-01-08T09:46:04Z",
      "updated_at": "2024-01-08T09:46:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1444360019",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444360019"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": 138,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444360107",
      "pull_request_review_id": 1808535544,
      "id": 1444360107,
      "node_id": "PRRC_kwDOABII585WFy-r",
      "diff_hunk": "@@ -0,0 +1,378 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            # Reset config options\n+            self.restart_node(0)",
      "path": "test/functional/mempool_accept_v3.py",
      "position": null,
      "original_position": 28,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "7159f5383cf6df4bf9abe9ffc3f0bde29f62e839",
      "in_reply_to_id": 1434137263,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "taken, thanks",
      "created_at": "2024-01-08T09:46:09Z",
      "updated_at": "2024-01-08T09:46:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1444360107",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444360107"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444360587",
      "pull_request_review_id": 1808536916,
      "id": 1444360587,
      "node_id": "PRRC_kwDOABII585WFzGL",
      "diff_hunk": "@@ -1304,6 +1374,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         // updated if package replace-by-fee is allowed in the future.\n         assert(!args.m_allow_replacement);\n         m_viewmempool.PackageAddTransaction(ws.m_ptx);\n+        ++num_prechecks_passed;",
      "path": "src/validation.cpp",
      "position": 145,
      "original_position": 141,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "bb3c27665101d2a7161d0d2c88db355de6845af9",
      "in_reply_to_id": 1434138603,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "because otherwise it is always 0",
      "created_at": "2024-01-08T09:46:38Z",
      "updated_at": "2024-01-08T09:46:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1444360587",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444360587"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1376,
      "original_line": 1376,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444360834",
      "pull_request_review_id": 1808537657,
      "id": 1444360834,
      "node_id": "PRRC_kwDOABII585WFzKC",
      "diff_hunk": "@@ -0,0 +1,178 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+util::Result<std::map<Txid, std::set<Txid>>> PackageV3Checks(const Package& package)\n+{\n+    // Map from txid of a v3 transaction to its ancestor set, including itself.\n+    // Since we enforce v3 inheritance rules as we build this set, sets should consist exclusively\n+    // of v3 transactions.\n+    std::map<Txid, std::set<Txid>> v3_ancestor_sets;\n+    // Map from txid of a v3 transaction to its descendant set, including itself.\n+    std::map<Txid, std::set<Txid>> v3_descendant_sets;\n+\n+    // Build a map from txid to wtxid for quick lookup; we'll use the wtxid for error strings.\n+    // Map from txid to wtxid for v3 txns in the package.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    // Map from txid to wtxid for non-v3 txns in the package.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    // Populate these maps.\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            // Transactions should have unique txids. If duplicate txids exist, this function\n+            // will still detect violations, but it will return the earlier transaction's wtxid.\n+            Assume(v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+            // Ancestor and descendant sets are inclusive of oneself.\n+            std::set<Txid> txid_self{tx->GetHash()};\n+            Assume(v3_ancestor_sets.emplace(tx->GetHash(), txid_self).second);\n+            Assume(v3_descendant_sets.emplace(tx->GetHash(), txid_self).second);\n+        } else {\n+            Assume(non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        }\n+    }\n+\n+    // For each tx, look for in-package parents. Ancestor sets are built in one pass, which means\n+    // the package must be sorted beforehand.\n+    Assume(IsTopoSortedPackage(package));\n+    for (const auto& tx : package) {\n+        const Txid& my_txid{tx->GetHash()};\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                const Txid& parent_txid = input.prevout.hash;\n+                // Look for a non-v3 in-package parent\n+                if (auto it_nonv3_package_parent = non_v3_txid_to_wtxid.find(parent_txid); it_nonv3_package_parent != non_v3_txid_to_wtxid.end()) {\n+                    return util::Error{Untranslated(strprintf(\"v3 tx %s cannot spend from non-v3 tx %s\",\n+                        tx->GetWitnessHash().ToString(), it_nonv3_package_parent->second.ToString()))};\n+                }\n+\n+                // Look for a v3 in-package parent. The ancestor set cannot exceed V3_ANCESTOR_LIMIT.\n+                if (auto it_v3_package_parent = v3_txid_to_wtxid.find(parent_txid); it_v3_package_parent != v3_txid_to_wtxid.end()) {\n+                    auto& my_ancestor_set = v3_ancestor_sets.at(my_txid);\n+                    Assume(my_ancestor_set.size() >= 1);\n+                    // Skip if we've already processed this parent, i.e. because we spend multiple outputs from this tx.\n+                    if (my_ancestor_set.count(parent_txid) == 0) {\n+                        // My parent's ancestors are also my ancestors.\n+                        const auto& parent_ancestor_set = v3_ancestor_sets.at(parent_txid);\n+                        Assume(parent_ancestor_set.size() >= 1);\n+                        my_ancestor_set.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+\n+                        // Check that we do not have too many ancestors.\n+                        if (my_ancestor_set.size() > V3_ANCESTOR_LIMIT) {\n+                            return util::Error{Untranslated(strprintf(\"tx %s would have too many ancestors\", tx->GetWitnessHash().ToString()))};\n+                        }\n+\n+                        // A v3 transaction with unconfirmed ancestors must be within\n+                        // V3_CHILD_MAX_VSIZE. This check is not complete as we have not calculated\n+                        // the sigop cost, which can increase the virtual size.\n+                        const int64_t vsize = GetVirtualTransactionSize(*tx, /*nSigOpCost=*/0, /*bytes_per_sigop=*/0);\n+                        if (vsize > V3_CHILD_MAX_VSIZE) {\n+                            return util::Error{Untranslated(strprintf(\"v3 child tx %s is too big: %u > %u virtual bytes\",\n+                                tx->GetWitnessHash().ToString(), vsize, V3_CHILD_MAX_VSIZE))};\n+                        }\n+                    }\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return util::Error{Untranslated(strprintf(\"non-v3 tx %s cannot spend from v3 tx %s\",\n+                                                              tx->GetWitnessHash().ToString(), it->second.ToString()))};\n+                }\n+            }\n+        }\n+    }\n+\n+    // Find violations of descendant limits. When a package is sorted, it's most efficient to build\n+    // descendant sets by iterating in reverse order.\n+    for (auto package_iter = package.rbegin(); package_iter != package.rend(); ++package_iter) {\n+        if ((*package_iter)->nVersion == 3) {",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "de230512e6a50b14f0cc3bc21412f1d19be2fe9b",
      "in_reply_to_id": 1432811937,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "taken",
      "created_at": "2024-01-08T09:46:53Z",
      "updated_at": "2024-01-08T09:46:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1444360834",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444360834"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 100,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445244468",
      "pull_request_review_id": 1809900246,
      "id": 1445244468,
      "node_id": "PRRC_kwDOABII585WJK40",
      "diff_hunk": "@@ -1144,17 +1144,25 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpends\n \n     unsigned nTxnRemoved = 0;\n     CFeeRate maxFeeRateRemoved(0);\n-    while (!mapTx.empty() && DynamicMemoryUsage() > sizelimit) {\n+    while (!mapTx.empty()) {\n         indexed_transaction_set::index<descendant_score>::type::iterator it = mapTx.get<descendant_score>().begin();\n \n+        // Keep trimming as long as memory is above the maximum.\n+        // Also, unless min relay feerate allows it, skim away everything paying <=0 fees.\n+        const bool keep_trimming{DynamicMemoryUsage() > sizelimit ||\n+            (m_min_relay_feerate.GetFeePerK() > 0 && it->GetModFeesWithDescendants() <= 0)};\n+        if (!keep_trimming) break;\n+\n         // We set the new mempool min fee to the feerate of the removed set, plus the\n         // \"minimum reasonable fee rate\" (ie some value under which we consider txn\n         // to have 0 fee). This way, we don't allow txn to enter mempool with feerate\n         // equal to txn which were removed with no block in between.\n         CFeeRate removed(it->GetModFeesWithDescendants(), it->GetSizeWithDescendants());\n-        removed += m_incremental_relay_feerate;\n-        trackPackageRemoved(removed);\n-        maxFeeRateRemoved = std::max(maxFeeRateRemoved, removed);\n+        if (removed >= m_min_relay_feerate) {",
      "path": "src/txmempool.cpp",
      "position": 40,
      "original_position": 22,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "4e746e223a016c00abcaece6002fbbf37ff19f73",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 4e746e223a016c00abcaece6002fbbf37ff19f73 \"[mempool] evict everything paying 0 fees in TrimToSize()\"\r\n\r\nThis seems like it should belong in a separate commit? At least the motivation for this is not entirely clear from the code comments nor the commit message.",
      "created_at": "2024-01-08T19:40:10Z",
      "updated_at": "2024-01-08T21:20:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1445244468",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445244468"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1161,
      "original_line": 1161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445273282",
      "pull_request_review_id": 1809900246,
      "id": 1445273282,
      "node_id": "PRRC_kwDOABII585WJR7C",
      "diff_hunk": "@@ -0,0 +1,188 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+util::Result<std::map<Txid, std::set<Txid>>> PackageV3Checks(const Package& package)\n+{\n+    // Map from txid of a v3 transaction to its ancestor set, including itself.\n+    // Since we enforce v3 inheritance rules as we build this set, sets should consist exclusively\n+    // of v3 transactions.\n+    std::map<Txid, std::set<Txid>> v3_ancestor_sets;\n+    // Map from txid of a v3 transaction to its descendant set, including itself.\n+    std::map<Txid, std::set<Txid>> v3_descendant_sets;\n+\n+    // This should only be called for v3 packages.\n+    if (!Assume(std::any_of(package.cbegin(), package.cend(), [](const auto& tx){ return tx->nVersion == 3; }))) {\n+        return v3_ancestor_sets;\n+    }\n+\n+    // Build a map from txid to wtxid for quick lookup; we'll use the wtxid for error strings.\n+    // Map from txid to wtxid for v3 txns in the package.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    // Map from txid to wtxid for non-v3 txns in the package.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    // Populate these maps.\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            // Transactions should have unique txids. If duplicate txids exist, this function\n+            // will still detect violations, but it will return the earlier transaction's wtxid.\n+            Assume(v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+            // Ancestor and descendant sets are inclusive of oneself.\n+            std::set<Txid> txid_self{tx->GetHash()};\n+            Assume(v3_ancestor_sets.emplace(tx->GetHash(), txid_self).second);\n+            Assume(v3_descendant_sets.emplace(tx->GetHash(), txid_self).second);\n+        } else {\n+            Assume(non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        }\n+    }\n+\n+    // For each tx, look for in-package parents. Ancestor sets are built in one pass, which means\n+    // the package must be sorted beforehand.\n+    Assume(IsTopoSortedPackage(package));\n+    for (const auto& tx : package) {\n+        const Txid& my_txid{tx->GetHash()};\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                const Txid& parent_txid = input.prevout.hash;\n+                // Look for a non-v3 in-package parent\n+                if (auto it_nonv3_package_parent = non_v3_txid_to_wtxid.find(parent_txid); it_nonv3_package_parent != non_v3_txid_to_wtxid.end()) {\n+                    return util::Error{Untranslated(strprintf(\"v3 tx %s cannot spend from non-v3 tx %s\",\n+                        tx->GetWitnessHash().ToString(), it_nonv3_package_parent->second.ToString()))};\n+                }\n+\n+                // Look for a v3 in-package parent. The ancestor set cannot exceed V3_ANCESTOR_LIMIT.\n+                if (auto it_v3_package_parent = v3_txid_to_wtxid.find(parent_txid); it_v3_package_parent != v3_txid_to_wtxid.end()) {\n+                    auto& my_ancestor_set = v3_ancestor_sets.at(my_txid);",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 67,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "299680a5c736783fbb03fd448064ed35ef1a42a0",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 299680a5c736783fbb03fd448064ed35ef1a42a0 \"[policy] add v3 policy rules\"\r\n\r\nnit: This could be at the top of the loop as well instead of retrieving it for every input.",
      "created_at": "2024-01-08T20:08:02Z",
      "updated_at": "2024-01-08T21:20:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1445273282",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445273282"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445293662",
      "pull_request_review_id": 1809900246,
      "id": 1445293662,
      "node_id": "PRRC_kwDOABII585WJW5e",
      "diff_hunk": "@@ -48,4 +51,269 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n     BOOST_CHECK_EQUAL(result.m_state.GetRejectReason(), \"coinbase\");\n     BOOST_CHECK(result.m_state.GetResult() == TxValidationResult::TX_CONSENSUS);\n }\n+\n+// Generate a number of random, nonexistent outpoints.\n+static inline std::vector<COutPoint> random_outpoints(size_t num_outpoints) {\n+    std::vector<COutPoint> outpoints;\n+    for (size_t i{0}; i < num_outpoints; ++i) {\n+        outpoints.emplace_back(Txid::FromUint256(GetRandHash()), 0);\n+    }\n+    return outpoints;\n+}\n+\n+static inline std::vector<CPubKey> random_keys(size_t num_keys) {\n+    std::vector<CPubKey> keys;\n+    keys.reserve(num_keys);\n+    for (size_t i{0}; i < num_keys; ++i) {\n+        CKey key;\n+        key.MakeNewKey(true);\n+        keys.emplace_back(key.GetPubKey());\n+    }\n+    return keys;\n+}\n+\n+// Creates a placeholder tx (not valid) with 25 outputs. Specify the nVersion and the inputs.\n+static inline CTransactionRef make_tx(const std::vector<COutPoint>& inputs, int32_t version)\n+{\n+    CMutableTransaction mtx = CMutableTransaction{};\n+    mtx.nVersion = version;\n+    mtx.vin.resize(inputs.size());\n+    mtx.vout.resize(25);\n+    for (size_t i{0}; i < inputs.size(); ++i) {\n+        mtx.vin[i].prevout = inputs[i];\n+    }\n+    for (auto i{0}; i < 25; ++i) {\n+        mtx.vout[i].scriptPubKey = CScript() << OP_TRUE;\n+        mtx.vout[i].nValue = 10000;\n+    }\n+    return MakeTransactionRef(mtx);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(version3_tests, RegTestingSetup)\n+{\n+    // Test V3 policy helper functions\n+    CTxMemPool& pool = *Assert(m_node.mempool);\n+    LOCK2(cs_main, pool.cs);\n+    TestMemPoolEntryHelper entry;\n+    std::set<Txid> empty_conflicts_set;\n+\n+    auto mempool_tx_v3 = make_tx(random_outpoints(1), /*version=*/3);\n+    pool.addUnchecked(entry.FromTx(mempool_tx_v3));\n+    auto mempool_tx_v2 = make_tx(random_outpoints(1), /*version=*/2);\n+    pool.addUnchecked(entry.FromTx(mempool_tx_v2));\n+    // Default values.\n+    CTxMemPool::Limits m_limits{};\n+\n+    // Cannot spend from an unconfirmed v3 transaction unless this tx is also v3.\n+    {\n+        // mempool_tx_v3\n+        //      ^\n+        // tx_v2_from_v3\n+        auto tx_v2_from_v3 = make_tx({COutPoint{mempool_tx_v3->GetHash(), 0}}, /*version=*/2);\n+        auto ancestors_v2_from_v3{pool.CalculateMemPoolAncestors(entry.FromTx(tx_v2_from_v3), m_limits)};\n+        const auto expected_error_str{strprintf(\"non-v3 tx %s cannot spend from v3 tx %s\", tx_v2_from_v3->GetWitnessHash().ToString(), mempool_tx_v3->GetWitnessHash().ToString())};\n+        BOOST_CHECK(*ApplyV3Rules(tx_v2_from_v3, *ancestors_v2_from_v3, /*num_in_pkg_ancestors=*/0, empty_conflicts_set, GetVirtualTransactionSize(*tx_v2_from_v3)) == expected_error_str);\n+        auto result_1 = PackageV3Checks({mempool_tx_v3, tx_v2_from_v3});\n+        BOOST_CHECK_EQUAL(util::ErrorString(result_1).original, expected_error_str);\n+\n+        // mempool_tx_v3  mempool_tx_v2\n+        //            ^    ^\n+        //    tx_v2_from_v2_and_v3\n+        auto tx_v2_from_v2_and_v3 = make_tx({COutPoint{mempool_tx_v3->GetHash(), 0}, COutPoint{mempool_tx_v2->GetHash(), 0}}, /*version=*/2);\n+        auto ancestors_v2_from_both{pool.CalculateMemPoolAncestors(entry.FromTx(tx_v2_from_v2_and_v3), m_limits)};\n+        const auto expected_error_str_2{strprintf(\"non-v3 tx %s cannot spend from v3 tx %s\",\n+                                        tx_v2_from_v2_and_v3->GetWitnessHash().ToString(), mempool_tx_v3->GetWitnessHash().ToString())};\n+        BOOST_CHECK(*ApplyV3Rules(tx_v2_from_v2_and_v3, *ancestors_v2_from_both, /*num_in_pkg_ancestors=*/0, empty_conflicts_set, GetVirtualTransactionSize(*tx_v2_from_v2_and_v3))\n+                    == expected_error_str_2);\n+        auto result_2 = PackageV3Checks({mempool_tx_v2, mempool_tx_v3, tx_v2_from_v2_and_v3});\n+        BOOST_CHECK_EQUAL(util::ErrorString(result_2).original, expected_error_str_2);\n+    }\n+\n+    // V3 cannot spend from an unconfirmed non-v3 transaction.\n+    {\n+        // mempool_tx_v2\n+        //      ^\n+        // tx_v3_from_v2\n+        auto tx_v3_from_v2 = make_tx({COutPoint{mempool_tx_v2->GetHash(), 0}}, /*version=*/3);\n+        auto ancestors_v3_from_v2{pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_from_v2), m_limits)};\n+        const auto expected_error_str{strprintf(\"v3 tx %s cannot spend from non-v3 tx %s\",\n+                                      tx_v3_from_v2->GetWitnessHash().ToString(), mempool_tx_v2->GetWitnessHash().ToString())};\n+        BOOST_CHECK(*ApplyV3Rules(tx_v3_from_v2, *ancestors_v3_from_v2, /*num_in_pkg_ancestors=*/0, empty_conflicts_set, GetVirtualTransactionSize(*tx_v3_from_v2)) == expected_error_str);\n+        auto result_1 = PackageV3Checks({mempool_tx_v2, tx_v3_from_v2});\n+        BOOST_CHECK_EQUAL(util::ErrorString(result_1).original, expected_error_str);\n+\n+        // mempool_tx_v3  mempool_tx_v2\n+        //            ^    ^\n+        //    tx_v3_from_v2_and_v3\n+        auto tx_v3_from_v2_and_v3 = make_tx({COutPoint{mempool_tx_v3->GetHash(), 0}, COutPoint{mempool_tx_v2->GetHash(), 0}}, /*version=*/3);\n+        auto ancestors_v3_from_both{pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_from_v2_and_v3), m_limits)};\n+        const auto expected_error_str_2{strprintf(\"v3 tx %s cannot spend from non-v3 tx %s\",\n+                                        tx_v3_from_v2_and_v3->GetWitnessHash().ToString(), mempool_tx_v2->GetWitnessHash().ToString())};\n+        BOOST_CHECK(*ApplyV3Rules(tx_v3_from_v2_and_v3, *ancestors_v3_from_both, /*num_in_pkg_ancestors=*/0, empty_conflicts_set, GetVirtualTransactionSize(*tx_v3_from_v2_and_v3))\n+                    == expected_error_str_2);\n+        auto result_2 = PackageV3Checks({mempool_tx_v2, mempool_tx_v3, tx_v3_from_v2_and_v3});\n+        BOOST_CHECK_EQUAL(util::ErrorString(result_2).original, expected_error_str_2);\n+    }\n+    // V3 from V3 is ok, and non-V3 from non-V3 is ok.\n+    {\n+        // mempool_tx_v3\n+        //      ^\n+        // tx_v3_from_v3\n+        auto tx_v3_from_v3 = make_tx({COutPoint{mempool_tx_v3->GetHash(), 0}}, /*version=*/3);\n+        auto ancestors_v3{pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_from_v3), m_limits)};\n+        BOOST_CHECK(ApplyV3Rules(tx_v3_from_v3, *ancestors_v3, /*num_in_pkg_ancestors=*/0, empty_conflicts_set, GetVirtualTransactionSize(*tx_v3_from_v3))\n+                    == std::nullopt);\n+\n+        // Check that the ancestor sets are built correctly.\n+        auto result_v3 = PackageV3Checks({mempool_tx_v3, tx_v3_from_v3});\n+        BOOST_CHECK(result_v3);\n+        BOOST_CHECK(result_v3->size() == 2);\n+        std::set<Txid> expected_mempool_ancestor_set{mempool_tx_v3->GetHash()};\n+        BOOST_CHECK(result_v3->at(mempool_tx_v3->GetHash()) == expected_mempool_ancestor_set);\n+        std::set<Txid> expected_tx_ancestor_set{mempool_tx_v3->GetHash(), tx_v3_from_v3->GetHash()};\n+        BOOST_CHECK(result_v3->at(tx_v3_from_v3->GetHash()) == expected_tx_ancestor_set);\n+\n+        // mempool_tx_v2\n+        //      ^\n+        // tx_v2_from_v2\n+        auto tx_v2_from_v2 = make_tx({COutPoint{mempool_tx_v2->GetHash(), 0}}, /*version=*/2);\n+        auto ancestors_v2{pool.CalculateMemPoolAncestors(entry.FromTx(tx_v2_from_v2), m_limits)};\n+        BOOST_CHECK(ApplyV3Rules(tx_v2_from_v2, *ancestors_v2, /*num_in_pkg_ancestors=*/0, empty_conflicts_set, GetVirtualTransactionSize(*tx_v2_from_v2))\n+                    == std::nullopt);\n+        // Don't call PackageV3Checks with just these two transactions bc it expects at least one v3 tx.\n+        // PackageV3Checks is able to assess these two parent-child pairs separately.\n+        auto result_both = PackageV3Checks({mempool_tx_v3, tx_v3_from_v3, mempool_tx_v2, tx_v2_from_v2});\n+        BOOST_CHECK(result_both);\n+        BOOST_CHECK(result_both->size() == 2);\n+        BOOST_CHECK(result_both->at(mempool_tx_v3->GetHash()) == expected_mempool_ancestor_set);\n+        BOOST_CHECK(result_both->at(tx_v3_from_v3->GetHash()) == expected_tx_ancestor_set);\n+        BOOST_CHECK(result_both->count(mempool_tx_v2->GetHash()) == 0);\n+        BOOST_CHECK(result_both->count(tx_v2_from_v2->GetHash()) == 0);\n+    }\n+\n+    // Tx spending v3 cannot have too many mempool ancestors\n+    // Configuration where the tx has multiple direct parents.\n+    {\n+        Package package_multi_parents;\n+        std::vector<COutPoint> mempool_outpoints;\n+        mempool_outpoints.emplace_back(mempool_tx_v3->GetHash(), 0);\n+        package_multi_parents.emplace_back(mempool_tx_v3);\n+        for (size_t i{0}; i < 2; ++i) {\n+            auto mempool_tx = make_tx(random_outpoints(i + 1), /*version=*/3);\n+            pool.addUnchecked(entry.FromTx(mempool_tx));\n+            mempool_outpoints.emplace_back(mempool_tx->GetHash(), 0);\n+            package_multi_parents.emplace_back(mempool_tx);\n+        }\n+        auto tx_v3_multi_parent = make_tx(mempool_outpoints, /*version=*/3);\n+        package_multi_parents.emplace_back(tx_v3_multi_parent);\n+        auto ancestors{pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_multi_parent), m_limits)};\n+        BOOST_CHECK_EQUAL(ancestors->size(), 3);\n+        const auto expected_error_str{strprintf(\"tx %s would have too many ancestors\", tx_v3_multi_parent->GetWitnessHash().ToString())};\n+        BOOST_CHECK(*ApplyV3Rules(tx_v3_multi_parent, *ancestors, /*num_in_pkg_ancestors=*/0, empty_conflicts_set, GetVirtualTransactionSize(*tx_v3_multi_parent))\n+                    == expected_error_str);\n+        auto res = PackageV3Checks(package_multi_parents);\n+        BOOST_CHECK_EQUAL(util::ErrorString(res).original, expected_error_str);\n+    }\n+\n+    // Configuration where the tx is in a multi-generation chain.\n+    {\n+        Package package_multi_gen;\n+        auto last_outpoint{random_outpoints(1)[0]};\n+        for (size_t i{0}; i < 2; ++i) {\n+            auto mempool_tx = make_tx({last_outpoint}, /*version=*/3);\n+            pool.addUnchecked(entry.FromTx(mempool_tx));\n+            last_outpoint = COutPoint{mempool_tx->GetHash(), 0};\n+            package_multi_gen.emplace_back(mempool_tx);\n+        }\n+        auto tx_v3_multi_gen = make_tx({last_outpoint}, /*version=*/3);\n+        package_multi_gen.emplace_back(tx_v3_multi_gen);\n+        auto ancestors{pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_multi_gen), m_limits)};\n+        const auto expected_error_str{strprintf(\"tx %s would have too many ancestors\", tx_v3_multi_gen->GetWitnessHash().ToString())};\n+        BOOST_CHECK(*ApplyV3Rules(tx_v3_multi_gen, *ancestors, /*num_in_pkg_ancestors=*/0, empty_conflicts_set, GetVirtualTransactionSize(*tx_v3_multi_gen))\n+                    == expected_error_str);\n+        auto res = PackageV3Checks(package_multi_gen);\n+        BOOST_CHECK_EQUAL(util::ErrorString(res).original, expected_error_str);\n+    }\n+\n+    // Tx spending v3 cannot be too large in virtual size.\n+    auto many_inputs{random_outpoints(100)};\n+    many_inputs.emplace_back(mempool_tx_v3->GetHash(), 0);\n+    {\n+        auto tx_v3_child_big = make_tx(many_inputs, /*version=*/3);\n+        const auto vsize{GetVirtualTransactionSize(*tx_v3_child_big)};\n+        auto ancestors{pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_child_big), m_limits)};\n+        const auto expected_error_str{strprintf(\"v3 child tx %s is too big: %u > %u virtual bytes\",\n+                                                tx_v3_child_big->GetWitnessHash().ToString(), vsize, V3_CHILD_MAX_VSIZE)};\n+        BOOST_CHECK(*ApplyV3Rules(tx_v3_child_big, *ancestors, /*num_in_pkg_ancestors=*/0, empty_conflicts_set, GetVirtualTransactionSize(*tx_v3_child_big))\n+                    == expected_error_str);\n+        auto res = PackageV3Checks({mempool_tx_v3, tx_v3_child_big});\n+        BOOST_CHECK_EQUAL(util::ErrorString(res).original, expected_error_str);\n+    }\n+\n+    // Tx spending v3 cannot have too many sigops.\n+    auto multisig_outpoints{random_outpoints(3)};\n+    multisig_outpoints.emplace_back(mempool_tx_v3->GetHash(), 0);\n+    auto keys{random_keys(2)};\n+    CScript script_multisig;\n+    script_multisig << OP_1;\n+    for (const auto& key : keys) {\n+        script_multisig << ToByteVector(key);\n+    }\n+    script_multisig << OP_2 << OP_CHECKMULTISIG;\n+    {\n+        CMutableTransaction mtx_many_sigops = CMutableTransaction{};\n+        mtx_many_sigops.nVersion = 3;\n+        for (const auto& outpoint : multisig_outpoints) {\n+            mtx_many_sigops.vin.emplace_back(outpoint, script_multisig);\n+        }\n+        mtx_many_sigops.vout.resize(1);\n+        mtx_many_sigops.vout.back().scriptPubKey = CScript() << OP_TRUE;\n+        mtx_many_sigops.vout.back().nValue = 10000;\n+        auto tx_many_sigops{MakeTransactionRef(mtx_many_sigops)};\n+\n+        auto ancestors{pool.CalculateMemPoolAncestors(entry.FromTx(tx_many_sigops), m_limits)};\n+        // legacy uses fAccurate = false, and the maximum number of multisig keys is used\n+        const int64_t total_sigops{static_cast<int64_t>(tx_many_sigops->vin.size()) * static_cast<int64_t>(script_multisig.GetSigOpCount(/*fAccurate=*/false))};\n+        BOOST_CHECK_EQUAL(total_sigops, tx_many_sigops->vin.size() * MAX_PUBKEYS_PER_MULTISIG);\n+        const int64_t bip141_vsize{GetVirtualTransactionSize(*tx_many_sigops)};\n+        // Weight limit is not reached...\n+        BOOST_CHECK(ApplyV3Rules(tx_many_sigops, *ancestors, /*num_in_pkg_ancestors=*/0, empty_conflicts_set, bip141_vsize) == std::nullopt);\n+        BOOST_CHECK(PackageV3Checks({mempool_tx_v3, tx_many_sigops}));\n+        // ...but sigop limit is.\n+        const auto expected_error_str{strprintf(\"v3 child tx %s is too big: %u > %u virtual bytes\",\n+                                                tx_many_sigops->GetWitnessHash().ToString(), total_sigops * DEFAULT_BYTES_PER_SIGOP, V3_CHILD_MAX_VSIZE)};\n+        BOOST_CHECK(*ApplyV3Rules(tx_many_sigops, *ancestors, /*num_in_pkg_ancestors=*/0, empty_conflicts_set,\n+                                  /*vsize=*/std::max(total_sigops * DEFAULT_BYTES_PER_SIGOP, bip141_vsize))",
      "path": "src/test/txvalidation_tests.cpp",
      "position": null,
      "original_position": 251,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "299680a5c736783fbb03fd448064ed35ef1a42a0",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 299680a5c736783fbb03fd448064ed35ef1a42a0 \"[policy] add v3 policy rules\"\r\n\r\nnit: Could use `GetVirtualTransactionSize` instead of calculated the sigops adjusted size manually.",
      "created_at": "2024-01-08T20:28:41Z",
      "updated_at": "2024-01-08T21:20:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1445293662",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445293662"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445305284",
      "pull_request_review_id": 1809900246,
      "id": 1445305284,
      "node_id": "PRRC_kwDOABII585WJZvE",
      "diff_hunk": "@@ -864,10 +877,12 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     // while a tx could be package CPFP'd when entering the mempool, we do not have a DoS-resistant\n     // method of ensuring the tx remains bumped. For example, the fee-bumping child could disappear\n     // due to a replacement.\n-    if (!bypass_limits && ws.m_modified_fees < m_pool.m_min_relay_feerate.GetFee(ws.m_vsize)) {\n+    // The only exception is v3 transactions.\n+    if (!bypass_limits && ws.m_ptx->nVersion != 3 && ws.m_modified_fees < m_pool.m_min_relay_feerate.GetFee(ws.m_vsize)) {\n         // Even though this is a fee-related failure, this result is TX_MEMPOOL_POLICY, not\n         // TX_RECONSIDERABLE, because it cannot be bypassed using package validation.\n-        return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"min relay fee not met\",\n+        return state.Invalid(ws.m_ptx->nVersion == 3 ? TxValidationResult::TX_RECONSIDERABLE : TxValidationResult::TX_MEMPOOL_POLICY,",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 59,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "6de06e116f0dbe632be0e4babd45d3f59c117171",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 6de06e116f0dbe632be0e4babd45d3f59c117171 \"[policy/validation] allow v3 transactions with certain restrictions\"\r\n\r\nThis seems unnecessary since if the tx was v3, then we wouldn't be able to reach this error condition.",
      "created_at": "2024-01-08T20:40:35Z",
      "updated_at": "2024-01-08T21:20:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1445305284",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445305284"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 884,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445328322",
      "pull_request_review_id": 1809900246,
      "id": 1445328322,
      "node_id": "PRRC_kwDOABII585WJfXC",
      "diff_hunk": "@@ -0,0 +1,378 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+def cleanup(extra_args=None):\n+    def decorator(func):\n+        def wrapper(self):\n+            try:\n+                if extra_args is not None:\n+                    self.restart_node(0, extra_args=extra_args)\n+                func(self)\n+            finally:\n+                # Clear mempool again after test\n+                self.generate(self.nodes[0], 1)\n+                if extra_args is not None:\n+                    self.restart_node(0)\n+        return wrapper\n+    return decorator\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def check_mempool(self, txids):\n+        \"\"\"Assert exact contents of the node's mempool (by txid).\"\"\"\n+        mempool_contents = self.nodes[0].getrawmempool()\n+        assert_equal(len(txids), len(mempool_contents))\n+        assert all([txid in txids for txid in mempool_contents])\n+\n+    @cleanup(extra_args=[\"-datacarriersize=1000\"])\n+    def test_v3_acceptance(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test a child of a V3 transaction cannot be more than 1000vB\")\n+        tx_v3_parent_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        tx_v3_child_heavy = self.wallet.create_self_transfer(\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=4004,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_heavy[\"tx\"].get_vsize(), 1000)\n+        assert_raises_rpc_error(-26, f\"v3-rule-violation, v3 child tx {tx_v3_child_heavy['wtxid']} is too big\", node.sendrawtransaction, tx_v3_child_heavy[\"hex\"])\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        # tx has no descendants\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 1)\n+\n+        self.log.info(\"Test that, during replacements, only the new transaction counts for V3 descendant limit\")\n+        tx_v3_child_almost_heavy = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3987,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(1000, tx_v3_child_almost_heavy[\"tx\"].get_vsize())\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+        tx_v3_child_almost_heavy_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3500,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_almost_heavy[\"tx\"].get_vsize() + tx_v3_child_almost_heavy_rbf[\"tx\"].get_vsize(), 1000)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy_rbf[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+\n+    @cleanup\n+    def test_v3_replacement(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")\n+        utxo_v3_bip125 = self.wallet.get_utxo()\n+        tx_v3_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125[\"txid\"]])\n+\n+        tx_v3_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf[\"txid\"]])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 3,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"]])\n+\n+        self.log.info(\"Test that replacements cannot cause violation of inherited V3\")\n+        utxo_v3_parent = self.wallet.get_utxo()\n+        tx_v3_parent = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_parent,\n+            version=3\n+        )\n+        tx_v3_child = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+        tx_v3_child_rbf_v2 = self.wallet.create_self_transfer(\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=2\n+        )\n+        assert_raises_rpc_error(-26, f\"v3-rule-violation, non-v3 tx {tx_v3_child_rbf_v2['wtxid']} cannot spend from v3 tx {tx_v3_parent['wtxid']}\", node.sendrawtransaction, tx_v3_child_rbf_v2[\"hex\"])\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+\n+    @cleanup\n+    def test_v3_bip125(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test v3 transactions that don't signal BIP125 are replaceable\")\n+        assert_equal(node.getmempoolinfo()[\"fullrbf\"], False)\n+        utxo_v3_no_bip125 = self.wallet.get_utxo()\n+        tx_v3_no_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE + 1,\n+            version=3\n+        )\n+\n+        self.check_mempool([tx_v3_no_bip125[\"txid\"]])\n+        assert not node.getmempoolentry(tx_v3_no_bip125[\"txid\"])[\"bip125-replaceable\"]\n+        tx_v3_no_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_no_bip125_rbf[\"txid\"]])\n+\n+    @cleanup(extra_args=[\"-datacarriersize=40000\"])\n+    def test_v3_reorg(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test that, during a reorg, v3 rules are not enforced\")\n+        tx_v2_block = self.wallet.send_self_transfer(from_node=node, version=2)\n+        tx_v3_block = self.wallet.send_self_transfer(from_node=node, version=3)\n+        tx_v3_block2 = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"]]))\n+\n+        block = self.generate(node, 1)\n+        assert_equal(node.getrawmempool(), [])\n+        tx_v2_from_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block[\"new_utxo\"], version=2)\n+        tx_v3_from_v2 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v2_block[\"new_utxo\"], version=3)\n+        tx_v3_child_large = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block2[\"new_utxo\"], target_weight=5000, version=3)\n+        assert_greater_than(node.getmempoolentry(tx_v3_child_large[\"txid\"])[\"vsize\"], 1000)\n+        assert_equal(set(node.getrawmempool()), set([tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))",
      "path": "test/functional/mempool_accept_v3.py",
      "position": null,
      "original_position": 181,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "fd55f70257456e804cadd7af3e70f783de373008",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In fd55f70257456e804cadd7af3e70f783de373008 \"[functional test] v3 transaction submission\"\r\n\r\nnit: use `self.check_mempool`, here and elsewhere.",
      "created_at": "2024-01-08T21:01:56Z",
      "updated_at": "2024-01-08T21:20:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1445328322",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1445328322"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 181,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1447653071",
      "pull_request_review_id": 1813669736,
      "id": 1447653071,
      "node_id": "PRRC_kwDOABII585WSW7P",
      "diff_hunk": "@@ -1144,17 +1144,25 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpends\n \n     unsigned nTxnRemoved = 0;\n     CFeeRate maxFeeRateRemoved(0);\n-    while (!mapTx.empty() && DynamicMemoryUsage() > sizelimit) {\n+    while (!mapTx.empty()) {\n         indexed_transaction_set::index<descendant_score>::type::iterator it = mapTx.get<descendant_score>().begin();\n \n+        // Keep trimming as long as memory is above the maximum.\n+        // Also, unless min relay feerate allows it, skim away everything paying <=0 fees.\n+        const bool keep_trimming{DynamicMemoryUsage() > sizelimit ||\n+            (m_min_relay_feerate.GetFeePerK() > 0 && it->GetModFeesWithDescendants() <= 0)};\n+        if (!keep_trimming) break;\n+\n         // We set the new mempool min fee to the feerate of the removed set, plus the\n         // \"minimum reasonable fee rate\" (ie some value under which we consider txn\n         // to have 0 fee). This way, we don't allow txn to enter mempool with feerate\n         // equal to txn which were removed with no block in between.\n         CFeeRate removed(it->GetModFeesWithDescendants(), it->GetSizeWithDescendants());\n-        removed += m_incremental_relay_feerate;\n-        trackPackageRemoved(removed);\n-        maxFeeRateRemoved = std::max(maxFeeRateRemoved, removed);\n+        if (removed >= m_min_relay_feerate) {",
      "path": "src/txmempool.cpp",
      "position": 40,
      "original_position": 22,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "4e746e223a016c00abcaece6002fbbf37ff19f73",
      "in_reply_to_id": 1445244468,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "~True, it's helpful but not strictly necessary here. I think I'll just take this out of this PR and defer it to when I reopen #27018 on top of this.~ edit; kept in",
      "created_at": "2024-01-10T16:48:11Z",
      "updated_at": "2024-01-18T14:51:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1447653071",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1447653071"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1161,
      "original_line": 1161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453506519",
      "pull_request_review_id": 1823573332,
      "id": 1453506519,
      "node_id": "PRRC_kwDOABII585Wor_X",
      "diff_hunk": "@@ -1144,17 +1144,25 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpends\n \n     unsigned nTxnRemoved = 0;\n     CFeeRate maxFeeRateRemoved(0);\n-    while (!mapTx.empty() && DynamicMemoryUsage() > sizelimit) {\n+    while (!mapTx.empty()) {\n         indexed_transaction_set::index<descendant_score>::type::iterator it = mapTx.get<descendant_score>().begin();\n \n+        // Keep trimming as long as memory is above the maximum.\n+        // Also, unless min relay feerate allows it, skim away everything paying <=0 fees.\n+        const bool keep_trimming{DynamicMemoryUsage() > sizelimit ||\n+            (m_min_relay_feerate.GetFeePerK() > 0 && it->GetModFeesWithDescendants() <= 0)};\n+        if (!keep_trimming) break;\n+\n         // We set the new mempool min fee to the feerate of the removed set, plus the\n         // \"minimum reasonable fee rate\" (ie some value under which we consider txn\n         // to have 0 fee). This way, we don't allow txn to enter mempool with feerate\n         // equal to txn which were removed with no block in between.\n         CFeeRate removed(it->GetModFeesWithDescendants(), it->GetSizeWithDescendants());\n-        removed += m_incremental_relay_feerate;\n-        trackPackageRemoved(removed);\n-        maxFeeRateRemoved = std::max(maxFeeRateRemoved, removed);\n+        if (removed >= m_min_relay_feerate) {",
      "path": "src/txmempool.cpp",
      "position": 40,
      "original_position": 22,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "4e746e223a016c00abcaece6002fbbf37ff19f73",
      "in_reply_to_id": 1445244468,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "~I've removed this commit. Going to open followup PR for it shortly~ edit: nvm",
      "created_at": "2024-01-16T14:28:13Z",
      "updated_at": "2024-01-18T14:51:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1453506519",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453506519"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1161,
      "original_line": 1161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453507069",
      "pull_request_review_id": 1823574711,
      "id": 1453507069,
      "node_id": "PRRC_kwDOABII585WosH9",
      "diff_hunk": "@@ -0,0 +1,188 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <vector>\n+\n+util::Result<std::map<Txid, std::set<Txid>>> PackageV3Checks(const Package& package)\n+{\n+    // Map from txid of a v3 transaction to its ancestor set, including itself.\n+    // Since we enforce v3 inheritance rules as we build this set, sets should consist exclusively\n+    // of v3 transactions.\n+    std::map<Txid, std::set<Txid>> v3_ancestor_sets;\n+    // Map from txid of a v3 transaction to its descendant set, including itself.\n+    std::map<Txid, std::set<Txid>> v3_descendant_sets;\n+\n+    // This should only be called for v3 packages.\n+    if (!Assume(std::any_of(package.cbegin(), package.cend(), [](const auto& tx){ return tx->nVersion == 3; }))) {\n+        return v3_ancestor_sets;\n+    }\n+\n+    // Build a map from txid to wtxid for quick lookup; we'll use the wtxid for error strings.\n+    // Map from txid to wtxid for v3 txns in the package.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> v3_txid_to_wtxid;\n+    // Map from txid to wtxid for non-v3 txns in the package.\n+    std::unordered_map<Txid, Wtxid, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    // Populate these maps.\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            // Transactions should have unique txids. If duplicate txids exist, this function\n+            // will still detect violations, but it will return the earlier transaction's wtxid.\n+            Assume(v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+            // Ancestor and descendant sets are inclusive of oneself.\n+            std::set<Txid> txid_self{tx->GetHash()};\n+            Assume(v3_ancestor_sets.emplace(tx->GetHash(), txid_self).second);\n+            Assume(v3_descendant_sets.emplace(tx->GetHash(), txid_self).second);\n+        } else {\n+            Assume(non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash()).second);\n+        }\n+    }\n+\n+    // For each tx, look for in-package parents. Ancestor sets are built in one pass, which means\n+    // the package must be sorted beforehand.\n+    Assume(IsTopoSortedPackage(package));\n+    for (const auto& tx : package) {\n+        const Txid& my_txid{tx->GetHash()};\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                const Txid& parent_txid = input.prevout.hash;\n+                // Look for a non-v3 in-package parent\n+                if (auto it_nonv3_package_parent = non_v3_txid_to_wtxid.find(parent_txid); it_nonv3_package_parent != non_v3_txid_to_wtxid.end()) {\n+                    return util::Error{Untranslated(strprintf(\"v3 tx %s cannot spend from non-v3 tx %s\",\n+                        tx->GetWitnessHash().ToString(), it_nonv3_package_parent->second.ToString()))};\n+                }\n+\n+                // Look for a v3 in-package parent. The ancestor set cannot exceed V3_ANCESTOR_LIMIT.\n+                if (auto it_v3_package_parent = v3_txid_to_wtxid.find(parent_txid); it_v3_package_parent != v3_txid_to_wtxid.end()) {\n+                    auto& my_ancestor_set = v3_ancestor_sets.at(my_txid);",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 67,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "299680a5c736783fbb03fd448064ed35ef1a42a0",
      "in_reply_to_id": 1445273282,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2024-01-16T14:28:38Z",
      "updated_at": "2024-01-16T14:28:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1453507069",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453507069"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453507149",
      "pull_request_review_id": 1823574945,
      "id": 1453507149,
      "node_id": "PRRC_kwDOABII585WosJN",
      "diff_hunk": "@@ -48,4 +51,269 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n     BOOST_CHECK_EQUAL(result.m_state.GetRejectReason(), \"coinbase\");\n     BOOST_CHECK(result.m_state.GetResult() == TxValidationResult::TX_CONSENSUS);\n }\n+\n+// Generate a number of random, nonexistent outpoints.\n+static inline std::vector<COutPoint> random_outpoints(size_t num_outpoints) {\n+    std::vector<COutPoint> outpoints;\n+    for (size_t i{0}; i < num_outpoints; ++i) {\n+        outpoints.emplace_back(Txid::FromUint256(GetRandHash()), 0);\n+    }\n+    return outpoints;\n+}\n+\n+static inline std::vector<CPubKey> random_keys(size_t num_keys) {\n+    std::vector<CPubKey> keys;\n+    keys.reserve(num_keys);\n+    for (size_t i{0}; i < num_keys; ++i) {\n+        CKey key;\n+        key.MakeNewKey(true);\n+        keys.emplace_back(key.GetPubKey());\n+    }\n+    return keys;\n+}\n+\n+// Creates a placeholder tx (not valid) with 25 outputs. Specify the nVersion and the inputs.\n+static inline CTransactionRef make_tx(const std::vector<COutPoint>& inputs, int32_t version)\n+{\n+    CMutableTransaction mtx = CMutableTransaction{};\n+    mtx.nVersion = version;\n+    mtx.vin.resize(inputs.size());\n+    mtx.vout.resize(25);\n+    for (size_t i{0}; i < inputs.size(); ++i) {\n+        mtx.vin[i].prevout = inputs[i];\n+    }\n+    for (auto i{0}; i < 25; ++i) {\n+        mtx.vout[i].scriptPubKey = CScript() << OP_TRUE;\n+        mtx.vout[i].nValue = 10000;\n+    }\n+    return MakeTransactionRef(mtx);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(version3_tests, RegTestingSetup)\n+{\n+    // Test V3 policy helper functions\n+    CTxMemPool& pool = *Assert(m_node.mempool);\n+    LOCK2(cs_main, pool.cs);\n+    TestMemPoolEntryHelper entry;\n+    std::set<Txid> empty_conflicts_set;\n+\n+    auto mempool_tx_v3 = make_tx(random_outpoints(1), /*version=*/3);\n+    pool.addUnchecked(entry.FromTx(mempool_tx_v3));\n+    auto mempool_tx_v2 = make_tx(random_outpoints(1), /*version=*/2);\n+    pool.addUnchecked(entry.FromTx(mempool_tx_v2));\n+    // Default values.\n+    CTxMemPool::Limits m_limits{};\n+\n+    // Cannot spend from an unconfirmed v3 transaction unless this tx is also v3.\n+    {\n+        // mempool_tx_v3\n+        //      ^\n+        // tx_v2_from_v3\n+        auto tx_v2_from_v3 = make_tx({COutPoint{mempool_tx_v3->GetHash(), 0}}, /*version=*/2);\n+        auto ancestors_v2_from_v3{pool.CalculateMemPoolAncestors(entry.FromTx(tx_v2_from_v3), m_limits)};\n+        const auto expected_error_str{strprintf(\"non-v3 tx %s cannot spend from v3 tx %s\", tx_v2_from_v3->GetWitnessHash().ToString(), mempool_tx_v3->GetWitnessHash().ToString())};\n+        BOOST_CHECK(*ApplyV3Rules(tx_v2_from_v3, *ancestors_v2_from_v3, /*num_in_pkg_ancestors=*/0, empty_conflicts_set, GetVirtualTransactionSize(*tx_v2_from_v3)) == expected_error_str);\n+        auto result_1 = PackageV3Checks({mempool_tx_v3, tx_v2_from_v3});\n+        BOOST_CHECK_EQUAL(util::ErrorString(result_1).original, expected_error_str);\n+\n+        // mempool_tx_v3  mempool_tx_v2\n+        //            ^    ^\n+        //    tx_v2_from_v2_and_v3\n+        auto tx_v2_from_v2_and_v3 = make_tx({COutPoint{mempool_tx_v3->GetHash(), 0}, COutPoint{mempool_tx_v2->GetHash(), 0}}, /*version=*/2);\n+        auto ancestors_v2_from_both{pool.CalculateMemPoolAncestors(entry.FromTx(tx_v2_from_v2_and_v3), m_limits)};\n+        const auto expected_error_str_2{strprintf(\"non-v3 tx %s cannot spend from v3 tx %s\",\n+                                        tx_v2_from_v2_and_v3->GetWitnessHash().ToString(), mempool_tx_v3->GetWitnessHash().ToString())};\n+        BOOST_CHECK(*ApplyV3Rules(tx_v2_from_v2_and_v3, *ancestors_v2_from_both, /*num_in_pkg_ancestors=*/0, empty_conflicts_set, GetVirtualTransactionSize(*tx_v2_from_v2_and_v3))\n+                    == expected_error_str_2);\n+        auto result_2 = PackageV3Checks({mempool_tx_v2, mempool_tx_v3, tx_v2_from_v2_and_v3});\n+        BOOST_CHECK_EQUAL(util::ErrorString(result_2).original, expected_error_str_2);\n+    }\n+\n+    // V3 cannot spend from an unconfirmed non-v3 transaction.\n+    {\n+        // mempool_tx_v2\n+        //      ^\n+        // tx_v3_from_v2\n+        auto tx_v3_from_v2 = make_tx({COutPoint{mempool_tx_v2->GetHash(), 0}}, /*version=*/3);\n+        auto ancestors_v3_from_v2{pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_from_v2), m_limits)};\n+        const auto expected_error_str{strprintf(\"v3 tx %s cannot spend from non-v3 tx %s\",\n+                                      tx_v3_from_v2->GetWitnessHash().ToString(), mempool_tx_v2->GetWitnessHash().ToString())};\n+        BOOST_CHECK(*ApplyV3Rules(tx_v3_from_v2, *ancestors_v3_from_v2, /*num_in_pkg_ancestors=*/0, empty_conflicts_set, GetVirtualTransactionSize(*tx_v3_from_v2)) == expected_error_str);\n+        auto result_1 = PackageV3Checks({mempool_tx_v2, tx_v3_from_v2});\n+        BOOST_CHECK_EQUAL(util::ErrorString(result_1).original, expected_error_str);\n+\n+        // mempool_tx_v3  mempool_tx_v2\n+        //            ^    ^\n+        //    tx_v3_from_v2_and_v3\n+        auto tx_v3_from_v2_and_v3 = make_tx({COutPoint{mempool_tx_v3->GetHash(), 0}, COutPoint{mempool_tx_v2->GetHash(), 0}}, /*version=*/3);\n+        auto ancestors_v3_from_both{pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_from_v2_and_v3), m_limits)};\n+        const auto expected_error_str_2{strprintf(\"v3 tx %s cannot spend from non-v3 tx %s\",\n+                                        tx_v3_from_v2_and_v3->GetWitnessHash().ToString(), mempool_tx_v2->GetWitnessHash().ToString())};\n+        BOOST_CHECK(*ApplyV3Rules(tx_v3_from_v2_and_v3, *ancestors_v3_from_both, /*num_in_pkg_ancestors=*/0, empty_conflicts_set, GetVirtualTransactionSize(*tx_v3_from_v2_and_v3))\n+                    == expected_error_str_2);\n+        auto result_2 = PackageV3Checks({mempool_tx_v2, mempool_tx_v3, tx_v3_from_v2_and_v3});\n+        BOOST_CHECK_EQUAL(util::ErrorString(result_2).original, expected_error_str_2);\n+    }\n+    // V3 from V3 is ok, and non-V3 from non-V3 is ok.\n+    {\n+        // mempool_tx_v3\n+        //      ^\n+        // tx_v3_from_v3\n+        auto tx_v3_from_v3 = make_tx({COutPoint{mempool_tx_v3->GetHash(), 0}}, /*version=*/3);\n+        auto ancestors_v3{pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_from_v3), m_limits)};\n+        BOOST_CHECK(ApplyV3Rules(tx_v3_from_v3, *ancestors_v3, /*num_in_pkg_ancestors=*/0, empty_conflicts_set, GetVirtualTransactionSize(*tx_v3_from_v3))\n+                    == std::nullopt);\n+\n+        // Check that the ancestor sets are built correctly.\n+        auto result_v3 = PackageV3Checks({mempool_tx_v3, tx_v3_from_v3});\n+        BOOST_CHECK(result_v3);\n+        BOOST_CHECK(result_v3->size() == 2);\n+        std::set<Txid> expected_mempool_ancestor_set{mempool_tx_v3->GetHash()};\n+        BOOST_CHECK(result_v3->at(mempool_tx_v3->GetHash()) == expected_mempool_ancestor_set);\n+        std::set<Txid> expected_tx_ancestor_set{mempool_tx_v3->GetHash(), tx_v3_from_v3->GetHash()};\n+        BOOST_CHECK(result_v3->at(tx_v3_from_v3->GetHash()) == expected_tx_ancestor_set);\n+\n+        // mempool_tx_v2\n+        //      ^\n+        // tx_v2_from_v2\n+        auto tx_v2_from_v2 = make_tx({COutPoint{mempool_tx_v2->GetHash(), 0}}, /*version=*/2);\n+        auto ancestors_v2{pool.CalculateMemPoolAncestors(entry.FromTx(tx_v2_from_v2), m_limits)};\n+        BOOST_CHECK(ApplyV3Rules(tx_v2_from_v2, *ancestors_v2, /*num_in_pkg_ancestors=*/0, empty_conflicts_set, GetVirtualTransactionSize(*tx_v2_from_v2))\n+                    == std::nullopt);\n+        // Don't call PackageV3Checks with just these two transactions bc it expects at least one v3 tx.\n+        // PackageV3Checks is able to assess these two parent-child pairs separately.\n+        auto result_both = PackageV3Checks({mempool_tx_v3, tx_v3_from_v3, mempool_tx_v2, tx_v2_from_v2});\n+        BOOST_CHECK(result_both);\n+        BOOST_CHECK(result_both->size() == 2);\n+        BOOST_CHECK(result_both->at(mempool_tx_v3->GetHash()) == expected_mempool_ancestor_set);\n+        BOOST_CHECK(result_both->at(tx_v3_from_v3->GetHash()) == expected_tx_ancestor_set);\n+        BOOST_CHECK(result_both->count(mempool_tx_v2->GetHash()) == 0);\n+        BOOST_CHECK(result_both->count(tx_v2_from_v2->GetHash()) == 0);\n+    }\n+\n+    // Tx spending v3 cannot have too many mempool ancestors\n+    // Configuration where the tx has multiple direct parents.\n+    {\n+        Package package_multi_parents;\n+        std::vector<COutPoint> mempool_outpoints;\n+        mempool_outpoints.emplace_back(mempool_tx_v3->GetHash(), 0);\n+        package_multi_parents.emplace_back(mempool_tx_v3);\n+        for (size_t i{0}; i < 2; ++i) {\n+            auto mempool_tx = make_tx(random_outpoints(i + 1), /*version=*/3);\n+            pool.addUnchecked(entry.FromTx(mempool_tx));\n+            mempool_outpoints.emplace_back(mempool_tx->GetHash(), 0);\n+            package_multi_parents.emplace_back(mempool_tx);\n+        }\n+        auto tx_v3_multi_parent = make_tx(mempool_outpoints, /*version=*/3);\n+        package_multi_parents.emplace_back(tx_v3_multi_parent);\n+        auto ancestors{pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_multi_parent), m_limits)};\n+        BOOST_CHECK_EQUAL(ancestors->size(), 3);\n+        const auto expected_error_str{strprintf(\"tx %s would have too many ancestors\", tx_v3_multi_parent->GetWitnessHash().ToString())};\n+        BOOST_CHECK(*ApplyV3Rules(tx_v3_multi_parent, *ancestors, /*num_in_pkg_ancestors=*/0, empty_conflicts_set, GetVirtualTransactionSize(*tx_v3_multi_parent))\n+                    == expected_error_str);\n+        auto res = PackageV3Checks(package_multi_parents);\n+        BOOST_CHECK_EQUAL(util::ErrorString(res).original, expected_error_str);\n+    }\n+\n+    // Configuration where the tx is in a multi-generation chain.\n+    {\n+        Package package_multi_gen;\n+        auto last_outpoint{random_outpoints(1)[0]};\n+        for (size_t i{0}; i < 2; ++i) {\n+            auto mempool_tx = make_tx({last_outpoint}, /*version=*/3);\n+            pool.addUnchecked(entry.FromTx(mempool_tx));\n+            last_outpoint = COutPoint{mempool_tx->GetHash(), 0};\n+            package_multi_gen.emplace_back(mempool_tx);\n+        }\n+        auto tx_v3_multi_gen = make_tx({last_outpoint}, /*version=*/3);\n+        package_multi_gen.emplace_back(tx_v3_multi_gen);\n+        auto ancestors{pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_multi_gen), m_limits)};\n+        const auto expected_error_str{strprintf(\"tx %s would have too many ancestors\", tx_v3_multi_gen->GetWitnessHash().ToString())};\n+        BOOST_CHECK(*ApplyV3Rules(tx_v3_multi_gen, *ancestors, /*num_in_pkg_ancestors=*/0, empty_conflicts_set, GetVirtualTransactionSize(*tx_v3_multi_gen))\n+                    == expected_error_str);\n+        auto res = PackageV3Checks(package_multi_gen);\n+        BOOST_CHECK_EQUAL(util::ErrorString(res).original, expected_error_str);\n+    }\n+\n+    // Tx spending v3 cannot be too large in virtual size.\n+    auto many_inputs{random_outpoints(100)};\n+    many_inputs.emplace_back(mempool_tx_v3->GetHash(), 0);\n+    {\n+        auto tx_v3_child_big = make_tx(many_inputs, /*version=*/3);\n+        const auto vsize{GetVirtualTransactionSize(*tx_v3_child_big)};\n+        auto ancestors{pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_child_big), m_limits)};\n+        const auto expected_error_str{strprintf(\"v3 child tx %s is too big: %u > %u virtual bytes\",\n+                                                tx_v3_child_big->GetWitnessHash().ToString(), vsize, V3_CHILD_MAX_VSIZE)};\n+        BOOST_CHECK(*ApplyV3Rules(tx_v3_child_big, *ancestors, /*num_in_pkg_ancestors=*/0, empty_conflicts_set, GetVirtualTransactionSize(*tx_v3_child_big))\n+                    == expected_error_str);\n+        auto res = PackageV3Checks({mempool_tx_v3, tx_v3_child_big});\n+        BOOST_CHECK_EQUAL(util::ErrorString(res).original, expected_error_str);\n+    }\n+\n+    // Tx spending v3 cannot have too many sigops.\n+    auto multisig_outpoints{random_outpoints(3)};\n+    multisig_outpoints.emplace_back(mempool_tx_v3->GetHash(), 0);\n+    auto keys{random_keys(2)};\n+    CScript script_multisig;\n+    script_multisig << OP_1;\n+    for (const auto& key : keys) {\n+        script_multisig << ToByteVector(key);\n+    }\n+    script_multisig << OP_2 << OP_CHECKMULTISIG;\n+    {\n+        CMutableTransaction mtx_many_sigops = CMutableTransaction{};\n+        mtx_many_sigops.nVersion = 3;\n+        for (const auto& outpoint : multisig_outpoints) {\n+            mtx_many_sigops.vin.emplace_back(outpoint, script_multisig);\n+        }\n+        mtx_many_sigops.vout.resize(1);\n+        mtx_many_sigops.vout.back().scriptPubKey = CScript() << OP_TRUE;\n+        mtx_many_sigops.vout.back().nValue = 10000;\n+        auto tx_many_sigops{MakeTransactionRef(mtx_many_sigops)};\n+\n+        auto ancestors{pool.CalculateMemPoolAncestors(entry.FromTx(tx_many_sigops), m_limits)};\n+        // legacy uses fAccurate = false, and the maximum number of multisig keys is used\n+        const int64_t total_sigops{static_cast<int64_t>(tx_many_sigops->vin.size()) * static_cast<int64_t>(script_multisig.GetSigOpCount(/*fAccurate=*/false))};\n+        BOOST_CHECK_EQUAL(total_sigops, tx_many_sigops->vin.size() * MAX_PUBKEYS_PER_MULTISIG);\n+        const int64_t bip141_vsize{GetVirtualTransactionSize(*tx_many_sigops)};\n+        // Weight limit is not reached...\n+        BOOST_CHECK(ApplyV3Rules(tx_many_sigops, *ancestors, /*num_in_pkg_ancestors=*/0, empty_conflicts_set, bip141_vsize) == std::nullopt);\n+        BOOST_CHECK(PackageV3Checks({mempool_tx_v3, tx_many_sigops}));\n+        // ...but sigop limit is.\n+        const auto expected_error_str{strprintf(\"v3 child tx %s is too big: %u > %u virtual bytes\",\n+                                                tx_many_sigops->GetWitnessHash().ToString(), total_sigops * DEFAULT_BYTES_PER_SIGOP, V3_CHILD_MAX_VSIZE)};\n+        BOOST_CHECK(*ApplyV3Rules(tx_many_sigops, *ancestors, /*num_in_pkg_ancestors=*/0, empty_conflicts_set,\n+                                  /*vsize=*/std::max(total_sigops * DEFAULT_BYTES_PER_SIGOP, bip141_vsize))",
      "path": "src/test/txvalidation_tests.cpp",
      "position": null,
      "original_position": 251,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "299680a5c736783fbb03fd448064ed35ef1a42a0",
      "in_reply_to_id": 1445293662,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Taken. Also realized I forgot to divide by 4, so fixed the test",
      "created_at": "2024-01-16T14:28:42Z",
      "updated_at": "2024-01-16T14:28:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1453507149",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453507149"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453507229",
      "pull_request_review_id": 1823575153,
      "id": 1453507229,
      "node_id": "PRRC_kwDOABII585WosKd",
      "diff_hunk": "@@ -864,10 +877,12 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     // while a tx could be package CPFP'd when entering the mempool, we do not have a DoS-resistant\n     // method of ensuring the tx remains bumped. For example, the fee-bumping child could disappear\n     // due to a replacement.\n-    if (!bypass_limits && ws.m_modified_fees < m_pool.m_min_relay_feerate.GetFee(ws.m_vsize)) {\n+    // The only exception is v3 transactions.\n+    if (!bypass_limits && ws.m_ptx->nVersion != 3 && ws.m_modified_fees < m_pool.m_min_relay_feerate.GetFee(ws.m_vsize)) {\n         // Even though this is a fee-related failure, this result is TX_MEMPOOL_POLICY, not\n         // TX_RECONSIDERABLE, because it cannot be bypassed using package validation.\n-        return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"min relay fee not met\",\n+        return state.Invalid(ws.m_ptx->nVersion == 3 ? TxValidationResult::TX_RECONSIDERABLE : TxValidationResult::TX_MEMPOOL_POLICY,",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 59,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "6de06e116f0dbe632be0e4babd45d3f59c117171",
      "in_reply_to_id": 1445305284,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Right, removed",
      "created_at": "2024-01-16T14:28:45Z",
      "updated_at": "2024-01-16T14:28:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1453507229",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453507229"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 884,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453507442",
      "pull_request_review_id": 1823575669,
      "id": 1453507442,
      "node_id": "PRRC_kwDOABII585WosNy",
      "diff_hunk": "@@ -0,0 +1,378 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+def cleanup(extra_args=None):\n+    def decorator(func):\n+        def wrapper(self):\n+            try:\n+                if extra_args is not None:\n+                    self.restart_node(0, extra_args=extra_args)\n+                func(self)\n+            finally:\n+                # Clear mempool again after test\n+                self.generate(self.nodes[0], 1)\n+                if extra_args is not None:\n+                    self.restart_node(0)\n+        return wrapper\n+    return decorator\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def check_mempool(self, txids):\n+        \"\"\"Assert exact contents of the node's mempool (by txid).\"\"\"\n+        mempool_contents = self.nodes[0].getrawmempool()\n+        assert_equal(len(txids), len(mempool_contents))\n+        assert all([txid in txids for txid in mempool_contents])\n+\n+    @cleanup(extra_args=[\"-datacarriersize=1000\"])\n+    def test_v3_acceptance(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test a child of a V3 transaction cannot be more than 1000vB\")\n+        tx_v3_parent_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        tx_v3_child_heavy = self.wallet.create_self_transfer(\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=4004,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_heavy[\"tx\"].get_vsize(), 1000)\n+        assert_raises_rpc_error(-26, f\"v3-rule-violation, v3 child tx {tx_v3_child_heavy['wtxid']} is too big\", node.sendrawtransaction, tx_v3_child_heavy[\"hex\"])\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"]])\n+        # tx has no descendants\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 1)\n+\n+        self.log.info(\"Test that, during replacements, only the new transaction counts for V3 descendant limit\")\n+        tx_v3_child_almost_heavy = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3987,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(1000, tx_v3_child_almost_heavy[\"tx\"].get_vsize())\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+        tx_v3_child_almost_heavy_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=3500,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_almost_heavy[\"tx\"].get_vsize() + tx_v3_child_almost_heavy_rbf[\"tx\"].get_vsize(), 1000)\n+        self.check_mempool([tx_v3_parent_normal[\"txid\"], tx_v3_child_almost_heavy_rbf[\"txid\"]])\n+        assert_equal(node.getmempoolentry(tx_v3_parent_normal[\"txid\"])[\"descendantcount\"], 2)\n+\n+    @cleanup\n+    def test_v3_replacement(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")\n+        utxo_v3_bip125 = self.wallet.get_utxo()\n+        tx_v3_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125[\"txid\"]])\n+\n+        tx_v3_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf[\"txid\"]])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 3,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"]])\n+\n+        self.log.info(\"Test that replacements cannot cause violation of inherited V3\")\n+        utxo_v3_parent = self.wallet.get_utxo()\n+        tx_v3_parent = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_parent,\n+            version=3\n+        )\n+        tx_v3_child = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+        tx_v3_child_rbf_v2 = self.wallet.create_self_transfer(\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=2\n+        )\n+        assert_raises_rpc_error(-26, f\"v3-rule-violation, non-v3 tx {tx_v3_child_rbf_v2['wtxid']} cannot spend from v3 tx {tx_v3_parent['wtxid']}\", node.sendrawtransaction, tx_v3_child_rbf_v2[\"hex\"])\n+        self.check_mempool([tx_v3_bip125_rbf_v2[\"txid\"], tx_v3_parent[\"txid\"], tx_v3_child[\"txid\"]])\n+\n+\n+    @cleanup\n+    def test_v3_bip125(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test v3 transactions that don't signal BIP125 are replaceable\")\n+        assert_equal(node.getmempoolinfo()[\"fullrbf\"], False)\n+        utxo_v3_no_bip125 = self.wallet.get_utxo()\n+        tx_v3_no_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE + 1,\n+            version=3\n+        )\n+\n+        self.check_mempool([tx_v3_no_bip125[\"txid\"]])\n+        assert not node.getmempoolentry(tx_v3_no_bip125[\"txid\"])[\"bip125-replaceable\"]\n+        tx_v3_no_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            version=3\n+        )\n+        self.check_mempool([tx_v3_no_bip125_rbf[\"txid\"]])\n+\n+    @cleanup(extra_args=[\"-datacarriersize=40000\"])\n+    def test_v3_reorg(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test that, during a reorg, v3 rules are not enforced\")\n+        tx_v2_block = self.wallet.send_self_transfer(from_node=node, version=2)\n+        tx_v3_block = self.wallet.send_self_transfer(from_node=node, version=3)\n+        tx_v3_block2 = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert_equal(set(node.getrawmempool()), set([tx_v3_block[\"txid\"], tx_v2_block[\"txid\"], tx_v3_block2[\"txid\"]]))\n+\n+        block = self.generate(node, 1)\n+        assert_equal(node.getrawmempool(), [])\n+        tx_v2_from_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block[\"new_utxo\"], version=2)\n+        tx_v3_from_v2 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v2_block[\"new_utxo\"], version=3)\n+        tx_v3_child_large = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_block2[\"new_utxo\"], target_weight=5000, version=3)\n+        assert_greater_than(node.getmempoolentry(tx_v3_child_large[\"txid\"])[\"vsize\"], 1000)\n+        assert_equal(set(node.getrawmempool()), set([tx_v2_from_v3[\"txid\"], tx_v3_from_v2[\"txid\"], tx_v3_child_large[\"txid\"]]))",
      "path": "test/functional/mempool_accept_v3.py",
      "position": null,
      "original_position": 181,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "fd55f70257456e804cadd7af3e70f783de373008",
      "in_reply_to_id": 1445328322,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Right, done",
      "created_at": "2024-01-16T14:28:54Z",
      "updated_at": "2024-01-16T14:28:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1453507442",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453507442"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 181,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1457552974",
      "pull_request_review_id": 1829865826,
      "id": 1457552974,
      "node_id": "PRRC_kwDOABII585W4H5O",
      "diff_hunk": "@@ -1144,17 +1144,25 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpends\n \n     unsigned nTxnRemoved = 0;\n     CFeeRate maxFeeRateRemoved(0);\n-    while (!mapTx.empty() && DynamicMemoryUsage() > sizelimit) {\n+    while (!mapTx.empty()) {\n         indexed_transaction_set::index<descendant_score>::type::iterator it = mapTx.get<descendant_score>().begin();\n \n+        // Keep trimming as long as memory is above the maximum.\n+        // Also, unless min relay feerate allows it, skim away everything paying <=0 fees.\n+        const bool keep_trimming{DynamicMemoryUsage() > sizelimit ||\n+            (m_min_relay_feerate.GetFeePerK() > 0 && it->GetModFeesWithDescendants() <= 0)};\n+        if (!keep_trimming) break;\n+\n         // We set the new mempool min fee to the feerate of the removed set, plus the\n         // \"minimum reasonable fee rate\" (ie some value under which we consider txn\n         // to have 0 fee). This way, we don't allow txn to enter mempool with feerate\n         // equal to txn which were removed with no block in between.\n         CFeeRate removed(it->GetModFeesWithDescendants(), it->GetSizeWithDescendants());\n-        removed += m_incremental_relay_feerate;\n-        trackPackageRemoved(removed);\n-        maxFeeRateRemoved = std::max(maxFeeRateRemoved, removed);\n+        if (removed >= m_min_relay_feerate) {",
      "path": "src/txmempool.cpp",
      "position": 40,
      "original_position": 22,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "4e746e223a016c00abcaece6002fbbf37ff19f73",
      "in_reply_to_id": 1445244468,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah, fuzzer crash was because I had removed the \"evict everything paying 0 fees in TrimToSize()` commit without removing that invariant check. I've added that back along with documentation for why it's relevant here. Sorry for the flip flop.",
      "created_at": "2024-01-18T14:50:45Z",
      "updated_at": "2024-01-18T14:50:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1457552974",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1457552974"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1161,
      "original_line": 1161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1461284621",
      "pull_request_review_id": 1835540987,
      "id": 1461284621,
      "node_id": "PRRC_kwDOABII585XGW8N",
      "diff_hunk": "@@ -0,0 +1,119 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") is allowed in mempool and\n+transaction relay, with additional policies described below.\n+\n+The goal with V3 is to create a policy that is DoS-resistant and makes fee-bumping more robust by\n+avoiding specific RBF pinning attacks. Contracting protocols in which transactions are signed by\n+untrusted counterparties before broadcast time, e.g. the Lightning Network (LN), may benefit from\n+opting in to these policies.\n+\n+## V3 Rationale: RBF Pinning Attacks\n+\n+Since contracting transactions are shared between multiple parties and mempool congestion is\n+difficult to predict, [RBF policy](./mempool-replacements.md) restrictions may accidentally allow a\n+malicious party to \"pin\" a transaction, making it impossible or difficult to replace.\n+\n+### \"Rule 3\" Pinning\n+\n+Imagine that counterparties Alice (honest) and Mallory (malicious) have conflicting transactions A\n+and B, respectively.  RBF rules require the replacement transaction pay a higher absolute fee than\n+the aggregate fees paid by all original transactions. This means Mallory may increase the fees\n+required to replace B by:\n+\n+1. Adding transaction(s) that descend from B and pay a feerate too low to fee-bump B through CPFP.\n+   For example, assuming the default descendant size limit is 101KvB and B is 1000vB paying a\n+feerate of 2sat/vB, adding a 100KvB, 2sat/vB child increases the cost to replace B by 200Ksat.\n+\n+2. Adding a high-fee descendant of B that also spends from a large, low-feerate mempool transaction,\n+   C. The child may pay a very large fee but not actually be fee-bumping B if its overall ancestor\n+feerate is still lower than B's individual feerate. For example, assuming the default ancestor size\n+limit is 101KvB, B is 1000vB paying 2sat/vB, and C is 99KvB paying 1sat/vB, adding a 1000vB child of\n+B and C increases the cost to replace B by 101Ksat.\n+\n+### \"Rule 5\" Pinning\n+\n+RBF rules requires that no replacement trigger the removal of more than 100 transactions. This\n+number includes the descendants of the conflicted mempool transactions. Mallory can make it more\n+difficult to replace transactions by attaching lots of descendants to them. For example, if Alice\n+wants to replace 4 transactions and each one has 25 or more descendants, the replacement will be\n+rejected regardless of its fees.\n+\n+## Version 3 Rules\n+\n+All existing standardness rules and policies apply to V3. The following set of additional\n+rules apply to V3 transactions:\n+\n+1. A v3 transaction signals replaceability, even if it does not signal BIP125 replaceability. Other\n+   conditions apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee].\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+*Rationale*: Combined with Rule 1, this gives us the property of \"inherited signaling\" when\n+descendants of unconfirmed transactions are created. Additionally, checking whether a transaction\n+signals replaceability this way does not require mempool traversal, and does not change based on\n+what transactions are mined.\n+\n+*Note*: A V3 transaction can spend outputs from *confirmed* non-V3 transactions.\n+\n+*Note*: This rule is not enforced during reorgs.\n+\n+3. A V3 transaction's unconfirmed ancestors must all be V3.\n+\n+*Rationale*: Ensure the ancestor feerate rule does not underestimate a to-be-replaced V3 mempool\n+transaction's incentive compatibility. Imagine the original transaction, A, has a child B and\n+co-parent C (i.e. B spends from A and C). C also has another child, D. B is one of the original\n+transactions and thus its ancestor feerate must be lower than the package's. However, this may be an\n+underestimation because D can bump C without B's help. This is resolved if V3 transactions can only\n+have V3 ancestors, as then C cannot have another child.\n+\n+*Note*: This rule is enforced during reorgs.\n+\n+4. A V3 transaction cannot have more than 1 unconfirmed descendant.\n+\n+Also, [CPFP Carve Out](./mempool-limits.md#CPFP-Carve-Out) does not apply to V3 transactions.\n+\n+*Rationale*: (upper bound) the larger the descendant limit, the more transactions may need to be\n+replaced. This is a problematic pinning attack, i.e., a malicious counterparty prevents the\n+transaction from being replaced by adding many descendant transactions that aren't fee-bumping.\n+See example #1 in [\"Rule 3\" Pining](#Rule-3-Pinning) section above.\n+\n+*Rationale*: (lower bound) at least 1 descendant is required to allow CPFP of the presigned\n+transaction. The contract protocol can create presigned transactions paying 0 fees and 1 output for\n+attaching a CPFP at broadcast time (\"anchor output\"). Without package RBF, multiple anchor outputs\n+would be required to allow each counterparty to fee-bump any presigned transaction. With package\n+RBF, since the presigned transactions can replace each other, 1 anchor output is sufficient.\n+\n+5. A V3 transaction that has an unconfirmed V3 ancestor cannot have a sigop-adjusted virtual size\n+   larger than 1000vB.",
      "path": "doc/policy/version3_transactions.md",
      "position": 89,
      "original_position": 89,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It might be interesting to relax these rules to be:\r\n * A v3 transaction can have a max descendent count of 5 (not 2)\r\n * A v3 transaction with an ancestor count of two or more can have a maximum (sigop-adjusted) descendant size of 1000vb\r\n * A v3 transaction can have at most 1 unconfirmed parent (rather than limiting ancestor count to at most 2)\r\n\r\n(where ancestor/descendent size/count includes itself)",
      "created_at": "2024-01-22T02:07:42Z",
      "updated_at": "2024-01-22T02:25:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1461284621",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1461284621"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 89,
      "original_line": 89,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1461286728",
      "pull_request_review_id": 1835540987,
      "id": 1461286728,
      "node_id": "PRRC_kwDOABII585XGXdI",
      "diff_hunk": "@@ -0,0 +1,119 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") is allowed in mempool and\n+transaction relay, with additional policies described below.\n+\n+The goal with V3 is to create a policy that is DoS-resistant and makes fee-bumping more robust by\n+avoiding specific RBF pinning attacks. Contracting protocols in which transactions are signed by\n+untrusted counterparties before broadcast time, e.g. the Lightning Network (LN), may benefit from\n+opting in to these policies.\n+\n+## V3 Rationale: RBF Pinning Attacks\n+\n+Since contracting transactions are shared between multiple parties and mempool congestion is\n+difficult to predict, [RBF policy](./mempool-replacements.md) restrictions may accidentally allow a\n+malicious party to \"pin\" a transaction, making it impossible or difficult to replace.\n+\n+### \"Rule 3\" Pinning\n+\n+Imagine that counterparties Alice (honest) and Mallory (malicious) have conflicting transactions A\n+and B, respectively.  RBF rules require the replacement transaction pay a higher absolute fee than\n+the aggregate fees paid by all original transactions. This means Mallory may increase the fees\n+required to replace B by:\n+\n+1. Adding transaction(s) that descend from B and pay a feerate too low to fee-bump B through CPFP.\n+   For example, assuming the default descendant size limit is 101KvB and B is 1000vB paying a\n+feerate of 2sat/vB, adding a 100KvB, 2sat/vB child increases the cost to replace B by 200Ksat.\n+\n+2. Adding a high-fee descendant of B that also spends from a large, low-feerate mempool transaction,\n+   C. The child may pay a very large fee but not actually be fee-bumping B if its overall ancestor\n+feerate is still lower than B's individual feerate. For example, assuming the default ancestor size\n+limit is 101KvB, B is 1000vB paying 2sat/vB, and C is 99KvB paying 1sat/vB, adding a 1000vB child of\n+B and C increases the cost to replace B by 101Ksat.\n+\n+### \"Rule 5\" Pinning\n+\n+RBF rules requires that no replacement trigger the removal of more than 100 transactions. This\n+number includes the descendants of the conflicted mempool transactions. Mallory can make it more\n+difficult to replace transactions by attaching lots of descendants to them. For example, if Alice\n+wants to replace 4 transactions and each one has 25 or more descendants, the replacement will be\n+rejected regardless of its fees.\n+\n+## Version 3 Rules\n+\n+All existing standardness rules and policies apply to V3. The following set of additional\n+rules apply to V3 transactions:\n+\n+1. A v3 transaction signals replaceability, even if it does not signal BIP125 replaceability. Other\n+   conditions apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee].\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+*Rationale*: Combined with Rule 1, this gives us the property of \"inherited signaling\" when\n+descendants of unconfirmed transactions are created. Additionally, checking whether a transaction\n+signals replaceability this way does not require mempool traversal, and does not change based on\n+what transactions are mined.\n+\n+*Note*: A V3 transaction can spend outputs from *confirmed* non-V3 transactions.\n+\n+*Note*: This rule is not enforced during reorgs.\n+\n+3. A V3 transaction's unconfirmed ancestors must all be V3.\n+\n+*Rationale*: Ensure the ancestor feerate rule does not underestimate a to-be-replaced V3 mempool\n+transaction's incentive compatibility. Imagine the original transaction, A, has a child B and\n+co-parent C (i.e. B spends from A and C). C also has another child, D. B is one of the original\n+transactions and thus its ancestor feerate must be lower than the package's. However, this may be an\n+underestimation because D can bump C without B's help. This is resolved if V3 transactions can only\n+have V3 ancestors, as then C cannot have another child.\n+\n+*Note*: This rule is enforced during reorgs.\n+\n+4. A V3 transaction cannot have more than 1 unconfirmed descendant.",
      "path": "doc/policy/version3_transactions.md",
      "position": 73,
      "original_position": 73,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps this should be \"An **unconfirmed** V3 transaction cannothave more than 1 unconfirmd descendent\" ?",
      "created_at": "2024-01-22T02:13:48Z",
      "updated_at": "2024-01-22T02:25:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1461286728",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1461286728"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 73,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1461338849",
      "pull_request_review_id": 1835622004,
      "id": 1461338849,
      "node_id": "PRRC_kwDOABII585XGkLh",
      "diff_hunk": "@@ -0,0 +1,119 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") is allowed in mempool and\n+transaction relay, with additional policies described below.\n+\n+The goal with V3 is to create a policy that is DoS-resistant and makes fee-bumping more robust by\n+avoiding specific RBF pinning attacks. Contracting protocols in which transactions are signed by\n+untrusted counterparties before broadcast time, e.g. the Lightning Network (LN), may benefit from\n+opting in to these policies.\n+\n+## V3 Rationale: RBF Pinning Attacks\n+\n+Since contracting transactions are shared between multiple parties and mempool congestion is\n+difficult to predict, [RBF policy](./mempool-replacements.md) restrictions may accidentally allow a\n+malicious party to \"pin\" a transaction, making it impossible or difficult to replace.\n+\n+### \"Rule 3\" Pinning\n+\n+Imagine that counterparties Alice (honest) and Mallory (malicious) have conflicting transactions A\n+and B, respectively.  RBF rules require the replacement transaction pay a higher absolute fee than\n+the aggregate fees paid by all original transactions. This means Mallory may increase the fees\n+required to replace B by:\n+\n+1. Adding transaction(s) that descend from B and pay a feerate too low to fee-bump B through CPFP.\n+   For example, assuming the default descendant size limit is 101KvB and B is 1000vB paying a\n+feerate of 2sat/vB, adding a 100KvB, 2sat/vB child increases the cost to replace B by 200Ksat.\n+\n+2. Adding a high-fee descendant of B that also spends from a large, low-feerate mempool transaction,\n+   C. The child may pay a very large fee but not actually be fee-bumping B if its overall ancestor\n+feerate is still lower than B's individual feerate. For example, assuming the default ancestor size\n+limit is 101KvB, B is 1000vB paying 2sat/vB, and C is 99KvB paying 1sat/vB, adding a 1000vB child of\n+B and C increases the cost to replace B by 101Ksat.\n+\n+### \"Rule 5\" Pinning\n+\n+RBF rules requires that no replacement trigger the removal of more than 100 transactions. This\n+number includes the descendants of the conflicted mempool transactions. Mallory can make it more\n+difficult to replace transactions by attaching lots of descendants to them. For example, if Alice\n+wants to replace 4 transactions and each one has 25 or more descendants, the replacement will be\n+rejected regardless of its fees.\n+\n+## Version 3 Rules\n+\n+All existing standardness rules and policies apply to V3. The following set of additional\n+rules apply to V3 transactions:\n+\n+1. A v3 transaction signals replaceability, even if it does not signal BIP125 replaceability. Other\n+   conditions apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee].\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+*Rationale*: Combined with Rule 1, this gives us the property of \"inherited signaling\" when\n+descendants of unconfirmed transactions are created. Additionally, checking whether a transaction\n+signals replaceability this way does not require mempool traversal, and does not change based on\n+what transactions are mined.\n+\n+*Note*: A V3 transaction can spend outputs from *confirmed* non-V3 transactions.\n+\n+*Note*: This rule is not enforced during reorgs.\n+\n+3. A V3 transaction's unconfirmed ancestors must all be V3.\n+\n+*Rationale*: Ensure the ancestor feerate rule does not underestimate a to-be-replaced V3 mempool\n+transaction's incentive compatibility. Imagine the original transaction, A, has a child B and\n+co-parent C (i.e. B spends from A and C). C also has another child, D. B is one of the original\n+transactions and thus its ancestor feerate must be lower than the package's. However, this may be an\n+underestimation because D can bump C without B's help. This is resolved if V3 transactions can only\n+have V3 ancestors, as then C cannot have another child.\n+\n+*Note*: This rule is enforced during reorgs.\n+\n+4. A V3 transaction cannot have more than 1 unconfirmed descendant.\n+\n+Also, [CPFP Carve Out](./mempool-limits.md#CPFP-Carve-Out) does not apply to V3 transactions.\n+\n+*Rationale*: (upper bound) the larger the descendant limit, the more transactions may need to be\n+replaced. This is a problematic pinning attack, i.e., a malicious counterparty prevents the\n+transaction from being replaced by adding many descendant transactions that aren't fee-bumping.\n+See example #1 in [\"Rule 3\" Pining](#Rule-3-Pinning) section above.\n+\n+*Rationale*: (lower bound) at least 1 descendant is required to allow CPFP of the presigned\n+transaction. The contract protocol can create presigned transactions paying 0 fees and 1 output for\n+attaching a CPFP at broadcast time (\"anchor output\"). Without package RBF, multiple anchor outputs\n+would be required to allow each counterparty to fee-bump any presigned transaction. With package\n+RBF, since the presigned transactions can replace each other, 1 anchor output is sufficient.",
      "path": "doc/policy/version3_transactions.md",
      "position": 86,
      "original_position": 86,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This seems underspecified: what's the behaviour if you have a v3 transaction in the mempool, with two or more outputs, one of which is spent by another v3 in-mempool transaction, and another (extremely high fee) transaction comes in, spending the other output?\r\n\r\nIs it first-come-first-served, making descendent-count-pinning much easier? Or is it \"we'll swap the old for the new if it has a better feerate diagram\"? Or something else?",
      "created_at": "2024-01-22T04:26:26Z",
      "updated_at": "2024-01-22T04:26:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1461338849",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1461338849"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 86,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1461526010",
      "pull_request_review_id": 1835925112,
      "id": 1461526010,
      "node_id": "PRRC_kwDOABII585XHR36",
      "diff_hunk": "@@ -0,0 +1,119 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") is allowed in mempool and\n+transaction relay, with additional policies described below.\n+\n+The goal with V3 is to create a policy that is DoS-resistant and makes fee-bumping more robust by\n+avoiding specific RBF pinning attacks. Contracting protocols in which transactions are signed by\n+untrusted counterparties before broadcast time, e.g. the Lightning Network (LN), may benefit from\n+opting in to these policies.\n+\n+## V3 Rationale: RBF Pinning Attacks\n+\n+Since contracting transactions are shared between multiple parties and mempool congestion is\n+difficult to predict, [RBF policy](./mempool-replacements.md) restrictions may accidentally allow a\n+malicious party to \"pin\" a transaction, making it impossible or difficult to replace.\n+\n+### \"Rule 3\" Pinning\n+\n+Imagine that counterparties Alice (honest) and Mallory (malicious) have conflicting transactions A\n+and B, respectively.  RBF rules require the replacement transaction pay a higher absolute fee than\n+the aggregate fees paid by all original transactions. This means Mallory may increase the fees\n+required to replace B by:\n+\n+1. Adding transaction(s) that descend from B and pay a feerate too low to fee-bump B through CPFP.\n+   For example, assuming the default descendant size limit is 101KvB and B is 1000vB paying a\n+feerate of 2sat/vB, adding a 100KvB, 2sat/vB child increases the cost to replace B by 200Ksat.\n+\n+2. Adding a high-fee descendant of B that also spends from a large, low-feerate mempool transaction,\n+   C. The child may pay a very large fee but not actually be fee-bumping B if its overall ancestor\n+feerate is still lower than B's individual feerate. For example, assuming the default ancestor size\n+limit is 101KvB, B is 1000vB paying 2sat/vB, and C is 99KvB paying 1sat/vB, adding a 1000vB child of\n+B and C increases the cost to replace B by 101Ksat.\n+\n+### \"Rule 5\" Pinning\n+\n+RBF rules requires that no replacement trigger the removal of more than 100 transactions. This\n+number includes the descendants of the conflicted mempool transactions. Mallory can make it more\n+difficult to replace transactions by attaching lots of descendants to them. For example, if Alice\n+wants to replace 4 transactions and each one has 25 or more descendants, the replacement will be\n+rejected regardless of its fees.\n+\n+## Version 3 Rules\n+\n+All existing standardness rules and policies apply to V3. The following set of additional\n+rules apply to V3 transactions:\n+\n+1. A v3 transaction signals replaceability, even if it does not signal BIP125 replaceability. Other\n+   conditions apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee].\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+*Rationale*: Combined with Rule 1, this gives us the property of \"inherited signaling\" when\n+descendants of unconfirmed transactions are created. Additionally, checking whether a transaction\n+signals replaceability this way does not require mempool traversal, and does not change based on\n+what transactions are mined.\n+\n+*Note*: A V3 transaction can spend outputs from *confirmed* non-V3 transactions.\n+\n+*Note*: This rule is not enforced during reorgs.\n+\n+3. A V3 transaction's unconfirmed ancestors must all be V3.\n+\n+*Rationale*: Ensure the ancestor feerate rule does not underestimate a to-be-replaced V3 mempool\n+transaction's incentive compatibility. Imagine the original transaction, A, has a child B and\n+co-parent C (i.e. B spends from A and C). C also has another child, D. B is one of the original\n+transactions and thus its ancestor feerate must be lower than the package's. However, this may be an\n+underestimation because D can bump C without B's help. This is resolved if V3 transactions can only\n+have V3 ancestors, as then C cannot have another child.\n+\n+*Note*: This rule is enforced during reorgs.\n+\n+4. A V3 transaction cannot have more than 1 unconfirmed descendant.\n+\n+Also, [CPFP Carve Out](./mempool-limits.md#CPFP-Carve-Out) does not apply to V3 transactions.\n+\n+*Rationale*: (upper bound) the larger the descendant limit, the more transactions may need to be\n+replaced. This is a problematic pinning attack, i.e., a malicious counterparty prevents the\n+transaction from being replaced by adding many descendant transactions that aren't fee-bumping.\n+See example #1 in [\"Rule 3\" Pining](#Rule-3-Pinning) section above.\n+\n+*Rationale*: (lower bound) at least 1 descendant is required to allow CPFP of the presigned\n+transaction. The contract protocol can create presigned transactions paying 0 fees and 1 output for\n+attaching a CPFP at broadcast time (\"anchor output\"). Without package RBF, multiple anchor outputs\n+would be required to allow each counterparty to fee-bump any presigned transaction. With package\n+RBF, since the presigned transactions can replace each other, 1 anchor output is sufficient.\n+\n+5. A V3 transaction that has an unconfirmed V3 ancestor cannot have a sigop-adjusted virtual size\n+   larger than 1000vB.",
      "path": "doc/policy/version3_transactions.md",
      "position": 89,
      "original_position": 89,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "in_reply_to_id": 1461284621,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why 5?",
      "created_at": "2024-01-22T08:55:55Z",
      "updated_at": "2024-01-22T08:55:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1461526010",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1461526010"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 89,
      "original_line": 89,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1461554508",
      "pull_request_review_id": 1835973917,
      "id": 1461554508,
      "node_id": "PRRC_kwDOABII585XHY1M",
      "diff_hunk": "@@ -0,0 +1,119 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") is allowed in mempool and\n+transaction relay, with additional policies described below.\n+\n+The goal with V3 is to create a policy that is DoS-resistant and makes fee-bumping more robust by\n+avoiding specific RBF pinning attacks. Contracting protocols in which transactions are signed by\n+untrusted counterparties before broadcast time, e.g. the Lightning Network (LN), may benefit from\n+opting in to these policies.\n+\n+## V3 Rationale: RBF Pinning Attacks\n+\n+Since contracting transactions are shared between multiple parties and mempool congestion is\n+difficult to predict, [RBF policy](./mempool-replacements.md) restrictions may accidentally allow a\n+malicious party to \"pin\" a transaction, making it impossible or difficult to replace.\n+\n+### \"Rule 3\" Pinning\n+\n+Imagine that counterparties Alice (honest) and Mallory (malicious) have conflicting transactions A\n+and B, respectively.  RBF rules require the replacement transaction pay a higher absolute fee than\n+the aggregate fees paid by all original transactions. This means Mallory may increase the fees\n+required to replace B by:\n+\n+1. Adding transaction(s) that descend from B and pay a feerate too low to fee-bump B through CPFP.\n+   For example, assuming the default descendant size limit is 101KvB and B is 1000vB paying a\n+feerate of 2sat/vB, adding a 100KvB, 2sat/vB child increases the cost to replace B by 200Ksat.\n+\n+2. Adding a high-fee descendant of B that also spends from a large, low-feerate mempool transaction,\n+   C. The child may pay a very large fee but not actually be fee-bumping B if its overall ancestor\n+feerate is still lower than B's individual feerate. For example, assuming the default ancestor size\n+limit is 101KvB, B is 1000vB paying 2sat/vB, and C is 99KvB paying 1sat/vB, adding a 1000vB child of\n+B and C increases the cost to replace B by 101Ksat.\n+\n+### \"Rule 5\" Pinning\n+\n+RBF rules requires that no replacement trigger the removal of more than 100 transactions. This\n+number includes the descendants of the conflicted mempool transactions. Mallory can make it more\n+difficult to replace transactions by attaching lots of descendants to them. For example, if Alice\n+wants to replace 4 transactions and each one has 25 or more descendants, the replacement will be\n+rejected regardless of its fees.\n+\n+## Version 3 Rules\n+\n+All existing standardness rules and policies apply to V3. The following set of additional\n+rules apply to V3 transactions:\n+\n+1. A v3 transaction signals replaceability, even if it does not signal BIP125 replaceability. Other\n+   conditions apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee].\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+*Rationale*: Combined with Rule 1, this gives us the property of \"inherited signaling\" when\n+descendants of unconfirmed transactions are created. Additionally, checking whether a transaction\n+signals replaceability this way does not require mempool traversal, and does not change based on\n+what transactions are mined.\n+\n+*Note*: A V3 transaction can spend outputs from *confirmed* non-V3 transactions.\n+\n+*Note*: This rule is not enforced during reorgs.\n+\n+3. A V3 transaction's unconfirmed ancestors must all be V3.\n+\n+*Rationale*: Ensure the ancestor feerate rule does not underestimate a to-be-replaced V3 mempool\n+transaction's incentive compatibility. Imagine the original transaction, A, has a child B and\n+co-parent C (i.e. B spends from A and C). C also has another child, D. B is one of the original\n+transactions and thus its ancestor feerate must be lower than the package's. However, this may be an\n+underestimation because D can bump C without B's help. This is resolved if V3 transactions can only\n+have V3 ancestors, as then C cannot have another child.\n+\n+*Note*: This rule is enforced during reorgs.\n+\n+4. A V3 transaction cannot have more than 1 unconfirmed descendant.\n+\n+Also, [CPFP Carve Out](./mempool-limits.md#CPFP-Carve-Out) does not apply to V3 transactions.\n+\n+*Rationale*: (upper bound) the larger the descendant limit, the more transactions may need to be\n+replaced. This is a problematic pinning attack, i.e., a malicious counterparty prevents the\n+transaction from being replaced by adding many descendant transactions that aren't fee-bumping.\n+See example #1 in [\"Rule 3\" Pining](#Rule-3-Pinning) section above.\n+\n+*Rationale*: (lower bound) at least 1 descendant is required to allow CPFP of the presigned\n+transaction. The contract protocol can create presigned transactions paying 0 fees and 1 output for\n+attaching a CPFP at broadcast time (\"anchor output\"). Without package RBF, multiple anchor outputs\n+would be required to allow each counterparty to fee-bump any presigned transaction. With package\n+RBF, since the presigned transactions can replace each other, 1 anchor output is sufficient.",
      "path": "doc/policy/version3_transactions.md",
      "position": 86,
      "original_position": 86,
      "commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "original_commit_id": "f3d4916eacfbcef61bc4d460294657fae006d2aa",
      "in_reply_to_id": 1461338849,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> This seems underspecified: what's the behaviour if...\r\n\r\nThe behavior is what the existing RBF rules say (so no sibling eviction). If there's going to be 2 anchors I feel like v3 is not the right version to use.\r\n\r\n> is it \"we'll swap the old for the new if it has a better feerate diagram\"?\r\n\r\nI think sibling eviction can be considered, and feerate diagram comparisons as well. But the idea of splitting up #25038 was to decouple v3 topology restrictions from the (package) RBF rules that would be possible as a result of those restrictions. Because\r\n- These RBF rules can be considered without the v3 topology rules changing. For a user, what's relevant is likely that they can't use additional unconfirmed inputs and can do package RBF. But whether the rule is based on ancestor score vs feerate diagram isn't really something that would change their behavior.\r\n- Some of the (package) RBF ideas aren't limited to v3 (rather just limited to cluster size 2 replacements). And after cluster mempool, those rules might just apply to all transactions. Whereas v3 would still have the same topology restrictions even if ancestor/descendant limits were replaced with cluster limits.",
      "created_at": "2024-01-22T09:19:23Z",
      "updated_at": "2024-01-22T09:19:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28948#discussion_r1461554508",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1461554508"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 86,
      "original_line": 86,
      "side": "RIGHT"
    }
  ]
}