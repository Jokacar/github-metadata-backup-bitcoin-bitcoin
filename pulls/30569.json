{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569",
    "id": 1999181445,
    "node_id": "PR_kwDOABII5853KRaF",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/30569",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/30569.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/30569.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30569",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30569/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/855784d3a0026414159acc42fceeb271f8a28133",
    "number": 30569,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "node: reduce unsafe uint256S usage",
    "user": {
      "login": "stickies-v",
      "id": 69010457,
      "node_id": "MDQ6VXNlcjY5MDEwNDU3",
      "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stickies-v",
      "html_url": "https://github.com/stickies-v",
      "followers_url": "https://api.github.com/users/stickies-v/followers",
      "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
      "organizations_url": "https://api.github.com/users/stickies-v/orgs",
      "repos_url": "https://api.github.com/users/stickies-v/repos",
      "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/stickies-v/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Since fad2991ba073de0bd1f12e42bf0fbaca4a265508, `uint256S` has been [deprecated](https://github.com/bitcoin/bitcoin/pull/30482/commits/fad2991ba073de0bd1f12e42bf0fbaca4a265508#diff-800776e2dda39116e889839f69409571a5d397de048a141da7e4003bc099e3e2R138) because it is less robust than the `base_blob::FromHex()` introduced in [the same PR](https://github.com/bitcoin/bitcoin/pull/30482). Specifically, it tries to recover from length-mismatches, recover from untrimmed whitespace, 0x-prefix and garbage at the end, instead of simply requiring exactly 64 hex-only characters. _(see also #30532)_\r\n\r\nThis PR carves out the few `uint256S` callsites that may potentially prove a bit more controversial to change because they deal with user input and backwards incompatible behaviour change.\r\n\r\nThe main behaviour change introduced in this PR is:\r\n- `-minimumchainwork` will raise an error when input is longer than 64 hex characters\r\n- `-assumevalid` will raise an error when input contains invalid hex characters (including `0x` prefix), or when it is not exactly 64 characters long\r\n- test: the optional `RANDOM_CTX_SEED` env var is now required to be exactly 64 hex characters, otherwise the program will abort\r\n\r\nAfter this PR, the remaining work to remove `uint256S` completely is almost entirely mechanical and/or test related. I will open that PR once #30560 is merged because it builds on that.",
    "labels": [],
    "created_at": "2024-08-01T18:59:05Z",
    "updated_at": "2024-08-09T10:30:14Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "2e13a5d6ee1e1fe1741b2dd7aedc2d69d01d4a71",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "stickies-v:2024-08/hex-arg-parse",
      "ref": "2024-08/hex-arg-parse",
      "sha": "855784d3a0026414159acc42fceeb271f8a28133",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 431644530,
        "node_id": "R_kgDOGbpfcg",
        "name": "bitcoin",
        "full_name": "stickies-v/bitcoin",
        "owner": {
          "login": "stickies-v",
          "id": 69010457,
          "node_id": "MDQ6VXNlcjY5MDEwNDU3",
          "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/stickies-v",
          "html_url": "https://github.com/stickies-v",
          "followers_url": "https://api.github.com/users/stickies-v/followers",
          "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
          "organizations_url": "https://api.github.com/users/stickies-v/orgs",
          "repos_url": "https://api.github.com/users/stickies-v/repos",
          "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/stickies-v/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/stickies-v/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/stickies-v/bitcoin",
        "archive_url": "https://api.github.com/repos/stickies-v/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/stickies-v/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/stickies-v/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/stickies-v/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/stickies-v/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/stickies-v/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/stickies-v/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/stickies-v/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/stickies-v/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/stickies-v/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/stickies-v/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/stickies-v/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/stickies-v/bitcoin/events",
        "forks_url": "https://api.github.com/repos/stickies-v/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/stickies-v/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/stickies-v/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/stickies-v/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/stickies-v/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/stickies-v/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/stickies-v/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/stickies-v/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/stickies-v/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/stickies-v/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/stickies-v/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/stickies-v/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/stickies-v/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/stickies-v/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/stickies-v/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/stickies-v/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:stickies-v/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/stickies-v/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/stickies-v/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/stickies-v/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/stickies-v/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/stickies-v/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/stickies-v/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/stickies-v/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/stickies-v/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/stickies-v/bitcoin/hooks",
        "svn_url": "https://github.com/stickies-v/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 2,
        "watchers_count": 2,
        "size": 254983,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-08-09T09:25:28Z",
        "created_at": "2021-11-24T22:26:41Z",
        "updated_at": "2024-06-19T14:39:47Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "27a770b34b8f1dbb84760f442edb3e23a0c2420b",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35980,
        "stargazers_count": 77785,
        "watchers_count": 77785,
        "size": 265054,
        "default_branch": "master",
        "open_issues_count": 658,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-08-09T10:18:55Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-08-09T10:47:52Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 122,
    "deletions": 43,
    "changed_files": 8,
    "commits": 5,
    "review_comments": 88,
    "comments": 7
  },
  "events": [
    {
      "event": "commented",
      "id": 2263761475,
      "node_id": "IC_kwDOABII586G7kJD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2263761475",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-01T18:59:09Z",
      "updated_at": "2024-08-09T08:36:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/30569).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [paplorinc](https://github.com/bitcoin/bitcoin/pull/30569#issuecomment-2275958345), [hodlinator](https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2228661985), [maflcko](https://github.com/bitcoin/bitcoin/pull/30569#issuecomment-2277446519) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#29641](https://github.com/bitcoin/bitcoin/pull/29641) (scripted-diff: Use LogInfo/LogDebug over LogPrintf/LogPrint by maflcko)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#issuecomment-2263761475",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30569"
    },
    {
      "event": "reviewed",
      "id": 2213720639,
      "node_id": "PRR_kwDOABII586D8rI_",
      "url": null,
      "actor": null,
      "commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Not sure about the breaking changes. `-noassumevalid` seems common https://github.com/search?q=noassumevalid&type=code",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2213720639",
      "submitted_at": "2024-08-01T19:31:24Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "labeled",
      "id": 13731528261,
      "node_id": "LE_lADOABII586RoByHzwAAAAMydn5F",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13731528261",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-01T20:07:23Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13744302692,
      "node_id": "HRFPE_lADOABII586RoByHzwAAAAMzOWpk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13744302692",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-02T16:35:07Z"
    },
    {
      "event": "commented",
      "id": 2265777270,
      "node_id": "IC_kwDOABII586HDQR2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2265777270",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-02T16:44:44Z",
      "updated_at": "2024-08-02T16:44:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks a lot for the quick approach feedback, @maflcko. Force pushed to minimize breaking changes by repurposing `IsHexNumber()` to `TrySanitizeHexNumber()` and allowing < 64 characters for `-minimumchainwork` and `RANDOM_CTX_SEED`, and to address the broken `-no<parameter>`  behaviour.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#issuecomment-2265777270",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30569"
    },
    {
      "event": "mentioned",
      "id": 13744416016,
      "node_id": "MEE_lADOABII586RoByHzwAAAAMzOyUQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13744416016",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-02T16:44:46Z"
    },
    {
      "event": "subscribed",
      "id": 13744416038,
      "node_id": "SE_lADOABII586RoByHzwAAAAMzOyUm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13744416038",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-02T16:44:46Z"
    },
    {
      "event": "reviewed",
      "id": 2217100926,
      "node_id": "PRR_kwDOABII586EJkZ-",
      "url": null,
      "actor": null,
      "commit_id": "b38a259d1e2749876d4e3a15f218b4f257049320",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for clearing these up, please see my observations.",
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2217100926",
      "submitted_at": "2024-08-03T19:19:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "reviewed",
      "id": 2217172418,
      "node_id": "PRR_kwDOABII586EJ13C",
      "url": null,
      "actor": null,
      "commit_id": "b38a259d1e2749876d4e3a15f218b4f257049320",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2217172418",
      "submitted_at": "2024-08-03T19:22:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "reviewed",
      "id": 2218701543,
      "node_id": "PRR_kwDOABII586EPrLn",
      "url": null,
      "actor": null,
      "commit_id": "b38a259d1e2749876d4e3a15f218b4f257049320",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2218701543",
      "submitted_at": "2024-08-05T11:02:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13776620517,
      "node_id": "HRFPE_lADOABII586RoByHzwAAAAM1Jovl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13776620517",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-06T10:41:52Z"
    },
    {
      "event": "reviewed",
      "id": 2219106988,
      "node_id": "PRR_kwDOABII586EROKs",
      "url": null,
      "actor": null,
      "commit_id": "d7f866f90201b23016c9da17f367e45fd9ec9806",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Force-pushed to address review comments, mainly:\r\n- [fixed](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1702863593) buggy `-noassumedvalid` behaviour and added unit tests to cover this\r\n- [changed](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1702863957) `result_size` to an int type and changed the disabled (default) state to `-1` instead of `0`\r\n- [changed](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1703942199) `RANDOM_CTX_SEED` to now have to be a 64 char hex string",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2219106988",
      "submitted_at": "2024-08-06T10:49:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13778745839,
      "node_id": "HRFPE_lADOABII586RoByHzwAAAAM1Rvnv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13778745839",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-06T13:26:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13779635602,
      "node_id": "HRFPE_lADOABII586RoByHzwAAAAM1VI2S",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13779635602",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-06T14:25:00Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFjOTA5YjJjY2ZhZWU5MDI2MzdiMjhmODkwZGI4ZGJlMTY4ZWE5MjY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c909b2ccfaee902637b28f890db8dbe168ea926",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1c909b2ccfaee902637b28f890db8dbe168ea926",
      "tree": {
        "sha": "f5234760e8dae5525cd23aec043397649444d65e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5234760e8dae5525cd23aec043397649444d65e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f5234760e8dae5525cd23aec043397649444d65e\nparent 9774a958b501a6d439a734e18b29e04f59f973f6\nauthor stickies-v <stickies-v@protonmail.com> 1722938155 +0100\ncommitter stickies-v <stickies-v@protonmail.com> 1722959326 +0100\n\ntest: unittest chainstatemanager_args\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5g/ggIZt5fccjfOgXLHObl5mp1cFAmayRd4ACgkQXLHObl5m\np1cQ9RAAh/zSEWu73cDGJDjdNsh7msnDCsqt73+xi/o+E8dZydWnv1vHwUe+9RVS\n4RppfS6Nljy4YZHAgoRGy2QxXn4i6zF0B+7bXSTGYMkb1KrwSoahHxPbtUC5j0MX\noe1mXSjMUgJZT3BgRCBwL/rZg4+iXWoYJuYIMjCNWbYaPwVrxek49MvKxDf8fWTW\nBIe2ykXbbhINww3oj0KI2vpIuLIC7SN9x95zXz7N3Qvgm3tQlW4xBu9K8Buy05gr\n+s+RjecQO8SkaM01AB5/RGa/rH1KTkkv+6KdoV+RPuz0LeaP4s/D+ufPne8M6F2E\npx7RoH48yBdRgtwAaw/Il5ch7dLxWStfpx/DdIbAskf2Aevbm+thwhUiqPDtzCrZ\nHlvHEyiqDF4ET1nBGBcRgZ9R2aLMkCOB0Rew5cpQSfQ3x4pwjklU0PeqcKGPecpD\nih74cEpyMTpYHc/kv4lK/O0fU6bnud4/dlOLrJ1lW927x0krVDp1GalHXYR7c3Jw\nh+xZKSnHeaHiNdn94BQDdZYg22cLXSbOBkSk08efs9O4ZFCRg9L3R2rdXF7vd4VK\nXDOCoaTEU8nRV24YNGi7uiFuuI/0hLLwModwGWkKkZrTVthJcuSnyyUDOR2cHLOE\n2iPn1oGqt1/3eKvfBZpKOiJtPte8aNHE79YafXk1Bh3KHoDmJ4g=\n=9AGj\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9774a958b501a6d439a734e18b29e04f59f973f6",
          "sha": "9774a958b501a6d439a734e18b29e04f59f973f6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9774a958b501a6d439a734e18b29e04f59f973f6"
        }
      ],
      "message": "test: unittest chainstatemanager_args",
      "committer": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-08-06T15:48:46Z"
      },
      "author": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-08-06T09:55:55Z"
      },
      "sha": "1c909b2ccfaee902637b28f890db8dbe168ea926"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13780833191,
      "node_id": "HRFPE_lADOABII586RoByHzwAAAAM1ZtOn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13780833191",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-06T15:50:25Z"
    },
    {
      "event": "unlabeled",
      "id": 13782128055,
      "node_id": "UNLE_lADOABII586RoByHzwAAAAM1epW3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13782128055",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-06T17:50:01Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2223466412,
      "node_id": "PRR_kwDOABII586Eh2es",
      "url": null,
      "actor": null,
      "commit_id": "abf96610212fb5d0897dc3c8cec8c1068944d04c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Will continue reviewing a bit later, I only had time for these so far",
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2223466412",
      "submitted_at": "2024-08-07T09:00:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "reviewed",
      "id": 2224497224,
      "node_id": "PRR_kwDOABII586ElyJI",
      "url": null,
      "actor": null,
      "commit_id": "abf96610212fb5d0897dc3c8cec8c1068944d04c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, please see my remaining suggestions ",
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2224497224",
      "submitted_at": "2024-08-07T12:18:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13793103710,
      "node_id": "HRFPE_lADOABII586RoByHzwAAAAM2Ig9e",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13793103710",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-07T14:05:42Z"
    },
    {
      "event": "reviewed",
      "id": 2224783283,
      "node_id": "PRR_kwDOABII586Em3-z",
      "url": null,
      "actor": null,
      "commit_id": "d045fc7ac1729cf29140c43518f20375f2aaa1cc",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the review @paplorinc, force pushed to address all outstanding comments. Style-only changes:\r\n- [introduced](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706884207) `final_size` var to avoid typecasting between (un)signed types and some related cleanup\r\n- [removed](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706891172) hardcoded `64` value\r\n- [cleaned up](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706897088) the `-noassumevalid` logic a bit",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2224783283",
      "submitted_at": "2024-08-07T14:54:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "reviewed",
      "id": 2225466836,
      "node_id": "PRR_kwDOABII586Epe3U",
      "url": null,
      "actor": null,
      "commit_id": "d045fc7ac1729cf29140c43518f20375f2aaa1cc",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK d045fc7ac1729cf29140c43518f20375f2aaa1cc\r\n\r\nNote that I don't know the second order effects of constraining previous public input values, somebody else should assess that part",
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2225466836",
      "submitted_at": "2024-08-07T15:00:34Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "reviewed",
      "id": 2225982967,
      "node_id": "PRR_kwDOABII586Erc33",
      "url": null,
      "actor": null,
      "commit_id": "d045fc7ac1729cf29140c43518f20375f2aaa1cc",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK d045fc7ac1729cf29140c43518f20375f2aaa1cc\r\n\r\nThanks for chipping away at making hex string handling more robust!\r\n\r\nSome minor disagreements + ignorable nits. The most significant disagreement in this thread: https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1700718302\r\n\r\nTested:\r\n```bash\r\n$ RANDOM_CTX_SEED=1231231231231231231231231231231231231231231231231231231231312312 src/test/test_bitcoin\r\n$ test/functional/feature_assumevalid.py\r\n```\r\n",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2225982967",
      "submitted_at": "2024-08-07T21:22:06Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "reviewed",
      "id": 2226246193,
      "node_id": "PRR_kwDOABII586EsdIx",
      "url": null,
      "actor": null,
      "commit_id": "d045fc7ac1729cf29140c43518f20375f2aaa1cc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "left a nit. Feel free to ignore.\r\n\r\nOtherwise this looks good on a first glance.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2226246193",
      "submitted_at": "2024-08-07T21:40:16Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDgwMjM3NGI0MzU1YmQxZGVjN2E4OGJiYTYyODdjNTVmOTM1Njk5ZmU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/802374b4355bd1dec7a88bba6287c55f935699fe",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/802374b4355bd1dec7a88bba6287c55f935699fe",
      "tree": {
        "sha": "db377fc3a53f911428a61495dfd923cca9da9de7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db377fc3a53f911428a61495dfd923cca9da9de7"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree db377fc3a53f911428a61495dfd923cca9da9de7\nparent 1c909b2ccfaee902637b28f890db8dbe168ea926\nauthor stickies-v <stickies-v@protonmail.com> 1722613806 +0100\ncommitter stickies-v <stickies-v@protonmail.com> 1723114441 +0100\n\nutil: refactor: change IsHexNumber to TrySanitizeHexNumber\n\nThis refactor enables future commits to allow passing user input\nhex numbers into the strictly validated base_blob::FromHex().\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5g/ggIZt5fccjfOgXLHObl5mp1cFAma0o8kACgkQXLHObl5m\np1cbEg/+MVDaHNbMuDqFuPlpwYjSgrVGzcs7xQWk9WLQeAWacwM/G6edQSF/jhvT\n8NyEiR3vU1JjDAS2B+4zmZFgJ/cX5bGEEnKpxlfe7TT1ahnNIlfadmgxvsWl9KgE\nOxEVPHM0y7h91q0L/y3mXl8SSKcOuFu42uSGCfG9xVOkBVHUFA7rxjsxVwxvp3Po\nZEE2M2hg1AhjSvol76huIfJP4yk2dm4COD9yf+ibPvcmSzkusknOfRgVTDWK8oJ3\nRa7Yv/h5+7ApW6TdEeroVWf16WQGSrvy1TEj47Z+c+64sfTKuTh1p1Y+Y6+gxVDH\nvEDnV5OmHlWUReCDQbjHUidyQJ1cji/NQ5eQMP56Ohaf1fdLDMQCXKUN6ZwdKcll\nuhG4bYXANjFfzdC/itA7uZpohZHl39jK9SMF/RicWotoopZSXkTeZErRSLUNWmYZ\n4/0B4HIy1ZxEX66AbggEAXV79SjU+mhpyVZ+26+JG/eftkd2hGYLrm2e37ZnhYBH\n9QObqtJ1ZJxmo1BemZ9kMay9w5SS91mbVmOOIMTfQxrbyz1vR+Ms2zOdTSU/DiHk\nXvOrlftptRUMmBi7QtEp3DfXIA4wVbfRSGOjLBmXoYeOTqg98xhIEVlCLZKL/ydU\nPPh7fDu/8g6dfA8DgLNUtMPTfoMxYuUWqPVSirB27xULkGNqHqc=\n=HyDH\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c909b2ccfaee902637b28f890db8dbe168ea926",
          "sha": "1c909b2ccfaee902637b28f890db8dbe168ea926",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1c909b2ccfaee902637b28f890db8dbe168ea926"
        }
      ],
      "message": "util: refactor: change IsHexNumber to TrySanitizeHexNumber\n\nThis refactor enables future commits to allow passing user input\nhex numbers into the strictly validated base_blob::FromHex().",
      "committer": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-08-08T10:54:01Z"
      },
      "author": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-08-02T15:50:06Z"
      },
      "sha": "802374b4355bd1dec7a88bba6287c55f935699fe"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDNjNzk0YjUzN2ZlOGZlMDAwZDM1NDU3MDRhZmMxN2QxZDYzYmRiNWY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c794b537fe8fe000d3545704afc17d1d63bdb5f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3c794b537fe8fe000d3545704afc17d1d63bdb5f",
      "tree": {
        "sha": "9713a6bcf97656fd8a336189c8e4a2cc6754c764",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9713a6bcf97656fd8a336189c8e4a2cc6754c764"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9713a6bcf97656fd8a336189c8e4a2cc6754c764\nparent 802374b4355bd1dec7a88bba6287c55f935699fe\nauthor stickies-v <stickies-v@protonmail.com> 1722002508 +0100\ncommitter stickies-v <stickies-v@protonmail.com> 1723114441 +0100\n\nnode: use uint256::FromHex for -minimumchainwork parsing\n\nRemoves dependency on unsafe and deprecated uint256S.\n\nThis makes parsing more strict, by explicitly returning an error\nwhen the input is longer than 64 hex characters.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5g/ggIZt5fccjfOgXLHObl5mp1cFAma0o8kACgkQXLHObl5m\np1cACQ/9EMnGXN87dwl8LHChXG1T1AWvBabjmsQckb+vJi2D/RjKTHtwWiU9UvM9\nGE8F2Ip53P6RKhfhZvZ3TwaBY+1d5J1FG4P4khzsCv1xgSq32TGzbWTEN0uP53d0\nVzffzzwD80g7hwGff0EKaHdfjtRWEQJZqRRLrtqiOrBw8Bw7eBbhqL3nN5Tpsura\nG2P82pYBguxLH65gHgb1yx3VdSEdqW9miki1kuQICh69+EeLgw6QGUxKS0oLM5Pk\nQ7n9hkZ+4jPk89rY7IbGfGRgWGvKsj6ZeE2eoLvkTWZohDyrkefzEkNC/aRclNFg\nZkascWQNhmZYF8KwlgP0IdDlVKI7XJR5tUuDtK11ikq2drFBKxMTMKaF8MVE4zEC\nTVzaPCt+8JOpAKZfZVlhCFe97B1lcnH3K5L/fapdwCrSrRm7VNu0o9CdpXgwHrAG\nHRbP/z1N70/gJNv/trSKlxXIDlwRbihkKeqThcpJCd5TFYKFlrXdyFlGmCpVBehG\nzl5ezx3nQzgm7486AaQo+1u7OsgXYXFkDhedMLuBY+w2pkpxuBKWkpMF0qB3Eys6\nvvnhX2A9w04G/q598AQ8jMr4cNPrkSamxV/havQ8i+No3DXZxXNWfZC2J3ksPGVq\nMMK2oauNt3GxUxufoPQCcyMHRQaRsZ/HnARBfyllzHbyRqUrCvg=\n=C9O5\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/802374b4355bd1dec7a88bba6287c55f935699fe",
          "sha": "802374b4355bd1dec7a88bba6287c55f935699fe",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/802374b4355bd1dec7a88bba6287c55f935699fe"
        }
      ],
      "message": "node: use uint256::FromHex for -minimumchainwork parsing\n\nRemoves dependency on unsafe and deprecated uint256S.\n\nThis makes parsing more strict, by explicitly returning an error\nwhen the input is longer than 64 hex characters.",
      "committer": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-08-08T10:54:01Z"
      },
      "author": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-07-26T14:01:48Z"
      },
      "sha": "3c794b537fe8fe000d3545704afc17d1d63bdb5f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDE5NjUwNzY4NTc1ZTNkNzZkMGUwNmMxODY4OTZiMDBhZDNlMjZlNTc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19650768575e3d76d0e06c186896b00ad3e26e57",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/19650768575e3d76d0e06c186896b00ad3e26e57",
      "tree": {
        "sha": "e4b6b8fd04ec6cc12c75c7a23a3126f99dfe88e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4b6b8fd04ec6cc12c75c7a23a3126f99dfe88e4"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e4b6b8fd04ec6cc12c75c7a23a3126f99dfe88e4\nparent 3c794b537fe8fe000d3545704afc17d1d63bdb5f\nauthor stickies-v <stickies-v@protonmail.com> 1722003025 +0100\ncommitter stickies-v <stickies-v@protonmail.com> 1723114442 +0100\n\nnode: use uint256::FromHex for -assumevalid parsing\n\nRemoves dependency on unsafe and deprecated uint256S.\n\nThis makes parsing more strict, by explicitly returning an error\nwhen the input contains invalid hex characters, or when it is\nnot exactly 64 characters long.\n\nAlso make feature_assumevalid.py more robust by using CBlock.hash\nwhich is guaranteed to be 64 characters long, as opposed to the\nvariable-length hex(CBlock.sha256)\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5g/ggIZt5fccjfOgXLHObl5mp1cFAma0o8oACgkQXLHObl5m\np1fUwg/+NDUBKqZf+xWw7XrsTn6ZtfjskMwond3o06Puq2JPeR6S7ik/F5NzFBHg\n2Le3uWOKQrFTOHUiYj0sj8s/KF4ZJsWPUYvUyZcLYy59faR/P/gIVayttXz7QlL3\nQtXq95JT0M/+dwt0FWboHVVKagud13gOUQznCnCBSgytpDYJ6nWLB6u5S9/n0jJb\nOnFh8YSbMQstGKcDUBdyog27UYUCe+8IHnf1HbFw5rVZBg+sRnpr/72iUU6IEl28\nl3/XiMQ6YMjKWtqJhY8QukCfVT2rKBFHupaExpHefxpaHbvNC2aqzJWkW0+qmszJ\nJ3fNg0JxXUbNY8Iq0yPUOvxhPjCTYA9zikBCHsvzhSK1J3qHib7rfXDc63uqeq6o\n7eURLgCvQu9cFFzYTRpZhU9zbzPtKtx3j4SBIllDlQ7ruT53wpWaGYuBh9T2u/Jy\nK009JMXgUe8siaNhdX3hfuFyoV5yn+kJKbQTryAWzLjqDoqeC7VorZQw5WR+DC1e\nodNtwaZV638XAaXP6mXrcjXzfiwy1TYIzyVkqcWtUNX31/yrWhoQeEsif3rckMnb\n0ZTnpNBY9pMm3pkp0M7y4Tdc3Z6yTyxzzP6RRQluWeCaWGLuhKgXJinjhzZ9mDhS\n+t7hsVsqZkr+piwKRcU7ftbCju0pPlZK9JvW0shaf6d0oR+HJK4=\n=tPub\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c794b537fe8fe000d3545704afc17d1d63bdb5f",
          "sha": "3c794b537fe8fe000d3545704afc17d1d63bdb5f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3c794b537fe8fe000d3545704afc17d1d63bdb5f"
        }
      ],
      "message": "node: use uint256::FromHex for -assumevalid parsing\n\nRemoves dependency on unsafe and deprecated uint256S.\n\nThis makes parsing more strict, by explicitly returning an error\nwhen the input contains invalid hex characters, or when it is\nnot exactly 64 characters long.\n\nAlso make feature_assumevalid.py more robust by using CBlock.hash\nwhich is guaranteed to be 64 characters long, as opposed to the\nvariable-length hex(CBlock.sha256)",
      "committer": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-08-08T10:54:02Z"
      },
      "author": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-07-26T14:10:25Z"
      },
      "sha": "19650768575e3d76d0e06c186896b00ad3e26e57"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13804989042,
      "node_id": "HRFPE_lADOABII586RoByHzwAAAAM212py",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13804989042",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-08T10:54:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13805024541,
      "node_id": "HRFPE_lADOABII586RoByHzwAAAAM21_Ud",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13805024541",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-08T10:57:21Z"
    },
    {
      "event": "reviewed",
      "id": 2227455502,
      "node_id": "PRR_kwDOABII586ExEYO",
      "url": null,
      "actor": null,
      "commit_id": "ee63e211e33a142cdda93343281b5d3625275428",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Force-pushed to address all outstanding review comments, mainly:\r\n- [avoid string re-allocation](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1707728879)\r\n- [cleaned up](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1707958805) `util/random.cpp` a bit more\r\n- [removed](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1707734248) unnecessary docstring",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2227455502",
      "submitted_at": "2024-08-08T11:00:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "reviewed",
      "id": 2227696150,
      "node_id": "PRR_kwDOABII586Ex_IW",
      "url": null,
      "actor": null,
      "commit_id": "ee63e211e33a142cdda93343281b5d3625275428",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2227696150",
      "submitted_at": "2024-08-08T12:18:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg1NTc4NGQzYTAwMjY0MTQxNTlhY2M0MmZjZWViMjcxZjhhMjgxMzM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/855784d3a0026414159acc42fceeb271f8a28133",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/855784d3a0026414159acc42fceeb271f8a28133",
      "tree": {
        "sha": "af17eff1459f34dc5492d41d7e0e3917e9b31d55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af17eff1459f34dc5492d41d7e0e3917e9b31d55"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree af17eff1459f34dc5492d41d7e0e3917e9b31d55\nparent 19650768575e3d76d0e06c186896b00ad3e26e57\nauthor MarcoFalke <*~=`'#}+{/-|&$^_@721217.xyz> 1722592449 +0200\ncommitter stickies-v <stickies-v@protonmail.com> 1723125309 +0100\n\ntest: Only accept a fully valid RANDOM_CTX_SEED\n\nThis rejects if the seed is corrupt, truncated, too-long, or otherwise\ncontains non-hex.\n\nFor example, \"RANDOM_CTX_SEED=z\".\n\nCan be tested with:\n\n$ RANDOM_CTX_SEED=z ./src/test/test_bitcoin --log_level=all --run_test=timeoffsets_tests/timeoffsets_warning -- -printtoconsole=1 | grep RANDOM_CTX_SEED\ntest/util/random.cpp:29 operator(): Assertion `uint256::FromHex(num)' failed.\n\nCo-authored-by: stickies-v <stickies-v@protonmail.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5g/ggIZt5fccjfOgXLHObl5mp1cFAma0zj0ACgkQXLHObl5m\np1fVLBAAk5puZJ5UGTV4V088J6U9LVVhaQT6F1nD9/8ajTuJi3wMJYeeBp0pSB4W\nJiPGx87QLfbKWCdTLQzo0oC7hZ2hEIlDkusq2xmfT2stRVu18SPMbRNLQ4rveGpz\nV9mB4LfyINJeqvtS3X2SV8r99GNhoOqzLlnvblmfENmBopLa44UuzHn2oS8y11Qe\noLeZtvbhLT5fztHKUtmNcTUP8BykACBgKq255Uazm425QLGjZObVj95HY+FuZ9Tc\nmf4u/q+yYYwW0TTY/bhyIYF9y3Knz7adq5innFN0s8rr6a3OOglm+9Pi6tKmbzYP\nuDFAX1FtTxIL8nayGnLY5rtU4vQIkCvQD+EzwC+VpnKWguQBvpPPTXgTkIMHSJa3\nhh+TN/El0kBAuoL2YR29QbjOhqYwhkERR8uGaI28w73jQjzmnoAA1j2ADrKFnP/+\nvr0PwuZ/iU6Y4V38BIC7J6iJSI/5qILJtH0NJyrOO230mO+/3LhAscB410Adyk4B\n65B/Ua3txKnhVx/zWPiFDeUfeSpOfcUiyIMb+QV8HU4Rov8GQFaAOD/9VIWpuiC2\nH+xrAvaJYQwWLu8H4CkB8ldX24H+bFKGYLEMyaP7gq3qwkL+cRVyZ49GH89Bp+iM\n7TubDj/iDFLCmoQp904qtNdQcucB7HtLm0B8IEAlOkao+Yw7Yfk=\n=5T47\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19650768575e3d76d0e06c186896b00ad3e26e57",
          "sha": "19650768575e3d76d0e06c186896b00ad3e26e57",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/19650768575e3d76d0e06c186896b00ad3e26e57"
        }
      ],
      "message": "test: Only accept a fully valid RANDOM_CTX_SEED\n\nThis rejects if the seed is corrupt, truncated, too-long, or otherwise\ncontains non-hex.\n\nFor example, \"RANDOM_CTX_SEED=z\".\n\nCan be tested with:\n\n$ RANDOM_CTX_SEED=z ./src/test/test_bitcoin --log_level=all --run_test=timeoffsets_tests/timeoffsets_warning -- -printtoconsole=1 | grep RANDOM_CTX_SEED\ntest/util/random.cpp:29 operator(): Assertion `uint256::FromHex(num)' failed.\n\nCo-authored-by: stickies-v <stickies-v@protonmail.com>",
      "committer": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-08-08T13:55:09Z"
      },
      "author": {
        "name": "MarcoFalke",
        "email": "*~=`'#}+{/-|&$^_@721217.xyz",
        "date": "2024-08-02T09:54:09Z"
      },
      "sha": "855784d3a0026414159acc42fceeb271f8a28133"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13807456903,
      "node_id": "HRFPE_lADOABII586RoByHzwAAAAM2_RKH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13807456903",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-08T13:56:18Z"
    },
    {
      "event": "commented",
      "id": 2275904176,
      "node_id": "IC_kwDOABII586Hp4qw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2275904176",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-08T13:58:15Z",
      "updated_at": "2024-08-08T13:58:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "Force pushed to [terminate with `std::abort()`](https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709568559) in case of invalid `RANDOM_CTX_SEED` input.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#issuecomment-2275904176",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30569"
    },
    {
      "event": "commented",
      "id": 2275958345,
      "node_id": "IC_kwDOABII586HqF5J",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2275958345",
      "actor": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-08T14:22:20Z",
      "updated_at": "2024-08-08T14:22:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK 855784d3a0026414159acc42fceeb271f8a28133",
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#issuecomment-2275958345",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30569"
    },
    {
      "event": "review_requested",
      "id": 13807845032,
      "node_id": "RRE_lADOABII586RoByHzwAAAAM3Av6o",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13807845032",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-08T14:22:24Z",
      "requested_reviewer": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "commented",
      "id": 2275970516,
      "node_id": "IC_kwDOABII586HqI3U",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2275970516",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-08T14:26:54Z",
      "updated_at": "2024-08-08T14:26:54Z",
      "author_association": "MEMBER",
      "body": "> This PR carves out the few `uint256S` callsites that may potentially prove a bit more controversial to change because they deal with user input and - potentially - backwards incompatible behaviour change.\r\n> \r\n> After this PR, the remaining work to remove `uint256S` completely is almost entirely mechanical and/or test related. I will open that PR once #30560 is merged because it builds on that.\r\n\r\nI think the description can be clarified that there are two user-facing settings that are now stricter checked.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#issuecomment-2275970516",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30569"
    },
    {
      "event": "commented",
      "id": 2275982831,
      "node_id": "IC_kwDOABII586HqL3v",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2275982831",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-08T14:32:07Z",
      "updated_at": "2024-08-08T14:32:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I think the description can be clarified that there are two user-facing settings that are now stricter checked.\r\n\r\nThanks, added a section on introduced behaviour change.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#issuecomment-2275982831",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30569"
    },
    {
      "event": "reviewed",
      "id": 2228661985,
      "node_id": "PRR_kwDOABII586E1q7h",
      "url": null,
      "actor": null,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 855784d3a0026414159acc42fceeb271f8a28133\r\n\r\nPassed `make check`.\r\nPassed ``RANDOM_CTX_SEED=1231231231231231231231231231231231231231231231231231231231312312 src/test/test_bitcoin``.\r\nFailed with expected error when removing char or inserting non-hex char into `RANDOM_CTX_SEED` from above.\r\n\r\nThanks @stickies-v for humoring me regarding the error handling in **test/util/random.cpp**!",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#pullrequestreview-2228661985",
      "submitted_at": "2024-08-08T19:28:05Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
    },
    {
      "event": "commented",
      "id": 2277446519,
      "node_id": "IC_kwDOABII586HvxN3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2277446519",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-09T08:36:19Z",
      "updated_at": "2024-08-09T08:36:19Z",
      "author_association": "MEMBER",
      "body": "ACK 855784d3a0026414159acc42fceeb271f8a28133 🔋\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\nuntrusted comment: signature from minisign secret key on empty file; verify via: minisign -Vm \"${path_to_any_empty_file}\" -P RWTRmVTMeKV5noAMqVlsMugDDCyyTSbA3Re5AkUrhvLVln0tSaFWglOw -x \"${path_to_this_whole_four_line_signature_blob}\"\r\nRUTRmVTMeKV5npGrKx1nqXCw5zeVHdtdYURB/KlyA/LMFgpNCs+SkW9a8N95d+U4AP1RJMi+krxU1A3Yux4bpwZNLvVBKy0wLgM=\r\ntrusted comment: ACK 855784d3a0026414159acc42fceeb271f8a28133 🔋\r\ndosCiDfeNxthUmbV00hveQKoOka0fC9nFw0BDCe/HtnnknF+L2/hfD2/aHv9hYT68heKoF0Oc6X5Skx2/ya1Dg==\r\n```\r\n\r\n</details>\r\n\r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#issuecomment-2277446519",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30569"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1700712603",
      "pull_request_review_id": 2213720639,
      "id": 1700712603,
      "node_id": "PRRC_kwDOABII585lXtCb",
      "diff_hunk": "@@ -32,13 +32,20 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!IsHexNumber(*value)) {\n-            return util::Error{strprintf(Untranslated(\"Invalid non-hex (%s) minimum chain work value specified\"), *value)};\n+        if (auto min_work{uint256::FromHex(util::RemovePrefixView(*value, \"0x\"))}) {\n+            opts.minimum_chain_work = UintToArith256(*min_work);\n+        } else {\n+            return util::Error{strprintf(Untranslated(\"Invalid minimum chain work value specified (%s), must be %d character hex\"), *value, uint256::size() * 2)};",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I wonder if it makes sense to add an option to `FromHex` to allow parsing of \"hex numbers\", which would remove the prefix and only reject too large or junk input?\r\n\r\nIn any case, you can remove `IsHexNumber`?",
      "created_at": "2024-08-01T19:24:19Z",
      "updated_at": "2024-08-01T19:31:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1700712603",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1700712603"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 35,
      "start_side": "LEFT",
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1700717783",
      "pull_request_review_id": 2213720639,
      "id": 1700717783,
      "node_id": "PRRC_kwDOABII585lXuTX",
      "diff_hunk": "@@ -32,13 +32,20 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!IsHexNumber(*value)) {\n-            return util::Error{strprintf(Untranslated(\"Invalid non-hex (%s) minimum chain work value specified\"), *value)};\n+        if (auto min_work{uint256::FromHex(util::RemovePrefixView(*value, \"0x\"))}) {\n+            opts.minimum_chain_work = UintToArith256(*min_work);\n+        } else {\n+            return util::Error{strprintf(Untranslated(\"Invalid minimum chain work value specified (%s), must be %d character hex\"), *value, uint256::size() * 2)};\n         }\n-        opts.minimum_chain_work = UintToArith256(uint256S(*value));\n     }\n \n-    if (auto value{args.GetArg(\"-assumevalid\")}) opts.assumed_valid_block = uint256S(*value);\n+    if (auto value{args.GetArg(\"-assumevalid\")}) {\n+        if (auto block_hash{uint256::FromHex(util::RemovePrefixView(*value, \"0x\"))}) {\n+            opts.assumed_valid_block = *block_hash;\n+        } else {\n+            return util::Error{strprintf(Untranslated(\"Invalid assumevalid block hash specified (%s), must be %d character hex\"), *value, uint256::size() * 2)};",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I presume this will break, when someone sets `-noassumevalid`?\r\n\r\n```\r\nError: Invalid assumevalid block hash specified (0), must be 64 character hex\r\n",
      "created_at": "2024-08-01T19:29:35Z",
      "updated_at": "2024-08-01T19:31:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1700717783",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1700717783"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1700718302",
      "pull_request_review_id": 2213720639,
      "id": 1700718302,
      "node_id": "PRRC_kwDOABII585lXube",
      "diff_hunk": "@@ -9,24 +9,26 @@\n #include <uint256.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const auto num{std::getenv(RANDOM_CTX_SEED)}) {\n+            uint256 rv;\n+            rv.SetHexDeprecated(num);\n+            return rv;",
      "path": "src/test/util/random.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Seems fine to just use `Assert(FromHex(...))`?",
      "created_at": "2024-08-01T19:30:07Z",
      "updated_at": "2024-08-01T19:31:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1700718302",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1700718302"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1700826270",
      "pull_request_review_id": 2213904151,
      "id": 1700826270,
      "node_id": "PRRC_kwDOABII585lYIye",
      "diff_hunk": "@@ -32,13 +32,20 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!IsHexNumber(*value)) {\n-            return util::Error{strprintf(Untranslated(\"Invalid non-hex (%s) minimum chain work value specified\"), *value)};\n+        if (auto min_work{uint256::FromHex(util::RemovePrefixView(*value, \"0x\"))}) {\n+            opts.minimum_chain_work = UintToArith256(*min_work);\n+        } else {\n+            return util::Error{strprintf(Untranslated(\"Invalid minimum chain work value specified (%s), must be %d character hex\"), *value, uint256::size() * 2)};\n         }\n-        opts.minimum_chain_work = UintToArith256(uint256S(*value));\n     }\n \n-    if (auto value{args.GetArg(\"-assumevalid\")}) opts.assumed_valid_block = uint256S(*value);\n+    if (auto value{args.GetArg(\"-assumevalid\")}) {\n+        if (auto block_hash{uint256::FromHex(util::RemovePrefixView(*value, \"0x\"))}) {\n+            opts.assumed_valid_block = *block_hash;\n+        } else {\n+            return util::Error{strprintf(Untranslated(\"Invalid assumevalid block hash specified (%s), must be %d character hex\"), *value, uint256::size() * 2)};",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": 1700717783,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah thanks, didn't think of that. Will add a \"0\" check:\r\n\r\n<details>\r\n<summary>git diff on c0d508e69c</summary>\r\n\r\n```diff\r\ndiff --git a/src/node/chainstatemanager_args.cpp b/src/node/chainstatemanager_args.cpp\r\nindex 8085aa65dc..60cee3dd78 100644\r\n--- a/src/node/chainstatemanager_args.cpp\r\n+++ b/src/node/chainstatemanager_args.cpp\r\n@@ -31,7 +31,7 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\r\n \r\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\r\n \r\n-    if (auto value{args.GetArg(\"-minimumchainwork\")}) {\r\n+    if (auto value{args.GetArg(\"-minimumchainwork\")}; value && *value != \"0\") {\r\n         if (auto min_work{uint256::FromHex(util::RemovePrefixView(*value, \"0x\"))}) {\r\n             opts.minimum_chain_work = UintToArith256(*min_work);\r\n         } else {\r\n@@ -39,7 +39,7 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\r\n         }\r\n     }\r\n \r\n-    if (auto value{args.GetArg(\"-assumevalid\")}) {\r\n+    if (auto value{args.GetArg(\"-assumevalid\")}; value && *value != \"0\") {\r\n         if (auto block_hash{uint256::FromHex(util::RemovePrefixView(*value, \"0x\"))}) {\r\n             opts.assumed_valid_block = *block_hash;\r\n         } else {\r\n\r\n```\r\n</details>\r\n",
      "created_at": "2024-08-01T20:47:54Z",
      "updated_at": "2024-08-01T20:47:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1700826270",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1700826270"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702084437",
      "pull_request_review_id": 2216001026,
      "id": 1702084437,
      "node_id": "PRRC_kwDOABII585lc79V",
      "diff_hunk": "@@ -32,13 +32,20 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!IsHexNumber(*value)) {\n-            return util::Error{strprintf(Untranslated(\"Invalid non-hex (%s) minimum chain work value specified\"), *value)};\n+        if (auto min_work{uint256::FromHex(util::RemovePrefixView(*value, \"0x\"))}) {\n+            opts.minimum_chain_work = UintToArith256(*min_work);\n+        } else {\n+            return util::Error{strprintf(Untranslated(\"Invalid minimum chain work value specified (%s), must be %d character hex\"), *value, uint256::size() * 2)};",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": 1700712603,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for the suggestion. I've been exploring different options here. Adding a `bool is_num` optional param to `uint256::FromHex()` is an option, but felt a bit awkward because it'd be a uint256-specific parameter (doesn't make sense for `transaction_identifier`).\r\n\r\nSince we only need this for user input validation, I've now taken a different approach where I've repurposed `IsHexNumber()` -> `TrySanitizeHexNumber()`. I think this minimizes churn (e.g. the test suite can largely be kept as is), isolates user input validation from code that's mostly used internally and benefits from being strict and simple.",
      "created_at": "2024-08-02T16:39:43Z",
      "updated_at": "2024-08-02T16:39:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1702084437",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702084437"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 35,
      "start_side": "LEFT",
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702085339",
      "pull_request_review_id": 2216002612,
      "id": 1702085339,
      "node_id": "PRRC_kwDOABII585lc8Lb",
      "diff_hunk": "@@ -32,13 +32,20 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!IsHexNumber(*value)) {\n-            return util::Error{strprintf(Untranslated(\"Invalid non-hex (%s) minimum chain work value specified\"), *value)};\n+        if (auto min_work{uint256::FromHex(util::RemovePrefixView(*value, \"0x\"))}) {\n+            opts.minimum_chain_work = UintToArith256(*min_work);\n+        } else {\n+            return util::Error{strprintf(Untranslated(\"Invalid minimum chain work value specified (%s), must be %d character hex\"), *value, uint256::size() * 2)};\n         }\n-        opts.minimum_chain_work = UintToArith256(uint256S(*value));\n     }\n \n-    if (auto value{args.GetArg(\"-assumevalid\")}) opts.assumed_valid_block = uint256S(*value);\n+    if (auto value{args.GetArg(\"-assumevalid\")}) {\n+        if (auto block_hash{uint256::FromHex(util::RemovePrefixView(*value, \"0x\"))}) {\n+            opts.assumed_valid_block = *block_hash;\n+        } else {\n+            return util::Error{strprintf(Untranslated(\"Invalid assumevalid block hash specified (%s), must be %d character hex\"), *value, uint256::size() * 2)};",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": 1700717783,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`-minimumchainwork` now accepts hex number input (including \"0\") again, and `-assumevalid` has an extra `*value != \"0\"` check. Marking as resolved.",
      "created_at": "2024-08-02T16:40:44Z",
      "updated_at": "2024-08-02T16:40:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1702085339",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702085339"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702086239",
      "pull_request_review_id": 2216004069,
      "id": 1702086239,
      "node_id": "PRRC_kwDOABII585lc8Zf",
      "diff_hunk": "@@ -9,24 +9,26 @@\n #include <uint256.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const auto num{std::getenv(RANDOM_CTX_SEED)}) {\n+            uint256 rv;\n+            rv.SetHexDeprecated(num);\n+            return rv;",
      "path": "src/test/util/random.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": 1700718302,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done (and `RANDOM_CTX_SEED` now also accepts < 64 character input string), thanks.",
      "created_at": "2024-08-02T16:41:34Z",
      "updated_at": "2024-08-02T16:41:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1702086239",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702086239"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702827034",
      "pull_request_review_id": 2217100926,
      "id": 1702827034,
      "node_id": "PRRC_kwDOABII585lfxQa",
      "diff_hunk": "@@ -27,7 +27,7 @@ FUZZ_TARGET(hex)\n     if (IsHex(random_hex_string)) {\n         assert(ToLower(random_hex_string) == hex_data);\n     }\n-    (void)IsHexNumber(random_hex_string);\n+    (void)TrySanitizeHexNumber(random_hex_string);",
      "path": "src/test/fuzz/hex.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "713d92e29f4f882031ede2903664e8e64952629d",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "would it make sense to test the `result_size` param here, too?",
      "created_at": "2024-08-03T16:36:16Z",
      "updated_at": "2024-08-03T19:19:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1702827034",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702827034"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702836629",
      "pull_request_review_id": 2217100926,
      "id": 1702836629,
      "node_id": "PRRC_kwDOABII585lfzmV",
      "diff_hunk": "@@ -432,29 +432,33 @@ BOOST_AUTO_TEST_CASE(util_IsHex)\n     BOOST_CHECK(!IsHex(\"0x0000\"));\n }\n \n-BOOST_AUTO_TEST_CASE(util_IsHexNumber)\n+BOOST_AUTO_TEST_CASE(util_TrySanitizeHexNumber)\n {\n-    BOOST_CHECK(IsHexNumber(\"0x0\"));\n-    BOOST_CHECK(IsHexNumber(\"0\"));\n-    BOOST_CHECK(IsHexNumber(\"0x10\"));\n-    BOOST_CHECK(IsHexNumber(\"10\"));\n-    BOOST_CHECK(IsHexNumber(\"0xff\"));\n-    BOOST_CHECK(IsHexNumber(\"ff\"));\n-    BOOST_CHECK(IsHexNumber(\"0xFfa\"));\n-    BOOST_CHECK(IsHexNumber(\"Ffa\"));\n-    BOOST_CHECK(IsHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-    BOOST_CHECK(IsHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-\n-    BOOST_CHECK(!IsHexNumber(\"\"));   // empty string not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x\")); // empty string after prefix not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x0 \")); // no spaces at end,\n-    BOOST_CHECK(!IsHexNumber(\" 0x0\")); // or beginning,\n-    BOOST_CHECK(!IsHexNumber(\"0x 0\")); // or middle,\n-    BOOST_CHECK(!IsHexNumber(\" \"));    // etc.\n-    BOOST_CHECK(!IsHexNumber(\"0x0ga\")); // invalid character\n-    BOOST_CHECK(!IsHexNumber(\"x0\"));    // broken prefix\n-    BOOST_CHECK(!IsHexNumber(\"0x0x00\")); // two prefixes not allowed\n-\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"ff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xFfa\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"Ffa\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n+\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"\"));       // empty string not allowed\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x\"));     // empty string after prefix not allowed\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x0 \"));   // no spaces at end,\n+    BOOST_CHECK(!TrySanitizeHexNumber(\" 0x0\"));   // or beginning,\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x 0\"));   // or middle,\n+    BOOST_CHECK(!TrySanitizeHexNumber(\" \"));      // etc.\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x0ga\"));  // invalid character\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"x0\"));     // broken prefix\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x0x00\")); // two prefixes not allowed\n+\n+    BOOST_CHECK_EQUAL(TrySanitizeHexNumber(\"0x1234\", /*target_size=*/0).value(), \"1234\");",
      "path": "src/test/util_tests.cpp",
      "position": null,
      "original_position": 49,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "713d92e29f4f882031ede2903664e8e64952629d",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I find it a bit surprising that a result size of 0 returns a value with size 4.\r\nDo you think it would make sense to ignore negative values instead, so that a `result_size` of 0 returns an empty string instead, to make it slightly more intuitive?",
      "created_at": "2024-08-03T16:42:54Z",
      "updated_at": "2024-08-03T19:22:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1702836629",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702836629"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 458,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702840728",
      "pull_request_review_id": 2217100926,
      "id": 1702840728,
      "node_id": "PRRC_kwDOABII585lf0mY",
      "diff_hunk": "@@ -46,14 +46,19 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, size_t result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    if (input.empty() || (result_size && input.size() > result_size)) return std::nullopt;\n+    for (char c : input) {\n+        if (HexDigit(c) < 0) return std::nullopt;\n     }\n-    // Return false for empty string or \"0x\".\n-    return str.size() > 0;\n+    std::string result{input};\n+    if (input.size() < result_size) {",
      "path": "src/util/strencodings.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "713d92e29f4f882031ede2903664e8e64952629d",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "since we've checked `>` before, maybe it would be more self-explanatory to check whether we're equal or not, since it's a stronger guarantee:\r\n```suggestion\r\n    if (input.size() != result_size) {\r\n```",
      "created_at": "2024-08-03T16:47:13Z",
      "updated_at": "2024-08-03T19:19:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1702840728",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702840728"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702847680",
      "pull_request_review_id": 2217100926,
      "id": 1702847680,
      "node_id": "PRRC_kwDOABII585lf2TA",
      "diff_hunk": "@@ -46,14 +46,19 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, size_t result_size)",
      "path": "src/util/strencodings.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "713d92e29f4f882031ede2903664e8e64952629d",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Does it still make sense to suffix it with `Number` after the change?\r\nAnd besides the `TryParseHex` below, it doesn't seem common to prefix optional returning methods with `Try` - the return type already states that the operation might not succeed, `Try` seems redundant.",
      "created_at": "2024-08-03T16:59:53Z",
      "updated_at": "2024-08-03T19:19:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1702847680",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702847680"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702847776",
      "pull_request_review_id": 2217100926,
      "id": 1702847776,
      "node_id": "PRRC_kwDOABII585lf2Ug",
      "diff_hunk": "@@ -71,9 +71,20 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n  * number of hex digits.*/\n bool IsHex(std::string_view str);\n /**\n-* Return true if the string is a hex number, optionally prefixed with \"0x\"\n-*/\n-bool IsHexNumber(std::string_view str);\n+ * @brief Return a sanitized hex string if input is a valid hex number.\n+ *        \"0x\" prefix is removed, and if result_size is specified, the\n+ *        result is padded with leading zeroes until result_size is\n+ *        reached, or std::nullopt returned if input is longer than\n+ *        result_size.\n+ *\n+ * @param input Hex encoding of a number, optionally prefixed with 0x.\n+ * @param result_size Size of the resulting string, causing zero-padding\n+ *                    if input is too short, or a std::nullopt return\n+ *                    value if input is too long. Disabled if <= 0.",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 16,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "713d92e29f4f882031ede2903664e8e64952629d",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can it be negative?",
      "created_at": "2024-08-03T17:00:58Z",
      "updated_at": "2024-08-03T19:19:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1702847776",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702847776"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702863593",
      "pull_request_review_id": 2217100926,
      "id": 1702863593,
      "node_id": "PRRC_kwDOABII585lf6Lp",
      "diff_hunk": "@@ -32,13 +32,20 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!IsHexNumber(*value)) {\n+        if (auto sanitized_hex{TrySanitizeHexNumber(*value, /*result_size=*/64)}) {\n+            opts.minimum_chain_work = UintToArith256(*uint256::FromHex(*sanitized_hex));\n+        } else {\n             return util::Error{strprintf(Untranslated(\"Invalid non-hex (%s) minimum chain work value specified\"), *value)};\n         }\n-        opts.minimum_chain_work = UintToArith256(uint256S(*value));\n     }\n \n-    if (auto value{args.GetArg(\"-assumevalid\")}) opts.assumed_valid_block = uint256S(*value);\n+    if (auto value{args.GetArg(\"-assumevalid\")}; value && *value != \"0\") {",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "b38a259d1e2749876d4e3a15f218b4f257049320",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "shouldn't we still set the `assumed_valid_block` value when it's `0`, given that `defaultAssumeValid` isn't `0`?",
      "created_at": "2024-08-03T19:14:48Z",
      "updated_at": "2024-08-03T19:19:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1702863593",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702863593"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702863957",
      "pull_request_review_id": 2217100926,
      "id": 1702863957,
      "node_id": "PRRC_kwDOABII585lf6RV",
      "diff_hunk": "@@ -71,9 +71,20 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n  * number of hex digits.*/\n bool IsHex(std::string_view str);\n /**\n-* Return true if the string is a hex number, optionally prefixed with \"0x\"\n-*/\n-bool IsHexNumber(std::string_view str);\n+ * @brief Return a sanitized hex string if input is a valid hex number.\n+ *        \"0x\" prefix is removed, and if result_size is specified, the\n+ *        result is padded with leading zeroes until result_size is\n+ *        reached, or std::nullopt returned if input is longer than\n+ *        result_size.\n+ *\n+ * @param input Hex encoding of a number, optionally prefixed with 0x.\n+ * @param result_size Size of the resulting string, causing zero-padding",
      "path": "src/util/strencodings.h",
      "position": 14,
      "original_position": 14,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "b38a259d1e2749876d4e3a15f218b4f257049320",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think we could document how to disable this param - currently with 0, I recommend considering negative numbers",
      "created_at": "2024-08-03T19:18:30Z",
      "updated_at": "2024-08-03T19:19:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1702863957",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702863957"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 81,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702864451",
      "pull_request_review_id": 2217172418,
      "id": 1702864451,
      "node_id": "PRRC_kwDOABII585lf6ZD",
      "diff_hunk": "@@ -432,29 +432,33 @@ BOOST_AUTO_TEST_CASE(util_IsHex)\n     BOOST_CHECK(!IsHex(\"0x0000\"));\n }\n \n-BOOST_AUTO_TEST_CASE(util_IsHexNumber)\n+BOOST_AUTO_TEST_CASE(util_TrySanitizeHexNumber)\n {\n-    BOOST_CHECK(IsHexNumber(\"0x0\"));\n-    BOOST_CHECK(IsHexNumber(\"0\"));\n-    BOOST_CHECK(IsHexNumber(\"0x10\"));\n-    BOOST_CHECK(IsHexNumber(\"10\"));\n-    BOOST_CHECK(IsHexNumber(\"0xff\"));\n-    BOOST_CHECK(IsHexNumber(\"ff\"));\n-    BOOST_CHECK(IsHexNumber(\"0xFfa\"));\n-    BOOST_CHECK(IsHexNumber(\"Ffa\"));\n-    BOOST_CHECK(IsHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-    BOOST_CHECK(IsHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-\n-    BOOST_CHECK(!IsHexNumber(\"\"));   // empty string not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x\")); // empty string after prefix not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x0 \")); // no spaces at end,\n-    BOOST_CHECK(!IsHexNumber(\" 0x0\")); // or beginning,\n-    BOOST_CHECK(!IsHexNumber(\"0x 0\")); // or middle,\n-    BOOST_CHECK(!IsHexNumber(\" \"));    // etc.\n-    BOOST_CHECK(!IsHexNumber(\"0x0ga\")); // invalid character\n-    BOOST_CHECK(!IsHexNumber(\"x0\"));    // broken prefix\n-    BOOST_CHECK(!IsHexNumber(\"0x0x00\")); // two prefixes not allowed\n-\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"ff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xFfa\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"Ffa\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n+\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"\"));       // empty string not allowed\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x\"));     // empty string after prefix not allowed\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x0 \"));   // no spaces at end,\n+    BOOST_CHECK(!TrySanitizeHexNumber(\" 0x0\"));   // or beginning,\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x 0\"));   // or middle,\n+    BOOST_CHECK(!TrySanitizeHexNumber(\" \"));      // etc.\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x0ga\"));  // invalid character\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"x0\"));     // broken prefix\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x0x00\")); // two prefixes not allowed\n+\n+    BOOST_CHECK_EQUAL(TrySanitizeHexNumber(\"0x1234\", /*target_size=*/0).value(), \"1234\");\n+    BOOST_CHECK_EQUAL(TrySanitizeHexNumber(\"0x1234\", /*target_size=*/4).value(), \"1234\");",
      "path": "src/test/util_tests.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "b38a259d1e2749876d4e3a15f218b4f257049320",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    BOOST_CHECK_EQUAL(TrySanitizeHexNumber(\"0x1234\", /*result_size=*/4).value(), \"1234\");\r\n```",
      "created_at": "2024-08-03T19:22:33Z",
      "updated_at": "2024-08-03T19:22:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1702864451",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1702864451"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 459,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1703942199",
      "pull_request_review_id": 2218701543,
      "id": 1703942199,
      "node_id": "PRRC_kwDOABII585lkBg3",
      "diff_hunk": "@@ -7,26 +7,29 @@\n #include <logging.h>\n #include <random.h>\n #include <uint256.h>\n+#include <util/check.h>\n+#include <util/strencodings.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const auto num{std::getenv(RANDOM_CTX_SEED)}) {\n+            auto sanitized{*Assert(TrySanitizeHexNumber(num, uint256::size() * 2))}; // RANDOM_CTX_SEED must be up to 64 char hex string",
      "path": "src/test/util/random.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "b38a259d1e2749876d4e3a15f218b4f257049320",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I just don't see the use case to accept accidentally truncated input silently. Why not just fa295215f6fa3b85b0387511920f75eeb3e12b58?",
      "created_at": "2024-08-05T11:02:23Z",
      "updated_at": "2024-08-05T11:02:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1703942199",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1703942199"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1704179447",
      "pull_request_review_id": 2219106988,
      "id": 1704179447,
      "node_id": "PRRC_kwDOABII585lk7b3",
      "diff_hunk": "@@ -432,29 +432,33 @@ BOOST_AUTO_TEST_CASE(util_IsHex)\n     BOOST_CHECK(!IsHex(\"0x0000\"));\n }\n \n-BOOST_AUTO_TEST_CASE(util_IsHexNumber)\n+BOOST_AUTO_TEST_CASE(util_TrySanitizeHexNumber)\n {\n-    BOOST_CHECK(IsHexNumber(\"0x0\"));\n-    BOOST_CHECK(IsHexNumber(\"0\"));\n-    BOOST_CHECK(IsHexNumber(\"0x10\"));\n-    BOOST_CHECK(IsHexNumber(\"10\"));\n-    BOOST_CHECK(IsHexNumber(\"0xff\"));\n-    BOOST_CHECK(IsHexNumber(\"ff\"));\n-    BOOST_CHECK(IsHexNumber(\"0xFfa\"));\n-    BOOST_CHECK(IsHexNumber(\"Ffa\"));\n-    BOOST_CHECK(IsHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-    BOOST_CHECK(IsHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-\n-    BOOST_CHECK(!IsHexNumber(\"\"));   // empty string not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x\")); // empty string after prefix not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x0 \")); // no spaces at end,\n-    BOOST_CHECK(!IsHexNumber(\" 0x0\")); // or beginning,\n-    BOOST_CHECK(!IsHexNumber(\"0x 0\")); // or middle,\n-    BOOST_CHECK(!IsHexNumber(\" \"));    // etc.\n-    BOOST_CHECK(!IsHexNumber(\"0x0ga\")); // invalid character\n-    BOOST_CHECK(!IsHexNumber(\"x0\"));    // broken prefix\n-    BOOST_CHECK(!IsHexNumber(\"0x0x00\")); // two prefixes not allowed\n-\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"ff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xFfa\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"Ffa\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n+\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"\"));       // empty string not allowed\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x\"));     // empty string after prefix not allowed\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x0 \"));   // no spaces at end,\n+    BOOST_CHECK(!TrySanitizeHexNumber(\" 0x0\"));   // or beginning,\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x 0\"));   // or middle,\n+    BOOST_CHECK(!TrySanitizeHexNumber(\" \"));      // etc.\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x0ga\"));  // invalid character\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"x0\"));     // broken prefix\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x0x00\")); // two prefixes not allowed\n+\n+    BOOST_CHECK_EQUAL(TrySanitizeHexNumber(\"0x1234\", /*target_size=*/0).value(), \"1234\");\n+    BOOST_CHECK_EQUAL(TrySanitizeHexNumber(\"0x1234\", /*target_size=*/4).value(), \"1234\");",
      "path": "src/test/util_tests.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "b38a259d1e2749876d4e3a15f218b4f257049320",
      "in_reply_to_id": 1702864451,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, leftover from a previous version, updated now!",
      "created_at": "2024-08-05T14:07:04Z",
      "updated_at": "2024-08-06T10:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1704179447",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1704179447"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 459,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1704245347",
      "pull_request_review_id": 2219106988,
      "id": 1704245347,
      "node_id": "PRRC_kwDOABII585llLhj",
      "diff_hunk": "@@ -46,14 +46,19 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, size_t result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    if (input.empty() || (result_size && input.size() > result_size)) return std::nullopt;\n+    for (char c : input) {\n+        if (HexDigit(c) < 0) return std::nullopt;\n     }\n-    // Return false for empty string or \"0x\".\n-    return str.size() > 0;\n+    std::string result{input};\n+    if (input.size() < result_size) {",
      "path": "src/util/strencodings.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "713d92e29f4f882031ede2903664e8e64952629d",
      "in_reply_to_id": 1702840728,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure about this. I don't find it more readable, and it also makes the code less robust to changes in other lines. Going to leave as is for now.",
      "created_at": "2024-08-05T14:52:53Z",
      "updated_at": "2024-08-06T10:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1704245347",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1704245347"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1704246003",
      "pull_request_review_id": 2219106988,
      "id": 1704246003,
      "node_id": "PRRC_kwDOABII585llLrz",
      "diff_hunk": "@@ -71,9 +71,20 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n  * number of hex digits.*/\n bool IsHex(std::string_view str);\n /**\n-* Return true if the string is a hex number, optionally prefixed with \"0x\"\n-*/\n-bool IsHexNumber(std::string_view str);\n+ * @brief Return a sanitized hex string if input is a valid hex number.\n+ *        \"0x\" prefix is removed, and if result_size is specified, the\n+ *        result is padded with leading zeroes until result_size is\n+ *        reached, or std::nullopt returned if input is longer than\n+ *        result_size.\n+ *\n+ * @param input Hex encoding of a number, optionally prefixed with 0x.\n+ * @param result_size Size of the resulting string, causing zero-padding",
      "path": "src/util/strencodings.h",
      "position": 14,
      "original_position": 14,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "b38a259d1e2749876d4e3a15f218b4f257049320",
      "in_reply_to_id": 1702863957,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed to an `int` type which takes a negative value to disable.",
      "created_at": "2024-08-05T14:53:22Z",
      "updated_at": "2024-08-06T10:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1704246003",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1704246003"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 81,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1704246877",
      "pull_request_review_id": 2219106988,
      "id": 1704246877,
      "node_id": "PRRC_kwDOABII585llL5d",
      "diff_hunk": "@@ -71,9 +71,20 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n  * number of hex digits.*/\n bool IsHex(std::string_view str);\n /**\n-* Return true if the string is a hex number, optionally prefixed with \"0x\"\n-*/\n-bool IsHexNumber(std::string_view str);\n+ * @brief Return a sanitized hex string if input is a valid hex number.\n+ *        \"0x\" prefix is removed, and if result_size is specified, the\n+ *        result is padded with leading zeroes until result_size is\n+ *        reached, or std::nullopt returned if input is longer than\n+ *        result_size.\n+ *\n+ * @param input Hex encoding of a number, optionally prefixed with 0x.\n+ * @param result_size Size of the resulting string, causing zero-padding\n+ *                    if input is too short, or a std::nullopt return\n+ *                    value if input is too long. Disabled if <= 0.",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 16,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "713d92e29f4f882031ede2903664e8e64952629d",
      "in_reply_to_id": 1702847776,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sorry, leftover from previous version where it could be. Since `result_size` is now an `int` again, docs updated to say `Disabled if <= -1`",
      "created_at": "2024-08-05T14:53:59Z",
      "updated_at": "2024-08-06T10:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1704246877",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1704246877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1704248989",
      "pull_request_review_id": 2219106988,
      "id": 1704248989,
      "node_id": "PRRC_kwDOABII585llMad",
      "diff_hunk": "@@ -432,29 +432,33 @@ BOOST_AUTO_TEST_CASE(util_IsHex)\n     BOOST_CHECK(!IsHex(\"0x0000\"));\n }\n \n-BOOST_AUTO_TEST_CASE(util_IsHexNumber)\n+BOOST_AUTO_TEST_CASE(util_TrySanitizeHexNumber)\n {\n-    BOOST_CHECK(IsHexNumber(\"0x0\"));\n-    BOOST_CHECK(IsHexNumber(\"0\"));\n-    BOOST_CHECK(IsHexNumber(\"0x10\"));\n-    BOOST_CHECK(IsHexNumber(\"10\"));\n-    BOOST_CHECK(IsHexNumber(\"0xff\"));\n-    BOOST_CHECK(IsHexNumber(\"ff\"));\n-    BOOST_CHECK(IsHexNumber(\"0xFfa\"));\n-    BOOST_CHECK(IsHexNumber(\"Ffa\"));\n-    BOOST_CHECK(IsHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-    BOOST_CHECK(IsHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-\n-    BOOST_CHECK(!IsHexNumber(\"\"));   // empty string not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x\")); // empty string after prefix not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x0 \")); // no spaces at end,\n-    BOOST_CHECK(!IsHexNumber(\" 0x0\")); // or beginning,\n-    BOOST_CHECK(!IsHexNumber(\"0x 0\")); // or middle,\n-    BOOST_CHECK(!IsHexNumber(\" \"));    // etc.\n-    BOOST_CHECK(!IsHexNumber(\"0x0ga\")); // invalid character\n-    BOOST_CHECK(!IsHexNumber(\"x0\"));    // broken prefix\n-    BOOST_CHECK(!IsHexNumber(\"0x0x00\")); // two prefixes not allowed\n-\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"ff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xFfa\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"Ffa\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n+\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"\"));       // empty string not allowed\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x\"));     // empty string after prefix not allowed\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x0 \"));   // no spaces at end,\n+    BOOST_CHECK(!TrySanitizeHexNumber(\" 0x0\"));   // or beginning,\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x 0\"));   // or middle,\n+    BOOST_CHECK(!TrySanitizeHexNumber(\" \"));      // etc.\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x0ga\"));  // invalid character\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"x0\"));     // broken prefix\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x0x00\")); // two prefixes not allowed\n+\n+    BOOST_CHECK_EQUAL(TrySanitizeHexNumber(\"0x1234\", /*target_size=*/0).value(), \"1234\");",
      "path": "src/test/util_tests.cpp",
      "position": null,
      "original_position": 49,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "713d92e29f4f882031ede2903664e8e64952629d",
      "in_reply_to_id": 1702836629,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done (although `result_size=0` will always return `std::nullopt` because empty input strings are not allowed as per the existing `IsHexNumber` behaviour)",
      "created_at": "2024-08-05T14:55:29Z",
      "updated_at": "2024-08-06T10:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1704248989",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1704248989"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 458,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1705281963",
      "pull_request_review_id": 2219106988,
      "id": 1705281963,
      "node_id": "PRRC_kwDOABII585lpImr",
      "diff_hunk": "@@ -32,13 +32,20 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!IsHexNumber(*value)) {\n+        if (auto sanitized_hex{TrySanitizeHexNumber(*value, /*result_size=*/64)}) {\n+            opts.minimum_chain_work = UintToArith256(*uint256::FromHex(*sanitized_hex));\n+        } else {\n             return util::Error{strprintf(Untranslated(\"Invalid non-hex (%s) minimum chain work value specified\"), *value)};\n         }\n-        opts.minimum_chain_work = UintToArith256(uint256S(*value));\n     }\n \n-    if (auto value{args.GetArg(\"-assumevalid\")}) opts.assumed_valid_block = uint256S(*value);\n+    if (auto value{args.GetArg(\"-assumevalid\")}; value && *value != \"0\") {",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "b38a259d1e2749876d4e3a15f218b4f257049320",
      "in_reply_to_id": 1702863593,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ugh, you're right, thanks a lot for catching this. This approach would've silently ignored `-noassumevalid` and `-assumevalid=0` by using the `defaultAssumeValid` value instead. I think it's not great that this bug didn't cause any tests to fail. `feature_assumevalid.py` doesn't catch this because `defaultAssumeValid` on regtest [is null](https://github.com/bitcoin/bitcoin/blob/43740f4971f45cd5499470b6a085b3ecd8b96d28/src/kernel/chainparams.cpp#L452) (and I don't think there's a way around this), and we don't seem to have any unittesting on applying args to options.\r\n\r\nI've added 1c909b2ccfaee902637b28f890db8dbe168ea926 as a first commit (fails on b38a259d1e2749876d4e3a15f218b4f257049320) to add unittesting on `-assumevalid` and `-minimumchainwork`. ",
      "created_at": "2024-08-06T10:13:59Z",
      "updated_at": "2024-08-06T15:51:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1705281963",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1705281963"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1705285352",
      "pull_request_review_id": 2219106988,
      "id": 1705285352,
      "node_id": "PRRC_kwDOABII585lpJbo",
      "diff_hunk": "@@ -46,14 +46,19 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, size_t result_size)",
      "path": "src/util/strencodings.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "713d92e29f4f882031ede2903664e8e64952629d",
      "in_reply_to_id": 1702847680,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The `Number` part indicates that we're dealing with numerical values, where `0x00` means the same thing as `0x0000`, so I think that aligns with how the function behaves?\r\nReturn types are not immediately visible on in the callsite, and I think `Try` indicating that the function accepts malformed input is helpful for the reader, so I'm going to leave this as is.",
      "created_at": "2024-08-06T10:16:53Z",
      "updated_at": "2024-08-06T10:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1705285352",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1705285352"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1705293768",
      "pull_request_review_id": 2219106988,
      "id": 1705293768,
      "node_id": "PRRC_kwDOABII585lpLfI",
      "diff_hunk": "@@ -7,26 +7,29 @@\n #include <logging.h>\n #include <random.h>\n #include <uint256.h>\n+#include <util/check.h>\n+#include <util/strencodings.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const auto num{std::getenv(RANDOM_CTX_SEED)}) {\n+            auto sanitized{*Assert(TrySanitizeHexNumber(num, uint256::size() * 2))}; // RANDOM_CTX_SEED must be up to 64 char hex string",
      "path": "src/test/util/random.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "b38a259d1e2749876d4e3a15f218b4f257049320",
      "in_reply_to_id": 1703942199,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I couldn't see `RANDOM_CTX_SEED` be documented anywhere as having to be a 64 char hex string, so I thought trying to be lenient would be good for backwards compatibility, but I don't have a view on how important that is so happy to go with your simplification. Adopted in latest force push.",
      "created_at": "2024-08-06T10:24:02Z",
      "updated_at": "2024-08-06T10:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1705293768",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1705293768"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1705382053",
      "pull_request_review_id": 2221052712,
      "id": 1705382053,
      "node_id": "PRRC_kwDOABII585lphCl",
      "diff_hunk": "@@ -46,14 +46,19 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, size_t result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    if (input.empty() || (result_size && input.size() > result_size)) return std::nullopt;\n+    for (char c : input) {\n+        if (HexDigit(c) < 0) return std::nullopt;\n     }\n-    // Return false for empty string or \"0x\".\n-    return str.size() > 0;\n+    std::string result{input};\n+    if (input.size() < result_size) {",
      "path": "src/util/strencodings.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "713d92e29f4f882031ede2903664e8e64952629d",
      "in_reply_to_id": 1702840728,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "👍, thanks for considering",
      "created_at": "2024-08-06T11:35:45Z",
      "updated_at": "2024-08-06T11:35:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1705382053",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1705382053"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1705386853",
      "pull_request_review_id": 2221060518,
      "id": 1705386853,
      "node_id": "PRRC_kwDOABII585lpiNl",
      "diff_hunk": "@@ -46,14 +46,19 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, size_t result_size)",
      "path": "src/util/strencodings.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "713d92e29f4f882031ede2903664e8e64952629d",
      "in_reply_to_id": 1702847680,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ok, the number part can make sense, I'm still not sure about the `Try` part - seems like https://en.wikipedia.org/wiki/Hungarian_notation, which (as a Hungarian) I'm very much against :p\r\n\r\n> Return types are not immediately visible on in the callsite\r\n\r\nIt's part of the method's signature, I don't see how repeating it in the method's name helps.\r\nThe parameters also aren't visible on the call site, yet we're not encoding them in the method's name.\r\n\r\nIf you insist, I won't block you on this of course, but want to make sure that my arguments against it are clear.",
      "created_at": "2024-08-06T11:39:55Z",
      "updated_at": "2024-08-06T11:39:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1705386853",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1705386853"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1705542508",
      "pull_request_review_id": 2221314252,
      "id": 1705542508,
      "node_id": "PRRC_kwDOABII585lqINs",
      "diff_hunk": "@@ -27,7 +27,7 @@ FUZZ_TARGET(hex)\n     if (IsHex(random_hex_string)) {\n         assert(ToLower(random_hex_string) == hex_data);\n     }\n-    (void)IsHexNumber(random_hex_string);\n+    (void)TrySanitizeHexNumber(random_hex_string);",
      "path": "src/test/fuzz/hex.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "713d92e29f4f882031ede2903664e8e64952629d",
      "in_reply_to_id": 1702827034,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good idea, updated `fuzz/hex.cpp` to cover `result_size` with an `int16_t`. Not sure what the optimal range of values would be here, but I figured not making it too large (`int`) makes sense given that `result_size` is not user input?",
      "created_at": "2024-08-06T13:28:51Z",
      "updated_at": "2024-08-06T13:28:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1705542508",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1705542508"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706570743",
      "pull_request_review_id": 2223189422,
      "id": 1706570743,
      "node_id": "PRRC_kwDOABII585luDP3",
      "diff_hunk": "@@ -7,26 +7,29 @@\n #include <logging.h>\n #include <random.h>\n #include <uint256.h>\n+#include <util/check.h>\n+#include <util/strencodings.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const auto num{std::getenv(RANDOM_CTX_SEED)}) {\n+            auto sanitized{*Assert(TrySanitizeHexNumber(num, uint256::size() * 2))}; // RANDOM_CTX_SEED must be up to 64 char hex string",
      "path": "src/test/util/random.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "b38a259d1e2749876d4e3a15f218b4f257049320",
      "in_reply_to_id": 1703942199,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I couldn't see `RANDOM_CTX_SEED` be documented anywhere as having to be a 64 char hex string, so I thought trying to be lenient would be good for backwards compatibility, but I don't have a view on how important that is so happy to go with your simplification. Adopted in latest force push.\r\n\r\nThanks.\r\n\r\nFor historic context, it was added in fae43a97ca947cd0802392e9bb86d9d0572c0fba, where it is only printed. Thus, the only source should be to copy-paste from a printed value.\r\n\r\nIf not, and someone were to provide the seed from \"outside\", I think it is reasonable and clearer to require them to provide it in the exact same hex format. Otherwise, it seems fragile.",
      "created_at": "2024-08-07T08:07:01Z",
      "updated_at": "2024-08-07T08:07:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706570743",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706570743"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706637780",
      "pull_request_review_id": 2223466412,
      "id": 1706637780,
      "node_id": "PRRC_kwDOABII585luTnU",
      "diff_hunk": "@@ -769,4 +770,44 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_completion_hash_mismatch, Sna\n     }\n }\n \n+/** Helper function to parse args into args_man and return the result of applying them to opts */\n+util::Result<void> SetOptsFromArgs(ArgsManager& args_man, ChainstateManager::Options& opts,\n+                                   const std::vector<const char*>& args)\n+{\n+    std::vector<const char*> argv = {\"ignore\"};\n+    argv.insert(argv.end(), args.begin(), args.end());\n+\n+    std::string error{};\n+    BOOST_REQUIRE(args_man.ParseParameters(argv.size(), argv.data(), error));\n+    return node::ApplyArgsManOptions(args_man, opts);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_args, BasicTestingSetup)\n+{\n+    kernel::Notifications notifications{};\n+    const ChainstateManager::Options options{\n+        .chainparams = ::Params(),\n+        .datadir = {},\n+        .notifications = notifications};\n+\n+    auto set_opts = [this, options](const std::vector<const char*>& args) {\n+        auto opts{options}; // create a copy to keep the original clean and reusable\n+        BOOST_REQUIRE(SetOptsFromArgs(*this->m_node.args, opts, args));\n+        return opts;\n+    };\n+\n+    // test -assumevalid\n+    BOOST_CHECK(!set_opts({}).assumed_valid_block.has_value());\n+    BOOST_CHECK(set_opts({\"-assumevalid=0\"}).assumed_valid_block.value().IsNull());",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 40,
      "original_position": 40,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "1c909b2ccfaee902637b28f890db8dbe168ea926",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for covering these scenarios!\r\n\r\nI checked to see how this fails for the previous error:\r\n> unknown location:0: fatal error: in \"validation_chainstatemanager_tests/chainstatemanager_args\": std::bad_optional_access: bad_optional_access\r\n\r\ni.e. it doesn't get to the `IsNull` check since it can't call `value()` on a null optional, right?\r\n\r\nI think we can work around that by comparing the dereferenced optional instead:\r\n```suggestion\r\n    BOOST_CHECK_EQUAL(*set_opts({\"-assumevalid=0\"}).assumed_valid_block, uint256::ZERO);\r\n```\r\n\r\nwhich gives this error for the previously invalid setup:\r\n> src/test/validation_chainstatemanager_tests.cpp:801: error: in \"validation_chainstatemanager_tests/chainstatemanager_args\": check *set_opts({\"-assumevalid=0\"}).assumed_valid_block == uint256::ZERO has failed [000000016bcc2e20000000016bcc2e20000000016bcc29a03b66800104140f00 != 0000000000000000000000000000000000000000000000000000000000000000]\r\n\r\nWhich I find a lot more revealing.",
      "created_at": "2024-08-07T08:53:33Z",
      "updated_at": "2024-08-07T09:00:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706637780",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706637780"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 801,
      "original_line": 801,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706639474",
      "pull_request_review_id": 2223466412,
      "id": 1706639474,
      "node_id": "PRRC_kwDOABII585luUBy",
      "diff_hunk": "@@ -432,29 +432,34 @@ BOOST_AUTO_TEST_CASE(util_IsHex)\n     BOOST_CHECK(!IsHex(\"0x0000\"));\n }\n \n-BOOST_AUTO_TEST_CASE(util_IsHexNumber)\n+BOOST_AUTO_TEST_CASE(util_TrySanitizeHexNumber)\n {\n-    BOOST_CHECK(IsHexNumber(\"0x0\"));\n-    BOOST_CHECK(IsHexNumber(\"0\"));\n-    BOOST_CHECK(IsHexNumber(\"0x10\"));\n-    BOOST_CHECK(IsHexNumber(\"10\"));\n-    BOOST_CHECK(IsHexNumber(\"0xff\"));\n-    BOOST_CHECK(IsHexNumber(\"ff\"));\n-    BOOST_CHECK(IsHexNumber(\"0xFfa\"));\n-    BOOST_CHECK(IsHexNumber(\"Ffa\"));\n-    BOOST_CHECK(IsHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-    BOOST_CHECK(IsHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-\n-    BOOST_CHECK(!IsHexNumber(\"\"));   // empty string not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x\")); // empty string after prefix not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x0 \")); // no spaces at end,\n-    BOOST_CHECK(!IsHexNumber(\" 0x0\")); // or beginning,\n-    BOOST_CHECK(!IsHexNumber(\"0x 0\")); // or middle,\n-    BOOST_CHECK(!IsHexNumber(\" \"));    // etc.\n-    BOOST_CHECK(!IsHexNumber(\"0x0ga\")); // invalid character\n-    BOOST_CHECK(!IsHexNumber(\"x0\"));    // broken prefix\n-    BOOST_CHECK(!IsHexNumber(\"0x0x00\")); // two prefixes not allowed\n-\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"ff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xFfa\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"Ffa\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n+\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"\"));       // empty string not allowed\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x\"));     // empty string after prefix not allowed\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x0 \"));   // no spaces at end,\n+    BOOST_CHECK(!TrySanitizeHexNumber(\" 0x0\"));   // or beginning,\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x 0\"));   // or middle,\n+    BOOST_CHECK(!TrySanitizeHexNumber(\" \"));      // etc.\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x0ga\"));  // invalid character\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"x0\"));     // broken prefix\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x0x00\")); // two prefixes not allowed\n+\n+    BOOST_CHECK_EQUAL(TrySanitizeHexNumber(\"0x1234\", /*result_size=*/-1).value(), \"1234\");\n+    BOOST_CHECK_EQUAL(TrySanitizeHexNumber(\"0x1234\", /*result_size=*/4).value(), \"1234\");\n+    BOOST_CHECK_EQUAL(TrySanitizeHexNumber(\"1234\", /*result_size=*/5).value(), \"01234\");\n+    BOOST_CHECK(!TrySanitizeHexNumber(\"0x1234\", /*result_size=*/0));",
      "path": "src/test/util_tests.cpp",
      "position": 52,
      "original_position": 52,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nice",
      "created_at": "2024-08-07T08:54:39Z",
      "updated_at": "2024-08-07T09:00:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706639474",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706639474"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 461,
      "original_line": 461,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706642642",
      "pull_request_review_id": 2223466412,
      "id": 1706642642,
      "node_id": "PRRC_kwDOABII585luUzS",
      "diff_hunk": "@@ -46,14 +46,20 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    if (result_size < 0) result_size = input.size(); // negative result_size disables the size check",
      "path": "src/util/strencodings.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: my first reaction was here - \"I wonder if there's an off-by-one error here\".\r\nIf you think it makes sense, consider this alternative:\r\n```suggestion\r\n    if (result_size < 0) result_size = std::numeric_limits<int>::max(); // negative result_size disables the size check\r\n```\r\n",
      "created_at": "2024-08-07T08:56:44Z",
      "updated_at": "2024-08-07T09:00:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706642642",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706642642"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706647454",
      "pull_request_review_id": 2223466412,
      "id": 1706647454,
      "node_id": "PRRC_kwDOABII585luV-e",
      "diff_hunk": "@@ -46,14 +46,20 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    if (result_size < 0) result_size = input.size(); // negative result_size disables the size check\n+    if (input.empty() || ((int)input.size() > result_size)) return std::nullopt;",
      "path": "src/util/strencodings.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't particularly  like the alternative, but the developer notes state:\r\n```\r\n- Use a named cast or functional cast, not a C-Style cast. When casting\r\n    between integer types, use functional casts such as `int(x)` or `int{x}`\r\n    instead of `(int) x`. When casting between more complex types, use `static_cast`.\r\n ```",
      "created_at": "2024-08-07T08:59:59Z",
      "updated_at": "2024-08-07T09:00:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706647454",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706647454"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706662216",
      "pull_request_review_id": 2223563556,
      "id": 1706662216,
      "node_id": "PRRC_kwDOABII585luZlI",
      "diff_hunk": "@@ -769,4 +770,44 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_completion_hash_mismatch, Sna\n     }\n }\n \n+/** Helper function to parse args into args_man and return the result of applying them to opts */\n+util::Result<void> SetOptsFromArgs(ArgsManager& args_man, ChainstateManager::Options& opts,\n+                                   const std::vector<const char*>& args)\n+{\n+    std::vector<const char*> argv = {\"ignore\"};\n+    argv.insert(argv.end(), args.begin(), args.end());\n+\n+    std::string error{};\n+    BOOST_REQUIRE(args_man.ParseParameters(argv.size(), argv.data(), error));\n+    return node::ApplyArgsManOptions(args_man, opts);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_args, BasicTestingSetup)\n+{\n+    kernel::Notifications notifications{};\n+    const ChainstateManager::Options options{\n+        .chainparams = ::Params(),\n+        .datadir = {},\n+        .notifications = notifications};\n+\n+    auto set_opts = [this, options](const std::vector<const char*>& args) {\n+        auto opts{options}; // create a copy to keep the original clean and reusable\n+        BOOST_REQUIRE(SetOptsFromArgs(*this->m_node.args, opts, args));\n+        return opts;\n+    };\n+\n+    // test -assumevalid\n+    BOOST_CHECK(!set_opts({}).assumed_valid_block.has_value());\n+    BOOST_CHECK(set_opts({\"-assumevalid=0\"}).assumed_valid_block.value().IsNull());",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 40,
      "original_position": 40,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "1c909b2ccfaee902637b28f890db8dbe168ea926",
      "in_reply_to_id": 1706637780,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> > has failed [000000016bcc2e20000000016bcc2e20000000016bcc29a03b66800104140f00 != 0000000000000000000000000000000000000000000000000000000000000000]\r\n> \r\n> Which I find a lot more revealing.\r\n\r\nCan you run this in valgrind? Dereferencing a nullopt is UB (undefined behavior), which must be avoided in production (obviously), but also in tests.\r\n\r\nIf you want to learn which methods expose undefined behavior, I find [https://en.cppreference.com/w/cpp/utility/optional/operator*] a good resource.",
      "created_at": "2024-08-07T09:09:22Z",
      "updated_at": "2024-08-07T09:09:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706662216",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706662216"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 801,
      "original_line": 801,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706674268",
      "pull_request_review_id": 2223616707,
      "id": 1706674268,
      "node_id": "PRRC_kwDOABII585luchc",
      "diff_hunk": "@@ -46,14 +46,20 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    if (result_size < 0) result_size = input.size(); // negative result_size disables the size check",
      "path": "src/util/strencodings.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": 1706642642,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That wouldn't work. `result_size` is used both to ensure the input is not too long, as well as to pad with leading zeroes if it's too short: https://github.com/bitcoin/bitcoin/pull/30569/files#diff-3f688af8f182edecd9c33977b905b3e71dc010574f721fd4e328bdbc7706f574R59",
      "created_at": "2024-08-07T09:18:07Z",
      "updated_at": "2024-08-07T09:19:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706674268",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706674268"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706681205",
      "pull_request_review_id": 2223645357,
      "id": 1706681205,
      "node_id": "PRRC_kwDOABII585lueN1",
      "diff_hunk": "@@ -46,14 +46,20 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    if (result_size < 0) result_size = input.size(); // negative result_size disables the size check\n+    if (input.empty() || ((int)input.size() > result_size)) return std::nullopt;",
      "path": "src/util/strencodings.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": 1706647454,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, will change to `int{x}` in next force push.",
      "created_at": "2024-08-07T09:22:49Z",
      "updated_at": "2024-08-07T09:22:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706681205",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706681205"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706830350",
      "pull_request_review_id": 2224318297,
      "id": 1706830350,
      "node_id": "PRRC_kwDOABII585lvCoO",
      "diff_hunk": "@@ -769,4 +770,44 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_completion_hash_mismatch, Sna\n     }\n }\n \n+/** Helper function to parse args into args_man and return the result of applying them to opts */\n+util::Result<void> SetOptsFromArgs(ArgsManager& args_man, ChainstateManager::Options& opts,\n+                                   const std::vector<const char*>& args)\n+{\n+    std::vector<const char*> argv = {\"ignore\"};\n+    argv.insert(argv.end(), args.begin(), args.end());\n+\n+    std::string error{};\n+    BOOST_REQUIRE(args_man.ParseParameters(argv.size(), argv.data(), error));\n+    return node::ApplyArgsManOptions(args_man, opts);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_args, BasicTestingSetup)\n+{\n+    kernel::Notifications notifications{};\n+    const ChainstateManager::Options options{\n+        .chainparams = ::Params(),\n+        .datadir = {},\n+        .notifications = notifications};\n+\n+    auto set_opts = [this, options](const std::vector<const char*>& args) {\n+        auto opts{options}; // create a copy to keep the original clean and reusable\n+        BOOST_REQUIRE(SetOptsFromArgs(*this->m_node.args, opts, args));\n+        return opts;\n+    };\n+\n+    // test -assumevalid\n+    BOOST_CHECK(!set_opts({}).assumed_valid_block.has_value());\n+    BOOST_CHECK(set_opts({\"-assumevalid=0\"}).assumed_valid_block.value().IsNull());",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 40,
      "original_position": 40,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "1c909b2ccfaee902637b28f890db8dbe168ea926",
      "in_reply_to_id": 1706637780,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Can you run this in valgrind?\r\n\r\nThanks for the context @maflcko! Valgrind currently isn't really [compatible with ARM-based Macs](https://github.com/LouisBrunner/valgrind-macos/issues/56).\r\n\r\n> Dereferencing a nullopt is UB \r\n\r\nAnd we can't use `BOOST_CHECK_EQUAL(set_opts({\"-assumevalid=0\"}).assumed_valid_block, std::make_optional(uint256::ZERO))` since there's no standard way to display optionals, right?\r\n\r\nOk, in that case just consider the test fix validated, it failed before the fix, passes now.",
      "created_at": "2024-08-07T11:19:58Z",
      "updated_at": "2024-08-07T11:20:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706830350",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706830350"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 801,
      "original_line": 801,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706832389",
      "pull_request_review_id": 2224327805,
      "id": 1706832389,
      "node_id": "PRRC_kwDOABII585lvDIF",
      "diff_hunk": "@@ -46,14 +46,20 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    if (result_size < 0) result_size = input.size(); // negative result_size disables the size check",
      "path": "src/util/strencodings.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": 1706642642,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "K, in that case, the test cases check the boundaries correctly already, thanks for considering.",
      "created_at": "2024-08-07T11:21:42Z",
      "updated_at": "2024-08-07T12:20:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706832389",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706832389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706853629",
      "pull_request_review_id": 2224429134,
      "id": 1706853629,
      "node_id": "PRRC_kwDOABII585lvIT9",
      "diff_hunk": "@@ -769,4 +770,44 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_completion_hash_mismatch, Sna\n     }\n }\n \n+/** Helper function to parse args into args_man and return the result of applying them to opts */\n+util::Result<void> SetOptsFromArgs(ArgsManager& args_man, ChainstateManager::Options& opts,\n+                                   const std::vector<const char*>& args)\n+{\n+    std::vector<const char*> argv = {\"ignore\"};\n+    argv.insert(argv.end(), args.begin(), args.end());\n+\n+    std::string error{};\n+    BOOST_REQUIRE(args_man.ParseParameters(argv.size(), argv.data(), error));\n+    return node::ApplyArgsManOptions(args_man, opts);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_args, BasicTestingSetup)\n+{\n+    kernel::Notifications notifications{};\n+    const ChainstateManager::Options options{\n+        .chainparams = ::Params(),\n+        .datadir = {},\n+        .notifications = notifications};\n+\n+    auto set_opts = [this, options](const std::vector<const char*>& args) {\n+        auto opts{options}; // create a copy to keep the original clean and reusable\n+        BOOST_REQUIRE(SetOptsFromArgs(*this->m_node.args, opts, args));\n+        return opts;\n+    };\n+\n+    // test -assumevalid\n+    BOOST_CHECK(!set_opts({}).assumed_valid_block.has_value());\n+    BOOST_CHECK(set_opts({\"-assumevalid=0\"}).assumed_valid_block.value().IsNull());",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 40,
      "original_position": 40,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "1c909b2ccfaee902637b28f890db8dbe168ea926",
      "in_reply_to_id": 1706637780,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> > Can you run this in valgrind?\r\n> \r\n> Thanks for the context @maflcko! Valgrind currently isn't really [compatible with ARM-based Macs](https://github.com/LouisBrunner/valgrind-macos/issues/56).\r\n\r\nAn alternative on macos may be Asan (or possibly Ubsan), but they require re-compiling the binary.",
      "created_at": "2024-08-07T11:39:21Z",
      "updated_at": "2024-08-07T11:39:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706853629",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706853629"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 801,
      "original_line": 801,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706867937",
      "pull_request_review_id": 2224497224,
      "id": 1706867937,
      "node_id": "PRRC_kwDOABII585lvLzh",
      "diff_hunk": "@@ -19,15 +20,17 @@\n \n FUZZ_TARGET(hex)\n {\n-    const std::string random_hex_string(buffer.begin(), buffer.end());\n+    FuzzedDataProvider fdp{buffer.data(), buffer.size()};\n+    const auto result_size{fdp.ConsumeIntegral<int16_t>()};\n+    const std::string random_hex_string{fdp.ConsumeRemainingBytesAsString()};\n     const std::vector<unsigned char> data = ParseHex(random_hex_string);\n     const std::vector<std::byte> bytes{ParseHex<std::byte>(random_hex_string)};\n     assert(AsBytes(Span{data}) == Span{bytes});\n     const std::string hex_data = HexStr(data);\n     if (IsHex(random_hex_string)) {\n         assert(ToLower(random_hex_string) == hex_data);\n     }\n-    (void)IsHexNumber(random_hex_string);\n+    (void)TrySanitizeHexNumber(random_hex_string, result_size);",
      "path": "src/test/fuzz/hex.cpp",
      "position": 24,
      "original_position": 24,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do I understand it correctly that the point of this kind of testing (i.e. just calling the method with random values without validating the result) is to make sure we don't have memory problems, don't throw unexpected exceptions, etc?\r\n\r\nSince we seem to have many hex related methods, would it make sense to compare their outputs, to make sure we at least have internal consistency?\r\n```suggestion\r\n    auto sanitized_hex = TrySanitizeHexNumber(random_hex_string, result_size);\r\n    if (sanitized_hex) {\r\n        assert(IsHex(*sanitized_hex));\r\n        assert(result_size < 0 || sanitized_hex->length() == static_cast<size_t>(result_size));\r\n    }\r\n```",
      "created_at": "2024-08-07T11:51:26Z",
      "updated_at": "2024-08-07T12:18:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706867937",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706867937"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 33,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706875949",
      "pull_request_review_id": 2224497224,
      "id": 1706875949,
      "node_id": "PRRC_kwDOABII585lvNwt",
      "diff_hunk": "@@ -432,29 +432,34 @@ BOOST_AUTO_TEST_CASE(util_IsHex)\n     BOOST_CHECK(!IsHex(\"0x0000\"));\n }\n \n-BOOST_AUTO_TEST_CASE(util_IsHexNumber)\n+BOOST_AUTO_TEST_CASE(util_TrySanitizeHexNumber)\n {\n-    BOOST_CHECK(IsHexNumber(\"0x0\"));\n-    BOOST_CHECK(IsHexNumber(\"0\"));\n-    BOOST_CHECK(IsHexNumber(\"0x10\"));\n-    BOOST_CHECK(IsHexNumber(\"10\"));\n-    BOOST_CHECK(IsHexNumber(\"0xff\"));\n-    BOOST_CHECK(IsHexNumber(\"ff\"));\n-    BOOST_CHECK(IsHexNumber(\"0xFfa\"));\n-    BOOST_CHECK(IsHexNumber(\"Ffa\"));\n-    BOOST_CHECK(IsHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-    BOOST_CHECK(IsHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-\n-    BOOST_CHECK(!IsHexNumber(\"\"));   // empty string not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x\")); // empty string after prefix not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x0 \")); // no spaces at end,\n-    BOOST_CHECK(!IsHexNumber(\" 0x0\")); // or beginning,\n-    BOOST_CHECK(!IsHexNumber(\"0x 0\")); // or middle,\n-    BOOST_CHECK(!IsHexNumber(\" \"));    // etc.\n-    BOOST_CHECK(!IsHexNumber(\"0x0ga\")); // invalid character\n-    BOOST_CHECK(!IsHexNumber(\"x0\"));    // broken prefix\n-    BOOST_CHECK(!IsHexNumber(\"0x0x00\")); // two prefixes not allowed\n-\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"ff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xFfa\"));",
      "path": "src/test/util_tests.cpp",
      "position": 34,
      "original_position": 34,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I might have mentioned this before, but what's the reason for empbracing mixed-case hexadecimal values?",
      "created_at": "2024-08-07T11:58:06Z",
      "updated_at": "2024-08-07T12:18:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706875949",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706875949"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 443,
      "original_line": 443,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706877603",
      "pull_request_review_id": 2224497224,
      "id": 1706877603,
      "node_id": "PRRC_kwDOABII585lvOKj",
      "diff_hunk": "@@ -432,29 +432,34 @@ BOOST_AUTO_TEST_CASE(util_IsHex)\n     BOOST_CHECK(!IsHex(\"0x0000\"));\n }\n \n-BOOST_AUTO_TEST_CASE(util_IsHexNumber)\n+BOOST_AUTO_TEST_CASE(util_TrySanitizeHexNumber)\n {\n-    BOOST_CHECK(IsHexNumber(\"0x0\"));\n-    BOOST_CHECK(IsHexNumber(\"0\"));\n-    BOOST_CHECK(IsHexNumber(\"0x10\"));\n-    BOOST_CHECK(IsHexNumber(\"10\"));\n-    BOOST_CHECK(IsHexNumber(\"0xff\"));\n-    BOOST_CHECK(IsHexNumber(\"ff\"));\n-    BOOST_CHECK(IsHexNumber(\"0xFfa\"));\n-    BOOST_CHECK(IsHexNumber(\"Ffa\"));\n-    BOOST_CHECK(IsHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-    BOOST_CHECK(IsHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-\n-    BOOST_CHECK(!IsHexNumber(\"\"));   // empty string not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x\")); // empty string after prefix not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x0 \")); // no spaces at end,\n-    BOOST_CHECK(!IsHexNumber(\" 0x0\")); // or beginning,\n-    BOOST_CHECK(!IsHexNumber(\"0x 0\")); // or middle,\n-    BOOST_CHECK(!IsHexNumber(\" \"));    // etc.\n-    BOOST_CHECK(!IsHexNumber(\"0x0ga\")); // invalid character\n-    BOOST_CHECK(!IsHexNumber(\"x0\"));    // broken prefix\n-    BOOST_CHECK(!IsHexNumber(\"0x0x00\")); // two prefixes not allowed\n-\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"ff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xFfa\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"Ffa\"));",
      "path": "src/test/util_tests.cpp",
      "position": 35,
      "original_position": 35,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "is it deliberate that inputs don't always contain an even number of digits?",
      "created_at": "2024-08-07T11:59:33Z",
      "updated_at": "2024-08-07T12:18:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706877603",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706877603"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 444,
      "original_line": 444,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706878513",
      "pull_request_review_id": 2224497224,
      "id": 1706878513,
      "node_id": "PRRC_kwDOABII585lvOYx",
      "diff_hunk": "@@ -46,14 +46,20 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    if (result_size < 0) result_size = input.size(); // negative result_size disables the size check\n+    if (input.empty() || ((int)input.size() > result_size)) return std::nullopt;\n+    for (char c : input) {\n+        if (HexDigit(c) < 0) return std::nullopt;\n     }",
      "path": "src/util/strencodings.cpp",
      "position": 23,
      "original_position": 15,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "could we use `IsHex` here instead, i.e. merge it with previous line:\r\n```C++\r\n    if (input.empty() || ((int)input.size() > result_size) || !IsHex(input)) return std::nullopt;\r\n```\r\n\r\nthough this contains an extra evennes requirement which we may not want here.",
      "created_at": "2024-08-07T12:00:21Z",
      "updated_at": "2024-08-07T12:18:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706878513",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706878513"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": 55,
      "original_start_line": 54,
      "start_side": "RIGHT",
      "line": 57,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706884207",
      "pull_request_review_id": 2224497224,
      "id": 1706884207,
      "node_id": "PRRC_kwDOABII585lvPxv",
      "diff_hunk": "@@ -46,14 +46,20 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    if (result_size < 0) result_size = input.size(); // negative result_size disables the size check\n+    if (input.empty() || ((int)input.size() > result_size)) return std::nullopt;",
      "path": "src/util/strencodings.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": 1706647454,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That might not work, but extracting might:\r\n```C++\r\n    auto final_size = (result_size < 0) ? input.size() : static_cast<size_t>(result_size);\r\n```",
      "created_at": "2024-08-07T12:05:17Z",
      "updated_at": "2024-08-07T12:18:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706884207",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706884207"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706891172",
      "pull_request_review_id": 2224497224,
      "id": 1706891172,
      "node_id": "PRRC_kwDOABII585lvRek",
      "diff_hunk": "@@ -32,10 +32,11 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!TrySanitizeHexNumber(*value)) {\n+        if (auto sanitized_hex{TrySanitizeHexNumber(*value, /*result_size=*/64)}) {",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "00fba2a7d6a9997044e544415962de81ab5ef7ed",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in the next commit we're using `uint256::size() * 2` instead of the hard-coded 64 - consider unifying, if you agree that it documents the behavior slightly better",
      "created_at": "2024-08-07T12:11:05Z",
      "updated_at": "2024-08-07T12:18:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706891172",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706891172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706897088",
      "pull_request_review_id": 2224497224,
      "id": 1706897088,
      "node_id": "PRRC_kwDOABII585lvS7A",
      "diff_hunk": "@@ -39,7 +39,14 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n         }\n     }\n \n-    if (auto value{args.GetArg(\"-assumevalid\")}) opts.assumed_valid_block = uint256S(*value);\n+    if (auto value{args.GetArg(\"-assumevalid\")}) {\n+        if (*value == \"0\") value.emplace(uint256::size() * 2, '0'); // handle -noassumevalid",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "686e6bcf379e9590e19e347c61835b0cd6f821cb",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: if you think it's more readable, here's an alternative which avoids reparsing and duplicating `uint256::size() * 2` (but assigns twice, so you may not like it):\r\n```C++\r\n    if (auto value{args.GetArg(\"-assumevalid\")}) {\r\n        if (*value == \"0\") { // handle -noassumevalid\r\n            opts.assumed_valid_block = uint256{};\r\n        } else if (auto block_hash{uint256::FromHex(*value)}) {\r\n            opts.assumed_valid_block = *block_hash;\r\n        } else {\r\n            return util::Error{strprintf(Untranslated(\"Invalid assumevalid block hash specified (%s), must be %d character hex (or 0 to disable)\"), *value, uint256::size() * 2)};\r\n        }\r\n    }\r\n```",
      "created_at": "2024-08-07T12:15:51Z",
      "updated_at": "2024-08-07T12:18:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706897088",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706897088"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706902315",
      "pull_request_review_id": 2224658209,
      "id": 1706902315,
      "node_id": "PRRC_kwDOABII585lvUMr",
      "diff_hunk": "@@ -769,4 +770,44 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_completion_hash_mismatch, Sna\n     }\n }\n \n+/** Helper function to parse args into args_man and return the result of applying them to opts */\n+util::Result<void> SetOptsFromArgs(ArgsManager& args_man, ChainstateManager::Options& opts,\n+                                   const std::vector<const char*>& args)\n+{\n+    std::vector<const char*> argv = {\"ignore\"};\n+    argv.insert(argv.end(), args.begin(), args.end());\n+\n+    std::string error{};\n+    BOOST_REQUIRE(args_man.ParseParameters(argv.size(), argv.data(), error));\n+    return node::ApplyArgsManOptions(args_man, opts);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_args, BasicTestingSetup)\n+{\n+    kernel::Notifications notifications{};\n+    const ChainstateManager::Options options{\n+        .chainparams = ::Params(),\n+        .datadir = {},\n+        .notifications = notifications};\n+\n+    auto set_opts = [this, options](const std::vector<const char*>& args) {\n+        auto opts{options}; // create a copy to keep the original clean and reusable\n+        BOOST_REQUIRE(SetOptsFromArgs(*this->m_node.args, opts, args));\n+        return opts;\n+    };\n+\n+    // test -assumevalid\n+    BOOST_CHECK(!set_opts({}).assumed_valid_block.has_value());\n+    BOOST_CHECK(set_opts({\"-assumevalid=0\"}).assumed_valid_block.value().IsNull());",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 40,
      "original_position": 40,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "1c909b2ccfaee902637b28f890db8dbe168ea926",
      "in_reply_to_id": 1706637780,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've noted it and will give it a try next time, thank you",
      "created_at": "2024-08-07T12:19:56Z",
      "updated_at": "2024-08-07T12:19:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706902315",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706902315"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 801,
      "original_line": 801,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706931724",
      "pull_request_review_id": 2224783283,
      "id": 1706931724,
      "node_id": "PRRC_kwDOABII585lvbYM",
      "diff_hunk": "@@ -46,14 +46,20 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    if (result_size < 0) result_size = input.size(); // negative result_size disables the size check\n+    if (input.empty() || ((int)input.size() > result_size)) return std::nullopt;\n+    for (char c : input) {\n+        if (HexDigit(c) < 0) return std::nullopt;\n     }",
      "path": "src/util/strencodings.cpp",
      "position": 23,
      "original_position": 15,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": 1706878513,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> though this contains an extra evennes requirement which we may not want here.\r\n\r\nExactly",
      "created_at": "2024-08-07T12:41:28Z",
      "updated_at": "2024-08-07T14:54:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706931724",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706931724"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": 55,
      "original_start_line": 54,
      "start_side": "RIGHT",
      "line": 57,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706935424",
      "pull_request_review_id": 2224783283,
      "id": 1706935424,
      "node_id": "PRRC_kwDOABII585lvcSA",
      "diff_hunk": "@@ -432,29 +432,34 @@ BOOST_AUTO_TEST_CASE(util_IsHex)\n     BOOST_CHECK(!IsHex(\"0x0000\"));\n }\n \n-BOOST_AUTO_TEST_CASE(util_IsHexNumber)\n+BOOST_AUTO_TEST_CASE(util_TrySanitizeHexNumber)\n {\n-    BOOST_CHECK(IsHexNumber(\"0x0\"));\n-    BOOST_CHECK(IsHexNumber(\"0\"));\n-    BOOST_CHECK(IsHexNumber(\"0x10\"));\n-    BOOST_CHECK(IsHexNumber(\"10\"));\n-    BOOST_CHECK(IsHexNumber(\"0xff\"));\n-    BOOST_CHECK(IsHexNumber(\"ff\"));\n-    BOOST_CHECK(IsHexNumber(\"0xFfa\"));\n-    BOOST_CHECK(IsHexNumber(\"Ffa\"));\n-    BOOST_CHECK(IsHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-    BOOST_CHECK(IsHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-\n-    BOOST_CHECK(!IsHexNumber(\"\"));   // empty string not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x\")); // empty string after prefix not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x0 \")); // no spaces at end,\n-    BOOST_CHECK(!IsHexNumber(\" 0x0\")); // or beginning,\n-    BOOST_CHECK(!IsHexNumber(\"0x 0\")); // or middle,\n-    BOOST_CHECK(!IsHexNumber(\" \"));    // etc.\n-    BOOST_CHECK(!IsHexNumber(\"0x0ga\")); // invalid character\n-    BOOST_CHECK(!IsHexNumber(\"x0\"));    // broken prefix\n-    BOOST_CHECK(!IsHexNumber(\"0x0x00\")); // two prefixes not allowed\n-\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"ff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xFfa\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"Ffa\"));",
      "path": "src/test/util_tests.cpp",
      "position": 35,
      "original_position": 35,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": 1706877603,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, since we're dealing with numbers specifically.",
      "created_at": "2024-08-07T12:44:00Z",
      "updated_at": "2024-08-07T14:54:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706935424",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706935424"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 444,
      "original_line": 444,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706936276",
      "pull_request_review_id": 2224783283,
      "id": 1706936276,
      "node_id": "PRRC_kwDOABII585lvcfU",
      "diff_hunk": "@@ -432,29 +432,34 @@ BOOST_AUTO_TEST_CASE(util_IsHex)\n     BOOST_CHECK(!IsHex(\"0x0000\"));\n }\n \n-BOOST_AUTO_TEST_CASE(util_IsHexNumber)\n+BOOST_AUTO_TEST_CASE(util_TrySanitizeHexNumber)\n {\n-    BOOST_CHECK(IsHexNumber(\"0x0\"));\n-    BOOST_CHECK(IsHexNumber(\"0\"));\n-    BOOST_CHECK(IsHexNumber(\"0x10\"));\n-    BOOST_CHECK(IsHexNumber(\"10\"));\n-    BOOST_CHECK(IsHexNumber(\"0xff\"));\n-    BOOST_CHECK(IsHexNumber(\"ff\"));\n-    BOOST_CHECK(IsHexNumber(\"0xFfa\"));\n-    BOOST_CHECK(IsHexNumber(\"Ffa\"));\n-    BOOST_CHECK(IsHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-    BOOST_CHECK(IsHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n-\n-    BOOST_CHECK(!IsHexNumber(\"\"));   // empty string not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x\")); // empty string after prefix not allowed\n-    BOOST_CHECK(!IsHexNumber(\"0x0 \")); // no spaces at end,\n-    BOOST_CHECK(!IsHexNumber(\" 0x0\")); // or beginning,\n-    BOOST_CHECK(!IsHexNumber(\"0x 0\")); // or middle,\n-    BOOST_CHECK(!IsHexNumber(\" \"));    // etc.\n-    BOOST_CHECK(!IsHexNumber(\"0x0ga\")); // invalid character\n-    BOOST_CHECK(!IsHexNumber(\"x0\"));    // broken prefix\n-    BOOST_CHECK(!IsHexNumber(\"0x0x00\")); // two prefixes not allowed\n-\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0x10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"10\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"ff\"));\n+    BOOST_CHECK(TrySanitizeHexNumber(\"0xFfa\"));",
      "path": "src/test/util_tests.cpp",
      "position": 34,
      "original_position": 34,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": 1706875949,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't have a strong view on it, but this commit just reuses the existing `IsHexNumber` tests so I'd rather not change that here.",
      "created_at": "2024-08-07T12:44:35Z",
      "updated_at": "2024-08-07T14:54:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706936276",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706936276"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 443,
      "original_line": 443,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706946286",
      "pull_request_review_id": 2224783283,
      "id": 1706946286,
      "node_id": "PRRC_kwDOABII585lve7u",
      "diff_hunk": "@@ -39,7 +39,14 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n         }\n     }\n \n-    if (auto value{args.GetArg(\"-assumevalid\")}) opts.assumed_valid_block = uint256S(*value);\n+    if (auto value{args.GetArg(\"-assumevalid\")}) {\n+        if (*value == \"0\") value.emplace(uint256::size() * 2, '0'); // handle -noassumevalid",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "686e6bcf379e9590e19e347c61835b0cd6f821cb",
      "in_reply_to_id": 1706897088,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah I like your approach better, taken, thanks.",
      "created_at": "2024-08-07T12:51:06Z",
      "updated_at": "2024-08-07T14:54:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706946286",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706946286"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706949124",
      "pull_request_review_id": 2224783283,
      "id": 1706949124,
      "node_id": "PRRC_kwDOABII585lvfoE",
      "diff_hunk": "@@ -32,10 +32,11 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!TrySanitizeHexNumber(*value)) {\n+        if (auto sanitized_hex{TrySanitizeHexNumber(*value, /*result_size=*/64)}) {",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "00fba2a7d6a9997044e544415962de81ab5ef7ed",
      "in_reply_to_id": 1706891172,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Makes sense, taken, thanks.",
      "created_at": "2024-08-07T12:53:02Z",
      "updated_at": "2024-08-07T14:54:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706949124",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706949124"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706949955",
      "pull_request_review_id": 2224783283,
      "id": 1706949955,
      "node_id": "PRRC_kwDOABII585lvf1D",
      "diff_hunk": "@@ -19,15 +20,17 @@\n \n FUZZ_TARGET(hex)\n {\n-    const std::string random_hex_string(buffer.begin(), buffer.end());\n+    FuzzedDataProvider fdp{buffer.data(), buffer.size()};\n+    const auto result_size{fdp.ConsumeIntegral<int16_t>()};\n+    const std::string random_hex_string{fdp.ConsumeRemainingBytesAsString()};\n     const std::vector<unsigned char> data = ParseHex(random_hex_string);\n     const std::vector<std::byte> bytes{ParseHex<std::byte>(random_hex_string)};\n     assert(AsBytes(Span{data}) == Span{bytes});\n     const std::string hex_data = HexStr(data);\n     if (IsHex(random_hex_string)) {\n         assert(ToLower(random_hex_string) == hex_data);\n     }\n-    (void)IsHexNumber(random_hex_string);\n+    (void)TrySanitizeHexNumber(random_hex_string, result_size);",
      "path": "src/test/fuzz/hex.cpp",
      "position": 24,
      "original_position": 24,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": 1706867937,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> is to make sure we don't have memory problems, don't throw unexpected exceptions, etc?\r\n\r\nThat's my understanding too.\r\n\r\n> would it make sense to compare their outputs, to make sure we at least have internal consistency?\r\n\r\nSounds reasonable, but I think I'll leave that for another PR.",
      "created_at": "2024-08-07T12:53:37Z",
      "updated_at": "2024-08-07T14:54:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1706949955",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706949955"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 33,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707005179",
      "pull_request_review_id": 2224783283,
      "id": 1707005179,
      "node_id": "PRRC_kwDOABII585lvtT7",
      "diff_hunk": "@@ -46,14 +46,20 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    if (result_size < 0) result_size = input.size(); // negative result_size disables the size check\n+    if (input.empty() || ((int)input.size() > result_size)) return std::nullopt;",
      "path": "src/util/strencodings.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "f6cda1725190b3a8cf188d43c0fb4043862cbc4e",
      "in_reply_to_id": 1706647454,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah that'll work, ~taken, thanks.",
      "created_at": "2024-08-07T13:30:38Z",
      "updated_at": "2024-08-07T14:54:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1707005179",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707005179"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707706392",
      "pull_request_review_id": 2225982967,
      "id": 1707706392,
      "node_id": "PRRC_kwDOABII585lyYgY",
      "diff_hunk": "@@ -769,4 +770,44 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_completion_hash_mismatch, Sna\n     }\n }\n \n+/** Helper function to parse args into args_man and return the result of applying them to opts */\n+util::Result<void> SetOptsFromArgs(ArgsManager& args_man, ChainstateManager::Options& opts,\n+                                   const std::vector<const char*>& args)\n+{\n+    std::vector<const char*> argv = {\"ignore\"};\n+    argv.insert(argv.end(), args.begin(), args.end());\n+\n+    std::string error{};\n+    BOOST_REQUIRE(args_man.ParseParameters(argv.size(), argv.data(), error));\n+    return node::ApplyArgsManOptions(args_man, opts);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_args, BasicTestingSetup)\n+{\n+    kernel::Notifications notifications{};\n+    const ChainstateManager::Options options{\n+        .chainparams = ::Params(),\n+        .datadir = {},\n+        .notifications = notifications};\n+\n+    auto set_opts = [this, options](const std::vector<const char*>& args) {\n+        auto opts{options}; // create a copy to keep the original clean and reusable\n+        BOOST_REQUIRE(SetOptsFromArgs(*this->m_node.args, opts, args));\n+        return opts;\n+    };\n+\n+    // test -assumevalid\n+    BOOST_CHECK(!set_opts({}).assumed_valid_block.has_value());\n+    BOOST_CHECK(set_opts({\"-assumevalid=0\"}).assumed_valid_block.value().IsNull());",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 40,
      "original_position": 40,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "1c909b2ccfaee902637b28f890db8dbe168ea926",
      "in_reply_to_id": 1706637780,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> And we can't use `BOOST_CHECK_EQUAL(set_opts({\"-assumevalid=0\"}).assumed_valid_block, std::make_optional(uint256::ZERO))` since there's no standard way to display optionals, right?\r\n\r\nWould this fit your definition of displaying optionals?\r\n\r\nhttps://github.com/bitcoin/bitcoin/pull/16545/files#diff-d4a2fb26adedc27f16bd3778424fa94c473342a695b228220a1810119028be5bR48-R64",
      "created_at": "2024-08-07T19:06:23Z",
      "updated_at": "2024-08-07T21:22:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1707706392",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707706392"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 801,
      "original_line": 801,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707728879",
      "pull_request_review_id": 2225982967,
      "id": 1707728879,
      "node_id": "PRRC_kwDOABII585lyd_v",
      "diff_hunk": "@@ -46,14 +46,19 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    const auto final_size{(result_size < 0) ? input.size() : static_cast<size_t>(result_size)};\n+    if (input.empty() || (input.size() > final_size)) return std::nullopt;\n+    for (char c : input) {\n+        if (HexDigit(c) < 0) return std::nullopt;\n     }\n-    // Return false for empty string or \"0x\".\n-    return str.size() > 0;\n+    std::string result{input};\n+    if (auto padding{final_size - input.size()}; padding > 0) {\n+        result = std::string(padding, '0') + result;\n+    }",
      "path": "src/util/strencodings.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "a227cb511ec948b37ddbc9ee65de586109ebc1da",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: If padding were on a warm code path I would advocate for reserving the final size of the `result` string first, avoiding the temporary '0'-repeated string and appending `input` after the zeroes.",
      "created_at": "2024-08-07T19:19:32Z",
      "updated_at": "2024-08-07T21:42:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1707728879",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707728879"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 57,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707734248",
      "pull_request_review_id": 2225982967,
      "id": 1707734248,
      "node_id": "PRRC_kwDOABII585lyfTo",
      "diff_hunk": "@@ -71,9 +71,20 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n  * number of hex digits.*/\n bool IsHex(std::string_view str);\n /**\n-* Return true if the string is a hex number, optionally prefixed with \"0x\"\n-*/\n-bool IsHexNumber(std::string_view str);\n+ * @brief Return a sanitized hex string if input is a valid hex number.\n+ *        \"0x\" prefix is removed, and if result_size is specified, the\n+ *        result is padded with leading zeroes until result_size is\n+ *        reached, or std::nullopt returned if input is longer than\n+ *        result_size.\n+ *\n+ * @param input Hex encoding of a number, optionally prefixed with 0x.\n+ * @param result_size Size of the resulting string, causing zero-padding\n+ *                    if input is too short, or a std::nullopt return\n+ *                    value if input is too long. Disabled if <= -1.\n+ *                    (default: -1)\n+ * @return std::optional<std::string>",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 18,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "a227cb511ec948b37ddbc9ee65de586109ebc1da",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why document the type here when it appears in the code below?\r\nSeems noisy if we were to do that for return types everywhere.",
      "created_at": "2024-08-07T19:22:50Z",
      "updated_at": "2024-08-07T21:22:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1707734248",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707734248"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707739633",
      "pull_request_review_id": 2225982967,
      "id": 1707739633,
      "node_id": "PRRC_kwDOABII585lygnx",
      "diff_hunk": "@@ -32,7 +32,7 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!IsHexNumber(*value)) {\n+        if (!TrySanitizeHexNumber(*value)) {",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "a227cb511ec948b37ddbc9ee65de586109ebc1da",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Would personally merge the next commit (e6f81b9d81359a7ffeff6d1830188f00df0e8db0) into this one (a227cb511ec948b37ddbc9ee65de586109ebc1da) since you're already touching this line and it looks weird as an atomic commit to just throw away the sanitized value.",
      "created_at": "2024-08-07T19:26:08Z",
      "updated_at": "2024-08-07T21:22:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1707739633",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707739633"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707760135",
      "pull_request_review_id": 2225982967,
      "id": 1707760135,
      "node_id": "PRRC_kwDOABII585lyloH",
      "diff_hunk": "@@ -7,26 +7,27 @@\n #include <logging.h>\n #include <random.h>\n #include <uint256.h>\n+#include <util/check.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};",
      "path": "src/test/util/random.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "d045fc7ac1729cf29140c43518f20375f2aaa1cc",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`constexpr` implies `inline` for functions, doesn't it also for variables? Never used `inline` on variables myself, but seems it is useful in **.h** files to avoid ODR-issues. This is a **.cpp** file though.",
      "created_at": "2024-08-07T19:38:03Z",
      "updated_at": "2024-08-07T21:22:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1707760135",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707760135"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707787408",
      "pull_request_review_id": 2225982967,
      "id": 1707787408,
      "node_id": "PRRC_kwDOABII585lysSQ",
      "diff_hunk": "@@ -9,24 +9,26 @@\n #include <uint256.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const auto num{std::getenv(RANDOM_CTX_SEED)}) {\n+            uint256 rv;\n+            rv.SetHexDeprecated(num);\n+            return rv;",
      "path": "src/test/util/random.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": 1700718302,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "To me asserts are for enforcing logical consistency of the code, NOT for handling invalid values of environment variables.\r\n\r\nA slight convention seems to be using `abort()` in these circumstances.\r\n```C++\r\n            if (auto num_parsed{uint256::FromHex(num)}) {\r\n                return *num_parsed;\r\n            } else {\r\n                std::cerr << RANDOM_CTX_SEED << \" must be a \" << uint256::size() * 2 << \" char hex string without '0x'-prefix, was set to: '\" << num << \"'.\" << std::endl;\r\n                std::abort();\r\n            }\r\n```\r\n(I also tried `BOOST_TEST_FAIL` but ran into linker errors for the **test_util** library so would rather avoid adding a dependency).\r\n\r\nGives output:\r\n```bash\r\n$ RANDOM_CTX_SEED=123 src/test/test_bitcoin\r\nRunning 621 test cases...\r\nRANDOM_CTX_SEED must be a 64 char hex string without '0x'-prefix, was set to: '123'.\r\nunknown location(0): fatal error: in \"addrman_tests/addrman_simple\": signal: SIGABRT (application abort requested)\r\ntest/addrman_tests.cpp(64): last checkpoint: \"addrman_simple\" fixture ctor\r\ntest_bitcoin: common/args.cpp:576: void ArgsManager::AddArg(const std::string&, const std::string&, unsigned int, const OptionsCategory&): Assertion `ret.second' failed.\r\nunknown location(0): fatal error: in \"addrman_tests/addrman_ports\": signal: SIGABRT (application abort requested)\r\ntest/addrman_tests.cpp(108): last checkpoint: \"addrman_ports\" fixture ctor\r\n...\r\n```",
      "created_at": "2024-08-07T19:54:38Z",
      "updated_at": "2024-08-07T21:22:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1707787408",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707787408"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707914379",
      "pull_request_review_id": 2225982967,
      "id": 1707914379,
      "node_id": "PRRC_kwDOABII585lzLSL",
      "diff_hunk": "@@ -769,4 +770,44 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_completion_hash_mismatch, Sna\n     }\n }\n \n+/** Helper function to parse args into args_man and return the result of applying them to opts */\n+util::Result<void> SetOptsFromArgs(ArgsManager& args_man, ChainstateManager::Options& opts,\n+                                   const std::vector<const char*>& args)\n+{\n+    std::vector<const char*> argv = {\"ignore\"};\n+    argv.insert(argv.end(), args.begin(), args.end());\n+\n+    std::string error{};\n+    BOOST_REQUIRE(args_man.ParseParameters(argv.size(), argv.data(), error));",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 20,
      "original_position": 20,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "d045fc7ac1729cf29140c43518f20375f2aaa1cc",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit:\r\n```suggestion\r\n    BOOST_REQUIRE(args_man.ParseParameters(argv.size(), argv.data(), error));\r\n    BOOST_REQUIRE(error.empty());\r\n```",
      "created_at": "2024-08-07T21:08:55Z",
      "updated_at": "2024-08-07T21:22:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1707914379",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707914379"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 781,
      "original_line": 781,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707936724",
      "pull_request_review_id": 2226223316,
      "id": 1707936724,
      "node_id": "PRRC_kwDOABII585lzQvU",
      "diff_hunk": "@@ -769,4 +770,44 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_completion_hash_mismatch, Sna\n     }\n }\n \n+/** Helper function to parse args into args_man and return the result of applying them to opts */\n+util::Result<void> SetOptsFromArgs(ArgsManager& args_man, ChainstateManager::Options& opts,\n+                                   const std::vector<const char*>& args)\n+{\n+    std::vector<const char*> argv = {\"ignore\"};\n+    argv.insert(argv.end(), args.begin(), args.end());\n+\n+    std::string error{};\n+    BOOST_REQUIRE(args_man.ParseParameters(argv.size(), argv.data(), error));\n+    return node::ApplyArgsManOptions(args_man, opts);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_args, BasicTestingSetup)\n+{\n+    kernel::Notifications notifications{};\n+    const ChainstateManager::Options options{\n+        .chainparams = ::Params(),\n+        .datadir = {},\n+        .notifications = notifications};\n+\n+    auto set_opts = [this, options](const std::vector<const char*>& args) {\n+        auto opts{options}; // create a copy to keep the original clean and reusable\n+        BOOST_REQUIRE(SetOptsFromArgs(*this->m_node.args, opts, args));\n+        return opts;\n+    };\n+\n+    // test -assumevalid\n+    BOOST_CHECK(!set_opts({}).assumed_valid_block.has_value());\n+    BOOST_CHECK(set_opts({\"-assumevalid=0\"}).assumed_valid_block.value().IsNull());",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 40,
      "original_position": 40,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "1c909b2ccfaee902637b28f890db8dbe168ea926",
      "in_reply_to_id": 1706637780,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, I think that would produce better error messages on failure.",
      "created_at": "2024-08-07T21:24:28Z",
      "updated_at": "2024-08-07T21:24:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1707936724",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707936724"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 801,
      "original_line": 801,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707941944",
      "pull_request_review_id": 2226228213,
      "id": 1707941944,
      "node_id": "PRRC_kwDOABII585lzSA4",
      "diff_hunk": "@@ -9,24 +9,26 @@\n #include <uint256.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const auto num{std::getenv(RANDOM_CTX_SEED)}) {\n+            uint256 rv;\n+            rv.SetHexDeprecated(num);\n+            return rv;",
      "path": "src/test/util/random.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": 1700718302,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> To me asserts are for enforcing logical consistency of the code, NOT for handling invalid values of environment variables.\r\n\r\nCorrect. This rule must be applied to real production code. However, in the tests, personally I like to use it for brevity. No objection to using something else.",
      "created_at": "2024-08-07T21:28:08Z",
      "updated_at": "2024-08-07T21:28:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1707941944",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707941944"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707958805",
      "pull_request_review_id": 2226246193,
      "id": 1707958805,
      "node_id": "PRRC_kwDOABII585lzWIV",
      "diff_hunk": "@@ -7,26 +7,27 @@\n #include <logging.h>\n #include <random.h>\n #include <uint256.h>\n+#include <util/check.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const char* num{std::getenv(RANDOM_CTX_SEED)}) {\n+            return *Assert(uint256::FromHex(num)); // RANDOM_CTX_SEED must be a 64 char hex string\n+        }\n         // Otherwise use a (truly) random value.\n         return GetRandHash();\n     }();",
      "path": "src/test/util/random.cpp",
      "position": 37,
      "original_position": 32,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "d045fc7ac1729cf29140c43518f20375f2aaa1cc",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If you re-touch this commit, it could make sense to remove the `__func__` printing in the log call below. It doesn't add any value and may be duplicate. I understand it is unrelated, but when touching a test-only function, may as well fix all trivial issues in one go. (See the commit I referred to in https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1703942199, which also has steps to reproduce and test in the description)",
      "created_at": "2024-08-07T21:39:35Z",
      "updated_at": "2024-08-07T21:40:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1707958805",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1707958805"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 39,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709153215",
      "pull_request_review_id": 2227455502,
      "id": 1709153215,
      "node_id": "PRRC_kwDOABII585l35u_",
      "diff_hunk": "@@ -7,26 +7,27 @@\n #include <logging.h>\n #include <random.h>\n #include <uint256.h>\n+#include <util/check.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const char* num{std::getenv(RANDOM_CTX_SEED)}) {\n+            return *Assert(uint256::FromHex(num)); // RANDOM_CTX_SEED must be a 64 char hex string\n+        }\n         // Otherwise use a (truly) random value.\n         return GetRandHash();\n     }();",
      "path": "src/test/util/random.cpp",
      "position": 37,
      "original_position": 32,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "d045fc7ac1729cf29140c43518f20375f2aaa1cc",
      "in_reply_to_id": 1707958805,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, I've taken your commit (hadn't seen the commit message earlier, very nice) but just added the docstring (and smaller `num` scope) back in.",
      "created_at": "2024-08-08T10:18:58Z",
      "updated_at": "2024-08-08T11:00:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709153215",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709153215"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 39,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709155583",
      "pull_request_review_id": 2227455502,
      "id": 1709155583,
      "node_id": "PRRC_kwDOABII585l36T_",
      "diff_hunk": "@@ -7,26 +7,27 @@\n #include <logging.h>\n #include <random.h>\n #include <uint256.h>\n+#include <util/check.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};",
      "path": "src/test/util/random.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "d045fc7ac1729cf29140c43518f20375f2aaa1cc",
      "in_reply_to_id": 1707760135,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think you're right that `inline` was not necessary here. No longer applies as I've adopted [maflcko's suggestion](https://github.com/bitcoin/bitcoin/pull/30569/files#r1707958805) which moves the var back inside the `SeedRandomForTest` scope.",
      "created_at": "2024-08-08T10:20:13Z",
      "updated_at": "2024-08-08T11:00:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709155583",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709155583"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709162569",
      "pull_request_review_id": 2227455502,
      "id": 1709162569,
      "node_id": "PRRC_kwDOABII585l38BJ",
      "diff_hunk": "@@ -769,4 +770,44 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_completion_hash_mismatch, Sna\n     }\n }\n \n+/** Helper function to parse args into args_man and return the result of applying them to opts */\n+util::Result<void> SetOptsFromArgs(ArgsManager& args_man, ChainstateManager::Options& opts,\n+                                   const std::vector<const char*>& args)\n+{\n+    std::vector<const char*> argv = {\"ignore\"};\n+    argv.insert(argv.end(), args.begin(), args.end());\n+\n+    std::string error{};\n+    BOOST_REQUIRE(args_man.ParseParameters(argv.size(), argv.data(), error));",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 20,
      "original_position": 20,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "d045fc7ac1729cf29140c43518f20375f2aaa1cc",
      "in_reply_to_id": 1707914379,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This feels like a distraction to me tbh, we're not unit testing `ParseParameters` here. I think it's safe to rely on `ParseParameters` returning `false` when there's an error.",
      "created_at": "2024-08-08T10:24:08Z",
      "updated_at": "2024-08-08T11:00:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709162569",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709162569"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 781,
      "original_line": 781,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709194170",
      "pull_request_review_id": 2227455502,
      "id": 1709194170,
      "node_id": "PRRC_kwDOABII585l4Du6",
      "diff_hunk": "@@ -46,14 +46,19 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    const auto final_size{(result_size < 0) ? input.size() : static_cast<size_t>(result_size)};\n+    if (input.empty() || (input.size() > final_size)) return std::nullopt;\n+    for (char c : input) {\n+        if (HexDigit(c) < 0) return std::nullopt;\n     }\n-    // Return false for empty string or \"0x\".\n-    return str.size() > 0;\n+    std::string result{input};\n+    if (auto padding{final_size - input.size()}; padding > 0) {\n+        result = std::string(padding, '0') + result;\n+    }",
      "path": "src/util/strencodings.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "a227cb511ec948b37ddbc9ee65de586109ebc1da",
      "in_reply_to_id": 1707728879,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Don't think this is worth spending too much time on but given that the only non-test call is quite likely to require padding, I've updated it to:\r\n\r\n<details>\r\n\r\n```diff\r\ndiff --git a/src/util/strencodings.cpp b/src/util/strencodings.cpp\r\nindex 4e0317cd0e..be946af269 100644\r\n--- a/src/util/strencodings.cpp\r\n+++ b/src/util/strencodings.cpp\r\n@@ -8,6 +8,7 @@\r\n #include <crypto/hex_base.h>\r\n #include <span.h>\r\n \r\n+#include <algorithm>\r\n #include <array>\r\n #include <cassert>\r\n #include <cstring>\r\n@@ -54,10 +55,8 @@ std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int resu\r\n     for (char c : input) {\r\n         if (HexDigit(c) < 0) return std::nullopt;\r\n     }\r\n-    std::string result{input};\r\n-    if (auto padding{final_size - input.size()}; padding > 0) {\r\n-        result = std::string(padding, '0') + result;\r\n-    }\r\n+    std::string result(final_size, '0');\r\n+    std::copy(input.begin(), input.end(), result.begin() + (final_size - input.size()));\r\n     return result;\r\n }\r\n \r\n```\r\n</details>",
      "created_at": "2024-08-08T10:41:51Z",
      "updated_at": "2024-08-08T11:00:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709194170",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709194170"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 57,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709204523",
      "pull_request_review_id": 2227455502,
      "id": 1709204523,
      "node_id": "PRRC_kwDOABII585l4GQr",
      "diff_hunk": "@@ -71,9 +71,20 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n  * number of hex digits.*/\n bool IsHex(std::string_view str);\n /**\n-* Return true if the string is a hex number, optionally prefixed with \"0x\"\n-*/\n-bool IsHexNumber(std::string_view str);\n+ * @brief Return a sanitized hex string if input is a valid hex number.\n+ *        \"0x\" prefix is removed, and if result_size is specified, the\n+ *        result is padded with leading zeroes until result_size is\n+ *        reached, or std::nullopt returned if input is longer than\n+ *        result_size.\n+ *\n+ * @param input Hex encoding of a number, optionally prefixed with 0x.\n+ * @param result_size Size of the resulting string, causing zero-padding\n+ *                    if input is too short, or a std::nullopt return\n+ *                    value if input is too long. Disabled if <= -1.\n+ *                    (default: -1)\n+ * @return std::optional<std::string>",
      "path": "src/util/strencodings.h",
      "position": null,
      "original_position": 18,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "a227cb511ec948b37ddbc9ee65de586109ebc1da",
      "in_reply_to_id": 1707734248,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agreed, autogenerated and didn't think to remove it. Done.",
      "created_at": "2024-08-08T10:48:13Z",
      "updated_at": "2024-08-08T11:00:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709204523",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709204523"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709206741",
      "pull_request_review_id": 2227455502,
      "id": 1709206741,
      "node_id": "PRRC_kwDOABII585l4GzV",
      "diff_hunk": "@@ -769,4 +770,44 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_snapshot_completion_hash_mismatch, Sna\n     }\n }\n \n+/** Helper function to parse args into args_man and return the result of applying them to opts */\n+util::Result<void> SetOptsFromArgs(ArgsManager& args_man, ChainstateManager::Options& opts,\n+                                   const std::vector<const char*>& args)\n+{\n+    std::vector<const char*> argv = {\"ignore\"};\n+    argv.insert(argv.end(), args.begin(), args.end());\n+\n+    std::string error{};\n+    BOOST_REQUIRE(args_man.ParseParameters(argv.size(), argv.data(), error));\n+    return node::ApplyArgsManOptions(args_man, opts);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_args, BasicTestingSetup)\n+{\n+    kernel::Notifications notifications{};\n+    const ChainstateManager::Options options{\n+        .chainparams = ::Params(),\n+        .datadir = {},\n+        .notifications = notifications};\n+\n+    auto set_opts = [this, options](const std::vector<const char*>& args) {\n+        auto opts{options}; // create a copy to keep the original clean and reusable\n+        BOOST_REQUIRE(SetOptsFromArgs(*this->m_node.args, opts, args));\n+        return opts;\n+    };\n+\n+    // test -assumevalid\n+    BOOST_CHECK(!set_opts({}).assumed_valid_block.has_value());\n+    BOOST_CHECK(set_opts({\"-assumevalid=0\"}).assumed_valid_block.value().IsNull());",
      "path": "src/test/validation_chainstatemanager_tests.cpp",
      "position": 40,
      "original_position": 40,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "1c909b2ccfaee902637b28f890db8dbe168ea926",
      "in_reply_to_id": 1706637780,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would be nice to have std::optional support in BOOST_CHECK_EQUAL but this PR has already had quite a bit of churn so I'm going to limit the scope and leave as is given that it's not super relevant.",
      "created_at": "2024-08-08T10:49:31Z",
      "updated_at": "2024-08-08T11:00:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709206741",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709206741"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 801,
      "original_line": 801,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709207046",
      "pull_request_review_id": 2227455502,
      "id": 1709207046,
      "node_id": "PRRC_kwDOABII585l4G4G",
      "diff_hunk": "@@ -32,7 +32,7 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!IsHexNumber(*value)) {\n+        if (!TrySanitizeHexNumber(*value)) {",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "a227cb511ec948b37ddbc9ee65de586109ebc1da",
      "in_reply_to_id": 1707739633,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I disagree, a227cb511ec948b37ddbc9ee65de586109ebc1da is a refactor commit so I prefer keeping the behaviour-changing commits such as e6f81b9d81359a7ffeff6d1830188f00df0e8db0 smaller and separate.",
      "created_at": "2024-08-08T10:49:43Z",
      "updated_at": "2024-08-08T11:00:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709207046",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709207046"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709211452",
      "pull_request_review_id": 2227455502,
      "id": 1709211452,
      "node_id": "PRRC_kwDOABII585l4H88",
      "diff_hunk": "@@ -9,24 +9,26 @@\n #include <uint256.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const auto num{std::getenv(RANDOM_CTX_SEED)}) {\n+            uint256 rv;\n+            rv.SetHexDeprecated(num);\n+            return rv;",
      "path": "src/test/util/random.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": 1700718302,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> However, in the tests, personally I like to use it for brevity.\r\n\r\nI agree. The tests fail gracefully, and the error message is helpful, including the location of the assertion which documents that we're expecting a 64 char hex string. Going to leave as is.\r\n\r\n```\r\nRunning 1 test case...\r\ntest/util/random.cpp:29 operator(): Assertion `uint256::FromHex(num)' failed.\r\nunknown location:0: fatal error: in \"timeoffsets_tests/timeoffsets_warning\": signal: SIGABRT (application abort requested)\r\ntest/timeoffsets_tests.cpp:62: last checkpoint: \"timeoffsets_warning\" fixture ctor\r\n\r\n*** 1 failure is detected in the test module \"Bitcoin Core Test Suite\"\r\n```",
      "created_at": "2024-08-08T10:52:20Z",
      "updated_at": "2024-08-08T11:00:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709211452",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709211452"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709346477",
      "pull_request_review_id": 2227676819,
      "id": 1709346477,
      "node_id": "PRRC_kwDOABII585l4o6t",
      "diff_hunk": "@@ -9,24 +9,26 @@\n #include <uint256.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const auto num{std::getenv(RANDOM_CTX_SEED)}) {\n+            uint256 rv;\n+            rv.SetHexDeprecated(num);\n+            return rv;",
      "path": "src/test/util/random.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": 1700718302,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The inclination to use `Assert` for any fatal error is understandable, but as I said in my book they are for catching logic errors - not for validating user environment. My non-Bitcoin experience tells me that policies around what should be asserts require upkeep, so I took the time to provide an alternate version.\r\n\r\nWas reading https://bitcoincore.academy/bin/onboarding-to-bitcoin-core.html today and came across\r\n> We take extra care during the encryption phase to either complete atomically or fail. This includes database writes where we don’t want to write half and crash, for example. *Therefore we will throw an assertion if the write fails.*\r\n\r\nNot sure if the actual code really uses assertions to stop the process if the database reports write failure. Maybe Bitcoin Core has a looser policy than I'm used to, and at least @maflcko is okay with using it in tests.\r\n\r\nFrom a purely functional angle, the `std::cerr` output provides more immediate and actionable information than the assert.\r\n``test/util/random.cpp:29 operator(): Assertion `uint256::FromHex(num)' failed.``\r\nvs\r\n``RANDOM_CTX_SEED must be a 64 char hex string without '0x'-prefix, was set to: '123'.``\r\n\r\nI'm happy you incorporated some of my other suggestions but I pointed out this as my major gripe with the PR.\r\n\r\nStaying true to my principles and giving this an Approach A-C-K generates cognitive dissonance. But maybe I could be bribed by promises of likely support for a future PR from me cleaning up incorrect `Assert` usage in tests in general.",
      "created_at": "2024-08-08T12:08:59Z",
      "updated_at": "2024-08-08T12:09:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709346477",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709346477"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709362894",
      "pull_request_review_id": 2227696150,
      "id": 1709362894,
      "node_id": "PRRC_kwDOABII585l4s7O",
      "diff_hunk": "@@ -46,14 +47,17 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    const auto final_size{(result_size < 0) ? input.size() : static_cast<size_t>(result_size)};\n+    if (input.empty() || (input.size() > final_size)) return std::nullopt;\n+    for (char c : input) {\n+        if (HexDigit(c) < 0) return std::nullopt;\n     }\n-    // Return false for empty string or \"0x\".\n-    return str.size() > 0;\n+    std::string result(final_size, '0');\n+    std::copy(input.begin(), input.end(), result.begin() + (final_size - input.size()));\n+    return result;\n }",
      "path": "src/util/strencodings.cpp",
      "position": 29,
      "original_position": 29,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "ee63e211e33a142cdda93343281b5d3625275428",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Given that:\r\n* this is only used in a single place in prod (which accept `std::string_view` as well and has an `std::string` input)\r\n* we're always copying the result before returning\r\n* the overwhelming majority of inputs will probably have the correct size already, i.e. don't need change.\r\n* the performance of the method seems to be important\r\n\r\nCould we either return an `std::optional<std::string_view>` instead or take an `std::string& input` to be able to return it?\r\n\r\ni.e.\r\n```suggestion\r\nstd::optional<std::string> TrySanitizeHexNumber(std::string input, int result_size)\r\n{\r\n    input = util::RemovePrefixView(input, \"0x\");\r\n    const auto final_size{(result_size < 0) ? input.size() : static_cast<size_t>(result_size)};\r\n    if (input.empty() || (input.size() > final_size)) [[unlikely]] return std::nullopt;\r\n    for (char c : input) {\r\n        if (HexDigit(c) < 0) [[unlikely]] return std::nullopt;\r\n    }\r\n    if (input.size() == final_size) [[likely]] return input;\r\n\r\n    std::string result(final_size, '0');\r\n    std::copy(input.begin(), input.end(), result.begin() + (final_size - input.size()));\r\n    return result;\r\n}\r\n```",
      "created_at": "2024-08-08T12:18:33Z",
      "updated_at": "2024-08-08T12:20:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709362894",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709362894"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": 50,
      "original_start_line": 50,
      "start_side": "RIGHT",
      "line": 61,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709378173",
      "pull_request_review_id": 2227714760,
      "id": 1709378173,
      "node_id": "PRRC_kwDOABII585l4wp9",
      "diff_hunk": "@@ -9,24 +9,26 @@\n #include <uint256.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const auto num{std::getenv(RANDOM_CTX_SEED)}) {\n+            uint256 rv;\n+            rv.SetHexDeprecated(num);\n+            return rv;",
      "path": "src/test/util/random.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": 1700718302,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\r\n> > _Therefore we will throw an assertion if the write fails._\r\n> \r\n> Not sure if the actual code really uses assertions to stop the process if the database reports write failure. Maybe Bitcoin Core has a looser policy than I'm used to, and at least @maflcko is okay with using it in tests.\r\n\r\nI haven't checked the code, but \"throw assertion\" could mean \"throw assertion error\", which seems fine to use in this context the quote was taken from.\r\n\r\nNot to be confused with other context, where aborting the program on (some) hardware corruption is actually intentional, and I think also fine. When your hardware runs into a corrupt state, aborting seems preferable, when otherwise execution can't continue meaningfully anyway. When it happens, the user will usually have to wipe their state or replace their hardware anyway. It is also not external user-input that is passed to the assert, in this case (at least it can be assumed to).\r\n\r\n\r\n\r\n> But maybe I could be bribed by promises of likely support for a future PR from me cleaning up incorrect `Assert` usage in tests in general.\r\n\r\nHeh, I am generally happy to review any test-related pull requests.\r\n",
      "created_at": "2024-08-08T12:26:24Z",
      "updated_at": "2024-08-08T12:26:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709378173",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709378173"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709416606",
      "pull_request_review_id": 2227761837,
      "id": 1709416606,
      "node_id": "PRRC_kwDOABII585l46Ce",
      "diff_hunk": "@@ -46,14 +47,17 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    const auto final_size{(result_size < 0) ? input.size() : static_cast<size_t>(result_size)};\n+    if (input.empty() || (input.size() > final_size)) return std::nullopt;\n+    for (char c : input) {\n+        if (HexDigit(c) < 0) return std::nullopt;\n     }\n-    // Return false for empty string or \"0x\".\n-    return str.size() > 0;\n+    std::string result(final_size, '0');\n+    std::copy(input.begin(), input.end(), result.begin() + (final_size - input.size()));\n+    return result;\n }",
      "path": "src/util/strencodings.cpp",
      "position": 29,
      "original_position": 29,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "ee63e211e33a142cdda93343281b5d3625275428",
      "in_reply_to_id": 1709362894,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree taking `input` as `std::string` works better with the return type.\r\n\r\nInstead of introducing a 2nd string at the end, one could simply:\r\n```C++\r\n    input.insert(0, final_size - input.size(), '0');\r\n    return input;\r\n```",
      "created_at": "2024-08-08T12:45:19Z",
      "updated_at": "2024-08-08T12:45:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709416606",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709416606"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": 50,
      "original_start_line": 50,
      "start_side": "RIGHT",
      "line": 61,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709439226",
      "pull_request_review_id": 2227791118,
      "id": 1709439226,
      "node_id": "PRRC_kwDOABII585l4_j6",
      "diff_hunk": "@@ -9,24 +9,26 @@\n #include <uint256.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const auto num{std::getenv(RANDOM_CTX_SEED)}) {\n+            uint256 rv;\n+            rv.SetHexDeprecated(num);\n+            return rv;",
      "path": "src/test/util/random.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": 1700718302,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Using assertions to prevent the process from continuing in an unsupported state is certainly better than nothing at all.\r\n\r\nOnce the risk of unsupported state due to hardware failure or environment variable misconfiguration becomes known, one should implement non-assert error handling code, as the unsupported state is now expected in some circumstances.\r\n\r\nI concede that in this case the environment variable is usually supposed to be set by Python functional tests, so there is a weak case to be made that it is a logic error. But if a problematic seed value is found and incorrectly copied like in my \"123\" example above, skipping over the Python layer, it no longer is a code-level logic error.",
      "created_at": "2024-08-08T12:57:00Z",
      "updated_at": "2024-08-08T12:57:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709439226",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709439226"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709471024",
      "pull_request_review_id": 2227833623,
      "id": 1709471024,
      "node_id": "PRRC_kwDOABII585l5HUw",
      "diff_hunk": "@@ -9,24 +9,26 @@\n #include <uint256.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const auto num{std::getenv(RANDOM_CTX_SEED)}) {\n+            uint256 rv;\n+            rv.SetHexDeprecated(num);\n+            return rv;",
      "path": "src/test/util/random.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": 1700718302,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> in this case the environment variable is usually supposed to be set by Python functional tests, so there is a weak case to be made that it is a logic error.\r\n\r\nGoing back to this case, I don't think `RANDOM_CTX_SEED` is set by python at all. It should only be set by a dev (or user), or not at all.\r\n\r\nAt least when I locally call `git grep RANDOM_CTX_SEED`, I don't see it.\r\n\r\n",
      "created_at": "2024-08-08T13:12:21Z",
      "updated_at": "2024-08-08T13:12:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709471024",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709471024"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709484770",
      "pull_request_review_id": 2227855746,
      "id": 1709484770,
      "node_id": "PRRC_kwDOABII585l5Kri",
      "diff_hunk": "@@ -9,24 +9,26 @@\n #include <uint256.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const auto num{std::getenv(RANDOM_CTX_SEED)}) {\n+            uint256 rv;\n+            rv.SetHexDeprecated(num);\n+            return rv;",
      "path": "src/test/util/random.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": 1700718302,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for calling out my assumption that `test_runner.py --randomseed=X` could trickle down into unit tests.\r\n\r\nMakes my case for it not being a logic error slightly stronger.",
      "created_at": "2024-08-08T13:19:09Z",
      "updated_at": "2024-08-08T13:19:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709484770",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709484770"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709502254",
      "pull_request_review_id": 2227879671,
      "id": 1709502254,
      "node_id": "PRRC_kwDOABII585l5O8u",
      "diff_hunk": "@@ -46,14 +47,17 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    const auto final_size{(result_size < 0) ? input.size() : static_cast<size_t>(result_size)};\n+    if (input.empty() || (input.size() > final_size)) return std::nullopt;\n+    for (char c : input) {\n+        if (HexDigit(c) < 0) return std::nullopt;\n     }\n-    // Return false for empty string or \"0x\".\n-    return str.size() > 0;\n+    std::string result(final_size, '0');\n+    std::copy(input.begin(), input.end(), result.begin() + (final_size - input.size()));\n+    return result;\n }",
      "path": "src/util/strencodings.cpp",
      "position": 29,
      "original_position": 29,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "ee63e211e33a142cdda93343281b5d3625275428",
      "in_reply_to_id": 1709362894,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ">    input.insert(0, final_size - input.size(), '0');\r\n    return input;\r\n\r\nmy functional programming past screams at the though of mutating parameters and also returning them\r\n<insert meme with PTSD Chihuahua>",
      "created_at": "2024-08-08T13:26:56Z",
      "updated_at": "2024-08-08T13:26:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709502254",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709502254"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": 50,
      "original_start_line": 50,
      "start_side": "RIGHT",
      "line": 61,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709508509",
      "pull_request_review_id": 2227887917,
      "id": 1709508509,
      "node_id": "PRRC_kwDOABII585l5Qed",
      "diff_hunk": "@@ -46,14 +47,17 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    const auto final_size{(result_size < 0) ? input.size() : static_cast<size_t>(result_size)};\n+    if (input.empty() || (input.size() > final_size)) return std::nullopt;\n+    for (char c : input) {\n+        if (HexDigit(c) < 0) return std::nullopt;\n     }\n-    // Return false for empty string or \"0x\".\n-    return str.size() > 0;\n+    std::string result(final_size, '0');\n+    std::copy(input.begin(), input.end(), result.begin() + (final_size - input.size()));\n+    return result;\n }",
      "path": "src/util/strencodings.cpp",
      "position": 29,
      "original_position": 29,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "ee63e211e33a142cdda93343281b5d3625275428",
      "in_reply_to_id": 1709362894,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, I had a bit of an itch as I was writing `return input`, but you made your bed when you started taking `std::string` by non-const value. :)",
      "created_at": "2024-08-08T13:30:06Z",
      "updated_at": "2024-08-08T13:30:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709508509",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709508509"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": 50,
      "original_start_line": 50,
      "start_side": "RIGHT",
      "line": 61,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709526856",
      "pull_request_review_id": 2227913016,
      "id": 1709526856,
      "node_id": "PRRC_kwDOABII585l5U9I",
      "diff_hunk": "@@ -46,14 +47,17 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    const auto final_size{(result_size < 0) ? input.size() : static_cast<size_t>(result_size)};\n+    if (input.empty() || (input.size() > final_size)) return std::nullopt;\n+    for (char c : input) {\n+        if (HexDigit(c) < 0) return std::nullopt;\n     }\n-    // Return false for empty string or \"0x\".\n-    return str.size() > 0;\n+    std::string result(final_size, '0');\n+    std::copy(input.begin(), input.end(), result.begin() + (final_size - input.size()));\n+    return result;\n }",
      "path": "src/util/strencodings.cpp",
      "position": 29,
      "original_position": 29,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "ee63e211e33a142cdda93343281b5d3625275428",
      "in_reply_to_id": 1709362894,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> the performance of the method seems to be important\r\n\r\nHow so? There is one callsite, which can be called at most once, to parse one optional debug-only option.\r\n\r\n> Could we either return an std::optional<std::string_view>\r\n\r\nHow would that work? `std::string_view` is a non-owning view.\r\n\r\n> we're always copying the result before returning\r\n\r\nIn 802374b4355bd1dec7a88bba6287c55f935699fe, we're always allocating exactly once (assuming RVO). In your example, we'd be allocating at least once, and twice if we need padding. That doesn't look like an improvement to me.\r\n\r\n> the overwhelming majority of inputs will probably have the correct size already, i.e. don't need change.\r\n\r\nGiven that it relies on user input, that seems hard to substantiate. In the functional tests, for example, we're using quite a bit of non-64 char hex input, which is reasonable given that we're doing all this work to accept number input.",
      "created_at": "2024-08-08T13:39:05Z",
      "updated_at": "2024-08-08T13:46:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709526856",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709526856"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": 50,
      "original_start_line": 50,
      "start_side": "RIGHT",
      "line": 61,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709538299",
      "pull_request_review_id": 2227929027,
      "id": 1709538299,
      "node_id": "PRRC_kwDOABII585l5Xv7",
      "diff_hunk": "@@ -46,14 +47,17 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    const auto final_size{(result_size < 0) ? input.size() : static_cast<size_t>(result_size)};\n+    if (input.empty() || (input.size() > final_size)) return std::nullopt;\n+    for (char c : input) {\n+        if (HexDigit(c) < 0) return std::nullopt;\n     }\n-    // Return false for empty string or \"0x\".\n-    return str.size() > 0;\n+    std::string result(final_size, '0');\n+    std::copy(input.begin(), input.end(), result.begin() + (final_size - input.size()));\n+    return result;\n }",
      "path": "src/util/strencodings.cpp",
      "position": 29,
      "original_position": 29,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "ee63e211e33a142cdda93343281b5d3625275428",
      "in_reply_to_id": 1709362894,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(Edit: this was regarding the suggestion in https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709362894).\r\n\r\n```C++\r\ninput = util::RemovePrefixView(input, \"0x\");\r\n```\r\nThis line gives me the heebie-jeebies if input is `std::string`. It might be okay as we are assigning a shorter string, but worst case, the assignment operator could free it's prior heap buffer and allocate a shorter buffer, before attempting to copy from the string_view which now might reference the deallocated buffer. Using `RemovePrefix()` should alleviate the problem.",
      "created_at": "2024-08-08T13:43:47Z",
      "updated_at": "2024-08-08T19:39:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709538299",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709538299"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": 50,
      "original_start_line": 50,
      "start_side": "RIGHT",
      "line": 61,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709568559",
      "pull_request_review_id": 2227969312,
      "id": 1709568559,
      "node_id": "PRRC_kwDOABII585l5fIv",
      "diff_hunk": "@@ -9,24 +9,26 @@\n #include <uint256.h>\n \n #include <cstdlib>\n-#include <string>\n \n FastRandomContext g_insecure_rand_ctx;\n \n+inline constexpr const char* RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n+\n extern void MakeRandDeterministicDANGEROUS(const uint256& seed) noexcept;\n \n void SeedRandomForTest(SeedRand seedtype)\n {\n-    static const std::string RANDOM_CTX_SEED{\"RANDOM_CTX_SEED\"};\n-\n     // Do this once, on the first call, regardless of seedtype, because once\n     // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is\n     // no longer truly random. It should be enough to get the seed once for the\n     // process.\n     static const uint256 ctx_seed = []() {\n         // If RANDOM_CTX_SEED is set, use that as seed.\n-        const char* num = std::getenv(RANDOM_CTX_SEED.c_str());\n-        if (num) return uint256S(num);\n+        if (const auto num{std::getenv(RANDOM_CTX_SEED)}) {\n+            uint256 rv;\n+            rv.SetHexDeprecated(num);\n+            return rv;",
      "path": "src/test/util/random.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "c0d508e69ca8896fddf5c4d9516ee9f26f15b8a2",
      "in_reply_to_id": 1700718302,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Force pushed to use `std::abort()` since it seems everyone can get behind that, thanks for the suggestion.",
      "created_at": "2024-08-08T13:56:18Z",
      "updated_at": "2024-08-08T13:57:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709568559",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709568559"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709618160",
      "pull_request_review_id": 2228034963,
      "id": 1709618160,
      "node_id": "PRRC_kwDOABII585l5rPw",
      "diff_hunk": "@@ -46,14 +47,17 @@ bool IsHex(std::string_view str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n-bool IsHexNumber(std::string_view str)\n+std::optional<std::string> TrySanitizeHexNumber(std::string_view input, int result_size)\n {\n-    if (str.substr(0, 2) == \"0x\") str.remove_prefix(2);\n-    for (char c : str) {\n-        if (HexDigit(c) < 0) return false;\n+    input = util::RemovePrefixView(input, \"0x\");\n+    const auto final_size{(result_size < 0) ? input.size() : static_cast<size_t>(result_size)};\n+    if (input.empty() || (input.size() > final_size)) return std::nullopt;\n+    for (char c : input) {\n+        if (HexDigit(c) < 0) return std::nullopt;\n     }\n-    // Return false for empty string or \"0x\".\n-    return str.size() > 0;\n+    std::string result(final_size, '0');\n+    std::copy(input.begin(), input.end(), result.begin() + (final_size - input.size()));\n+    return result;\n }",
      "path": "src/util/strencodings.cpp",
      "position": 29,
      "original_position": 29,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "ee63e211e33a142cdda93343281b5d3625275428",
      "in_reply_to_id": 1709362894,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Will let you decide, there are multiple ways to do this, each would be slightly better in a different scenario.\r\nWhichever produces the cleanest code, choose that :)\r\n\r\nedit: the example I gave didn't actually use the `std::string& input` I've suggested",
      "created_at": "2024-08-08T14:20:11Z",
      "updated_at": "2024-08-08T18:37:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1709618160",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1709618160"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": 50,
      "original_start_line": 50,
      "start_side": "RIGHT",
      "line": 61,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1710130409",
      "pull_request_review_id": 2228661985,
      "id": 1710130409,
      "node_id": "PRRC_kwDOABII585l7oTp",
      "diff_hunk": "@@ -32,10 +32,11 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!TrySanitizeHexNumber(*value)) {\n+        if (auto sanitized_hex{TrySanitizeHexNumber(*value, /*result_size=*/uint256::size() * 2)}) {\n+            opts.minimum_chain_work = UintToArith256(*uint256::FromHex(*sanitized_hex));",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 6,
      "original_position": 6,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "3c794b537fe8fe000d3545704afc17d1d63bdb5f",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: An `Assume()` or `Assert()` around the `FromHex()` result before the `*`-deref might be better here, even though it should work :tm:.\r\n\r\nMaybe linking `TrySanitizeHexNumber` and `FromHex` together in the fuzz-test would be good for enforcing that the former only allows through something acceptable to the latter (although `result_size` must also be correct).\r\n\r\nEdit: An alternative to `Assert`/`Assume` would be to call `FromHex(..).value()` and have a `std::bad_optional_access` be thrown should it ever not have a value.",
      "created_at": "2024-08-08T19:11:29Z",
      "updated_at": "2024-08-08T19:32:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1710130409",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1710130409"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 36,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1710962569",
      "pull_request_review_id": 2229552365,
      "id": 1710962569,
      "node_id": "PRRC_kwDOABII585l-zeJ",
      "diff_hunk": "@@ -32,10 +32,11 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!TrySanitizeHexNumber(*value)) {\n+        if (auto sanitized_hex{TrySanitizeHexNumber(*value, /*result_size=*/uint256::size() * 2)}) {\n+            opts.minimum_chain_work = UintToArith256(*uint256::FromHex(*sanitized_hex));",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 6,
      "original_position": 6,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "3c794b537fe8fe000d3545704afc17d1d63bdb5f",
      "in_reply_to_id": 1710130409,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, even though this assumption seems safe at the moment it's brittle and blindly dereferencing it is not good practice. Will use `.value()` either in next force-push or in the follow-up PR removing `uint256S` completely. Thanks.",
      "created_at": "2024-08-09T07:39:19Z",
      "updated_at": "2024-08-09T07:39:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1710962569",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1710962569"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 36,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1711088525",
      "pull_request_review_id": 2229712005,
      "id": 1711088525,
      "node_id": "PRRC_kwDOABII585l_SON",
      "diff_hunk": "@@ -32,10 +32,11 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!TrySanitizeHexNumber(*value)) {\n+        if (auto sanitized_hex{TrySanitizeHexNumber(*value, /*result_size=*/uint256::size() * 2)}) {\n+            opts.minimum_chain_work = UintToArith256(*uint256::FromHex(*sanitized_hex));",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 6,
      "original_position": 6,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "3c794b537fe8fe000d3545704afc17d1d63bdb5f",
      "in_reply_to_id": 1710130409,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(In the follow-up you can also adjust the error message to explain the new max-length check. Otherwise, this could be confusing:\r\n\r\n`Error: Invalid non-hex (0x1234ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) minimum chain work value specified`)",
      "created_at": "2024-08-09T08:58:11Z",
      "updated_at": "2024-08-09T08:58:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1711088525",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1711088525"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 36,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1711222223",
      "pull_request_review_id": 2229881893,
      "id": 1711222223,
      "node_id": "PRRC_kwDOABII585l_y3P",
      "diff_hunk": "@@ -32,10 +32,11 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage\n     if (auto value{args.GetBoolArg(\"-checkpoints\")}) opts.checkpoints_enabled = *value;\n \n     if (auto value{args.GetArg(\"-minimumchainwork\")}) {\n-        if (!TrySanitizeHexNumber(*value)) {\n+        if (auto sanitized_hex{TrySanitizeHexNumber(*value, /*result_size=*/uint256::size() * 2)}) {\n+            opts.minimum_chain_work = UintToArith256(*uint256::FromHex(*sanitized_hex));",
      "path": "src/node/chainstatemanager_args.cpp",
      "position": 6,
      "original_position": 6,
      "commit_id": "855784d3a0026414159acc42fceeb271f8a28133",
      "original_commit_id": "3c794b537fe8fe000d3545704afc17d1d63bdb5f",
      "in_reply_to_id": 1710130409,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> blindly dereferencing it is not good practice\r\n\r\nIn C++23 we'll be able to chain them properly via something like `auto hex_value = sanitized_hex.and_then(uint256::FromHex);`\r\nIf there's a C++23 checklist somewhere (haven't seen any), we could just leave the dereference as is and fix it after we migrate to C++23 instead.",
      "created_at": "2024-08-09T10:30:14Z",
      "updated_at": "2024-08-09T10:30:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30569#discussion_r1711222223",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1711222223"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30569"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 36,
      "original_line": 36,
      "side": "RIGHT"
    }
  ]
}